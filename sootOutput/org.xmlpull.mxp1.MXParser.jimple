public class org.xmlpull.mxp1.MXParser extends java.lang.Object implements org.xmlpull.v1.XmlPullParser
{
    protected static final java.lang.String XML_URI;
    protected static final java.lang.String XMLNS_URI;
    protected static final java.lang.String FEATURE_XML_ROUNDTRIP;
    protected static final java.lang.String FEATURE_NAMES_INTERNED;
    protected static final java.lang.String PROPERTY_XMLDECL_VERSION;
    protected static final java.lang.String PROPERTY_XMLDECL_STANDALONE;
    protected static final java.lang.String PROPERTY_XMLDECL_CONTENT;
    protected static final java.lang.String PROPERTY_LOCATION;
    protected boolean allStringsInterned;
    private static final boolean TRACE_SIZING;
    protected boolean processNamespaces;
    protected boolean roundtripSupported;
    protected java.lang.String location;
    protected int lineNumber;
    protected int columnNumber;
    protected boolean seenRoot;
    protected boolean reachedEnd;
    protected int eventType;
    protected boolean emptyElementTag;
    protected int depth;
    protected char[][] elRawName;
    protected int[] elRawNameEnd;
    protected int[] elRawNameLine;
    protected java.lang.String[] elName;
    protected java.lang.String[] elPrefix;
    protected java.lang.String[] elUri;
    protected int[] elNamespaceCount;
    protected int attributeCount;
    protected java.lang.String[] attributeName;
    protected int[] attributeNameHash;
    protected java.lang.String[] attributePrefix;
    protected java.lang.String[] attributeUri;
    protected java.lang.String[] attributeValue;
    protected int namespaceEnd;
    protected java.lang.String[] namespacePrefix;
    protected int[] namespacePrefixHash;
    protected java.lang.String[] namespaceUri;
    protected int entityEnd;
    protected java.lang.String[] entityName;
    protected char[][] entityNameBuf;
    protected java.lang.String[] entityReplacement;
    protected char[][] entityReplacementBuf;
    protected int[] entityNameHash;
    protected static final int READ_CHUNK_SIZE;
    protected java.io.Reader reader;
    protected java.lang.String inputEncoding;
    protected java.io.InputStream inputStream;
    protected int bufLoadFactor;
    protected char[] buf;
    protected int bufSoftLimit;
    protected boolean preventBufferCompaction;
    protected int bufAbsoluteStart;
    protected int bufStart;
    protected int bufEnd;
    protected int pos;
    protected int posStart;
    protected int posEnd;
    protected char[] pc;
    protected int pcStart;
    protected int pcEnd;
    protected boolean usePC;
    protected boolean seenStartTag;
    protected boolean seenEndTag;
    protected boolean pastEndTag;
    protected boolean seenAmpersand;
    protected boolean seenMarkup;
    protected boolean seenDocdecl;
    protected boolean tokenize;
    protected java.lang.String text;
    protected java.lang.String entityRefName;
    protected java.lang.String xmlDeclVersion;
    protected java.lang.Boolean xmlDeclStandalone;
    protected java.lang.String xmlDeclContent;
    protected char[] charRefOneCharBuf;
    protected static final char[] VERSION;
    protected static final char[] NCODING;
    protected static final char[] TANDALONE;
    protected static final char[] YES;
    protected static final char[] NO;
    protected static final int LOOKUP_MAX;
    protected static final char LOOKUP_MAX_CHAR;
    protected static boolean[] lookupNameStartChar;
    protected static boolean[] lookupNameChar;

    protected void resetStringCache()
    {
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        return;
    }

    protected java.lang.String newString(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        java.lang.String $r0;
        org.xmlpull.mxp1.MXParser r2;

        r2 := @this: org.xmlpull.mxp1.MXParser;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        return $r0;
    }

    protected java.lang.String newStringIntern(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        java.lang.String $r0, $r2;
        org.xmlpull.mxp1.MXParser r3;

        r3 := @this: org.xmlpull.mxp1.MXParser;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String intern()>();

        return $r2;
    }

    protected void ensureElementsCapacity()
    {
        java.lang.String[] $r1, $r9, $r11, $r12, $r13, $r14, $r15, $r16;
        char[][] $r2, $r4;
        int[] $r3, $r5, $r6, $r7, $r8, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z2, $z3;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        if $r1 == null goto label01;

        $r16 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $i6 = lengthof $r16;

        goto label02;

     label01:
        $i6 = 0;

     label02:
        i0 = $i6;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i2 = $i1 + 1;

        if $i2 < $i6 goto label15;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if $i3 < 7 goto label03;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i7 = 2 * $i4;

        goto label04;

     label03:
        $i7 = 8;

     label04:
        $i5 = $i7 + 2;

        if i0 <= 0 goto label05;

        $z3 = 1;

        $z2 = 1;

        goto label06;

     label05:
        $z3 = 0;

        $z2 = 0;

     label06:
        z0 = $z2;

        $r15 = newarray (java.lang.String)[$i5];

        if $z3 == 0 goto label07;

        $r13 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r15, 0, i0);

     label07:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName> = $r15;

        $r14 = newarray (java.lang.String)[$i5];

        if z0 == 0 goto label08;

        $r11 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r14, 0, i0);

     label08:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix> = $r14;

        $r12 = newarray (java.lang.String)[$i5];

        if z0 == 0 goto label09;

        $r9 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r12, 0, i0);

     label09:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri> = $r12;

        $r10 = newarray (int)[$i5];

        if z0 == 0 goto label10;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r10, 0, i0);

        goto label11;

     label10:
        $r10[0] = 0;

     label11:
        r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount> = $r10;

        $r8 = newarray (int)[$i5];

        if z0 == 0 goto label12;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r8, 0, i0);

     label12:
        r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd> = $r8;

        $r6 = newarray (int)[$i5];

        if z0 == 0 goto label13;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r6, 0, i0);

     label13:
        r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine> = $r6;

        $r4 = newarray (char[])[$i5];

        if z0 == 0 goto label14;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, i0);

     label14:
        r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName> = $r4;

     label15:
        return;
    }

    protected void ensureAttributesCapacity(int)
    {
        java.lang.String[] $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int[] r2, $r3;
        int i0, i1, i2, $i3, $i4;
        boolean z0, $z1, $z3, $z4;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        if $r1 == null goto label01;

        $r12 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $i3 = lengthof $r12;

        goto label02;

     label01:
        $i3 = 0;

     label02:
        i0 = $i3;

        if i1 < $i3 goto label12;

        if i1 <= 7 goto label03;

        $i4 = 2 * i1;

        goto label04;

     label03:
        $i4 = 8;

     label04:
        i2 = $i4;

        if i0 <= 0 goto label05;

        $z4 = 1;

        $z3 = 1;

        goto label06;

     label05:
        $z4 = 0;

        $z3 = 0;

     label06:
        z0 = $z4;

        $r11 = newarray (java.lang.String)[i2];

        if $z3 == 0 goto label07;

        $r9 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, 0, i0);

     label07:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName> = $r11;

        $r10 = newarray (java.lang.String)[i2];

        if z0 == 0 goto label08;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r10, 0, i0);

     label08:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix> = $r10;

        $r8 = newarray (java.lang.String)[i2];

        if z0 == 0 goto label09;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r8, 0, i0);

     label09:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri> = $r8;

        $r6 = newarray (java.lang.String)[i2];

        if z0 == 0 goto label10;

        $r4 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, 0, i0);

     label10:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue> = $r6;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z1 != 0 goto label12;

        r2 = newarray (int)[i2];

        if z0 == 0 goto label11;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, i0);

     label11:
        r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash> = r2;

     label12:
        return;
    }

    protected void ensureNamespacesCapacity(int)
    {
        java.lang.String[] $r1, $r2, $r6, $r7, $r8, $r9, $r10;
        int[] r3, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        if $r1 == null goto label1;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $i5 = lengthof $r10;

        goto label2;

     label1:
        $i5 = 0;

     label2:
        if i0 < $i5 goto label7;

        if i0 <= 7 goto label3;

        $i6 = 2 * i0;

        goto label4;

     label3:
        $i6 = 8;

     label4:
        i1 = $i6;

        $r8 = newarray (java.lang.String)[$i6];

        $r9 = newarray (java.lang.String)[$i6];

        $r2 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        if $r2 == null goto label5;

        $r6 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r8, 0, $i3);

        $r7 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r9, 0, $i4);

     label5:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix> = $r8;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri> = $r9;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z0 != 0 goto label7;

        r3 = newarray (int)[i1];

        $r4 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        if $r4 == null goto label6;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i2);

     label6:
        r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash> = r3;

     label7:
        return;
    }

    protected static final int fastHash(char[], int, int)
    {
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i13, i15, $i16, $i17, $i18, $i19;
        char $c4, $c8, $c12, c14;
        char[] r0;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        c14 = r0[i1];

        $i16 = (int) c14;

        $i5 = $i16 << 7;

        $i2 = i1 + i0;

        $i3 = $i2 - 1;

        $c4 = r0[$i3];

        $i17 = (int) $c4;

        i15 = $i5 + $i17;

        if i0 <= 16 goto label2;

        $i13 = i15 << 7;

        $i10 = i0 / 4;

        $i11 = i1 + $i10;

        $c12 = r0[$i11];

        $i18 = (int) $c12;

        i15 = $i13 + $i18;

     label2:
        if i0 <= 8 goto label3;

        $i9 = i15 << 7;

        $i6 = i0 / 2;

        $i7 = i1 + $i6;

        $c8 = r0[$i7];

        $i19 = (int) $c8;

        i15 = $i9 + $i19;

     label3:
        return i15;
    }

    protected void ensureEntityCapacity()
    {
        java.lang.String[] $r2, $r6, $r8, $r10, $r12;
        char[][] $r1, $r7, $r9, $r11, $r13, $r14;
        int[] r3, $r4, $r5;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        if $r1 == null goto label1;

        $r14 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        $i9 = lengthof $r14;

        goto label2;

     label1:
        $i9 = 0;

     label2:
        $i0 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        if $i0 < $i9 goto label7;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        if $i1 <= 7 goto label3;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $i10 = 2 * $i8;

        goto label4;

     label3:
        $i10 = 8;

     label4:
        i2 = $i10;

        $r10 = newarray (java.lang.String)[$i10];

        $r11 = newarray (char[])[$i10];

        $r12 = newarray (java.lang.String)[$i10];

        $r13 = newarray (char[])[$i10];

        $r2 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName>;

        if $r2 == null goto label5;

        $r6 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r10, 0, $i4);

        $r7 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r11, 0, $i5);

        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement>;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r12, 0, $i6);

        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r13, 0, $i7);

     label5:
        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName> = $r10;

        r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf> = $r11;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement> = $r12;

        r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf> = $r13;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z0 != 0 goto label7;

        r3 = newarray (int)[i2];

        $r4 = r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash>;

        if $r4 == null goto label6;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i3);

     label6:
        r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash> = r3;

     label7:
        return;
    }

    protected void reset()
    {
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String location> = null;

        r0.<org.xmlpull.mxp1.MXParser: int lineNumber> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int columnNumber> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenRoot> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int depth> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int attributeCount> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int entityEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader> = null;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String inputEncoding> = null;

        r0.<org.xmlpull.mxp1.MXParser: boolean preventBufferCompaction> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int bufStart> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int bufEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pos> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenStartTag> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenEndTag> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean pastEndTag> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenAmpersand> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenDocdecl> = 0;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String xmlDeclVersion> = null;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.Boolean xmlDeclStandalone> = null;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String xmlDeclContent> = null;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void resetStringCache()>();

        return;
    }

    public void <init>()
    {
        long $l0, $l6;
        short $s8, $s9;
        byte $b1, $b7;
        int $i2, $i3, $i4, $i5, $i10, $i11;
        java.lang.Runtime $r1, $r4;
        char[] $r2, $r3, $r5, $r6;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.mxp1.MXParser: int bufLoadFactor> = 95;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l0 = virtualinvoke $r1.<java.lang.Runtime: long freeMemory()>();

        $b1 = $l0 cmp 1000000L;

        $i10 = (int) $b1;

        if $i10 <= 0 goto label1;

        $s8 = 8192;

        goto label2;

     label1:
        $s8 = 256;

     label2:
        $r2 = newarray (char)[$s8];

        r0.<org.xmlpull.mxp1.MXParser: char[] buf> = $r2;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int bufLoadFactor>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i2 = lengthof $r3;

        $i4 = $i3 * $i2;

        $i5 = $i4 / 100;

        r0.<org.xmlpull.mxp1.MXParser: int bufSoftLimit> = $i5;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l6 = virtualinvoke $r4.<java.lang.Runtime: long freeMemory()>();

        $b7 = $l6 cmp 1000000L;

        $i11 = (int) $b7;

        if $i11 <= 0 goto label3;

        $s9 = 8192;

        goto label4;

     label3:
        $s9 = 64;

     label4:
        $r5 = newarray (char)[$s9];

        r0.<org.xmlpull.mxp1.MXParser: char[] pc> = $r5;

        $r6 = newarray (char)[1];

        r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf> = $r6;

        return;
    }

    public void setFeature(java.lang.String, boolean) throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.StringBuffer $r6, $r7, $r8;
        int $i0;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r9;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.IllegalArgumentException $r14;
        org.xmlpull.v1.XmlPullParserException $r5, $r11, $r12, $r13;
        org.xmlpull.mxp1.MXParser r10;

        r10 := @this: org.xmlpull.mxp1.MXParser;

        r0 := @parameter0: java.lang.String;

        z4 := @parameter1: boolean;

        if r0 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("feature name should not be null");

        throw $r14;

     label1:
        $r1 = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        $i0 = r10.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 0 goto label2;

        $r13 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("namespace processing feature can only be changed before parsing", r10, null);

        throw $r13;

     label2:
        r10.<org.xmlpull.mxp1.MXParser: boolean processNamespaces> = z4;

        goto label7;

     label3:
        $r2 = "http://xmlpull.org/v1/doc/features.html#names-interned";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label4;

        if z4 == 0 goto label7;

        $r12 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("interning names in this implementation is not supported");

        throw $r12;

     label4:
        $r3 = "http://xmlpull.org/v1/doc/features.html#process-docdecl";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label5;

        if z4 == 0 goto label7;

        $r11 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r11.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("processing DOCDECL is not supported");

        throw $r11;

     label5:
        $r4 = "http://xmlpull.org/v1/doc/features.html#xml-roundtrip";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label6;

        r10.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported> = z4;

        goto label7;

     label6:
        $r5 = new org.xmlpull.v1.XmlPullParserException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unsupported feature ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label7:
        return;
    }

    public boolean getFeature(java.lang.String)
    {
        java.lang.IllegalArgumentException $r6;
        java.lang.String r0, $r1, $r2, $r3, $r4;
        org.xmlpull.mxp1.MXParser r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r5 := @this: org.xmlpull.mxp1.MXParser;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("feature name should not be null");

        throw $r6;

     label1:
        $r1 = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $z5 = r5.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        return $z5;

     label2:
        $r2 = "http://xmlpull.org/v1/doc/features.html#names-interned";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r3 = "http://xmlpull.org/v1/doc/features.html#process-docdecl";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        $r4 = "http://xmlpull.org/v1/doc/features.html#xml-roundtrip";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label5;

        $z4 = r5.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        return $z4;

     label5:
        return 0;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r2;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        java.lang.Object r9;
        java.lang.String r0, $r1, $r7, $r10;
        org.xmlpull.mxp1.MXParser r8;
        boolean $z0;

        r8 := @this: org.xmlpull.mxp1.MXParser;

        r0 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.Object;

        $r1 = "http://xmlpull.org/v1/doc/properties.html#location";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r10 = (java.lang.String) r9;

        r8.<org.xmlpull.mxp1.MXParser: java.lang.String location> = $r10;

        goto label2;

     label1:
        $r2 = new org.xmlpull.v1.XmlPullParserException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unsupported property: \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        return;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.lang.IllegalArgumentException $r10;
        java.lang.Boolean $r8;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r6, $r7, $r9;
        org.xmlpull.mxp1.MXParser r5;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.xmlpull.mxp1.MXParser;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("property name should not be null");

        throw $r10;

     label1:
        $r1 = "http://xmlpull.org/v1/doc/properties.html#xmldecl-version";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r9 = r5.<org.xmlpull.mxp1.MXParser: java.lang.String xmlDeclVersion>;

        return $r9;

     label2:
        $r2 = "http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r8 = r5.<org.xmlpull.mxp1.MXParser: java.lang.Boolean xmlDeclStandalone>;

        return $r8;

     label3:
        $r3 = "http://xmlpull.org/v1/doc/properties.html#xmldecl-content";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        $r7 = r5.<org.xmlpull.mxp1.MXParser: java.lang.String xmlDeclContent>;

        return $r7;

     label4:
        $r4 = "http://xmlpull.org/v1/doc/properties.html#location";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label5;

        $r6 = r5.<org.xmlpull.mxp1.MXParser: java.lang.String location>;

        return $r6;

     label5:
        return null;
    }

    public void setInput(java.io.Reader) throws org.xmlpull.v1.XmlPullParserException
    {
        java.io.Reader r1;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r1 := @parameter0: java.io.Reader;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void reset()>();

        r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader> = r1;

        return;
    }

    public void setInput(java.io.InputStream, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.IllegalArgumentException $r5;
        java.io.InputStreamReader $r3, $r4, r14;
        org.xmlpull.v1.XmlPullParserException $r7;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12;
        java.lang.String r2, $r13;
        org.xmlpull.mxp1.MXParser r1;
        java.io.UnsupportedEncodingException $r6;
        java.io.InputStream r0;

        r1 := @this: org.xmlpull.mxp1.MXParser;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input stream can not be null");

        throw $r5;

     label1:
        r1.<org.xmlpull.mxp1.MXParser: java.io.InputStream inputStream> = r0;

     label2:
        if r2 == null goto label3;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r0, r2);

        r14 = $r4;

        goto label4;

     label3:
        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r0, "UTF-8");

        r14 = $r3;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not create reader for encoding ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r13, r1, $r6);

        throw $r7;

     label6:
        virtualinvoke r1.<org.xmlpull.mxp1.MXParser: void setInput(java.io.Reader)>(r14);

        r1.<org.xmlpull.mxp1.MXParser: java.lang.String inputEncoding> = r2;

        return;

        catch java.io.UnsupportedEncodingException from label2 to label4 with label5;
    }

    public java.lang.String getInputEncoding()
    {
        java.lang.String $r1;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String inputEncoding>;

        return $r1;
    }

    public void defineEntityReplacementText(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r2, $r8;
        char[][] $r5, $r9, $r11, $r12;
        int[] $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r1, $r4, r7;
        boolean $z0;
        char[] $r3, $r6, $r10, $r13, $r14;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensureEntityCapacity()>();

        $r2 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r3, 0, $i1);

        $r2[$i0] = $r4;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r6 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r5[$i2] = $r6;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r8[$i3] = r7;

        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r10 = virtualinvoke r7.<java.lang.String: char[] toCharArray()>();

        $r9[$i4] = $r10;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z0 != 0 goto label1;

        $r15 = r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash>;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r11 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r14 = $r11[$i7];

        $r12 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $r13 = $r12[$i8];

        $i9 = lengthof $r13;

        $i11 = staticinvoke <org.xmlpull.mxp1.MXParser: int fastHash(char[],int,int)>($r14, 0, $i9);

        $r15[$i10] = $i11;

     label1:
        $i5 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        $i6 = $i5 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int entityEnd> = $i6;

        return;
    }

    public int getNamespaceCount(int) throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.IllegalArgumentException $r1;
        int[] $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3;
        java.lang.String $r7;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i0 := @parameter0: int;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 == 0 goto label1;

        if i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        if i0 < 0 goto label3;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if i0 <= $i2 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("allowed namespace depth 0..");

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        $i3 = $r8[i0];

        return $i3;
    }

    public java.lang.String getNamespacePrefix(int) throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r8;
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2;
        java.lang.String $r7, $r9;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        if i0 >= $i1 goto label1;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $r9 = $r8[i0];

        return $r9;

     label1:
        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("position ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" exceeded number of available namespaces ");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public java.lang.String getNamespaceUri(int) throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r8;
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2;
        java.lang.String $r7, $r9;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        if i0 >= $i1 goto label1;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        $r9 = $r8[i0];

        return $r9;

     label1:
        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("position ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" exceeded number of available namespaces ");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public java.lang.String getNamespace(java.lang.String)
    {
        java.lang.String[] $r2, $r4, $r8, $r10;
        int $i0, $i1, i2, i3, $i5, $i7;
        java.lang.String r0, $r3, $r5, $r6, $r7, $r9, $r11;
        boolean $z0, $z1, $z2;
        org.xmlpull.mxp1.MXParser r1;

        r1 := @this: org.xmlpull.mxp1.MXParser;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label5;

        $i1 = r1.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label3;

        $r8 = r1.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $r9 = $r8[i2];

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        $r10 = r1.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        $r11 = $r10[i2];

        return $r11;

     label2:
        $i5 = (int) -1;

        i2 = i2 + $i5;

        goto label1;

     label3:
        $r6 = "xml";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        return "http://www.w3.org/XML/1998/namespace";

     label4:
        $r7 = "xmlns";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label8;

        return "http://www.w3.org/2000/xmlns/";

     label5:
        $i0 = r1.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        i3 = $i0 - 1;

     label6:
        if i3 < 0 goto label8;

        $r2 = r1.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $r3 = $r2[i3];

        if $r3 != null goto label7;

        $r4 = r1.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        $r5 = $r4[i3];

        return $r5;

     label7:
        $i7 = (int) -1;

        i3 = i3 + $i7;

        goto label6;

     label8:
        return null;
    }

    public int getDepth()
    {
        int $i0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        return $i0;
    }

    private static int findFragment(int, char[], int, int)
    {
        char c4;
        int i0, i1, $i2, $i3, $i5, i6, i7, i8, $i10, $i11;
        char[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i6 := @parameter2: int;

        i1 := @parameter3: int;

        if i6 >= i0 goto label2;

        i7 = i0;

        if i0 <= i1 goto label1;

        i7 = i1;

     label1:
        return i7;

     label2:
        $i2 = i1 - i6;

        if $i2 <= 65 goto label3;

        i6 = i1 - 10;

     label3:
        i8 = i6 + 1;

     label4:
        $i10 = (int) -1;

        i8 = i8 + $i10;

        if i8 <= i0 goto label7;

        $i3 = i1 - i8;

        if $i3 <= 65 goto label5;

        goto label7;

     label5:
        c4 = r0[i8];

        $i11 = (int) c4;

        if $i11 != 60 goto label6;

        $i5 = i6 - i8;

        if $i5 <= 10 goto label6;

        goto label7;

     label6:
        goto label4;

     label7:
        return i8;
    }

    public java.lang.String getPositionDescription()
    {
        java.lang.String[] $r25;
        java.lang.StringBuffer $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r4, $r10, $r13, $r20, r22, $r26, $r27, $r28;
        char[] $r16, $r21;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r22 = null;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        if $i1 > $i0 goto label3;

        $r16 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i6 = staticinvoke <org.xmlpull.mxp1.MXParser: int findFragment(int,char[],int,int)>(0, $r16, $i5, $i4);

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        if $i6 >= $i7 goto label1;

        $r20 = new java.lang.String;

        $r21 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i10 = $i9 - $i6;

        specialinvoke $r20.<java.lang.String: void <init>(char[],int,int)>($r21, $i6, $i10);

        r22 = $r20;

     label1:
        $i8 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        if $i8 > 0 goto label2;

        if $i6 <= 0 goto label3;

     label2:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r25 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        $r26 = $r25[$i11];

        $r1 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        if r22 == null goto label4;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" seen ");

        $r13 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(java.lang.String)>(r22);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r27 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label4:
        $r27 = "";

     label5:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r4 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String location>;

        if $r4 == null goto label6;

        $r28 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String location>;

        goto label7;

     label6:
        $r28 = "";

     label7:
        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $i2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getLineNumber()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getColumnNumber()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public int getLineNumber()
    {
        int $i0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int lineNumber>;

        return $i0;
    }

    public int getColumnNumber()
    {
        int $i0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int columnNumber>;

        return $i0;
    }

    public boolean isWhitespace() throws org.xmlpull.v1.XmlPullParserException
    {
        int $i0, $i1, $i3, $i5, $i6, i7, i8;
        boolean $z0, $z1, $z2;
        char $c2, $c4;
        org.xmlpull.v1.XmlPullParserException $r3;
        char[] $r1, $r2;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 4 goto label01;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i5 != 5 goto label09;

     label01:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z0 == 0 goto label05;

        i7 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

     label02:
        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        if i7 >= $i3 goto label04;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $c4 = $r2[i7];

        $z2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>($c4);

        if $z2 != 0 goto label03;

        return 0;

     label03:
        i7 = i7 + 1;

        goto label02;

     label04:
        return 1;

     label05:
        i8 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

     label06:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        if i8 >= $i1 goto label08;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $c2 = $r1[i8];

        $z1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>($c2);

        if $z1 != 0 goto label07;

        return 0;

     label07:
        i8 = i8 + 1;

        goto label06;

     label08:
        return 1;

     label09:
        $i6 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i6 != 7 goto label10;

        return 1;

     label10:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("no content available to check for white spaces");

        throw $r3;
    }

    public java.lang.String getText()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r1, $r2, $r4, $r5, $r7;
        boolean $z0;
        char[] $r3, $r6;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i1 != 1 goto label2;

     label1:
        return null;

     label2:
        $i2 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i2 != 6 goto label3;

        $r4 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String text>;

        return $r4;

     label3:
        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String text>;

        if $r1 != null goto label6;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z0 == 0 goto label4;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i3 == 2 goto label4;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i4 != 3 goto label5;

     label4:
        $r5 = new java.lang.String;

        $r6 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i12 = $i10 - $i11;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r6, $i9, $i12);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = $r5;

        goto label6;

     label5:
        $r2 = new java.lang.String;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i7 = $i6 - $i5;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, $i8, $i7);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = $r2;

     label6:
        $r7 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String text>;

        return $r7;
    }

    public char[] getTextCharacters(int[])
    {
        int[] r1;
        boolean $z0;
        java.lang.StringBuffer $r4, $r5, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i27;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r11;
        char[] $r7, $r8, $r9;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r1 := @parameter0: int[];

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 4 goto label2;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z0 == 0 goto label1;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        r1[0] = $i16;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i19 = $i18 - $i17;

        r1[1] = $i19;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        return $r8;

     label1:
        $i12 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        r1[0] = $i12;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i15 = $i14 - $i13;

        r1[1] = $i15;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        return $r7;

     label2:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i1 == 2 goto label3;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i2 == 3 goto label3;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i3 == 5 goto label3;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i4 == 9 goto label3;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i5 == 6 goto label3;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i6 == 8 goto label3;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i7 == 7 goto label3;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i8 != 10 goto label4;

     label3:
        $i20 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        r1[0] = $i20;

        $i21 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i22 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i23 = $i21 - $i22;

        r1[1] = $i23;

        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        return $r9;

     label4:
        $i9 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i9 == 0 goto label5;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i10 != 1 goto label6;

     label5:
        $i25 = (int) -1;

        r1[1] = $i25;

        $i27 = (int) -1;

        r1[0] = $i27;

        return null;

     label6:
        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unknown text eventType: ");

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r11;
    }

    public java.lang.String getNamespace()
    {
        java.lang.String[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r4;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, $z1;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 2 goto label3;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z1 == 0 goto label1;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r3 = $r2[$i3];

        goto label2;

     label1:
        $r3 = "";

     label2:
        return $r3;

     label3:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i1 != 3 goto label6;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 == 0 goto label4;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri>;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r4 = $r1[$i2];

        goto label5;

     label4:
        $r4 = "";

     label5:
        return $r4;

     label6:
        return null;
    }

    public java.lang.String getName()
    {
        java.lang.String[] $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r1, $r2, $r4, $r6, $r8;
        char[] $r3;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 2 goto label1;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r8 = $r7[$i8];

        return $r8;

     label1:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i1 != 3 goto label2;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r6 = $r5[$i7];

        return $r6;

     label2:
        $i2 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i2 != 6 goto label4;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        if $r1 != null goto label3;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i5 = $i4 - $i3;

        $r4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r3, $i6, $i5);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName> = $r4;

     label3:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        return $r2;

     label4:
        return null;
    }

    public java.lang.String getPrefix()
    {
        java.lang.String[] $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r4;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 2 goto label1;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r4 = $r3[$i3];

        return $r4;

     label1:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i1 != 3 goto label2;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r2 = $r1[$i2];

        return $r2;

     label2:
        return null;
    }

    public boolean isEmptyElementTag() throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r1;
        int $i0;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("parser must be on START_TAG to check for empty element", r0, null);

        throw $r1;

     label1:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag>;

        return $z0;
    }

    public int getAttributeCount()
    {
        int $i0, $i1, $i3;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        return $i1;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r10;
        java.lang.String[] $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7, $r9;
        boolean $z0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("only START_TAG can have attributes");

        throw $r10;

     label1:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 != 0 goto label2;

        return "";

     label2:
        if i1 < 0 goto label3;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i1 < $i4 goto label4;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute position must be 0..");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r9 = $r8[i1];

        return $r9;
    }

    public java.lang.String getAttributeName(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r10;
        java.lang.String[] $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7, $r9;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("only START_TAG can have attributes");

        throw $r10;

     label1:
        if i1 < 0 goto label2;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i1 < $i4 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute position must be 0..");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label3:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r9 = $r8[i1];

        return $r9;
    }

    public java.lang.String getAttributePrefix(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r10;
        java.lang.String[] $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7, $r9;
        boolean $z0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("only START_TAG can have attributes");

        throw $r10;

     label1:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 != 0 goto label2;

        return null;

     label2:
        if i1 < 0 goto label3;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i1 < $i4 goto label4;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute position must be 0..");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        $r9 = $r8[i1];

        return $r9;
    }

    public java.lang.String getAttributeType(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("only START_TAG can have attributes");

        throw $r8;

     label1:
        if i1 < 0 goto label2;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i1 < $i4 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute position must be 0..");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label3:
        return "CDATA";
    }

    public boolean isAttributeDefault(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("only START_TAG can have attributes");

        throw $r8;

     label1:
        if i1 < 0 goto label2;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i1 < $i4 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute position must be 0..");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label3:
        return 0;
    }

    public java.lang.String getAttributeValue(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r10;
        java.lang.String[] $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7, $r9;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("only START_TAG can have attributes");

        throw $r10;

     label1:
        if i1 < 0 goto label2;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i1 < $i4 goto label3;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute position must be 0..");

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label3:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        $r9 = $r8[i1];

        return $r9;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        java.lang.IndexOutOfBoundsException $r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r2, $r4, $r7, $r9, $r11, $r13;
        java.lang.StringBuffer $r17, $r18, $r20;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.String r1, $r3, $r5, $r8, $r10, $r12, $r14, $r19, $r21, r22;
        java.lang.IllegalArgumentException $r6, $r15;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r22 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 2 goto label01;

        $r16 = new java.lang.IndexOutOfBoundsException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("only START_TAG can have attributes");

        $r19 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getPositionDescription()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label01:
        if r1 != null goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attribute name can not be null");

        throw $r15;

     label02:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 == 0 goto label08;

        if r22 != null goto label03;

        r22 = "";

     label03:
        i3 = 0;

     label04:
        $i4 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i3 >= $i4 goto label07;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r8 = $r7[i3];

        if r22 == $r8 goto label05;

        $r13 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r14 = $r13[i3];

        $z3 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label06;

     label05:
        $r9 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r10 = $r9[i3];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label06;

        $r11 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        $r12 = $r11[i3];

        return $r12;

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        goto label13;

     label08:
        if r22 == null goto label09;

        $i2 = virtualinvoke r22.<java.lang.String: int length()>();

        if $i2 != 0 goto label09;

        r22 = null;

     label09:
        if r22 == null goto label10;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("when namespaces processing is disabled attribute namespace must be null");

        throw $r6;

     label10:
        i5 = 0;

     label11:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i5 >= $i1 goto label13;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r3 = $r2[i5];

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label12;

        $r4 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        $r5 = $r4[i5];

        return $r5;

     label12:
        i5 = i5 + 1;

        goto label11;

     label13:
        return null;
    }

    public int getEventType() throws org.xmlpull.v1.XmlPullParserException
    {
        int $i0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        return $i0;
    }

    public void require(int, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r1, $r4, $r5, $r6, $r9, $r10, $r12, $r13, $r20, $r21, $r23, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r41, $r42, $r43, $r45, $r46, $r49, $r50, $r54, $r58, $r60, $r62, $r64, $r65, $r67, $r68;
        java.lang.String r2, r3, $r7, $r8, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r28, $r38, $r39, $r44, $r47, $r52, $r53, $r55, $r56, $r57, $r59, $r61, $r63, $r66, $r69;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.xmlpull.v1.XmlPullParserException $r40, $r48;
        java.lang.String[] $r27, $r51;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 != 0 goto label01;

        if r3 == null goto label01;

        $r40 = new org.xmlpull.v1.XmlPullParserException;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("processing namespaces must be enabled on parser (or factory) to have possible namespaces declared on elements");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (position:");

        $r44 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getPositionDescription()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r40.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r47);

        throw $r40;

     label01:
        $i1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getEventType()>();

        if i0 != $i1 goto label03;

        if r3 == null goto label02;

        $r39 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace()>();

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z6 == 0 goto label03;

     label02:
        if r2 == null goto label18;

        $r38 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getName()>();

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z5 != 0 goto label18;

     label03:
        $r48 = new org.xmlpull.v1.XmlPullParserException;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected event ");

        $r51 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $r52 = $r51[i0];

        $r1 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        if r2 == null goto label04;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with name \'");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r53 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label05;

     label04:
        $r53 = "";

     label05:
        $r54 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        if r3 == null goto label06;

        if r2 == null goto label06;

        $r55 = " and";

        goto label07;

     label06:
        $r55 = "";

     label07:
        $r4 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        if r3 == null goto label08;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with namespace \'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r56 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label09;

     label08:
        $r56 = "";

     label09:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" but got");

        $i2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getEventType()>();

        if i0 == $i2 goto label10;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r27 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $i3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getEventType()>();

        $r28 = $r27[$i3];

        $r29 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r57 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label11;

     label10:
        $r57 = "";

     label11:
        $r58 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        if r2 == null goto label12;

        $r18 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getName()>();

        if $r18 == null goto label12;

        $r19 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getName()>();

        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z4 != 0 goto label12;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" name \'");

        $r22 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r59 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label13;

     label12:
        $r59 = "";

     label13:
        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);

        if r3 == null goto label14;

        if r2 == null goto label14;

        $r14 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getName()>();

        if $r14 == null goto label14;

        $r15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getName()>();

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label14;

        $r16 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace()>();

        if $r16 == null goto label14;

        $r17 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace()>();

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z3 != 0 goto label14;

        $r61 = " and";

        goto label15;

     label14:
        $r61 = "";

     label15:
        $r62 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        if r3 == null goto label16;

        $r7 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace()>();

        if $r7 == null goto label16;

        $r8 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label16;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" namespace \'");

        $r11 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r63 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label17;

     label16:
        $r63 = "";

     label17:
        $r64 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (position:");

        $r66 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getPositionDescription()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r48.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r69);

        throw $r48;

     label18:
        return;
    }

    public void skipSubTree() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0, i1, $i3;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void require(int,java.lang.String,java.lang.String)>(2, null, null);

        i1 = 1;

     label1:
        if i1 <= 0 goto label4;

        $i0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int next()>();

        if $i0 != 3 goto label2;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label3;

     label2:
        if $i0 != 2 goto label3;

        i1 = i1 + 1;

     label3:
        goto label1;

     label4:
        return;
    }

    public java.lang.String nextText() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String[] $r6;
        org.xmlpull.v1.XmlPullParserException $r1, $r3, $r10;
        java.lang.StringBuffer $r4, $r5, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r7, $r9;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getEventType()>();

        if $i0 == 2 goto label1;

        $r10 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r10.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("parser must be on START_TAG to read next text", r0, null);

        throw $r10;

     label1:
        $i1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int next()>();

        if $i1 != 4 goto label3;

        $r2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getText()>();

        $i2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int next()>();

        if $i2 == 3 goto label2;

        $r3 = new org.xmlpull.v1.XmlPullParserException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TEXT must be immediately followed by END_TAG and not ");

        $r6 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $i3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getEventType()>();

        $r7 = $r6[$i3];

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r9, r0, null);

        throw $r3;

     label2:
        return $r2;

     label3:
        if $i1 != 3 goto label4;

        return "";

     label4:
        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("parser must be on START_TAG or TEXT to read text", r0, null);

        throw $r1;
    }

    public int nextTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String[] $r4;
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.StringBuffer $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r5, $r7;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int next()>();

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 4 goto label1;

        $z0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isWhitespace()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int next()>();

     label1:
        $i4 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i4 == 2 goto label2;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i2 == 3 goto label2;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected START_TAG or END_TAG not ");

        $r4 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $i3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int getEventType()>();

        $r5 = $r4[$i3];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r7, r0, null);

        throw $r1;

     label2:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        return $i1;
    }

    public int next() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r0.<org.xmlpull.mxp1.MXParser: boolean tokenize> = 0;

        $i0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int nextImpl()>();

        return $i0;
    }

    public int nextToken() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r0.<org.xmlpull.mxp1.MXParser: boolean tokenize> = 1;

        $i0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int nextImpl()>();

        return $i0;
    }

    protected int nextImpl() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r13, $r16, $r17, $r23, $r25, $r29, $r31, $r35, $r37, $r39;
        org.xmlpull.mxp1.MXParser r0;
        int[] $r33;
        org.xmlpull.v1.XmlPullParserException $r36, $r38, $r40, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i45, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, i58, i59, i60, i61, $i62, $i63, $i64, $i66, $i67, $i68, $i69, $i70, $i71, $i72;
        java.lang.String $r10, $r14, $r15, $r18, $r20, $r24, $r26, $r30, $r32;
        char[] $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r19, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, z25, z26, z27, $z28, z29, z30, z31, z32, z33, z34, z35, z36, z37, z38, z39, z40, z41;
        char $c35, $c43, $c46, c55, $c65;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = null;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 0;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        r0.<org.xmlpull.mxp1.MXParser: int bufStart> = $i0;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean pastEndTag>;

        if $z0 == 0 goto label01;

        r0.<org.xmlpull.mxp1.MXParser: boolean pastEndTag> = 0;

        $i51 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i52 = $i51 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int depth> = $i52;

        $r33 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        $i53 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i54 = $r33[$i53];

        r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd> = $i54;

     label01:
        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag>;

        if $z1 == 0 goto label02;

        r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag> = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean pastEndTag> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 3;

        return 3;

     label02:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if $i1 <= 0 goto label56;

        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean seenStartTag>;

        if $z3 == 0 goto label03;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenStartTag> = 0;

        $i50 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseStartTag()>();

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = $i50;

        return $i50;

     label03:
        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean seenEndTag>;

        if $z4 == 0 goto label04;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenEndTag> = 0;

        $i49 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseEndTag()>();

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = $i49;

        return $i49;

     label04:
        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup>;

        if $z5 == 0 goto label05;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 0;

        c55 = 60;

        goto label07;

     label05:
        $z6 = r0.<org.xmlpull.mxp1.MXParser: boolean seenAmpersand>;

        if $z6 == 0 goto label06;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenAmpersand> = 0;

        c55 = 38;

        goto label07;

     label06:
        c55 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label07:
        $i56 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i57 = $i56 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i57;

        z25 = 0;

        z41 = 0;

        z40 = 0;

        z39 = 0;

        z38 = 0;

        z37 = 0;

        z36 = 0;

        z35 = 0;

        z34 = 0;

        z26 = 0;

     label08:
        if c55 != 60 goto label24;

        if z37 == 0 goto label09;

        $z24 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z24 == 0 goto label09;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 4;

        return 4;

     label09:
        $c43 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i66 = (int) $c43;

        if $i66 != 47 goto label11;

        $z23 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z23 != 0 goto label10;

        if z34 == 0 goto label10;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenEndTag> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 4;

        return 4;

     label10:
        $i48 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseEndTag()>();

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = $i48;

        return $i48;

     label11:
        $i67 = (int) $c43;

        if $i67 != 33 goto label18;

        $c46 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i68 = (int) $c46;

        if $i68 != 45 goto label14;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseComment()>();

        $z21 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z21 == 0 goto label12;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 9;

        return 9;

     label12:
        $z22 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z22 != 0 goto label13;

        if z38 == 0 goto label13;

        z26 = 1;

        goto label55;

     label13:
        $i47 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i47;

        goto label55;

     label14:
        $i69 = (int) $c46;

        if $i69 != 91 goto label17;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseCDSect(boolean)>(z35);

        $z19 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z19 == 0 goto label15;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 5;

        return 5;

     label15:
        i58 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        i59 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        i60 = i59 - i58;

        if i60 <= 0 goto label16;

        z25 = 1;

        z41 = 1;

        z40 = 1;

        z39 = 1;

        z38 = 1;

        z37 = 1;

        z36 = 1;

        z35 = 1;

        z34 = 1;

        $z20 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z20 != 0 goto label16;

        z26 = 1;

     label16:
        goto label55;

     label17:
        $r36 = new org.xmlpull.v1.XmlPullParserException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected character in markup ");

        $r30 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c46);

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r36.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r32, r0, null);

        throw $r36;

     label18:
        $i70 = (int) $c43;

        if $i70 != 63 goto label21;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean parsePI()>();

        $z17 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z17 == 0 goto label19;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 8;

        return 8;

     label19:
        $z18 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z18 != 0 goto label20;

        if z36 == 0 goto label20;

        z26 = 1;

        goto label55;

     label20:
        $i45 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i45;

        goto label55;

     label21:
        $z15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameStartChar(char)>($c43);

        if $z15 == 0 goto label23;

        $z16 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z16 != 0 goto label22;

        if z39 == 0 goto label22;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenStartTag> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 4;

        return 4;

     label22:
        $i44 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseStartTag()>();

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = $i44;

        return $i44;

     label23:
        $r38 = new org.xmlpull.v1.XmlPullParserException;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected character in markup ");

        $r24 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c43);

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r38.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r26, r0, null);

        throw $r38;

     label24:
        if c55 != 38 goto label34;

        $z12 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z12 == 0 goto label25;

        if z41 == 0 goto label25;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenAmpersand> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 4;

        return 4;

     label25:
        $i24 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i41 = $i24 + $i23;

        $i26 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i25 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i42 = $i26 + $i25;

        $r7 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char[] parseEntityRef()>();

        $z13 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z13 == 0 goto label26;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 6;

        return 6;

     label26:
        if $r7 != null goto label28;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        if $r10 != null goto label27;

        $r19 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i40 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i38 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i37 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i39 = $i38 - $i37;

        $r20 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r19, $i40, $i39);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName> = $r20;

     label27:
        $r40 = new org.xmlpull.v1.XmlPullParserException;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not resolve entity named \'");

        $r14 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        $r15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r40.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r18, r0, null);

        throw $r40;

     label28:
        $i27 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i28 = $i41 - $i27;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i28;

        $i29 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i30 = $i42 - $i29;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i30;

        $z14 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z14 != 0 goto label30;

        if z40 == 0 goto label29;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        z26 = 0;

        goto label30;

     label29:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label30:
        i61 = 0;

     label31:
        $i62 = lengthof $r7;

        if i61 >= $i62 goto label33;

        $i32 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i31 = lengthof $r8;

        if $i32 < $i31 goto label32;

        $i36 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i36);

     label32:
        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i33 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i34 = $i33 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i34;

        $c35 = $r7[i61];

        $r9[$i33] = $c35;

        i61 = i61 + 1;

        goto label31;

     label33:
        z25 = 1;

        z41 = 1;

        z40 = 1;

        z39 = 1;

        z38 = 1;

        z37 = 1;

        z36 = 1;

        z35 = 1;

        z34 = 1;

        goto label55;

     label34:
        if z26 == 0 goto label35;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        z26 = 0;

     label35:
        z25 = 1;

        z41 = 1;

        z40 = 1;

        z39 = 1;

        z38 = 1;

        z37 = 1;

        z36 = 1;

        z35 = 1;

        z34 = 1;

        z27 = 0;

        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z7 == 0 goto label36;

        $z11 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z11 != 0 goto label37;

     label36:
        $z28 = 1;

        goto label38;

     label37:
        $z28 = 0;

     label38:
        z29 = $z28;

        z30 = 0;

        z33 = 0;

        z32 = 0;

        z31 = 0;

     label39:
        if c55 != 93 goto label41;

        if z32 == 0 goto label40;

        z31 = 1;

        goto label43;

     label40:
        z30 = 1;

        z33 = 1;

        z32 = 1;

        goto label43;

     label41:
        if z31 == 0 goto label42;

        if c55 != 62 goto label42;

        $r41 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r41.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("characters ]]> are not allowed in content", r0, null);

        throw $r41;

     label42:
        if z33 == 0 goto label43;

        z30 = 0;

        z33 = 0;

        z32 = 0;

        z31 = 0;

     label43:
        if z29 == 0 goto label53;

        if c55 != 13 goto label47;

        z27 = 1;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i17 = $i16 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i17;

        $z10 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z10 != 0 goto label45;

        $i22 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i21 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i22 <= $i21 goto label44;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label45;

     label44:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label45:
        $i63 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r34 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i64 = lengthof $r34;

        if $i63 < $i64 goto label46;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i20);

     label46:
        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i19 = $i18 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i19;

        $r5[$i18] = 10;

        goto label53;

     label47:
        if c55 != 10 goto label50;

        if z27 != 0 goto label49;

        $z9 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z9 == 0 goto label49;

        $i12 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i11 = lengthof $r3;

        if $i12 < $i11 goto label48;

        $i15 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i15);

     label48:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i14 = $i13 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i14;

        $r4[$i13] = 10;

     label49:
        z27 = 0;

        goto label53;

     label50:
        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z8 == 0 goto label52;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i6 = lengthof $r1;

        if $i7 < $i6 goto label51;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i10);

     label51:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i9 = $i8 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i9;

        $r2[$i8] = c55;

     label52:
        z27 = 0;

     label53:
        $c65 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        c55 = $c65;

        $i71 = (int) $c65;

        if $i71 == 60 goto label54;

        $i72 = (int) $c65;

        if $i72 != 38 goto label39;

     label54:
        $i4 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i5 = $i4 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i5;

        goto label08;

     label55:
        c55 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label08;

     label56:
        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean seenRoot>;

        if $z2 == 0 goto label57;

        $i3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseEpilog()>();

        return $i3;

     label57:
        $i2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseProlog()>();

        return $i2;
    }

    protected int parseProlog() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r3, $r5, $r14, $r16, $r20, $r22, $r26, $r28, $r36, $r38, $r40, $r42;
        java.lang.String $r4, $r6, $r15, $r17, $r21, $r23, $r27, $r29;
        char[] $r7, $r8, $r9, $r10, $r11, $r32, $r33;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, $z16, z17;
        org.xmlpull.v1.XmlPullParserException $r34, $r35, $r37, $r39, $r41, $r43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        char $c18, $c20, c26;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup>;

        if $z0 == 0 goto label01;

        $r32 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i24 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i25 = $i24 - 1;

        c26 = $r32[$i25];

        goto label02;

     label01:
        c26 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label02:
        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 0 goto label04;

        $i31 = (int) c26;

        $i33 = (int) 65534;

        if $i31 != $i33 goto label03;

        $r34 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r34.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("first character in input was UNICODE noncharacter (0xFFFE)- input requires int swapping", r0, null);

        throw $r34;

     label03:
        $i34 = (int) c26;

        $i36 = (int) 65279;

        if $i34 != $i36 goto label04;

        c26 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label04:
        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 0;

        z14 = 0;

        $i27 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i28 = $i27 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i28;

        $z15 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z15 != 1 goto label05;

        $z13 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z13 != 0 goto label05;

        $z16 = 1;

        goto label06;

     label05:
        $z16 = 0;

     label06:
        z1 = $z16;

        z17 = 0;

     label07:
        $i37 = (int) c26;

        if $i37 != 60 goto label17;

        if z14 == 0 goto label08;

        $z12 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z12 == 0 goto label08;

        $i22 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i23 = $i22 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i23;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 7;

        return 7;

     label08:
        $c18 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i38 = (int) $c18;

        if $i38 != 63 goto label10;

        $z10 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean parsePI()>();

        if $z10 == 0 goto label09;

        $z11 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z11 == 0 goto label28;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 8;

        return 8;

     label09:
        $i21 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i21;

        z14 = 0;

        goto label28;

     label10:
        $i39 = (int) $c18;

        if $i39 != 33 goto label14;

        $c20 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i40 = (int) $c20;

        if $i40 != 68 goto label12;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean seenDocdecl>;

        if $z8 == 0 goto label11;

        $r35 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r35.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("only one docdecl allowed in XML document", r0, null);

        throw $r35;

     label11:
        r0.<org.xmlpull.mxp1.MXParser: boolean seenDocdecl> = 1;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseDocdecl()>();

        $z9 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z9 == 0 goto label28;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 10;

        return 10;

     label12:
        $i41 = (int) $c20;

        if $i41 != 45 goto label13;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseComment()>();

        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z7 == 0 goto label28;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 9;

        return 9;

     label13:
        $r37 = new org.xmlpull.v1.XmlPullParserException;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected markup <!");

        $r27 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c20);

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r37.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r29, r0, null);

        throw $r37;

     label14:
        $i42 = (int) $c18;

        if $i42 != 47 goto label15;

        $r39 = new org.xmlpull.v1.XmlPullParserException;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected start tag name and not ");

        $r21 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c18);

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r23, r0, null);

        throw $r39;

     label15:
        $z6 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameStartChar(char)>($c18);

        if $z6 == 0 goto label16;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenRoot> = 1;

        $i19 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: int parseStartTag()>();

        return $i19;

     label16:
        $r41 = new org.xmlpull.v1.XmlPullParserException;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected start tag name and not ");

        $r15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c18);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r41.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r17, r0, null);

        throw $r41;

     label17:
        $z2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c26);

        if $z2 == 0 goto label27;

        z14 = 1;

        if z1 == 0 goto label28;

        $i43 = (int) c26;

        if $i43 != 13 goto label21;

        z17 = 1;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z5 != 0 goto label19;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i15 = $i14 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i15;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i17 <= $i16 goto label18;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label19;

     label18:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label19:
        $i29 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r33 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i30 = lengthof $r33;

        if $i29 < $i30 goto label20;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i13);

     label20:
        $r11 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i12 = $i11 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i12;

        $r11[$i11] = 10;

        goto label28;

     label21:
        $i44 = (int) c26;

        if $i44 != 10 goto label24;

        if z17 != 0 goto label23;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z4 == 0 goto label23;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i6 = lengthof $r9;

        if $i7 < $i6 goto label22;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i10);

     label22:
        $r10 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i9 = $i8 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i9;

        $r10[$i8] = 10;

     label23:
        z17 = 0;

        goto label28;

     label24:
        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z3 == 0 goto label26;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i1 = lengthof $r7;

        if $i2 < $i1 goto label25;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i5);

     label25:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i4 = $i3 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i4;

        $r8[$i3] = c26;

     label26:
        z17 = 0;

        goto label28;

     label27:
        $r43 = new org.xmlpull.v1.XmlPullParserException;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("only whitespace content allowed before start tag and not ");

        $r4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c26);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r43.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r6, r0, null);

        throw $r43;

     label28:
        c26 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label07;
    }

    protected int parseEpilog() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r4, $r6, $r15, $r17, $r21, $r23, $r27, $r29, $r33, $r35, $r42, $r44, $r46, $r48, $r50;
        java.lang.String $r5, $r7, $r16, $r18, $r22, $r24, $r28, $r30, $r34, $r36;
        char[] $r8, $r9, $r10, $r11, $r12, $r37, $r40;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, $z19, z20, $z21, $z22, z23, z24;
        java.io.EOFException $r39;
        org.xmlpull.v1.XmlPullParserException $r41, $r43, $r45, $r47, $r49, $r51, $r52;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        char $c21, $c22, c27;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 != 1 goto label01;

        $r41 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r41.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("already reached end of XML input", r0, null);

        throw $r41;

     label01:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z0 == 0 goto label02;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 1;

        return 1;

     label02:
        z18 = 0;

        z24 = 0;

        z23 = 0;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z1 != 1 goto label03;

        $z17 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z17 != 0 goto label03;

        $z19 = 1;

        goto label04;

     label03:
        $z19 = 0;

     label04:
        z2 = $z19;

        z20 = 0;

     label05:
        $z21 = r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup>;

        if $z21 == 0 goto label06;

        $r37 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i25 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i26 = $i25 - 1;

        c27 = $r37[$i26];

        goto label07;

     label06:
        c27 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label07:
        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 0;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i2 = $i1 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i2;

        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z3 != 0 goto label34;

     label08:
        $i30 = (int) c27;

        if $i30 != 60 goto label22;

        if z23 == 0 goto label10;

        $z16 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z16 == 0 goto label10;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i24 = $i23 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i24;

        r0.<org.xmlpull.mxp1.MXParser: boolean seenMarkup> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 7;

     label09:
        return 7;

     label10:
        $c21 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $z10 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z10 == 0 goto label11;

        goto label34;

     label11:
        $i31 = (int) $c21;

        if $i31 != 63 goto label13;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean parsePI()>();

        $z15 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z15 == 0 goto label33;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 8;

     label12:
        return 8;

     label13:
        $i32 = (int) $c21;

        if $i32 != 33 goto label19;

        $c22 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $z12 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z12 == 0 goto label14;

        goto label34;

     label14:
        $i33 = (int) $c22;

        if $i33 != 68 goto label16;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseDocdecl()>();

        $z14 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z14 == 0 goto label33;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 10;

     label15:
        return 10;

     label16:
        $i34 = (int) $c22;

        if $i34 != 45 goto label18;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseComment()>();

        $z13 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z13 == 0 goto label33;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 9;

     label17:
        return 9;

     label18:
        $r43 = new org.xmlpull.v1.XmlPullParserException;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected markup <!");

        $r34 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c22);

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r43.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r36, r0, null);

        throw $r43;

     label19:
        $i35 = (int) $c21;

        if $i35 != 47 goto label20;

        $r45 = new org.xmlpull.v1.XmlPullParserException;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("end tag not allowed in epilog but got ");

        $r28 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c21);

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r30, r0, null);

        throw $r45;

     label20:
        $z11 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameStartChar(char)>($c21);

        if $z11 == 0 goto label21;

        $r47 = new org.xmlpull.v1.XmlPullParserException;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("start tag not allowed in epilog but got ");

        $r22 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c21);

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r47.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r24, r0, null);

        throw $r47;

     label21:
        $r49 = new org.xmlpull.v1.XmlPullParserException;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("in epilog expected ignorable content and not ");

        $r16 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c21);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r49.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r18, r0, null);

        throw $r49;

     label22:
        $z6 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c27);

        if $z6 == 0 goto label32;

        z18 = 1;

        z24 = 1;

        z23 = 1;

        if z2 == 0 goto label33;

        $i36 = (int) c27;

        if $i36 != 13 goto label26;

        z20 = 1;

        $z9 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z9 != 0 goto label24;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i18 = $i17 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i18;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i19 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i20 <= $i19 goto label23;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label24;

     label23:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label24:
        $i28 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r40 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i29 = lengthof $r40;

        if $i28 < $i29 goto label25;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i16);

     label25:
        $r12 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i15 = $i14 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i15;

        $r12[$i14] = 10;

        goto label33;

     label26:
        $i37 = (int) c27;

        if $i37 != 10 goto label29;

        if z20 != 0 goto label28;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z8 == 0 goto label28;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i9 = lengthof $r10;

        if $i10 < $i9 goto label27;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i13);

     label27:
        $r11 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i12 = $i11 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i12;

        $r11[$i11] = 10;

     label28:
        z20 = 0;

        goto label33;

     label29:
        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z7 == 0 goto label31;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i4 = lengthof $r8;

        if $i5 < $i4 goto label30;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i8);

     label30:
        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i7 = $i6 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i7;

        $r9[$i6] = c27;

     label31:
        z20 = 0;

        goto label33;

     label32:
        $r51 = new org.xmlpull.v1.XmlPullParserException;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("in epilog non whitespace content is not allowed but got ");

        $r5 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c27);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r51.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r7, r0, null);

        throw $r51;

     label33:
        c27 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $z22 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z22 == 0 goto label08;

        goto label34;

     label34:
        goto label36;

     label35:
        $r39 := @caughtexception;

        r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd> = 1;

     label36:
        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z4 == 0 goto label38;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z5 == 0 goto label37;

        if z24 == 0 goto label37;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i3;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 7;

        return 7;

     label37:
        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 1;

        return 1;

     label38:
        $r52 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r52.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("internal error in parseEpilog");

        throw $r52;

        catch java.io.EOFException from label05 to label09 with label35;
        catch java.io.EOFException from label10 to label12 with label35;
        catch java.io.EOFException from label13 to label15 with label35;
        catch java.io.EOFException from label16 to label17 with label35;
        catch java.io.EOFException from label18 to label34 with label35;
    }

    public int parseEndTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        char[][] $r1;
        java.lang.StringBuffer $r6, $r8, $r9, $r11, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r45, $r47, $r49, $r53, $r57, $r59;
        java.lang.String $r7, $r12, $r27, $r42, $r46, $r48, $r51, $r52, $r55, $r56;
        char[] r2, $r13, $r16, $r31;
        org.xmlpull.mxp1.MXParser r0;
        int[] $r3, $r10, $r25, $r29, $r40;
        boolean $z0, $z1, $z2;
        org.xmlpull.v1.XmlPullParserException $r50, $r54, $r58, $r60;
        int $i1, $i2, $i3, $i4, $i5, i6, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i30, i31, $i32, $i33, $i34;
        char $c0, $c7, $c19, $c20, c29;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $z0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameStartChar(char)>($c0);

        if $z0 != 0 goto label1;

        $r50 = new org.xmlpull.v1.XmlPullParserException;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected name start and not ");

        $r46 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c0);

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r50.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r48, r0, null);

        throw $r50;

     label1:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i2 = $i1 - 3;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i2;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i5 = $i3 - 1;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i6 = $i5 + $i4;

     label2:
        $c7 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        c29 = $c7;

        $z1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameChar(char)>($c7);

        if $z1 != 0 goto label2;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i30 = i6 - $i8;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i10 = $i9 - 1;

        i11 = $i10 - i30;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $i12 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        r2 = $r1[$i12];

        $r3 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i14 = $r3[$i13];

        if $i14 == i11 goto label3;

        $r51 = new java.lang.String;

        $r29 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        $i25 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i26 = $r29[$i25];

        specialinvoke $r51.<java.lang.String: void <init>(char[],int,int)>(r2, 0, $i26);

        $r52 = new java.lang.String;

        $r31 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        specialinvoke $r52.<java.lang.String: void <init>(char[],int,int)>($r31, i30, i11);

        $r54 = new org.xmlpull.v1.XmlPullParserException;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("end tag name </");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("> must match start tag name <");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from line ");

        $r40 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        $i27 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i28 = $r40[$i27];

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i28);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r54.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r42, r0, null);

        throw $r54;

     label3:
        i31 = 0;

     label4:
        if i31 >= i11 goto label6;

        $r13 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i18 = i30;

        i30 = i30 + 1;

        $c20 = $r13[$i18];

        $c19 = r2[i31];

        $i32 = (int) $c20;

        $i33 = (int) $c19;

        if $i32 == $i33 goto label5;

        $r55 = new java.lang.String;

        specialinvoke $r55.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i11);

        $r56 = new java.lang.String;

        $r16 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i21 = i30 - i31;

        $i22 = $i21 - 1;

        specialinvoke $r56.<java.lang.String: void <init>(char[],int,int)>($r16, $i22, i11);

        $r58 = new org.xmlpull.v1.XmlPullParserException;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("end tag name </");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("> must be the same as start tag <");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from line ");

        $r25 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i24 = $r25[$i23];

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i24);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r58.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r27, r0, null);

        throw $r58;

     label5:
        i31 = i31 + 1;

        goto label4;

     label6:
        $z2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c29);

        if $z2 == 0 goto label7;

        c29 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label6;

     label7:
        $i34 = (int) c29;

        if $i34 == 62 goto label8;

        $r60 = new org.xmlpull.v1.XmlPullParserException;

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected > to finish end tag not ");

        $r7 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c29);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from line ");

        $r10 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i17 = $r10[$i16];

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i17);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r60.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r12, r0, null);

        throw $r60;

     label8:
        $i15 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i15;

        r0.<org.xmlpull.mxp1.MXParser: boolean pastEndTag> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 3;

        return 3;
    }

    public int parseStartTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r12, $r14, $r27, $r28, $r29, $r30, $r58, $r59, $r60, $r61, $r66, $r67, $r68, $r72, $r73, $r74, $r87, $r88, $r92, $r93, $r97, $r99, $r128, $r130, $r132, $r134, $r136, $r137, $r138, $r140;
        org.xmlpull.mxp1.MXParser r0;
        int[] $r16, $r17, $r18, $r44, $r45, $r118, $r119;
        org.xmlpull.v1.XmlPullParserException $r125, $r126, $r127, $r129, $r131, $r133, $r135, $r139, $r141;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, i54, $i58, $i59, $i60, $i61, $i62, $i63, i64, $i65, i66, i67, i68, i69, $i71, $i72, $i73, $i75, $i77, $i78, $i79, $i80;
        char[][] $r3, $r6, $r112, $r116;
        java.lang.String $r9, $r13, $r15, $r21, $r22, $r31, $r34, $r35, $r36, $r37, $r38, $r42, $r43, $r48, $r49, $r52, $r55, $r62, $r65, $r71, $r75, $r78, $r79, $r80, $r83, $r89, $r94, $r98, $r100, $r105, $r108, $r111, r120, r121, r122, r123, r124;
        char[] $r1, $r4, $r5, $r7, $r103, $r106, $r109, $r113, $r115, $r117;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.String[] $r8, $r19, $r20, $r23, $r24, $r32, $r33, $r39, $r40, $r41, $r46, $r47, $r50, $r51, $r53, $r54, $r64, $r70, $r76, $r77, $r81, $r82, $r84, $r102, $r104, $r107, $r110;
        char $c24, c55, $c56, c57;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i1 = $i0 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int depth> = $i1;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i3 = $i2 - 2;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i3;

        r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int attributeCount> = 0;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i6 = $i4 - 1;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i7 = $i6 + $i5;

        $i71 = (int) -1;

        i54 = $i71;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i9 = $i8 - 1;

        c55 = $r1[$i9];

        $i72 = (int) c55;

        if $i72 != 58 goto label01;

        $z12 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z12 == 0 goto label01;

        $r125 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r125.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("when namespaces processing enabled colon can not be at element name start", r0, null);

        throw $r125;

     label01:
        $c56 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        c57 = $c56;

        $z13 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameChar(char)>($c56);

        if $z13 != 0 goto label02;

        goto label04;

     label02:
        $i73 = (int) $c56;

        if $i73 != 58 goto label01;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 == 0 goto label01;

        $i75 = (int) -1;

        if i54 == $i75 goto label03;

        $r126 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r126.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("only one colon is allowed in name of element when namespaces are enabled", r0, null);

        throw $r126;

     label03:
        $i10 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i12 = $i10 - 1;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i54 = $i12 + $i11;

        goto label01;

     label04:
        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensureElementsCapacity()>();

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i16 = $i13 - 1;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i15 = i7 - $i14;

        i17 = $i16 - $i15;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r4 = $r3[$i18];

        if $r4 == null goto label05;

        $r112 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $i52 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r113 = $r112[$i52];

        $i53 = lengthof $r113;

        if $i53 >= i17 goto label06;

     label05:
        $r6 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i19 = 2 * i17;

        $r5 = newarray (char)[$i19];

        $r6[$i20] = $r5;

     label06:
        $r115 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i58 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i59 = i7 - $i58;

        $r116 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $i60 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r117 = $r116[$i60];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r115, $i59, $r117, 0, i17);

        $r118 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        $i61 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r118[$i61] = i17;

        $r119 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        $i62 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i63 = r0.<org.xmlpull.mxp1.MXParser: int lineNumber>;

        $r119[$i62] = $i63;

        r120 = null;

        $z14 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z14 == 0 goto label08;

        $i77 = (int) -1;

        if i54 == $i77 goto label07;

        $r107 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        $i42 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r106 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i39 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i41 = i7 - $i39;

        $i40 = i54 - i7;

        $r108 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r106, $i41, $i40);

        $r107[$i42] = $r108;

        r120 = $r108;

        $r110 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $i51 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r109 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i44 = i54 + 1;

        $i43 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i50 = $i44 - $i43;

        $i45 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i48 = $i45 - 2;

        $i46 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i47 = i54 - $i46;

        $i49 = $i48 - $i47;

        $r111 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r109, $i50, $i49);

        $r110[$i51] = $r111;

        goto label09;

     label07:
        $r102 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        $i35 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r102[$i35] = null;

        r120 = null;

        $r104 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $i38 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r103 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i36 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i37 = i7 - $i36;

        $r105 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r103, $i37, i17);

        $r104[$i38] = $r105;

        goto label09;

     label08:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r7 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i21 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i22 = i7 - $i21;

        $r9 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r7, $i22, i17);

        $r8[$i23] = $r9;

     label09:
        $z15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c57);

        if $z15 == 0 goto label10;

        c57 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label09;

     label10:
        $i78 = (int) c57;

        if $i78 != 62 goto label11;

        goto label15;

     label11:
        $i79 = (int) c57;

        if $i79 != 47 goto label13;

        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag>;

        if $z2 == 0 goto label12;

        $r127 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r127.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("repeated / in tag declaration", r0, null);

        throw $r127;

     label12:
        r0.<org.xmlpull.mxp1.MXParser: boolean emptyElementTag> = 1;

        $c24 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i80 = (int) $c24;

        if $i80 == 62 goto label15;

        $r129 = new org.xmlpull.v1.XmlPullParserException;

        $r128 = new java.lang.StringBuffer;

        specialinvoke $r128.<java.lang.StringBuffer: void <init>()>();

        $r97 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected > to end empty tag not ");

        $r98 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c24);

        $r99 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r98);

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r129.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r100, r0, null);

        throw $r129;

     label13:
        $z1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameStartChar(char)>(c57);

        if $z1 == 0 goto label14;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char parseAttribute()>();

        c57 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label09;

     label14:
        $r131 = new org.xmlpull.v1.XmlPullParserException;

        $r130 = new java.lang.StringBuffer;

        specialinvoke $r130.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("start tag unexpected character ");

        $r13 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c57);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r131.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r15, r0, null);

        throw $r131;

     label15:
        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z3 == 0 goto label32;

        $r38 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace(java.lang.String)>(r120);

        r121 = $r38;

        if $r38 != null goto label17;

        if r120 != null goto label16;

        r121 = "";

        goto label17;

     label16:
        $r133 = new org.xmlpull.v1.XmlPullParserException;

        $r132 = new java.lang.StringBuffer;

        specialinvoke $r132.<java.lang.StringBuffer: void <init>()>();

        $r92 = virtualinvoke $r132.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not determine namespace bound to element prefix ");

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r120);

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r133.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r94, r0, null);

        throw $r133;

     label17:
        $r39 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri>;

        $i31 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $r39[$i31] = r121;

        i64 = 0;

     label18:
        $i65 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i64 >= $i65 goto label22;

        $r81 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        r122 = $r81[i64];

        if r122 == null goto label20;

        $r83 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getNamespace(java.lang.String)>(r122);

        if $r83 != null goto label19;

        $r135 = new org.xmlpull.v1.XmlPullParserException;

        $r134 = new java.lang.StringBuffer;

        specialinvoke $r134.<java.lang.StringBuffer: void <init>()>();

        $r87 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not determine namespace bound to attribute prefix ");

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r122);

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r135.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r89, r0, null);

        throw $r135;

     label19:
        $r84 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r84[i64] = $r83;

        goto label21;

     label20:
        $r82 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r82[i64] = "";

     label21:
        i64 = i64 + 1;

        goto label18;

     label22:
        i66 = 1;

     label23:
        $i32 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i66 >= $i32 goto label31;

        i67 = 0;

     label24:
        if i67 >= i66 goto label30;

        $r40 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r43 = $r40[i67];

        $r41 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r42 = $r41[i66];

        if $r43 != $r42 goto label29;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z8 == 0 goto label25;

        $r76 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r79 = $r76[i67];

        $r77 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r78 = $r77[i66];

        $z11 = virtualinvoke $r79.<java.lang.String: boolean equals(java.lang.Object)>($r78);

        if $z11 != 0 goto label26;

     label25:
        $z9 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z9 != 0 goto label29;

        $r44 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $i34 = $r44[i67];

        $r45 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $i33 = $r45[i66];

        if $i34 != $i33 goto label29;

        $r46 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r49 = $r46[i67];

        $r47 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r48 = $r47[i66];

        $z10 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>($r48);

        if $z10 == 0 goto label29;

     label26:
        $r50 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r80 = $r50[i67];

        r123 = $r80;

        $r51 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r52 = $r51[i67];

        if $r52 == null goto label27;

        $r136 = new java.lang.StringBuffer;

        specialinvoke $r136.<java.lang.StringBuffer: void <init>()>();

        $r70 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r71 = $r70[i67];

        $r72 = virtualinvoke $r136.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80);

        r123 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

     label27:
        $r53 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r75 = $r53[i66];

        r124 = $r75;

        $r54 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r55 = $r54[i66];

        if $r55 == null goto label28;

        $r137 = new java.lang.StringBuffer;

        specialinvoke $r137.<java.lang.StringBuffer: void <init>()>();

        $r64 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r65 = $r64[i66];

        $r66 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r75);

        r124 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

     label28:
        $r139 = new org.xmlpull.v1.XmlPullParserException;

        $r138 = new java.lang.StringBuffer;

        specialinvoke $r138.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("duplicated attributes ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r123);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r124);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r139.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r62, r0, null);

        throw $r139;

     label29:
        i67 = i67 + 1;

        goto label24;

     label30:
        i66 = i66 + 1;

        goto label23;

     label31:
        goto label39;

     label32:
        i68 = 1;

     label33:
        $i25 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        if i68 >= $i25 goto label39;

        i69 = 0;

     label34:
        if i69 >= i68 goto label38;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z4 == 0 goto label35;

        $r32 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r35 = $r32[i69];

        $r33 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r34 = $r33[i68];

        $z7 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z7 != 0 goto label36;

     label35:
        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z5 != 0 goto label37;

        $r17 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $i30 = $r17[i69];

        $r18 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $i29 = $r18[i68];

        if $i30 != $i29 goto label37;

        $r19 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r22 = $r19[i69];

        $r20 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r21 = $r20[i68];

        $z6 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z6 == 0 goto label37;

     label36:
        $r23 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r36 = $r23[i69];

        $r24 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r37 = $r24[i68];

        $r141 = new org.xmlpull.v1.XmlPullParserException;

        $r140 = new java.lang.StringBuffer;

        specialinvoke $r140.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("duplicated attributes ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r141.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r31, r0, null);

        throw $r141;

     label37:
        i69 = i69 + 1;

        goto label34;

     label38:
        i68 = i68 + 1;

        goto label33;

     label39:
        $r16 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        $i27 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i26 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $r16[$i27] = $i26;

        $i28 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i28;

        r0.<org.xmlpull.mxp1.MXParser: int eventType> = 2;

        return 2;
    }

    protected char parseAttribute() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r13, $r16, $r17, $r33, $r34, $r35, $r38, $r39, $r40, $r52, $r54, $r86, $r89, $r92, $r93;
        int[] $r42, $r45, $r47, $r57, $r62, $r79;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, i113, i115, i117, i118, i119, i123, $i124, $i125, i126, $i127, $i128, $i129, $i130, $i131, i132, $i133, $i134, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i146, $i148, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i164, $i166, $i168, $i170, $i172;
        java.lang.String $r4, $r10, $r14, $r15, $r18, $r20, $r31, $r41, $r44, $r53, $r55, $r61, $r65, $r68, r74, r77, $r80, $r95, $r96;
        char[] $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r19, $r23, $r26, $r28, $r49, $r59, $r63, $r66, $r69, $r75, $r76;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, $z19, $z20, z21, $z22, $z23, $z24;
        org.xmlpull.mxp1.MXParser r0;
        org.xmlpull.v1.XmlPullParserException $r81, $r82, $r83, $r84, $r85, $r87, $r88, $r90, $r91, $r94;
        java.lang.String[] $r3, $r24, $r27, $r29, $r30, $r43, $r46, $r58, $r60, $r64, $r67, $r78;
        char $c39, c114, c116, c120, c121, $c122;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i2 = $i1 + $i0;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i5 = $i3 - 1;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i6 = $i5 + $i4;

        $i136 = (int) -1;

        i113 = $i136;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i8 = $i7 - 1;

        c114 = $r1[$i8];

        $i137 = (int) c114;

        if $i137 != 58 goto label01;

        $z16 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z16 == 0 goto label01;

        $r81 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r81.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("when namespaces processing enabled colon can not be at attribute name start", r0, null);

        throw $r81;

     label01:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z0 == 0 goto label02;

        $i138 = (int) c114;

        if $i138 != 120 goto label02;

        $z17 = 1;

        goto label03;

     label02:
        $z17 = 0;

     label03:
        z18 = $z17;

        i115 = 0;

        c116 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label04:
        $z19 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameChar(char)>(c116);

        if $z19 == 0 goto label12;

        $z15 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z15 == 0 goto label11;

        if z18 == 0 goto label09;

        if i115 >= 5 goto label09;

        i115 = i115 + 1;

        if i115 != 1 goto label05;

        $i139 = (int) c116;

        if $i139 == 109 goto label09;

        z18 = 0;

        goto label09;

     label05:
        if i115 != 2 goto label06;

        $i140 = (int) c116;

        if $i140 == 108 goto label09;

        z18 = 0;

        goto label09;

     label06:
        if i115 != 3 goto label07;

        $i141 = (int) c116;

        if $i141 == 110 goto label09;

        z18 = 0;

        goto label09;

     label07:
        if i115 != 4 goto label08;

        $i142 = (int) c116;

        if $i142 == 115 goto label09;

        z18 = 0;

        goto label09;

     label08:
        if i115 != 5 goto label09;

        $i143 = (int) c116;

        if $i143 == 58 goto label09;

        $r82 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r82.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("after xmlns in attribute name must be colonwhen namespaces are enabled", r0, null);

        throw $r82;

     label09:
        $i144 = (int) c116;

        if $i144 != 58 goto label11;

        $i146 = (int) -1;

        if i113 == $i146 goto label10;

        $r83 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r83.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("only one colon is allowed in attribute name when namespaces are enabled", r0, null);

        throw $r83;

     label10:
        $i110 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i112 = $i110 - 1;

        $i111 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i113 = $i112 + $i111;

     label11:
        c116 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label04;

     label12:
        $i9 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensureAttributesCapacity(int)>($i9);

        r74 = null;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z1 == 0 goto label18;

        if i115 >= 4 goto label13;

        z18 = 0;

     label13:
        if z18 == 0 goto label15;

        $i148 = (int) -1;

        if i113 == $i148 goto label19;

        $i103 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i106 = $i103 - 2;

        $i104 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i105 = i113 - $i104;

        i117 = $i106 - $i105;

        if i117 != 0 goto label14;

        $r84 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r84.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("namespace prefix is required after xmlns:  when namespaces are enabled", r0, null);

        throw $r84;

     label14:
        $r69 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i107 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i108 = i113 - $i107;

        $i109 = $i108 + 1;

        r74 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r69, $i109, i117);

        goto label19;

     label15:
        $i150 = (int) -1;

        if i113 == $i150 goto label16;

        i118 = i113 - i6;

        $r64 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        $i94 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r63 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i92 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i93 = i6 - $i92;

        $r65 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r63, $i93, i118);

        $r64[$i94] = $r65;

        $i95 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i98 = $i95 - 2;

        $i96 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i97 = i113 - $i96;

        i119 = $i98 - $i97;

        $r67 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $i102 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r66 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i99 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i100 = i113 - $i99;

        $i101 = $i100 + 1;

        $r68 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r66, $i101, i119);

        $r67[$i102] = $r68;

        r74 = $r68;

        goto label17;

     label16:
        $r58 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        $i81 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r58[$i81] = null;

        $r60 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $i89 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r59 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i82 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i88 = i6 - $i82;

        $i83 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i86 = $i83 - 1;

        $i84 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i85 = i6 - $i84;

        $i87 = $i86 - $i85;

        $r61 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r59, $i88, $i87);

        $r60[$i89] = $r61;

        r74 = $r61;

     label17:
        $z14 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z14 != 0 goto label19;

        $r62 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $i90 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i91 = virtualinvoke r74.<java.lang.String: int hashCode()>();

        $r62[$i90] = $i91;

        goto label19;

     label18:
        $r3 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i16 = i6 - $i10;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i14 = $i11 - 1;

        $i12 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i13 = i6 - $i12;

        $i15 = $i14 - $i13;

        $r4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r2, $i16, $i15);

        $r3[$i17] = $r4;

        r74 = $r4;

        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z2 != 0 goto label19;

        $r57 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $i79 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i80 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        $r57[$i79] = $i80;

     label19:
        $z20 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c116);

        if $z20 == 0 goto label20;

        c116 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label19;

     label20:
        $i151 = (int) c116;

        if $i151 == 61 goto label21;

        $r85 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r85.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected = after attribute name", r0, null);

        throw $r85;

     label21:
        c120 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label22:
        $z3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c120);

        if $z3 == 0 goto label23;

        c120 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label22;

     label23:
        c121 = c120;

        $i152 = (int) c120;

        if $i152 == 34 goto label24;

        $i153 = (int) c120;

        if $i153 == 39 goto label24;

        $r87 = new org.xmlpull.v1.XmlPullParserException;

        $r86 = new java.lang.StringBuffer;

        specialinvoke $r86.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attribute value must start with quotation or apostrophe not ");

        $r53 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c120);

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r87.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r55, r0, null);

        throw $r87;

     label24:
        z21 = 0;

        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 0;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = $i18;

        $i19 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i19;

     label25:
        $c122 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i154 = (int) $c122;

        $i155 = (int) c121;

        if $i154 != $i155 goto label26;

        goto label48;

     label26:
        $i156 = (int) $c122;

        if $i156 != 60 goto label27;

        $r88 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r88.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("markup not allowed inside attribute value - illegal < ", r0, null);

        throw $r88;

     label27:
        $i157 = (int) $c122;

        if $i157 != 38 goto label37;

        $i32 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i33 = $i32 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i33;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z5 != 0 goto label31;

        $i46 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i45 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i46 <= $i45 goto label28;

        $z22 = 1;

        goto label29;

     label28:
        $z22 = 0;

     label29:
        if $z22 == 0 goto label30;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label31;

     label30:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label31:
        $r75 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char[] parseEntityRef()>();

        if $r75 != null goto label33;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        if $r10 != null goto label32;

        $r19 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i44 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i42 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i41 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i43 = $i42 - $i41;

        $r20 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r19, $i44, $i43);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName> = $r20;

     label32:
        $r90 = new org.xmlpull.v1.XmlPullParserException;

        $r89 = new java.lang.StringBuffer;

        specialinvoke $r89.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not resolve entity named \'");

        $r14 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        $r15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r90.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r18, r0, null);

        throw $r90;

     label33:
        i123 = 0;

     label34:
        $i34 = lengthof $r75;

        if i123 >= $i34 goto label36;

        $i36 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i35 = lengthof $r8;

        if $i36 < $i35 goto label35;

        $i40 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i40);

     label35:
        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i37 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i38 = $i37 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i38;

        $c39 = $r75[i123];

        $r9[$i37] = $c39;

        i123 = i123 + 1;

        goto label34;

     label36:
        goto label45;

     label37:
        $i158 = (int) $c122;

        if $i158 == 9 goto label38;

        $i159 = (int) $c122;

        if $i159 == 10 goto label38;

        $i160 = (int) $c122;

        if $i160 != 13 goto label43;

     label38:
        $z23 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z23 != 0 goto label40;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i24 = $i23 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i24;

        $i26 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i25 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i26 <= $i25 goto label39;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label40;

     label39:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

     label40:
        $i124 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r76 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i125 = lengthof $r76;

        if $i124 < $i125 goto label41;

        $i22 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i22);

     label41:
        $i161 = (int) $c122;

        if $i161 != 10 goto label42;

        if z21 != 0 goto label45;

     label42:
        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i21 = $i20 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i21;

        $r5[$i20] = 32;

        goto label45;

     label43:
        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z4 == 0 goto label45;

        $i28 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r6 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i27 = lengthof $r6;

        if $i28 < $i27 goto label44;

        $i31 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i31);

     label44:
        $r7 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i29 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i30 = $i29 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i30;

        $r7[$i29] = $c122;

     label45:
        $i162 = (int) $c122;

        if $i162 != 13 goto label46;

        $z24 = 1;

        goto label47;

     label46:
        $z24 = 0;

     label47:
        z21 = $z24;

        goto label25;

     label48:
        $z6 = r0.<org.xmlpull.mxp1.MXParser: boolean processNamespaces>;

        if $z6 == 0 goto label62;

        if z18 == 0 goto label62;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z8 != 0 goto label49;

        $r49 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i78 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i74 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i76 = $i74 - 1;

        $i75 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i77 = $i76 - $i75;

        r77 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newStringIntern(char[],int,int)>($r49, $i78, $i77);

        goto label50;

     label49:
        $r28 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i63 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i61 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i60 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i62 = $i61 - $i60;

        r77 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newStringIntern(char[],int,int)>($r28, $i63, $i62);

     label50:
        $i64 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensureNamespacesCapacity(int)>($i64);

        $i164 = (int) -1;

        i126 = $i164;

        $i166 = (int) -1;

        if i113 == $i166 goto label52;

        $i70 = virtualinvoke r77.<java.lang.String: int length()>();

        if $i70 != 0 goto label51;

        $r91 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r91.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("non-default namespace can not be declared to be empty string", r0, null);

        throw $r91;

     label51:
        $r46 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $i71 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $r46[$i71] = r74;

        $z13 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z13 != 0 goto label53;

        $r47 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        $i72 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $i73 = virtualinvoke r74.<java.lang.String: int hashCode()>();

        $r47[$i72] = $i73;

        i126 = $i73;

        goto label53;

     label52:
        $r29 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $i65 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $r29[$i65] = null;

        $z9 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z9 != 0 goto label53;

        $r45 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        $i69 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $i168 = (int) -1;

        $r45[$i69] = $i168;

        $i170 = (int) -1;

        i126 = $i170;

     label53:
        $r78 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        $i127 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $r78[$i127] = r77;

        $r79 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        $i128 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        $i129 = $i128 - 1;

        $i130 = $r79[$i129];

        $i131 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        i132 = $i131 - 1;

     label54:
        if i132 < $i130 goto label61;

        $z10 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z10 != 0 goto label55;

        if r74 != null goto label56;

     label55:
        $r30 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $r31 = $r30[i132];

        if $r31 == r74 goto label57;

     label56:
        $z11 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z11 != 0 goto label60;

        if r74 == null goto label60;

        $r42 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        $i68 = $r42[i132];

        if $i68 != i126 goto label60;

        $r43 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $r44 = $r43[i132];

        $z12 = virtualinvoke r74.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z12 == 0 goto label60;

     label57:
        if r74 != null goto label58;

        $r80 = "default";

        goto label59;

     label58:
        $r92 = new java.lang.StringBuffer;

        specialinvoke $r92.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r74);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r80 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

     label59:
        $r94 = new org.xmlpull.v1.XmlPullParserException;

        $r93 = new java.lang.StringBuffer;

        specialinvoke $r93.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("duplicated namespace declaration for ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" prefix");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r94.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r41, r0, null);

        throw $r94;

     label60:
        $i172 = (int) -1;

        i132 = i132 + $i172;

        goto label54;

     label61:
        $i66 = r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd>;

        $i67 = $i66 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int namespaceEnd> = $i67;

        goto label65;

     label62:
        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z7 != 0 goto label63;

        $r27 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        $i59 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r95 = new java.lang.String;

        $r26 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i58 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i54 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i56 = $i54 - 1;

        $i55 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i57 = $i56 - $i55;

        specialinvoke $r95.<java.lang.String: void <init>(char[],int,int)>($r26, $i58, $i57);

        $r27[$i59] = $r95;

        goto label64;

     label63:
        $r24 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        $i51 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $r96 = new java.lang.String;

        $r23 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i50 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i48 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i47 = r0.<org.xmlpull.mxp1.MXParser: int pcStart>;

        $i49 = $i48 - $i47;

        specialinvoke $r96.<java.lang.String: void <init>(char[],int,int)>($r23, $i50, $i49);

        $r24[$i51] = $r96;

     label64:
        $i52 = r0.<org.xmlpull.mxp1.MXParser: int attributeCount>;

        $i53 = $i52 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int attributeCount> = $i53;

     label65:
        $i133 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i134 = i2 - $i133;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i134;

        return $c122;
    }

    protected char[] parseEntityRef() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r3, $r5, $r6, $r35, $r37, $r38, $r42, $r44, $r52, $r54, $r57, $r59, $r61, $r63;
        org.xmlpull.mxp1.MXParser r0;
        org.xmlpull.v1.XmlPullParserException $r58, $r60, $r62, $r64;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i13, $i15, $i16, $i18, $i20, $i21, $i23, $i24, $i26, $i27, $i29, $i31, $i32, $i34, $i36, $i37, $i39, $i40, $i42, $i44, $i45, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97;
        java.lang.String $r4, $r7, $r36, $r39, $r43, $r45, $r49, $r53, $r55;
        char[] $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r46, $r47, $r48, $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        char $c1, $c2, $c8, $c11, $c14, $c17, $c19, $c22, $c25, $c28, $c30, $c33, $c35, $c38, $c41, $c43, $c46, $c47, c62, c63, $c64;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName> = null;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i0;

        $c1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i66 = (int) $c1;

        if $i66 != 35 goto label12;

        c62 = 0;

        $c47 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        c63 = $c47;

        $i67 = (int) $c47;

        if $i67 != 120 goto label06;

     label01:
        $c64 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i68 = (int) $c64;

        if $i68 < 48 goto label02;

        $i69 = (int) $c64;

        if $i69 > 57 goto label02;

        $i60 = c62 * 16;

        $i70 = (int) $c64;

        $i59 = $i70 - 48;

        $i61 = $i60 + $i59;

        c62 = (char) $i61;

        goto label01;

     label02:
        $i71 = (int) $c64;

        if $i71 < 97 goto label03;

        $i72 = (int) $c64;

        if $i72 > 102 goto label03;

        $i57 = c62 * 16;

        $i73 = (int) $c64;

        $i56 = $i73 - 87;

        $i58 = $i57 + $i56;

        c62 = (char) $i58;

        goto label01;

     label03:
        $i74 = (int) $c64;

        if $i74 < 65 goto label04;

        $i75 = (int) $c64;

        if $i75 > 70 goto label04;

        $i54 = c62 * 16;

        $i76 = (int) $c64;

        $i53 = $i76 - 55;

        $i55 = $i54 + $i53;

        c62 = (char) $i55;

        goto label01;

     label04:
        $i77 = (int) $c64;

        if $i77 != 59 goto label05;

        goto label10;

     label05:
        $r58 = new org.xmlpull.v1.XmlPullParserException;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("character reference (with hex value) may not contain ");

        $r53 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c64);

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r58.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r55, r0, null);

        throw $r58;

     label06:
        $i78 = (int) c63;

        if $i78 < 48 goto label07;

        $i79 = (int) c63;

        if $i79 > 57 goto label07;

        $i51 = c62 * 10;

        $i80 = (int) c63;

        $i50 = $i80 - 48;

        $i52 = $i51 + $i50;

        c62 = (char) $i52;

        goto label09;

     label07:
        $i81 = (int) c63;

        if $i81 != 59 goto label08;

        goto label10;

     label08:
        $r60 = new org.xmlpull.v1.XmlPullParserException;

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("character reference (with decimal value) may not contain ");

        $r43 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c63);

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r60.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r45, r0, null);

        throw $r60;

     label09:
        c63 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label06;

     label10:
        $i48 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i49 = $i48 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i49;

        $r46 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r46[0] = c62;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z8 == 0 goto label11;

        $r48 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r49 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r48, 0, 1);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = $r49;

     label11:
        $r47 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        return $r47;

     label12:
        $z0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameStartChar(char)>($c1);

        if $z0 != 0 goto label13;

        $r62 = new org.xmlpull.v1.XmlPullParserException;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("entity reference names can not start with character \'");

        $r36 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c1);

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r62.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r39, r0, null);

        throw $r62;

     label13:
        $c2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i82 = (int) $c2;

        if $i82 != 59 goto label14;

        goto label15;

     label14:
        $z1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isNameChar(char)>($c2);

        if $z1 != 0 goto label13;

        $r64 = new org.xmlpull.v1.XmlPullParserException;

        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("entity reference name can not contain character ");

        $r4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r64.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r7, r0, null);

        throw $r64;

     label15:
        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i4 = $i3 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i4;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        i65 = $i6 - $i5;

        if i65 != 2 goto label17;

        $r29 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i42 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $c43 = $r29[$i42];

        $i83 = (int) $c43;

        if $i83 != 108 goto label17;

        $r30 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i44 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i45 = $i44 + 1;

        $c46 = $r30[$i45];

        $i84 = (int) $c46;

        if $i84 != 116 goto label17;

        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z7 == 0 goto label16;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = "<";

     label16:
        $r31 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r31[0] = 60;

        $r32 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        return $r32;

     label17:
        if i65 != 3 goto label19;

        $r24 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i34 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $c35 = $r24[$i34];

        $i85 = (int) $c35;

        if $i85 != 97 goto label19;

        $r25 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i36 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i37 = $i36 + 1;

        $c38 = $r25[$i37];

        $i86 = (int) $c38;

        if $i86 != 109 goto label19;

        $r26 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i39 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i40 = $i39 + 2;

        $c41 = $r26[$i40];

        $i87 = (int) $c41;

        if $i87 != 112 goto label19;

        $z6 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z6 == 0 goto label18;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = "&";

     label18:
        $r27 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r27[0] = 38;

        $r28 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        return $r28;

     label19:
        if i65 != 2 goto label21;

        $r20 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i29 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $c30 = $r20[$i29];

        $i88 = (int) $c30;

        if $i88 != 103 goto label21;

        $r21 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i31 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i32 = $i31 + 1;

        $c33 = $r21[$i32];

        $i89 = (int) $c33;

        if $i89 != 116 goto label21;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z5 == 0 goto label20;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = ">";

     label20:
        $r22 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r22[0] = 62;

        $r23 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        return $r23;

     label21:
        if i65 != 4 goto label23;

        $r14 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $c19 = $r14[$i18];

        $i90 = (int) $c19;

        if $i90 != 97 goto label23;

        $r15 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i21 = $i20 + 1;

        $c22 = $r15[$i21];

        $i91 = (int) $c22;

        if $i91 != 112 goto label23;

        $r16 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i24 = $i23 + 2;

        $c25 = $r16[$i24];

        $i92 = (int) $c25;

        if $i92 != 111 goto label23;

        $r17 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i26 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i27 = $i26 + 3;

        $c28 = $r17[$i27];

        $i93 = (int) $c28;

        if $i93 != 115 goto label23;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z4 == 0 goto label22;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = "\'";

     label22:
        $r18 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r18[0] = 39;

        $r19 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        return $r19;

     label23:
        if i65 != 4 goto label25;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $c8 = $r8[$i7];

        $i94 = (int) $c8;

        if $i94 != 113 goto label25;

        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i10 = $i9 + 1;

        $c11 = $r9[$i10];

        $i95 = (int) $c11;

        if $i95 != 117 goto label25;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i12 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i13 = $i12 + 2;

        $c14 = $r10[$i13];

        $i96 = (int) $c14;

        if $i96 != 111 goto label25;

        $r11 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i15 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i16 = $i15 + 3;

        $c17 = $r11[$i16];

        $i97 = (int) $c17;

        if $i97 != 116 goto label25;

        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z3 == 0 goto label24;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = "\"";

     label24:
        $r12 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r12[0] = 34;

        $r13 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        return $r13;

     label25:
        $r56 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char[] lookuEntityReplacement(int)>(i65);

        if $r56 == null goto label26;

        return $r56;

     label26:
        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z2 == 0 goto label27;

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = null;

     label27:
        return null;
    }

    protected char[] lookuEntityReplacement(int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        char[][] $r6, $r12, $r14, $r16;
        int[] $r11;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r3, $r8, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, i18, i19, i20, $i21, $i22, $i24, $i26;
        java.lang.String $r2, $r4, $r5, $r9, $r19;
        char $c16, $c17;
        char[] $r1, $r7, $r10, $r13, r15, $r17, $r20;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i12 := @parameter0: int;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z0 != 0 goto label08;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i7 = $i6 - $i5;

        $i9 = staticinvoke <org.xmlpull.mxp1.MXParser: int fastHash(char[],int,int)>($r10, $i8, $i7);

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        i18 = $i10 - 1;

     label01:
        if i18 < 0 goto label07;

        $r11 = r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash>;

        $i11 = $r11[i18];

        if $i9 != $i11 goto label06;

        $r12 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        $r13 = $r12[i18];

        $i13 = lengthof $r13;

        if i12 != $i13 goto label06;

        $r14 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        r15 = $r14[i18];

        i19 = 0;

     label02:
        if i19 >= i12 goto label04;

        $r20 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i15 = $i14 + i19;

        $c17 = $r20[$i15];

        $c16 = r15[i19];

        $i21 = (int) $c17;

        $i22 = (int) $c16;

        if $i21 == $i22 goto label03;

        goto label06;

     label03:
        i19 = i19 + 1;

        goto label02;

     label04:
        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z2 == 0 goto label05;

        $r18 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement>;

        $r19 = $r18[i18];

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = $r19;

     label05:
        $r16 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        $r17 = $r16[i18];

        return $r17;

     label06:
        $i24 = (int) -1;

        i18 = i18 + $i24;

        goto label01;

     label07:
        goto label12;

     label08:
        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i2 = $i1 - $i0;

        $r2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r1, $i3, $i2);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName> = $r2;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int entityEnd>;

        i20 = $i4 - 1;

     label09:
        if i20 < 0 goto label12;

        $r5 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String entityRefName>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName>;

        $r4 = $r3[i20];

        if $r5 != $r4 goto label11;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z1 == 0 goto label10;

        $r8 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement>;

        $r9 = $r8[i20];

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String text> = $r9;

     label10:
        $r6 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        $r7 = $r6[i20];

        return $r7;

     label11:
        $i26 = (int) -1;

        i20 = i20 + $i26;

        goto label09;

     label12:
        return null;
    }

    protected void parseComment() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r8, $r10, $r16, $r17, $r18, $r19, $r20, $r24, $r26;
        java.lang.String $r9, $r11, $r21;
        char[] $r1, $r2, $r3, $r4, $r5, $r22;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, z11, z12, z13, z14;
        java.io.EOFException $r13;
        org.xmlpull.v1.XmlPullParserException $r23, $r25, $r27;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        char $c0, $c25;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i28 = (int) $c0;

        if $i28 == 45 goto label01;

        $r23 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r23.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!-- for comment start", r0, null);

        throw $r23;

     label01:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z0 == 0 goto label02;

        $i22 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i22;

     label02:
        $i23 = r0.<org.xmlpull.mxp1.MXParser: int lineNumber>;

        $i24 = r0.<org.xmlpull.mxp1.MXParser: int columnNumber>;

     label03:
        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z1 != 1 goto label04;

        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z7 != 0 goto label04;

        $z8 = 1;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        z9 = $z8;

        z10 = 0;

        z11 = 0;

        z12 = 0;

        z14 = 0;

        z13 = 0;

     label06:
        $c25 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        if z14 == 0 goto label07;

        $i29 = (int) $c25;

        if $i29 == 62 goto label07;

        $r25 = new org.xmlpull.v1.XmlPullParserException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("in comment after two dashes (--) next character must be > not ");

        $r9 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c25);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r11, r0, null);

        throw $r25;

     label07:
        $i30 = (int) $c25;

        if $i30 != 45 goto label09;

        if z11 != 0 goto label08;

        z11 = 1;

        goto label12;

     label08:
        z12 = 1;

        z14 = 1;

        z13 = 1;

        z11 = 0;

        goto label12;

     label09:
        $i31 = (int) $c25;

        if $i31 != 62 goto label11;

        if z13 == 0 goto label10;

        goto label22;

     label10:
        z12 = 0;

        z14 = 0;

        z13 = 0;

        z11 = 0;

        goto label12;

     label11:
        z11 = 0;

     label12:
        if z9 == 0 goto label06;

        $i32 = (int) $c25;

        if $i32 != 13 goto label16;

        z10 = 1;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z4 != 0 goto label14;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i15 = $i14 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i15;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i17 <= $i16 goto label13;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label14;

     label13:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label14:
        $i26 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r22 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i27 = lengthof $r22;

        if $i26 < $i27 goto label15;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i13);

     label15:
        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i12 = $i11 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i12;

        $r5[$i11] = 10;

        goto label06;

     label16:
        $i33 = (int) $c25;

        if $i33 != 10 goto label19;

        if z10 != 0 goto label18;

        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z3 == 0 goto label18;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i6 = lengthof $r3;

        if $i7 < $i6 goto label17;

        $i10 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i10);

     label17:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i9 = $i8 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i9;

        $r4[$i8] = 10;

     label18:
        z10 = 0;

        goto label06;

     label19:
        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z2 == 0 goto label21;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label20;

        $i5 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i5);

     label20:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i4 = $i3 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i4;

        $r2[$i3] = $c25;

     label21:
        z10 = 0;

        goto label06;

     label22:
        goto label24;

     label23:
        $r13 := @caughtexception;

        $r27 = new org.xmlpull.v1.XmlPullParserException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("comment started on line ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i23);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and column ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i24);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was not closed");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r21, r0, $r13);

        throw $r27;

     label24:
        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z5 == 0 goto label25;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i19 = $i18 - 3;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i19;

        $z6 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z6 == 0 goto label25;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i21 = $i20 - 2;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i21;

     label25:
        return;

        catch java.io.EOFException from label03 to label22 with label23;
    }

    protected boolean parsePI() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r23, $r24, $r25, $r26, $r27, $r33;
        java.lang.String $r11, $r28;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r16, $r17, $r18, $r29;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, $z12, $z13;
        java.io.EOFException $r20;
        org.xmlpull.v1.XmlPullParserException $r30, $r31, $r32, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i26, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i41, $i43, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, i54, $i57, $i58, $i60, $i61, $i62, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i77;
        char $c23, $c25, $c27, $c28, $c38, $c40, $c42, $c44, $c45, $c55, c56;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z0 == 0 goto label01;

        $i50 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i50;

     label01:
        $i51 = r0.<org.xmlpull.mxp1.MXParser: int lineNumber>;

        $i52 = r0.<org.xmlpull.mxp1.MXParser: int columnNumber>;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i53 = $i1 + $i0;

        $i60 = (int) -1;

        i54 = $i60;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z1 != 1 goto label02;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z8 != 0 goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        z2 = $z9;

        z10 = 0;

     label04:
        z11 = 0;

        $c55 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        c56 = $c55;

        $z12 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>($c55);

        if $z12 == 0 goto label05;

        $r30 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r30.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("processing instruction PITarget must be exactly after <? and not white space character", r0, null);

        throw $r30;

     label05:
        $i61 = (int) c56;

        if $i61 != 63 goto label06;

        z11 = 1;

        goto label17;

     label06:
        $i62 = (int) c56;

        if $i62 != 62 goto label08;

        if z11 == 0 goto label07;

        goto label28;

     label07:
        z11 = 0;

        goto label17;

     label08:
        $i64 = (int) -1;

        if i54 != $i64 goto label16;

        $z6 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c56);

        if $z6 == 0 goto label16;

        $i19 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i21 = $i19 - 1;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i54 = $i21 + $i20;

        $i22 = i54 - $i53;

        if $i22 != 3 goto label16;

        $r6 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $c23 = $r6[$i53];

        $i65 = (int) $c23;

        if $i65 == 120 goto label09;

        $r18 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $c45 = $r18[$i53];

        $i66 = (int) $c45;

        if $i66 != 88 goto label16;

     label09:
        $r7 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i24 = $i53 + 1;

        $c25 = $r7[$i24];

        $i67 = (int) $c25;

        if $i67 == 109 goto label10;

        $r17 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i43 = $i53 + 1;

        $c44 = $r17[$i43];

        $i68 = (int) $c44;

        if $i68 != 77 goto label16;

     label10:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i26 = $i53 + 2;

        $c27 = $r8[$i26];

        $i69 = (int) $c27;

        if $i69 == 108 goto label11;

        $r16 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i41 = $i53 + 2;

        $c42 = $r16[$i41];

        $i70 = (int) $c42;

        if $i70 != 76 goto label16;

     label11:
        if $i53 <= 3 goto label12;

        $r31 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r31.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("processing instruction can not have PITarget with reserveld xml name", r0, null);

        throw $r31;

     label12:
        $r9 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $c28 = $r9[$i53];

        $i71 = (int) $c28;

        if $i71 == 120 goto label13;

        $r12 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i37 = $i53 + 1;

        $c38 = $r12[$i37];

        $i72 = (int) $c38;

        if $i72 == 109 goto label13;

        $r13 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i39 = $i53 + 2;

        $c40 = $r13[$i39];

        $i73 = (int) $c40;

        if $i73 == 108 goto label13;

        $r32 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r32.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("XMLDecl must have xml name in lowercase", r0, null);

        throw $r32;

     label13:
        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseXmlDecl(char)>(c56);

        $z13 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z13 == 0 goto label14;

        $i33 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i34 = $i33 - 2;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i34;

     label14:
        $i29 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i30 = $i53 - $i29;

        $i35 = $i30 + 3;

        $i31 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i32 = $i31 - 2;

        $i36 = $i32 - $i35;

        $r10 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $r11 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r10, $i35, $i36);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String xmlDeclContent> = $r11;

     label15:
        return 0;

     label16:
        z11 = 0;

     label17:
        if z2 == 0 goto label27;

        $i74 = (int) c56;

        if $i74 != 13 goto label21;

        z10 = 1;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z5 != 0 goto label19;

        $i15 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i16 = $i15 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i16;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i18 <= $i17 goto label18;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label19;

     label18:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label19:
        $i57 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r29 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i58 = lengthof $r29;

        if $i57 < $i58 goto label20;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i14);

     label20:
        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i12 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i13 = $i12 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i13;

        $r5[$i12] = 10;

        goto label27;

     label21:
        $i75 = (int) c56;

        if $i75 != 10 goto label24;

        if z10 != 0 goto label23;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z4 == 0 goto label23;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i7 = lengthof $r3;

        if $i8 < $i7 goto label22;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i11);

     label22:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i10 = $i9 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i10;

        $r4[$i9] = 10;

     label23:
        z10 = 0;

        goto label27;

     label24:
        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z3 == 0 goto label26;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i2 = lengthof $r1;

        if $i3 < $i2 goto label25;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i6);

     label25:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i5 = $i4 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i5;

        $r2[$i4] = c56;

     label26:
        z10 = 0;

     label27:
        c56 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label05;

     label28:
        goto label30;

     label29:
        $r20 := @caughtexception;

        $r34 = new org.xmlpull.v1.XmlPullParserException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("processing instruction started on line ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i51);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and column ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i52);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was not closed");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r28, r0, $r20);

        throw $r34;

     label30:
        $i77 = (int) -1;

        if i54 != $i77 goto label31;

     label31:
        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z7 == 0 goto label32;

        $i46 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i47 = $i46 - 2;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i47;

        if z2 == 0 goto label32;

        $i48 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i49 = $i48 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i49;

     label32:
        return 1;

        catch java.io.EOFException from label04 to label15 with label29;
        catch java.io.EOFException from label16 to label28 with label29;
    }

    protected void parseXmlDecl(char) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParserException $r21, $r23, $r25;
        java.lang.StringBuffer $r4, $r6, $r10, $r12, $r16, $r18, $r20, $r22, $r24;
        int $i5, i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String $r5, $r7, $r11, $r13, $r17, $r19;
        char $c0, $c1, $c2, $c3, $c4, c8, c9;
        char[] $r1;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        c8 := @parameter0: char;

        r0.<org.xmlpull.mxp1.MXParser: boolean preventBufferCompaction> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int bufStart> = 0;

        $c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>(c8);

        $r1 = <org.xmlpull.mxp1.MXParser: char[] VERSION>;

        $c1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char requireInput(char,char[])>($c0, $r1);

        $c2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c1);

        $i10 = (int) $c2;

        if $i10 == 61 goto label1;

        $r21 = new org.xmlpull.v1.XmlPullParserException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected equals sign (=) after version and not ");

        $r17 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r19, r0, null);

        throw $r21;

     label1:
        $c3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $c4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c3);

        $i11 = (int) $c4;

        if $i11 == 39 goto label2;

        $i12 = (int) $c4;

        if $i12 == 34 goto label2;

        $r23 = new org.xmlpull.v1.XmlPullParserException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected apostrophe (\') or quotation mark (\") after version and not ");

        $r11 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r13, r0, null);

        throw $r23;

     label2:
        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        c9 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label3:
        $i13 = (int) c9;

        $i14 = (int) $c4;

        if $i13 == $i14 goto label8;

        $i15 = (int) c9;

        if $i15 < 97 goto label4;

        $i16 = (int) c9;

        if $i16 <= 122 goto label7;

     label4:
        $i17 = (int) c9;

        if $i17 < 65 goto label5;

        $i18 = (int) c9;

        if $i18 <= 90 goto label7;

     label5:
        $i19 = (int) c9;

        if $i19 < 48 goto label6;

        $i20 = (int) c9;

        if $i20 <= 57 goto label7;

     label6:
        $i21 = (int) c9;

        if $i21 == 95 goto label7;

        $i22 = (int) c9;

        if $i22 == 46 goto label7;

        $i23 = (int) c9;

        if $i23 == 58 goto label7;

        $i24 = (int) c9;

        if $i24 == 45 goto label7;

        $r25 = new org.xmlpull.v1.XmlPullParserException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml version value expected to be in ([a-zA-Z0-9_.:] | \'-\') not ");

        $r5 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c9);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r7, r0, null);

        throw $r25;

     label7:
        c9 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label3;

     label8:
        $i5 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        i6 = $i5 - 1;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void parseXmlDeclWithVersion(int,int)>($i7, i6);

        r0.<org.xmlpull.mxp1.MXParser: boolean preventBufferCompaction> = 0;

        return;
    }

    protected void parseXmlDeclWithVersion(int, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r8, $r10, $r14, $r16, $r21, $r23, $r29, $r30, $r31, $r33, $r39, $r41, $r45, $r47, $r52, $r54, $r60, $r62, $r66, $r68, $r72, $r74, $r78, $r82, $r83, $r85, $r88, $r90, $r92, $r94, $r96, $r98, $r102, $r104, $r106, $r108;
        org.xmlpull.mxp1.MXParser r0;
        org.xmlpull.v1.XmlPullParserException $r87, $r89, $r91, $r93, $r95, $r97, $r99, $r103, $r105, $r107, $r109;
        int i0, i1, $i2, $i4, $i6, $i8, $i26, i27, $i28, $i29, $i30, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66;
        java.lang.Boolean $r100, $r101;
        java.lang.String $r5, $r9, $r11, $r15, $r17, $r22, $r24, $r32, $r34, $r40, $r42, $r46, $r48, $r53, $r55, $r57, $r61, $r63, $r67, $r69, $r73, $r75, $r81, $r84, $r86;
        char[] $r1, $r2, $r3, $r4, $r18, $r25, $r35, $r49, $r56, $r80;
        char $c3, $c5, $c7, $c9, $c10, $c11, $c12, $c13, $c14, $c15, $c16, $c17, $c18, $c19, $c20, $c21, $c22, $c23, $c24, $c25, c31, c32, c33, c34;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i2 = i0 - i1;

        if $i2 != 3 goto label01;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $c3 = $r1[i1];

        $i35 = (int) $c3;

        if $i35 != 49 goto label01;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i4 = i1 + 1;

        $c5 = $r2[$i4];

        $i36 = (int) $c5;

        if $i36 != 46 goto label01;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i6 = i1 + 2;

        $c7 = $r3[$i6];

        $i37 = (int) $c7;

        if $i37 == 48 goto label02;

     label01:
        $r87 = new org.xmlpull.v1.XmlPullParserException;

        $r85 = new java.lang.StringBuffer;

        specialinvoke $r85.<java.lang.StringBuffer: void <init>()>();

        $r78 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("only 1.0 is supported as <?xml version not \'");

        $r86 = new java.lang.String;

        $r80 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i30 = i0 - i1;

        specialinvoke $r86.<java.lang.String: void <init>(char[],int,int)>($r80, i1, $i30);

        $r81 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(java.lang.String)>($r86);

        $r82 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r87.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r84, r0, null);

        throw $r87;

     label02:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i8 = i0 - i1;

        $r5 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r4, i1, $i8);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String xmlDeclVersion> = $r5;

        $c9 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $c10 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c9);

        c31 = $c10;

        $i38 = (int) $c10;

        if $i38 != 101 goto label14;

        $c20 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $r49 = <org.xmlpull.mxp1.MXParser: char[] NCODING>;

        $c21 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char requireInput(char,char[])>($c20, $r49);

        $c22 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c21);

        $i39 = (int) $c22;

        if $i39 == 61 goto label03;

        $r89 = new org.xmlpull.v1.XmlPullParserException;

        $r88 = new java.lang.StringBuffer;

        specialinvoke $r88.<java.lang.StringBuffer: void <init>()>();

        $r72 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected equals sign (=) after encoding and not ");

        $r73 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c22);

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r89.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r75, r0, null);

        throw $r89;

     label03:
        $c23 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $c24 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c23);

        $i40 = (int) $c24;

        if $i40 == 39 goto label04;

        $i41 = (int) $c24;

        if $i41 == 34 goto label04;

        $r91 = new org.xmlpull.v1.XmlPullParserException;

        $r90 = new java.lang.StringBuffer;

        specialinvoke $r90.<java.lang.StringBuffer: void <init>()>();

        $r66 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected apostrophe (\') or quotation mark (\") after encoding and not ");

        $r67 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c24);

        $r68 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r91.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r69, r0, null);

        throw $r91;

     label04:
        $i29 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $c25 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i42 = (int) $c25;

        if $i42 < 97 goto label05;

        $i43 = (int) $c25;

        if $i43 <= 122 goto label07;

     label05:
        $i44 = (int) $c25;

        if $i44 < 65 goto label06;

        $i45 = (int) $c25;

        if $i45 <= 90 goto label07;

     label06:
        $r93 = new org.xmlpull.v1.XmlPullParserException;

        $r92 = new java.lang.StringBuffer;

        specialinvoke $r92.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml encoding name expected to start with [A-Za-z] not ");

        $r53 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c25);

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r93.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r55, r0, null);

        throw $r93;

     label07:
        c32 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label08:
        $i46 = (int) c32;

        $i47 = (int) $c24;

        if $i46 == $i47 goto label13;

        $i48 = (int) c32;

        if $i48 < 97 goto label09;

        $i49 = (int) c32;

        if $i49 <= 122 goto label12;

     label09:
        $i50 = (int) c32;

        if $i50 < 65 goto label10;

        $i51 = (int) c32;

        if $i51 <= 90 goto label12;

     label10:
        $i52 = (int) c32;

        if $i52 < 48 goto label11;

        $i53 = (int) c32;

        if $i53 <= 57 goto label12;

     label11:
        $i54 = (int) c32;

        if $i54 == 46 goto label12;

        $i55 = (int) c32;

        if $i55 == 95 goto label12;

        $i56 = (int) c32;

        if $i56 == 45 goto label12;

        $r95 = new org.xmlpull.v1.XmlPullParserException;

        $r94 = new java.lang.StringBuffer;

        specialinvoke $r94.<java.lang.StringBuffer: void <init>()>();

        $r60 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml encoding value expected to be in ([A-Za-z0-9._] | \'-\') not ");

        $r61 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c32);

        $r62 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r95.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r63, r0, null);

        throw $r95;

     label12:
        c32 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label08;

     label13:
        $i26 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        i27 = $i26 - 1;

        $r56 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i28 = i27 - $i29;

        $r57 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>($r56, $i29, $i28);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.String inputEncoding> = $r57;

        c31 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label14:
        $c11 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>(c31);

        c33 = $c11;

        $i57 = (int) $c11;

        if $i57 != 115 goto label21;

        $c14 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $r18 = <org.xmlpull.mxp1.MXParser: char[] TANDALONE>;

        $c15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char requireInput(char,char[])>($c14, $r18);

        $c16 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c15);

        $i58 = (int) $c16;

        if $i58 == 61 goto label15;

        $r97 = new org.xmlpull.v1.XmlPullParserException;

        $r96 = new java.lang.StringBuffer;

        specialinvoke $r96.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected equals sign (=) after standalone and not ");

        $r46 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c16);

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r97.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r48, r0, null);

        throw $r97;

     label15:
        $c17 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $c18 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c17);

        $i59 = (int) $c18;

        if $i59 == 39 goto label16;

        $i60 = (int) $c18;

        if $i60 == 34 goto label16;

        $r99 = new org.xmlpull.v1.XmlPullParserException;

        $r98 = new java.lang.StringBuffer;

        specialinvoke $r98.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected apostrophe (\') or quotation mark (\") after encoding and not ");

        $r40 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c18);

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r99.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r42, r0, null);

        throw $r99;

     label16:
        $c19 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i61 = (int) $c19;

        if $i61 != 121 goto label17;

        $r35 = <org.xmlpull.mxp1.MXParser: char[] YES>;

        c34 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char requireInput(char,char[])>($c19, $r35);

        $r100 = new java.lang.Boolean;

        specialinvoke $r100.<java.lang.Boolean: void <init>(boolean)>(1);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.Boolean xmlDeclStandalone> = $r100;

        goto label19;

     label17:
        $i62 = (int) $c19;

        if $i62 != 110 goto label18;

        $r25 = <org.xmlpull.mxp1.MXParser: char[] NO>;

        c34 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char requireInput(char,char[])>($c19, $r25);

        $r101 = new java.lang.Boolean;

        specialinvoke $r101.<java.lang.Boolean: void <init>(boolean)>(0);

        r0.<org.xmlpull.mxp1.MXParser: java.lang.Boolean xmlDeclStandalone> = $r101;

        goto label19;

     label18:
        $r103 = new org.xmlpull.v1.XmlPullParserException;

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected \'yes\' or \'no\' after standalone and not ");

        $r22 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c19);

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r103.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r24, r0, null);

        throw $r103;

     label19:
        $i63 = (int) c34;

        $i64 = (int) $c18;

        if $i63 == $i64 goto label20;

        $r105 = new org.xmlpull.v1.XmlPullParserException;

        $r104 = new java.lang.StringBuffer;

        specialinvoke $r104.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c18);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" after standalone value not ");

        $r32 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c34);

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r105.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r34, r0, null);

        throw $r105;

     label20:
        c33 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

     label21:
        $c12 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>(c33);

        $i65 = (int) $c12;

        if $i65 == 63 goto label22;

        $r107 = new org.xmlpull.v1.XmlPullParserException;

        $r106 = new java.lang.StringBuffer;

        specialinvoke $r106.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected ?> as last part of <?xml not ");

        $r15 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c12);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r107.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r17, r0, null);

        throw $r107;

     label22:
        $c13 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i66 = (int) $c13;

        if $i66 == 62 goto label23;

        $r109 = new org.xmlpull.v1.XmlPullParserException;

        $r108 = new java.lang.StringBuffer;

        specialinvoke $r108.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected ?> as last part of <?xml not ");

        $r9 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c13);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r109.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r11, r0, null);

        throw $r109;

     label23:
        return;
    }

    protected void parseDocdecl() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, z7;
        org.xmlpull.v1.XmlPullParserException $r13, $r14, $r15, $r16, $r17, $r18;
        int $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c27;
        char[] $r1, $r2, $r3, $r4, $r5, $r12;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i30 = (int) $c0;

        if $i30 == 79 goto label01;

        $r13 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!DOCTYPE", r0, null);

        throw $r13;

     label01:
        $c1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i31 = (int) $c1;

        if $i31 == 67 goto label02;

        $r14 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r14.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!DOCTYPE", r0, null);

        throw $r14;

     label02:
        $c2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i32 = (int) $c2;

        if $i32 == 84 goto label03;

        $r15 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r15.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!DOCTYPE", r0, null);

        throw $r15;

     label03:
        $c3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i33 = (int) $c3;

        if $i33 == 89 goto label04;

        $r16 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r16.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!DOCTYPE", r0, null);

        throw $r16;

     label04:
        $c4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i34 = (int) $c4;

        if $i34 == 80 goto label05;

        $r17 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r17.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!DOCTYPE", r0, null);

        throw $r17;

     label05:
        $c5 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i35 = (int) $c5;

        if $i35 == 69 goto label06;

        $r18 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r18.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <!DOCTYPE", r0, null);

        throw $r18;

     label06:
        $i6 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i6;

        i26 = 0;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z0 != 1 goto label07;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z5 != 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        z1 = $z6;

        z7 = 0;

     label09:
        $c27 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i36 = (int) $c27;

        if $i36 != 91 goto label10;

        i26 = i26 + 1;

     label10:
        $i37 = (int) $c27;

        if $i37 != 93 goto label11;

        $i39 = (int) -1;

        i26 = i26 + $i39;

     label11:
        $i40 = (int) $c27;

        if $i40 != 62 goto label12;

        if i26 != 0 goto label12;

        goto label22;

     label12:
        if z1 == 0 goto label09;

        $i41 = (int) $c27;

        if $i41 != 13 goto label16;

        z7 = 1;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z4 != 0 goto label14;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i21 = $i20 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i21;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i22 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i23 <= $i22 goto label13;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label14;

     label13:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label14:
        $i28 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r12 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i29 = lengthof $r12;

        if $i28 < $i29 goto label15;

        $i19 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i19);

     label15:
        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i18 = $i17 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i18;

        $r5[$i17] = 10;

        goto label09;

     label16:
        $i42 = (int) $c27;

        if $i42 != 10 goto label19;

        if z7 != 0 goto label18;

        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z3 == 0 goto label18;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i12 = lengthof $r3;

        if $i13 < $i12 goto label17;

        $i16 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i16);

     label17:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i15 = $i14 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i15;

        $r4[$i14] = 10;

     label18:
        z7 = 0;

        goto label09;

     label19:
        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z2 == 0 goto label21;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i7 = lengthof $r1;

        if $i8 < $i7 goto label20;

        $i11 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i11);

     label20:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i10 = $i9 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i10;

        $r2[$i9] = $c27;

     label21:
        z7 = 0;

        goto label09;

     label22:
        $i24 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i25 = $i24 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i25;

        return;
    }

    protected void parseCDSect(boolean) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r15, $r16, $r17, $r18, $r19, $r28;
        java.lang.String $r20;
        char[] $r1, $r2, $r3, $r4, $r5, $r21;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, z10, z11, z12, $z13, $z14, z15, z16, z17;
        java.io.EOFException $r12;
        org.xmlpull.v1.XmlPullParserException $r22, $r23, $r24, $r25, $r26, $r27, $r29;
        int $i6, $i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c34;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        z6 := @parameter0: boolean;

        $c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i41 = (int) $c0;

        if $i41 == 67 goto label01;

        $r22 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r22.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <[CDATA[ for comment start", r0, null);

        throw $r22;

     label01:
        $c1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i42 = (int) $c1;

        if $i42 == 68 goto label02;

        $r23 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r23.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <[CDATA[ for comment start", r0, null);

        throw $r23;

     label02:
        $c2 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i43 = (int) $c2;

        if $i43 == 65 goto label03;

        $r24 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r24.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <[CDATA[ for comment start", r0, null);

        throw $r24;

     label03:
        $c3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i44 = (int) $c3;

        if $i44 == 84 goto label04;

        $r25 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r25.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <[CDATA[ for comment start", r0, null);

        throw $r25;

     label04:
        $c4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i45 = (int) $c4;

        if $i45 == 65 goto label05;

        $r26 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r26.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <[CDATA[ for comment start", r0, null);

        throw $r26;

     label05:
        $c5 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i46 = (int) $c5;

        if $i46 == 91 goto label06;

        $r27 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r27.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("expected <![CDATA[ for comment start", r0, null);

        throw $r27;

     label06:
        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        i8 = $i7 + $i6;

        i9 = r0.<org.xmlpull.mxp1.MXParser: int lineNumber>;

        i10 = r0.<org.xmlpull.mxp1.MXParser: int columnNumber>;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean tokenize>;

        if $z0 == 0 goto label07;

        $z8 = r0.<org.xmlpull.mxp1.MXParser: boolean roundtripSupported>;

        if $z8 != 0 goto label08;

     label07:
        $z14 = 1;

        $z13 = 1;

        goto label09;

     label08:
        $z14 = 0;

        $z13 = 0;

     label09:
        z1 = $z13;

     label10:
        if $z14 == 0 goto label12;

        if z6 == 0 goto label12;

        $z7 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z7 != 0 goto label12;

        $i33 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i32 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i33 <= $i32 goto label11;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label12;

     label11:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label12:
        z10 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

        z11 = 0;

        z12 = 0;

     label13:
        $c34 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $i47 = (int) $c34;

        if $i47 != 93 goto label15;

        if z17 != 0 goto label14;

        z10 = 1;

        z17 = 1;

        z16 = 1;

        z15 = 1;

        goto label18;

     label14:
        z11 = 1;

        goto label18;

     label15:
        $i48 = (int) $c34;

        if $i48 != 62 goto label17;

        if z15 == 0 goto label16;

        if z11 == 0 goto label16;

        goto label28;

     label16:
        z11 = 0;

        z10 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

        goto label18;

     label17:
        if z16 == 0 goto label18;

        z10 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

     label18:
        if z1 == 0 goto label13;

        $i49 = (int) $c34;

        if $i49 != 13 goto label22;

        z12 = 1;

        $i21 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i22 = i8 - $i21;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i22;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i24 = $i23 - 1;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i24;

        $z4 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z4 != 0 goto label20;

        $i29 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i28 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        if $i29 <= $i28 goto label19;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void joinPC()>();

        goto label20;

     label19:
        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = 0;

        r0.<org.xmlpull.mxp1.MXParser: int pcStart> = 0;

     label20:
        $i35 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r21 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i36 = lengthof $r21;

        if $i35 < $i36 goto label21;

        $i27 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i27);

     label21:
        $r5 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i25 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i26 = $i25 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i26;

        $r5[$i25] = 10;

        goto label13;

     label22:
        $i50 = (int) $c34;

        if $i50 != 10 goto label25;

        if z12 != 0 goto label24;

        $z3 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z3 == 0 goto label24;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i16 = lengthof $r3;

        if $i17 < $i16 goto label23;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i20);

     label23:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i19 = $i18 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i19;

        $r4[$i18] = 10;

     label24:
        z12 = 0;

        goto label13;

     label25:
        $z2 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z2 == 0 goto label27;

        $i12 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i11 = lengthof $r1;

        if $i12 < $i11 goto label26;

        $i15 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>($i15);

     label26:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i14 = $i13 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i14;

        $r2[$i13] = $c34;

     label27:
        z12 = 0;

        goto label13;

     label28:
        goto label30;

     label29:
        $r12 := @caughtexception;

        $r29 = new org.xmlpull.v1.XmlPullParserException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CDATA section started on line ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and column ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was not closed");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r29.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r20, r0, $r12);

        throw $r29;

     label30:
        if z1 == 0 goto label31;

        $z5 = r0.<org.xmlpull.mxp1.MXParser: boolean usePC>;

        if $z5 == 0 goto label31;

        $i30 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i31 = $i30 - 2;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i31;

     label31:
        $i37 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i38 = i8 - $i37;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i38;

        $i39 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i40 = $i39 - 3;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i40;

        return;

        catch java.io.EOFException from label10 to label28 with label29;
    }

    protected void fillBuf() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        char[][] $r20, $r34;
        java.io.Reader $r1, $r4;
        long $l42, $l43, $l44, $l45;
        java.lang.StringBuffer $r7, $r8, $r13, $r15, $r17, $r24, $r25, $r26, $r29, $r31, $r37, $r38, $r53, $r56, $r57, $r58, $r60;
        java.lang.String $r9, $r14, $r16, $r18, $r27, $r32, $r54, $r55;
        java.io.IOException $r61;
        char[] $r2, $r3, $r22, $r36, $r41, $r42, $r43, $r44, $r45, $r46, r48, $r49;
        org.xmlpull.mxp1.MXParser r0;
        int[] $r21, $r30, $r35;
        boolean $z0, $z1, z3, z4, $z5, $z6;
        java.io.EOFException $r52, $r59;
        org.xmlpull.v1.XmlPullParserException $r50, $r51;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, i54, $i55, $i56, $i57, $i58, i59, i60, $i62, $i64, $i66;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        if $r1 != null goto label01;

        $r50 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r50.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("reader must be set before parsing is started");

        throw $r50;

     label01:
        $i1 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int bufSoftLimit>;

        if $i1 <= $i0 goto label11;

        $i18 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i17 = r0.<org.xmlpull.mxp1.MXParser: int bufSoftLimit>;

        if $i18 <= $i17 goto label02;

        $z6 = 1;

        $z5 = 1;

        goto label03;

     label02:
        $z6 = 0;

        $z5 = 0;

     label03:
        z3 = $z5;

        z4 = 0;

        $z1 = r0.<org.xmlpull.mxp1.MXParser: boolean preventBufferCompaction>;

        if $z1 == 0 goto label04;

        z3 = 0;

        z4 = 1;

        goto label06;

     label04:
        if $z6 != 0 goto label06;

        $i53 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $r46 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i51 = lengthof $r46;

        $i52 = $i51 / 2;

        if $i53 >= $i52 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z3 = 1;

     label06:
        if z3 == 0 goto label07;

        $r45 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i50 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $r44 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i48 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i47 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i49 = $i48 - $i47;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r45, $i50, $r44, 0, $i49);

        goto label10;

     label07:
        if z4 == 0 goto label09;

        $r41 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i19 = lengthof $r41;

        i54 = 2 * $i19;

        r48 = newarray (char)[i54];

        $r42 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i23 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i21 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i20 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i22 = $i21 - $i20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r42, $i23, r48, 0, $i22);

        r0.<org.xmlpull.mxp1.MXParser: char[] buf> = r48;

        $i24 = r0.<org.xmlpull.mxp1.MXParser: int bufLoadFactor>;

        if $i24 <= 0 goto label08;

        $i40 = r0.<org.xmlpull.mxp1.MXParser: int bufLoadFactor>;

        $l43 = (long) $i40;

        $r43 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i41 = lengthof $r43;

        $l42 = (long) $i41;

        $l44 = $l43 * $l42;

        $l45 = $l44 / 100L;

        $i46 = (int) $l45;

        r0.<org.xmlpull.mxp1.MXParser: int bufSoftLimit> = $i46;

     label08:
        goto label10;

     label09:
        $r51 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r51.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("internal error in fillBuffer()");

        throw $r51;

     label10:
        $i26 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i25 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i27 = $i26 - $i25;

        r0.<org.xmlpull.mxp1.MXParser: int bufEnd> = $i27;

        $i29 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i28 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i30 = $i29 - $i28;

        r0.<org.xmlpull.mxp1.MXParser: int pos> = $i30;

        $i32 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $i31 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i33 = $i32 - $i31;

        r0.<org.xmlpull.mxp1.MXParser: int posStart> = $i33;

        $i35 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i34 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i36 = $i35 - $i34;

        r0.<org.xmlpull.mxp1.MXParser: int posEnd> = $i36;

        $i38 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        $i37 = r0.<org.xmlpull.mxp1.MXParser: int bufStart>;

        $i39 = $i38 + $i37;

        r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart> = $i39;

        r0.<org.xmlpull.mxp1.MXParser: int bufStart> = 0;

     label11:
        $r49 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i55 = lengthof $r49;

        $i56 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i57 = $i55 - $i56;

        if $i57 <= 8192 goto label12;

        $i58 = 8192;

        goto label13;

     label12:
        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i3 = lengthof $r2;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i58 = $i3 - $i2;

     label13:
        $r4 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i4 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i5 = virtualinvoke $r4.<java.io.Reader: int read(char[],int,int)>($r3, $i4, $i58);

        if $i5 <= 0 goto label14;

        $i15 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        $i16 = $i15 + $i5;

        r0.<org.xmlpull.mxp1.MXParser: int bufEnd> = $i16;

        return;

     label14:
        $i62 = (int) -1;

        if $i5 != $i62 goto label24;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int bufAbsoluteStart>;

        if $i6 != 0 goto label15;

        $i14 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        if $i14 != 0 goto label15;

        $r52 = new java.io.EOFException;

        specialinvoke $r52.<java.io.EOFException: void <init>(java.lang.String)>("input contained no data");

        throw $r52;

     label15:
        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean seenRoot>;

        if $z0 == 0 goto label16;

        $i13 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if $i13 != 0 goto label16;

        r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd> = 1;

        return;

     label16:
        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if $i7 <= 0 goto label23;

        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - expected end tag");

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if $i8 <= 1 goto label17;

        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("s");

     label17:
        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i59 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

     label18:
        if i59 <= 0 goto label19;

        $r54 = new java.lang.String;

        $r34 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $r36 = $r34[i59];

        $r35 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        $i12 = $r35[i59];

        specialinvoke $r54.<java.lang.String: void <init>(char[],int,int)>($r36, 0, $i12);

        $r37 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        $i64 = (int) -1;

        i59 = i59 + $i64;

        goto label18;

     label19:
        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to close");

        i60 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

     label20:
        if i60 <= 0 goto label22;

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int depth>;

        if i60 == $i9 goto label21;

        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and");

     label21:
        $r55 = new java.lang.String;

        $r20 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $r22 = $r20[i60];

        $r21 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        $i10 = $r21[i60];

        specialinvoke $r55.<java.lang.String: void <init>(char[],int,int)>($r22, 0, $i10);

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" start tag <");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from line ");

        $r30 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        $i11 = $r30[i60];

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $i66 = (int) -1;

        i60 = i60 + $i66;

        goto label20;

     label22:
        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", parser stopped on");

     label23:
        $r59 = new java.io.EOFException;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no more data available");

        $r14 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String getPositionDescription()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r59.<java.io.EOFException: void <init>(java.lang.String)>($r18);

        throw $r59;

     label24:
        $r61 = new java.io.IOException;

        $r60 = new java.lang.StringBuffer;

        specialinvoke $r60.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error reading input, returned ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r61;
    }

    protected char more() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        char $c8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        char[] $r1;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int bufEnd>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void fillBuf()>();

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean reachedEnd>;

        if $z0 == 0 goto label1;

        return 65535;

     label1:
        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i2 = r0.<org.xmlpull.mxp1.MXParser: int pos>;

        $i3 = $i2 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int pos> = $i3;

        $c8 = $r1[$i2];

        $i9 = (int) $c8;

        if $i9 != 10 goto label2;

        $i6 = r0.<org.xmlpull.mxp1.MXParser: int lineNumber>;

        $i7 = $i6 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int lineNumber> = $i7;

        r0.<org.xmlpull.mxp1.MXParser: int columnNumber> = 1;

        goto label3;

     label2:
        $i4 = r0.<org.xmlpull.mxp1.MXParser: int columnNumber>;

        $i5 = $i4 + 1;

        r0.<org.xmlpull.mxp1.MXParser: int columnNumber> = $i5;

     label3:
        return $c8;
    }

    protected void ensurePC(int)
    {
        int i0, $i1, $i2;
        char[] $r1, $r2;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        i0 := @parameter0: int;

        if i0 <= 8192 goto label1;

        $i2 = 2 * i0;

        goto label2;

     label1:
        $i2 = 16384;

     label2:
        $r2 = newarray (char)[$i2];

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

        r0.<org.xmlpull.mxp1.MXParser: char[] pc> = $r2;

        return;
    }

    protected void joinPC()
    {
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        char[] $r1, $r2, $r3;
        org.xmlpull.mxp1.MXParser r0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $i1 = r0.<org.xmlpull.mxp1.MXParser: int posEnd>;

        $i0 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        i2 = $i1 - $i0;

        $i3 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i4 = $i3 + i2;

        i5 = $i4 + 1;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i6 = lengthof $r1;

        if i5 < $i6 goto label1;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParser: void ensurePC(int)>(i5);

     label1:
        $r3 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $i8 = r0.<org.xmlpull.mxp1.MXParser: int posStart>;

        $r2 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $i7 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i8, $r2, $i7, i2);

        $i9 = r0.<org.xmlpull.mxp1.MXParser: int pcEnd>;

        $i10 = $i9 + i2;

        r0.<org.xmlpull.mxp1.MXParser: int pcEnd> = $i10;

        r0.<org.xmlpull.mxp1.MXParser: boolean usePC> = 1;

        return;
    }

    protected char requireInput(char, char[]) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.StringBuffer $r4, $r6, $r7, $r9, $r10, $r12, $r14;
        int $i0, i4, $i5, $i6;
        java.lang.String $r5, $r11, $r13, $r15;
        char $c1, $c2, c3;
        org.xmlpull.v1.XmlPullParserException $r16;
        char[] r0;
        org.xmlpull.mxp1.MXParser r1;

        r1 := @this: org.xmlpull.mxp1.MXParser;

        c3 := @parameter0: char;

        r0 := @parameter1: char[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label3;

        $c1 = r0[i4];

        $i5 = (int) c3;

        $i6 = (int) $c1;

        if $i5 == $i6 goto label2;

        $r16 = new org.xmlpull.v1.XmlPullParserException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected ");

        $c2 = r0[i4];

        $r5 = virtualinvoke r1.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(char[])>(r0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and not ");

        $r11 = virtualinvoke r1.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>(c3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r13, r1, null);

        throw $r16;

     label2:
        c3 = virtualinvoke r1.<org.xmlpull.mxp1.MXParser: char more()>();

        i4 = i4 + 1;

        goto label1;

     label3:
        return c3;
    }

    protected char requireNextS() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        char $c0, $c1;
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.StringBuffer $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        $c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        $z0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>($c0);

        if $z0 != 0 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("white space is required and not ");

        $r4 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r6, r0, null);

        throw $r1;

     label1:
        $c1 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char skipS(char)>($c0);

        return $c1;
    }

    protected char skipS(char) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        char c0;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        c0 := @parameter0: char;

     label1:
        $z0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: boolean isS(char)>(c0);

        if $z0 == 0 goto label2;

        c0 = virtualinvoke r0.<org.xmlpull.mxp1.MXParser: char more()>();

        goto label1;

     label2:
        return c0;
    }

    private static final void setName(char)
    {
        boolean[] $r0;
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $r0 = <org.xmlpull.mxp1.MXParser: boolean[] lookupNameChar>;

        $i1 = (int) c0;

        $r0[$i1] = 1;

        return;
    }

    private static final void setNameStart(char)
    {
        boolean[] $r0;
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $r0 = <org.xmlpull.mxp1.MXParser: boolean[] lookupNameStartChar>;

        $i1 = (int) c0;

        $r0[$i1] = 1;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setName(char)>(c0);

        return;
    }

    protected boolean isNameStartChar(char)
    {
        boolean[] $r0;
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.xmlpull.mxp1.MXParser r1;
        boolean $z0, $z1;

        r1 := @this: org.xmlpull.mxp1.MXParser;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 >= 1024 goto label1;

        $r0 = <org.xmlpull.mxp1.MXParser: boolean[] lookupNameStartChar>;

        $i2 = (int) c0;

        $z0 = $r0[$i2];

        if $z0 != 0 goto label4;

     label1:
        $i3 = (int) c0;

        if $i3 < 1024 goto label2;

        $i4 = (int) c0;

        if $i4 <= 8231 goto label4;

     label2:
        $i5 = (int) c0;

        if $i5 < 8234 goto label3;

        $i6 = (int) c0;

        if $i6 <= 8591 goto label4;

     label3:
        $i7 = (int) c0;

        if $i7 < 10240 goto label5;

        $i8 = (int) c0;

        $i10 = (int) 65519;

        if $i8 > $i10 goto label5;

     label4:
        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    protected boolean isNameChar(char)
    {
        boolean[] $r0;
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.xmlpull.mxp1.MXParser r1;
        boolean $z0, $z1;

        r1 := @this: org.xmlpull.mxp1.MXParser;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 >= 1024 goto label1;

        $r0 = <org.xmlpull.mxp1.MXParser: boolean[] lookupNameChar>;

        $i2 = (int) c0;

        $z0 = $r0[$i2];

        if $z0 != 0 goto label4;

     label1:
        $i3 = (int) c0;

        if $i3 < 1024 goto label2;

        $i4 = (int) c0;

        if $i4 <= 8231 goto label4;

     label2:
        $i5 = (int) c0;

        if $i5 < 8234 goto label3;

        $i6 = (int) c0;

        if $i6 <= 8591 goto label4;

     label3:
        $i7 = (int) c0;

        if $i7 < 10240 goto label5;

        $i8 = (int) c0;

        $i10 = (int) 65519;

        if $i8 > $i10 goto label5;

     label4:
        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    protected boolean isS(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        org.xmlpull.mxp1.MXParser r0;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParser;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 10 goto label1;

        $i3 = (int) c0;

        if $i3 == 13 goto label1;

        $i4 = (int) c0;

        if $i4 != 9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected java.lang.String printable(char)
    {
        java.lang.StringBuffer $r1, $r3, $r6, $r7, $r10, $r11;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r2, $r4, $r8;
        char c0;
        org.xmlpull.mxp1.MXParser r9;

        r9 := @this: org.xmlpull.mxp1.MXParser;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 != 10 goto label1;

        return "\\n";

     label1:
        $i2 = (int) c0;

        if $i2 != 13 goto label2;

        return "\\r";

     label2:
        $i3 = (int) c0;

        if $i3 != 9 goto label3;

        return "\\t";

     label3:
        $i4 = (int) c0;

        if $i4 != 39 goto label4;

        return "\\\'";

     label4:
        $i5 = (int) c0;

        if $i5 > 127 goto label5;

        $i6 = (int) c0;

        if $i6 >= 32 goto label6;

     label5:
        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\u");

        $i7 = (int) c0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label6:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String printable(java.lang.String)
    {
        char $c2;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i3;
        java.lang.String $r1, $r3, r4;
        org.xmlpull.mxp1.MXParser r2;

        r2 := @this: org.xmlpull.mxp1.MXParser;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        $r0 = new java.lang.StringBuffer;

        $i1 = $i0 + 10;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        i3 = 0;

     label2:
        if i3 >= $i0 goto label3;

        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i3);

        $r3 = virtualinvoke r2.<org.xmlpull.mxp1.MXParser: java.lang.String printable(char)>($c2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r0, $r2, $r4, $r6, $r8;
        boolean[] $r10, $r11;
        char c7, c8, c9, c10, c11, c12, c13;
        char[] $r1, $r3, $r5, $r7, $r9;

        <org.xmlpull.mxp1.MXParser: char LOOKUP_MAX_CHAR> = 1024;

        <org.xmlpull.mxp1.MXParser: int LOOKUP_MAX> = 1024;

        <org.xmlpull.mxp1.MXParser: int READ_CHUNK_SIZE> = 8192;

        <org.xmlpull.mxp1.MXParser: boolean TRACE_SIZING> = 0;

        <org.xmlpull.mxp1.MXParser: java.lang.String PROPERTY_LOCATION> = "http://xmlpull.org/v1/doc/properties.html#location";

        <org.xmlpull.mxp1.MXParser: java.lang.String PROPERTY_XMLDECL_CONTENT> = "http://xmlpull.org/v1/doc/properties.html#xmldecl-content";

        <org.xmlpull.mxp1.MXParser: java.lang.String PROPERTY_XMLDECL_STANDALONE> = "http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone";

        <org.xmlpull.mxp1.MXParser: java.lang.String PROPERTY_XMLDECL_VERSION> = "http://xmlpull.org/v1/doc/properties.html#xmldecl-version";

        <org.xmlpull.mxp1.MXParser: java.lang.String FEATURE_NAMES_INTERNED> = "http://xmlpull.org/v1/doc/features.html#names-interned";

        <org.xmlpull.mxp1.MXParser: java.lang.String FEATURE_XML_ROUNDTRIP> = "http://xmlpull.org/v1/doc/features.html#xml-roundtrip";

        <org.xmlpull.mxp1.MXParser: java.lang.String XMLNS_URI> = "http://www.w3.org/2000/xmlns/";

        <org.xmlpull.mxp1.MXParser: java.lang.String XML_URI> = "http://www.w3.org/XML/1998/namespace";

        $r0 = "version";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.xmlpull.mxp1.MXParser: char[] VERSION> = $r1;

        $r2 = "ncoding";

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <org.xmlpull.mxp1.MXParser: char[] NCODING> = $r3;

        $r4 = "tandalone";

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        <org.xmlpull.mxp1.MXParser: char[] TANDALONE> = $r5;

        $r6 = "yes";

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        <org.xmlpull.mxp1.MXParser: char[] YES> = $r7;

        $r8 = "no";

        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        <org.xmlpull.mxp1.MXParser: char[] NO> = $r9;

        $r10 = newarray (boolean)[1024];

        <org.xmlpull.mxp1.MXParser: boolean[] lookupNameStartChar> = $r10;

        $r11 = newarray (boolean)[1024];

        <org.xmlpull.mxp1.MXParser: boolean[] lookupNameChar> = $r11;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(58);

        c7 = 65;

     label01:
        if c7 > 90 goto label02;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(c7);

        $i6 = c7 + 1;

        c7 = (char) $i6;

        goto label01;

     label02:
        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(95);

        c8 = 97;

     label03:
        if c8 > 122 goto label04;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(c8);

        $i5 = c8 + 1;

        c8 = (char) $i5;

        goto label03;

     label04:
        c9 = 192;

     label05:
        if c9 > 767 goto label06;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(c9);

        $i4 = c9 + 1;

        c9 = (char) $i4;

        goto label05;

     label06:
        c10 = 880;

     label07:
        if c10 > 893 goto label08;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(c10);

        $i3 = c10 + 1;

        c10 = (char) $i3;

        goto label07;

     label08:
        c11 = 895;

     label09:
        if c11 >= 1024 goto label10;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setNameStart(char)>(c11);

        $i2 = c11 + 1;

        c11 = (char) $i2;

        goto label09;

     label10:
        staticinvoke <org.xmlpull.mxp1.MXParser: void setName(char)>(45);

        staticinvoke <org.xmlpull.mxp1.MXParser: void setName(char)>(46);

        c12 = 48;

     label11:
        if c12 > 57 goto label12;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setName(char)>(c12);

        $i1 = c12 + 1;

        c12 = (char) $i1;

        goto label11;

     label12:
        staticinvoke <org.xmlpull.mxp1.MXParser: void setName(char)>(183);

        c13 = 768;

     label13:
        if c13 > 879 goto label14;

        staticinvoke <org.xmlpull.mxp1.MXParser: void setName(char)>(c13);

        $i0 = c13 + 1;

        c13 = (char) $i0;

        goto label13;

     label14:
        return;
    }
}
