public class org.apache.batik.ext.awt.color.ICCColorSpaceExt extends java.awt.color.ICC_ColorSpace
{
    public static final int PERCEPTUAL;
    public static final int RELATIVE_COLORIMETRIC;
    public static final int ABSOLUTE_COLORIMETRIC;
    public static final int SATURATION;
    public static final int AUTO;
    static final java.awt.color.ColorSpace sRGB;
    int intent;

    public void <init>(java.awt.color.ICC_Profile, int)
    {
        java.awt.color.ICC_Profile r1;
        byte[] $r2;
        byte $b1;
        int i0;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        r1 := @parameter0: java.awt.color.ICC_Profile;

        i0 := @parameter1: int;

        specialinvoke r0.<java.awt.color.ICC_ColorSpace: void <init>(java.awt.color.ICC_Profile)>(r1);

        r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: int intent> = i0;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label3:
        if i0 == 4 goto label4;

        $r2 = virtualinvoke r1.<java.awt.color.ICC_Profile: byte[] getData(int)>(1751474532);

        $b1 = (byte) i0;

        $r2[64] = $b1;

     label4:
        return;
    }

    public float[] intendedToRGB(float[])
    {
        java.lang.Error $r6;
        float[] r1, $r2, $r3, $r4, $r5;
        java.lang.StringBuffer $r7, $r8, $r9;
        int $i0, $i1;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;
        java.lang.String $r10;

        r0 := @this: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        r1 := @parameter0: float[];

        $i0 = r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: int intent>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label2;
            default: goto label5;
        };

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] absoluteColorimetricToRGB(float[])>(r1);

        return $r3;

     label2:
        $r5 = virtualinvoke r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] perceptualToRGB(float[])>(r1);

        return $r5;

     label3:
        $r4 = virtualinvoke r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] relativeColorimetricToRGB(float[])>(r1);

        return $r4;

     label4:
        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] saturationToRGB(float[])>(r1);

        return $r2;

     label5:
        $r6 = new java.lang.Error;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid intent:");

        $i1 = r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: int intent>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    public float[] perceptualToRGB(float[])
    {
        float[] r1, $r2;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;

        r0 := @this: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        r1 := @parameter0: float[];

        $r2 = virtualinvoke r0.<java.awt.color.ICC_ColorSpace: float[] toRGB(float[])>(r1);

        return $r2;
    }

    public float[] relativeColorimetricToRGB(float[])
    {
        float[] r1, $r2, $r4;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;
        java.awt.color.ColorSpace $r3;

        r0 := @this: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        r1 := @parameter0: float[];

        $r2 = virtualinvoke r0.<java.awt.color.ICC_ColorSpace: float[] toCIEXYZ(float[])>(r1);

        $r3 = <org.apache.batik.ext.awt.color.ICCColorSpaceExt: java.awt.color.ColorSpace sRGB>;

        $r4 = virtualinvoke $r3.<java.awt.color.ColorSpace: float[] fromCIEXYZ(float[])>($r2);

        return $r4;
    }

    public float[] absoluteColorimetricToRGB(float[])
    {
        float[] r1, $r2;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;

        r0 := @this: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        r1 := @parameter0: float[];

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] perceptualToRGB(float[])>(r1);

        return $r2;
    }

    public float[] saturationToRGB(float[])
    {
        float[] r1, $r2;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r0;

        r0 := @this: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        r1 := @parameter0: float[];

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] perceptualToRGB(float[])>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.awt.color.ColorSpace $r0;

        <org.apache.batik.ext.awt.color.ICCColorSpaceExt: int AUTO> = 4;

        <org.apache.batik.ext.awt.color.ICCColorSpaceExt: int SATURATION> = 3;

        <org.apache.batik.ext.awt.color.ICCColorSpaceExt: int ABSOLUTE_COLORIMETRIC> = 2;

        <org.apache.batik.ext.awt.color.ICCColorSpaceExt: int RELATIVE_COLORIMETRIC> = 1;

        <org.apache.batik.ext.awt.color.ICCColorSpaceExt: int PERCEPTUAL> = 0;

        $r0 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        <org.apache.batik.ext.awt.color.ICCColorSpaceExt: java.awt.color.ColorSpace sRGB> = $r0;

        return;
    }
}
