public class org.jdesktop.swingx.geom.Star2D extends java.lang.Object implements java.awt.Shape
{
    private java.awt.Shape starShape;
    private double x;
    private double y;
    private double innerRadius;
    private double outerRadius;
    private int branchesCount;

    public void <init>(double, double, double, double, int)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        java.lang.IllegalArgumentException $r4, $r5;
        byte $b1;
        int i0, $i2;
        double d0, d1, d2, d3;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d2 := @parameter0: double;

        d3 := @parameter1: double;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        i0 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 3 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of branches must be >= 3.");

        throw $r4;

     label1:
        $b1 = d0 cmpl d1;

        $i2 = (int) $b1;

        if $i2 < 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The inner radius must be < outer radius.");

        throw $r5;

     label2:
        r0.<org.jdesktop.swingx.geom.Star2D: double x> = d2;

        r0.<org.jdesktop.swingx.geom.Star2D: double y> = d3;

        r0.<org.jdesktop.swingx.geom.Star2D: double innerRadius> = d0;

        r0.<org.jdesktop.swingx.geom.Star2D: double outerRadius> = d1;

        r0.<org.jdesktop.swingx.geom.Star2D: int branchesCount> = i0;

        $r1 = staticinvoke <org.jdesktop.swingx.geom.Star2D: java.awt.Shape generateStar(double,double,double,double,int)>(d2, d3, d0, d1, i0);

        r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape> = $r1;

        return;
    }

    private static java.awt.Shape generateStar(double, double, double, double, int)
    {
        float $f0, $f1, $f2, $f3, f4, f5, f6, f7;
        java.awt.geom.GeneralPath $r0;
        int i0, $i1, i2;
        double $d0, d1, $d2, $d3, d4, d5, $d6, $d7, $d8, d9, $d10, $d11, $d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, d33, d34, $d35, $d36, $d37, $d38;

        d5 := @parameter0: double;

        d9 := @parameter1: double;

        d13 := @parameter2: double;

        d4 := @parameter3: double;

        i0 := @parameter4: int;

        $r0 = new java.awt.geom.GeneralPath;

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>()>();

        $d0 = (double) i0;

        d1 = 6.283185307179586 / $d0;

        $i1 = i0 % 2;

        if $i1 != 0 goto label1;

        $d38 = 0.0;

        $d37 = 0.0;

        $d36 = 0.0;

        $d35 = 0.0;

        goto label2;

     label1:
        $d38 = -1.5707963267948966;

        $d37 = -1.5707963267948966;

        $d36 = -1.5707963267948966;

        $d35 = -1.5707963267948966;

     label2:
        $d2 = d1 / 2.0;

        $d31 = $d2 + $d38;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d37);

        $d6 = $d3 * d4;

        $d7 = $d6 + d5;

        $f0 = (float) $d7;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d35);

        $d10 = $d8 * d4;

        $d11 = $d10 + d9;

        $f1 = (float) $d11;

        $d12 = staticinvoke <java.lang.Math: double cos(double)>($d31);

        $d14 = $d12 * d13;

        $d15 = $d14 + d5;

        $f2 = (float) $d15;

        $d16 = staticinvoke <java.lang.Math: double sin(double)>($d31);

        $d17 = $d16 * d13;

        $d18 = $d17 + d9;

        $f3 = (float) $d18;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f0, $f1);

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f2, $f3);

        d33 = $d36 + d1;

        d34 = $d31 + d1;

        i2 = 1;

     label3:
        if i2 >= i0 goto label4;

        $d19 = staticinvoke <java.lang.Math: double cos(double)>(d33);

        $d20 = $d19 * d4;

        $d21 = $d20 + d5;

        f4 = (float) $d21;

        $d22 = staticinvoke <java.lang.Math: double sin(double)>(d33);

        $d23 = $d22 * d4;

        $d24 = $d23 + d9;

        f5 = (float) $d24;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f4, f5);

        $d25 = staticinvoke <java.lang.Math: double cos(double)>(d34);

        $d26 = $d25 * d13;

        $d27 = $d26 + d5;

        f6 = (float) $d27;

        $d28 = staticinvoke <java.lang.Math: double sin(double)>(d34);

        $d29 = $d28 * d13;

        $d30 = $d29 + d9;

        f7 = (float) $d30;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f6, f7);

        d33 = d33 + d1;

        d34 = d34 + d1;

        i2 = i2 + 1;

        goto label3;

     label4:
        virtualinvoke $r0.<java.awt.geom.GeneralPath: void closePath()>();

        return $r0;
    }

    public void setInnerRadius(double)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        java.lang.IllegalArgumentException $r3;
        byte $b0;
        int $i1, $i2;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        $d1 = r0.<org.jdesktop.swingx.geom.Star2D: double outerRadius>;

        $b0 = d0 cmpl $d1;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The inner radius must be < outer radius.");

        throw $r3;

     label1:
        r0.<org.jdesktop.swingx.geom.Star2D: double innerRadius> = d0;

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getX()>();

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getY()>();

        $d4 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getOuterRadius()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: int getBranchesCount()>();

        $r1 = staticinvoke <org.jdesktop.swingx.geom.Star2D: java.awt.Shape generateStar(double,double,double,double,int)>($d2, $d3, d0, $d4, $i1);

        r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape> = $r1;

        return;
    }

    public void setX(double)
    {
        java.awt.Shape $r1;
        int $i0;
        org.jdesktop.swingx.geom.Star2D r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        r0.<org.jdesktop.swingx.geom.Star2D: double x> = d0;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getY()>();

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getInnerRadius()>();

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getOuterRadius()>();

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: int getBranchesCount()>();

        $r1 = staticinvoke <org.jdesktop.swingx.geom.Star2D: java.awt.Shape generateStar(double,double,double,double,int)>(d0, $d1, $d2, $d3, $i0);

        r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape> = $r1;

        return;
    }

    public void setY(double)
    {
        java.awt.Shape $r1;
        int $i0;
        org.jdesktop.swingx.geom.Star2D r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        r0.<org.jdesktop.swingx.geom.Star2D: double y> = d0;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getX()>();

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getInnerRadius()>();

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getOuterRadius()>();

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: int getBranchesCount()>();

        $r1 = staticinvoke <org.jdesktop.swingx.geom.Star2D: java.awt.Shape generateStar(double,double,double,double,int)>($d1, d0, $d2, $d3, $i0);

        r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape> = $r1;

        return;
    }

    public void setOuterRadius(double)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        java.lang.IllegalArgumentException $r3;
        byte $b0;
        int $i1, $i2;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        $d1 = r0.<org.jdesktop.swingx.geom.Star2D: double innerRadius>;

        $b0 = $d1 cmpl d0;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The outer radius must be > inner radius.");

        throw $r3;

     label1:
        r0.<org.jdesktop.swingx.geom.Star2D: double outerRadius> = d0;

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getX()>();

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getY()>();

        $d4 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getInnerRadius()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: int getBranchesCount()>();

        $r1 = staticinvoke <org.jdesktop.swingx.geom.Star2D: java.awt.Shape generateStar(double,double,double,double,int)>($d2, $d3, $d4, d0, $i1);

        r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape> = $r1;

        return;
    }

    public void setBranchesCount(int)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        java.lang.IllegalArgumentException $r2;
        int i0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        i0 := @parameter0: int;

        if i0 > 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of branches must be >= 3.");

        throw $r2;

     label1:
        r0.<org.jdesktop.swingx.geom.Star2D: int branchesCount> = i0;

        $d0 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getX()>();

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getY()>();

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getInnerRadius()>();

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.geom.Star2D: double getOuterRadius()>();

        $r1 = staticinvoke <org.jdesktop.swingx.geom.Star2D: java.awt.Shape generateStar(double,double,double,double,int)>($d0, $d1, $d2, $d3, i0);

        r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape> = $r1;

        return;
    }

    public double getX()
    {
        org.jdesktop.swingx.geom.Star2D r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $d0 = r0.<org.jdesktop.swingx.geom.Star2D: double x>;

        return $d0;
    }

    public double getY()
    {
        org.jdesktop.swingx.geom.Star2D r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $d0 = r0.<org.jdesktop.swingx.geom.Star2D: double y>;

        return $d0;
    }

    public double getInnerRadius()
    {
        org.jdesktop.swingx.geom.Star2D r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $d0 = r0.<org.jdesktop.swingx.geom.Star2D: double innerRadius>;

        return $d0;
    }

    public double getOuterRadius()
    {
        org.jdesktop.swingx.geom.Star2D r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $d0 = r0.<org.jdesktop.swingx.geom.Star2D: double outerRadius>;

        return $d0;
    }

    public int getBranchesCount()
    {
        int $i0;
        org.jdesktop.swingx.geom.Star2D r0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $i0 = r0.<org.jdesktop.swingx.geom.Star2D: int branchesCount>;

        return $i0;
    }

    public java.awt.Rectangle getBounds()
    {
        java.awt.Shape $r1;
        java.awt.Rectangle $r2;
        org.jdesktop.swingx.geom.Star2D r0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $r1 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        return $r2;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        $r1 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public boolean contains(double, double)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        double d0, d1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $z0 = interfaceinvoke $r1.<java.awt.Shape: boolean contains(double,double)>(d0, d1);

        return $z0;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Point2D r1;
        org.jdesktop.swingx.geom.Star2D r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        r1 := @parameter0: java.awt.geom.Point2D;

        $r2 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean contains(java.awt.geom.Point2D)>(r1);

        return $z0;
    }

    public boolean intersects(double, double, double, double)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        double d0, d1, d2, d3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r1 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $z0 = interfaceinvoke $r1.<java.awt.Shape: boolean intersects(double,double,double,double)>(d0, d1, d2, d3);

        return $z0;
    }

    public boolean intersects(java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        org.jdesktop.swingx.geom.Star2D r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        $r2 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(r1);

        return $z0;
    }

    public boolean contains(double, double, double, double)
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.geom.Star2D r0;
        double d0, d1, d2, d3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r1 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $z0 = interfaceinvoke $r1.<java.awt.Shape: boolean contains(double,double,double,double)>(d0, d1, d2, d3);

        return $z0;
    }

    public boolean contains(java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        org.jdesktop.swingx.geom.Star2D r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        $r2 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean contains(java.awt.geom.Rectangle2D)>(r1);

        return $z0;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)
    {
        java.awt.Shape $r2;
        org.jdesktop.swingx.geom.Star2D r0;
        java.awt.geom.AffineTransform r1;
        java.awt.geom.PathIterator $r3;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(r1);

        return $r3;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform, double)
    {
        java.awt.Shape $r2;
        org.jdesktop.swingx.geom.Star2D r0;
        java.awt.geom.AffineTransform r1;
        double d0;
        java.awt.geom.PathIterator $r3;

        r0 := @this: org.jdesktop.swingx.geom.Star2D;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        d0 := @parameter1: double;

        $r2 = r0.<org.jdesktop.swingx.geom.Star2D: java.awt.Shape starShape>;

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double)>(r1, d0);

        return $r3;
    }
}
