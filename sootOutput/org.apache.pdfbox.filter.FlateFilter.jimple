public class org.apache.pdfbox.filter.FlateFilter extends java.lang.Object implements org.apache.pdfbox.filter.Filter
{
    private static final org.apache.commons.logging.Log LOG;
    private static final int BUFFER_SIZE;

    public void <init>()
    {
        org.apache.pdfbox.filter.FlateFilter r0;

        r0 := @this: org.apache.pdfbox.filter.FlateFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void decode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        byte[] $r12, $r13;
        org.apache.pdfbox.filter.FlateFilter r4;
        java.io.ByteArrayInputStream $r31;
        boolean $z0, $z1;
        org.apache.pdfbox.cos.COSDictionary r0, r26;
        org.apache.pdfbox.cos.COSBase $r3, $r22;
        java.lang.StringBuilder $r17, $r20, $r28;
        org.apache.pdfbox.cos.COSArray r27;
        java.io.ByteArrayOutputStream $r30;
        int $i0, $i1, $i2, i3, $i4, i5, $i7;
        java.util.zip.DataFormatException $r23;
        java.lang.String $r19, $r21;
        org.apache.pdfbox.cos.COSName $r1, $r2, $r7, $r8, $r9, $r14;
        java.io.OutputStream r6;
        java.io.IOException $r29, $r32;
        java.lang.Class $r18;
        org.apache.commons.logging.Log $r24;
        java.io.InputStream r5;

        r4 := @this: org.apache.pdfbox.filter.FlateFilter;

        r5 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.io.OutputStream;

        r0 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i3 := @parameter3: int;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE_PARMS>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DP>;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r2, $r1);

        r26 = null;

        $z0 = $r3 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z0 == 0 goto label1;

        r26 = (org.apache.pdfbox.cos.COSDictionary) $r3;

        goto label4;

     label1:
        $z1 = $r3 instanceof org.apache.pdfbox.cos.COSArray;

        if $z1 == 0 goto label3;

        r27 = (org.apache.pdfbox.cos.COSArray) $r3;

        $i4 = virtualinvoke r27.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i3 >= $i4 goto label2;

        $r22 = virtualinvoke r27.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i3);

        r26 = (org.apache.pdfbox.cos.COSDictionary) $r22;

     label2:
        goto label4;

     label3:
        if $r3 == null goto label4;

        $r29 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected COSArray or COSDictionary and not ");

        $r18 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r29;

     label4:
        $i7 = (int) -1;

        i5 = $i7;

        if r26 == null goto label5;

        $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREDICTOR>;

        i5 = virtualinvoke r26.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r14);

     label5:
        if i5 <= 1 goto label6;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORS>;

        $i0 = virtualinvoke r26.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r7, 1);

        $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>;

        $i1 = virtualinvoke r26.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r8, 8);

        $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLUMNS>;

        $i2 = virtualinvoke r26.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r9, 1);

        $r30 = new java.io.ByteArrayOutputStream;

        specialinvoke $r30.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke r4.<org.apache.pdfbox.filter.FlateFilter: void decompress(java.io.InputStream,java.io.OutputStream)>(r5, $r30);

        $r31 = new java.io.ByteArrayInputStream;

        $r12 = virtualinvoke $r30.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r31.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        $r13 = staticinvoke <org.apache.pdfbox.filter.Predictor: byte[] decodePredictor(int,int,int,int,java.io.InputStream)>(i5, $i0, $i1, $i2, $r31);

        virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r13);

        virtualinvoke r6.<java.io.OutputStream: void flush()>();

        virtualinvoke $r30.<java.io.ByteArrayOutputStream: void reset()>();

        virtualinvoke $r31.<java.io.ByteArrayInputStream: void reset()>();

        goto label7;

     label6:
        specialinvoke r4.<org.apache.pdfbox.filter.FlateFilter: void decompress(java.io.InputStream,java.io.OutputStream)>(r5, r6);

     label7:
        goto label9;

     label8:
        $r23 := @caughtexception;

        $r24 = <org.apache.pdfbox.filter.FlateFilter: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r24.<org.apache.commons.logging.Log: void error(java.lang.Object)>("FlateFilter: stop reading corrupt stream due to a DataFormatException");

        $r32 = new java.io.IOException;

        specialinvoke $r32.<java.io.IOException: void <init>()>();

        virtualinvoke $r32.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r23);

        throw $r32;

     label9:
        return;

        catch java.util.zip.DataFormatException from label5 to label7 with label8;
    }

    private void decompress(java.io.InputStream, java.io.OutputStream) throws java.io.IOException, java.util.zip.DataFormatException
    {
        java.io.OutputStream r2;
        byte[] r0, r4;
        java.util.zip.Inflater $r3;
        org.apache.pdfbox.filter.FlateFilter r5;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream r1;
        boolean $z0, $z1;

        r5 := @this: org.apache.pdfbox.filter.FlateFilter;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[2048];

        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        if $i0 <= 0 goto label4;

        $r3 = new java.util.zip.Inflater;

        specialinvoke $r3.<java.util.zip.Inflater: void <init>()>();

        virtualinvoke $r3.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r0, 0, $i0);

        r4 = newarray (byte)[2048];

     label1:
        $i3 = virtualinvoke $r3.<java.util.zip.Inflater: int inflate(byte[])>(r4);

        if $i3 == 0 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r4, 0, $i3);

        goto label1;

     label2:
        $z0 = virtualinvoke $r3.<java.util.zip.Inflater: boolean finished()>();

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke $r3.<java.util.zip.Inflater: boolean needsDictionary()>();

        if $z1 != 0 goto label4;

        $i1 = virtualinvoke r1.<java.io.InputStream: int available()>();

        if $i1 != 0 goto label3;

        goto label4;

     label3:
        $i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        virtualinvoke $r3.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r0, 0, $i2);

        goto label1;

     label4:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

        return;
    }

    public void encode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] r3;
        java.util.zip.DeflaterOutputStream $r6;
        org.apache.pdfbox.filter.FlateFilter r4;
        org.apache.pdfbox.cos.COSDictionary r5;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.io.InputStream r2;

        r4 := @this: org.apache.pdfbox.filter.FlateFilter;

        r2 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        r5 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i4 := @parameter3: int;

        $r6 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r6.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>(r1);

        $i0 = virtualinvoke r2.<java.io.InputStream: int available()>();

        if $i0 <= 0 goto label2;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 16348);

        r3 = newarray (byte)[$i1];

     label1:
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 16348);

        $i3 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, $i2);

        $i6 = (int) -1;

        if $i3 == $i6 goto label2;

        virtualinvoke $r6.<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>(r3, 0, $i3);

        goto label1;

     label2:
        virtualinvoke $r6.<java.util.zip.DeflaterOutputStream: void close()>();

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.pdfbox.filter.FlateFilter: int BUFFER_SIZE> = 16348;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/filter/FlateFilter;");

        <org.apache.pdfbox.filter.FlateFilter: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
