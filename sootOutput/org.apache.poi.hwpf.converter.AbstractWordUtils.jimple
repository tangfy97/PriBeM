public class org.apache.poi.hwpf.converter.AbstractWordUtils extends java.lang.Object
{
    static final java.lang.String EMPTY;
    private static final org.apache.poi.util.POILogger logger;
    public static final float TWIPS_PER_INCH;
    public static final int TWIPS_PER_PT;

    public void <init>()
    {
        org.apache.poi.hwpf.converter.AbstractWordUtils r0;

        r0 := @this: org.apache.poi.hwpf.converter.AbstractWordUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int[] buildTableCellEdgesArray(org.apache.poi.hwpf.usermodel.Table)
    {
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r7, $r8;
        java.util.TreeSet $r0;
        org.apache.poi.hwpf.usermodel.TableCell $r6;
        org.apache.poi.hwpf.usermodel.TableRow $r5;
        int[] r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        org.apache.poi.hwpf.usermodel.Table r1;
        java.lang.Integer[] $r2, r9;

        r1 := @parameter0: org.apache.poi.hwpf.usermodel.Table;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        i10 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.Table: int numRows()>();

        if i10 >= $i0 goto label4;

        $r5 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.Table: org.apache.poi.hwpf.usermodel.TableRow getRow(int)>(i10);

        i11 = 0;

     label2:
        $i5 = virtualinvoke $r5.<org.apache.poi.hwpf.usermodel.TableRow: int numCells()>();

        if i11 >= $i5 goto label3;

        $r6 = virtualinvoke $r5.<org.apache.poi.hwpf.usermodel.TableRow: org.apache.poi.hwpf.usermodel.TableCell getCell(int)>(i11);

        $i6 = virtualinvoke $r6.<org.apache.poi.hwpf.usermodel.TableCell: int getLeftEdge()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $i7 = virtualinvoke $r6.<org.apache.poi.hwpf.usermodel.TableCell: int getLeftEdge()>();

        $i8 = virtualinvoke $r6.<org.apache.poi.hwpf.usermodel.TableCell: int getWidth()>();

        $i9 = $i7 + $i8;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

        i11 = i11 + 1;

        goto label2;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        $i1 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.Integer)[$i1];

        $r3 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r9 = (java.lang.Integer[]) $r3;

        $i2 = lengthof r9;

        r10 = newarray (int)[$i2];

        i12 = 0;

     label5:
        $i3 = lengthof r9;

        if i12 >= $i3 goto label6;

        $r4 = r9[i12];

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r10[i12] = $i4;

        i12 = i12 + 1;

        goto label5;

     label6:
        return r10;
    }

    static boolean canBeMerged(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Attr r10, r19;
        short $s0, $s1;
        org.w3c.dom.Node r0, r1, $r9, $r13, $r18;
        int $i2, $i3, $i4, i5;
        org.w3c.dom.NamedNodeMap $r7, $r8;
        java.lang.String r4, $r5, $r6, $r11, $r12, $r14, $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.Element r2, r3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        r4 := @parameter2: java.lang.String;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label01;

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 == 1 goto label02;

     label01:
        return 0;

     label02:
        r2 = (org.w3c.dom.Element) r0;

        r3 = (org.w3c.dom.Element) r1;

        $r5 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean equals(java.lang.String,java.lang.String)>(r4, $r5);

        if $z0 == 0 goto label03;

        $r6 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z1 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean equals(java.lang.String,java.lang.String)>(r4, $r6);

        if $z1 != 0 goto label04;

     label03:
        return 0;

     label04:
        $r7 = interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r8 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i2 = interfaceinvoke $r7.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $i3 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i2 == $i3 goto label05;

        return 0;

     label05:
        i5 = 0;

     label06:
        $i4 = interfaceinvoke $r7.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i5 >= $i4 goto label11;

        $r9 = interfaceinvoke $r7.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i5);

        r10 = (org.w3c.dom.Attr) $r9;

        $r11 = interfaceinvoke r10.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $z2 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean isNotEmpty(java.lang.String)>($r11);

        if $z2 == 0 goto label07;

        $r16 = interfaceinvoke r10.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r17 = interfaceinvoke r10.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        $r18 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>($r16, $r17);

        r19 = (org.w3c.dom.Attr) $r18;

        goto label08;

     label07:
        $r12 = interfaceinvoke r10.<org.w3c.dom.Attr: java.lang.String getName()>();

        $r13 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>($r12);

        r19 = (org.w3c.dom.Attr) $r13;

     label08:
        if r19 == null goto label09;

        $r14 = interfaceinvoke r10.<org.w3c.dom.Attr: java.lang.String getTextContent()>();

        $r15 = interfaceinvoke r19.<org.w3c.dom.Attr: java.lang.String getTextContent()>();

        $z3 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean equals(java.lang.String,java.lang.String)>($r14, $r15);

        if $z3 != 0 goto label10;

     label09:
        return 0;

     label10:
        i5 = i5 + 1;

        goto label06;

     label11:
        return 1;
    }

    static void compactChildNodesR(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Node $r3, $r6, $r7, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        java.lang.String r4;
        boolean $z0, $z1;
        org.w3c.dom.NodeList $r1, $r2, $r8;
        org.w3c.dom.Element r0, $r5;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i6 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        $i1 = $i0 - 1;

        if i6 >= $i1 goto label5;

        $r6 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i6);

        $i4 = i6 + 1;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i4);

        $z1 = staticinvoke <org.apache.poi.hwpf.converter.WordToFoUtils: boolean canBeMerged(org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String)>($r6, $r7, r4);

        if $z1 != 0 goto label2;

        goto label4;

     label2:
        $r8 = interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i5 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        if $i5 <= 0 goto label3;

        $r10 = interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

        goto label2;

     label3:
        $r9 = interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r7);

        $i9 = (int) -1;

        i6 = i6 + $i9;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i7 = 0;

     label6:
        $i2 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        $i3 = $i2 - 1;

        if i7 >= $i3 goto label8;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i7);

        $z0 = $r3 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label7;

        $r5 = (org.w3c.dom.Element) $r3;

        staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: void compactChildNodesR(org.w3c.dom.Element,java.lang.String)>($r5, r4);

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        return;
    }

    static boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public static java.lang.String getBorderType(org.apache.poi.hwpf.usermodel.BorderCode)
    {
        int $i0;
        org.apache.poi.hwpf.usermodel.BorderCode r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: org.apache.poi.hwpf.usermodel.BorderCode;

        if r0 != null goto label01;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("borderCode is null");

        throw $r1;

     label01:
        $i0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.BorderCode: int getBorderType()>();

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label15;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label06;
            case 9: goto label07;
            case 10: goto label08;
            case 11: goto label08;
            case 12: goto label08;
            case 13: goto label08;
            case 14: goto label08;
            case 15: goto label08;
            case 16: goto label08;
            case 17: goto label08;
            case 18: goto label08;
            case 19: goto label08;
            case 20: goto label09;
            case 21: goto label10;
            case 22: goto label11;
            case 23: goto label12;
            case 24: goto label13;
            case 25: goto label14;
            default: goto label15;
        };

     label02:
        return "solid";

     label03:
        return "double";

     label04:
        return "solid";

     label05:
        return "dotted";

     label06:
        return "dashed";

     label07:
        return "dotted";

     label08:
        return "double";

     label09:
        return "solid";

     label10:
        return "double";

     label11:
        return "dashed";

     label12:
        return "dashed";

     label13:
        return "ridge";

     label14:
        return "grooved";

     label15:
        return "solid";
    }

    public static java.lang.String getBorderWidth(org.apache.poi.hwpf.usermodel.BorderCode)
    {
        org.apache.poi.hwpf.usermodel.BorderCode r0;
        int $i0, i1, $i2, i3, $i4;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.poi.hwpf.usermodel.BorderCode;

        $i0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.BorderCode: int getLineWidth()>();

        i1 = $i0 / 8;

        $i2 = i1 * 8;

        i3 = $i0 - $i2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $i4 = 125 * i3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getBulletText(org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState, org.apache.poi.hwpf.usermodel.HWPFList, char)
    {
        java.lang.Integer $r11, $r22, $r24;
        byte $b2;
        java.util.Map $r10, $r18, $r19, $r20, $r23;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r14, $r15, $r16, $r27, $r28;
        java.lang.StringBuffer $r26;
        int i1, $i4, $i5, $i6, $i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState r9;
        java.lang.String $r2, $r8, $r12, $r17, $r25;
        char c0, c3;
        char[] $r3;
        java.lang.Object $r21;
        org.apache.poi.hwpf.usermodel.HWPFList r1;

        r9 := @parameter0: org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState;

        r1 := @parameter1: org.apache.poi.hwpf.usermodel.HWPFList;

        c0 := @parameter2: char;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.HWPFList: java.lang.String getNumberText(char)>(c0);

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        i1 = lengthof $r3;

        i8 = 0;

     label01:
        if i8 >= i1 goto label08;

        c3 = $r3[i8];

        $i11 = (int) c3;

        if $i11 >= 9 goto label06;

        $i4 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.HWPFList: int getLsid()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $i12 = (int) c3;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.HWPFList: boolean isStartAtOverriden(char)>(c3);

        if $z0 != 0 goto label02;

        $r19 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState: java.util.Map access$000(org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState)>(r9);

        $z1 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z1 == 0 goto label02;

        $r20 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState: java.util.Map access$000(org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState)>(r9);

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r22 = (java.lang.Integer) $r21;

        $i7 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        i9 = $i7;

        $i13 = (int) c0;

        $i14 = (int) c3;

        if $i13 != $i14 goto label03;

        i9 = $i7 + 1;

        $r23 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState: java.util.Map access$000(org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState)>(r9);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r24);

        goto label03;

     label02:
        $i5 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.HWPFList: int getStartAt(char)>(c3);

        i9 = $i5;

        $r10 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState: java.util.Map access$000(org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState)>(r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

     label03:
        $i15 = (int) c0;

        $i16 = (int) c3;

        if $i15 != $i16 goto label05;

        $i17 = (int) c3;

        i10 = $i17 + 1;

     label04:
        if i10 >= 9 goto label05;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState: java.util.Map access$000(org.apache.poi.hwpf.converter.AbstractWordUtils$NumberingState)>(r9);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r17);

        i10 = i10 + 1;

        goto label04;

     label05:
        $i6 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.HWPFList: int getNumberFormat(char)>(c0);

        $r12 = staticinvoke <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String getNumber(int,int)>(i9, $i6);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label07;

     label06:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

     label07:
        i8 = i8 + 1;

        goto label01;

     label08:
        $b2 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.HWPFList: byte getTypeOfCharFollowingTheNumber(char)>(c0);

        $i18 = (int) $b2;

        lookupswitch($i18)
        {
            case 0: goto label09;
            case 1: goto label10;
            default: goto label11;
        };

     label09:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        goto label11;

     label10:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        goto label11;

     label11:
        $r25 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r25;
    }

    public static java.lang.String getColor(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label16;
            default: goto label17;
        };

     label01:
        return "black";

     label02:
        return "blue";

     label03:
        return "cyan";

     label04:
        return "green";

     label05:
        return "magenta";

     label06:
        return "red";

     label07:
        return "yellow";

     label08:
        return "white";

     label09:
        return "darkblue";

     label10:
        return "darkcyan";

     label11:
        return "darkgreen";

     label12:
        return "darkmagenta";

     label13:
        return "darkred";

     label14:
        return "darkyellow";

     label15:
        return "darkgray";

     label16:
        return "lightgray";

     label17:
        return "black";
    }

    public static java.lang.String getOpacity(int)
    {
        long $l1, $l2, $l3;
        int i0, i4;
        float $f0, $f1;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $l2 = $l1 & 4278190080L;

        $l3 = $l2 >>> 24;

        i4 = (int) $l3;

        if i4 == 0 goto label1;

        if i4 != 255 goto label2;

     label1:
        return ".0";

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $f0 = (float) i4;

        $f1 = $f0 / 255.0F;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getColor24(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11, $i13;
        java.lang.String $r1, $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        i0 := @parameter0: int;

        $i11 = (int) -1;

        if i0 != $i11 goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This colorref is empty");

        throw $r4;

     label01:
        i1 = i0 & 16777215;

        $i2 = i1 & 255;

        $i4 = $i2 << 16;

        $i13 = (int) 65280;

        $i3 = i1 & $i13;

        $i7 = $i4 | $i3;

        $i5 = i1 & 16711680;

        $i6 = $i5 >> 16;

        i8 = $i7 | $i6;

        lookupswitch(i8)
        {
            case 0: goto label05;
            case 128: goto label15;
            case 255: goto label14;
            case 32768: goto label11;
            case 32896: goto label13;
            case 65280: goto label10;
            case 65535: goto label12;
            case 8388608: goto label07;
            case 8388736: goto label17;
            case 8421376: goto label09;
            case 8421504: goto label04;
            case 12632256: goto label03;
            case 16711680: goto label06;
            case 16711935: goto label16;
            case 16776960: goto label08;
            case 16777215: goto label02;
            default: goto label18;
        };

     label02:
        return "white";

     label03:
        return "silver";

     label04:
        return "gray";

     label05:
        return "black";

     label06:
        return "red";

     label07:
        return "maroon";

     label08:
        return "yellow";

     label09:
        return "olive";

     label10:
        return "lime";

     label11:
        return "green";

     label12:
        return "aqua";

     label13:
        return "teal";

     label14:
        return "blue";

     label15:
        return "navy";

     label16:
        return "fuchsia";

     label17:
        return "purple";

     label18:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("#");

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i8);

        i9 = virtualinvoke $r1.<java.lang.String: int length()>();

     label19:
        if i9 >= 6 goto label20;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i9 = i9 + 1;

        goto label19;

     label20:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getJustification(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            default: goto label10;
        };

     label01:
        return "start";

     label02:
        return "center";

     label03:
        return "end";

     label04:
        return "justify";

     label05:
        return "center";

     label06:
        return "left";

     label07:
        return "start";

     label08:
        return "end";

     label09:
        return "justify";

     label10:
        return "";
    }

    public static java.lang.String getLanguage(int)
    {
        int i0;
        org.apache.poi.util.POILogger $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1024: goto label1;
            case 1033: goto label2;
            case 1049: goto label3;
            case 2057: goto label4;
            default: goto label5;
        };

     label1:
        return "";

     label2:
        return "en-us";

     label3:
        return "ru-ru";

     label4:
        return "en-uk";

     label5:
        $r0 = <org.apache.poi.hwpf.converter.AbstractWordUtils: org.apache.poi.util.POILogger logger>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r0.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object)>(5, "Uknown or unmapped language code: ", $r1);

        return "";
    }

    public static java.lang.String getListItemNumberLabel(int, int)
    {
        org.apache.poi.util.POILogger $r2;
        int i0, i1;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r0, $r5;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 == 0 goto label1;

        $r2 = <org.apache.poi.hwpf.converter.AbstractWordUtils: org.apache.poi.util.POILogger logger>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NYI: toListItemNumberLabel(): ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(3, $r5);

     label1:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        return $r0;
    }

    static boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean isNotEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.apache.poi.hwpf.HWPFDocumentCore loadDoc(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode r1;
        org.apache.poi.hwpf.OldWordFileFormatException $r2;
        org.apache.poi.hwpf.HWPFDocument $r0;
        org.apache.poi.hwpf.HWPFOldDocument $r3;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

     label1:
        $r0 = new org.apache.poi.hwpf.HWPFDocument;

        specialinvoke $r0.<org.apache.poi.hwpf.HWPFDocument: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode)>(r1);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.poi.hwpf.HWPFOldDocument;

        specialinvoke $r3.<org.apache.poi.hwpf.HWPFOldDocument: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode)>(r1);

        return $r3;

        catch org.apache.poi.hwpf.OldWordFileFormatException from label1 to label2 with label3;
    }

    public static org.apache.poi.hwpf.HWPFDocumentCore loadDoc(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.apache.poi.hwpf.HWPFDocumentCore $r2;
        java.io.FileInputStream $r0;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label1:
        $r2 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: org.apache.poi.hwpf.HWPFDocumentCore loadDoc(java.io.InputStream)>($r0);

     label2:
        staticinvoke <org.apache.poi.util.IOUtils: void closeQuietly(java.io.Closeable)>($r0);

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.apache.poi.util.IOUtils: void closeQuietly(java.io.Closeable)>($r0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static org.apache.poi.hwpf.HWPFDocumentCore loadDoc(java.io.InputStream) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.POIFSFileSystem $r1;
        org.apache.poi.hwpf.HWPFDocumentCore $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.poi.hwpf.HWPFDocumentCore: org.apache.poi.poifs.filesystem.POIFSFileSystem verifyAndBuildPOIFS(java.io.InputStream)>(r0);

        $r2 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: org.apache.poi.hwpf.HWPFDocumentCore loadDoc(org.apache.poi.poifs.filesystem.POIFSFileSystem)>($r1);

        return $r2;
    }

    public static org.apache.poi.hwpf.HWPFDocumentCore loadDoc(org.apache.poi.poifs.filesystem.POIFSFileSystem) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.poifs.filesystem.POIFSFileSystem r0;
        org.apache.poi.hwpf.HWPFDocumentCore $r2;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.POIFSFileSystem;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.POIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r2 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: org.apache.poi.hwpf.HWPFDocumentCore loadDoc(org.apache.poi.poifs.filesystem.DirectoryNode)>($r1);

        return $r2;
    }

    static java.lang.String substringBeforeLast(java.lang.String, java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.poi.hwpf.converter.AbstractWordUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label3;

        return r0;

     label3:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        <org.apache.poi.hwpf.converter.AbstractWordUtils: int TWIPS_PER_PT> = 20;

        <org.apache.poi.hwpf.converter.AbstractWordUtils: float TWIPS_PER_INCH> = 1440.0F;

        <org.apache.poi.hwpf.converter.AbstractWordUtils: java.lang.String EMPTY> = "";

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hwpf/converter/AbstractWordUtils;");

        <org.apache.poi.hwpf.converter.AbstractWordUtils: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
