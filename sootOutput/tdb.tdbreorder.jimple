public class tdb.tdbreorder extends java.lang.Object
{

    public void <init>()
    {
        tdb.tdbreorder r0;

        r0 := @this: tdb.tdbreorder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r10;
        java.lang.String[] r0;
        int $i0, $i1;
        java.lang.String $r6, $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0, $z1;
        java.io.PrintStream $r2, $r5, $r8, $r12, $r13, $r14, $r15;
        com.hp.hpl.jena.sparql.core.BasicPattern r9, $r11;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r3;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 2 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Usage: PATTERN STATS");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label1:
        staticinvoke <org.apache.jena.atlas.logging.Log: void enable(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/engine/optimizer/StatsMatcher;");

        staticinvoke <org.apache.jena.atlas.logging.Log: void enable(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/engine/optimizer/reorder/ReorderTransformationBase;");

        $i1 = lengthof r0;

        if $i1 == 2 goto label2;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Usage: op stats");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label2:
        $r6 = r0[0];

        $r7 = r0[1];

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.algebra.Op readOp(java.lang.String)>($r6);

        $z0 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        if $z0 == 0 goto label3;

        $r4 = (com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern) $r1;

        r9 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        goto label5;

     label3:
        $z1 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        if $z1 == 0 goto label4;

        $r3 = (com.hp.hpl.jena.sparql.algebra.op.OpBGP) $r1;

        r9 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        goto label5;

     label4:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Not a quad or triple pattern");

        staticinvoke <java.lang.System: void exit(int)>(2);

        r9 = null;

     label5:
        $r10 = staticinvoke <tdb.tdbreorder: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation chooseReorder(java.lang.String)>($r7);

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)>(r9);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println()>();

        staticinvoke <tdb.tdbreorder: void print(com.hp.hpl.jena.sparql.core.BasicPattern)>(r9);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println()>();

        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>(" ======== >>>>>>>>");

        staticinvoke <tdb.tdbreorder: void print(com.hp.hpl.jena.sparql.core.BasicPattern)>($r11);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println()>();

        return;
    }

    private static void print(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern r4;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.graph.Triple r7;
        java.lang.Object $r6;
        com.hp.hpl.jena.shared.PrefixMapping $r2;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r1;
        boolean $z0, z1;

        r4 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r0 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        $r1 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r1.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        $r2 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapWrite>;

        interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r2);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        z1 = 1;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        if z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("\n");

        goto label3;

     label2:
        z1 = 0;

     label3:
        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("(");

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterNode: void outputPlain(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r7, $r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(")");

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    private static com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation chooseReorder(java.lang.String)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r6, $r7, $r8;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("fixed.opt");

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderLib: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation fixed()>();

        return $r8;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("none.opt");

        if $z1 == 0 goto label2;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderLib: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation identity()>();

        return $r7;

     label2:
        $z2 = staticinvoke <org.apache.jena.atlas.lib.FileOps: boolean exists(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderLib: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation weighted(java.lang.String)>(r0);

        return $r6;

     label3:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such file: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }
}
