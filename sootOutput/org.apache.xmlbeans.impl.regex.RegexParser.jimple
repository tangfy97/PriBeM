class org.apache.xmlbeans.impl.regex.RegexParser extends java.lang.Object
{
    static final int T_CHAR;
    static final int T_EOF;
    static final int T_OR;
    static final int T_STAR;
    static final int T_PLUS;
    static final int T_QUESTION;
    static final int T_LPAREN;
    static final int T_RPAREN;
    static final int T_DOT;
    static final int T_LBRACKET;
    static final int T_BACKSOLIDUS;
    static final int T_CARET;
    static final int T_DOLLAR;
    static final int T_LPAREN2;
    static final int T_LOOKAHEAD;
    static final int T_NEGATIVELOOKAHEAD;
    static final int T_LOOKBEHIND;
    static final int T_NEGATIVELOOKBEHIND;
    static final int T_INDEPENDENT;
    static final int T_SET_OPERATIONS;
    static final int T_POSIX_CHARCLASS_START;
    static final int T_COMMENT;
    static final int T_MODIFIERS;
    static final int T_CONDITION;
    static final int T_XMLSCHEMA_CC_SUBTRACTION;
    int offset;
    java.lang.String regex;
    int regexlen;
    int options;
    java.util.ResourceBundle resources;
    int chardata;
    int nexttoken;
    protected static final int S_NORMAL;
    protected static final int S_INBRACKETS;
    protected static final int S_INXBRACKETS;
    int context;
    int parennumber;
    boolean hasBackReferences;
    java.util.Vector references;

    public void <init>()
    {
        java.util.Locale $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int context> = 0;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int parennumber> = 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references> = null;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void setLocale(java.util.Locale)>($r1);

        return;
    }

    public void <init>(java.util.Locale)
    {
        java.util.Locale r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int context> = 0;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int parennumber> = 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references> = null;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public void setLocale(java.util.Locale)
    {
        java.util.MissingResourceException $r3;
        java.lang.RuntimeException $r4;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        java.util.ResourceBundle $r2;
        java.util.Locale r1;
        java.lang.StringBuffer $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r1 := @parameter0: java.util.Locale;

     label1:
        $r2 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("org.apache.xmlbeans.impl.regex.message", r1);

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.ResourceBundle resources> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Installation Problem???  Couldn\'t load messages: ");

        $r7 = virtualinvoke $r3.<java.util.MissingResourceException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        return;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    final org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String, int)
    {
        org.apache.xmlbeans.impl.regex.ParseException $r0;
        java.util.ResourceBundle $r3;
        int i0;
        java.lang.String r2, $r4;
        org.apache.xmlbeans.impl.regex.RegexParser r1;

        r1 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new org.apache.xmlbeans.impl.regex.ParseException;

        $r3 = r1.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.ResourceBundle resources>;

        $r4 = virtualinvoke $r3.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r2);

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.ParseException: void <init>(java.lang.String,int)>($r4, i0);

        return $r0;
    }

    private final boolean isSet(int)
    {
        int i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int options>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    synchronized org.apache.xmlbeans.impl.regex.Token parse(java.lang.String, int) throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition r9;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        java.util.Vector $r4, $r5, $r6, $r7;
        org.apache.xmlbeans.impl.regex.Token $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String r1, $r2, $r12, $r13;
        boolean $z0;
        org.apache.xmlbeans.impl.regex.ParseException $r10, $r11;
        java.lang.Object $r8;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int options> = i0;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = 0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void setContext(int)>(0);

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int parennumber> = 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean hasBackReferences> = 0;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex> = r1;

        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(16);

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: java.lang.String stripExtendedComment(java.lang.String)>($r12);

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex> = $r13;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen> = $i1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i3 == $i2 goto label2;

        $i8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.parse.1", $i8);

        throw $r11;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        if $r4 == null goto label6;

        i9 = 0;

     label3:
        $r5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        $i4 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i9 >= $i4 goto label5;

        $r7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        r9 = (org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition) $r8;

        $i6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int parennumber>;

        $i5 = r9.<org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition: int refNumber>;

        if $i6 > $i5 goto label4;

        $i7 = r9.<org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition: int position>;

        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.parse.2", $i7);

        throw $r10;

     label4:
        i9 = i9 + 1;

        goto label3;

     label5:
        $r6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        virtualinvoke $r6.<java.util.Vector: void removeAllElements()>();

     label6:
        return $r3;
    }

    protected final void setContext(int)
    {
        int i0;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        i0 := @parameter0: int;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int context> = i0;

        return;
    }

    final int read()
    {
        int $i0;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int nexttoken>;

        return $i0;
    }

    final void next()
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        byte b69, b70;
        java.lang.String $r1, $r2, $r4, $r5, $r6, $r10, $r13, $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.regex.ParseException $r3, $r7, $r8, $r9, $r11, $r12, $r14;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i54, $i55, $i56, $i57, $i58, $i59, $i61, $i62, $i63, $i64, $i65, $i67, $i68, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98;
        char $c4, $c10, $c16, $c22, $c27, $c38, $c47, $c53, $c60, $c66, c71;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i1 < $i0 goto label01;

        $i75 = (int) -1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata> = $i75;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int nexttoken> = 1;

        return;

     label01:
        $r1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i3 = $i2 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i3;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i76 = (int) $c4;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata> = $i76;

        $i5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int context>;

        if $i5 != 1 goto label10;

        $i77 = (int) $c4;

        lookupswitch($i77)
        {
            case 45: goto label04;
            case 91: goto label06;
            case 92: goto label02;
            default: goto label07;
        };

     label02:
        b69 = 10;

        $i44 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i43 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i44 < $i43 goto label03;

        $i48 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i49 = $i48 - 1;

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.1", $i49);

        throw $r14;

     label03:
        $r13 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i45 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i46 = $i45 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i46;

        $c47 = virtualinvoke $r13.<java.lang.String: char charAt(int)>($i45);

        $i78 = (int) $c47;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata> = $i78;

        goto label09;

     label04:
        $z2 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(512);

        if $z2 == 0 goto label05;

        $i64 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i63 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i64 >= $i63 goto label05;

        $r17 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i65 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c66 = virtualinvoke $r17.<java.lang.String: char charAt(int)>($i65);

        $i79 = (int) $c66;

        if $i79 != 91 goto label05;

        $i67 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i68 = $i67 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i68;

        b69 = 24;

        goto label09;

     label05:
        b69 = 0;

        goto label09;

     label06:
        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(512);

        if $z0 != 0 goto label07;

        $i58 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i57 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i58 >= $i57 goto label07;

        $r16 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i59 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c60 = virtualinvoke $r16.<java.lang.String: char charAt(int)>($i59);

        $i80 = (int) $c60;

        if $i80 != 58 goto label07;

        $i61 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i62 = $i61 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i62;

        b69 = 20;

        goto label09;

     label07:
        $i81 = (int) $c4;

        $z3 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: boolean isHighSurrogate(int)>($i81);

        if $z3 == 0 goto label08;

        $i51 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i50 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i51 >= $i50 goto label08;

        $r15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i52 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c53 = virtualinvoke $r15.<java.lang.String: char charAt(int)>($i52);

        $i82 = (int) $c53;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: boolean isLowSurrogate(int)>($i82);

        if $z1 == 0 goto label08;

        $i83 = (int) $c4;

        $i84 = (int) $c53;

        $i54 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: int composeFromSurrogates(int,int)>($i83, $i84);

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata> = $i54;

        $i55 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i56 = $i55 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i56;

     label08:
        b69 = 0;

     label09:
        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int nexttoken> = b69;

        return;

     label10:
        $i85 = (int) $c4;

        lookupswitch($i85)
        {
            case 36: goto label19;
            case 40: goto label20;
            case 41: goto label15;
            case 42: goto label12;
            case 43: goto label13;
            case 46: goto label16;
            case 63: goto label14;
            case 91: goto label17;
            case 92: goto label41;
            case 94: goto label18;
            case 124: goto label11;
            default: goto label43;
        };

     label11:
        b70 = 2;

        goto label44;

     label12:
        b70 = 3;

        goto label44;

     label13:
        b70 = 4;

        goto label44;

     label14:
        b70 = 5;

        goto label44;

     label15:
        b70 = 7;

        goto label44;

     label16:
        b70 = 8;

        goto label44;

     label17:
        b70 = 9;

        goto label44;

     label18:
        b70 = 11;

        goto label44;

     label19:
        b70 = 12;

        goto label44;

     label20:
        b70 = 6;

        $i14 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i13 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i14 < $i13 goto label21;

        goto label44;

     label21:
        $r4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c16 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i15);

        $i86 = (int) $c16;

        if $i86 == 63 goto label22;

        goto label44;

     label22:
        $i17 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i18 = $i17 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i18;

        $i19 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i18 < $i19 goto label23;

        $i41 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i42 = $i41 - 1;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.2", $i42);

        throw $r12;

     label23:
        $r5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i20 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i21 = $i20 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i21;

        $c22 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i20);

        c71 = $c22;

        $i87 = (int) $c22;

        lookupswitch($i87)
        {
            case 33: goto label26;
            case 35: goto label33;
            case 58: goto label24;
            case 60: goto label29;
            case 61: goto label25;
            case 62: goto label28;
            case 91: goto label27;
            default: goto label36;
        };

     label24:
        b70 = 13;

        goto label44;

     label25:
        b70 = 14;

        goto label44;

     label26:
        b70 = 15;

        goto label44;

     label27:
        b70 = 19;

        goto label44;

     label28:
        b70 = 18;

        goto label44;

     label29:
        $i24 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i23 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i24 < $i23 goto label30;

        $i30 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i31 = $i30 - 3;

        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.2", $i31);

        throw $r8;

     label30:
        $r6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i25 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i26 = $i25 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i26;

        $c27 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i25);

        $i88 = (int) $c27;

        if $i88 != 61 goto label31;

        b70 = 16;

        goto label44;

     label31:
        $i89 = (int) $c27;

        if $i89 != 33 goto label32;

        b70 = 17;

        goto label44;

     label32:
        $i28 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i29 = $i28 - 3;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.3", $i29);

        throw $r7;

     label33:
        $i33 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i32 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i33 >= $i32 goto label34;

        $r10 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i36 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i37 = $i36 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i37;

        $c38 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i36);

        c71 = $c38;

        $i90 = (int) $c38;

        if $i90 != 41 goto label33;

        goto label34;

     label34:
        $i91 = (int) c71;

        if $i91 == 41 goto label35;

        $i34 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i35 = $i34 - 1;

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.4", $i35);

        throw $r9;

     label35:
        b70 = 21;

        goto label44;

     label36:
        $i92 = (int) $c22;

        if $i92 == 45 goto label38;

        $i93 = (int) $c22;

        if 97 > $i93 goto label37;

        $i94 = (int) $c22;

        if $i94 <= 122 goto label38;

     label37:
        $i95 = (int) $c22;

        if 65 > $i95 goto label39;

        $i96 = (int) $c22;

        if $i96 > 90 goto label39;

     label38:
        $i72 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i73 = $i72 - 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i73;

        b70 = 22;

        goto label44;

     label39:
        $i97 = (int) $c22;

        if $i97 != 40 goto label40;

        b70 = 23;

        goto label44;

     label40:
        $i39 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i40 = $i39 - 2;

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.2", $i40);

        throw $r11;

     label41:
        b70 = 10;

        $i7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i7 < $i6 goto label42;

        $i11 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i12 = $i11 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.1", $i12);

        throw $r3;

     label42:
        $r2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i9 = $i8 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i9;

        $c10 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i8);

        $i98 = (int) $c10;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata> = $i98;

        goto label44;

     label43:
        b70 = 0;

     label44:
        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int nexttoken> = b70;

        return;
    }

    org.apache.xmlbeans.impl.regex.Token parseRegex() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1, r3;
        int $i0;
        org.apache.xmlbeans.impl.regex.Token$UnionToken $r2, r4;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseTerm()>();

        r4 = null;

     label1:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 != 2 goto label3;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        if r4 != null goto label2;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$UnionToken createUnion()>();

        r4 = $r2;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>(r3);

        r3 = $r2;

     label2:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseTerm()>();

        virtualinvoke r3.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r1);

        goto label1;

     label3:
        return r3;
    }

    org.apache.xmlbeans.impl.regex.Token parseTerm() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.Token $r1, $r3, r4;
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.Token$UnionToken $r2, r5;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 2 goto label1;

        if $i0 == 7 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token createEmpty()>();

        return $r3;

     label2:
        r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseFactor()>();

        r5 = null;

     label3:
        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i1 == 2 goto label5;

        if $i1 == 7 goto label5;

        if $i1 == 1 goto label5;

        if r5 != null goto label4;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$UnionToken createConcat()>();

        r5 = $r2;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>(r4);

        r4 = $r2;

     label4:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseFactor()>();

        virtualinvoke r5.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r1);

        goto label3;

     label5:
        return r4;
    }

    org.apache.xmlbeans.impl.regex.Token processCaret() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_linebeginning>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processDollar() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_lineend>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processLookahead() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createLook(int,org.apache.xmlbeans.impl.regex.Token)>(20, $r1);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processNegativelookahead() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createLook(int,org.apache.xmlbeans.impl.regex.Token)>(21, $r1);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processLookbehind() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createLook(int,org.apache.xmlbeans.impl.regex.Token)>(22, $r1);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processNegativelookbehind() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createLook(int,org.apache.xmlbeans.impl.regex.Token)>(23, $r1);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_A() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_stringbeginning>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_Z() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_stringend2>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_z() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_stringend>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_b() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordedge>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_B() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_wordedge>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_lt() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordbeginning>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_gt() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordend>;

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processStar(org.apache.xmlbeans.impl.regex.Token) throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0;
        org.apache.xmlbeans.impl.regex.Token$ClosureToken $r2, $r3;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 != 5 goto label1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createNGClosure(org.apache.xmlbeans.impl.regex.Token)>(r1);

        return $r3;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createClosure(org.apache.xmlbeans.impl.regex.Token)>(r1);

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processPlus(org.apache.xmlbeans.impl.regex.Token) throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token$ConcatToken $r3, $r5;
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0;
        org.apache.xmlbeans.impl.regex.Token$ClosureToken $r2, $r4;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 != 5 goto label1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createNGClosure(org.apache.xmlbeans.impl.regex.Token)>(r1);

        $r5 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ConcatToken createConcat(org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>(r1, $r4);

        return $r5;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createClosure(org.apache.xmlbeans.impl.regex.Token)>(r1);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ConcatToken createConcat(org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>(r1, $r2);

        return $r3;
    }

    org.apache.xmlbeans.impl.regex.Token processQuestion(org.apache.xmlbeans.impl.regex.Token) throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token r2, $r3, $r4;
        org.apache.xmlbeans.impl.regex.Token$UnionToken $r1;
        int $i0;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r2 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$UnionToken createUnion()>();

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 != 5 goto label1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token createEmpty()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r4);

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>(r2);

        goto label2;

     label1:
        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>(r2);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token createEmpty()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r3);

     label2:
        return $r1;
    }

    boolean checkQuestion(int)
    {
        int i0, $i1, $i3;
        char $c2;
        java.lang.String $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if i0 >= $i1 goto label1;

        $r1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $i3 = (int) $c2;

        if $i3 != 63 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    org.apache.xmlbeans.impl.regex.Token processParen() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int parennumber>;

        $i1 = $i0 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int parennumber> = $i1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createParen(org.apache.xmlbeans.impl.regex.Token,int)>($r1, $i0);

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i2 == 7 goto label1;

        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i4 = $i3 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i4);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processParen2() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createParen(org.apache.xmlbeans.impl.regex.Token,int)>($r1, 0);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processCondition() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token$ConditionToken $r3;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        java.util.Vector $r8, $r10, $r19;
        org.apache.xmlbeans.impl.regex.ParseException $r4, $r5, $r6, $r7, $r12, $r14;
        org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition $r20;
        org.apache.xmlbeans.impl.regex.Token $r2, r15, $r16, r17, r18;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34;
        java.lang.String $r1, $r11;
        char $c4, $c21;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i2 < $i1 goto label01;

        $i25 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.4", $i25);

        throw $r14;

     label01:
        $i29 = (int) -1;

        i26 = $i29;

        r15 = null;

        $r1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        $i30 = (int) $c4;

        if 49 > $i30 goto label04;

        $i31 = (int) $c4;

        if $i31 > 57 goto label04;

        $i32 = (int) $c4;

        i26 = $i32 - 48;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean hasBackReferences> = 1;

        $r8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        if $r8 != null goto label02;

        $r19 = new java.util.Vector;

        specialinvoke $r19.<java.util.Vector: void <init>()>();

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references> = $r19;

     label02:
        $r10 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        $r20 = new org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition;

        $i17 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        specialinvoke $r20.<org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition: void <init>(int,int)>(i26, $i17);

        virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>($r20);

        $i18 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i19 = $i18 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i19;

        $r11 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i20 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c21 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i20);

        $i33 = (int) $c21;

        if $i33 == 41 goto label03;

        $i24 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i24);

        throw $r12;

     label03:
        $i22 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i23 = $i22 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i23;

        goto label09;

     label04:
        $i34 = (int) $c4;

        if $i34 != 63 goto label05;

        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i16 = $i15 - 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i16;

     label05:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseFactor()>();

        r15 = $r2;

        $i5 = $r2.<org.apache.xmlbeans.impl.regex.Token: int type>;

        lookupswitch($i5)
        {
            case 8: goto label07;
            case 20: goto label06;
            case 21: goto label06;
            case 22: goto label06;
            case 23: goto label06;
            default: goto label08;
        };

     label06:
        goto label09;

     label07:
        $i11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i11 == 7 goto label09;

        $i12 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i13 = $i12 - 1;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i13);

        throw $r6;

     label08:
        $i14 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.5", $i14);

        throw $r7;

     label09:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        r17 = $r16;

        r18 = null;

        $i27 = $r16.<org.apache.xmlbeans.impl.regex.Token: int type>;

        if $i27 != 2 goto label11;

        $i9 = virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if $i9 == 2 goto label10;

        $i10 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.6", $i10);

        throw $r5;

     label10:
        r18 = virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(1);

        r17 = virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

     label11:
        $i6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i6 == 7 goto label12;

        $i7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i8 = $i7 - 1;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i8);

        throw $r4;

     label12:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ConditionToken createCondition(int,org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>(i26, r15, r17, r18);

        return $r3;
    }

    org.apache.xmlbeans.impl.regex.Token processModifiers() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.ParseException $r1, $r4, $r5, $r7;
        org.apache.xmlbeans.impl.regex.Token $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, i32, i33, i34, $i35, $i36;
        java.lang.String $r6, $r8;
        char $c21, $c28;
        org.apache.xmlbeans.impl.regex.Token$ModifierToken r9;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        i32 = 0;

        i33 = 0;

        i34 = -1;

     label01:
        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i1 >= $i0 goto label03;

        $r8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i27 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c28 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i27);

        i34 = $c28;

        $i35 = (int) $c28;

        $i29 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: int getOptionValue(int)>($i35);

        if $i29 != 0 goto label02;

        goto label03;

     label02:
        i32 = i32 | $i29;

        $i30 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i31 = $i30 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i31;

        goto label01;

     label03:
        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i3 < $i2 goto label04;

        $i25 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i26 = $i25 - 1;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.2", $i26);

        throw $r7;

     label04:
        if i34 != 45 goto label08;

        $i12 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i13 = $i12 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i13;

     label05:
        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i14 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i15 >= $i14 goto label07;

        $r6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i20 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c21 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i20);

        i34 = $c21;

        $i36 = (int) $c21;

        $i22 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: int getOptionValue(int)>($i36);

        if $i22 != 0 goto label06;

        goto label07;

     label06:
        i33 = i33 | $i22;

        $i23 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i24 = $i23 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i24;

        goto label05;

     label07:
        $i17 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i16 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i17 < $i16 goto label08;

        $i18 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i19 = $i18 - 1;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.2", $i19);

        throw $r5;

     label08:
        if i34 != 58 goto label10;

        $i7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i8 = $i7 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i8;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        r9 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ModifierToken createModifierGroup(org.apache.xmlbeans.impl.regex.Token,int,int)>($r3, i32, i33);

        $i9 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i9 == 7 goto label09;

        $i10 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i11 = $i10 - 1;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i11);

        throw $r4;

     label09:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        goto label12;

     label10:
        if i34 != 41 goto label11;

        $i5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i6 = $i5 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i6;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        r9 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ModifierToken createModifierGroup(org.apache.xmlbeans.impl.regex.Token,int,int)>($r2, i32, i33);

        goto label12;

     label11:
        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.3", $i4);

        throw $r1;

     label12:
        return r9;
    }

    org.apache.xmlbeans.impl.regex.Token processIndependent() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.ParseException $r3;
        org.apache.xmlbeans.impl.regex.Token $r1;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r2;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createLook(int,org.apache.xmlbeans.impl.regex.Token)>(24, $r1);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r2;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_c() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        char $c6, $c7;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.ParseException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10;
        org.apache.xmlbeans.impl.regex.Token$CharToken $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i5 = $i4 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i5;

        $c6 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i4);

        $c7 = $c6 & 65504;

        $i9 = (int) $c7;

        if $i9 == 64 goto label2;

     label1:
        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i3 = $i2 - 1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.1", $i3);

        throw $r1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i10 = (int) $c6;

        $i8 = $i10 - 64;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createChar(int)>($i8);

        return $r3;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_C() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        int $i0;
        org.apache.xmlbeans.impl.regex.ParseException $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_i() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token$CharToken $r0;
        org.apache.xmlbeans.impl.regex.RegexParser r1;

        r1 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createChar(int)>(105);

        virtualinvoke r1.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r0;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_I() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        int $i0;
        org.apache.xmlbeans.impl.regex.ParseException $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_g() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getGraphemePattern()>();

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBacksolidus_X() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token $r1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getCombiningCharacterSequence()>();

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token processBackreference() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.Token$StringToken $r1;
        org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition $r3;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        java.util.Vector $r2, $r4, $r5;
        int $i0, i1, $i2, $i3;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        i1 = $i0 - 48;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$StringToken createBackReference(int)>(i1);

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean hasBackReferences> = 1;

        $r2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        if $r2 != null goto label1;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references> = $r5;

     label1:
        $r4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.util.Vector references>;

        $r3 = new org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition;

        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i3 = $i2 - 2;

        specialinvoke $r3.<org.apache.xmlbeans.impl.regex.RegexParser$ReferencePosition: void <init>(int,int)>(i1, $i3);

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token parseFactor() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.Token $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, r29;
        java.lang.String $r19, $r22, $r24, $r27;
        boolean $z0;
        org.apache.xmlbeans.impl.regex.ParseException $r20, $r21, $r23, $r25, $r26, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, i27, i28, i30, i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i47;
        char $c6, $c13, $c17, $c23, c29;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        tableswitch($i0)
        {
            case 10: goto label08;
            case 11: goto label01;
            case 12: goto label02;
            case 13: goto label16;
            case 14: goto label03;
            case 15: goto label04;
            case 16: goto label05;
            case 17: goto label06;
            case 18: goto label16;
            case 19: goto label16;
            case 20: goto label16;
            case 21: goto label07;
            default: goto label16;
        };

     label01:
        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processCaret()>();

        return $r7;

     label02:
        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processDollar()>();

        return $r6;

     label03:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processLookahead()>();

        return $r5;

     label04:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processNegativelookahead()>();

        return $r4;

     label05:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processLookbehind()>();

        return $r3;

     label06:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processNegativelookbehind()>();

        return $r2;

     label07:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token createEmpty()>();

        return $r1;

     label08:
        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        lookupswitch($i1)
        {
            case 60: goto label14;
            case 62: goto label15;
            case 65: goto label09;
            case 66: goto label13;
            case 90: goto label10;
            case 98: goto label12;
            case 122: goto label11;
            default: goto label16;
        };

     label09:
        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_A()>();

        return $r12;

     label10:
        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_Z()>();

        return $r10;

     label11:
        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_z()>();

        return $r8;

     label12:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_b()>();

        return $r9;

     label13:
        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_B()>();

        return $r11;

     label14:
        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_lt()>();

        return $r14;

     label15:
        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_gt()>();

        return $r13;

     label16:
        $r15 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token parseAtom()>();

        r29 = $r15;

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        tableswitch($i2)
        {
            case 0: goto label20;
            case 1: goto label32;
            case 2: goto label32;
            case 3: goto label17;
            case 4: goto label18;
            case 5: goto label19;
            default: goto label32;
        };

     label17:
        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processStar(org.apache.xmlbeans.impl.regex.Token)>($r15);

        return $r18;

     label18:
        $r17 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processPlus(org.apache.xmlbeans.impl.regex.Token)>($r15);

        return $r17;

     label19:
        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processQuestion(org.apache.xmlbeans.impl.regex.Token)>($r15);

        return $r16;

     label20:
        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i3 != 123 goto label32;

        $i5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i5 >= $i4 goto label32;

        i27 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r19 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        i28 = i27 + 1;

        $c6 = virtualinvoke $r19.<java.lang.String: char charAt(int)>(i27);

        c29 = $c6;

        $i32 = (int) $c6;

        if $i32 < 48 goto label22;

        $i33 = (int) $c6;

        if $i33 > 57 goto label22;

        $i34 = (int) $c6;

        i30 = $i34 - 48;

     label21:
        $i8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if i28 >= $i8 goto label23;

        $r27 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i22 = i28;

        i28 = i28 + 1;

        $c23 = virtualinvoke $r27.<java.lang.String: char charAt(int)>($i22);

        c29 = $c23;

        $i35 = (int) $c23;

        if $i35 < 48 goto label23;

        $i36 = (int) $c23;

        if $i36 > 57 goto label23;

        $i24 = i30 * 10;

        $i37 = (int) $c23;

        $i25 = $i24 + $i37;

        i30 = $i25 - 48;

        if i30 >= 0 goto label21;

        $i26 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r28 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.quantifier.5", $i26);

        throw $r28;

     label22:
        $i7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.quantifier.1", $i7);

        throw $r20;

     label23:
        i31 = i30;

        $i38 = (int) c29;

        if $i38 != 44 goto label28;

        $i11 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if i28 < $i11 goto label24;

        $i21 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r26 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.quantifier.3", $i21);

        throw $r26;

     label24:
        $r22 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i12 = i28;

        i28 = i28 + 1;

        $c13 = virtualinvoke $r22.<java.lang.String: char charAt(int)>($i12);

        c29 = $c13;

        $i39 = (int) $c13;

        if $i39 < 48 goto label27;

        $i40 = (int) $c13;

        if $i40 > 57 goto label27;

        $i41 = (int) $c13;

        i31 = $i41 - 48;

     label25:
        $i14 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if i28 >= $i14 goto label26;

        $r24 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i16 = i28;

        i28 = i28 + 1;

        $c17 = virtualinvoke $r24.<java.lang.String: char charAt(int)>($i16);

        c29 = $c17;

        $i42 = (int) $c17;

        if $i42 < 48 goto label26;

        $i43 = (int) $c17;

        if $i43 > 57 goto label26;

        $i18 = i31 * 10;

        $i44 = (int) $c17;

        $i19 = $i18 + $i44;

        i31 = $i19 - 48;

        if i31 >= 0 goto label25;

        $i20 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r25 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.quantifier.5", $i20);

        throw $r25;

     label26:
        if i30 <= i31 goto label28;

        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r23 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.quantifier.4", $i15);

        throw $r23;

     label27:
        $i46 = (int) -1;

        i31 = $i46;

     label28:
        $i47 = (int) c29;

        if $i47 == 125 goto label29;

        $i10 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r21 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.quantifier.2", $i10);

        throw $r21;

     label29:
        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean checkQuestion(int)>(i28);

        if $z0 == 0 goto label30;

        r29 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createNGClosure(org.apache.xmlbeans.impl.regex.Token)>($r15);

        $i9 = i28 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i9;

        goto label31;

     label30:
        r29 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createClosure(org.apache.xmlbeans.impl.regex.Token)>($r15);

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = i28;

     label31:
        virtualinvoke r29.<org.apache.xmlbeans.impl.regex.Token: void setMin(int)>(i30);

        virtualinvoke r29.<org.apache.xmlbeans.impl.regex.Token: void setMax(int)>(i31);

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

     label32:
        return r29;
    }

    org.apache.xmlbeans.impl.regex.Token parseAtom() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.regex.Token$StringToken $r21;
        org.apache.xmlbeans.impl.regex.ParseException $r12, $r22, $r24;
        org.apache.xmlbeans.impl.regex.RangeToken $r3, $r11, $r17;
        org.apache.xmlbeans.impl.regex.Token $r1, $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r13, $r14, $r15, $r16, $r18, r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i16, i17, $i18, $i19, i20;
        java.lang.String $r8, $r20;
        char $c12, $c14;
        char[] r19;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        tableswitch($i0)
        {
            case 0: goto label24;
            case 1: goto label27;
            case 2: goto label27;
            case 3: goto label27;
            case 4: goto label27;
            case 5: goto label27;
            case 6: goto label01;
            case 7: goto label27;
            case 8: goto label06;
            case 9: goto label07;
            case 10: goto label09;
            case 11: goto label27;
            case 12: goto label27;
            case 13: goto label02;
            case 14: goto label27;
            case 15: goto label27;
            case 16: goto label27;
            case 17: goto label27;
            case 18: goto label05;
            case 19: goto label08;
            case 20: goto label27;
            case 21: goto label27;
            case 22: goto label04;
            case 23: goto label03;
            default: goto label27;
        };

     label01:
        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processParen()>();

        return $r18;

     label02:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processParen2()>();

        return $r5;

     label03:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processCondition()>();

        return $r1;

     label04:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processModifiers()>();

        return $r2;

     label05:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processIndependent()>();

        return $r4;

     label06:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        r23 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_dot>;

        goto label28;

     label07:
        $r17 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.RangeToken parseCharacterClass(boolean)>(1);

        return $r17;

     label08:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.RangeToken parseSetOperations()>();

        return $r3;

     label09:
        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        tableswitch($i1)
        {
            case 49: goto label20;
            case 50: goto label20;
            case 51: goto label20;
            case 52: goto label20;
            case 53: goto label20;
            case 54: goto label20;
            case 55: goto label20;
            case 56: goto label20;
            case 57: goto label20;
            case 58: goto label22;
            case 59: goto label22;
            case 60: goto label22;
            case 61: goto label22;
            case 62: goto label22;
            case 63: goto label22;
            case 64: goto label22;
            case 65: goto label22;
            case 66: goto label22;
            case 67: goto label15;
            case 68: goto label10;
            case 69: goto label22;
            case 70: goto label22;
            case 71: goto label22;
            case 72: goto label22;
            case 73: goto label17;
            case 74: goto label22;
            case 75: goto label22;
            case 76: goto label22;
            case 77: goto label22;
            case 78: goto label22;
            case 79: goto label22;
            case 80: goto label21;
            case 81: goto label22;
            case 82: goto label22;
            case 83: goto label10;
            case 84: goto label22;
            case 85: goto label22;
            case 86: goto label22;
            case 87: goto label10;
            case 88: goto label19;
            case 89: goto label22;
            case 90: goto label22;
            case 91: goto label22;
            case 92: goto label22;
            case 93: goto label22;
            case 94: goto label22;
            case 95: goto label22;
            case 96: goto label22;
            case 97: goto label22;
            case 98: goto label22;
            case 99: goto label14;
            case 100: goto label10;
            case 101: goto label11;
            case 102: goto label11;
            case 103: goto label18;
            case 104: goto label22;
            case 105: goto label16;
            case 106: goto label22;
            case 107: goto label22;
            case 108: goto label22;
            case 109: goto label22;
            case 110: goto label11;
            case 111: goto label22;
            case 112: goto label21;
            case 113: goto label22;
            case 114: goto label11;
            case 115: goto label10;
            case 116: goto label11;
            case 117: goto label11;
            case 118: goto label11;
            case 119: goto label10;
            case 120: goto label11;
            default: goto label22;
        };

     label10:
        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token getTokenForShorthand(int)>($i4);

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r14;

     label11:
        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int decodeEscaped()>();

        if $i2 >= 65536 goto label12;

        r23 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createChar(int)>($i2);

        goto label13;

     label12:
        $r8 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: java.lang.String decomposeToSurrogates(int)>($i2);

        r23 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$StringToken createString(java.lang.String)>($r8);

     label13:
        goto label23;

     label14:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_c()>();

        return $r9;

     label15:
        $r15 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_C()>();

        return $r15;

     label16:
        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_i()>();

        return $r6;

     label17:
        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_I()>();

        return $r13;

     label18:
        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_g()>();

        return $r7;

     label19:
        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBacksolidus_X()>();

        return $r10;

     label20:
        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token processBackreference()>();

        return $r16;

     label21:
        i17 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.RangeToken processBacksolidus_pP(int)>($i3);

        r23 = $r11;

        if $r11 != null goto label23;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.5", i17);

        throw $r12;

     label22:
        $i5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        r23 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createChar(int)>($i5);

     label23:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        goto label28;

     label24:
        $i6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i6 == 93 goto label25;

        $i7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i7 == 123 goto label25;

        $i8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i8 != 125 goto label26;

     label25:
        $i18 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i19 = $i18 - 1;

        $r24 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.4", $i19);

        throw $r24;

     label26:
        $i9 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        r23 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createChar(int)>($i9);

        i20 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $z0 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: boolean isHighSurrogate(int)>(i20);

        if $z0 == 0 goto label28;

        $i10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i10 != 0 goto label28;

        $i11 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: boolean isLowSurrogate(int)>($i11);

        if $z1 == 0 goto label28;

        r19 = newarray (char)[2];

        $c12 = (char) i20;

        r19[0] = $c12;

        $i13 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $c14 = (char) $i13;

        r19[1] = $c14;

        $r20 = new java.lang.String;

        specialinvoke $r20.<java.lang.String: void <init>(char[])>(r19);

        $r21 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$StringToken createString(java.lang.String)>($r20);

        r23 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ParenToken createParen(org.apache.xmlbeans.impl.regex.Token,int)>($r21, 0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        goto label28;

     label27:
        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i16 = $i15 - 1;

        $r22 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.4", $i16);

        throw $r22;

     label28:
        return r23;
    }

    protected org.apache.xmlbeans.impl.regex.RangeToken processBacksolidus_pP(int) throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.RangeToken $r5;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.regex.ParseException $r1, $r6;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        i4 := @parameter0: int;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 != 0 goto label1;

        $i3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i3 == 123 goto label2;

     label1:
        $i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i2 = $i1 - 1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.2", $i2);

        throw $r1;

     label2:
        if i4 != 112 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $i8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i5 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(125, $i8);

        if $i5 >= 0 goto label5;

        $i7 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.3", $i7);

        throw $r6;

     label5:
        $r3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i8, $i5);

        $i6 = $i5 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i6;

        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(512);

        $r5 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean,boolean)>($r4, $z1, $z0);

        return $r5;
    }

    int processCIinCharacterClass(org.apache.xmlbeans.impl.regex.RangeToken, int)
    {
        org.apache.xmlbeans.impl.regex.RangeToken r1;
        int $i0, i1;
        org.apache.xmlbeans.impl.regex.RegexParser r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.RangeToken;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int decodeEscaped()>();

        return $i0;
    }

    protected org.apache.xmlbeans.impl.regex.RangeToken parseCharacterClass(boolean) throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        boolean z0, $z1, z2, z3, z4, z5, $z6;
        org.apache.xmlbeans.impl.regex.ParseException $r1, $r2, $r8, $r10, $r11, $r13;
        org.apache.xmlbeans.impl.regex.RangeToken $r7, $r12, $r15, r16, r17;
        org.apache.xmlbeans.impl.regex.Token $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, $i32, $i33;
        java.lang.String $r3, $r4, $r5, $r6, $r9;
        char $c13, $c18;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void setContext(int)>(1);

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        z2 = 0;

        r16 = null;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 != 0 goto label02;

        $i26 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i26 != 94 goto label02;

        z2 = 1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        if z0 == 0 goto label01;

        r17 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createNRange()>();

        goto label03;

     label01:
        $r15 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        r16 = $r15;

        virtualinvoke $r15.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(0, 1114111);

        r17 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        goto label03;

     label02:
        r17 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

     label03:
        z3 = 1;

     label04:
        $i27 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i27 == 1 goto label26;

        if $i27 != 0 goto label05;

        $i25 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i25 != 93 goto label05;

        if z3 != 0 goto label05;

        goto label26;

     label05:
        z3 = 0;

        $i28 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        i29 = $i28;

        z4 = 0;

        if $i27 != 10 goto label12;

        lookupswitch($i28)
        {
            case 67: goto label07;
            case 68: goto label06;
            case 73: goto label07;
            case 80: goto label08;
            case 83: goto label06;
            case 87: goto label06;
            case 99: goto label07;
            case 100: goto label06;
            case 105: goto label07;
            case 112: goto label08;
            case 115: goto label06;
            case 119: goto label06;
            default: goto label10;
        };

     label06:
        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.Token getTokenForShorthand(int)>($i28);

        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r14);

        z4 = 1;

        goto label11;

     label07:
        $i24 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int processCIinCharacterClass(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r17, $i28);

        i29 = $i24;

        if $i24 >= 0 goto label11;

        z4 = 1;

        goto label11;

     label08:
        i30 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.RangeToken processBacksolidus_pP(int)>($i28);

        if $r12 != null goto label09;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.atom.5", i30);

        throw $r13;

     label09:
        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r12);

        z4 = 1;

        goto label11;

     label10:
        i29 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int decodeEscaped()>();

     label11:
        goto label18;

     label12:
        if $i27 != 20 goto label18;

        $r3 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i10 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i11 = virtualinvoke $r3.<java.lang.String: int indexOf(int,int)>(58, $i10);

        if $i11 >= 0 goto label13;

        $i23 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.cc.1", $i23);

        throw $r11;

     label13:
        z5 = 1;

        $r4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i12 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $c13 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i12);

        $i32 = (int) $c13;

        if $i32 != 94 goto label14;

        $i21 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i22 = $i21 + 1;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i22;

        z5 = 0;

     label14:
        $r5 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i14 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>($i14, $i11);

        $z1 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(512);

        $r7 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean,boolean)>($r6, z5, $z1);

        if $r7 != null goto label15;

        $i20 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.cc.3", $i20);

        throw $r10;

     label15:
        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r7);

        z4 = 1;

        $i16 = $i11 + 1;

        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int regexlen>;

        if $i16 >= $i15 goto label16;

        $r9 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: java.lang.String regex>;

        $i17 = $i11 + 1;

        $c18 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($i17);

        $i33 = (int) $c18;

        if $i33 == 93 goto label17;

     label16:
        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.cc.1", $i11);

        throw $r8;

     label17:
        $i19 = $i11 + 2;

        r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset> = $i19;

     label18:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        if z4 != 0 goto label24;

        $i5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i5 != 0 goto label19;

        $i6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i6 == 45 goto label20;

     label19:
        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(i29, i29);

        goto label24;

     label20:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i7 != 1 goto label21;

        $i9 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.cc.2", $i9);

        throw $r2;

     label21:
        if $i7 != 0 goto label22;

        $i8 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i8 != 93 goto label22;

        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(i29, i29);

        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(45, 45);

        goto label24;

     label22:
        i31 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i7 != 10 goto label23;

        i31 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int decodeEscaped()>();

     label23:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(i29, i31);

     label24:
        $z6 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(1024);

        if $z6 == 0 goto label25;

        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i3 != 0 goto label25;

        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i4 != 44 goto label25;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

     label25:
        goto label04;

     label26:
        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i1 != 1 goto label27;

        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.cc.2", $i2);

        throw $r1;

     label27:
        if z0 != 0 goto label28;

        if z2 == 0 goto label28;

        virtualinvoke r16.<org.apache.xmlbeans.impl.regex.RangeToken: void subtractRanges(org.apache.xmlbeans.impl.regex.Token)>(r17);

        r17 = r16;

     label28:
        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void sortRanges()>();

        virtualinvoke r17.<org.apache.xmlbeans.impl.regex.RangeToken: void compactRanges()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void setContext(int)>(0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return r17;
    }

    protected org.apache.xmlbeans.impl.regex.RangeToken parseSetOperations() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        java.lang.RuntimeException $r4;
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.RangeToken $r1, $r3;
        org.apache.xmlbeans.impl.regex.ParseException $r2, $r5;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.RangeToken parseCharacterClass(boolean)>(0);

     label01:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 7 goto label11;

        i1 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i0 != 0 goto label02;

        if i1 == 45 goto label03;

        if i1 == 38 goto label03;

     label02:
        if $i0 != 4 goto label09;

     label03:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i6 == 9 goto label04;

        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i5 = $i4 - 1;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.ope.1", $i5);

        throw $r5;

     label04:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.RangeToken parseCharacterClass(boolean)>(0);

        if $i0 != 4 goto label05;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r3);

        goto label08;

     label05:
        if i1 != 45 goto label06;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.RangeToken: void subtractRanges(org.apache.xmlbeans.impl.regex.Token)>($r3);

        goto label08;

     label06:
        if i1 != 38 goto label07;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.RangeToken: void intersectRanges(org.apache.xmlbeans.impl.regex.Token)>($r3);

        goto label08;

     label07:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("ASSERT");

        throw $r4;

     label08:
        goto label10;

     label09:
        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i3 = $i2 - 1;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.ope.2", $i3);

        throw $r2;

     label10:
        goto label01;

     label11:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        return $r1;
    }

    org.apache.xmlbeans.impl.regex.Token getTokenForShorthand(int)
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.Token $r7, r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.StringBuffer $r2, $r3, $r5;
        int i0;
        java.lang.String $r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.RuntimeException $r1;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 68: goto label04;
            case 83: goto label16;
            case 87: goto label10;
            case 100: goto label01;
            case 115: goto label13;
            case 119: goto label07;
            default: goto label19;
        };

     label01:
        $z2 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(32);

        if $z2 == 0 goto label02;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("Nd", 1);

        goto label03;

     label02:
        $r7 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_0to9>;

     label03:
        r8 = $r7;

        goto label20;

     label04:
        $z5 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(32);

        if $z5 == 0 goto label05;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("Nd", 0);

        goto label06;

     label05:
        $r9 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_0to9>;

     label06:
        r8 = $r9;

        goto label20;

     label07:
        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(32);

        if $z0 == 0 goto label08;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("IsWord", 1);

        goto label09;

     label08:
        $r10 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars>;

     label09:
        r8 = $r10;

        goto label20;

     label10:
        $z3 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(32);

        if $z3 == 0 goto label11;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("IsWord", 0);

        goto label12;

     label11:
        $r11 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_wordchars>;

     label12:
        r8 = $r11;

        goto label20;

     label13:
        $z1 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(32);

        if $z1 == 0 goto label14;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("IsSpace", 1);

        goto label15;

     label14:
        $r12 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

     label15:
        r8 = $r12;

        goto label20;

     label16:
        $z4 = specialinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: boolean isSet(int)>(32);

        if $z4 == 0 goto label17;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("IsSpace", 0);

        goto label18;

     label17:
        $r13 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_spaces>;

     label18:
        r8 = $r13;

        goto label20;

     label19:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal Error: shorthands: \\u");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(i0, 16);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label20:
        return r8;
    }

    int decodeEscaped() throws org.apache.xmlbeans.impl.regex.ParseException
    {
        org.apache.xmlbeans.impl.regex.RegexParser r0;
        org.apache.xmlbeans.impl.regex.ParseException $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104;

        r0 := @this: org.apache.xmlbeans.impl.regex.RegexParser;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i0 == 10 goto label01;

        $i92 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i93 = $i92 - 1;

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.next.1", $i93);

        throw $r20;

     label01:
        i94 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        lookupswitch(i94)
        {
            case 65: goto label44;
            case 90: goto label44;
            case 101: goto label02;
            case 102: goto label03;
            case 110: goto label04;
            case 114: goto label05;
            case 116: goto label06;
            case 117: goto label21;
            case 118: goto label30;
            case 120: goto label07;
            case 122: goto label44;
            default: goto label45;
        };

     label02:
        i94 = 27;

        goto label45;

     label03:
        i94 = 12;

        goto label45;

     label04:
        i94 = 10;

        goto label45;

     label05:
        i94 = 13;

        goto label45;

     label06:
        i94 = 9;

        goto label45;

     label07:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i1 == 0 goto label08;

        $i28 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i29 = $i28 - 1;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i29);

        throw $r7;

     label08:
        $i2 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i2 != 123 goto label16;

        i95 = 0;

     label09:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i14 == 0 goto label10;

        $i26 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i27 = $i26 - 1;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i27);

        throw $r6;

     label10:
        $i15 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i16 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i15);

        if $i16 >= 0 goto label11;

        goto label13;

     label11:
        $i17 = i95 * 16;

        if i95 <= $i17 goto label12;

        $i19 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i20 = $i19 - 1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.2", $i20);

        throw $r3;

     label12:
        $i18 = i95 * 16;

        i95 = $i18 + $i16;

        goto label09;

     label13:
        $i21 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        if $i21 == 125 goto label14;

        $i24 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i25 = $i24 - 1;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.3", $i25);

        throw $r5;

     label14:
        if i95 <= 1114111 goto label15;

        $i22 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i23 = $i22 - 1;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.4", $i23);

        throw $r4;

     label15:
        i94 = i95;

        goto label45;

     label16:
        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i3 != 0 goto label17;

        $i6 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i7 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i6);

        if $i7 >= 0 goto label18;

     label17:
        $i4 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i5 = $i4 - 1;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i5);

        throw $r1;

     label18:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i8 != 0 goto label19;

        $i11 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i12 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i11);

        if $i12 >= 0 goto label20;

     label19:
        $i9 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i10 = $i9 - 1;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i10);

        throw $r2;

     label20:
        $i13 = $i7 * 16;

        i96 = $i13 + $i12;

        i94 = i96;

        goto label45;

     label21:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i67 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i67 != 0 goto label22;

        $i70 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i71 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i70);

        if $i71 >= 0 goto label23;

     label22:
        $i68 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i69 = $i68 - 1;

        $r15 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i69);

        throw $r15;

     label23:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i72 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i72 != 0 goto label24;

        $i75 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i76 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i75);

        if $i76 >= 0 goto label25;

     label24:
        $i73 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i74 = $i73 - 1;

        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i74);

        throw $r16;

     label25:
        $i77 = $i71 * 16;

        i97 = $i77 + $i76;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i78 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i78 != 0 goto label26;

        $i81 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i82 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i81);

        if $i82 >= 0 goto label27;

     label26:
        $i79 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i80 = $i79 - 1;

        $r17 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i80);

        throw $r17;

     label27:
        $i83 = i97 * 16;

        i98 = $i83 + $i82;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i84 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i84 != 0 goto label28;

        $i87 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i88 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i87);

        if $i88 >= 0 goto label29;

     label28:
        $i85 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i86 = $i85 - 1;

        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i86);

        throw $r18;

     label29:
        $i89 = i98 * 16;

        i99 = $i89 + $i88;

        i94 = i99;

        goto label45;

     label30:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i30 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i30 != 0 goto label31;

        $i33 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i34 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i33);

        if $i34 >= 0 goto label32;

     label31:
        $i31 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i32 = $i31 - 1;

        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i32);

        throw $r8;

     label32:
        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i35 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i35 != 0 goto label33;

        $i38 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i39 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i38);

        if $i39 >= 0 goto label34;

     label33:
        $i36 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i37 = $i36 - 1;

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i37);

        throw $r9;

     label34:
        $i40 = $i34 * 16;

        i100 = $i40 + $i39;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i41 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i41 != 0 goto label35;

        $i44 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i45 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i44);

        if $i45 >= 0 goto label36;

     label35:
        $i42 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i43 = $i42 - 1;

        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i43);

        throw $r10;

     label36:
        $i46 = i100 * 16;

        i101 = $i46 + $i45;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i47 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i47 != 0 goto label37;

        $i50 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i51 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i50);

        if $i51 >= 0 goto label38;

     label37:
        $i48 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i49 = $i48 - 1;

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i49);

        throw $r11;

     label38:
        $i52 = i101 * 16;

        i102 = $i52 + $i51;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i53 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i53 != 0 goto label39;

        $i56 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i57 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i56);

        if $i57 >= 0 goto label40;

     label39:
        $i54 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i55 = $i54 - 1;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i55);

        throw $r12;

     label40:
        $i58 = i102 * 16;

        i103 = $i58 + $i57;

        virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: void next()>();

        $i59 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: int read()>();

        if $i59 != 0 goto label41;

        $i62 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int chardata>;

        $i63 = staticinvoke <org.apache.xmlbeans.impl.regex.RegexParser: int hexChar(int)>($i62);

        if $i63 >= 0 goto label42;

     label41:
        $i60 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i61 = $i60 - 1;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.1", $i61);

        throw $r13;

     label42:
        $i64 = i103 * 16;

        i104 = $i64 + $i63;

        if i104 <= 1114111 goto label43;

        $i65 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i66 = $i65 - 1;

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descappe.4", $i66);

        throw $r14;

     label43:
        i94 = i104;

        goto label45;

     label44:
        $i90 = r0.<org.apache.xmlbeans.impl.regex.RegexParser: int offset>;

        $i91 = $i90 - 2;

        $r19 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.RegexParser: org.apache.xmlbeans.impl.regex.ParseException ex(java.lang.String,int)>("parser.descape.5", $i91);

        throw $r19;

     label45:
        return i94;
    }

    private static final int hexChar(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13;

        i0 := @parameter0: int;

        if i0 >= 48 goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i0 <= 102 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        if i0 > 57 goto label3;

        $i5 = i0 - 48;

        return $i5;

     label3:
        if i0 >= 65 goto label4;

        $i11 = (int) -1;

        return $i11;

     label4:
        if i0 > 70 goto label5;

        $i3 = i0 - 65;

        $i4 = $i3 + 10;

        return $i4;

     label5:
        if i0 >= 97 goto label6;

        $i13 = (int) -1;

        return $i13;

     label6:
        $i1 = i0 - 97;

        $i2 = $i1 + 10;

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.regex.RegexParser: int S_INXBRACKETS> = 2;

        <org.apache.xmlbeans.impl.regex.RegexParser: int S_INBRACKETS> = 1;

        <org.apache.xmlbeans.impl.regex.RegexParser: int S_NORMAL> = 0;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_XMLSCHEMA_CC_SUBTRACTION> = 24;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_CONDITION> = 23;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_MODIFIERS> = 22;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_COMMENT> = 21;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_POSIX_CHARCLASS_START> = 20;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_SET_OPERATIONS> = 19;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_INDEPENDENT> = 18;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_NEGATIVELOOKBEHIND> = 17;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_LOOKBEHIND> = 16;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_NEGATIVELOOKAHEAD> = 15;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_LOOKAHEAD> = 14;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_LPAREN2> = 13;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_DOLLAR> = 12;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_CARET> = 11;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_BACKSOLIDUS> = 10;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_LBRACKET> = 9;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_DOT> = 8;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_RPAREN> = 7;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_LPAREN> = 6;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_QUESTION> = 5;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_PLUS> = 4;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_STAR> = 3;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_OR> = 2;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_EOF> = 1;

        <org.apache.xmlbeans.impl.regex.RegexParser: int T_CHAR> = 0;

        return;
    }
}
