class org.apache.lucene.index.ReadersAndLiveDocs extends java.lang.Object
{
    public final org.apache.lucene.index.SegmentInfoPerCommit info;
    private final java.util.concurrent.atomic.AtomicInteger refCount;
    private final org.apache.lucene.index.IndexWriter writer;
    private org.apache.lucene.index.SegmentReader reader;
    private org.apache.lucene.index.SegmentReader mergeReader;
    private org.apache.lucene.util.Bits liveDocs;
    private int pendingDeleteCount;
    private boolean shared;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentInfoPerCommit)
    {
        org.apache.lucene.index.IndexWriter r3;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.apache.lucene.index.SegmentInfoPerCommit r2;
        org.apache.lucene.index.ReadersAndLiveDocs r0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r3 := @parameter0: org.apache.lucene.index.IndexWriter;

        r2 := @parameter1: org.apache.lucene.index.SegmentInfoPerCommit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: java.util.concurrent.atomic.AtomicInteger refCount> = $r1;

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info> = r2;

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.IndexWriter writer> = r3;

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared> = 1;

        return;
    }

    public void incRef()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.AssertionError $r2;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 > 1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public void decRef()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.AssertionError $r2;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public int refCount()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.AssertionError $r2;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: java.util.concurrent.atomic.AtomicInteger refCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return $i0;
    }

    public synchronized int getPendingDeleteCount()
    {
        int $i0;
        org.apache.lucene.index.ReadersAndLiveDocs r0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $i0 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        return $i0;
    }

    public synchronized boolean verifyDocCounts()
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r2, $r4, $r6, $r10, $r14, $r21;
        boolean $z0, $z1;
        org.apache.lucene.index.SegmentInfo $r3, $r5, $r11, $r22;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r15, $r16, $r17, $r18, $r19;
        java.lang.AssertionError $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String $r20;
        org.apache.lucene.util.Bits $r1, $r23;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r1 == null goto label4;

        i9 = 0;

        i10 = 0;

     label1:
        $r21 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r22 = $r21.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i8 = virtualinvoke $r22.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if i10 >= $i8 goto label3;

        $r23 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $z1 = interfaceinvoke $r23.<org.apache.lucene.util.Bits: boolean get(int)>(i10);

        if $z1 == 0 goto label2;

        i9 = i9 + 1;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r3 = $r2.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        i9 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

     label5:
        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r4 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r5 = $r4.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r5.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r6 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i1 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i3 = $i0 - $i1;

        $i2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $i4 = $i3 - $i2;

        if $i4 == i9 goto label6;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("info.docCount=");

        $r10 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r11 = $r10.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i5 = virtualinvoke $r11.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info.getDelCount()=");

        $r14 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i6 = virtualinvoke $r14.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pendingDeleteCount=");

        $i7 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r20);

        throw $r7;

     label6:
        return 1;
    }

    public synchronized org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r5;
        org.apache.lucene.index.SegmentInfoPerCommit $r4;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.index.IndexWriter $r3;
        int $i0;
        org.apache.lucene.index.SegmentReader $r1, $r2, $r8, $r10, $r11;
        org.apache.lucene.store.IOContext r6;
        org.apache.lucene.util.Bits $r7, $r9;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r6 := @parameter0: org.apache.lucene.store.IOContext;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        if $r1 != null goto label1;

        $r2 = new org.apache.lucene.index.SegmentReader;

        $r4 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r3 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.IndexWriter writer>;

        $r5 = virtualinvoke $r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig getConfig()>();

        $i0 = virtualinvoke $r5.<org.apache.lucene.index.LiveIndexWriterConfig: int getReaderTermsIndexDivisor()>();

        specialinvoke $r2.<org.apache.lucene.index.SegmentReader: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,int,org.apache.lucene.store.IOContext)>($r4, $i0, r6);

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader> = $r2;

        $r7 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r7 != null goto label1;

        $r8 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: org.apache.lucene.util.Bits getLiveDocs()>();

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs> = $r9;

     label1:
        $r10 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        virtualinvoke $r10.<org.apache.lucene.index.SegmentReader: void incRef()>();

        $r11 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        return $r11;
    }

    public synchronized org.apache.lucene.index.SegmentReader getMergeReader(org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r5;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        int $i1;
        org.apache.lucene.index.SegmentReader $r1, $r2, $r7, $r9, $r10, $r11, $r12, $r13;
        org.apache.lucene.store.IOContext r4;
        org.apache.lucene.util.Bits $r6, $r8;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r4 := @parameter0: org.apache.lucene.store.IOContext;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        if $r2 == null goto label1;

        $r9 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        virtualinvoke $r9.<org.apache.lucene.index.SegmentReader: void incRef()>();

        $r10 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader> = $r10;

        goto label2;

     label1:
        $r13 = new org.apache.lucene.index.SegmentReader;

        $r5 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i1 = (int) -1;

        specialinvoke $r13.<org.apache.lucene.index.SegmentReader: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,int,org.apache.lucene.store.IOContext)>($r5, $i1, r4);

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader> = $r13;

        $r6 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r6 != null goto label2;

        $r7 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.SegmentReader: org.apache.lucene.util.Bits getLiveDocs()>();

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs> = $r8;

     label2:
        $r11 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        virtualinvoke $r11.<org.apache.lucene.index.SegmentReader: void incRef()>();

        $r12 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        return $r12;
    }

    public synchronized void release(org.apache.lucene.index.SegmentReader) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r2, $r3;
        org.apache.lucene.index.SegmentReader r0;
        java.lang.AssertionError $r4;
        org.apache.lucene.index.ReadersAndLiveDocs r1;
        boolean $z0;

        r1 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r0 := @parameter0: org.apache.lucene.index.SegmentReader;

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r1.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r3 = virtualinvoke r0.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        if $r2 == $r3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        virtualinvoke r0.<org.apache.lucene.index.SegmentReader: void decRef()>();

        return;
    }

    public synchronized boolean delete(int)
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r13, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.index.SegmentInfo $r14, $r19;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.index.IndexWriter $r23;
        org.apache.lucene.util.MutableBits $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r16, $r17, $r20;
        java.lang.AssertionError $r4, $r5, $r24, $r26;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r15, $r21;
        org.apache.lucene.util.Bits $r1, $r2, $r10, $r22, $r25;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r25 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r25 != null goto label1;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label1:
        $z1 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r23 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.IndexWriter writer>;

        $z6 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r23);

        if $z6 != 0 goto label2;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label2:
        $z2 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if i0 < 0 goto label3;

        $r22 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $i5 = interfaceinvoke $r22.<org.apache.lucene.util.Bits: int length()>();

        if i0 < $i5 goto label4;

     label3:
        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("out of bounds: docid=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" liveDocsLength=");

        $r10 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $i3 = interfaceinvoke $r10.<org.apache.lucene.util.Bits: int length()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seg=");

        $r13 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r14 = $r13.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r15 = $r14.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docCount=");

        $r18 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r19 = $r18.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i4 = virtualinvoke $r19.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r5;

     label4:
        $z3 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $z5 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared>;

        if $z5 == 0 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $z4 = interfaceinvoke $r1.<org.apache.lucene.util.Bits: boolean get(int)>(i0);

        if $z4 == 0 goto label6;

        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $r3 = (org.apache.lucene.util.MutableBits) $r2;

        interfaceinvoke $r3.<org.apache.lucene.util.MutableBits: void clear(int)>(i0);

        $i1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $i2 = $i1 + 1;

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount> = $i2;

     label6:
        return $z4;
    }

    public synchronized void dropReaders() throws java.io.IOException
    {
        java.lang.Throwable $r5, $r6, $r9, $r10;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.index.SegmentReader $r1, $r2, $r3, $r4, $r7, $r8;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

     label01:
        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        if $r1 == null goto label06;

     label02:
        $r4 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        virtualinvoke $r4.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label03:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader> = null;

        goto label06;

     label04:
        $r10 := @caughtexception;

     label05:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader> = null;

        throw $r10;

     label06:
        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        if $r2 == null goto label19;

     label07:
        $r3 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        virtualinvoke $r3.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label08:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader> = null;

        goto label11;

     label09:
        $r9 := @caughtexception;

     label10:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader> = null;

        throw $r9;

     label11:
        goto label19;

     label12:
        $r6 := @caughtexception;

     label13:
        $r7 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        if $r7 == null goto label18;

     label14:
        $r8 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader>;

        virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label15:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader> = null;

        goto label18;

     label16:
        $r5 := @caughtexception;

     label17:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader mergeReader> = null;

        throw $r5;

     label18:
        throw $r6;

     label19:
        virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: void decRef()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label06 with label12;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public synchronized org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r10, $r12, $r16;
        org.apache.lucene.index.SegmentCoreReaders $r14;
        java.lang.AssertionError $r7, $r20;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.index.SegmentReader $r1, $r2, $r3, $r4, $r8, $r9, $r11, $r18, $r19;
        org.apache.lucene.util.Bits $r5, $r6, $r15, $r21;
        org.apache.lucene.store.IOContext r17;
        boolean $z0, $z1;
        org.apache.lucene.index.SegmentInfo $r13;
        org.apache.lucene.index.ReadersAndLiveDocs r0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r17 := @parameter0: org.apache.lucene.store.IOContext;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        if $r1 != null goto label1;

        $r18 = virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext)>(r17);

        virtualinvoke $r18.<org.apache.lucene.index.SegmentReader: void decRef()>();

        $z1 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r19 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        if $r19 != null goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label1:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared> = 1;

        $r21 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r21 == null goto label2;

        $r8 = new org.apache.lucene.index.SegmentReader;

        $r9 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        $r11 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        $r14 = $r11.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentCoreReaders core>;

        $r15 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $r12 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r13 = $r12.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r13.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r16 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i1 = virtualinvoke $r16.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i3 = $i0 - $i1;

        $i2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $i4 = $i3 - $i2;

        specialinvoke $r8.<org.apache.lucene.index.SegmentReader: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,org.apache.lucene.index.SegmentCoreReaders,org.apache.lucene.util.Bits,int)>($r10, $r14, $r15, $i4);

        return $r8;

     label2:
        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentReader: org.apache.lucene.util.Bits getLiveDocs()>();

        $r6 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r5 == $r6 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void incRef()>();

        $r3 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader reader>;

        return $r3;
    }

    public synchronized void initWritableLiveDocs() throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r3, $r10, $r13;
        java.lang.AssertionError $r2, $r15, $r17;
        int $i0, $i1;
        org.apache.lucene.util.Bits $r1, $r7, $r8;
        org.apache.lucene.codecs.LiveDocsFormat $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.index.SegmentInfo $r4, $r11, $r14;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.index.IndexWriter $r16;
        org.apache.lucene.util.MutableBits $r9, $r12;
        org.apache.lucene.codecs.Codec $r5;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r16 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.IndexWriter writer>;

        $z4 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r16);

        if $z4 != 0 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $z1 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r13 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r14 = $r13.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = virtualinvoke $r14.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i1 > 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $z2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared>;

        if $z2 == 0 goto label5;

        $r3 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r4 = $r3.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()>();

        $r7 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r7 != null goto label3;

        $r10 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r11 = $r10.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r11.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r12 = virtualinvoke $r6.<org.apache.lucene.codecs.LiveDocsFormat: org.apache.lucene.util.MutableBits newLiveDocs(int)>($i0);

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs> = $r12;

        goto label4;

     label3:
        $r8 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $r9 = virtualinvoke $r6.<org.apache.lucene.codecs.LiveDocsFormat: org.apache.lucene.util.MutableBits newLiveDocs(org.apache.lucene.util.Bits)>($r8);

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs> = $r9;

     label4:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared> = 0;

        goto label6;

     label5:
        $z3 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        if $r1 != null goto label6;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    public synchronized org.apache.lucene.util.Bits getLiveDocs()
    {
        org.apache.lucene.index.IndexWriter $r2;
        java.lang.AssertionError $r3;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.util.Bits $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.IndexWriter writer>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        return $r1;
    }

    public synchronized org.apache.lucene.util.Bits getReadOnlyLiveDocs()
    {
        org.apache.lucene.index.IndexWriter $r2;
        java.lang.AssertionError $r3;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.util.Bits $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.IndexWriter writer>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared> = 1;

        $r1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        return $r1;
    }

    public synchronized void dropChanges()
    {
        org.apache.lucene.index.ReadersAndLiveDocs r0;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount> = 0;

        return;
    }

    public synchronized boolean writeLiveDocs(org.apache.lucene.store.Directory) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r3, $r9, $r11, $r12, $r13, $r14, $r20, $r27;
        org.apache.lucene.store.Directory r2;
        org.apache.lucene.codecs.LiveDocsFormat $r6;
        org.apache.lucene.store.IOContext $r8;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.SegmentInfo $r4, $r21;
        java.util.Set $r15, $r28;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.util.MutableBits $r10;
        java.lang.Throwable $r23, $r26, $r30;
        java.lang.AssertionError $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r18, r25;
        org.apache.lucene.util.Bits $r7, $r19;
        java.util.Iterator $r16, $r29;
        org.apache.lucene.codecs.Codec $r5;
        org.apache.lucene.store.TrackingDirectoryWrapper $r1;
        java.lang.Object $r17, $r24;

        r0 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        r2 := @parameter0: org.apache.lucene.store.Directory;

        $i0 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        if $i0 == 0 goto label19;

        $z0 = <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r19 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $i5 = interfaceinvoke $r19.<org.apache.lucene.util.Bits: int length()>();

        $r20 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r21 = $r20.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i6 = virtualinvoke $r21.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i5 == $i6 goto label01;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label01:
        $r1 = new org.apache.lucene.store.TrackingDirectoryWrapper;

        specialinvoke $r1.<org.apache.lucene.store.TrackingDirectoryWrapper: void <init>(org.apache.lucene.store.Directory)>(r2);

     label02:
        $r3 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r4 = $r3.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()>();

        $r7 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits liveDocs>;

        $r10 = (org.apache.lucene.util.MutableBits) $r7;

        $r9 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i1 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $r8 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext DEFAULT>;

        virtualinvoke $r6.<org.apache.lucene.codecs.LiveDocsFormat: void writeLiveDocs(org.apache.lucene.util.MutableBits,org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfoPerCommit,int,org.apache.lucene.store.IOContext)>($r10, $r1, $r9, $i1, $r8);

     label03:
        if 1 != 0 goto label18;

        $r14 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r14.<org.apache.lucene.index.SegmentInfoPerCommit: void advanceNextWriteDelGen()>();

        $r15 = virtualinvoke $r1.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r17;

     label05:
        virtualinvoke r2.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r18);

     label06:
        goto label08;

     label07:
        $r30 := @caughtexception;

     label08:
        goto label04;

     label09:
        goto label18;

     label10:
        $r26 := @caughtexception;

     label11:
        if 0 != 0 goto label17;

        $r27 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r27.<org.apache.lucene.index.SegmentInfoPerCommit: void advanceNextWriteDelGen()>();

        $r28 = virtualinvoke $r1.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

        $r29 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        $r24 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r24;

     label13:
        virtualinvoke r2.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r25);

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

     label16:
        goto label12;

     label17:
        throw $r26;

     label18:
        $r11 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r11.<org.apache.lucene.index.SegmentInfoPerCommit: void advanceDelGen()>();

        $r13 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r12 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i2 = virtualinvoke $r12.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i3 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $i4 = $i2 + $i3;

        virtualinvoke $r13.<org.apache.lucene.index.SegmentInfoPerCommit: void setDelCount(int)>($i4);

        r0.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount> = 0;

        return 1;

     label19:
        return 0;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r3;
        org.apache.lucene.index.ReadersAndLiveDocs r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r2 := @this: org.apache.lucene.index.ReadersAndLiveDocs;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ReadersAndLiveDocs(seg=");

        $r3 = r2.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pendingDeleteCount=");

        $i0 = r2.<org.apache.lucene.index.ReadersAndLiveDocs: int pendingDeleteCount>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shared=");

        $z0 = r2.<org.apache.lucene.index.ReadersAndLiveDocs: boolean shared>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/ReadersAndLiveDocs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.ReadersAndLiveDocs: boolean $assertionsDisabled> = $z1;

        return;
    }
}
