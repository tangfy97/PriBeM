class com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1 extends java.lang.Object implements com.mycila.inject.internal.guava.base.Function
{
    final com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1 this$1;

    void <init>(com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1)
    {
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1 r0;
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1 r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1;

        r0.<com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1 this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Map$Entry apply(java.util.Map$Entry)
    {
        java.util.Map$Entry r0, $r9;
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap $r4;
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1 r2;
        java.lang.Object $r1, $r6, $r7, $r8;
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1 $r3;
        com.mycila.inject.internal.guava.collect.Maps$EntryTransformer $r5;

        r2 := @this: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1 this$1>;

        $r4 = $r3.<com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap this$0>;

        $r5 = $r4.<com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap: com.mycila.inject.internal.guava.collect.Maps$EntryTransformer transformer>;

        $r6 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = interfaceinvoke $r5.<com.mycila.inject.internal.guava.collect.Maps$EntryTransformer: java.lang.Object transformEntry(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r1, $r8);

        return $r9;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        java.util.Map$Entry $r2, $r3;
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1 r0;
        java.lang.Object r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map$Entry) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap$1$1: java.util.Map$Entry apply(java.util.Map$Entry)>($r2);

        return $r3;
    }
}
