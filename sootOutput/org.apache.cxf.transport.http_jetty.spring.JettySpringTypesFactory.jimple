public final class org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory extends java.lang.Object
{

    public void <init>()
    {
        org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.Map toThreadingParameters(java.util.List)
    {
        java.util.Iterator $r2;
        org.apache.cxf.transport.http_jetty.ThreadingParameters $r6;
        java.util.List r1;
        java.util.TreeMap $r0;
        java.lang.Object $r3;
        java.lang.String $r7;
        org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersIdentifiedType r4;
        boolean $z0;
        org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType $r5;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersIdentifiedType) $r3;

        $r5 = virtualinvoke r4.<org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersIdentifiedType: org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType getThreadingParameters()>();

        $r6 = staticinvoke <org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory: org.apache.cxf.transport.http_jetty.ThreadingParameters toThreadingParameters(org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType)>($r5);

        $r7 = virtualinvoke r4.<org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersIdentifiedType: java.lang.String getId()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        goto label1;

     label2:
        return $r0;
    }

    private static org.apache.cxf.transport.http_jetty.ThreadingParameters toThreadingParameters(org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType)
    {
        org.apache.cxf.transport.http_jetty.ThreadingParameters $r0;
        int $i0, $i1;
        java.lang.Integer $r2, $r3;
        org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType r1;

        r1 := @parameter0: org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType;

        $r0 = new org.apache.cxf.transport.http_jetty.ThreadingParameters;

        specialinvoke $r0.<org.apache.cxf.transport.http_jetty.ThreadingParameters: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType: java.lang.Integer getMaxThreads()>();

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<org.apache.cxf.transport.http_jetty.ThreadingParameters: void setMaxThreads(int)>($i0);

        $r3 = virtualinvoke r1.<org.apache.cxf.transports.http_jetty.configuration.ThreadingParametersType: java.lang.Integer getMinThreads()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<org.apache.cxf.transport.http_jetty.ThreadingParameters: void setMinThreads(int)>($i1);

        return $r0;
    }

    private static java.util.Map toTLSServerParamenters(java.util.List)
    {
        org.apache.cxf.configuration.jsse.TLSServerParametersConfig $r5;
        org.apache.cxf.configuration.security.TLSServerParametersType $r6;
        java.lang.String $r7, $r12, $r14;
        boolean $z0;
        java.util.Iterator $r2;
        java.lang.RuntimeException $r9;
        java.lang.Exception $r8;
        java.util.List r1;
        java.util.TreeMap $r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r10, $r11, $r13;
        org.apache.cxf.transports.http_jetty.configuration.TLSServerParametersIdentifiedType r4;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.cxf.transports.http_jetty.configuration.TLSServerParametersIdentifiedType) $r3;

     label2:
        $r5 = new org.apache.cxf.configuration.jsse.TLSServerParametersConfig;

        $r6 = virtualinvoke r4.<org.apache.cxf.transports.http_jetty.configuration.TLSServerParametersIdentifiedType: org.apache.cxf.configuration.security.TLSServerParametersType getTlsServerParameters()>();

        specialinvoke $r5.<org.apache.cxf.configuration.jsse.TLSServerParametersConfig: void <init>(org.apache.cxf.configuration.security.TLSServerParametersType)>($r6);

        $r7 = virtualinvoke r4.<org.apache.cxf.transports.http_jetty.configuration.TLSServerParametersIdentifiedType: java.lang.String getId()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not configure TLS for id ");

        $r12 = virtualinvoke r4.<org.apache.cxf.transports.http_jetty.configuration.TLSServerParametersIdentifiedType: java.lang.String getId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        throw $r9;

     label5:
        goto label1;

     label6:
        return $r0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.util.Map createThreadingParametersMap(java.lang.String, javax.xml.bind.JAXBContext) throws java.lang.Exception
    {
        java.util.List $r6;
        org.w3c.dom.Element $r3;
        java.io.StringReader $r0;
        org.w3c.dom.Document $r2;
        java.util.Map $r7;
        java.lang.String r1;
        javax.xml.namespace.QName $r4;
        javax.xml.bind.JAXBContext r5;
        org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory r8;

        r8 := @this: org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: javax.xml.bind.JAXBContext;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(java.io.Reader)>($r0);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r4 = new javax.xml.namespace.QName;

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http-jetty/configuration", "identifiedThreadingParameters");

        $r6 = staticinvoke <org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory: java.util.List parseListElement(org.w3c.dom.Element,javax.xml.namespace.QName,java.lang.Class,javax.xml.bind.JAXBContext)>($r3, $r4, class "Lorg/apache/cxf/transports/http_jetty/configuration/ThreadingParametersIdentifiedType;", r5);

        $r7 = staticinvoke <org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory: java.util.Map toThreadingParameters(java.util.List)>($r6);

        return $r7;
    }

    public java.util.Map createTLSServerParametersMap(java.lang.String, javax.xml.bind.JAXBContext) throws java.lang.Exception
    {
        java.util.List $r6;
        org.w3c.dom.Element $r3;
        java.io.StringReader $r0;
        org.w3c.dom.Document $r2;
        java.util.Map $r7;
        java.lang.String r1;
        javax.xml.namespace.QName $r4;
        javax.xml.bind.JAXBContext r5;
        org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory r8;

        r8 := @this: org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: javax.xml.bind.JAXBContext;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(java.io.Reader)>($r0);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r4 = new javax.xml.namespace.QName;

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://cxf.apache.org/transports/http-jetty/configuration", "identifiedTLSServerParameters");

        $r6 = staticinvoke <org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory: java.util.List parseListElement(org.w3c.dom.Element,javax.xml.namespace.QName,java.lang.Class,javax.xml.bind.JAXBContext)>($r3, $r4, class "Lorg/apache/cxf/transports/http_jetty/configuration/TLSServerParametersIdentifiedType;", r5);

        $r7 = staticinvoke <org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory: java.util.Map toTLSServerParamenters(java.util.List)>($r6);

        return $r7;
    }

    public static java.util.List parseListElement(org.w3c.dom.Element, javax.xml.namespace.QName, java.lang.Class, javax.xml.bind.JAXBContext) throws javax.xml.bind.JAXBException
    {
        javax.xml.bind.Unmarshaller $r2;
        java.util.ArrayList $r0;
        short $s0;
        org.w3c.dom.Element r3;
        org.w3c.dom.Node r11;
        java.lang.Class r9;
        java.lang.Object $r10;
        javax.xml.namespace.QName r4;
        java.lang.String $r5, $r6, $r7, $r8;
        javax.xml.bind.JAXBContext r1;
        boolean $z0, $z1;

        r3 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: javax.xml.namespace.QName;

        r9 := @parameter2: java.lang.Class;

        r1 := @parameter3: javax.xml.bind.JAXBContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>();

        r11 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r11 == null goto label3;

        $s0 = interfaceinvoke r11.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r5 = virtualinvoke r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r6 = interfaceinvoke r11.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r8 = interfaceinvoke r11.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r10 = staticinvoke <org.apache.cxf.transport.http_jetty.spring.JettySpringTypesFactory: java.lang.Object unmarshal(javax.xml.bind.Unmarshaller,org.w3c.dom.Node,java.lang.Class)>($r2, r11, r9);

        if $r10 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        r11 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label3:
        return $r0;
    }

    private static java.lang.Object unmarshal(javax.xml.bind.Unmarshaller, org.w3c.dom.Node, java.lang.Class)
    {
        javax.xml.bind.Unmarshaller r0;
        javax.xml.bind.JAXBElement r6;
        java.lang.RuntimeException $r4;
        javax.xml.bind.JAXBException $r3;
        org.w3c.dom.Node r2;
        java.lang.Class r1;
        java.lang.Object r5;
        boolean $z0;

        r0 := @parameter0: javax.xml.bind.Unmarshaller;

        r2 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        if r1 == null goto label2;

        r5 = interfaceinvoke r0.<javax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement unmarshal(org.w3c.dom.Node,java.lang.Class)>(r2, r1);

        goto label3;

     label2:
        r5 = interfaceinvoke r0.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(org.w3c.dom.Node)>(r2);

     label3:
        $z0 = r5 instanceof javax.xml.bind.JAXBElement;

        if $z0 == 0 goto label4;

        r6 = (javax.xml.bind.JAXBElement) r5;

        r5 = virtualinvoke r6.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>();

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse configuration.", $r3);

        throw $r4;

     label6:
        return r5;

        catch javax.xml.bind.JAXBException from label1 to label4 with label5;
    }
}
