public class arq.sse_query extends arq.cmdline.CmdARQ
{
    protected final arq.cmdline.ArgDecl printDecl;
    arq.cmdline.ModAlgebra modAlgebra;
    arq.cmdline.ModDataset modDataset;
    arq.cmdline.ModResultsOut modResults;
    arq.cmdline.ModTime modTime;
    arq.cmdline.ModEngine modEngine;
    boolean printOp;
    boolean printPlan;
    static final java.lang.String divider;
    boolean needDivider;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.sse_query $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.sse_query;

        specialinvoke $r0.<arq.sse_query: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.sse_query: void mainRun()>();

        return;
    }

    public void <init>(java.lang.String[])
    {
        arq.cmdline.ModDatasetGeneralAssembler $r5;
        arq.cmdline.ModTime $r7, $r13;
        arq.cmdline.ArgDecl $r2, $r9;
        java.lang.String[] r1, $r3;
        arq.cmdline.ModResultsOut $r6, $r11;
        arq.sse_query r0;
        arq.cmdline.ModDataset $r12;
        arq.cmdline.ModAlgebra $r4, $r10;
        arq.cmdline.ModEngine $r8, $r14;

        r0 := @this: arq.sse_query;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "print", $r3);

        r0.<arq.sse_query: arq.cmdline.ArgDecl printDecl> = $r2;

        $r4 = new arq.cmdline.ModAlgebra;

        specialinvoke $r4.<arq.cmdline.ModAlgebra: void <init>()>();

        r0.<arq.sse_query: arq.cmdline.ModAlgebra modAlgebra> = $r4;

        $r5 = new arq.cmdline.ModDatasetGeneralAssembler;

        specialinvoke $r5.<arq.cmdline.ModDatasetGeneralAssembler: void <init>()>();

        r0.<arq.sse_query: arq.cmdline.ModDataset modDataset> = $r5;

        $r6 = new arq.cmdline.ModResultsOut;

        specialinvoke $r6.<arq.cmdline.ModResultsOut: void <init>()>();

        r0.<arq.sse_query: arq.cmdline.ModResultsOut modResults> = $r6;

        $r7 = new arq.cmdline.ModTime;

        specialinvoke $r7.<arq.cmdline.ModTime: void <init>()>();

        r0.<arq.sse_query: arq.cmdline.ModTime modTime> = $r7;

        $r8 = new arq.cmdline.ModEngine;

        specialinvoke $r8.<arq.cmdline.ModEngine: void <init>()>();

        r0.<arq.sse_query: arq.cmdline.ModEngine modEngine> = $r8;

        r0.<arq.sse_query: boolean printOp> = 0;

        r0.<arq.sse_query: boolean printPlan> = 0;

        r0.<arq.sse_query: boolean needDivider> = 0;

        $r9 = r0.<arq.sse_query: arq.cmdline.ArgDecl printDecl>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r9, "--print=op/plan", "Print details");

        $r10 = r0.<arq.sse_query: arq.cmdline.ModAlgebra modAlgebra>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r10);

        $r11 = r0.<arq.sse_query: arq.cmdline.ModResultsOut modResults>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r11);

        $r12 = r0.<arq.sse_query: arq.cmdline.ModDataset modDataset>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r12);

        $r13 = r0.<arq.sse_query: arq.cmdline.ModTime modTime>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r13);

        $r14 = r0.<arq.sse_query: arq.cmdline.ModEngine modEngine>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r14);

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ArgDecl $r1;
        java.lang.String r5, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r3;
        arq.sse_query r0;
        java.util.List $r2;
        arq.cmd.CmdException $r6;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: arq.sse_query;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        $r1 = r0.<arq.sse_query: arq.cmdline.ArgDecl printDecl>;

        $r2 = virtualinvoke r0.<arq.sse_query: java.util.List getValues(arq.cmdline.ArgDecl)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("op");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("alg");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("algebra");

        if $z3 == 0 goto label3;

     label2:
        r0.<arq.sse_query: boolean printOp> = 1;

        goto label5;

     label3:
        $z4 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("plan");

        if $z4 == 0 goto label4;

        r0.<arq.sse_query: boolean printPlan> = 1;

        goto label5;

     label4:
        $r6 = new arq.cmd.CmdException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a recognized print form: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : Choices are: query, op, quad");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<arq.cmd.CmdException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        goto label1;

     label6:
        return;
    }

    protected java.lang.String getCommandName()
    {
        java.lang.String $r1;
        arq.sse_query r0;

        r0 := @this: arq.sse_query;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String getSummary()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;
        arq.sse_query r1;

        r1 := @this: arq.sse_query;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<arq.sse_query: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --data=<file> --query=<query>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void divider()
    {
        java.io.PrintStream $r1;
        arq.sse_query r0;
        boolean $z0;

        r0 := @this: arq.sse_query;

        $z0 = r0.<arq.sse_query: boolean needDivider>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

     label1:
        r0.<arq.sse_query: boolean needDivider> = 1;

        return;
    }

    protected void exec()
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r24;
        arq.cmdline.ModAlgebra $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        arq.cmd.TerminationException $r21;
        arq.sse_query r0;
        com.hp.hpl.jena.query.Dataset $r4, r22;
        java.lang.StringBuilder $r7, $r9, $r12;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r14;
        com.hp.hpl.jena.sparql.engine.PlanOp $r15;
        arq.cmdline.ModTime $r5, $r10, $r25, $r26;
        long $l0;
        arq.cmdline.ModResultsOut $r23;
        arq.cmdline.ModDataset $r3;
        java.lang.String $r11, $r13;
        java.io.PrintStream $r8, $r17, $r19, $r20;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r6;
        org.apache.jena.atlas.io.IndentedWriter $r16, $r18;

        r0 := @this: arq.sse_query;

        $r1 = r0.<arq.sse_query: arq.cmdline.ModAlgebra modAlgebra>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModAlgebra: com.hp.hpl.jena.sparql.algebra.Op getOp()>();

        if $r2 != null goto label1;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("No query expression to execute");

        $r21 = new arq.cmd.TerminationException;

        specialinvoke $r21.<arq.cmd.TerminationException: void <init>(int)>(9);

        throw $r21;

     label1:
        $r3 = r0.<arq.sse_query: arq.cmdline.ModDataset modDataset>;

        $r4 = virtualinvoke $r3.<arq.cmdline.ModDataset: com.hp.hpl.jena.query.Dataset getDataset()>();

        r22 = $r4;

        if $r4 != null goto label2;

        r22 = staticinvoke <com.hp.hpl.jena.query.DatasetFactory: com.hp.hpl.jena.query.Dataset createMem()>();

     label2:
        $r5 = r0.<arq.sse_query: arq.cmdline.ModTime modTime>;

        virtualinvoke $r5.<arq.cmdline.ModTime: void startTimer()>();

        $r6 = interfaceinvoke r22.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $z0 = r0.<arq.sse_query: boolean printOp>;

        if $z0 != 0 goto label3;

        $z3 = r0.<arq.sse_query: boolean printPlan>;

        if $z3 == 0 goto label5;

     label3:
        $z1 = r0.<arq.sse_query: boolean printOp>;

        if $z1 == 0 goto label4;

        specialinvoke r0.<arq.sse_query: void divider()>();

        $r18 = new org.apache.jena.atlas.io.IndentedWriter;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r18.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream,boolean)>($r19, 1);

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Op: void output(org.apache.jena.atlas.io.IndentedWriter)>($r18);

        virtualinvoke $r18.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

     label4:
        $z2 = r0.<arq.sse_query: boolean printPlan>;

        if $z2 == 0 goto label5;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph)>($r2, $r6);

        $r15 = new com.hp.hpl.jena.sparql.engine.PlanOp;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.engine.PlanOp: void <init>(com.hp.hpl.jena.sparql.algebra.Op,org.apache.jena.atlas.lib.Closeable,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, null, $r14);

        specialinvoke r0.<arq.sse_query: void divider()>();

        $r16 = new org.apache.jena.atlas.io.IndentedWriter;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r16.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream,boolean)>($r17, 0);

        interfaceinvoke $r15.<com.hp.hpl.jena.sparql.engine.Plan: void output(org.apache.jena.atlas.io.IndentedWriter)>($r16);

        virtualinvoke $r16.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

     label5:
        $r23 = r0.<arq.sse_query: arq.cmdline.ModResultsOut modResults>;

        $r24 = virtualinvoke $r23.<arq.cmdline.ModResultsOut: com.hp.hpl.jena.sparql.resultset.ResultsFormat getResultsFormat()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($r2, $r6, $r24);

        $r25 = r0.<arq.sse_query: arq.cmdline.ModTime modTime>;

        $l0 = virtualinvoke $r25.<arq.cmdline.ModTime: long endTimer()>();

        $r26 = r0.<arq.sse_query: arq.cmdline.ModTime modTime>;

        $z4 = virtualinvoke $r26.<arq.cmdline.ModTime: boolean timingEnabled()>();

        if $z4 == 0 goto label6;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time: ");

        $r10 = r0.<arq.sse_query: arq.cmdline.ModTime modTime>;

        $r11 = virtualinvoke $r10.<arq.cmdline.ModTime: java.lang.String timeStr(long)>($l0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label6:
        return;
    }

    public static void <clinit>()
    {
        <arq.sse_query: java.lang.String divider> = "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";

        return;
    }
}
