public class org.waveprotocol.wave.client.editor.content.ContentRawDocument extends org.waveprotocol.wave.client.editor.content.FullContentView implements org.waveprotocol.wave.model.document.raw.RawDocument
{
    private final org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory;
    private final org.waveprotocol.wave.client.editor.content.ContentElement rootElement;
    private boolean affectImpl;

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.FullContentView: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl> = 0;

        r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement rootElement> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory> = r2;

        return;
    }

    public void setAffectHtml()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Already affectImpl is true");

        r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl> = 1;

        return;
    }

    public boolean getAffectHtml()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        return $z0;
    }

    public void clearAffectHtml()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Already not affectImpl");

        r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl> = 0;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode r4;
        java.util.Map $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r3, $r5;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r4 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String,java.util.Map,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r1, $r2, r3, r4);

        return $r5;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String, java.util.Map, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode r6;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory $r3, $r7;
        java.util.Map r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4, r5;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentElement;

        r6 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory: org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String,java.util.Map)>(r1, r2);

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $r7 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)>(r5, $r4, null, r6, $r7);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return $r4;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode createTextNode(java.lang.String, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        java.lang.Throwable $r6;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode r5;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r3;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r4;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory: org.waveprotocol.wave.client.editor.content.ContentTextNode createText(java.lang.String)>(r1);

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode)>(r4, $r3, r5);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return $r3;

     label3:
        $r6 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.client.editor.content.ContentNode r1, r2, $r4;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $z0 = r3.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>(r1, r2, $z0);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode r2, r3, r4, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)>(r1, r2, r3, r4, null);

        return $r5;
    }

    private org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)
    {
        java.lang.Throwable $r7;
        org.waveprotocol.wave.client.editor.content.ContentNode r1, r2, r3, $r6;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r4;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        r5 := @parameter4: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $z0 = r4.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean,org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)>(r1, r2, r3, $z0, r5);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void insertData(org.waveprotocol.wave.client.editor.content.ContentTextNode, int, java.lang.String)
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $z0 = r2.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void insertData(int,java.lang.String,boolean)>(i0, r1, $z0);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void deleteData(org.waveprotocol.wave.client.editor.content.ContentTextNode, int, int)
    {
        java.lang.Throwable $r2;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        int i0, i1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $z0 = r1.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void deleteData(int,int,boolean)>(i0, i1, $z0);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeAttribute(org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String)
    {
        java.lang.Throwable $r2;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String r1;

        r3 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void removeAttribute(java.lang.String)>(r1);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeChild(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $z0 = r2.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void removeChild(org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>(r1, $z0);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAttribute(org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String r1, r2;

        r4 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setAttribute(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode splitText(org.waveprotocol.wave.client.editor.content.ContentTextNode, int)
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0, $r2;
        int i0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter1: int;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $z0 = r1.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean affectImpl>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentTextNode splitText(int,boolean)>(i0, $z0);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode mergeText(org.waveprotocol.wave.client.editor.content.ContentTextNode)
    {
        java.lang.Throwable $r0;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r2;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return null;
    }

    public void appendData(org.waveprotocol.wave.client.editor.content.ContentTextNode, java.lang.String)
    {
        java.lang.Throwable $r4;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        int $i0;
        java.lang.String $r2, r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r3 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: java.lang.String getData(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void insertData(org.waveprotocol.wave.client.editor.content.ContentTextNode,int,java.lang.String)>(r1, $i0, r3);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement rootElement>;

        return $r1;
    }

    public org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer()>();

        return $r1;
    }

    public void setIndexingContainer(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r2;
        org.waveprotocol.wave.model.util.OffsetList$Container r1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void setIndexingContainer(org.waveprotocol.wave.model.util.OffsetList$Container)>(r1);

        return;
    }

    public volatile java.lang.Object getDocumentElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        return $r1;
    }

    public volatile void setIndexingContainer(java.lang.Object, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r3;
        org.waveprotocol.wave.model.util.OffsetList$Container r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void setIndexingContainer(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.model.util.OffsetList$Container)>($r3, r2);

        return;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return $r3;
    }

    public volatile void deleteData(java.lang.Object, int, int)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2;
        int i0, i1;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void deleteData(org.waveprotocol.wave.client.editor.content.ContentTextNode,int,int)>($r2, i0, i1);

        return;
    }

    public volatile void insertData(java.lang.Object, int, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r3;
        int i0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void insertData(org.waveprotocol.wave.client.editor.content.ContentTextNode,int,java.lang.String)>($r3, i0, r2);

        return;
    }

    public volatile void appendData(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r3;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void appendData(org.waveprotocol.wave.client.editor.content.ContentTextNode,java.lang.String)>($r3, r2);

        return;
    }

    public volatile void removeAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void removeAttribute(org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String)>($r3, r2);

        return;
    }

    public volatile void setAttribute(java.lang.Object, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;
        java.lang.String r2, r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void setAttribute(org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String,java.lang.String)>($r4, r2, r3);

        return;
    }

    public volatile void removeChild(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r3;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentNode) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void removeChild(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object insertBefore(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r5, $r6, $r7, $r9;
        java.lang.Object r1, r2, r3, r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r8;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r8 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentNode) r2;

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) r3;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) r4;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode)>($r8, $r7, $r6, $r5);

        return $r9;
    }

    public volatile java.lang.Object insertBefore(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r4, $r5, $r7;
        java.lang.Object r1, r2, r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) r2;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) r3;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode)>($r6, $r5, $r4);

        return $r7;
    }

    public volatile java.lang.Object createTextNode(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r4;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r6;
        java.lang.Object r2, r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentElement) r2;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) r3;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentTextNode createTextNode(java.lang.String,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r1, $r5, $r4);

        return $r6;
    }

    public volatile java.lang.Object createElement(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r5;
        java.util.Map r2;
        java.lang.Object r3, r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6, $r7;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentElement) r3;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) r4;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String,java.util.Map,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r1, r2, $r6, $r5);

        return $r7;
    }

    public volatile java.lang.Object mergeText(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentTextNode mergeText(org.waveprotocol.wave.client.editor.content.ContentTextNode)>($r2);

        return $r3;
    }

    public volatile java.lang.Object splitText(java.lang.Object, int)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2, $r3;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentTextNode splitText(org.waveprotocol.wave.client.editor.content.ContentTextNode,int)>($r2, i0);

        return $r3;
    }
}
