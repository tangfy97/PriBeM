public class ucar.nc2.dataset.DatasetConstructor extends java.lang.Object
{
    private static final java.lang.String boundsDimName;

    public void <init>()
    {
        ucar.nc2.dataset.DatasetConstructor r0;

        r0 := @this: ucar.nc2.dataset.DatasetConstructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void transferDataset(ucar.nc2.NetcdfFile, ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.ReplaceVariableCheck)
    {
        ucar.nc2.dataset.ReplaceVariableCheck r4;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.dataset.NetcdfDataset r1;
        ucar.nc2.Group $r2, $r3;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r4 := @parameter2: ucar.nc2.dataset.ReplaceVariableCheck;

        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r3 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        staticinvoke <ucar.nc2.dataset.DatasetConstructor: void transferGroup(ucar.nc2.NetcdfFile,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,ucar.nc2.Group,ucar.nc2.dataset.ReplaceVariableCheck)>(r0, r1, $r2, $r3, r4);

        return;
    }

    private static void transferGroup(ucar.nc2.NetcdfFile, ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Group, ucar.nc2.Group, ucar.nc2.dataset.ReplaceVariableCheck)
    {
        ucar.nc2.dataset.ReplaceVariableCheck r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        ucar.nc2.dataset.VariableDS $r20;
        ucar.nc2.Group r0, r1, $r10, $r14, r31, r32;
        java.util.List $r2, $r4, $r6;
        ucar.nc2.NetcdfFile r11;
        ucar.nc2.Structure $r22;
        int $i0;
        ucar.nc2.Variable $r18, $r23, r30;
        java.lang.String $r9, $r15, $r17, $r25, $r29;
        java.util.Iterator $r3, $r5, $r7;
        ucar.nc2.dataset.StructureDS $r21;
        ucar.nc2.dataset.VariableEnhanced r19;
        java.lang.Object $r8, $r16, $r24;
        ucar.nc2.Dimension $r26, r27, $r28;
        ucar.nc2.dataset.NetcdfDataset r12;

        r11 := @parameter0: ucar.nc2.NetcdfFile;

        r12 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter2: ucar.nc2.Group;

        r1 := @parameter3: ucar.nc2.Group;

        r13 := @parameter4: ucar.nc2.dataset.ReplaceVariableCheck;

        staticinvoke <ucar.nc2.dataset.DatasetConstructor: void transferGroupAttributes(ucar.nc2.Group,ucar.nc2.Group)>(r0, r1);

        $r2 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getDimensions()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r24 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r27 = (ucar.nc2.Dimension) $r24;

        $r25 = virtualinvoke r27.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r26 = virtualinvoke r1.<ucar.nc2.Group: ucar.nc2.Dimension findDimensionLocal(java.lang.String)>($r25);

        if null != $r26 goto label04;

        $r28 = new ucar.nc2.Dimension;

        $r29 = virtualinvoke r27.<ucar.nc2.Dimension: java.lang.String getName()>();

        $i0 = virtualinvoke r27.<ucar.nc2.Dimension: int getLength()>();

        $z9 = virtualinvoke r27.<ucar.nc2.Dimension: boolean isShared()>();

        if 1 == 0 goto label02;

        $z8 = virtualinvoke r27.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z8 == 0 goto label02;

        $z10 = 1;

        goto label03;

     label02:
        $z10 = 0;

     label03:
        $z11 = virtualinvoke r27.<ucar.nc2.Dimension: boolean isVariableLength()>();

        specialinvoke $r28.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>($r29, $i0, $z9, $z10, $z11);

        virtualinvoke r1.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r28);

     label04:
        goto label01;

     label05:
        $r4 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getVariables()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r16 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r30 = (ucar.nc2.Variable) $r16;

        $r17 = virtualinvoke r30.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r18 = virtualinvoke r1.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r17);

        r19 = (ucar.nc2.dataset.VariableEnhanced) $r18;

        if r13 == null goto label07;

        $z7 = interfaceinvoke r13.<ucar.nc2.dataset.ReplaceVariableCheck: boolean replace(ucar.nc2.Variable)>(r30);

        if $z7 == 0 goto label07;

        $z12 = 1;

        goto label08;

     label07:
        $z12 = 0;

     label08:
        if $z12 != 0 goto label09;

        if null != $r18 goto label13;

     label09:
        $z3 = r30 instanceof ucar.nc2.Structure;

        if $z3 == 0 goto label10;

        $z5 = r30 instanceof ucar.nc2.dataset.StructureDS;

        if $z5 != 0 goto label10;

        $r21 = new ucar.nc2.dataset.StructureDS;

        $r22 = (ucar.nc2.Structure) r30;

        specialinvoke $r21.<ucar.nc2.dataset.StructureDS: void <init>(ucar.nc2.Group,ucar.nc2.Structure)>(r1, $r22);

        r30 = $r21;

        goto label11;

     label10:
        $z4 = r30 instanceof ucar.nc2.dataset.VariableDS;

        if $z4 != 0 goto label11;

        $r20 = new ucar.nc2.dataset.VariableDS;

        specialinvoke $r20.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.Group,ucar.nc2.Variable,boolean)>(r1, r30, 0);

        r30 = $r20;

     label11:
        if null == $r18 goto label12;

        virtualinvoke r1.<ucar.nc2.Group: boolean remove(ucar.nc2.Variable)>($r18);

     label12:
        virtualinvoke r1.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>(r30);

        virtualinvoke r30.<ucar.nc2.Variable: void resetDimensions()>();

        goto label14;

     label13:
        $z6 = virtualinvoke $r18.<ucar.nc2.Variable: boolean hasCachedData()>();

        if $z6 != 0 goto label14;

        $r23 = interfaceinvoke r19.<ucar.nc2.dataset.VariableEnhanced: ucar.nc2.Variable getOriginalVariable()>();

        if $r23 != null goto label14;

        interfaceinvoke r19.<ucar.nc2.dataset.VariableEnhanced: void setOriginalVariable(ucar.nc2.Variable)>(r30);

     label14:
        goto label06;

     label15:
        $r6 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getGroups()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label18;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r31 = (ucar.nc2.Group) $r8;

        $r9 = virtualinvoke r31.<ucar.nc2.Group: java.lang.String getShortName()>();

        $r10 = virtualinvoke r1.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>($r9);

        r32 = $r10;

        if null != $r10 goto label17;

        $r14 = new ucar.nc2.Group;

        $r15 = virtualinvoke r31.<ucar.nc2.Group: java.lang.String getShortName()>();

        specialinvoke $r14.<ucar.nc2.Group: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String)>(r11, r1, $r15);

        r32 = $r14;

        virtualinvoke r1.<ucar.nc2.Group: void addGroup(ucar.nc2.Group)>($r14);

     label17:
        staticinvoke <ucar.nc2.dataset.DatasetConstructor: void transferGroup(ucar.nc2.NetcdfFile,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,ucar.nc2.Group,ucar.nc2.dataset.ReplaceVariableCheck)>(r11, r12, r31, r32, r13);

        goto label16;

     label18:
        return;
    }

    public static void transferVariableAttributes(ucar.nc2.Variable, ucar.nc2.Variable)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        ucar.nc2.Attribute r4, $r7;
        ucar.nc2.Variable r0, r5;
        java.lang.Object $r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.Variable;

        r5 := @parameter1: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Attribute) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r7 = virtualinvoke r5.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>($r6);

        if null != $r7 goto label2;

        virtualinvoke r5.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>(r4);

     label2:
        goto label1;

     label3:
        return;
    }

    public static void transferGroupAttributes(ucar.nc2.Group, ucar.nc2.Group)
    {
        java.util.Iterator $r2;
        ucar.nc2.Group r0, r5;
        java.util.List $r1;
        ucar.nc2.Attribute r4, $r7;
        java.lang.Object $r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.Group;

        r5 := @parameter1: ucar.nc2.Group;

        $r1 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getAttributes()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Attribute) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r7 = virtualinvoke r5.<ucar.nc2.Group: ucar.nc2.Attribute findAttribute(java.lang.String)>($r6);

        if null != $r7 goto label2;

        virtualinvoke r5.<ucar.nc2.Group: void addAttribute(ucar.nc2.Attribute)>(r4);

     label2:
        goto label1;

     label3:
        return;
    }

    public static ucar.nc2.Group findGroup(ucar.nc2.NetcdfFile, ucar.nc2.Group)
    {
        java.util.Iterator $r4;
        ucar.nc2.Group r1, $r2, r6, $r8, r9, r10;
        java.util.ArrayList $r0;
        java.lang.Object $r5;
        ucar.nc2.NetcdfFile r3;
        java.lang.String $r7;
        boolean $z0;

        r3 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: ucar.nc2.Group;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(5);

        r9 = r1;

     label1:
        $r2 = virtualinvoke r9.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        if $r2 == null goto label2;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r9);

        r9 = virtualinvoke r9.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        goto label1;

     label2:
        r10 = virtualinvoke r3.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.Group) $r5;

        $r7 = virtualinvoke r6.<ucar.nc2.Group: java.lang.String getShortName()>();

        $r8 = virtualinvoke r10.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>($r7);

        r10 = $r8;

        if $r8 != null goto label4;

        return null;

     label4:
        goto label3;

     label5:
        return r10;
    }

    public static ucar.nc2.Dimension getBoundsDimension(ucar.nc2.NetcdfFile)
    {
        ucar.nc2.Dimension $r2, $r3, r4;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group $r1;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r2 = virtualinvoke $r1.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>("bounds_dim");

        r4 = $r2;

        if $r2 != null goto label1;

        $r3 = new ucar.nc2.Dimension;

        specialinvoke $r3.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean)>("bounds_dim", 2, 1);

        r4 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>($r1, $r3);

     label1:
        return r4;
    }

    public static void <clinit>()
    {
        <ucar.nc2.dataset.DatasetConstructor: java.lang.String boundsDimName> = "bounds_dim";

        return;
    }
}
