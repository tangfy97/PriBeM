public final class org.codehaus.jackson.map.type.SimpleType extends org.codehaus.jackson.map.type.TypeBase
{
    protected final org.codehaus.jackson.type.JavaType[] _typeParameters;
    protected final java.lang.String[] _typeNames;

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>(r1, null, null, null, null);

        return;
    }

    protected void <init>(java.lang.Class, java.lang.String[], org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        java.lang.Class r1;
        java.lang.String[] r2;
        org.codehaus.jackson.type.JavaType[] r3;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: org.codehaus.jackson.type.JavaType[];

        specialinvoke r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>(r1, r2, r3, null, null);

        return;
    }

    protected void <init>(java.lang.Class, java.lang.String[], org.codehaus.jackson.type.JavaType[], java.lang.Object, java.lang.Object)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int $i0;
        java.lang.Class r1;
        java.lang.Object r2, r3;
        java.lang.String[] r4;
        org.codehaus.jackson.type.JavaType[] r5;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.String[];

        r5 := @parameter2: org.codehaus.jackson.type.JavaType[];

        r2 := @parameter3: java.lang.Object;

        r3 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.map.type.TypeBase: void <init>(java.lang.Class,int,java.lang.Object,java.lang.Object)>(r1, 0, r2, r3);

        if r4 == null goto label1;

        $i0 = lengthof r4;

        if $i0 != 0 goto label2;

     label1:
        r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames> = null;

        r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters> = null;

        goto label3;

     label2:
        r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames> = r4;

        r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters> = r5;

     label3:
        return;
    }

    public static org.codehaus.jackson.map.type.SimpleType constructUnsafe(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.type.SimpleType $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>(r1, null, null, null, null);

        return $r0;
    }

    protected org.codehaus.jackson.type.JavaType _narrow(java.lang.Class)
    {
        org.codehaus.jackson.map.type.SimpleType $r0, r2;
        java.lang.Class r1;
        java.lang.Object $r3, $r4;
        java.lang.String[] $r6;
        org.codehaus.jackson.type.JavaType[] $r5;

        r2 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.codehaus.jackson.map.type.SimpleType;

        $r6 = r2.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $r5 = r2.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $r4 = r2.<org.codehaus.jackson.map.type.SimpleType: java.lang.Object _valueHandler>;

        $r3 = r2.<org.codehaus.jackson.map.type.SimpleType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>(r1, $r6, $r5, $r4, $r3);

        return $r0;
    }

    public org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.IllegalArgumentException $r0;
        org.codehaus.jackson.map.type.SimpleType r1;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: SimpleType.narrowContentsBy() should never be called");

        throw $r0;
    }

    public org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.IllegalArgumentException $r0;
        org.codehaus.jackson.map.type.SimpleType r1;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: SimpleType.widenContentsBy() should never be called");

        throw $r0;
    }

    public static org.codehaus.jackson.map.type.SimpleType construct(java.lang.Class)
    {
        org.codehaus.jackson.map.type.SimpleType $r3;
        java.lang.String $r7, $r10, $r14, $r17, $r21, $r24;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4, $r11, $r18;
        java.lang.Class r0, $r1, $r2;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16, $r19, $r20, $r22, $r23;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct SimpleType for a Map (class: ");

        $r21 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label1:
        $r2 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct SimpleType for a Collection (class: ");

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label2:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct SimpleType for an array (class: ");

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        $r3 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r3.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(r0);

        return $r3;
    }

    public org.codehaus.jackson.map.type.SimpleType withTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.SimpleType $r0, r1;
        java.lang.Object r2, $r3;
        java.lang.String[] $r5;
        java.lang.Class $r6;
        org.codehaus.jackson.type.JavaType[] $r4;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.SimpleType;

        $r6 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $r4 = r1.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $r3 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Object _valueHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>($r6, $r5, $r4, $r3, r2);

        return $r0;
    }

    public org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.IllegalArgumentException $r0;
        org.codehaus.jackson.map.type.SimpleType r1;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Simple types have no content types; can not call withContenTypeHandler()");

        throw $r0;
    }

    public org.codehaus.jackson.map.type.SimpleType withValueHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.SimpleType r1, $r3;
        java.lang.String[] $r6;
        org.codehaus.jackson.type.JavaType[] $r5;
        java.lang.Object r0, $r2, $r4;
        java.lang.Class $r7;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Object _valueHandler>;

        if r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.codehaus.jackson.map.type.SimpleType;

        $r7 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        $r6 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $r5 = r1.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $r4 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Object _typeHandler>;

        specialinvoke $r3.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[],java.lang.Object,java.lang.Object)>($r7, $r6, $r5, r0, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.type.SimpleType withContentValueHandler(java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.IllegalArgumentException $r0;
        org.codehaus.jackson.map.type.SimpleType r1;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Simple types have no content types; can not call withContenValueHandler()");

        throw $r0;
    }

    protected java.lang.String buildCanonicalName()
    {
        org.codehaus.jackson.map.type.SimpleType r1;
        org.codehaus.jackson.type.JavaType[] $r4, $r5, r6;
        int $i0, i1, i2;
        org.codehaus.jackson.type.JavaType r7;
        java.lang.StringBuilder $r0;
        java.lang.Class $r2;
        java.lang.String $r3, $r8, $r9;
        boolean z0;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = r1.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r4 == null goto label5;

        $r5 = r1.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $i0 = lengthof $r5;

        if $i0 <= 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        z0 = 1;

        r6 = r1.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        i1 = lengthof r6;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r7 = r6[i2];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r8 = virtualinvoke r7.<org.codehaus.jackson.type.JavaType: java.lang.String toCanonical()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

     label5:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public boolean isContainerType()
    {
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        return 0;
    }

    public int containedTypeCount()
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int $i0;
        org.codehaus.jackson.type.JavaType[] $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public org.codehaus.jackson.type.JavaType containedType(int)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int i0, $i1;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.type.JavaType[] $r1, $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $r4 = $r3[i0];

        return $r4;
    }

    public java.lang.String containedTypeName(int)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int i0, $i1;
        java.lang.String[] $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $r4 = $r3[i0];

        return $r4;
    }

    public java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        java.lang.StringBuilder r1, $r3;
        java.lang.Class $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.SimpleType: java.lang.StringBuilder _classSignature(java.lang.Class,java.lang.StringBuilder,boolean)>($r2, r1, 1);

        return $r3;
    }

    public java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        org.codehaus.jackson.type.JavaType[] $r2, r3;
        int i0, i1;
        org.codehaus.jackson.type.JavaType r4;
        java.lang.Class $r1;
        java.lang.StringBuilder r5;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r5 := @parameter0: java.lang.StringBuilder;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        staticinvoke <org.codehaus.jackson.map.type.SimpleType: java.lang.StringBuilder _classSignature(java.lang.Class,java.lang.StringBuilder,boolean)>($r1, r5, 0);

        $r2 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r2 == null goto label3;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        r3 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        r5 = virtualinvoke r4.<org.codehaus.jackson.type.JavaType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>(r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

     label3:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        return r5;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.type.SimpleType r2;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r3, $r5;

        r2 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(40);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[simple type, class ");

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.type.SimpleType: java.lang.String buildCanonicalName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.map.type.SimpleType r1, r4;
        int $i0, $i1, i2, $i3, i4;
        org.codehaus.jackson.type.JavaType $r9, $r10;
        boolean $z0, $z1;
        org.codehaus.jackson.type.JavaType[] r7, r8;
        java.lang.Object r0;
        java.lang.Class $r2, $r3, $r5, $r6;

        r1 := @this: org.codehaus.jackson.map.type.SimpleType;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r0 != null goto label02;

        return 0;

     label02:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label03;

        return 0;

     label03:
        r4 = (org.codehaus.jackson.map.type.SimpleType) r0;

        $r6 = r4.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.SimpleType: java.lang.Class _class>;

        if $r6 == $r5 goto label04;

        return 0;

     label04:
        r7 = r1.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        r8 = r4.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if r7 != null goto label08;

        if r8 == null goto label05;

        $i3 = lengthof r8;

        if $i3 != 0 goto label06;

     label05:
        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        return $z1;

     label08:
        if r8 != null goto label09;

        return 0;

     label09:
        $i1 = lengthof r7;

        $i0 = lengthof r8;

        if $i1 == $i0 goto label10;

        return 0;

     label10:
        i4 = 0;

        i2 = lengthof r7;

     label11:
        if i4 >= i2 goto label13;

        $r10 = r7[i4];

        $r9 = r8[i4];

        $z0 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label12;

        return 0;

     label12:
        i4 = i4 + 1;

        goto label11;

     label13:
        return 1;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.SimpleType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType withContentValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.SimpleType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType withValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.SimpleType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType withTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }
}
