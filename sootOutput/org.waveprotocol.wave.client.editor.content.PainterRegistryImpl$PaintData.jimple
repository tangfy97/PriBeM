class org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData extends java.lang.Object
{
    private final java.util.Set boundaryFuncs;
    private final java.util.Set paintFuncs;
    private final org.waveprotocol.wave.model.util.StringSet keys;

    private void <init>()
    {
        java.util.HashSet $r1, $r2;
        org.waveprotocol.wave.model.util.StringSet $r3;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set boundaryFuncs> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set paintFuncs> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet keys> = $r3;

        return;
    }

    static org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet keys>;

        return $r1;
    }

    static java.util.Set access$100(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)
    {
        java.util.Set $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set paintFuncs>;

        return $r1;
    }

    static java.util.Set access$200(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)
    {
        java.util.Set $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set boundaryFuncs>;

        return $r1;
    }

    void <init>(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1)
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: void <init>()>();

        return;
    }
}
