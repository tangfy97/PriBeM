public class org.apache.commons.io.FileCleaningTracker extends java.lang.Object
{
    java.lang.ref.ReferenceQueue q;
    final java.util.Collection trackers;
    final java.util.List deleteFailures;
    volatile boolean exitWhenFinished;
    java.lang.Thread reaper;

    public void <init>()
    {
        java.util.HashSet $r2;
        org.apache.commons.io.FileCleaningTracker r0;
        java.util.List $r5;
        java.util.Set $r3;
        java.lang.ref.ReferenceQueue $r1;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.commons.io.FileCleaningTracker: java.lang.ref.ReferenceQueue q> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r2);

        r0.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r4);

        r0.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures> = $r5;

        r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> = 0;

        return;
    }

    public void track(java.io.File, java.lang.Object)
    {
        org.apache.commons.io.FileCleaningTracker r0;
        java.lang.Object r2;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r1, r2, null);

        return;
    }

    public void track(java.io.File, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
    {
        org.apache.commons.io.FileCleaningTracker r1;
        org.apache.commons.io.FileDeleteStrategy r4;
        java.lang.Object r3;
        java.lang.String $r2;
        java.io.File r0;
        java.lang.NullPointerException $r5;

        r1 := @this: org.apache.commons.io.FileCleaningTracker;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.apache.commons.io.FileDeleteStrategy;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("The file must not be null");

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        specialinvoke r1.<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>($r2, r3, r4);

        return;
    }

    public void track(java.lang.String, java.lang.Object)
    {
        org.apache.commons.io.FileCleaningTracker r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r1, r2, null);

        return;
    }

    public void track(java.lang.String, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
    {
        org.apache.commons.io.FileCleaningTracker r1;
        org.apache.commons.io.FileDeleteStrategy r3;
        java.lang.Object r2;
        java.lang.String r0;
        java.lang.NullPointerException $r4;

        r1 := @this: org.apache.commons.io.FileCleaningTracker;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.commons.io.FileDeleteStrategy;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("The path must not be null");

        throw $r4;

     label1:
        specialinvoke r1.<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r0, r2, r3);

        return;
    }

    private synchronized void addTracker(java.lang.String, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
    {
        org.apache.commons.io.FileCleaningTracker r0;
        java.lang.IllegalStateException $r10;
        java.util.Collection $r7;
        org.apache.commons.io.FileDeleteStrategy r4;
        java.lang.ref.ReferenceQueue $r6;
        org.apache.commons.io.FileCleaningTracker$Tracker $r2;
        org.apache.commons.io.FileCleaningTracker$Reaper $r8;
        java.lang.Thread $r1, $r9;
        java.lang.Object r5;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.apache.commons.io.FileDeleteStrategy;

        $z0 = r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No new trackers can be added once exitWhenFinished() is called");

        throw $r10;

     label1:
        $r1 = r0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        if $r1 != null goto label2;

        $r8 = new org.apache.commons.io.FileCleaningTracker$Reaper;

        specialinvoke $r8.<org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)>(r0);

        r0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper> = $r8;

        $r9 = r0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        virtualinvoke $r9.<java.lang.Thread: void start()>();

     label2:
        $r7 = r0.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers>;

        $r2 = new org.apache.commons.io.FileCleaningTracker$Tracker;

        $r6 = r0.<org.apache.commons.io.FileCleaningTracker: java.lang.ref.ReferenceQueue q>;

        specialinvoke $r2.<org.apache.commons.io.FileCleaningTracker$Tracker: void <init>(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)>(r3, r4, r5, $r6);

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        return;
    }

    public int getTrackCount()
    {
        int $i0;
        org.apache.commons.io.FileCleaningTracker r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        $r1 = r0.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers>;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public java.util.List getDeleteFailures()
    {
        org.apache.commons.io.FileCleaningTracker r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        $r1 = r0.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures>;

        return $r1;
    }

    public synchronized void exitWhenFinished()
    {
        java.lang.Throwable $r4;
        org.apache.commons.io.FileCleaningTracker r0;
        java.lang.Thread $r1, $r2, $r3;

        r0 := @this: org.apache.commons.io.FileCleaningTracker;

        r0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> = 1;

        $r1 = r0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        if $r1 == null goto label5;

        $r2 = r0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        entermonitor $r2;

     label1:
        $r3 = r0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
