public final class org.apache.lucene.search.FieldComparator$DoubleComparator extends org.apache.lucene.search.FieldComparator$NumericComparator
{
    private final double[] values;
    private final org.apache.lucene.search.FieldCache$DoubleParser parser;
    private org.apache.lucene.search.FieldCache$Doubles currentReaderValues;
    private double bottom;

    void <init>(int, java.lang.String, org.apache.lucene.search.FieldCache$Parser, java.lang.Double)
    {
        org.apache.lucene.search.FieldCache$DoubleParser $r5;
        java.lang.Double r2;
        int i0;
        double[] $r3;
        java.lang.String r1;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        org.apache.lucene.search.FieldCache$Parser r4;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: org.apache.lucene.search.FieldCache$Parser;

        r2 := @parameter3: java.lang.Double;

        specialinvoke r0.<org.apache.lucene.search.FieldComparator$NumericComparator: void <init>(java.lang.String,java.lang.Number)>(r1, r2);

        $r3 = newarray (double)[i0];

        r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double[] values> = $r3;

        $r5 = (org.apache.lucene.search.FieldCache$DoubleParser) r4;

        r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.search.FieldCache$DoubleParser parser> = $r5;

        return;
    }

    public int compare(int, int)
    {
        double[] $r1, $r2;
        int i0, i1, $i2;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        double $d0, $d1;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double[] values>;

        $d1 = $r1[i0];

        $r2 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double[] values>;

        $d0 = $r2[i1];

        $i2 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i2;
    }

    public int compareBottom(int)
    {
        java.lang.Double $r5;
        org.apache.lucene.search.FieldCache$Doubles $r1;
        byte $b1;
        int i0, $i2;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        java.lang.Number $r4;
        org.apache.lucene.util.Bits $r2, $r3;
        double $d0, d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.search.FieldCache$Doubles currentReaderValues>;

        $d0 = virtualinvoke $r1.<org.apache.lucene.search.FieldCache$Doubles: double get(int)>(i0);

        d1 = $d0;

        $r2 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.util.Bits docsWithField>;

        if $r2 == null goto label1;

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.util.Bits docsWithField>;

        $z0 = interfaceinvoke $r3.<org.apache.lucene.util.Bits: boolean get(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: java.lang.Number missingValue>;

        $r5 = (java.lang.Double) $r4;

        d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

     label1:
        $d2 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double bottom>;

        $i2 = staticinvoke <java.lang.Double: int compare(double,double)>($d2, d1);

        return $i2;
    }

    public void copy(int, int)
    {
        java.lang.Double $r5;
        double[] $r6;
        org.apache.lucene.search.FieldCache$Doubles $r1;
        byte $b2;
        int i0, i1;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        java.lang.Number $r4;
        org.apache.lucene.util.Bits $r2, $r3;
        double $d0, d1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.search.FieldCache$Doubles currentReaderValues>;

        $d0 = virtualinvoke $r1.<org.apache.lucene.search.FieldCache$Doubles: double get(int)>(i0);

        d1 = $d0;

        $r2 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.util.Bits docsWithField>;

        if $r2 == null goto label1;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.util.Bits docsWithField>;

        $z0 = interfaceinvoke $r3.<org.apache.lucene.util.Bits: boolean get(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: java.lang.Number missingValue>;

        $r5 = (java.lang.Double) $r4;

        d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

     label1:
        $r6 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double[] values>;

        $r6[i1] = d1;

        return;
    }

    public org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCache $r2;
        org.apache.lucene.search.FieldComparator $r8;
        org.apache.lucene.search.FieldCache$DoubleParser $r5;
        org.apache.lucene.search.FieldCache$Doubles $r7;
        java.lang.String $r6;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        java.lang.Number $r4;
        org.apache.lucene.index.AtomicReaderContext r1;
        org.apache.lucene.index.AtomicReader $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        r1 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        $r2 = <org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache DEFAULT>;

        $r3 = virtualinvoke r1.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r6 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: java.lang.String field>;

        $r5 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.search.FieldCache$DoubleParser parser>;

        $r4 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: java.lang.Number missingValue>;

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r7 = interfaceinvoke $r2.<org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache$Doubles getDoubles(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$DoubleParser,boolean)>($r3, $r6, $r5, $z0);

        r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.search.FieldCache$Doubles currentReaderValues> = $r7;

        $r8 = specialinvoke r0.<org.apache.lucene.search.FieldComparator$NumericComparator: org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext)>(r1);

        return $r8;
    }

    public void setBottom(int)
    {
        int i0;
        double[] $r1;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        double $d0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double[] values>;

        $d0 = $r1[i0];

        r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double bottom> = $d0;

        return;
    }

    public java.lang.Double value(int)
    {
        java.lang.Double $r2;
        int i0;
        double[] $r1;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        double $d0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: double[] values>;

        $d0 = $r1[i0];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;
    }

    public int compareDocToValue(int, java.lang.Double)
    {
        java.lang.Double r0, $r6;
        org.apache.lucene.search.FieldCache$Doubles $r2;
        byte $b1;
        int i0, $i2;
        org.apache.lucene.search.FieldComparator$DoubleComparator r1;
        java.lang.Number $r5;
        org.apache.lucene.util.Bits $r3, $r4;
        double $d0, $d1, d2;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $r2 = r1.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.search.FieldCache$Doubles currentReaderValues>;

        $d1 = virtualinvoke $r2.<org.apache.lucene.search.FieldCache$Doubles: double get(int)>(i0);

        d2 = $d1;

        $r3 = r1.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.util.Bits docsWithField>;

        if $r3 == null goto label1;

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label1;

        $r4 = r1.<org.apache.lucene.search.FieldComparator$DoubleComparator: org.apache.lucene.util.Bits docsWithField>;

        $z0 = interfaceinvoke $r4.<org.apache.lucene.util.Bits: boolean get(int)>(i0);

        if $z0 != 0 goto label1;

        $r5 = r1.<org.apache.lucene.search.FieldComparator$DoubleComparator: java.lang.Number missingValue>;

        $r6 = (java.lang.Double) $r5;

        d2 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

     label1:
        $i2 = staticinvoke <java.lang.Double: int compare(double,double)>(d2, $d0);

        return $i2;
    }

    public volatile int compareDocToValue(int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Double $r2;
        int i0, $i1;
        java.lang.Object r1;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $i1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: int compareDocToValue(int,java.lang.Double)>(i0, $r2);

        return $i1;
    }

    public volatile java.lang.Object value(int)
    {
        int i0;
        org.apache.lucene.search.FieldComparator$DoubleComparator r0;
        java.lang.Double $r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$DoubleComparator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$DoubleComparator: java.lang.Double value(int)>(i0);

        return $r1;
    }
}
