public class org.apache.lucene.util.MapOfSets extends java.lang.Object
{
    private final java.util.Map theMap;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.util.MapOfSets r0;
        java.util.Map r1;

        r0 := @this: org.apache.lucene.util.MapOfSets;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap> = r1;

        return;
    }

    public java.util.Map getMap()
    {
        org.apache.lucene.util.MapOfSets r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.util.MapOfSets;

        $r1 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        return $r1;
    }

    public int put(java.lang.Object, java.lang.Object)
    {
        java.util.Set r8;
        java.util.HashSet $r3;
        org.apache.lucene.util.MapOfSets r0;
        java.util.Map $r2, $r4, $r6;
        int $i0;
        java.lang.Object r1, r5, $r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.MapOfSets;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.Set) $r7;

        goto label2;

     label1:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(int)>(23);

        r8 = $r3;

        $r4 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r5);

        $i0 = interfaceinvoke r8.<java.util.Set: int size()>();

        return $i0;
    }

    public int putAll(java.lang.Object, java.util.Collection)
    {
        java.util.Collection r5;
        java.util.Set r8;
        java.util.HashSet $r3;
        org.apache.lucene.util.MapOfSets r0;
        java.util.Map $r2, $r4, $r6;
        int $i0;
        java.lang.Object r1, $r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.MapOfSets;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.util.Collection;

        $r2 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.Set) $r7;

        goto label2;

     label1:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(int)>(23);

        r8 = $r3;

        $r4 = r0.<org.apache.lucene.util.MapOfSets: java.util.Map theMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        interfaceinvoke r8.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

        $i0 = interfaceinvoke r8.<java.util.Set: int size()>();

        return $i0;
    }
}
