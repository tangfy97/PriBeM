class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder extends java.lang.Object
{
    private boolean isExpecting;
    private org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet w;

    void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void expect()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: boolean isExpecting> = 1;

        return;
    }

    boolean isExpecting()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: boolean isExpecting>;

        return $z0;
    }

    void push(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet w> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: boolean isExpecting> = 0;

        return;
    }

    org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet pop()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet w>;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet w> = null;

        return r1;
    }
}
