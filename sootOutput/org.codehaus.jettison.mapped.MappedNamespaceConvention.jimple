public class org.codehaus.jettison.mapped.MappedNamespaceConvention extends java.lang.Object implements org.codehaus.jettison.Convention, javax.xml.namespace.NamespaceContext
{
    private java.util.Map xnsToJns;
    private java.util.Map jnsToXns;
    private java.util.List attributesAsElements;
    private java.util.List jsonAttributesAsElements;
    private boolean supressAtAttributes;
    private boolean ignoreNamespaces;
    private java.lang.String attributeKey;
    private org.codehaus.jettison.mapped.TypeConverter typeConverter;

    public void <init>()
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        org.codehaus.jettison.mapped.TypeConverter $r3;
        java.util.HashMap $r1, $r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map xnsToJns> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map jnsToXns> = $r2;

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String attributeKey> = "@";

        $r3 = staticinvoke <org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter newDefaultConverterInstance()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: org.codehaus.jettison.mapped.TypeConverter typeConverter> = $r3;

        return;
    }

    public void <init>(org.codehaus.jettison.mapped.Configuration)
    {
        java.util.HashMap $r1, $r2;
        org.codehaus.jettison.mapped.Configuration r3;
        java.util.ArrayList $r10;
        java.util.Map $r4, $r7, $r22;
        org.codehaus.jettison.mapped.TypeConverter $r12;
        java.lang.String $r6, $r17, $r18, $r19, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r25;
        java.util.Iterator $r9, $r14;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        java.util.Set $r8;
        java.util.List $r5, $r11, $r13, $r16;
        java.lang.Object $r15, $r21, $r23, $r24;
        javax.xml.namespace.QName r26;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r3 := @parameter0: org.codehaus.jettison.mapped.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map xnsToJns> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map jnsToXns> = $r2;

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String attributeKey> = "@";

        $r4 = virtualinvoke r3.<org.codehaus.jettison.mapped.Configuration: java.util.Map getXmlToJsonNamespaces()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map xnsToJns> = $r4;

        $r5 = virtualinvoke r3.<org.codehaus.jettison.mapped.Configuration: java.util.List getAttributesAsElements()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List attributesAsElements> = $r5;

        $z0 = virtualinvoke r3.<org.codehaus.jettison.mapped.Configuration: boolean isSupressAtAttributes()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean supressAtAttributes> = $z0;

        $z1 = virtualinvoke r3.<org.codehaus.jettison.mapped.Configuration: boolean isIgnoreNamespaces()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean ignoreNamespaces> = $z1;

        $r6 = virtualinvoke r3.<org.codehaus.jettison.mapped.Configuration: java.lang.String getAttributeKey()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String attributeKey> = $r6;

        $r7 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map xnsToJns>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r21 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r21;

        $r22 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map jnsToXns>;

        $r23 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24);

        goto label1;

     label2:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List jsonAttributesAsElements> = $r10;

        $r11 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List attributesAsElements>;

        if $r11 == null goto label4;

        $r13 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List attributesAsElements>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r26 = (javax.xml.namespace.QName) $r15;

        $r16 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List jsonAttributesAsElements>;

        $r17 = virtualinvoke r26.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r18 = virtualinvoke r26.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r19 = virtualinvoke r26.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r20 = virtualinvoke r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String createAttributeKey(java.lang.String,java.lang.String,java.lang.String)>($r17, $r18, $r19);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label3;

     label4:
        $r12 = virtualinvoke r3.<org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter getTypeConverter()>();

        r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: org.codehaus.jettison.mapped.TypeConverter typeConverter> = $r12;

        return;
    }

    public void processAttributesAndNamespaces(org.codehaus.jettison.Node, org.codehaus.jettison.json.JSONObject) throws org.codehaus.jettison.json.JSONException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r3;
        java.util.List $r15, $r16, $r17;
        javax.xml.namespace.QName r24, $r26;
        org.codehaus.jettison.Node r6;
        java.util.ArrayList $r25;
        int $i0, $i2;
        java.lang.String $r4, $r5, $r8, r12, $r13, $r14, r19, $r20, $r22, r23;
        java.util.Iterator $r1, $r10;
        org.codehaus.jettison.json.JSONObject r0, r21;
        java.lang.Object $r2, $r7, $r11;

        r3 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r6 := @parameter0: org.codehaus.jettison.Node;

        r0 := @parameter1: org.codehaus.jettison.json.JSONObject;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r2;

        $z1 = r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean supressAtAttributes>;

        if $z1 == 0 goto label04;

        $r14 = r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String attributeKey>;

        $z6 = virtualinvoke r19.<java.lang.String: boolean startsWith(java.lang.String)>($r14);

        if $z6 == 0 goto label02;

        r19 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int)>(1);

     label02:
        $r15 = r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List jsonAttributesAsElements>;

        if null != $r15 goto label03;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List jsonAttributesAsElements> = $r25;

     label03:
        $r16 = r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List jsonAttributesAsElements>;

        $z7 = interfaceinvoke $r16.<java.util.List: boolean contains(java.lang.Object)>(r19);

        if $z7 != 0 goto label04;

        $r17 = r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List jsonAttributesAsElements>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r19);

     label04:
        $r20 = r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String attributeKey>;

        $z8 = virtualinvoke r19.<java.lang.String: boolean startsWith(java.lang.String)>($r20);

        if $z8 == 0 goto label13;

        $r7 = virtualinvoke r0.<org.codehaus.jettison.json.JSONObject: java.lang.Object opt(java.lang.String)>(r19);

        $r8 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int)>(1);

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z2 == 0 goto label07;

        $z4 = $r7 instanceof org.codehaus.jettison.json.JSONObject;

        if $z4 == 0 goto label12;

        r21 = (org.codehaus.jettison.json.JSONObject) $r7;

        $r10 = virtualinvoke r21.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

     label05:
        $z5 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r21.<org.codehaus.jettison.json.JSONObject: java.lang.String getString(java.lang.String)>(r12);

        virtualinvoke r6.<org.codehaus.jettison.Node: void setNamespace(java.lang.String,java.lang.String)>(r12, $r13);

        goto label05;

     label06:
        goto label12;

     label07:
        if $r7 != null goto label08;

        $r22 = null;

        goto label09;

     label08:
        $r22 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

     label09:
        r23 = $r22;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z3 == 0 goto label10;

        r24 = virtualinvoke r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: javax.xml.namespace.QName createQName(java.lang.String,org.codehaus.jettison.Node)>($r8, r6);

        goto label11;

     label10:
        $r26 = new javax.xml.namespace.QName;

        specialinvoke $r26.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("", $r8);

        r24 = $r26;

     label11:
        virtualinvoke r6.<org.codehaus.jettison.Node: void setAttribute(javax.xml.namespace.QName,java.lang.String)>(r24, r23);

     label12:
        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        goto label14;

     label13:
        $i0 = virtualinvoke r19.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label14;

        $r4 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = virtualinvoke r3.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String getNamespaceURI(java.lang.String)>($r4);

        virtualinvoke r6.<org.codehaus.jettison.Node: void setNamespace(java.lang.String,java.lang.String)>("", $r5);

     label14:
        goto label01;

     label15:
        return;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        java.util.Map $r2;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        java.lang.Object $r3;
        java.lang.String r1, $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean ignoreNamespaces>;

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r2 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map jnsToXns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getPrefix(java.lang.String)
    {
        java.util.Map $r2;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        java.lang.Object $r3;
        java.lang.String r1, $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean ignoreNamespaces>;

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r2 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map xnsToJns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.util.Iterator getPrefixes(java.lang.String)
    {
        java.util.Iterator $r3, $r5;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        java.util.Set $r2, $r4;
        java.util.Map $r1;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r6 := @parameter0: java.lang.String;

        $z0 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean ignoreNamespaces>;

        if $z0 == 0 goto label1;

        $r4 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        return $r5;

     label1:
        $r1 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map jnsToXns>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public javax.xml.namespace.QName createQName(java.lang.String, org.codehaus.jettison.Node)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        org.codehaus.jettison.Node r3;
        java.lang.String r1;
        javax.xml.namespace.QName $r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.codehaus.jettison.Node;

        $r2 = specialinvoke r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: javax.xml.namespace.QName createQName(java.lang.String)>(r1);

        return $r2;
    }

    private void readAttribute(org.codehaus.jettison.Node, java.lang.String, org.codehaus.jettison.json.JSONArray) throws org.codehaus.jettison.json.JSONException
    {
        int $i0, i1;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r1;
        org.codehaus.jettison.Node r2;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.String r3, $r4;

        r1 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r2 := @parameter0: org.codehaus.jettison.Node;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: org.codehaus.jettison.json.JSONArray;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if i1 >= $i0 goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.String getString(int)>(i1);

        specialinvoke r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: void readAttribute(org.codehaus.jettison.Node,java.lang.String,java.lang.String)>(r2, r3, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void readAttribute(org.codehaus.jettison.Node, java.lang.String, java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        java.util.Map $r4;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        org.codehaus.jettison.Node r3;
        java.lang.String r1, r5;
        javax.xml.namespace.QName $r2;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r3 := @parameter0: org.codehaus.jettison.Node;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: javax.xml.namespace.QName createQName(java.lang.String)>(r1);

        $r4 = virtualinvoke r3.<org.codehaus.jettison.Node: java.util.Map getAttributes()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r5);

        return;
    }

    private javax.xml.namespace.QName createQName(java.lang.String)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r2;
        int $i0, $i1, i2, $i4;
        java.lang.String r0, $r1, $r3, r6;
        javax.xml.namespace.QName r7, $r8, $r9;

        r2 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        i2 = $i0;

        r6 = r0;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        i2 = 0;

        goto label2;

     label1:
        $i1 = $i0 + 1;

        r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r3 = virtualinvoke r2.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String getNamespaceURI(java.lang.String)>($r1);

        if $r3 != null goto label3;

        $r8 = new javax.xml.namespace.QName;

        specialinvoke $r8.<javax.xml.namespace.QName: void <init>(java.lang.String)>(r0);

        r7 = $r8;

        goto label4;

     label3:
        $r9 = new javax.xml.namespace.QName;

        specialinvoke $r9.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r3, r6);

        r7 = $r9;

     label4:
        return r7;
    }

    public java.lang.String createAttributeKey(java.lang.String, java.lang.String, java.lang.String)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r1;
        java.lang.StringBuffer $r0, $r5, $r8;
        int $i0;
        java.lang.String r2, $r3, r4, $r6, r7, $r9;
        boolean $z0;

        r1 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r7 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $z0 = r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean supressAtAttributes>;

        if $z0 != 0 goto label1;

        $r6 = r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String attributeKey>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label1:
        $r3 = specialinvoke r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String getJSONNamespace(java.lang.String)>(r2);

        if $r3 == null goto label2;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label2:
        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String getJSONNamespace(java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r1;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, r4, $r9;
        boolean $z0;

        r1 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z0 = r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: boolean ignoreNamespaces>;

        if $z0 == 0 goto label2;

     label1:
        return "";

     label2:
        $r2 = r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.Map xnsToJns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label3;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid JSON namespace: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        return r4;
    }

    public java.lang.String createKey(java.lang.String, java.lang.String, java.lang.String)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r1;
        java.lang.StringBuffer $r0, $r5, $r7;
        int $i0;
        java.lang.String r2, $r3, r4, r6, $r8;

        r1 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r6 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r3 = specialinvoke r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String getJSONNamespace(java.lang.String)>(r2);

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label1:
        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public boolean isElement(java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r3;
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        java.util.List $r1, $r2;
        java.lang.Object $r4;
        javax.xml.namespace.QName r5;
        java.lang.String $r6, r7, $r8, r9, r10;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r10 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $r1 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List attributesAsElements>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.util.List attributesAsElements>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.xml.namespace.QName) $r4;

        $r6 = virtualinvoke r5.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r5.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public java.lang.Object convertToJSONPrimitive(java.lang.String)
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        org.codehaus.jettison.mapped.TypeConverter $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: org.codehaus.jettison.mapped.TypeConverter typeConverter>;

        $r3 = interfaceinvoke $r2.<org.codehaus.jettison.mapped.TypeConverter: java.lang.Object convertToJSONPrimitive(java.lang.String)>(r1);

        return $r3;
    }
}
