public class com.ctc.wstx.dom.DOMWrappingReader extends java.lang.Object implements org.codehaus.stax2.XMLStreamReader2, org.codehaus.stax2.DTDInfo, org.codehaus.stax2.LocationInfo, javax.xml.namespace.NamespaceContext, javax.xml.stream.XMLStreamConstants
{
    private static final int MASK_GET_TEXT;
    private static final int MASK_GET_ELEMENT_TEXT;
    protected final com.ctc.wstx.api.ReaderConfig mConfig;
    protected final java.lang.String mSystemId;
    protected final org.w3c.dom.Node mRootNode;
    protected final boolean mNsAware;
    protected final boolean mCoalescing;
    protected int mCurrEvent;
    protected org.w3c.dom.Node mCurrNode;
    protected int mDepth;
    protected java.lang.String mCoalescedText;
    protected com.ctc.wstx.util.TextAccumulator mTextBuffer;
    protected java.util.List mAttrList;
    protected java.util.List mNsDeclList;

    private void <init>(com.ctc.wstx.api.ReaderConfig, org.w3c.dom.Node, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.api.ReaderConfig r3;
        short $s0;
        java.lang.StringBuffer $r7, $r9, $r14;
        org.w3c.dom.Node r2;
        javax.xml.stream.XMLStreamException $r15;
        int $i1;
        java.lang.String r4, $r10;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r13;
        com.ctc.wstx.util.TextAccumulator $r12;
        java.lang.Class $r8;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r3 := @parameter0: com.ctc.wstx.api.ReaderConfig;

        r2 := @parameter1: org.w3c.dom.Node;

        r4 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 7;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mDepth> = 0;

        $r12 = new com.ctc.wstx.util.TextAccumulator;

        specialinvoke $r12.<com.ctc.wstx.util.TextAccumulator: void <init>()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.util.TextAccumulator mTextBuffer> = $r12;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList> = null;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList> = null;

        if r2 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not pass null Node for constructing a DOM-based XMLStreamReader");

        throw $r13;

     label1:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.api.ReaderConfig mConfig> = r3;

        $z0 = virtualinvoke r3.<com.ctc.wstx.api.ReaderConfig: boolean willSupportNamespaces()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mNsAware> = $z0;

        $z1 = virtualinvoke r3.<com.ctc.wstx.api.ReaderConfig: boolean willCoalesceText()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mCoalescing> = $z1;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String mSystemId> = r4;

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 9: goto label2;
            case 11: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r15 = new javax.xml.stream.XMLStreamException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not create an XMLStreamReader for a DOM node of type ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r10);

        throw $r15;

     label4:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode> = r2;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mRootNode> = r2;

        return;
    }

    public static com.ctc.wstx.dom.DOMWrappingReader createFrom(com.ctc.wstx.api.ReaderConfig, javax.xml.transform.dom.DOMSource) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.transform.dom.DOMSource r0;
        org.w3c.dom.Node $r1;
        java.lang.String $r2;
        com.ctc.wstx.dom.DOMWrappingReader $r3;
        com.ctc.wstx.api.ReaderConfig r4;

        r4 := @parameter0: com.ctc.wstx.api.ReaderConfig;

        r0 := @parameter1: javax.xml.transform.dom.DOMSource;

        $r1 = virtualinvoke r0.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        $r2 = virtualinvoke r0.<javax.xml.transform.dom.DOMSource: java.lang.String getSystemId()>();

        $r3 = new com.ctc.wstx.dom.DOMWrappingReader;

        specialinvoke $r3.<com.ctc.wstx.dom.DOMWrappingReader: void <init>(com.ctc.wstx.api.ReaderConfig,org.w3c.dom.Node,java.lang.String)>(r4, $r1, $r2);

        return $r3;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public java.lang.String getEncoding()
    {
        java.lang.String $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getCharacterEncodingScheme()>();

        return $r1;
    }

    public java.lang.String getVersion()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public boolean isStandalone()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return 0;
    }

    public boolean standaloneSet()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return 0;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        com.ctc.wstx.api.ReaderConfig $r5;
        java.util.List $r7, $r8;
        java.lang.Boolean $r2;
        java.lang.Object $r6;
        java.lang.String r0, $r1, $r3;
        com.ctc.wstx.dom.DOMWrappingReader r4;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.stream.entities");

        if $z0 == 0 goto label1;

        $r8 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r8;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.stream.notations");

        if $z1 == 0 goto label2;

        $r7 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r7;

     label2:
        $r1 = "org.codehaus.stax2.internNames";

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label3;

        $r3 = "org.codehaus.stax2.internNsUris";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

     label3:
        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r2;

     label4:
        $r5 = r4.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r6 = virtualinvoke $r5.<com.ctc.wstx.api.ReaderConfig: java.lang.Object getProperty(java.lang.String)>(r0);

        return $r6;
    }

    public int getAttributeCount()
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.String $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i1;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        java.lang.IllegalStateException $r7;
        org.w3c.dom.Attr r5;
        java.util.List $r1, $r2, $r3;
        int $i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r6, $r8;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        if i1 >= 0 goto label4;

     label3:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return null;

     label4:
        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.w3c.dom.Attr) $r4;

        $r6 = specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String safeGetLocalName(org.w3c.dom.Node)>(r5);

        return $r6;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        java.lang.IllegalStateException $r10;
        org.w3c.dom.Attr r5;
        java.util.List $r1, $r2, $r3;
        int $i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r6, $r7, $r8, $r11;
        javax.xml.namespace.QName $r9;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r10 = new java.lang.IllegalStateException;

        $r11 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        if i1 >= 0 goto label4;

     label3:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return null;

     label4:
        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.w3c.dom.Attr) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r7 = specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String safeGetLocalName(org.w3c.dom.Node)>(r5);

        $r8 = interfaceinvoke r5.<org.w3c.dom.Attr: java.lang.String getPrefix()>();

        $r9 = specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: javax.xml.namespace.QName constructQName(java.lang.String,java.lang.String,java.lang.String)>($r6, $r7, $r8);

        return $r9;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        java.lang.IllegalStateException $r7;
        org.w3c.dom.Attr r5;
        java.util.List $r1, $r2, $r3;
        int $i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r6, $r8;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        if i1 >= 0 goto label4;

     label3:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return null;

     label4:
        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.w3c.dom.Attr) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        return $r6;
    }

    public java.lang.String getAttributePrefix(int)
    {
        java.lang.IllegalStateException $r7;
        org.w3c.dom.Attr r5;
        java.util.List $r1, $r2, $r3;
        int $i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r6, $r8;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        if i1 >= 0 goto label4;

     label3:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return null;

     label4:
        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.w3c.dom.Attr) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Attr: java.lang.String getPrefix()>();

        return $r6;
    }

    public java.lang.String getAttributeType(int)
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r1, $r2;
        int $i0, i1, $i2;
        java.lang.String $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        if i1 >= 0 goto label4;

     label3:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return null;

     label4:
        return "CDATA";
    }

    public java.lang.String getAttributeValue(int)
    {
        java.lang.IllegalStateException $r7;
        org.w3c.dom.Attr r5;
        java.util.List $r1, $r2, $r3;
        int $i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r6, $r8;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>(1);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        if i1 >= 0 goto label4;

     label3:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return null;

     label4:
        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.w3c.dom.Attr) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Attr: java.lang.String getValue()>();

        return $r6;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        org.w3c.dom.Attr $r9;
        org.w3c.dom.Element r2;
        org.w3c.dom.Node $r1, $r8;
        int $i0, $i1;
        org.w3c.dom.NamedNodeMap $r3;
        java.lang.String r4, $r6, r7, $r10;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r7 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        r2 = (org.w3c.dom.Element) $r1;

        $r3 = interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        if r7 == null goto label2;

        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        r7 = null;

     label2:
        $r8 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>(r7, r4);

        $r9 = (org.w3c.dom.Attr) $r8;

        if $r9 != null goto label3;

        $r10 = null;

        goto label4;

     label3:
        $r10 = interfaceinvoke $r9.<org.w3c.dom.Attr: java.lang.String getValue()>();

     label4:
        return $r10;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r5, $r8, $r10, $r11;
        com.ctc.wstx.util.TextAccumulator $r1, $r9;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r11 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r11);

     label1:
        $i3 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: int next()>();

        if $i3 != 2 goto label2;

        goto label5;

     label2:
        if $i3 == 5 goto label1;

        if $i3 != 3 goto label3;

        goto label1;

     label3:
        $i1 = 1 << $i3;

        $i2 = $i1 & 4688;

        if $i2 != 0 goto label4;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected a text token, got ");

        $r5 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r8);

     label4:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.util.TextAccumulator mTextBuffer>;

        $r2 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getText()>();

        virtualinvoke $r1.<com.ctc.wstx.util.TextAccumulator: void addText(java.lang.String)>($r2);

        goto label1;

     label5:
        $r9 = r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.util.TextAccumulator mTextBuffer>;

        $r10 = virtualinvoke $r9.<com.ctc.wstx.util.TextAccumulator: java.lang.String getAndClear()>();

        return $r10;
    }

    public int getEventType()
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        return $i0;
    }

    public java.lang.String getLocalName()
    {
        java.lang.IllegalStateException $r3;
        java.lang.StringBuffer $r4, $r5, $r7, $r8;
        org.w3c.dom.Node $r1, $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r6, $r9, $r11;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i1 != 2 goto label2;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String safeGetLocalName(org.w3c.dom.Node)>($r1);

        return $r2;

     label2:
        $i2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i2 != 9 goto label3;

        $r10 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        return $r11;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Current state (");

        $i3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $r6 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public javax.xml.namespace.QName getName()
    {
        java.lang.IllegalStateException $r8;
        org.w3c.dom.Node $r1, $r3, $r5;
        int $i0, $i1;
        java.lang.String $r2, $r4, $r6, $r9;
        javax.xml.namespace.QName $r7;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i1 == 2 goto label1;

        $r8 = new java.lang.IllegalStateException;

        $r9 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r4 = specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String safeGetLocalName(org.w3c.dom.Node)>($r3);

        $r5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $r7 = specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: javax.xml.namespace.QName constructQName(java.lang.String,java.lang.String,java.lang.String)>($r2, $r4, $r6);

        return $r7;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return r0;
    }

    public int getNamespaceCount()
    {
        java.lang.IllegalStateException $r2;
        java.util.List $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i2 == 2 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        if $r1 != null goto label5;

        $z0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mNsAware>;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i1 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>($z1);

     label5:
        $r4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i4 = $i3 / 2;

        return $i4;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        java.lang.IllegalStateException $r3;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r4, $r7;
        boolean $z0, $z1;
        java.util.List $r1, $r2, $r5;
        java.lang.Object $r6;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i5 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        if $r1 != null goto label5;

        $z0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mNsAware>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalNsIndex(int)>(i1);

     label2:
        $i4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i4 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>($z1);

     label5:
        if i1 < 0 goto label6;

        $i2 = i1 + i1;

        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 < $i3 goto label7;

     label6:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalNsIndex(int)>(i1);

     label7:
        $r5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        $i6 = i1 + i1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i6);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    public java.lang.String getNamespaceURI()
    {
        java.lang.IllegalStateException $r3;
        org.w3c.dom.Node $r1;
        int $i0, $i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i1 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI(int)
    {
        java.lang.IllegalStateException $r3;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r4, $r7;
        boolean $z0, $z1;
        java.util.List $r1, $r2, $r5;
        java.lang.Object $r6;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i5 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        if $r1 != null goto label5;

        $z0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mNsAware>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalNsIndex(int)>(i1);

     label2:
        $i4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i4 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void calcNsAndAttrLists(boolean)>($z1);

     label5:
        if i1 < 0 goto label6;

        $i2 = i1 + i1;

        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 < $i3 goto label7;

     label6:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalNsIndex(int)>(i1);

     label7:
        $r5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList>;

        $i6 = i1 + i1;

        $i7 = $i6 + 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i7);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    public java.lang.String getPIData()
    {
        java.lang.IllegalStateException $r3;
        org.w3c.dom.Node $r1;
        int $i0;
        java.lang.String $r2, $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 3 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_PI>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r2;
    }

    public java.lang.String getPITarget()
    {
        java.lang.IllegalStateException $r3;
        org.w3c.dom.Node $r1;
        int $i0;
        java.lang.String $r2, $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 3 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_PI>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        return $r2;
    }

    public java.lang.String getPrefix()
    {
        java.lang.IllegalStateException $r3;
        org.w3c.dom.Node $r1;
        int $i0, $i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i1 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getText()
    {
        org.w3c.dom.Node $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r3, $r4;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String mCoalescedText>;

        if $r1 == null goto label1;

        $r4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String mCoalescedText>;

        return $r4;

     label1:
        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 != 0 goto label2;

        $i3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwNotTextual(int)>($i3);

     label2:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r3;
    }

    public char[] getTextCharacters()
    {
        char[] $r2;
        java.lang.String $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;
    }

    public int getTextCharacters(int, char[], int, int)
    {
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, i8;
        char[] r2;
        java.lang.String $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i4 := @parameter0: int;

        r2 := @parameter1: char[];

        i5 := @parameter2: int;

        i8 := @parameter3: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 != 0 goto label1;

        $i7 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwNotTextual(int)>($i7);

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getText()>();

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i8 <= $i3 goto label2;

        i8 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        $i6 = i4 + i8;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(i4, $i6, r2, i5);

        return i8;
    }

    public int getTextLength()
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 != 0 goto label1;

        $i4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwNotTextual(int)>($i4);

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getText()>();

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i3;
    }

    public int getTextStart()
    {
        int $i0, $i1, $i2, $i3;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 != 0 goto label1;

        $i3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwNotTextual(int)>($i3);

     label1:
        return 0;
    }

    public boolean hasName()
    {
        int $i0, $i1;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i1 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasNext()
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasText()
    {
        int $i0, $i1, $i2;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAttributeSpecified(int)
    {
        java.lang.IllegalStateException $r6;
        org.w3c.dom.Attr r5;
        org.w3c.dom.Element r2;
        org.w3c.dom.Node $r1, $r4;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r3;
        java.lang.String $r7;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r6 = new java.lang.IllegalStateException;

        $r7 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        r2 = (org.w3c.dom.Element) $r1;

        $r3 = interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r5 = (org.w3c.dom.Attr) $r4;

        if r5 != null goto label2;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void handleIllegalAttrIndex(int)>(i1);

        return 0;

     label2:
        $z0 = interfaceinvoke r5.<org.w3c.dom.Attr: boolean getSpecified()>();

        return $z0;
    }

    public boolean isCharacters()
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEndElement()
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStartElement()
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isWhiteSpace()
    {
        char $c2;
        int $i0, $i1, $i3, $i4, i5, $i6;
        java.lang.String $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 4 goto label1;

        $i3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i3 != 12 goto label5;

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getText()>();

        i5 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        if i5 >= $i1 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c2;

        if $i6 <= 32 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        $i4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i4 != 6 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;
    }

    public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        boolean $z0, $z1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r37, $r38, $r40;
        int i0, $i1, $i2, i3, $i4;
        java.lang.String r1, r2, $r9, $r14, $r17, $r20, $r27, $r30, $r33, $r36, $r39, $r41, $r42, $r43;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        i3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if i3 == i0 goto label2;

        if i3 != 12 goto label1;

        i3 = 4;

        goto label2;

     label1:
        if i3 != 6 goto label2;

        i3 = 4;

     label2:
        if i0 == i3 goto label3;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected type ");

        $r36 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>(i0);

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", current type ");

        $r39 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>(i3);

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r41);

     label3:
        if r1 == null goto label5;

        if i3 == 1 goto label4;

        if i3 == 2 goto label4;

        if i3 == 9 goto label4;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected non-null local name, but current token not a START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE (was ");

        $i2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $r30 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i2);

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r33);

     label4:
        $r42 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getLocalName()>();

        if $r42 == r1 goto label5;

        $z1 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label5;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected local name \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; current local name \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r27);

     label5:
        if r2 == null goto label8;

        if i3 == 1 goto label6;

        if i3 == 2 goto label6;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected non-null NS URI, but current token not a START_ELEMENT or END_ELEMENT (was ");

        $r17 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>(i3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r20);

     label6:
        $r43 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getNamespaceURI()>();

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i4 != 0 goto label7;

        if $r43 == null goto label8;

        $i1 = virtualinvoke $r43.<java.lang.String: int length()>();

        if $i1 <= 0 goto label8;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected empty namespace, instead have \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r14);

        goto label8;

     label7:
        if r2 == $r43 goto label8;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z0 != 0 goto label8;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected namespace \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; have \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r9);

     label8:
        return;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamException $r54, $r57, $r59, $r61;
        short $s1, $s2, $s3, $s4, $s7, $s10;
        java.lang.StringBuffer $r7, $r9, $r10, $r12, $r13, $r17, $r19, $r20, $r22, $r23, $r27, $r29, $r30, $r32, $r33, $r46, $r47, $r48, $r53, $r56, $r58, $r60;
        java.lang.String $r14, $r24, $r34, $r49;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0, $z1;
        org.w3c.dom.Node $r2, $r3, $r4, $r8, $r11, $r18, $r21, $r28, $r31, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r50, $r51, $r52;
        int $i0, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.util.NoSuchElementException $r55;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String mCoalescedText> = null;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        tableswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label09;
            case 6: goto label09;
            case 7: goto label01;
            case 8: goto label05;
            default: goto label09;
        };

     label01:
        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $s1 = interfaceinvoke $r2.<org.w3c.dom.Node: short getNodeType()>();

        $i12 = (int) $s1;

        lookupswitch($i12)
        {
            case 1: goto label03;
            case 9: goto label02;
            case 11: goto label02;
            default: goto label04;
        };

     label02:
        $r3 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode> = $r4;

        goto label14;

     label03:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 1;

        return 1;

     label04:
        $r54 = new javax.xml.stream.XMLStreamException;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unexpected DOM root node type ");

        $r28 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $s4 = interfaceinvoke $r28.<org.w3c.dom.Node: short getNodeType()>();

        $i13 = (int) $s4;

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for node \'");

        $r31 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r54.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r34);

        throw $r54;

     label05:
        $r55 = new java.util.NoSuchElementException;

        specialinvoke $r55.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Can not call next() after receiving END_DOCUMENT");

        throw $r55;

     label06:
        $i8 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mDepth>;

        $i9 = $i8 + 1;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mDepth> = $i9;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList> = null;

        $r50 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r51 = interfaceinvoke $r50.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r51 != null goto label07;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 2;

        return 2;

     label07:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList> = null;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode> = $r51;

        goto label14;

     label08:
        $i5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mDepth>;

        $i6 = $i5 - 1;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mDepth> = $i6;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList> = null;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList> = null;

        $r36 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r35 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mRootNode>;

        if $r36 != $r35 goto label09;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 8;

        return 8;

     label09:
        $r37 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r38 = interfaceinvoke $r37.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r38 == null goto label10;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode> = $r38;

        goto label14;

     label10:
        $r39 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r40 = interfaceinvoke $r39.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode> = $r40;

        $r41 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $s7 = interfaceinvoke $r41.<org.w3c.dom.Node: short getNodeType()>();

        if $s7 != 1 goto label11;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 2;

        return 2;

     label11:
        $r43 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r42 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mRootNode>;

        if $r43 != $r42 goto label12;

        $i14 = (int) $s7;

        if $i14 == 9 goto label13;

        $i15 = (int) $s7;

        if $i15 == 11 goto label13;

     label12:
        $r57 = new javax.xml.stream.XMLStreamException;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: non-element parent node (");

        $i16 = (int) $s7;

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") that is not the initial root node");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r57.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r49);

        throw $r57;

     label13:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 8;

        return 8;

     label14:
        $r52 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $s10 = interfaceinvoke $r52.<org.w3c.dom.Node: short getNodeType()>();

        $i17 = (int) $s10;

        tableswitch($i17)
        {
            case 1: goto label19;
            case 2: goto label24;
            case 3: goto label22;
            case 4: goto label15;
            case 5: goto label20;
            case 6: goto label24;
            case 7: goto label21;
            case 8: goto label17;
            case 9: goto label25;
            case 10: goto label18;
            case 11: goto label25;
            case 12: goto label24;
            default: goto label25;
        };

     label15:
        $z0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mCoalescing>;

        if $z0 == 0 goto label16;

        virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void coalesceText(int)>(12);

        goto label26;

     label16:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 12;

        goto label26;

     label17:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 5;

        goto label26;

     label18:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 11;

        goto label26;

     label19:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 1;

        goto label26;

     label20:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 9;

        goto label26;

     label21:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 3;

        goto label26;

     label22:
        $z1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mCoalescing>;

        if $z1 == 0 goto label23;

        virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void coalesceText(int)>(4);

        goto label26;

     label23:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 4;

        goto label26;

     label24:
        $r59 = new javax.xml.stream.XMLStreamException;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unexpected DOM node type ");

        $r8 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $s2 = interfaceinvoke $r8.<org.w3c.dom.Node: short getNodeType()>();

        $i18 = (int) $s2;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (attr/entity/notation?), for node \'");

        $r11 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r59.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r14);

        throw $r59;

     label25:
        $r61 = new javax.xml.stream.XMLStreamException;

        $r60 = new java.lang.StringBuffer;

        specialinvoke $r60.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unrecognized DOM node type ");

        $r18 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $s3 = interfaceinvoke $r18.<org.w3c.dom.Node: short getNodeType()>();

        $i19 = (int) $s3;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", for node \'");

        $r21 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r61.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r24);

        throw $r61;

     label26:
        $i11 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        return $i11;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        int $i0;
        java.lang.String $r3, $r6;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

     label1:
        $i0 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: int next()>();

        tableswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label6;
            case 12: goto label3;
            default: goto label6;
        };

     label2:
        goto label1;

     label3:
        $z0 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean isWhiteSpace()>();

        if $z0 == 0 goto label4;

        goto label1;

     label4:
        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>("Received non-all-whitespace CHARACTERS or CDATA event in nextTag().");

        goto label6;

     label5:
        return $i0;

     label6:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received event ");

        $r3 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", instead of START_ELEMENT or END_ELEMENT.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwParseError(java.lang.String)>($r6);

        goto label1;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getPrefix(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.util.Iterator getPrefixes(java.lang.String)
    {
        com.ctc.wstx.util.SingletonIterator $r3;
        com.ctc.wstx.util.EmptyIterator $r4;
        java.lang.String r1, $r2;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getPrefix(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r4 = staticinvoke <com.ctc.wstx.util.EmptyIterator: com.ctc.wstx.util.EmptyIterator getInstance()>();

        return $r4;

     label1:
        $r3 = new com.ctc.wstx.util.SingletonIterator;

        specialinvoke $r3.<com.ctc.wstx.util.SingletonIterator: void <init>(java.lang.Object)>($r2);

        return $r3;
    }

    public java.lang.Object getFeature(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.String r2, $r3, $r4;
        java.lang.IllegalArgumentException $r0;
        com.ctc.wstx.dom.DOMWrappingReader r5;

        r5 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNKNOWN_FEATURE>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public void setFeature(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r6;
        java.lang.String r2, $r3, $r4;
        java.lang.IllegalArgumentException $r0;
        com.ctc.wstx.dom.DOMWrappingReader r5;

        r5 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object;

        $r0 = new java.lang.IllegalArgumentException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNKNOWN_FEATURE>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        com.ctc.wstx.api.ReaderConfig $r2;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: boolean isPropertySupported(java.lang.String)>(r1);

        return $z0;
    }

    public boolean setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.IllegalArgumentException $r3;
        com.ctc.wstx.api.ReaderConfig $r7;
        java.lang.Boolean $r4;
        java.lang.Object r2;
        java.lang.String r0, $r1, $r5;
        com.ctc.wstx.dom.DOMWrappingReader r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r6 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = "org.codehaus.stax2.internNames";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r5 = "org.codehaus.stax2.internNsUris";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

     label1:
        $z1 = r2 instanceof java.lang.Boolean;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.Boolean) r2;

        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DOM-based reader does not support interning of names or namespace URIs");

        throw $r3;

     label3:
        return 1;

     label4:
        $r7 = r6.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z4 = virtualinvoke $r7.<com.ctc.wstx.api.ReaderConfig: boolean setProperty(java.lang.String,java.lang.Object)>(r0, r2);

        return $z4;
    }

    public void skipElement() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1, i2, $i4;
        java.lang.String $r2;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        i2 = 1;

     label2:
        $i1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: int next()>();

        if $i1 != 1 goto label3;

        i2 = i2 + 1;

        goto label4;

     label3:
        if $i1 != 2 goto label4;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 != 0 goto label4;

        goto label5;

     label4:
        goto label2;

     label5:
        return;
    }

    public org.codehaus.stax2.AttributeInfo getAttributeInfo() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        java.lang.String $r2;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return null;
    }

    public org.codehaus.stax2.DTDInfo getDTDInfo() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 == 11 goto label1;

        return null;

     label1:
        return r0;
    }

    public final org.codehaus.stax2.LocationInfo getLocationInfo()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return r0;
    }

    public int getText(java.io.Writer, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.io.Writer r2;
        java.lang.String $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        boolean z0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r2 := @parameter0: java.io.Writer;

        z0 := @parameter1: boolean;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 != 0 goto label1;

        $i4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        specialinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: void throwNotTextual(int)>($i4);

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getText()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r1);

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i3;
    }

    public int getDepth()
    {
        int $i0;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mDepth>;

        return $i0;
    }

    public boolean isEmptyElement() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return 0;
    }

    public javax.xml.namespace.NamespaceContext getNonTransientNamespaceContext()
    {
        com.ctc.wstx.util.EmptyNamespaceContext $r0;
        com.ctc.wstx.dom.DOMWrappingReader r1;

        r1 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $r0 = staticinvoke <com.ctc.wstx.util.EmptyNamespaceContext: com.ctc.wstx.util.EmptyNamespaceContext getInstance()>();

        return $r0;
    }

    public java.lang.String getPrefixedName()
    {
        java.lang.IllegalStateException $r8;
        java.lang.StringBuffer $r6, $r9, $r10, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r7, $r11, $r14;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label3;
            case 10: goto label6;
            case 11: goto label5;
            default: goto label6;
        };

     label1:
        $r4 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getPrefix()>();

        $r5 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getLocalName()>();

        if $r4 != null goto label2;

        return $r5;

     label2:
        $r6 = new java.lang.StringBuffer;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = $i1 + 1;

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>($i4);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label3:
        $r2 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getLocalName()>();

        return $r2;

     label4:
        $r3 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getPITarget()>();

        return $r3;

     label5:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String getDTDRootName()>();

        return $r1;

     label6:
        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Current state (");

        $i5 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $r11 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i5);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") not START_ELEMENT, END_ELEMENT, ENTITY_REFERENCE, PROCESSING_INSTRUCTION or DTD");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r8;
    }

    public void closeCompletely() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return;
    }

    public java.lang.Object getProcessedDTD()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public java.lang.String getDTDRootName()
    {
        org.w3c.dom.Node $r1;
        int $i0;
        java.lang.String $r3;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        org.w3c.dom.DocumentType $r2;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 != 11 goto label1;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = (org.w3c.dom.DocumentType) $r1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.DocumentType: java.lang.String getName()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.String getDTDPublicId()
    {
        org.w3c.dom.Node $r1;
        int $i0;
        java.lang.String $r3;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        org.w3c.dom.DocumentType $r2;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 != 11 goto label1;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = (org.w3c.dom.DocumentType) $r1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.String getDTDSystemId()
    {
        org.w3c.dom.Node $r1;
        int $i0;
        java.lang.String $r3;
        com.ctc.wstx.dom.DOMWrappingReader r0;
        org.w3c.dom.DocumentType $r2;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $i0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        if $i0 != 11 goto label1;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = (org.w3c.dom.DocumentType) $r1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.String getDTDInternalSubset()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public org.codehaus.stax2.validation.DTDValidationSchema getProcessedDTDSchema()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public long getStartingByteOffset()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return -1L;
    }

    public long getStartingCharOffset()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return 0L;
    }

    public long getEndingByteOffset() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return -1L;
    }

    public long getEndingCharOffset() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return -1L;
    }

    public final javax.xml.stream.Location getLocation()
    {
        org.codehaus.stax2.XMLStreamLocation2 $r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dom.DOMWrappingReader: org.codehaus.stax2.XMLStreamLocation2 getStartLocation()>();

        return $r1;
    }

    public org.codehaus.stax2.XMLStreamLocation2 getStartLocation()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public org.codehaus.stax2.XMLStreamLocation2 getCurrentLocation()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public final org.codehaus.stax2.XMLStreamLocation2 getEndLocation() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    public org.codehaus.stax2.validation.XMLValidator validateAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidationSchema r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        return null;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidationSchema r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        return null;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidator) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator r1;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        return null;
    }

    public org.codehaus.stax2.validation.ValidationProblemHandler setValidationProblemHandler(org.codehaus.stax2.validation.ValidationProblemHandler)
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;
        org.codehaus.stax2.validation.ValidationProblemHandler r1;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: org.codehaus.stax2.validation.ValidationProblemHandler;

        return null;
    }

    protected void coalesceText(int)
    {
        com.ctc.wstx.util.TextAccumulator $r2, $r6, $r9;
        short $s0;
        org.w3c.dom.Node $r1, $r4, $r5, $r8;
        int i1, $i2, $i3;
        java.lang.String $r3, $r7, $r10;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $r2 = r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.util.TextAccumulator mTextBuffer>;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r2.<com.ctc.wstx.util.TextAccumulator: void addText(java.lang.String)>($r3);

     label1:
        $r4 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r5 == null goto label3;

        $s0 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        if $i2 == 3 goto label2;

        $i3 = (int) $s0;

        if $i3 == 4 goto label2;

        goto label3;

     label2:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode> = $r5;

        $r9 = r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.util.TextAccumulator mTextBuffer>;

        $r8 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r10 = interfaceinvoke $r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r9.<com.ctc.wstx.util.TextAccumulator: void addText(java.lang.String)>($r10);

        goto label1;

     label3:
        $r6 = r0.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.util.TextAccumulator mTextBuffer>;

        $r7 = virtualinvoke $r6.<com.ctc.wstx.util.TextAccumulator: java.lang.String getAndClear()>();

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.lang.String mCoalescedText> = $r7;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent> = 4;

        return;
    }

    private javax.xml.namespace.QName constructQName(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r5, $r6;
        javax.xml.namespace.QName $r4;
        com.ctc.wstx.dom.DOMWrappingReader r3;

        r3 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r4 = new javax.xml.namespace.QName;

        if r0 != null goto label1;

        $r5 = "";

        goto label2;

     label1:
        $r5 = r0;

     label2:
        if r2 != null goto label3;

        $r6 = "";

        goto label4;

     label3:
        $r6 = r2;

     label4:
        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r5, r1, $r6);

        return $r4;
    }

    private void calcNsAndAttrLists(boolean)
    {
        boolean $z0, $z1, z2, $z3;
        java.util.List $r13, $r14, $r16, $r20, $r21;
        java.util.ArrayList $r8, $r9, $r11, $r12, r17, r18;
        org.w3c.dom.Node $r1, $r3, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String $r4, $r5, $r6, $r7, $r10, r19;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        z2 := @parameter0: boolean;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i0 != 0 goto label01;

        $r16 = <java.util.Collections: java.util.List EMPTY_LIST>;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList> = $r16;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList> = $r16;

        return;

     label01:
        $z0 = r0.<com.ctc.wstx.dom.DOMWrappingReader: boolean mNsAware>;

        if $z0 != 0 goto label04;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList> = $r12;

        i6 = 0;

     label02:
        if i6 >= $i0 goto label03;

        $r14 = r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList>;

        $r15 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i6);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        i6 = i6 + 1;

        goto label02;

     label03:
        $r13 = <java.util.Collections: java.util.List EMPTY_LIST>;

        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList> = $r13;

        return;

     label04:
        r17 = null;

        r18 = null;

        i7 = 0;

     label05:
        if i7 >= $i0 goto label15;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i7);

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r4 == null goto label06;

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i4 != 0 goto label09;

     label06:
        $r5 = "xmlns";

        $r6 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label08;

        if z2 == 0 goto label14;

        if r17 != null goto label07;

        $r9 = new java.util.ArrayList;

        $i3 = $i0 - i7;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i3);

        r17 = $r9;

     label07:
        virtualinvoke r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label14;

     label08:
        r19 = "";

        goto label12;

     label09:
        $r10 = "xmlns";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label11;

        if z2 == 0 goto label14;

        if r17 != null goto label10;

        $r11 = new java.util.ArrayList;

        $i5 = $i0 - i7;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i5);

        r17 = $r11;

     label10:
        virtualinvoke r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label14;

     label11:
        r19 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label12:
        if r18 != null goto label13;

        $r8 = new java.util.ArrayList;

        $i1 = $i0 - i7;

        $i2 = $i1 * 2;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        r18 = $r8;

     label13:
        virtualinvoke r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r19);

        $r7 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r18.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label14:
        i7 = i7 + 1;

        goto label05;

     label15:
        if r17 != null goto label16;

        $r20 = <java.util.Collections: java.util.List EMPTY_LIST>;

        goto label17;

     label16:
        $r20 = r17;

     label17:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mAttrList> = $r20;

        if r18 != null goto label18;

        $r21 = <java.util.Collections: java.util.List EMPTY_LIST>;

        goto label19;

     label18:
        $r21 = r18;

     label19:
        r0.<com.ctc.wstx.dom.DOMWrappingReader: java.util.List mNsDeclList> = $r21;

        return;
    }

    protected com.ctc.wstx.io.WstxInputLocation getLastCharLocation()
    {
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        return null;
    }

    private void throwNotTextual(int)
    {
        java.lang.IllegalStateException $r0;
        java.lang.StringBuffer $r1, $r2, $r5, $r6;
        int $i0, i1;
        java.lang.String $r4, $r7;
        com.ctc.wstx.dom.DOMWrappingReader r3;

        r3 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Not a textual event (");

        $i0 = r3.<com.ctc.wstx.dom.DOMWrappingReader: int mCurrEvent>;

        $r4 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    private void throwParseError(java.lang.String) throws com.ctc.wstx.exc.WstxParsingException
    {
        com.ctc.wstx.exc.WstxParsingException $r0;
        com.ctc.wstx.io.WstxInputLocation $r3;
        java.lang.String r1;
        com.ctc.wstx.dom.DOMWrappingReader r2;

        r2 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.ctc.wstx.exc.WstxParsingException;

        $r3 = virtualinvoke r2.<com.ctc.wstx.dom.DOMWrappingReader: com.ctc.wstx.io.WstxInputLocation getLastCharLocation()>();

        specialinvoke $r0.<com.ctc.wstx.exc.WstxParsingException: void <init>(java.lang.String,javax.xml.stream.Location)>(r1, $r3);

        throw $r0;
    }

    private void handleIllegalAttrIndex(int)
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12;
        org.w3c.dom.Node $r1;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r3;
        java.lang.String $r8, $r13, $r15;
        java.lang.IllegalArgumentException $r14;
        org.w3c.dom.Element r2;
        com.ctc.wstx.dom.DOMWrappingReader r0;

        r0 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i1 := @parameter0: int;

        $r1 = r0.<com.ctc.wstx.dom.DOMWrappingReader: org.w3c.dom.Node mCurrNode>;

        r2 = (org.w3c.dom.Element) $r1;

        $r3 = interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal attribute index ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; element <");

        $r8 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("> has ");

        if $i0 != 0 goto label1;

        $r15 = "no";

        goto label2;

     label1:
        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

     label2:
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" attributes");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r14;
    }

    private void handleIllegalNsIndex(int)
    {
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuffer $r0, $r1, $r2, $r3, $r5, $r6;
        int i0, $i1;
        java.lang.String $r7;
        com.ctc.wstx.dom.DOMWrappingReader r4;

        r4 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal namespace declaration index ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (has ");

        $i1 = virtualinvoke r4.<com.ctc.wstx.dom.DOMWrappingReader: int getNamespaceCount()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ns declarations)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r8;
    }

    private java.lang.String safeGetLocalName(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0;
        java.lang.String $r1, r3;
        com.ctc.wstx.dom.DOMWrappingReader r2;

        r2 := @this: com.ctc.wstx.dom.DOMWrappingReader;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r3 = $r1;

        if $r1 != null goto label1;

        r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label1:
        return r3;
    }

    public static void <clinit>()
    {
        <com.ctc.wstx.dom.DOMWrappingReader: int MASK_GET_ELEMENT_TEXT> = 4688;

        <com.ctc.wstx.dom.DOMWrappingReader: int MASK_GET_TEXT> = 6768;

        return;
    }
}
