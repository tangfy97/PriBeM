public class org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.TurbulenceRable
{
    int seed;
    int numOctaves;
    double baseFreqX;
    double baseFreqY;
    boolean stitched;
    boolean fractalNoise;
    java.awt.geom.Rectangle2D region;

    public void <init>(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        java.awt.geom.Rectangle2D r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int seed> = 0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int numOctaves> = 1;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqX> = 0.0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqY> = 0.0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean stitched> = 0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean fractalNoise> = 0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D region> = r1;

        return;
    }

    public void <init>(java.awt.geom.Rectangle2D, int, int, double, double, boolean, boolean)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        java.awt.geom.Rectangle2D r1;
        int i0, i1;
        double d0, d1;
        boolean z0, z1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int seed> = 0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int numOctaves> = 1;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqX> = 0.0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqY> = 0.0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean stitched> = 0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean fractalNoise> = 0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int seed> = i0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int numOctaves> = i1;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqX> = d0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqY> = d1;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean stitched> = z0;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean fractalNoise> = z1;

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D region> = r1;

        return;
    }

    public java.awt.geom.Rectangle2D getTurbulenceRegion()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        java.awt.geom.Rectangle2D $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D region>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        java.awt.geom.Rectangle2D $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D region>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public int getSeed()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $i0 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int seed>;

        return $i0;
    }

    public int getNumOctaves()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $i0 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int numOctaves>;

        return $i0;
    }

    public double getBaseFrequencyX()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqX>;

        return $d0;
    }

    public double getBaseFrequencyY()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqY>;

        return $d0;
    }

    public boolean isStitched()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $z0 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean stitched>;

        return $z0;
    }

    public boolean isFractalNoise()
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        $z0 = r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean fractalNoise>;

        return $z0;
    }

    public void setTurbulenceRegion(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        java.awt.geom.Rectangle2D r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D region> = r1;

        return;
    }

    public void setSeed(int)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        int i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int seed> = i0;

        return;
    }

    public void setNumOctaves(int)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        int i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int numOctaves> = i0;

        return;
    }

    public void setBaseFrequencyX(double)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqX> = d0;

        return;
    }

    public void setBaseFrequencyY(double)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqY> = d0;

        return;
    }

    public void setStitched(boolean)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean stitched> = z0;

        return;
    }

    public void setFractalNoise(boolean)
    {
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean fractalNoise> = z0;

        return;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.Rectangle $r7;
        org.apache.batik.ext.awt.image.rendered.TurbulencePatternRed $r10;
        java.awt.geom.Rectangle2D $r3, $r4, $r11, r14, r15;
        java.awt.color.ColorSpace $r8;
        int $i0, $i1, $i2, $i3;
        java.awt.geom.NoninvertibleTransformException $r13;
        boolean $z0, $z1, $z2;
        double $d0, $d1;
        java.awt.Shape $r1, $r6;
        org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit r2;
        java.awt.geom.AffineTransform $r5, $r9, r16;
        java.awt.image.renderable.RenderContext r0;
        java.lang.Object $r12;

        r2 := @this: org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        if $r1 != null goto label01;

        r14 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label03;

     label01:
        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $r4 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        r14 = $r4;

        $z0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r3);

        if $z0 != 0 goto label02;

        return null;

     label02:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r4, $r3, $r4);

     label03:
        $r5 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r6 = virtualinvoke $r5.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r14);

        $r7 = interfaceinvoke $r6.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i0 = $r7.<java.awt.Rectangle: int width>;

        if $i0 <= 0 goto label04;

        $i1 = $r7.<java.awt.Rectangle: int height>;

        if $i1 > 0 goto label05;

     label04:
        return null;

     label05:
        $r8 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: java.awt.color.ColorSpace getOperationColorSpace()>();

        r15 = null;

        $z1 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean stitched>;

        if $z1 == 0 goto label06;

        $r11 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: java.awt.geom.Rectangle2D region>;

        $r12 = virtualinvoke $r11.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r15 = (java.awt.geom.Rectangle2D) $r12;

     label06:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        r16 = $r9;

     label07:
        r16 = virtualinvoke $r5.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

     label10:
        $r10 = new org.apache.batik.ext.awt.image.rendered.TurbulencePatternRed;

        $d1 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqX>;

        $d0 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: double baseFreqY>;

        $i3 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int numOctaves>;

        $i2 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: int seed>;

        $z2 = r2.<org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit: boolean fractalNoise>;

        specialinvoke $r10.<org.apache.batik.ext.awt.image.rendered.TurbulencePatternRed: void <init>(double,double,int,int,boolean,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.Rectangle,java.awt.color.ColorSpace,boolean)>($d1, $d0, $i3, $i2, $z2, r15, r16, $r7, $r8, 1);

        return $r10;

        catch java.awt.geom.NoninvertibleTransformException from label07 to label08 with label09;
    }
}
