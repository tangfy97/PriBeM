public class org.waveprotocol.wave.crypto.SignerInfo extends java.lang.Object
{
    private static final java.lang.String PKI_PATH_ENCODING;
    private static final java.lang.String X509;
    private final java.util.List certChain;
    private final org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo protobuf;
    private final byte[] signerId;

    public void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm, java.util.List, java.lang.String) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] $r12;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r9;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm r3;
        com.google.common.collect.ImmutableList $r10;
        int $i0;
        java.lang.String r5;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder $r2, $r4, $r6, $r8;
        boolean $z0;
        java.util.List r1, $r7, $r11;
        org.waveprotocol.wave.crypto.SignatureException $r14;
        org.waveprotocol.wave.crypto.SignerInfo r0;
        java.security.cert.CertificateEncodingException $r13;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        r3 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm;

        r1 := @parameter1: java.util.List;

        r5 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "need at least onecert in the chain");

     label3:
        $r2 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder newBuilder()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder setHashAlgorithm(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm)>(r3);

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder setDomain(java.lang.String)>(r5);

        $r7 = specialinvoke r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List getCertificatesAsListOfByteArrays(java.util.List)>(r1);

        $r8 = virtualinvoke $r6.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder addAllCertificate(java.lang.Iterable)>($r7);

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo build()>();

        r0.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo protobuf> = $r9;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        $r14 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r14.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>("couldn\'t parse certificates", $r13);

        throw $r14;

     label6:
        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r1);

        r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List certChain> = $r10;

        $r11 = r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List certChain>;

        $r12 = specialinvoke r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] calculateSignerId(java.util.List)>($r11);

        r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] signerId> = $r12;

        return;

        catch java.security.cert.CertificateEncodingException from label3 to label4 with label5;
    }

    public void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] $r5;
        java.util.List $r2, $r3, $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r1;
        org.waveprotocol.wave.crypto.SignerInfo r0;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo protobuf> = r1;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: java.util.List getCertificateList()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List getCertificatesFromListOfByteArrays(java.util.List)>($r2);

        r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List certChain> = $r3;

        $r4 = r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List certChain>;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] calculateSignerId(java.util.List)>($r4);

        r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] signerId> = $r5;

        return;
    }

    private java.util.List getCertificatesAsListOfByteArrays(java.util.List) throws java.security.cert.CertificateEncodingException
    {
        java.security.cert.X509Certificate r4;
        byte[] $r5;
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        com.google.protobuf.ByteString $r6;
        java.util.List r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.crypto.SignerInfo r7;
        boolean $z0;

        r7 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        r1 := @parameter0: java.util.List;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = virtualinvoke r4.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r6 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    private java.util.List getCertificatesFromListOfByteArrays(java.util.List) throws org.waveprotocol.wave.crypto.SignatureException
    {
        java.security.cert.X509Certificate $r9;
        byte[] $r7;
        java.security.cert.CertificateFactory $r1;
        java.util.Iterator $r3;
        java.security.cert.CertificateException $r10;
        java.util.ArrayList $r0;
        com.google.protobuf.ByteString r5;
        java.util.List r2;
        java.security.cert.Certificate $r8;
        java.io.ByteArrayInputStream $r6;
        org.waveprotocol.wave.crypto.SignatureException $r11;
        java.lang.Object $r4;
        org.waveprotocol.wave.crypto.SignerInfo r12;
        boolean $z0;

        r12 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        r2 := @parameter0: java.util.List;

     label1:
        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.protobuf.ByteString) $r4;

        $r6 = new java.io.ByteArrayInputStream;

        $r7 = virtualinvoke r5.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        $r8 = virtualinvoke $r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r6);

        $r9 = (java.security.cert.X509Certificate) $r8;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        return $r0;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r11.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.security.cert.CertificateException from label1 to label3 with label4;
    }

    public java.util.List getCertificates()
    {
        org.waveprotocol.wave.crypto.SignerInfo r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        $r1 = r0.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List certChain>;

        return $r1;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm getHashAlgorithm()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r1;
        org.waveprotocol.wave.crypto.SignerInfo r0;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm $r2;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        $r1 = r0.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo protobuf>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm getHashAlgorithm()>();

        return $r2;
    }

    public java.lang.String getDomain()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r1;
        org.waveprotocol.wave.crypto.SignerInfo r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        $r1 = r0.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo protobuf>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: java.lang.String getDomain()>();

        return $r2;
    }

    public byte[] getSignerId()
    {
        byte[] $r1;
        org.waveprotocol.wave.crypto.SignerInfo r0;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        $r1 = r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] signerId>;

        return $r1;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo toProtoBuf()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r1;
        org.waveprotocol.wave.crypto.SignerInfo r0;

        r0 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        $r1 = r0.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo protobuf>;

        return $r1;
    }

    private byte[] calculateSignerId(java.util.List) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] $r3, $r8;
        java.security.cert.CertificateFactory $r0;
        java.security.MessageDigest $r7;
        java.security.cert.CertPath $r2;
        java.security.cert.CertificateException $r11;
        java.util.List r1;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm $r5;
        org.waveprotocol.wave.crypto.SignatureException $r10, $r12;
        java.security.NoSuchAlgorithmException $r9;
        org.waveprotocol.wave.crypto.SignerInfo r4;
        java.lang.String $r6;

        r4 := @this: org.waveprotocol.wave.crypto.SignerInfo;

        r1 := @parameter0: java.util.List;

     label1:
        $r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r2 = virtualinvoke $r0.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>(r1);

        $r3 = virtualinvoke $r2.<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>("PkiPath");

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm getHashAlgorithm()>();

        $r6 = staticinvoke <org.waveprotocol.wave.crypto.AlgorithmUtil: java.lang.String getJceName(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm)>($r5);

        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

     label2:
        return $r8;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r12.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>("could not parse certificate chain", $r11);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r10.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>("could not calculate hash of cert chain", $r9);

        throw $r10;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.crypto.SignerInfo: java.lang.String X509> = "X.509";

        <org.waveprotocol.wave.crypto.SignerInfo: java.lang.String PKI_PATH_ENCODING> = "PkiPath";

        return;
    }
}
