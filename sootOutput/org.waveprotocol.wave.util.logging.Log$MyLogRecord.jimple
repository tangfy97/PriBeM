class org.waveprotocol.wave.util.logging.Log$MyLogRecord extends java.util.logging.LogRecord
{
    private boolean needToInferCaller;

    static java.lang.StackTraceElement findCaller()
    {
        java.lang.Throwable $r0;
        java.lang.StackTraceElement[] $r1;
        int $i0, $i1, i2, $i3;
        java.lang.Class $r2;
        java.lang.StackTraceElement $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7;
        boolean $z0, $z1;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r2 = class "Lorg/waveprotocol/wave/util/logging/Log;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r6 = $r1[i2];

        $r7 = virtualinvoke $r6.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i3 = lengthof $r1;

        if i2 >= $i3 goto label3;

        $r4 = $r1[i2];

        $r5 = virtualinvoke $r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        i2 = i2 + 1;

        goto label2;

     label3:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label4;

        $r8 = $r1[i2];

        goto label5;

     label4:
        $r8 = null;

     label5:
        return $r8;
    }

    public void <init>(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        java.lang.String r2;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord r0;
        java.util.logging.Level r1;

        r0 := @this: org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        r1 := @parameter0: java.util.logging.Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);

        r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: boolean needToInferCaller> = 1;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: void setThrown(java.lang.Throwable)>(r3);

        return;
    }

    public java.lang.String getSourceClassName()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        $z0 = r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: boolean needToInferCaller>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: void inferCaller()>();

     label1:
        $r1 = specialinvoke r0.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>();

        return $r1;
    }

    public java.lang.String getSourceMethodName()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        $z0 = r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: boolean needToInferCaller>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: void inferCaller()>();

     label1:
        $r1 = specialinvoke r0.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>();

        return $r1;
    }

    private void inferCaller()
    {
        java.lang.StackTraceElement $r1;
        java.lang.String $r2, $r3;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord r0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: boolean needToInferCaller> = 0;

        $r1 = staticinvoke <org.waveprotocol.wave.util.logging.Log$MyLogRecord: java.lang.StackTraceElement findCaller()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        specialinvoke r0.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        specialinvoke r0.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>($r3);

        goto label2;

     label1:
        specialinvoke r0.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(null);

        specialinvoke r0.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(null);

     label2:
        return;
    }

    public void setSourceClassName(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord r0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: boolean needToInferCaller> = 0;

        specialinvoke r0.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);

        return;
    }

    public void setSourceMethodName(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord r0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: boolean needToInferCaller> = 0;

        specialinvoke r0.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r1);

        return;
    }
}
