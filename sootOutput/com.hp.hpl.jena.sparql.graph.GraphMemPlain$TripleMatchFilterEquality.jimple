class com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality extends com.hp.hpl.jena.util.iterator.Filter
{
    protected final com.hp.hpl.jena.graph.Triple tMatch;

    public void <init>(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.Filter: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality: com.hp.hpl.jena.graph.Triple tMatch> = r1;

        return;
    }

    public boolean accept(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality r0;
        com.hp.hpl.jena.graph.Triple r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality: com.hp.hpl.jena.graph.Triple tMatch>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: boolean tripleContained(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple)>($r2, r1);

        return $z0;
    }

    public volatile boolean accept(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality r0;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Triple) r1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality: boolean accept(com.hp.hpl.jena.graph.Triple)>($r2);

        return $z0;
    }
}
