public class com.jidesoft.comparator.AlphanumComparator extends java.lang.Object implements java.util.Comparator
{
    private boolean _caseSensitive;
    public static final com.jidesoft.comparator.ComparatorContext CONTEXT;
    public static final com.jidesoft.comparator.ComparatorContext CONTEXT_IGNORE_CASE;

    public void <init>()
    {
        com.jidesoft.comparator.AlphanumComparator r0;

        r0 := @this: com.jidesoft.comparator.AlphanumComparator;

        specialinvoke r0.<com.jidesoft.comparator.AlphanumComparator: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        com.jidesoft.comparator.AlphanumComparator r0;
        boolean z0;

        r0 := @this: com.jidesoft.comparator.AlphanumComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.comparator.AlphanumComparator: boolean _caseSensitive> = z0;

        return;
    }

    private boolean isDigit(char)
    {
        com.jidesoft.comparator.AlphanumComparator r0;
        int $i1, $i2;
        char c0;
        boolean $z0;

        r0 := @this: com.jidesoft.comparator.AlphanumComparator;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 48 goto label1;

        $i2 = (int) c0;

        if $i2 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.lang.String getChunk(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r1;
        com.jidesoft.comparator.AlphanumComparator r2;
        char $c0, $c2, $c3;
        int i1, i4, i5;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;

        r2 := @this: com.jidesoft.comparator.AlphanumComparator;

        r1 := @parameter0: java.lang.CharSequence;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $c0 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        i5 = i4 + 1;

        $z0 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: boolean isDigit(char)>($c0);

        if $z0 == 0 goto label3;

     label1:
        if i5 >= i1 goto label5;

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i5);

        $z2 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: boolean isDigit(char)>($c3);

        if $z2 != 0 goto label2;

        goto label5;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i5 = i5 + 1;

        goto label1;

     label3:
        if i5 >= i1 goto label5;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i5);

        $z1 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: boolean isDigit(char)>($c2);

        if $z1 == 0 goto label4;

        goto label5;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i5 = i5 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public int compare(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.jidesoft.comparator.AlphanumComparator r2;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, i11, i12, i13, i14, $i15, $i16, $i17;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.CharSequence r0, r1;
        char $c5, $c6, $c9, $c10;

        r2 := @this: com.jidesoft.comparator.AlphanumComparator;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i11 = 0;

        i12 = 0;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

     label01:
        if i11 >= $i0 goto label10;

        if i12 >= $i1 goto label10;

        $r3 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: java.lang.String getChunk(java.lang.CharSequence,int,int)>(r0, $i0, i11);

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        i11 = i11 + $i3;

        $r4 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: java.lang.String getChunk(java.lang.CharSequence,int,int)>(r1, $i1, i12);

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        i12 = i12 + $i4;

        $c5 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $z0 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: boolean isDigit(char)>($c5);

        if $z0 == 0 goto label05;

        $c6 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $z2 = specialinvoke r2.<com.jidesoft.comparator.AlphanumComparator: boolean isDigit(char)>($c6);

        if $z2 == 0 goto label05;

        $i7 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i8 = virtualinvoke $r4.<java.lang.String: int length()>();

        i13 = $i7 - $i8;

        if i13 != 0 goto label04;

        i14 = 0;

     label02:
        if i14 >= $i7 goto label04;

        $c9 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i14);

        $c10 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i14);

        $i16 = (int) $c9;

        $i17 = (int) $c10;

        i13 = $i16 - $i17;

        if i13 == 0 goto label03;

        return i13;

     label03:
        i14 = i14 + 1;

        goto label02;

     label04:
        goto label08;

     label05:
        $z1 = virtualinvoke r2.<com.jidesoft.comparator.AlphanumComparator: boolean isCaseSensitive()>();

        if $z1 == 0 goto label06;

        $i15 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4);

        goto label07;

     label06:
        $i15 = virtualinvoke $r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r4);

     label07:
        i13 = $i15;

     label08:
        if i13 == 0 goto label09;

        return i13;

     label09:
        goto label01;

     label10:
        $i2 = $i0 - $i1;

        return $i2;
    }

    public boolean isCaseSensitive()
    {
        com.jidesoft.comparator.AlphanumComparator r0;
        boolean $z0;

        r0 := @this: com.jidesoft.comparator.AlphanumComparator;

        $z0 = r0.<com.jidesoft.comparator.AlphanumComparator: boolean _caseSensitive>;

        return $z0;
    }

    public void setCaseSensitive(boolean)
    {
        com.jidesoft.comparator.AlphanumComparator r0;
        boolean z0;

        r0 := @this: com.jidesoft.comparator.AlphanumComparator;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.comparator.AlphanumComparator: boolean _caseSensitive> = z0;

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        java.lang.CharSequence $r3, $r4;
        com.jidesoft.comparator.AlphanumComparator r0;
        int $i0;
        java.lang.Object r1, r2;

        r0 := @this: com.jidesoft.comparator.AlphanumComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.CharSequence) r1;

        $r3 = (java.lang.CharSequence) r2;

        $i0 = virtualinvoke r0.<com.jidesoft.comparator.AlphanumComparator: int compare(java.lang.CharSequence,java.lang.CharSequence)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        com.jidesoft.comparator.ComparatorContext $r0, $r1;

        $r0 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r0.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("Alphanum");

        <com.jidesoft.comparator.AlphanumComparator: com.jidesoft.comparator.ComparatorContext CONTEXT> = $r0;

        $r1 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r1.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("Alphanum_Ignorecase");

        <com.jidesoft.comparator.AlphanumComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_IGNORE_CASE> = $r1;

        return;
    }
}
