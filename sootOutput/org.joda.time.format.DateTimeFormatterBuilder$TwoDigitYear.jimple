class org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser
{
    private final org.joda.time.DateTimeFieldType iType;
    private final int iPivot;
    private final boolean iLenientParse;

    void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        int i0;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.DateTimeFieldType r1;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int iPivot> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse> = z0;

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>;

        if $z0 == 0 goto label1;

        $b0 = 4;

        goto label2;

     label1:
        $b0 = 2;

     label2:
        return $b0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)
    {
        java.lang.Integer $r4, $r6;
        byte $b42;
        org.joda.time.DateTimeFieldType $r5, $r8;
        java.lang.StringIndexOutOfBoundsException $r7;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r1;
        java.lang.String r0, $r3;
        org.joda.time.format.DateTimeParserBucket r2;
        boolean $z0, z1, z2, $z4, $z5;
        int $i0, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i53, $i54, $i56, $i57, $i58, $i59, $i61, $i62, $i63, $i64, $i66, $i67;
        char $c1, $c6, $c9, $c12, $c27;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r2 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r0 := @parameter1: java.lang.String;

        i31 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i32 = $i0 - i31;

        $z0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>;

        if $z0 != 0 goto label01;

        $i28 = staticinvoke <java.lang.Math: int min(int,int)>(2, i32);

        if $i28 >= 2 goto label20;

        $i44 = (int) -1;

        $i29 = i31 ^ $i44;

        return $i29;

     label01:
        z1 = 0;

        z2 = 0;

        i33 = 0;

     label02:
        if i33 >= i32 goto label09;

        $i26 = i31 + i33;

        $c27 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i26);

        if i33 != 0 goto label07;

        $i45 = (int) $c27;

        if $i45 == 45 goto label03;

        $i46 = (int) $c27;

        if $i46 != 43 goto label07;

     label03:
        z1 = 1;

        $i47 = (int) $c27;

        if $i47 != 45 goto label04;

        $z5 = 1;

        $z4 = 1;

        goto label05;

     label04:
        $z5 = 0;

        $z4 = 0;

     label05:
        z2 = $z5;

        if $z4 == 0 goto label06;

        i33 = i33 + 1;

        goto label02;

     label06:
        i31 = i31 + 1;

        $i49 = (int) -1;

        i32 = i32 + $i49;

        goto label02;

     label07:
        $i50 = (int) $c27;

        if $i50 < 48 goto label09;

        $i51 = (int) $c27;

        if $i51 <= 57 goto label08;

        goto label09;

     label08:
        i33 = i33 + 1;

        goto label02;

     label09:
        if i33 != 0 goto label10;

        $i53 = (int) -1;

        $i25 = i31 ^ $i53;

        return $i25;

     label10:
        if z1 != 0 goto label11;

        if i33 == 2 goto label20;

     label11:
        if i33 < 9 goto label12;

        $i8 = i31 + i33;

        i34 = $i8;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i31, $i8);

        i35 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        goto label19;

     label12:
        i36 = i31;

        if z2 == 0 goto label13;

        i36 = i31 + 1;

     label13:
        i37 = i36 + 1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i36);

        $i54 = (int) $c1;

        i35 = $i54 - 48;

     label14:
        goto label16;

     label15:
        $r7 := @caughtexception;

        $i56 = (int) -1;

        $i30 = i31 ^ $i56;

        return $i30;

     label16:
        i34 = i31 + i33;

     label17:
        if i37 >= i34 goto label18;

        $i3 = i35 << 3;

        $i2 = i35 << 1;

        $i5 = $i3 + $i2;

        $i4 = i37;

        i37 = i37 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i57 = (int) $c6;

        $i7 = $i5 + $i57;

        i35 = $i7 - 48;

        goto label17;

     label18:
        if z2 == 0 goto label19;

        i35 = neg i35;

     label19:
        $r8 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        virtualinvoke r2.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r8, i35);

        return i34;

     label20:
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i31);

        $i58 = (int) $c9;

        if $i58 < 48 goto label21;

        $i59 = (int) $c9;

        if $i59 <= 57 goto label22;

     label21:
        $i61 = (int) -1;

        $i10 = i31 ^ $i61;

        return $i10;

     label22:
        $i62 = (int) $c9;

        i38 = $i62 - 48;

        $i11 = i31 + 1;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i11);

        $i63 = (int) $c12;

        if $i63 < 48 goto label23;

        $i64 = (int) $c12;

        if $i64 <= 57 goto label24;

     label23:
        $i66 = (int) -1;

        $i13 = i31 ^ $i66;

        return $i13;

     label24:
        $i15 = i38 << 3;

        $i14 = i38 << 1;

        $i16 = $i15 + $i14;

        $i67 = (int) $c12;

        $i17 = $i16 + $i67;

        i39 = $i17 - 48;

        i40 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int iPivot>;

        $r4 = virtualinvoke r2.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>();

        if $r4 == null goto label25;

        $r6 = virtualinvoke r2.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>();

        i40 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label25:
        $i24 = i40 - 50;

        if $i24 < 0 goto label26;

        i41 = $i24 % 100;

        goto label27;

     label26:
        $i18 = $i24 + 1;

        $i19 = $i18 % 100;

        i41 = 99 + $i19;

     label27:
        if i39 >= i41 goto label28;

        $b42 = 100;

        goto label29;

     label28:
        $b42 = 0;

     label29:
        $i20 = $i24 + $b42;

        $i21 = $i20 - i41;

        $i23 = i39 + $i21;

        $r5 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        virtualinvoke r2.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r5, $i23);

        $i22 = i31 + 2;

        return $i22;

        catch java.lang.StringIndexOutOfBoundsException from label13 to label14 with label15;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        return 2;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r3;
        org.joda.time.Chronology r1;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        long l0;
        java.lang.StringBuffer r2;
        java.util.Locale r4;
        int $i1, i2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r2 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        i2 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        $i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>(l0, r1);

        if $i1 >= 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

        goto label2;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r2, $i1, 2);

     label2:
        return;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.DateTimeZone r3;
        org.joda.time.Chronology r1;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        long l0;
        java.util.Locale r4;
        int $i1, i2, $i4, $i6;
        java.io.Writer r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r2 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        i2 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        $i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>(l0, r1);

        if $i1 >= 0 goto label1;

        $i4 = (int) 65533;

        virtualinvoke r2.<java.io.Writer: void write(int)>($i4);

        $i6 = (int) 65533;

        virtualinvoke r2.<java.io.Writer: void write(int)>($i6);

        goto label2;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r2, $i1, 2);

     label2:
        return;
    }

    private int getTwoDigitYear(long, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r1;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        long l0;
        java.lang.RuntimeException $r4;
        int $i1, $i2, i3, $i5;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0);

        i3 = $i1;

        if $i1 >= 0 goto label2;

        i3 = neg $i1;

     label2:
        $i2 = i3 % 100;

     label3:
        return $i2;

     label4:
        $r4 := @caughtexception;

        $i5 = (int) -1;

        return $i5;

        catch java.lang.RuntimeException from label1 to label3 with label4;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        java.lang.StringBuffer r2;
        java.util.Locale r3;
        org.joda.time.ReadablePartial r1;
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r2 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $i0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>(r1);

        if $i0 >= 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

        goto label2;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r2, $i0, 2);

     label2:
        return;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        java.util.Locale r3;
        org.joda.time.ReadablePartial r1;
        int $i0, $i2, $i4;
        java.io.Writer r2;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r2 := @parameter0: java.io.Writer;

        r1 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $i0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>(r1);

        if $i0 >= 0 goto label1;

        $i2 = (int) 65533;

        virtualinvoke r2.<java.io.Writer: void write(int)>($i2);

        $i4 = (int) 65533;

        virtualinvoke r2.<java.io.Writer: void write(int)>($i4);

        goto label2;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r2, $i0, 2);

     label2:
        return;
    }

    private int getTwoDigitYear(org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r1;
        java.lang.RuntimeException $r4;
        org.joda.time.ReadablePartial r0;
        int $i0, $i1, i2, $i4;
        org.joda.time.DateTimeFieldType $r2, $r3;
        boolean $z0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $z0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label5;

     label1:
        $r3 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r3);

        i2 = $i0;

        if $i0 >= 0 goto label2;

        i2 = neg $i0;

     label2:
        $i1 = i2 % 100;

     label3:
        return $i1;

     label4:
        $r4 := @caughtexception;

     label5:
        $i4 = (int) -1;

        return $i4;

        catch java.lang.RuntimeException from label1 to label3 with label4;
    }
}
