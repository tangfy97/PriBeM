public abstract class org.springframework.core.io.VfsUtils extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private static final java.lang.String VFS2_PKG;
    private static final java.lang.String VFS3_PKG;
    private static final java.lang.String VFS_NAME;
    private static org.springframework.core.io.VfsUtils$VFS_VER version;
    private static java.lang.reflect.Method VFS_METHOD_GET_ROOT_URL;
    private static java.lang.reflect.Method VFS_METHOD_GET_ROOT_URI;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_EXISTS;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_SIZE;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_CHILD;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_INPUT_STREAM;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_TO_URL;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_TO_URI;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_NAME;
    private static java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_PATH_NAME;
    protected static java.lang.Class VIRTUAL_FILE_VISITOR_INTERFACE;
    protected static java.lang.reflect.Method VIRTUAL_FILE_METHOD_VISIT;
    private static java.lang.reflect.Method VFS_UTILS_METHOD_IS_NESTED_FILE;
    private static java.lang.reflect.Method VFS_UTILS_METHOD_GET_COMPATIBLE_URI;
    private static java.lang.reflect.Field VISITOR_ATTRIBUTES_FIELD_RECURSE;
    private static java.lang.reflect.Method GET_PHYSICAL_FILE;

    static void <clinit>()
    {
        java.lang.StringBuilder $r9, $r11, $r27, $r29, $r36, $r38, $r44, $r46;
        java.lang.ClassLoader $r2;
        java.lang.String $r10, $r12, $r28, $r30, $r37, $r39, $r45, $r47, r63, $r67, r68, r69, r70, r71, $r72, $r73;
        java.lang.Class[] $r5, $r7, $r25, $r32, $r34, $r41;
        java.lang.reflect.Field $r49;
        java.lang.ClassNotFoundException $r51, $r53, $r56;
        java.lang.IllegalStateException $r52, $r55;
        java.lang.reflect.Method $r6, $r8, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r26, $r33, $r35, $r43;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.core.io.VfsUtils$VFS_VER $r3, $r23, $r24, $r58, $r64, $r65;
        org.apache.commons.logging.Log $r0, $r4, $r50, $r54, $r57, $r59, $r60, $r61;
        java.lang.Class $r1, $r13, $r31, $r40, $r42, $r48, r62;

        <org.springframework.core.io.VfsUtils: java.lang.String VFS_NAME> = "VFS";

        <org.springframework.core.io.VfsUtils: java.lang.String VFS3_PKG> = "org.jboss.vfs.";

        <org.springframework.core.io.VfsUtils: java.lang.String VFS2_PKG> = "org.jboss.virtual.";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/core/io/VfsUtils;");

        <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger> = $r0;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URL> = null;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URI> = null;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_EXISTS> = null;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_UTILS_METHOD_IS_NESTED_FILE> = null;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_UTILS_METHOD_GET_COMPATIBLE_URI> = null;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Field VISITOR_ATTRIBUTES_FIELD_RECURSE> = null;

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method GET_PHYSICAL_FILE> = null;

        $r1 = class "Lorg/springframework/core/io/VfsUtils;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label01:
        r62 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.vfs.VFS");

        $r3 = <org.springframework.core.io.VfsUtils$VFS_VER: org.springframework.core.io.VfsUtils$VFS_VER V3>;

        <org.springframework.core.io.VfsUtils: org.springframework.core.io.VfsUtils$VFS_VER version> = $r3;

        r63 = "org.jboss.vfs.";

        r71 = "org.jboss.vfs.";

        r70 = "org.jboss.vfs.";

        r69 = "org.jboss.vfs.";

        r68 = "org.jboss.vfs.";

        $r4 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label07;

        $r50 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r50.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("JBoss VFS packages for JBoss AS 6 found");

     label02:
        goto label07;

     label03:
        $r56 := @caughtexception;

        $r57 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r57.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label04;

        $r61 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r61.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("JBoss VFS packages for JBoss AS 6 not found; falling back to JBoss AS 5 packages");

     label04:
        r62 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.virtual.VFS");

        $r58 = <org.springframework.core.io.VfsUtils$VFS_VER: org.springframework.core.io.VfsUtils$VFS_VER V2>;

        <org.springframework.core.io.VfsUtils: org.springframework.core.io.VfsUtils$VFS_VER version> = $r58;

        r63 = "org.jboss.virtual.";

        r71 = "org.jboss.virtual.";

        r70 = "org.jboss.virtual.";

        r69 = "org.jboss.virtual.";

        r68 = "org.jboss.virtual.";

        $r59 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r59.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label07;

        $r60 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r60.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("JBoss VFS packages for JBoss AS 5 found");

     label05:
        goto label07;

     label06:
        $r53 := @caughtexception;

        $r54 = <org.springframework.core.io.VfsUtils: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r54.<org.apache.commons.logging.Log: void error(java.lang.Object)>("JBoss VFS packages (for both JBoss AS 5 and 6) were not found - JBoss VFS support disabled");

        $r55 = new java.lang.IllegalStateException;

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot detect JBoss VFS packages", $r53);

        throw $r55;

     label07:
        $r64 = <org.springframework.core.io.VfsUtils$VFS_VER: org.springframework.core.io.VfsUtils$VFS_VER V3>;

        $r65 = <org.springframework.core.io.VfsUtils: org.springframework.core.io.VfsUtils$VFS_VER version>;

        $z4 = virtualinvoke $r64.<org.springframework.core.io.VfsUtils$VFS_VER: boolean equals(java.lang.Object)>($r65);

        if $z4 == 0 goto label08;

        $r73 = "getChild";

        $r72 = "getChild";

        goto label09;

     label08:
        $r73 = "getRoot";

        $r72 = "getRoot";

     label09:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/net/URL;";

        $r6 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r62, $r72, $r5);

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URL> = $r6;

        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Ljava/net/URI;";

        $r8 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r62, $r73, $r7);

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URI> = $r8;

        $r9 = new java.lang.StringBuilder;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r69);

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VirtualFile");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r12);

        $r14 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "exists");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_EXISTS> = $r14;

        $r15 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "getSize");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_SIZE> = $r15;

        $r16 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "openStream");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_INPUT_STREAM> = $r16;

        $r17 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "getLastModified");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED> = $r17;

        $r18 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "toURI");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_TO_URI> = $r18;

        $r19 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "toURL");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_TO_URL> = $r19;

        $r20 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "getName");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_NAME> = $r20;

        $r21 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "getPathName");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_PATH_NAME> = $r21;

        $r22 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>($r13, "getPhysicalFile");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method GET_PHYSICAL_FILE> = $r22;

        $r24 = <org.springframework.core.io.VfsUtils$VFS_VER: org.springframework.core.io.VfsUtils$VFS_VER V3>;

        $r23 = <org.springframework.core.io.VfsUtils: org.springframework.core.io.VfsUtils$VFS_VER version>;

        $z1 = virtualinvoke $r24.<org.springframework.core.io.VfsUtils$VFS_VER: boolean equals(java.lang.Object)>($r23);

        if $z1 == 0 goto label10;

        $r67 = "getChild";

        goto label11;

     label10:
        $r67 = "findChild";

     label11:
        $r25 = newarray (java.lang.Class)[1];

        $r25[0] = class "Ljava/lang/String;";

        $r26 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r13, $r67, $r25);

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_CHILD> = $r26;

        $r27 = new java.lang.StringBuilder;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r68);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VFSUtils");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r30);

        $r32 = newarray (java.lang.Class)[1];

        $r32[0] = $r13;

        $r33 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r31, "getCompatibleURI", $r32);

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_UTILS_METHOD_GET_COMPATIBLE_URI> = $r33;

        $r34 = newarray (java.lang.Class)[1];

        $r34[0] = $r13;

        $r35 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r31, "isNestedFile", $r34);

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_UTILS_METHOD_IS_NESTED_FILE> = $r35;

        $r36 = new java.lang.StringBuilder;

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r70);

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>($r37);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VirtualFileVisitor");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r39);

        <org.springframework.core.io.VfsUtils: java.lang.Class VIRTUAL_FILE_VISITOR_INTERFACE> = $r40;

        $r41 = newarray (java.lang.Class)[1];

        $r42 = <org.springframework.core.io.VfsUtils: java.lang.Class VIRTUAL_FILE_VISITOR_INTERFACE>;

        $r41[0] = $r42;

        $r43 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r13, "visit", $r41);

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_VISIT> = $r43;

        $r44 = new java.lang.StringBuilder;

        $r45 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r71);

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>($r45);

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VisitorAttributes");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r47);

        $r49 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String)>($r48, "RECURSE");

        <org.springframework.core.io.VfsUtils: java.lang.reflect.Field VISITOR_ATTRIBUTES_FIELD_RECURSE> = $r49;

     label12:
        goto label14;

     label13:
        $r51 := @caughtexception;

        $r52 = new java.lang.IllegalStateException;

        specialinvoke $r52.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not detect the JBoss VFS infrastructure", $r51);

        throw $r52;

     label14:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.ClassNotFoundException from label07 to label12 with label13;
    }

    public void <init>()
    {
        org.springframework.core.io.VfsUtils r0;

        r0 := @this: org.springframework.core.io.VfsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static transient java.lang.Object invokeVfsMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r5;
        java.lang.Object[] r2;
        java.io.IOException $r8;
        java.lang.Exception $r4;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Object r1, $r3;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r7 instanceof java.io.IOException;

        if $z0 == 0 goto label4;

        $r8 = (java.io.IOException) $r7;

        throw $r8;

     label4:
        staticinvoke <org.springframework.util.ReflectionUtils: void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r6);

        goto label6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>($r4);

     label6:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid code path reached");

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    static boolean exists(java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Boolean $r4;
        java.lang.Object r0, $r3;
        java.io.IOException $r5;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_EXISTS>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static boolean isReadable(java.lang.Object)
    {
        java.lang.Object[] $r1;
        long $l0;
        java.io.IOException $r5;
        byte $b1;
        java.lang.Long $r4;
        int $i2;
        java.lang.Object r0, $r3;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_SIZE>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static long getLastModified(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        java.lang.Long $r4;
        java.lang.Object r0, $r3;
        long $l0;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Object;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    static java.io.InputStream getInputStream(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        java.lang.Object r0, $r3;
        java.lang.reflect.Method $r2;
        java.io.InputStream $r4;

        r0 := @parameter0: java.lang.Object;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_INPUT_STREAM>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.io.InputStream) $r3;

        return $r4;
    }

    static java.net.URL getURL(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        java.net.URL $r4;
        java.lang.Object r0, $r3;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Object;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_TO_URL>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.net.URL) $r3;

        return $r4;
    }

    static java.net.URI getURI(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        java.lang.Object r0, $r3;
        java.net.URI $r4;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Object;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_TO_URI>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.net.URI) $r3;

        return $r4;
    }

    static java.lang.String getName(java.lang.Object)
    {
        java.lang.IllegalStateException $r6;
        java.lang.Object[] $r1;
        java.lang.Object r0, $r3;
        java.io.IOException $r5;
        java.lang.String $r4;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_NAME>;

        $r1 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, r0, $r1);

        $r4 = (java.lang.String) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot get resource name", $r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static java.lang.Object getRelative(java.net.URL) throws java.io.IOException
    {
        java.lang.Object[] $r0;
        java.net.URL r1;
        java.lang.Object $r3;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: java.net.URL;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URL>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, null, $r0);

        return $r3;
    }

    static java.lang.Object getChild(java.lang.Object, java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        java.lang.Object r0, $r4;
        java.lang.String r2;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_CHILD>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r4 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r3, r0, $r1);

        return $r4;
    }

    static java.io.File getFile(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r3, $r7, $r12;
        java.lang.Boolean $r10;
        java.net.URI $r15;
        java.lang.String $r19, $r24;
        java.lang.reflect.Method $r4, $r8, $r13;
        boolean $z0, $z1;
        java.io.IOException $r16;
        org.springframework.core.NestedIOException $r21;
        java.io.File $r6, $r11;
        java.lang.Exception $r20;
        java.lang.Object r2, $r5, $r9, $r14;
        java.lang.StringBuilder $r17, $r18, $r22, $r23;
        org.springframework.core.io.VfsUtils$VFS_VER $r0, $r1;

        r2 := @parameter0: java.lang.Object;

        $r1 = <org.springframework.core.io.VfsUtils$VFS_VER: org.springframework.core.io.VfsUtils$VFS_VER V2>;

        $r0 = <org.springframework.core.io.VfsUtils: org.springframework.core.io.VfsUtils$VFS_VER version>;

        $z0 = virtualinvoke $r1.<org.springframework.core.io.VfsUtils$VFS_VER: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label4;

        $r8 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_UTILS_METHOD_IS_NESTED_FILE>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r2;

        $r9 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r8, null, $r7);

        $r10 = (java.lang.Boolean) $r9;

        $z1 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("File resolution not supported for nested resource: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label1:
        $r11 = new java.io.File;

        $r13 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_UTILS_METHOD_GET_COMPATIBLE_URI>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r2;

        $r14 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r13, null, $r12);

        $r15 = (java.net.URI) $r14;

        specialinvoke $r11.<java.io.File: void <init>(java.net.URI)>($r15);

     label2:
        return $r11;

     label3:
        $r20 := @caughtexception;

        $r21 = new org.springframework.core.NestedIOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to obtain File reference for ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.springframework.core.NestedIOException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r20);

        throw $r21;

     label4:
        $r4 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method GET_PHYSICAL_FILE>;

        $r3 = newarray (java.lang.Object)[0];

        $r5 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r4, r2, $r3);

        $r6 = (java.io.File) $r5;

        return $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.Object getRoot(java.net.URI) throws java.io.IOException
    {
        java.lang.Object[] $r0;
        java.lang.Object $r3;
        java.net.URI r1;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: java.net.URI;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URI>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, null, $r0);

        return $r3;
    }

    protected static java.lang.Object getRoot(java.net.URL) throws java.io.IOException
    {
        java.lang.Object[] $r0;
        java.net.URL r1;
        java.lang.Object $r3;
        java.lang.reflect.Method $r2;

        r1 := @parameter0: java.net.URL;

        $r2 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VFS_METHOD_GET_ROOT_URL>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = staticinvoke <org.springframework.core.io.VfsUtils: java.lang.Object invokeVfsMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, null, $r0);

        return $r3;
    }

    protected static java.lang.Object doGetVisitorAttribute()
    {
        java.lang.Object $r1;
        java.lang.reflect.Field $r0;

        $r0 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Field VISITOR_ATTRIBUTES_FIELD_RECURSE>;

        $r1 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object getField(java.lang.reflect.Field,java.lang.Object)>($r0, null);

        return $r1;
    }

    protected static java.lang.String doGetPath(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        java.lang.String $r3;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.springframework.core.io.VfsUtils: java.lang.reflect.Method VIRTUAL_FILE_METHOD_GET_PATH_NAME>;

        $r2 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object)>($r1, r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }
}
