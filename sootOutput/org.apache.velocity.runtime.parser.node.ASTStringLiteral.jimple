public class org.apache.velocity.runtime.parser.node.ASTStringLiteral extends org.apache.velocity.runtime.parser.node.SimpleNode
{
    private boolean interpolate;
    private org.apache.velocity.runtime.parser.node.SimpleNode nodeTree;
    private java.lang.String image;
    private java.lang.String interpolateimage;
    private boolean containsLineComment;

    public void <init>(int)
    {
        int i0;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: void <init>(int)>(i0);

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean interpolate> = 1;

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree> = null;

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image> = "";

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String interpolateimage> = "";

        return;
    }

    public void <init>(org.apache.velocity.runtime.parser.Parser, int)
    {
        int i0;
        org.apache.velocity.runtime.parser.Parser r1;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        r1 := @parameter0: org.apache.velocity.runtime.parser.Parser;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: void <init>(org.apache.velocity.runtime.parser.Parser,int)>(r1, i0);

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean interpolate> = 1;

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree> = null;

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image> = "";

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String interpolateimage> = "";

        return;
    }

    public java.lang.Object init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object) throws org.apache.velocity.exception.TemplateInitException
    {
        org.apache.velocity.exception.TemplateInitException $r43;
        org.apache.velocity.runtime.parser.Token $r22, $r24, $r26, $r35;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r0;
        java.lang.StringBuffer $r17, $r18, $r30, $r32, $r40, $r42;
        org.apache.velocity.runtime.parser.ParseException $r28;
        java.lang.String $r4, $r5, $r6, $r8, r9, $r16, $r19, $r20, $r21, $r23, $r25, $r27, $r31, $r33, $r36, $r37, $r38, $r39;
        org.apache.velocity.context.InternalContextAdapter r1;
        java.io.StringReader $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.velocity.runtime.parser.node.SimpleNode $r11, $r12, $r14;
        org.apache.velocity.runtime.RuntimeServices $r3, $r10, $r13;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i16, $i17, $i19;
        char $c0, $c1, $c2;
        java.lang.Object r2;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        r1 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: java.lang.Object init(org.apache.velocity.context.InternalContextAdapter,java.lang.Object)>(r1, r2);

        $r3 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $z0 = interfaceinvoke $r3.<org.apache.velocity.runtime.RuntimeServices: boolean getBoolean(java.lang.String,boolean)>("runtime.interpolate.string.literals", 1);

        if $z0 == 0 goto label02;

        $r22 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.Token getFirstToken()>();

        $r23 = $r22.<org.apache.velocity.runtime.parser.Token: java.lang.String image>;

        $z3 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z3 == 0 goto label02;

        $r24 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.Token getFirstToken()>();

        $r25 = $r24.<org.apache.velocity.runtime.parser.Token: java.lang.String image>;

        $i3 = virtualinvoke $r25.<java.lang.String: int indexOf(int)>(36);

        $i13 = (int) -1;

        if $i3 != $i13 goto label01;

        $r26 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.Token getFirstToken()>();

        $r27 = $r26.<org.apache.velocity.runtime.parser.Token: java.lang.String image>;

        $i4 = virtualinvoke $r27.<java.lang.String: int indexOf(int)>(35);

        $i15 = (int) -1;

        if $i4 == $i15 goto label02;

     label01:
        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean interpolate> = $z4;

        $r35 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.Token getFirstToken()>();

        $r36 = $r35.<org.apache.velocity.runtime.parser.Token: java.lang.String image>;

        $i9 = virtualinvoke $r36.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        $r37 = virtualinvoke $r36.<java.lang.String: java.lang.String substring(int,int)>(1, $i10);

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image> = $r37;

        $z5 = virtualinvoke $r36.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z5 == 0 goto label04;

        $r20 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image>;

        $r21 = staticinvoke <org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String unescape(java.lang.String)>($r20);

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image> = $r21;

     label04:
        $c0 = virtualinvoke $r36.<java.lang.String: char charAt(int)>(0);

        $i16 = (int) $c0;

        if $i16 == 34 goto label05;

        $c2 = virtualinvoke $r36.<java.lang.String: char charAt(int)>(0);

        $i17 = (int) $c2;

        if $i17 != 39 goto label06;

     label05:
        $r4 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image>;

        $c1 = virtualinvoke $r36.<java.lang.String: char charAt(int)>(0);

        $r5 = specialinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String replaceQuotes(java.lang.String,char)>($r4, $c1);

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image> = $r5;

     label06:
        $r38 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image>;

        $i11 = virtualinvoke $r38.<java.lang.String: int indexOf(java.lang.String)>("##");

        $i19 = (int) -1;

        if $i11 == $i19 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean containsLineComment> = $z6;

        $z1 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean containsLineComment>;

        if $z1 != 0 goto label09;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r16 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image>;

        $r17 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String interpolateimage> = $r19;

        goto label10;

     label09:
        $r6 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image>;

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String interpolateimage> = $r6;

     label10:
        $z2 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean interpolate>;

        if $z2 == 0 goto label17;

        $r41 = new java.io.StringReader;

        $r8 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String interpolateimage>;

        specialinvoke $r41.<java.io.StringReader: void <init>(java.lang.String)>($r8);

        if r1 == null goto label11;

        $r39 = interfaceinvoke r1.<org.apache.velocity.context.InternalContextAdapter: java.lang.String getCurrentTemplateName()>();

        goto label12;

     label11:
        $r39 = "StringLiteral";

     label12:
        r9 = $r39;

     label13:
        $r10 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r11 = interfaceinvoke $r10.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.parser.node.SimpleNode parse(java.io.Reader,java.lang.String,boolean)>($r41, $r39, 0);

        r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree> = $r11;

     label14:
        goto label16;

     label15:
        $r28 := @caughtexception;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to parse String literal at ");

        $i5 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getLine()>();

        $i6 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getColumn()>();

        $r31 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(java.lang.String,int,int)>(r9, $i5, $i6);

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $r43 = new org.apache.velocity.exception.TemplateInitException;

        $i7 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getColumn()>();

        $i8 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getLine()>();

        specialinvoke $r43.<org.apache.velocity.exception.TemplateInitException: void <init>(java.lang.String,org.apache.velocity.runtime.parser.ParseException,java.lang.String,int,int)>($r33, $r28, r9, $i7, $i8);

        throw $r43;

     label16:
        $r12 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree>;

        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: void adjTokenLineNums(org.apache.velocity.runtime.parser.node.Node)>($r12);

        $r14 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree>;

        $r13 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.RuntimeServices rsvc>;

        virtualinvoke $r14.<org.apache.velocity.runtime.parser.node.SimpleNode: java.lang.Object init(org.apache.velocity.context.InternalContextAdapter,java.lang.Object)>(r1, $r13);

     label17:
        return r2;

        catch org.apache.velocity.runtime.parser.ParseException from label13 to label14 with label15;
    }

    public void adjTokenLineNums(org.apache.velocity.runtime.parser.node.Node)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.apache.velocity.runtime.parser.Token $r1, r3;
        org.apache.velocity.runtime.parser.node.Node r0;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r2;

        r2 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        r0 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        r3 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.Token getFirstToken()>();

     label1:
        if r3 == null goto label4;

        $r1 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.Token getLastToken()>();

        if r3 == $r1 goto label4;

        $i0 = r3.<org.apache.velocity.runtime.parser.Token: int beginLine>;

        if $i0 != 1 goto label2;

        $i13 = r3.<org.apache.velocity.runtime.parser.Token: int beginColumn>;

        $i14 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getColumn()>();

        $i15 = $i13 + $i14;

        r3.<org.apache.velocity.runtime.parser.Token: int beginColumn> = $i15;

     label2:
        $i1 = r3.<org.apache.velocity.runtime.parser.Token: int endLine>;

        if $i1 != 1 goto label3;

        $i10 = r3.<org.apache.velocity.runtime.parser.Token: int endColumn>;

        $i11 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getColumn()>();

        $i12 = $i10 + $i11;

        r3.<org.apache.velocity.runtime.parser.Token: int endColumn> = $i12;

     label3:
        $i2 = r3.<org.apache.velocity.runtime.parser.Token: int beginLine>;

        $i3 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getLine()>();

        $i4 = $i3 - 1;

        $i5 = $i2 + $i4;

        r3.<org.apache.velocity.runtime.parser.Token: int beginLine> = $i5;

        $i6 = r3.<org.apache.velocity.runtime.parser.Token: int endLine>;

        $i7 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: int getLine()>();

        $i8 = $i7 - 1;

        $i9 = $i6 + $i8;

        r3.<org.apache.velocity.runtime.parser.Token: int endLine> = $i9;

        r3 = r3.<org.apache.velocity.runtime.parser.Token: org.apache.velocity.runtime.parser.Token next>;

        goto label1;

     label4:
        return;
    }

    private java.lang.String replaceQuotes(java.lang.String, char)
    {
        org.apache.commons.lang.text.StrBuilder $r4;
        int $i1, $i2, $i4, $i5, $i7, $i8, i9, $i10, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.String r1, $r2;
        char c0, $c3, $c6;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r3;

        r3 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $i10 = (int) c0;

        if $i10 != 34 goto label1;

        $i8 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("\"");

        $i12 = (int) -1;

        if $i8 == $i12 goto label2;

     label1:
        $i13 = (int) c0;

        if $i13 != 39 goto label3;

        $i7 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("\'");

        $i15 = (int) -1;

        if $i7 != $i15 goto label3;

     label2:
        return r1;

     label3:
        $r4 = new org.apache.commons.lang.text.StrBuilder;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i1);

        i9 = 0;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

     label4:
        if i9 >= $i2 goto label8;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c3);

        $i4 = i9 + 1;

        if $i4 >= $i2 goto label7;

        $i5 = i9 + 1;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);

        $i16 = (int) c0;

        if $i16 != 34 goto label5;

        $i17 = (int) $c6;

        if $i17 != 34 goto label5;

        $i18 = (int) $c3;

        if $i18 == 34 goto label6;

     label5:
        $i19 = (int) c0;

        if $i19 != 39 goto label7;

        $i20 = (int) $c6;

        if $i20 != 39 goto label7;

        $i21 = (int) $c3;

        if $i21 != 39 goto label7;

     label6:
        i9 = i9 + 1;

     label7:
        i9 = i9 + 1;

        goto label4;

     label8:
        $r2 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String unescape(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder $r1;
        char $c5;
        int $i0, $i1, $i2, $i3, $i4, $i6, i7, i8;
        java.lang.String r0, $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("\\u");

        i7 = $i0;

        if $i0 >= 0 goto label1;

        return r0;

     label1:
        $r1 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r1.<org.apache.commons.lang.text.StrBuilder: void <init>()>();

        i8 = 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, i7);

        virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r2);

        $i2 = i7 + 2;

        $i1 = i7 + 6;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $c5 = (char) $i3;

        virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c5);

        $i6 = i7 + 6;

        i8 = $i6;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("\\u", $i6);

        i7 = $i4;

        if $i4 >= 0 goto label3;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i6);

        virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r5;

     label3:
        goto label2;
    }

    public java.lang.Object jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)
    {
        org.apache.velocity.runtime.parser.node.ParserVisitor r0;
        java.lang.Object r2, $r3;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r1;

        r1 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        r0 := @parameter0: org.apache.velocity.runtime.parser.node.ParserVisitor;

        r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.ParserVisitor: java.lang.Object visit(org.apache.velocity.runtime.parser.node.ASTStringLiteral,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public boolean isConstant()
    {
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        $z0 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean interpolate>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Object value(org.apache.velocity.context.InternalContextAdapter)
    {
        int $i0, $i1, $i2;
        java.lang.String $r1, $r5, $r6;
        org.apache.velocity.exception.VelocityException $r9;
        boolean $z0, $z1;
        org.apache.velocity.context.InternalContextAdapter r3;
        java.io.StringWriter $r2;
        java.io.IOException $r7;
        org.apache.velocity.runtime.parser.node.ASTStringLiteral r0;
        java.lang.RuntimeException $r10;
        org.apache.velocity.runtime.log.Log $r8;
        org.apache.velocity.runtime.parser.node.SimpleNode $r4;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTStringLiteral;

        r3 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        $z0 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean interpolate>;

        if $z0 == 0 goto label6;

     label1:
        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        $r4 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree>;

        virtualinvoke $r4.<org.apache.velocity.runtime.parser.node.SimpleNode: boolean render(org.apache.velocity.context.InternalContextAdapter,java.io.Writer)>(r3, $r2);

        $r5 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        $z1 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: boolean containsLineComment>;

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label2:
        return $r6;

     label3:
        return $r5;

     label4:
        $r10 := @caughtexception;

        throw $r10;

     label5:
        $r7 := @caughtexception;

        $r8 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r8.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>("Error in interpolating string literal", $r7);

        $r9 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r9.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>("Error in interpolating string literal", $r7);

        throw $r9;

     label6:
        $r1 = r0.<org.apache.velocity.runtime.parser.node.ASTStringLiteral: java.lang.String image>;

        return $r1;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label5;
    }
}
