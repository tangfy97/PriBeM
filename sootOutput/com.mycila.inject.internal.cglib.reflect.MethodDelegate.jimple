public abstract class com.mycila.inject.internal.cglib.reflect.MethodDelegate extends java.lang.Object
{
    private static final com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey KEY_FACTORY;
    protected java.lang.Object target;
    protected java.lang.String eqMethod;
    static java.lang.Class class$net$sf$cglib$reflect$MethodDelegate$MethodDelegateKey;
    static java.lang.Class class$net$sf$cglib$reflect$MethodDelegate;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.cglib.reflect.MethodDelegate createStatic(java.lang.Class, java.lang.String, java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator $r0;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate $r4;
        java.lang.Class r1, r3;
        java.lang.String r2;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        $r0 = new com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setTargetClass(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setMethodName(java.lang.String)>(r2);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setInterface(java.lang.Class)>(r3);

        $r4 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.cglib.reflect.MethodDelegate create()>();

        return $r4;
    }

    public static com.mycila.inject.internal.cglib.reflect.MethodDelegate create(java.lang.Object, java.lang.String, java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator $r0;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate $r4;
        java.lang.Object r1;
        java.lang.Class r3;
        java.lang.String r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        $r0 = new com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setTarget(java.lang.Object)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setMethodName(java.lang.String)>(r2);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setInterface(java.lang.Class)>(r3);

        $r4 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.cglib.reflect.MethodDelegate create()>();

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate r1, r2;
        java.lang.Object r0, $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate;

        r0 := @parameter0: java.lang.Object;

        r1 = (com.mycila.inject.internal.cglib.reflect.MethodDelegate) r0;

        $r4 = r2.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Object target>;

        $r3 = r1.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Object target>;

        if $r4 != $r3 goto label1;

        $r6 = r2.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.String eqMethod>;

        $r5 = r1.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.String eqMethod>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashCode()
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate r0;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Object target>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.String eqMethod>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public java.lang.Object getTarget()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Object target>;

        return $r1;
    }

    public abstract com.mycila.inject.internal.cglib.reflect.MethodDelegate newInstance(java.lang.Object);

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey access$000()
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey $r0;

        $r0 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate: com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey KEY_FACTORY>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.KeyFactory $r2;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey $r3;
        java.lang.Class $r0, $r4;
        com.mycila.inject.internal.cglib.core.Customizer $r1;

        $r0 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$net$sf$cglib$reflect$MethodDelegate$MethodDelegateKey>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey");

        <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$net$sf$cglib$reflect$MethodDelegate$MethodDelegateKey> = $r4;

        goto label2;

     label1:
        $r4 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$net$sf$cglib$reflect$MethodDelegate$MethodDelegateKey>;

     label2:
        $r1 = <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Customizer CLASS_BY_NAME>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.KeyFactory create(java.lang.Class,com.mycila.inject.internal.cglib.core.Customizer)>($r4, $r1);

        $r3 = (com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey) $r2;

        <com.mycila.inject.internal.cglib.reflect.MethodDelegate: com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey KEY_FACTORY> = $r3;

        return;
    }
}
