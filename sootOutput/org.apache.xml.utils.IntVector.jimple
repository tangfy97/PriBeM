public class org.apache.xml.utils.IntVector extends java.lang.Object implements java.lang.Cloneable
{
    protected int m_blocksize;
    protected int[] m_map;
    protected int m_firstFree;
    protected int m_mapSize;

    public void <init>()
    {
        int[] $r1;
        int $i0, $i1;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = 32;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i0;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $r1 = newarray (int)[$i1];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xml.utils.IntVector r0;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = i0;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = i0;

        $r1 = newarray (int)[i0];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r1;

        return;
    }

    public void <init>(int, int)
    {
        int[] $r1;
        int i0, i1;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = i0;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = i1;

        $r1 = newarray (int)[i1];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r1;

        return;
    }

    public void <init>(org.apache.xml.utils.IntVector)
    {
        int[] $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xml.utils.IntVector r0, r1;

        r0 := @this: org.apache.xml.utils.IntVector;

        r1 := @parameter0: org.apache.xml.utils.IntVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        $i0 = r1.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = $r2;

        $i1 = r1.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i1;

        $i2 = r1.<org.apache.xml.utils.IntVector: int m_firstFree>;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i2;

        $i3 = r1.<org.apache.xml.utils.IntVector: int m_blocksize>;

        r0.<org.apache.xml.utils.IntVector: int m_blocksize> = $i3;

        $r4 = r1.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i4);

        return;
    }

    public final int size()
    {
        int $i0;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        return $i0;
    }

    public final void setSize(int)
    {
        int i0;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = i0;

        return;
    }

    public final void addElement(int)
    {
        int[] $r1, r2, $r3;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i2 < $i1 goto label1;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i9 = $i8 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i9;

        $i10 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r2 = newarray (int)[$i10];

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i12 = $i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i12);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r2;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $r1[$i4] = i3;

        $i5 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i6 = $i5 + 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i6;

        return;
    }

    public final void addElements(int, int)
    {
        int[] $r1, $r2, r3;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i3 = $i1 + i0;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $i10 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i9 = $i8 + i0;

        $i11 = $i10 + $i9;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i11;

        $i12 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r3 = newarray (int)[$i12];

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i13 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i14 = $i13 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, 0, $i14);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r3;

     label1:
        i15 = 0;

        goto label3;

     label2:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i5 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $r1[$i5] = i4;

        $i6 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i7 = $i6 + 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i7;

        i15 = i15 + 1;

     label3:
        if i15 < i0 goto label2;

        return;
    }

    public final void addElements(int)
    {
        int[] r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i3 = $i1 + i0;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i3 < $i2 goto label1;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i6 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i7 = $i6 + i0;

        $i9 = $i8 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i9;

        $i10 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r1 = newarray (int)[$i10];

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i12 = $i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i12);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r1;

     label1:
        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i5 = $i4 + i0;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i5;

        return;
    }

    public final void insertElementAt(int, int)
    {
        int[] $r1, $r2, $r3, r4, $r5;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i6 := @parameter0: int;

        i3 := @parameter1: int;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i2 < $i1 goto label1;

        $i13 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i12 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i14 = $i13 + $i12;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i14;

        $i15 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r4 = newarray (int)[$i15];

        $r5 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i16 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i17 = $i16 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i17);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r4;

     label1:
        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i5 = $i4 - 1;

        if i3 > $i5 goto label2;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = i3 + 1;

        $i9 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i10 = $i9 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i3, $r2, $i11, $i10);

     label2:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i3] = i6;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i8 = $i7 + 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i8;

        return;
    }

    public final void removeAllElements()
    {
        int[] $r1;
        int $i0, i1;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 = 0;

        goto label2;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i1] = -2147483648;

        i1 = i1 + 1;

     label2:
        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i1 < $i0 goto label1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = 0;

        return;
    }

    public final boolean removeElement(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 := @parameter0: int;

        i11 = 0;

        goto label5;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i2 = $r1[i11];

        if $i2 != i1 goto label4;

        $i4 = i11 + 1;

        $i3 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if $i4 >= $i3 goto label2;

        $r4 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i10 = i11 + 1;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i9 = i11 - 1;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i8 = $i7 - i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i10, $r3, $i9, $i8);

        goto label3;

     label2:
        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r2[i11] = -2147483648;

     label3:
        $i5 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i6 = $i5 - 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i6;

        return 1;

     label4:
        i11 = i11 + 1;

     label5:
        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i11 < $i0 goto label1;

        return 0;
    }

    public final void removeElementAt(int)
    {
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i0 <= $i1 goto label1;

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i5 = i0 + 1;

        $r2 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r2, i0, $i4);

        goto label2;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i0] = -2147483648;

     label2:
        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i3 = $i2 - 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i3;

        return;
    }

    public final void setElementAt(int, int)
    {
        int[] $r1;
        int i0, i1;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $r1[i0] = i1;

        return;
    }

    public final int elementAt(int)
    {
        int[] $r1;
        int i0, $i1;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i1 = $r1[i0];

        return $i1;
    }

    public final boolean contains(int)
    {
        int[] $r1;
        int $i0, i1, $i2, i3;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 := @parameter0: int;

        i3 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i2 = $r1[i3];

        if $i2 != i1 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

     label3:
        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i3 < $i0 goto label1;

        return 0;
    }

    public final int indexOf(int, int)
    {
        int[] $r1;
        int i0, $i1, i2, $i3, i4;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i4 = i0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i3 = $r1[i4];

        if $i3 != i2 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

     label3:
        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i4 < $i1 goto label1;

        return -2147483648;
    }

    public final int indexOf(int)
    {
        int[] $r1;
        int $i0, i1, $i2, i3;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 := @parameter0: int;

        i3 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i2 = $r1[i3];

        if $i2 != i1 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

     label3:
        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if i3 < $i0 goto label1;

        return -2147483648;
    }

    public final int lastIndexOf(int)
    {
        int[] $r1;
        int $i0, i1, $i2, i3, $i5;
        org.apache.xml.utils.IntVector r0;

        r0 := @this: org.apache.xml.utils.IntVector;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        i3 = $i0 - 1;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i2 = $r1[i3];

        if $i2 != i1 goto label2;

        return i3;

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

     label3:
        if i3 >= 0 goto label1;

        return -2147483648;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.utils.IntVector $r0, r1;

        r1 := @this: org.apache.xml.utils.IntVector;

        $r0 = new org.apache.xml.utils.IntVector;

        specialinvoke $r0.<org.apache.xml.utils.IntVector: void <init>(org.apache.xml.utils.IntVector)>(r1);

        return $r0;
    }
}
