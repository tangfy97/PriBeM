public class com.hp.hpl.jena.graph.impl.WrappedGraph extends java.lang.Object implements com.hp.hpl.jena.graph.impl.GraphWithPerform
{
    protected com.hp.hpl.jena.graph.Graph base;
    protected com.hp.hpl.jena.graph.BulkUpdateHandler bud;
    protected com.hp.hpl.jena.graph.GraphEventManager gem;

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base> = r1;

        return;
    }

    public boolean dependsOn(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean dependsOn(com.hp.hpl.jena.graph.Graph)>(r1);

        return $z0;
    }

    public com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.TransactionHandler $r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.BulkUpdateHandler $r1, $r2, $r5;
        com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler $r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.BulkUpdateHandler bud>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()>();

        specialinvoke $r3.<com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler: void <init>(com.hp.hpl.jena.graph.impl.GraphWithPerform,com.hp.hpl.jena.graph.BulkUpdateHandler)>(r0, $r5);

        r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.BulkUpdateHandler bud> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.BulkUpdateHandler bud>;

        return $r2;
    }

    public com.hp.hpl.jena.graph.GraphStatisticsHandler getStatisticsHandler()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.GraphStatisticsHandler $r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphStatisticsHandler getStatisticsHandler()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.graph.Capabilities $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.Capabilities getCapabilities()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.GraphEventManager getEventManager()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.impl.SimpleEventManager $r3;
        com.hp.hpl.jena.graph.GraphEventManager $r1, $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager gem>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.graph.impl.SimpleEventManager;

        specialinvoke $r3.<com.hp.hpl.jena.graph.impl.SimpleEventManager: void <init>(com.hp.hpl.jena.graph.Graph)>(r0);

        r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager gem> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager gem>;

        return $r2;
    }

    public com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        return $r2;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>(r0, r1);

        return;
    }

    public void delete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>(r0, r1);

        return;
    }

    public void clear()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.GraphEvents $r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void clear()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r3 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents removeAll>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r3);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.GraphEventManager $r5;
        com.hp.hpl.jena.graph.GraphEvents $r6;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: void remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r6 = staticinvoke <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r6);

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r4;
        com.hp.hpl.jena.graph.TripleMatch r1;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.graph.impl.SimpleEventManager: com.hp.hpl.jena.util.iterator.ExtendedIterator notifyingRemove(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r3);

        return $r4;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5, $r6;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.impl.SimpleEventManager: com.hp.hpl.jena.util.iterator.ExtendedIterator notifyingRemove(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r5);

        return $r6;
    }

    public boolean isIsomorphicWith(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean isIsomorphicWith(com.hp.hpl.jena.graph.Graph)>(r1);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        return $z0;
    }

    public void close()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void close()>();

        return;
    }

    public boolean isClosed()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean isClosed()>();

        return $z0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        int $i0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        $i0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: int size()>();

        return $i0;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.WrappedGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.WrappedGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }
}
