public class org.apache.pdfbox.pdfwriter.COSWriter extends java.lang.Object implements org.apache.pdfbox.cos.ICOSVisitor, java.io.Closeable
{
    public static final byte[] DICT_OPEN;
    public static final byte[] DICT_CLOSE;
    public static final byte[] SPACE;
    public static final byte[] COMMENT;
    public static final byte[] VERSION;
    public static final byte[] GARBAGE;
    public static final byte[] EOF;
    public static final byte[] REFERENCE;
    public static final byte[] XREF;
    public static final byte[] XREF_FREE;
    public static final byte[] XREF_USED;
    public static final byte[] TRAILER;
    public static final byte[] STARTXREF;
    public static final byte[] OBJ;
    public static final byte[] ENDOBJ;
    public static final byte[] ARRAY_OPEN;
    public static final byte[] ARRAY_CLOSE;
    public static final byte[] STREAM;
    public static final byte[] ENDSTREAM;
    private java.text.NumberFormat formatXrefOffset;
    private java.text.NumberFormat formatXrefGeneration;
    private java.text.NumberFormat formatDecimal;
    private java.io.OutputStream output;
    private org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput;
    private long startxref;
    private long number;
    private java.util.Map objectKeys;
    private java.util.Map keyObject;
    private java.util.List xRefEntries;
    private java.util.HashSet objectsToWriteSet;
    private java.util.LinkedList objectsToWrite;
    private java.util.Set writtenObjects;
    private java.util.Set actualsAdded;
    private org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey;
    private org.apache.pdfbox.pdmodel.PDDocument document;
    private boolean willEncrypt;
    private boolean incrementalUpdate;
    private boolean reachedSignature;
    private int[] signaturePosition;
    private int[] byterangePosition;
    private java.io.FileInputStream in;

    public void <init>(java.io.OutputStream)
    {
        java.text.NumberFormat $r4, $r17, $r18;
        java.util.ArrayList $r7;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.util.HashSet $r8, $r10, $r11;
        int[] $r12, $r13;
        java.util.Locale $r3;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r15;
        java.util.LinkedList $r9;
        java.util.Hashtable $r5, $r6;
        java.io.OutputStream r14, $r16;
        java.text.DecimalFormat $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r14 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.text.DecimalFormat;

        specialinvoke $r1.<java.text.DecimalFormat: void <init>(java.lang.String)>("0000000000");

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefOffset> = $r1;

        $r2 = new java.text.DecimalFormat;

        specialinvoke $r2.<java.text.DecimalFormat: void <init>(java.lang.String)>("00000");

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefGeneration> = $r2;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r4 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>($r3);

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatDecimal> = $r4;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> = 0L;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> = 0L;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map keyObject> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.HashSet objectsToWriteSet> = $r8;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.LinkedList objectsToWrite> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded> = $r11;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey> = null;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document> = null;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> = 0;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> = 0;

        $r12 = newarray (int)[2];

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition> = $r12;

        $r13 = newarray (int)[2];

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition> = $r13;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setOutput(java.io.OutputStream)>(r14);

        $r15 = new org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $r16 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output>;

        specialinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void <init>(java.io.OutputStream)>($r16);

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setStandardOutput(org.apache.pdfbox.pdfwriter.COSStandardOutputStream)>($r15);

        $r17 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatDecimal>;

        virtualinvoke $r17.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(10);

        $r18 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatDecimal>;

        virtualinvoke $r18.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);

        return;
    }

    public void <init>(java.io.OutputStream, java.io.FileInputStream)
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.io.OutputStream r1;
        java.io.FileInputStream r2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.io.FileInputStream;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.FileInputStream in> = r2;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> = 1;

        return;
    }

    private void prepareIncrement(org.apache.pdfbox.pdmodel.PDDocument)
    {
        org.apache.pdfbox.cos.COSObject $r8;
        long l0, $l1;
        org.apache.pdfbox.pdfwriter.COSWriter r5;
        byte $b2;
        java.util.Map $r2, $r10, $r11;
        int $i3;
        boolean $z0, $z1;
        org.apache.pdfbox.cos.COSDocument $r1;
        java.util.Iterator $r4;
        org.apache.pdfbox.pdmodel.PDDocument r0;
        java.util.Set $r3;
        java.io.IOException $r12;
        org.apache.pdfbox.persistence.util.COSObjectKey r7;
        org.apache.pdfbox.cos.COSBase $r9;
        java.lang.Object $r6;

        r5 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

     label1:
        if r0 == null goto label6;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: java.util.Map getXrefTable()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        l0 = 0L;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.pdfbox.persistence.util.COSObjectKey) $r6;

        $r8 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.persistence.util.COSObjectKey)>(r7);

        $r9 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

        if $r9 == null goto label3;

        if r7 == null goto label3;

        $z1 = $r9 instanceof org.apache.pdfbox.cos.COSNumber;

        if $z1 != 0 goto label3;

        $r10 = r5.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        $r11 = r5.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map keyObject>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r9);

     label3:
        $l1 = virtualinvoke r7.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $b2 = $l1 cmp l0;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label4;

        l0 = $l1;

     label4:
        goto label2;

     label5:
        virtualinvoke r5.<org.apache.pdfbox.pdfwriter.COSWriter: void setNumber(long)>(l0);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.io.IOException: void printStackTrace()>();

     label8:
        return;

        catch java.io.IOException from label1 to label6 with label7;
    }

    protected void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.util.List $r1;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry r2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r2 := @parameter0: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.io.OutputStream $r2, $r3;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1, $r4;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void close()>();

     label1:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>();

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label2:
        return;
    }

    protected long getNumber()
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        long $l0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number>;

        return $l0;
    }

    public java.util.Map getObjectKeys()
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.util.Map $r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        return $r1;
    }

    protected java.io.OutputStream getOutput()
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output>;

        return $r1;
    }

    protected org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput>;

        return $r1;
    }

    protected long getStartxref()
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        long $l0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref>;

        return $l0;
    }

    protected java.util.List getXRefEntries()
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.util.List $r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>;

        return $r1;
    }

    protected void setNumber(long)
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        long l0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        l0 := @parameter0: long;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> = l0;

        return;
    }

    private void setOutput(java.io.OutputStream)
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: java.io.OutputStream;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1;

        return;
    }

    private void setStandardOutput(org.apache.pdfbox.pdfwriter.COSStandardOutputStream)
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1;

        return;
    }

    protected void setStartxref(long)
    {
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        long l0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        l0 := @parameter0: long;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> = l0;

        return;
    }

    protected void doWriteBody(org.apache.pdfbox.cos.COSDocument) throws java.io.IOException, org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r11;
        java.util.HashSet $r14, $r17;
        int $i0, $i1;
        java.util.LinkedList $r12, $r15, $r18, $r20;
        org.apache.pdfbox.cos.COSName $r2, $r5, $r8;
        org.apache.pdfbox.cos.COSDocument r0;
        org.apache.pdfbox.cos.COSDictionary $r1, r4, r7, r10;
        org.apache.pdfbox.cos.COSBase $r3, $r6, $r9, r19, r21;
        java.lang.Object $r13, $r16;

        r11 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>;

        $r3 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        r4 = (org.apache.pdfbox.cos.COSDictionary) $r3;

        $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>;

        $r6 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5);

        r7 = (org.apache.pdfbox.cos.COSDictionary) $r6;

        $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>;

        $r9 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8);

        r10 = (org.apache.pdfbox.cos.COSDictionary) $r9;

        if r4 == null goto label1;

        specialinvoke r11.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r4);

     label1:
        if r7 == null goto label2;

        specialinvoke r11.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r7);

     label2:
        $r18 = r11.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.LinkedList objectsToWrite>;

        $i0 = virtualinvoke $r18.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label3;

        $r15 = r11.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.LinkedList objectsToWrite>;

        $r16 = virtualinvoke $r15.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r19 = (org.apache.pdfbox.cos.COSBase) $r16;

        $r17 = r11.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.HashSet objectsToWriteSet>;

        virtualinvoke $r17.<java.util.HashSet: boolean remove(java.lang.Object)>(r19);

        virtualinvoke r11.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>(r19);

        goto label2;

     label3:
        r11.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0;

        if r10 == null goto label4;

        specialinvoke r11.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r10);

     label4:
        $r20 = r11.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.LinkedList objectsToWrite>;

        $i1 = virtualinvoke $r20.<java.util.LinkedList: int size()>();

        if $i1 <= 0 goto label5;

        $r12 = r11.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.LinkedList objectsToWrite>;

        $r13 = virtualinvoke $r12.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r21 = (org.apache.pdfbox.cos.COSBase) $r13;

        $r14 = r11.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.HashSet objectsToWriteSet>;

        virtualinvoke $r14.<java.util.HashSet: boolean remove(java.lang.Object)>(r21);

        virtualinvoke r11.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>(r21);

        goto label4;

     label5:
        return;
    }

    private void addObjectToWrite(org.apache.pdfbox.cos.COSBase)
    {
        org.apache.pdfbox.cos.COSObject $r11;
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        java.util.HashSet $r3, $r16;
        java.util.Map $r6, $r7, $r9;
        java.util.LinkedList $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r2, $r4, $r5;
        org.apache.pdfbox.persistence.util.COSObjectKey r14;
        org.apache.pdfbox.cos.COSBase r0, r12, r13;
        java.lang.Object $r8, $r10;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSBase;

        r12 = r0;

        $z0 = r0 instanceof org.apache.pdfbox.cos.COSObject;

        if $z0 == 0 goto label1;

        $r11 = (org.apache.pdfbox.cos.COSObject) r0;

        r12 = virtualinvoke $r11.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

     label1:
        $r2 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z1 != 0 goto label5;

        $r3 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.HashSet objectsToWriteSet>;

        $z2 = virtualinvoke $r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r0);

        if $z2 != 0 goto label5;

        $r4 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded>;

        $z3 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r12);

        if $z3 != 0 goto label5;

        r13 = null;

        r14 = null;

        if r12 == null goto label2;

        $r9 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r14 = (org.apache.pdfbox.persistence.util.COSObjectKey) $r10;

     label2:
        if r14 == null goto label3;

        $r7 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map keyObject>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14);

        r13 = (org.apache.pdfbox.cos.COSBase) $r8;

     label3:
        if r12 == null goto label4;

        $r6 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        $z4 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        if $z4 == 0 goto label4;

        $z5 = virtualinvoke r0.<org.apache.pdfbox.cos.COSBase: boolean isNeedToBeUpdate()>();

        if $z5 != 0 goto label4;

        if r13 == null goto label4;

        $z6 = virtualinvoke r13.<org.apache.pdfbox.cos.COSBase: boolean isNeedToBeUpdate()>();

        if $z6 != 0 goto label4;

        return;

     label4:
        $r15 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.LinkedList objectsToWrite>;

        virtualinvoke $r15.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

        $r16 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.HashSet objectsToWriteSet>;

        virtualinvoke $r16.<java.util.HashSet: boolean add(java.lang.Object)>(r0);

        if r12 == null goto label5;

        $r5 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r12);

     label5:
        return;
    }

    public void doWriteObject(org.apache.pdfbox.cos.COSBase) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r18, $r20, $r24, $r26, $r28, $r32;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r9;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r2;
        org.apache.pdfbox.persistence.util.COSObjectKey $r11, $r14, $r16, $r22;
        org.apache.pdfbox.cos.COSDictionary r10;
        org.apache.pdfbox.cos.COSBase r1, $r4;
        long $l0, $l1, $l2;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r13, $r15, $r19, $r21, $r25, $r27, $r29, $r30, $r31, $r33;
        java.lang.String $r17, $r23;
        org.apache.pdfbox.cos.COSName $r3, r5, $r6, $r7;
        java.io.IOException $r8;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.cos.COSBase;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $z0 = r1 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z0 == 0 goto label3;

        r10 = (org.apache.pdfbox.cos.COSDictionary) r1;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r4 = virtualinvoke r10.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r3);

        $z1 = $r4 instanceof org.apache.pdfbox.cos.COSName;

        if $z1 == 0 goto label3;

        r5 = (org.apache.pdfbox.cos.COSName) $r4;

        $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIG>;

        $z2 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r5);

        if $z2 != 0 goto label2;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_TIME_STAMP>;

        $z3 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label3;

     label2:
        r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> = 1;

     label3:
        $r11 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1);

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey> = $r11;

        $r12 = new org.apache.pdfbox.pdfwriter.COSWriterXRefEntry;

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l0 = virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $r14 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        specialinvoke $r12.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: void <init>(long,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.persistence.util.COSObjectKey)>($l0, r1, $r14);

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r12);

        $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r16 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        $l1 = virtualinvoke $r16.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $r18 = virtualinvoke $r17.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r18);

        $r19 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r20 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r19.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r20);

        $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r22 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        $l2 = virtualinvoke $r22.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r21.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r24);

        $r25 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r26 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r25.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r26);

        $r27 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r28 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] OBJ>;

        virtualinvoke $r27.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r28);

        $r29 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r29.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        virtualinvoke r1.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        $r30 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r30.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r31 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r32 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDOBJ>;

        virtualinvoke $r31.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r32);

        $r33 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r33.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r9.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r8);

        throw $r9;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    protected void doWriteHeader(org.apache.pdfbox.cos.COSDocument) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument r2;
        byte[] $r4, $r7, $r9;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1, $r5, $r6, $r8, $r10;
        java.lang.String $r3;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r2 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDocument: java.lang.String getHeaderString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4);

        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r7 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] COMMENT>;

        virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r7);

        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r9 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] GARBAGE>;

        virtualinvoke $r8.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9);

        $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        return;
    }

    protected void doWriteTrailer(org.apache.pdfbox.cos.COSDocument) throws java.io.IOException, org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r2;
        long $l2;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        int $i0, $i1, $i3, $i4;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1, $r3;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry r10;
        boolean $z0;
        org.apache.pdfbox.cos.COSName $r11, $r13, $r14;
        org.apache.pdfbox.cos.COSDocument r4;
        org.apache.pdfbox.persistence.util.COSObjectKey $r12;
        org.apache.pdfbox.cos.COSDictionary $r5;
        java.util.List $r6, $r7, $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r4 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r2 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] TRAILER>;

        virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r2);

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r5 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r6);

        $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i1);

        r10 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r9;

        $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIZE>;

        $r12 = virtualinvoke r10.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l2 = virtualinvoke $r12.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $i3 = (int) $l2;

        $i4 = $i3 + 1;

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r11, $i4);

        $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z0 != 0 goto label1;

        $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>;

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r14);

     label1:
        $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_CHECKSUM>;

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r13);

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        return;
    }

    protected void doWriteXRef(org.apache.pdfbox.cos.COSDocument) throws java.io.IOException
    {
        byte[] $r8, $r24;
        java.lang.Integer $r12, $r13, $r14;
        org.apache.pdfbox.pdfwriter.COSWriter r3;
        byte $b19;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry $r4, $r17, $r27, $r33, r34, r35;
        boolean $z0, $z1;
        org.apache.pdfbox.persistence.util.COSObjectKey $r26, $r31, $r32;
        org.apache.pdfbox.cos.COSDictionary $r1;
        java.util.List $r5, $r10, $r15, $r18, $r19, $r20, $r28;
        java.lang.Integer[] $r11;
        long $l0, $l1, $l6, $l8, $l14, $l15, $l16, $l17, $l18, l20;
        int i2, $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, i21, i22, i23, $i24;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r6, $r7, $r9, $r22, $r23, $r25;
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSDocument r0;
        java.util.Iterator $r29;
        java.lang.Object $r16, $r21, $r30;

        r3 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>();

        if $z0 == 0 goto label5;

        $r18 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r18);

        $r19 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $r20 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $i12 = interfaceinvoke $r20.<java.util.List: int size()>();

        $i13 = $i12 - 1;

        $r21 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>($i13);

        r34 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r21;

        $r22 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l14 = virtualinvoke $r22.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l14);

        $r23 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r24 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF>;

        virtualinvoke $r23.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r24);

        $r25 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r25.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r26 = virtualinvoke r34.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l15 = virtualinvoke $r26.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $l16 = $l15 + 1L;

        specialinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>(0L, $l16);

        $r27 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>();

        specialinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r27);

        l20 = 0L;

        $r28 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r30 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r30;

     label2:
        $r31 = virtualinvoke r35.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l17 = virtualinvoke $r31.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $l18 = $l17 - 1L;

        $b19 = l20 cmp $l18;

        $i24 = (int) $b19;

        if $i24 >= 0 goto label3;

        $r33 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>();

        specialinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r33);

        goto label2;

     label3:
        $r32 = virtualinvoke r35.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        l20 = virtualinvoke $r32.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        specialinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>(r35);

        goto label1;

     label4:
        goto label9;

     label5:
        $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>;

        $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: long getStartXref()>();

        virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r2, $l0);

        $r4 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>();

        virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r4);

        $r5 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r5);

        $r6 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l1 = virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l1);

        $r7 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF>;

        virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8);

        $r9 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r10 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $r11 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Integer[] getXRefRanges(java.util.List)>($r10);

        i2 = lengthof $r11;

        i21 = 0;

        i22 = 0;

     label6:
        if i21 >= i2 goto label9;

        $i3 = i2 % 2;

        if $i3 != 0 goto label9;

        $r12 = $r11[i21];

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $l6 = (long) $i4;

        $i5 = i21 + 1;

        $r13 = $r11[$i5];

        $i7 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        specialinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>($l6, $l8);

        i23 = 0;

     label7:
        $i9 = i21 + 1;

        $r14 = $r11[$i9];

        $i10 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if i23 >= $i10 goto label8;

        $r15 = r3.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>;

        $i11 = i22;

        i22 = i22 + 1;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i11);

        $r17 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r16;

        specialinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r17);

        i23 = i23 + 1;

        goto label7;

     label8:
        i21 = i21 + 2;

        goto label6;

     label9:
        return;
    }

    private void doWriteXRefInc(org.apache.pdfbox.cos.COSDocument, long) throws java.io.IOException, org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r15;
        java.lang.Integer $r19, $r20, $r21;
        org.apache.pdfbox.pdfwriter.COSWriter r2;
        byte $b6, $b19, $b20;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry $r11, $r24, r26;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.cos.COSDictionary $r5, $r9;
        java.util.List $r3, $r12, $r17, $r22;
        java.lang.Integer[] $r18;
        long $l0, $l1, $l2, $l3, $l4, l5, $l7, $l11, $l13, $l17;
        int $i8, $i9, $i10, $i12, $i14, $i15, $i16, $i18, i21, i22, i23;
        org.apache.pdfbox.pdfparser.PDFXRefStream $r1;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r7, $r13, $r14, $r16;
        org.apache.pdfbox.cos.COSStream $r8;
        org.apache.pdfbox.cos.COSName $r6, $r10, r27;
        org.apache.pdfbox.cos.COSDocument r0;
        java.util.Iterator $r4;
        java.lang.Object $r23, $r25;

        r2 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        l5 := @parameter1: long;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>();

        if $z0 != 0 goto label01;

        $b20 = l5 cmp -1L;

        if $b20 == 0 goto label04;

     label01:
        $r1 = new org.apache.pdfbox.pdfparser.PDFXRefStream;

        specialinvoke $r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label03;

        $r25 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r25;

        virtualinvoke $r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: void addEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>(r26);

        goto label02;

     label03:
        $r5 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>;

        $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: long getStartXref()>();

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r6, $l0);

        virtualinvoke $r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: void addTrailerInfo(org.apache.pdfbox.cos.COSDictionary)>($r5);

        $l1 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>();

        $l2 = $l1 + 2L;

        virtualinvoke $r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: void setSize(long)>($l2);

        $r7 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l3 = virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l3);

        $r8 = virtualinvoke $r1.<org.apache.pdfbox.pdfparser.PDFXRefStream: org.apache.pdfbox.cos.COSStream getStream()>();

        virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>($r8);

     label04:
        $z1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>();

        if $z1 == 0 goto label05;

        $b19 = l5 cmp -1L;

        if $b19 == 0 goto label10;

     label05:
        $r9 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>;

        $l4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: long getStartXref()>();

        virtualinvoke $r9.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r10, $l4);

        $b6 = l5 cmp -1L;

        if $b6 == 0 goto label06;

        r27 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>;

        virtualinvoke $r9.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>(r27);

        $l17 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: long getStartxref()>();

        virtualinvoke $r9.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>(r27, $l17);

     label06:
        $r11 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>();

        virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r11);

        $r12 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r12);

        $r13 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l7 = virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l7);

        $r14 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r15 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF>;

        virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r15);

        $r16 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r16.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r17 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>();

        $r18 = virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Integer[] getXRefRanges(java.util.List)>($r17);

        $i18 = lengthof $r18;

        i21 = 0;

        i22 = 0;

     label07:
        if i21 >= $i18 goto label10;

        $i8 = $i18 % 2;

        if $i8 != 0 goto label10;

        $r19 = $r18[i21];

        $i9 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i9;

        $i10 = i21 + 1;

        $r20 = $r18[$i10];

        $i12 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $l13 = (long) $i12;

        specialinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>($l11, $l13);

        i23 = 0;

     label08:
        $i14 = i21 + 1;

        $r21 = $r18[$i14];

        $i15 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        if i23 >= $i15 goto label09;

        $r22 = r2.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>;

        $i16 = i22;

        i22 = i22 + 1;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>($i16);

        $r24 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r23;

        specialinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r24);

        i23 = i23 + 1;

        goto label08;

     label09:
        i21 = i21 + 2;

        goto label07;

     label10:
        return;
    }

    private void doWriteSignature(org.apache.pdfbox.cos.COSDocument) throws java.io.IOException, org.apache.pdfbox.exceptions.SignatureException
    {
        byte[] $r21, $r29, $r33, $r40, r45;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r46;
        java.lang.Throwable $r44;
        java.io.ByteArrayOutputStream $r49;
        long $l2, $l14, $l24;
        org.apache.pdfbox.cos.COSString $r51;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r3, $r18, $r20, $r22, $r38, $r39, $r42;
        java.lang.String $r15, $r35;
        org.apache.pdfbox.cos.COSDocument r30;
        java.io.IOException $r47, $r52;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        java.io.ByteArrayInputStream $r50;
        int[] $r1, $r2, $r4, $r7, $r10, $r16, $r17, $r19, $r24, $r25, $r26, $r36, $r37;
        int $i0, $i1, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i15, $i16, $i17, $i18, i19, $i20, i21, $i22, $i23, i25, $i27;
        org.apache.pdfbox.pdfwriter.COSFilterInputStream $r48;
        org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface $r31;
        java.io.FileInputStream $r27;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r30 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i0 = $r1[0];

        if $i0 <= 0 goto label12;

        $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition>;

        $i1 = $r2[1];

        if $i1 <= 0 goto label12;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l2 = virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $i4 = (int) $l2;

        $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i3 = $r4[1];

        i5 = $i4 - $i3;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $r7 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i6 = $r7[0];

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i7 = $r10[1];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition>;

        $i9 = $r16[1];

        $r17 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition>;

        $i8 = $r17[0];

        $i10 = $i9 - $i8;

        $i11 = virtualinvoke $r15.<java.lang.String: int length()>();

        i12 = $i10 - $i11;

        if i12 >= 0 goto label01;

        $r47 = new java.io.IOException;

        specialinvoke $r47.<java.io.IOException: void <init>(java.lang.String)>("Can\'t write new ByteRange, not enough space");

        throw $r47;

     label01:
        $r18 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r19 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition>;

        $i13 = $r19[0];

        $l14 = (long) $i13;

        virtualinvoke $r18.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setPos(long)>($l14);

        $r20 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r21 = virtualinvoke $r15.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r20.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r21);

        i25 = 0;

     label02:
        if i25 >= i12 goto label03;

        $r42 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r42.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(int)>(32);

        i25 = i25 + 1;

        goto label02;

     label03:
        $r22 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r22.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setPos(long)>(0L);

        $r48 = new org.apache.pdfbox.pdfwriter.COSFilterInputStream;

        $r27 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.FileInputStream in>;

        $r24 = newarray (int)[4];

        $r24[0] = 0;

        $r25 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i15 = $r25[0];

        $r24[1] = $i15;

        $r26 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i16 = $r26[1];

        $r24[2] = $i16;

        $r24[3] = i5;

        specialinvoke $r48.<org.apache.pdfbox.pdfwriter.COSFilterInputStream: void <init>(java.io.InputStream,int[])>($r27, $r24);

        $r49 = new java.io.ByteArrayOutputStream;

        specialinvoke $r49.<java.io.ByteArrayOutputStream: void <init>()>();

     label04:
        r45 = newarray (byte)[1024];

     label05:
        $i17 = virtualinvoke $r48.<java.io.InputStream: int read(byte[])>(r45);

        $i27 = (int) -1;

        if $i17 == $i27 goto label06;

        virtualinvoke $r49.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r45, 0, $i17);

        goto label05;

     label06:
        goto label13;

     label07:
        goto label10;

     label08:
        $r44 := @caughtexception;

        goto label15;

     label09:
        throw $r44;

     label10:
        $r29 = virtualinvoke $r49.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r31 = virtualinvoke r30.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface getSignatureInterface()>();

        $r50 = new java.io.ByteArrayInputStream;

        specialinvoke $r50.<java.io.ByteArrayInputStream: void <init>(byte[])>($r29);

        $r33 = interfaceinvoke $r31.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface: byte[] sign(java.io.InputStream)>($r50);

        $r51 = new org.apache.pdfbox.cos.COSString;

        specialinvoke $r51.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r33);

        $r35 = virtualinvoke $r51.<org.apache.pdfbox.cos.COSString: java.lang.String getHexString()>();

        $r36 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i18 = $r36[0];

        i19 = $i18 + 1;

        $r37 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $i20 = $r37[1];

        i21 = $i20 - 1;

        $i22 = virtualinvoke $r35.<java.lang.String: int length()>();

        $i23 = i19 + $i22;

        if $i23 <= i21 goto label11;

        $r52 = new java.io.IOException;

        specialinvoke $r52.<java.io.IOException: void <init>(java.lang.String)>("Can\'t write signature, not enough space");

        throw $r52;

     label11:
        $r38 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l24 = (long) i19;

        virtualinvoke $r38.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setPos(long)>($l24);

        $r39 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r40 = virtualinvoke $r35.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r39.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r40);

     label12:
        return;

     label13:
        if $r48 == null goto label14;

        virtualinvoke $r48.<java.io.InputStream: void close()>();

     label14:
        goto label07;

     label15:
        if $r48 == null goto label16;

        virtualinvoke $r48.<java.io.InputStream: void close()>();

     label16:
        goto label09;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void writeXrefRange(long, long) throws java.io.IOException
    {
        byte[] $r3, $r5, $r8;
        long l0, l1;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1, $r4, $r6, $r9;
        java.lang.String $r2, $r7;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r3);

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5);

        $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8);

        $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        return;
    }

    private void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) throws java.io.IOException
    {
        byte[] $r8, $r10, $r12, $r14, $r17;
        long $l0, $l1;
        java.text.NumberFormat $r2, $r4;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r7, $r9, $r11, $r13, $r15, $r16;
        java.lang.String $r3, $r6;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry r1;
        boolean $z0;
        org.apache.pdfbox.persistence.util.COSObjectKey $r5;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry;

        $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefOffset>;

        $l0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long getOffset()>();

        $r3 = virtualinvoke $r2.<java.text.NumberFormat: java.lang.String format(long)>($l0);

        $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefGeneration>;

        $r5 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l1 = virtualinvoke $r5.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        $r6 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(long)>($l1);

        $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r8 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8);

        $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r10 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10);

        $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r12 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r12);

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14);

        $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean isFree()>();

        if $z0 == 0 goto label1;

        $r17 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_FREE>;

        goto label2;

     label1:
        $r17 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_USED>;

     label2:
        virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r17);

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r16.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>();

        return;
    }

    protected java.lang.Integer[] getXRefRanges(java.util.List)
    {
        java.lang.Object[] $r4;
        long $l4;
        java.lang.Integer $r6, $r7, $r12, $r13;
        java.util.ArrayList $r15;
        org.apache.pdfbox.pdfwriter.COSWriter r14;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, i8, i9, i10, $i12, $i14;
        org.apache.pdfbox.pdfwriter.COSWriterXRefEntry r9, $r10;
        boolean $z0;
        java.util.Iterator $r2;
        org.apache.pdfbox.persistence.util.COSObjectKey $r11;
        java.util.List r1;
        java.lang.Object $r8;
        java.lang.Integer[] $r3, $r5;

        r14 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: java.util.List;

        $i12 = (int) -2;

        i8 = $i12;

        i9 = 1;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r8;

        $r10 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r9;

        $r11 = virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.persistence.util.COSObjectKey getKey()>();

        $l4 = virtualinvoke $r11.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        i10 = (int) $l4;

        $i5 = i8 + 1;

        if i10 != $i5 goto label2;

        i9 = i9 + 1;

        i8 = i10;

        goto label4;

     label2:
        $i14 = (int) -2;

        if i8 != $i14 goto label3;

        i8 = i10;

        goto label4;

     label3:
        $i6 = i8 - i9;

        $i7 = $i6 + 1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        i8 = i10;

        i9 = 1;

     label4:
        goto label1;

     label5:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        $i2 = i8 - i9;

        $i3 = $i2 + 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label6:
        $i1 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.lang.Integer)[$i1];

        $r4 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.Integer[]) $r4;

        return $r5;
    }

    private org.apache.pdfbox.persistence.util.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)
    {
        org.apache.pdfbox.cos.COSObject $r9;
        long $l0, $l1, $l2;
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        java.util.Map $r3, $r4, $r5, $r7;
        boolean $z0;
        org.apache.pdfbox.persistence.util.COSObjectKey $r2, r11;
        org.apache.pdfbox.cos.COSBase r0, r10;
        java.lang.Object $r6, $r8;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSBase;

        r10 = r0;

        $z0 = r0 instanceof org.apache.pdfbox.cos.COSObject;

        if $z0 == 0 goto label1;

        $r9 = (org.apache.pdfbox.cos.COSObject) r0;

        r10 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

     label1:
        r11 = null;

        if r10 == null goto label2;

        $r7 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (org.apache.pdfbox.persistence.util.COSObjectKey) $r8;

     label2:
        if r11 != null goto label3;

        $r5 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r11 = (org.apache.pdfbox.persistence.util.COSObjectKey) $r6;

     label3:
        if r11 != null goto label4;

        $l0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>();

        $l1 = $l0 + 1L;

        virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: void setNumber(long)>($l1);

        $r2 = new org.apache.pdfbox.persistence.util.COSObjectKey;

        $l2 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>();

        specialinvoke $r2.<org.apache.pdfbox.persistence.util.COSObjectKey: void <init>(long,long)>($l2, 0L);

        r11 = $r2;

        $r3 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

        if r10 == null goto label4;

        $r4 = r1.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r2);

     label4:
        return r11;
    }

    public java.lang.Object visitFromArray(org.apache.pdfbox.cos.COSArray) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r2, $r6, $r11, $r15;
        org.apache.pdfbox.cos.COSArray r3;
        org.apache.pdfbox.cos.COSObject $r17;
        org.apache.pdfbox.cos.COSString $r13, $r14;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r21;
        int $i0, i1;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1, $r5, $r7, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r4;
        org.apache.pdfbox.cos.COSNull $r16;
        java.io.IOException $r20;
        org.apache.pdfbox.cos.COSDictionary $r19;
        org.apache.pdfbox.cos.COSBase r9, $r18;
        java.lang.Object $r8;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r3 := @parameter0: org.apache.pdfbox.cos.COSArray;

     label01:
        i1 = 0;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r2 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_OPEN>;

        virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r2);

        $r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.pdfbox.cos.COSBase) $r8;

        $z1 = r9 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z1 == 0 goto label04;

        $z5 = virtualinvoke r9.<org.apache.pdfbox.cos.COSBase: boolean isDirect()>();

        if $z5 == 0 goto label03;

        $r19 = (org.apache.pdfbox.cos.COSDictionary) r9;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>($r19);

        goto label11;

     label03:
        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r9);

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r9);

        goto label11;

     label04:
        $z2 = r9 instanceof org.apache.pdfbox.cos.COSObject;

        if $z2 == 0 goto label08;

        $r17 = (org.apache.pdfbox.cos.COSObject) r9;

        $r18 = virtualinvoke $r17.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

        $z4 = $r18 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z4 != 0 goto label05;

        if $r18 != null goto label06;

     label05:
        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r9);

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r9);

        goto label07;

     label06:
        virtualinvoke $r18.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

     label07:
        goto label11;

     label08:
        if r9 != null goto label09;

        $r16 = <org.apache.pdfbox.cos.COSNull: org.apache.pdfbox.cos.COSNull NULL>;

        virtualinvoke $r16.<org.apache.pdfbox.cos.COSNull: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        goto label11;

     label09:
        $z3 = r9 instanceof org.apache.pdfbox.cos.COSString;

        if $z3 == 0 goto label10;

        $r13 = new org.apache.pdfbox.cos.COSString;

        specialinvoke $r13.<org.apache.pdfbox.cos.COSString: void <init>()>();

        $r14 = (org.apache.pdfbox.cos.COSString) r9;

        $r15 = virtualinvoke $r14.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        virtualinvoke $r13.<org.apache.pdfbox.cos.COSString: void append(byte[])>($r15);

        virtualinvoke $r13.<org.apache.pdfbox.cos.COSString: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        goto label11;

     label10:
        virtualinvoke r9.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

     label11:
        i1 = i1 + 1;

        $z6 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $i0 = i1 % 10;

        if $i0 != 0 goto label12;

        $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        goto label13;

     label12:
        $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r11 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11);

     label13:
        goto label02;

     label14:
        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_CLOSE>;

        virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6);

        $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

     label15:
        return null;

     label16:
        $r20 := @caughtexception;

        $r21 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r21.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r20);

        throw $r21;

        catch java.io.IOException from label01 to label15 with label16;
    }

    public java.lang.Object visitFromBoolean(org.apache.pdfbox.cos.COSBoolean) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        org.apache.pdfbox.exceptions.COSVisitorException $r4;
        org.apache.pdfbox.cos.COSBoolean r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r2;
        java.io.IOException $r3;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSBoolean;

     label1:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke r0.<org.apache.pdfbox.cos.COSBoolean: void writePDF(java.io.OutputStream)>($r2);

     label2:
        return null;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r4.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r2, $r8, $r17;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r39;
        int[] $r20, $r21, $r23, $r27, $r28, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r5;
        org.apache.pdfbox.cos.COSDictionary r4, r40;
        org.apache.pdfbox.cos.COSBase r13, $r33, $r35, $r37;
        org.apache.pdfbox.cos.COSObject $r32;
        long $l0, $l3, $l6, $l8;
        int $i1, $i2, $i4, $i5, $i7, $i9;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r1, $r3, $r7, $r9, $r16, $r22, $r24, $r29, $r31, $r41;
        org.apache.pdfbox.cos.COSName $r15, $r18, $r25, $r34, $r36;
        java.util.Map$Entry r11;
        java.util.Iterator $r6;
        java.io.IOException $r38;
        java.lang.Object $r10, $r12, $r14, $r19, $r26;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r4 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

     label01:
        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r2 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_OPEN>;

        virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r2);

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r5 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (org.apache.pdfbox.cos.COSBase) $r12;

        if r13 == null goto label15;

        $r14 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (org.apache.pdfbox.cos.COSName) $r14;

        virtualinvoke $r15.<org.apache.pdfbox.cos.COSName: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r17 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r16.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r17);

        $z1 = r13 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z1 == 0 goto label07;

        r40 = (org.apache.pdfbox.cos.COSDictionary) r13;

        $r34 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>;

        $r35 = virtualinvoke r40.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r34);

        if $r35 == null goto label03;

        virtualinvoke $r35.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1);

     label03:
        $r36 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES>;

        $r37 = virtualinvoke r40.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r36);

        if $r37 == null goto label04;

        virtualinvoke $r37.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1);

     label04:
        $z8 = virtualinvoke r40.<org.apache.pdfbox.cos.COSDictionary: boolean isDirect()>();

        if $z8 == 0 goto label05;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r40);

        goto label06;

     label05:
        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r40);

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r40);

     label06:
        goto label14;

     label07:
        $z2 = r13 instanceof org.apache.pdfbox.cos.COSObject;

        if $z2 == 0 goto label11;

        $r32 = (org.apache.pdfbox.cos.COSObject) r13;

        $r33 = virtualinvoke $r32.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

        $z7 = $r33 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z7 != 0 goto label08;

        if $r33 != null goto label09;

     label08:
        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r13);

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r13);

        goto label10;

     label09:
        virtualinvoke $r33.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

     label10:
        goto label14;

     label11:
        $z3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>;

        if $z3 == 0 goto label12;

        $r25 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS>;

        $r26 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z6 = virtualinvoke $r25.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r26);

        if $z6 == 0 goto label12;

        $r27 = newarray (int)[2];

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition> = $r27;

        $r28 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $r29 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l6 = virtualinvoke $r29.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $i7 = (int) $l6;

        $r28[0] = $i7;

        virtualinvoke r13.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        $r30 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] signaturePosition>;

        $r31 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l8 = virtualinvoke $r31.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $i9 = (int) $l8;

        $r30[1] = $i9;

        goto label14;

     label12:
        $z4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>;

        if $z4 == 0 goto label13;

        $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BYTERANGE>;

        $r19 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z5 = virtualinvoke $r18.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r19);

        if $z5 == 0 goto label13;

        $r20 = newarray (int)[2];

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition> = $r20;

        $r21 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition>;

        $r22 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l0 = virtualinvoke $r22.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $i1 = (int) $l0;

        $i2 = $i1 + 1;

        $r21[0] = $i2;

        virtualinvoke r13.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

        $r23 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: int[] byterangePosition>;

        $r24 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l3 = virtualinvoke $r24.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $i4 = (int) $l3;

        $i5 = $i4 - 1;

        $r23[1] = $i5;

        r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> = 0;

        goto label14;

     label13:
        virtualinvoke r13.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0);

     label14:
        $r41 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r41.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

     label15:
        goto label02;

     label16:
        $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_CLOSE>;

        virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8);

        $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

     label17:
        return null;

     label18:
        $r38 := @caughtexception;

        $r39 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r39.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r38);

        throw $r39;

        catch java.io.IOException from label01 to label17 with label18;
    }

    public java.lang.Object visitFromDocument(org.apache.pdfbox.cos.COSDocument) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r9, $r13, $r16;
        long l1, $l2;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r5, $r7;
        byte $b0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r8, $r10, $r11, $r14, $r15, $r17;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.pdfbox.cos.COSName $r3;
        org.apache.pdfbox.exceptions.SignatureException $r4;
        org.apache.pdfbox.cos.COSDocument r1;
        java.io.IOException $r6;
        org.apache.pdfbox.cos.COSDictionary $r2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDocument;

     label01:
        $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z0 != 0 goto label02;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteHeader(org.apache.pdfbox.cos.COSDocument)>(r1);

     label02:
        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1);

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        l1 = -1L;

        if $r2 == null goto label03;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>;

        l1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r3);

     label03:
        $z1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z1 == 0 goto label04;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteXRefInc(org.apache.pdfbox.cos.COSDocument,long)>(r1, l1);

        goto label05;

     label04:
        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteXRef(org.apache.pdfbox.cos.COSDocument)>(r1);

     label05:
        $z2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z2 == 0 goto label06;

        $z3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>();

        if $z3 == 0 goto label06;

        $b0 = l1 cmp -1L;

        if $b0 == 0 goto label07;

     label06:
        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteTrailer(org.apache.pdfbox.cos.COSDocument)>(r1);

     label07:
        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r9 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STARTXREF>;

        virtualinvoke $r8.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9);

        $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getStartxref()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13);

        $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] EOF>;

        virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16);

        $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        $z4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z4 == 0 goto label08;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteSignature(org.apache.pdfbox.cos.COSDocument)>(r1);

     label08:
        return null;

     label09:
        $r6 := @caughtexception;

        $r7 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r7.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r6);

        throw $r7;

     label10:
        $r4 := @caughtexception;

        $r5 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r5.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r4);

        throw $r5;

        catch java.io.IOException from label01 to label08 with label09;
        catch org.apache.pdfbox.exceptions.SignatureException from label01 to label08 with label10;
    }

    public java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        org.apache.pdfbox.exceptions.COSVisitorException $r4;
        org.apache.pdfbox.cos.COSFloat r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r2;
        java.io.IOException $r3;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSFloat;

     label1:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke r0.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2);

     label2:
        return null;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r4.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object visitFromInt(org.apache.pdfbox.cos.COSInteger) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        org.apache.pdfbox.exceptions.COSVisitorException $r4;
        org.apache.pdfbox.cos.COSInteger r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r2;
        java.io.IOException $r3;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSInteger;

     label1:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke r0.<org.apache.pdfbox.cos.COSInteger: void writePDF(java.io.OutputStream)>($r2);

     label2:
        return null;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r4.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object visitFromName(org.apache.pdfbox.cos.COSName) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.cos.COSName r0;
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        org.apache.pdfbox.exceptions.COSVisitorException $r4;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r2;
        java.io.IOException $r3;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSName;

     label1:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke r0.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2);

     label2:
        return null;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r4.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object visitFromNull(org.apache.pdfbox.cos.COSNull) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r1;
        org.apache.pdfbox.exceptions.COSVisitorException $r4;
        org.apache.pdfbox.cos.COSNull r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r2;
        java.io.IOException $r3;

        r1 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.cos.COSNull;

     label1:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke r0.<org.apache.pdfbox.cos.COSNull: void writePDF(java.io.OutputStream)>($r2);

     label2:
        return null;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r4.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeReference(org.apache.pdfbox.cos.COSBase) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r5, $r7, $r10, $r12, $r14;
        long $l0, $l1;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r16;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r3, $r6, $r8, $r11, $r13;
        java.lang.String $r4, $r9;
        java.io.IOException $r15;
        org.apache.pdfbox.persistence.util.COSObjectKey $r2;
        org.apache.pdfbox.cos.COSBase r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.cos.COSBase;

     label1:
        $r2 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1);

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l0 = virtualinvoke $r2.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5);

        $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r7 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r7);

        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $l1 = virtualinvoke $r2.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r8.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10);

        $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r12 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>;

        virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r12);

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] REFERENCE>;

        virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r16.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r15);

        throw $r16;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object visitFromStream(org.apache.pdfbox.cos.COSStream) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r11, $r15, $r21;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r36, $r37, $r38;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.pdmodel.PDDocument $r22;
        org.apache.pdfbox.persistence.util.COSObjectKey $r24, $r25;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler $r23;
        java.lang.Exception $r31;
        org.apache.pdfbox.cos.COSBase $r3;
        java.lang.Throwable $r30;
        org.apache.pdfbox.cos.COSObject r34, $r35;
        long $l0, $l1, $l2, $l3;
        org.apache.pdfbox.cos.COSInteger $r17, $r19;
        int i4, $i5, $i7;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r10, $r12, $r13, $r14, $r16, $r18;
        java.lang.String $r5, $r6;
        org.apache.pdfbox.cos.COSStream r1;
        org.apache.pdfbox.cos.COSName $r2, $r4, $r8, $r20;
        java.io.IOException $r26, $r28;
        java.io.InputStream $r9, r33;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.cos.COSStream;

        r33 = null;

     label01:
        $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt>;

        if $z0 == 0 goto label02;

        $r22 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.SecurityHandler getSecurityHandler()>();

        $r24 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        $l2 = virtualinvoke $r24.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $r25 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        $l3 = virtualinvoke $r25.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        virtualinvoke $r23.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptStream(org.apache.pdfbox.cos.COSStream,long,long)>(r1, $l2, $l3);

     label02:
        r34 = null;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>;

        $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r4);

        if $r3 == null goto label03;

        $z2 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSBase: boolean isDirect()>();

        if $z2 != 0 goto label04;

     label03:
        $r6 = "XRef";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label05;

     label04:
        $l1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: long getFilteredLength()>();

        $r19 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1);

        virtualinvoke $r19.<org.apache.pdfbox.cos.COSInteger: void setDirect(boolean)>(1);

        $r20 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>;

        virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r20, $r19);

        goto label06;

     label05:
        $r35 = new org.apache.pdfbox.cos.COSObject;

        specialinvoke $r35.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null);

        r34 = $r35;

        $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>;

        virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r8, $r35);

     label06:
        $r9 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getFilteredStream()>();

        r33 = $r9;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r1);

        $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r11 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STREAM>;

        virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11);

        $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>();

        $r21 = newarray (byte)[1024];

        i4 = 0;

     label07:
        $i5 = virtualinvoke $r9.<java.io.InputStream: int read(byte[],int,int)>($r21, 0, 1024);

        $i7 = (int) -1;

        if $i5 == $i7 goto label08;

        $r18 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r18.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[],int,int)>($r21, 0, $i5);

        i4 = i4 + $i5;

        goto label07;

     label08:
        if r34 == null goto label09;

        $l0 = (long) i4;

        $r17 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l0);

        virtualinvoke r34.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>($r17);

     label09:
        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>();

        $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        $r15 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDSTREAM>;

        virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r15);

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke $r16.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>();

        goto label14;

     label10:
        return null;

     label11:
        $r31 := @caughtexception;

        $r36 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r36.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r31);

        throw $r36;

     label12:
        $r30 := @caughtexception;

        goto label19;

     label13:
        throw $r30;

     label14:
        if $r9 == null goto label18;

     label15:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r28 := @caughtexception;

        $r37 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r37.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r28);

        throw $r37;

     label18:
        goto label10;

     label19:
        if r33 == null goto label23;

     label20:
        virtualinvoke r33.<java.io.InputStream: void close()>();

     label21:
        goto label23;

     label22:
        $r26 := @caughtexception;

        $r38 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r38.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r26);

        throw $r38;

     label23:
        goto label13;

        catch java.lang.Exception from label01 to label10 with label11;
        catch java.lang.Throwable from label01 to label10 with label12;
        catch java.lang.Throwable from label11 to label13 with label12;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdmodel.PDDocument $r3;
        long $l0, $l1;
        org.apache.pdfbox.persistence.util.COSObjectKey $r5, $r6;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler $r4;
        org.apache.pdfbox.cos.COSString r1;
        java.lang.Exception $r7;
        org.apache.pdfbox.pdfwriter.COSWriter r0;
        org.apache.pdfbox.exceptions.COSVisitorException $r8;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.cos.COSString;

     label1:
        $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt>;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.SecurityHandler getSecurityHandler()>();

        $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        $l0 = virtualinvoke $r5.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.persistence.util.COSObjectKey currentObjectKey>;

        $l1 = virtualinvoke $r6.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        virtualinvoke $r4.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptString(org.apache.pdfbox.cos.COSString,long,long)>(r1, $l0, $l1);

     label2:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>();

        virtualinvoke r1.<org.apache.pdfbox.cos.COSString: void writePDF(java.io.OutputStream)>($r2);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r8.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r7);

        throw $r8;

     label5:
        return null;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void write(org.apache.pdfbox.cos.COSDocument) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        org.apache.pdfbox.pdfwriter.COSWriter r2;
        org.apache.pdfbox.cos.COSDocument r1;
        org.apache.pdfbox.pdmodel.PDDocument $r0;

        r2 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        $r0 = new org.apache.pdfbox.pdmodel.PDDocument;

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.PDDocument: void <init>(org.apache.pdfbox.cos.COSDocument)>(r1);

        virtualinvoke r2.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument)>($r0);

        return;
    }

    public void write(org.apache.pdfbox.pdmodel.PDDocument) throws org.apache.pdfbox.exceptions.COSVisitorException
    {
        byte[] $r9, $r14, $r21;
        org.apache.pdfbox.exceptions.CryptographyException $r31;
        org.apache.pdfbox.pdfwriter.COSWriter r4;
        org.apache.pdfbox.exceptions.COSVisitorException $r28, $r30, $r32, $r34;
        java.lang.Long $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        org.apache.pdfbox.pdmodel.PDDocument r0, $r5, $r23, $r35;
        java.util.Collection $r16;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler $r6;
        org.apache.pdfbox.cos.COSDictionary $r22, $r25, $r37;
        org.apache.pdfbox.cos.COSBase $r11, $r19, $r39;
        java.security.NoSuchAlgorithmException $r29;
        java.io.UnsupportedEncodingException $r27;
        org.apache.pdfbox.cos.COSArray $r12, $r40;
        java.security.MessageDigest $r7;
        long $l0, $l1;
        org.apache.pdfbox.cos.COSString $r13;
        java.lang.String $r8, $r20;
        org.apache.pdfbox.cos.COSName $r10, $r15, $r26, $r38;
        org.apache.pdfbox.cos.COSDocument $r24, $r36;
        java.util.Iterator $r17;
        java.io.IOException $r33;
        java.lang.Object $r18;

        r4 := @this: org.apache.pdfbox.pdfwriter.COSWriter;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long getDocumentId()>();

        if $r1 != null goto label01;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        goto label02;

     label01:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long getDocumentId()>();

        $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

     label02:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r4.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document> = r0;

        $z0 = r4.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z0 == 0 goto label03;

        specialinvoke r4.<org.apache.pdfbox.pdfwriter.COSWriter: void prepareIncrement(org.apache.pdfbox.pdmodel.PDDocument)>(r0);

     label03:
        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean isAllSecurityToBeRemoved()>();

        if $z1 == 0 goto label04;

        r4.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0;

        $r24 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r25 = virtualinvoke $r24.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r26 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>;

        virtualinvoke $r25.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r26);

        goto label10;

     label04:
        $r5 = r4.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.SecurityHandler getSecurityHandler()>();

        if $r6 == null goto label09;

     label05:
        $r23 = r4.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument)>($r23);

        r4.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 1;

     label06:
        goto label10;

     label07:
        $r33 := @caughtexception;

        $r34 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r34.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r33);

        throw $r34;

     label08:
        $r31 := @caughtexception;

        $r32 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r32.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r31);

        throw $r32;

     label09:
        r4.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0;

     label10:
        $r35 = r4.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r36 = virtualinvoke $r35.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r37 = virtualinvoke $r36.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r38 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>;

        $r39 = virtualinvoke $r37.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r38);

        $r40 = (org.apache.pdfbox.cos.COSArray) $r39;

        if $r40 == null goto label11;

        $z3 = r4.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>;

        if $z3 == 0 goto label17;

     label11:
        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r9);

        $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>;

        $r11 = virtualinvoke $r37.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r10);

        $r22 = (org.apache.pdfbox.cos.COSDictionary) $r11;

        if $r22 == null goto label13;

        $r16 = virtualinvoke $r22.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>();

        $r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (org.apache.pdfbox.cos.COSBase) $r18;

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        $r21 = virtualinvoke $r20.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r21);

        goto label12;

     label13:
        $r12 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r12.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        $r13 = new org.apache.pdfbox.cos.COSString;

        $r14 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>();

        specialinvoke $r13.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r14);

        virtualinvoke $r12.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r13);

        virtualinvoke $r12.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r13);

        $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>;

        virtualinvoke $r37.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r15, $r12);

     label14:
        goto label17;

     label15:
        $r29 := @caughtexception;

        $r30 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r30.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r29);

        throw $r30;

     label16:
        $r27 := @caughtexception;

        $r28 = new org.apache.pdfbox.exceptions.COSVisitorException;

        specialinvoke $r28.<org.apache.pdfbox.exceptions.COSVisitorException: void <init>(java.lang.Exception)>($r27);

        throw $r28;

     label17:
        virtualinvoke $r36.<org.apache.pdfbox.cos.COSDocument: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r4);

        return;

        catch java.io.IOException from label05 to label06 with label07;
        catch org.apache.pdfbox.exceptions.CryptographyException from label05 to label06 with label08;
        catch java.security.NoSuchAlgorithmException from label11 to label14 with label15;
        catch java.io.UnsupportedEncodingException from label11 to label14 with label16;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        $r0 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("<<");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_OPEN> = $r0;

        $r1 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>(">>");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_CLOSE> = $r1;

        $r2 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>(" ");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> = $r2;

        $r3 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("%");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] COMMENT> = $r3;

        $r4 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("PDF-1.4");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] VERSION> = $r4;

        $r5 = newarray (byte)[4];

        $r5[0] = -10;

        $r5[1] = -28;

        $r5[2] = -4;

        $r5[3] = -33;

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] GARBAGE> = $r5;

        $r6 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("%%EOF");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] EOF> = $r6;

        $r7 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("R");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] REFERENCE> = $r7;

        $r8 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("xref");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF> = $r8;

        $r9 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("f");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_FREE> = $r9;

        $r10 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("n");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_USED> = $r10;

        $r11 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("trailer");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] TRAILER> = $r11;

        $r12 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("startxref");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STARTXREF> = $r12;

        $r13 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("obj");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] OBJ> = $r13;

        $r14 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("endobj");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDOBJ> = $r14;

        $r15 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("[");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_OPEN> = $r15;

        $r16 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("]");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_CLOSE> = $r16;

        $r17 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("stream");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STREAM> = $r17;

        $r18 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("endstream");

        <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDSTREAM> = $r18;

        return;
    }
}
