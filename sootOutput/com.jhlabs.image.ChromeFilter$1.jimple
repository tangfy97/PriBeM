class com.jhlabs.image.ChromeFilter$1 extends com.jhlabs.image.TransferFilter
{
    private final com.jhlabs.image.ChromeFilter this$0;

    void <init>(com.jhlabs.image.ChromeFilter)
    {
        com.jhlabs.image.ChromeFilter r1;
        com.jhlabs.image.ChromeFilter$1 r0;

        r0 := @this: com.jhlabs.image.ChromeFilter$1;

        r1 := @parameter0: com.jhlabs.image.ChromeFilter;

        specialinvoke r0.<com.jhlabs.image.TransferFilter: void <init>()>();

        r0.<com.jhlabs.image.ChromeFilter$1: com.jhlabs.image.ChromeFilter this$0> = r1;

        return;
    }

    protected float transferFunction(float)
    {
        double $d0, $d1, $d2, $d3, $d4;
        com.jhlabs.image.ChromeFilter$1 r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10;
        com.jhlabs.image.ChromeFilter $r1, $r2;

        r0 := @this: com.jhlabs.image.ChromeFilter$1;

        f9 := @parameter0: float;

        $r1 = r0.<com.jhlabs.image.ChromeFilter$1: com.jhlabs.image.ChromeFilter this$0>;

        $f0 = staticinvoke <com.jhlabs.image.ChromeFilter: float access$000(com.jhlabs.image.ChromeFilter)>($r1);

        $f1 = f9 * 2.0F;

        $d0 = (double) $f1;

        $d1 = $d0 * 3.141592653589793;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $f2 = (float) $d2;

        $f3 = $f0 * $f2;

        f10 = f9 + $f3;

        $f4 = neg f10;

        $r2 = r0.<com.jhlabs.image.ChromeFilter$1: com.jhlabs.image.ChromeFilter this$0>;

        $f5 = staticinvoke <com.jhlabs.image.ChromeFilter: float access$100(com.jhlabs.image.ChromeFilter)>($r2);

        $f6 = $f4 * $f5;

        $d3 = (double) $f6;

        $d4 = staticinvoke <java.lang.Math: double exp(double)>($d3);

        $f7 = (float) $d4;

        $f8 = 1.0F - $f7;

        return $f8;
    }
}
