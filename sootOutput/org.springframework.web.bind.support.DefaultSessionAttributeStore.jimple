public class org.springframework.web.bind.support.DefaultSessionAttributeStore extends java.lang.Object implements org.springframework.web.bind.support.SessionAttributeStore
{
    private java.lang.String attributeNamePrefix;

    public void <init>()
    {
        org.springframework.web.bind.support.DefaultSessionAttributeStore r0;

        r0 := @this: org.springframework.web.bind.support.DefaultSessionAttributeStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String attributeNamePrefix> = "";

        return;
    }

    public void setAttributeNamePrefix(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.springframework.web.bind.support.DefaultSessionAttributeStore r0;

        r0 := @this: org.springframework.web.bind.support.DefaultSessionAttributeStore;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = "";

     label2:
        r0.<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String attributeNamePrefix> = $r2;

        return;
    }

    public void storeAttribute(org.springframework.web.context.request.WebRequest, java.lang.String, java.lang.Object)
    {
        org.springframework.web.bind.support.DefaultSessionAttributeStore r3;
        org.springframework.web.context.request.WebRequest r0;
        java.lang.Object r2;
        java.lang.String r1, $r4;

        r3 := @this: org.springframework.web.bind.support.DefaultSessionAttributeStore;

        r0 := @parameter0: org.springframework.web.context.request.WebRequest;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "WebRequest must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Attribute name must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Attribute value must not be null");

        $r4 = virtualinvoke r3.<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String getAttributeNameInSession(org.springframework.web.context.request.WebRequest,java.lang.String)>(r0, r1);

        interfaceinvoke r0.<org.springframework.web.context.request.WebRequest: void setAttribute(java.lang.String,java.lang.Object,int)>($r4, r2, 1);

        return;
    }

    public java.lang.Object retrieveAttribute(org.springframework.web.context.request.WebRequest, java.lang.String)
    {
        org.springframework.web.bind.support.DefaultSessionAttributeStore r2;
        org.springframework.web.context.request.WebRequest r0;
        java.lang.Object $r4;
        java.lang.String r1, $r3;

        r2 := @this: org.springframework.web.bind.support.DefaultSessionAttributeStore;

        r0 := @parameter0: org.springframework.web.context.request.WebRequest;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "WebRequest must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Attribute name must not be null");

        $r3 = virtualinvoke r2.<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String getAttributeNameInSession(org.springframework.web.context.request.WebRequest,java.lang.String)>(r0, r1);

        $r4 = interfaceinvoke r0.<org.springframework.web.context.request.WebRequest: java.lang.Object getAttribute(java.lang.String,int)>($r3, 1);

        return $r4;
    }

    public void cleanupAttribute(org.springframework.web.context.request.WebRequest, java.lang.String)
    {
        org.springframework.web.bind.support.DefaultSessionAttributeStore r2;
        org.springframework.web.context.request.WebRequest r0;
        java.lang.String r1, $r3;

        r2 := @this: org.springframework.web.bind.support.DefaultSessionAttributeStore;

        r0 := @parameter0: org.springframework.web.context.request.WebRequest;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "WebRequest must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Attribute name must not be null");

        $r3 = virtualinvoke r2.<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String getAttributeNameInSession(org.springframework.web.context.request.WebRequest,java.lang.String)>(r0, r1);

        interfaceinvoke r0.<org.springframework.web.context.request.WebRequest: void removeAttribute(java.lang.String,int)>($r3, 1);

        return;
    }

    protected java.lang.String getAttributeNameInSession(org.springframework.web.context.request.WebRequest, java.lang.String)
    {
        org.springframework.web.context.request.WebRequest r7;
        org.springframework.web.bind.support.DefaultSessionAttributeStore r1;
        java.lang.StringBuilder $r0, $r5;
        java.lang.String $r2, $r3, r4, $r6;

        r1 := @this: org.springframework.web.bind.support.DefaultSessionAttributeStore;

        r7 := @parameter0: org.springframework.web.context.request.WebRequest;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = r1.<org.springframework.web.bind.support.DefaultSessionAttributeStore: java.lang.String attributeNamePrefix>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
