public class com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble extends com.hp.hpl.jena.datatypes.xsd.XSDDatatype
{

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: void <init>(java.lang.String)>(r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: void <init>(java.lang.String,java.lang.Class)>(r1, r2);

        return;
    }

    public boolean isValidValue(java.lang.Object)
    {
        java.lang.Object r0;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Double;

        return $z0;
    }

    public java.lang.Object parse(java.lang.String) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        java.lang.Object $r2;
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble: void checkWhitespace(java.lang.String)>(r1);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.Object parse(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.Object parseValidated(java.lang.String)
    {
        java.lang.Double $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r5;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r5 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z0 == 0 goto label1;

        $r4 = new java.lang.Double;

        specialinvoke $r4.<java.lang.Double: void <init>(double)>(#Infinity);

        return $r4;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z1 == 0 goto label2;

        $r3 = new java.lang.Double;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>(#-Infinity);

        return $r3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z2 == 0 goto label3;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(#NaN);

        return $r2;

     label3:
        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r0);

        return $r1;
    }

    protected void checkWhitespace(java.lang.String)
    {
        java.lang.String r0, $r1;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r2;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r3;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r0 := @parameter0: java.lang.String;

        $z0 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableWhitespaceCheckingOfTypedLiterals>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,java.lang.String)>(r0, r3, "whitespace violation");

        throw $r2;

     label1:
        return;
    }

    public boolean isEqual(com.hp.hpl.jena.graph.impl.LiteralLabel, com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble r6;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r3;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0, r2;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1;

        r6 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        r2 := @parameter1: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r1 != $r3 goto label1;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
