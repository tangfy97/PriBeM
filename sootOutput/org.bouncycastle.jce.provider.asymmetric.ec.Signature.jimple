public class org.bouncycastle.jce.provider.asymmetric.ec.Signature extends org.bouncycastle.jce.provider.DSABase
{

    void <init>(org.bouncycastle.crypto.Digest, org.bouncycastle.crypto.DSA, org.bouncycastle.jce.provider.DSAEncoder)
    {
        org.bouncycastle.jce.provider.asymmetric.ec.Signature r0;
        org.bouncycastle.crypto.Digest r1;
        org.bouncycastle.crypto.DSA r2;
        org.bouncycastle.jce.provider.DSAEncoder r3;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.Signature;

        r1 := @parameter0: org.bouncycastle.crypto.Digest;

        r2 := @parameter1: org.bouncycastle.crypto.DSA;

        r3 := @parameter2: org.bouncycastle.jce.provider.DSAEncoder;

        specialinvoke r0.<org.bouncycastle.jce.provider.DSABase: void <init>(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.DSA,org.bouncycastle.jce.provider.DSAEncoder)>(r1, r2, r3);

        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        byte[] $r0;
        org.bouncycastle.jce.provider.asymmetric.ec.Signature r3;
        java.security.PublicKey $r1, r8;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter r9;
        org.bouncycastle.crypto.Digest $r4;
        java.lang.Exception $r6;
        java.security.InvalidKeyException $r2, $r7;
        org.bouncycastle.crypto.DSA $r5;
        boolean $z0, $z1;

        r3 := @this: org.bouncycastle.jce.provider.asymmetric.ec.Signature;

        r8 := @parameter0: java.security.PublicKey;

        $z0 = r8 instanceof java.security.interfaces.ECPublicKey;

        if $z0 == 0 goto label1;

        r9 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r8);

        goto label5;

     label1:
        $r0 = interfaceinvoke r8.<java.security.PublicKey: byte[] getEncoded()>();

        $r1 = staticinvoke <org.bouncycastle.jce.provider.JDKKeyFactory: java.security.PublicKey createPublicKeyFromDERStream(byte[])>($r0);

        $z1 = $r1 instanceof java.security.interfaces.ECPublicKey;

        if $z1 == 0 goto label2;

        r9 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r1);

        goto label3;

     label2:
        $r2 = new java.security.InvalidKeyException;

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in ECDSA based signer");

        throw $r2;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in ECDSA based signer");

        throw $r7;

     label5:
        $r4 = r3.<org.bouncycastle.jce.provider.asymmetric.ec.Signature: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Digest: void reset()>();

        $r5 = r3.<org.bouncycastle.jce.provider.asymmetric.ec.Signature: org.bouncycastle.crypto.DSA signer>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, r9);

        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.asymmetric.ec.Signature r3;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.bouncycastle.crypto.Digest $r4;
        java.security.SecureRandom r5;
        java.security.PrivateKey r0;
        org.bouncycastle.crypto.params.ParametersWithRandom $r7;
        java.security.InvalidKeyException $r1;
        org.bouncycastle.crypto.DSA $r6, $r8;
        boolean $z0;

        r3 := @this: org.bouncycastle.jce.provider.asymmetric.ec.Signature;

        r0 := @parameter0: java.security.PrivateKey;

        r5 := @parameter1: java.security.SecureRandom;

        $z0 = r0 instanceof org.bouncycastle.jce.interfaces.ECKey;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>(r0);

        goto label2;

     label1:
        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in ECDSA based signer");

        throw $r1;

     label2:
        $r4 = r3.<org.bouncycastle.jce.provider.asymmetric.ec.Signature: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Digest: void reset()>();

        if r5 == null goto label3;

        $r8 = r3.<org.bouncycastle.jce.provider.asymmetric.ec.Signature: org.bouncycastle.crypto.DSA signer>;

        $r7 = new org.bouncycastle.crypto.params.ParametersWithRandom;

        specialinvoke $r7.<org.bouncycastle.crypto.params.ParametersWithRandom: void <init>(org.bouncycastle.crypto.CipherParameters,java.security.SecureRandom)>($r2, r5);

        interfaceinvoke $r8.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r7);

        goto label4;

     label3:
        $r6 = r3.<org.bouncycastle.jce.provider.asymmetric.ec.Signature: org.bouncycastle.crypto.DSA signer>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r2);

     label4:
        return;
    }
}
