public class org.eclipse.jetty.util.IntrospectionUtil extends java.lang.Object
{

    public void <init>()
    {
        org.eclipse.jetty.util.IntrospectionUtil r0;

        r0 := @this: org.eclipse.jetty.util.IntrospectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isJavaBeanCompliantSetter(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.Class[] $r4;
        java.lang.Class $r1, $r2;
        java.lang.String $r3;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        if $r1 == $r2 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        if $i0 == 1 goto label4;

        return 0;

     label4:
        return 1;
    }

    public static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[], boolean, boolean) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r2, $r5, $r21;
        java.lang.reflect.Method[] $r4;
        int $i0, i1;
        java.lang.String r1, $r3, $r10, $r12, $r18;
        java.lang.reflect.Method $r16, $r17, $r19, r22;
        boolean $z0, z1, z2, $z3, $z4;
        java.lang.Package $r13;
        java.lang.Class[] r15, $r20, $r23;
        java.lang.Class r0, $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r15 := @parameter2: java.lang.Class[];

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        if r0 != null goto label01;

        $r21 = new java.lang.NoSuchMethodException;

        specialinvoke $r21.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("No class");

        throw $r21;

     label01:
        if r1 == null goto label02;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label03;

     label02:
        $r2 = new java.lang.NoSuchMethodException;

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("No method name");

        throw $r2;

     label03:
        r22 = null;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i1 = 0;

     label04:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label08;

        if r22 != null goto label08;

        $r17 = $r4[i1];

        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label07;

        $r19 = $r4[i1];

        $r20 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        if r15 != null goto label05;

        $r23 = newarray (java.lang.Class)[0];

        goto label06;

     label05:
        $r23 = r15;

     label06:
        $z4 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: boolean checkParams(java.lang.Class[],java.lang.Class[],boolean)>($r20, $r23, z2);

        if $z4 == 0 goto label07;

        r22 = $r4[i1];

     label07:
        i1 = i1 + 1;

        goto label04;

     label08:
        if r22 == null goto label09;

        return r22;

     label09:
        if z1 == 0 goto label10;

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r16 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: java.lang.reflect.Method findInheritedMethod(java.lang.Package,java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r13, $r14, r1, r15, z2);

        return $r16;

     label10:
        $r5 = new java.lang.NoSuchMethodException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such method ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on class ");

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r12);

        throw $r5;
    }

    public static java.lang.reflect.Field findField(java.lang.Class, java.lang.String, java.lang.Class, boolean, boolean) throws java.lang.NoSuchFieldException
    {
        java.lang.NoSuchFieldException $r5, $r19, $r20, $r21;
        java.lang.String r1, $r10, $r14;
        boolean z0, $z1, z2, $z3;
        java.lang.Package $r15, $r22;
        java.lang.reflect.Field $r2, $r17, $r24;
        java.lang.Class r0, $r3, r4, $r16, $r18, $r23;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Class;

        z2 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        if r0 != null goto label1;

        $r20 = new java.lang.NoSuchFieldException;

        specialinvoke $r20.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>("No class");

        throw $r20;

     label1:
        if r1 != null goto label2;

        $r19 = new java.lang.NoSuchFieldException;

        specialinvoke $r19.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>("No field name");

        throw $r19;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        if z0 == 0 goto label4;

        $r18 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z3 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label6;

     label3:
        return $r2;

     label4:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 == 0 goto label6;

     label5:
        return $r2;

     label6:
        if z2 == 0 goto label8;

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r16 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r17 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: java.lang.reflect.Field findInheritedField(java.lang.Package,java.lang.Class,java.lang.String,java.lang.Class,boolean)>($r15, $r16, r1, r4, z0);

     label7:
        return $r17;

     label8:
        $r5 = new java.lang.NoSuchFieldException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No field with name ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in class ");

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label9:
        $r21 := @caughtexception;

        $r22 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r23 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r24 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: java.lang.reflect.Field findInheritedField(java.lang.Package,java.lang.Class,java.lang.String,java.lang.Class,boolean)>($r22, $r23, r1, r4, z0);

        return $r24;

        catch java.lang.NoSuchFieldException from label2 to label3 with label9;
        catch java.lang.NoSuchFieldException from label4 to label5 with label9;
        catch java.lang.NoSuchFieldException from label6 to label7 with label9;
        catch java.lang.NoSuchFieldException from label8 to label9 with label9;
    }

    public static boolean isInheritable(java.lang.Package, java.lang.reflect.Member)
    {
        java.lang.Package r0, $r3;
        java.lang.reflect.Member r1;
        int $i0;
        java.lang.Class $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Package;

        r1 := @parameter1: java.lang.reflect.Member;

        if r0 != null goto label1;

        return 0;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $i0 = interfaceinvoke r1.<java.lang.reflect.Member: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i0);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z2 != 0 goto label5;

        $r2 = interfaceinvoke r1.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public static boolean checkParams(java.lang.Class[], java.lang.Class[], boolean)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        boolean z0, $z1, $z2, $z3;
        java.lang.Class[] r0, r1;
        java.lang.Class $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        z0 := @parameter2: boolean;

        if r0 != null goto label03;

        if r1 != null goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        return $z3;

     label03:
        if r1 != null goto label04;

        return 0;

     label04:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label05;

        return 0;

     label05:
        $i2 = lengthof r0;

        if $i2 != 0 goto label06;

        return 1;

     label06:
        i5 = 0;

        if z0 == 0 goto label08;

     label07:
        $i4 = lengthof r0;

        if i5 >= $i4 goto label09;

        $r5 = r0[i5];

        $r4 = r1[i5];

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label09;

        i5 = i5 + 1;

        goto label07;

     label08:
        $i3 = lengthof r0;

        if i5 >= $i3 goto label09;

        $r3 = r0[i5];

        $r2 = r1[i5];

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label09;

        i5 = i5 + 1;

        goto label08;

     label09:
        $i6 = lengthof r0;

        if i5 == $i6 goto label10;

        return 0;

     label10:
        return 1;
    }

    public static boolean isSameSignature(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.Class[] $r2, $r4;
        java.util.List $r3, $r5;
        java.lang.String $r6, $r7;
        java.lang.reflect.Method r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method;

        if r0 != null goto label1;

        return 0;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        $z1 = interfaceinvoke $r3.<java.util.List: boolean containsAll(java.util.Collection)>($r5);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isTypeCompatible(java.lang.Class, java.lang.Class, boolean)
    {
        java.lang.Class r0, r1;
        boolean z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        if r1 != null goto label4;

        return 0;

     label4:
        if z0 == 0 goto label5;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z2;

     label5:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        return $z1;
    }

    public static boolean containsSameMethodSignature(java.lang.reflect.Method, java.lang.Class, boolean)
    {
        java.lang.Package $r4, $r6;
        java.lang.reflect.Method[] $r1;
        int i0, $i1;
        java.lang.Class r0, $r5;
        java.lang.reflect.Method r2, $r3;
        boolean z0, $z1, $z2, z3, z4, z5;

        r2 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Package getPackage()>();

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        z3 = 0;

        z5 = 0;

        z4 = 0;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        if z4 != 0 goto label4;

        $r3 = $r1[i0];

        $z1 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: boolean isSameSignature(java.lang.reflect.Method,java.lang.reflect.Method)>(r2, $r3);

        if $z1 == 0 goto label3;

        z3 = 1;

        z5 = 1;

        z4 = 1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return z5;
    }

    public static boolean containsSameFieldName(java.lang.reflect.Field, java.lang.Class, boolean)
    {
        int i0, $i1;
        java.lang.String $r3, $r5;
        boolean z0, $z1, $z2, z3, z4, z5;
        java.lang.Package $r6, $r8;
        java.lang.reflect.Field $r2, r4;
        java.lang.reflect.Field[] $r1;
        java.lang.Class r0, $r7;

        r4 := @parameter0: java.lang.reflect.Field;

        r0 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Package getPackage()>();

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        z3 = 0;

        z5 = 0;

        z4 = 0;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        if z4 != 0 goto label4;

        $r2 = $r1[i0];

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        z3 = 1;

        z5 = 1;

        z4 = 1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return z5;
    }

    protected static java.lang.reflect.Method findInheritedMethod(java.lang.Package, java.lang.Class, java.lang.String, java.lang.Class[], boolean) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r13, $r14;
        java.lang.reflect.Method[] $r2;
        int $i0, i1;
        java.lang.String r1, $r8;
        java.lang.reflect.Method $r6, $r7, $r10, $r11, r15;
        boolean z0, $z1, $z2, $z3;
        java.lang.Package $r3, r9;
        java.lang.Class[] r5, $r12;
        java.lang.Class r0, $r4;

        r9 := @parameter0: java.lang.Package;

        r0 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.Class[];

        z0 := @parameter4: boolean;

        if r0 != null goto label1;

        $r14 = new java.lang.NoSuchMethodException;

        specialinvoke $r14.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("No class");

        throw $r14;

     label1:
        if r1 != null goto label2;

        $r13 = new java.lang.NoSuchMethodException;

        specialinvoke $r13.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("No method name");

        throw $r13;

     label2:
        r15 = null;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i1 = 0;

     label3:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label5;

        if r15 != null goto label5;

        $r7 = $r2[i1];

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r10 = $r2[i1];

        $z2 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: boolean isInheritable(java.lang.Package,java.lang.reflect.Member)>(r9, $r10);

        if $z2 == 0 goto label4;

        $r11 = $r2[i1];

        $r12 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z3 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: boolean checkParams(java.lang.Class[],java.lang.Class[],boolean)>($r12, r5, z0);

        if $z3 == 0 goto label4;

        r15 = $r2[i1];

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        if r15 == null goto label6;

        return r15;

     label6:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: java.lang.reflect.Method findInheritedMethod(java.lang.Package,java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r3, $r4, r1, r5, z0);

        return $r6;
    }

    protected static java.lang.reflect.Field findInheritedField(java.lang.Package, java.lang.Class, java.lang.String, java.lang.Class, boolean) throws java.lang.NoSuchFieldException
    {
        java.lang.NoSuchFieldException $r9, $r10, $r11;
        java.lang.String r1;
        boolean $z0, z1, $z2;
        java.lang.Package r3, $r4, $r12;
        java.lang.reflect.Field $r2, $r7, $r14;
        java.lang.Class r0, $r5, r6, $r8, $r13;

        r3 := @parameter0: java.lang.Package;

        r0 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.Class;

        z1 := @parameter4: boolean;

        if r0 != null goto label1;

        $r10 = new java.lang.NoSuchFieldException;

        specialinvoke $r10.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>("No class");

        throw $r10;

     label1:
        if r1 != null goto label2;

        $r9 = new java.lang.NoSuchFieldException;

        specialinvoke $r9.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>("No field name");

        throw $r9;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        $z0 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: boolean isInheritable(java.lang.Package,java.lang.reflect.Member)>(r3, $r2);

        if $z0 == 0 goto label4;

        $r8 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z2 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: boolean isTypeCompatible(java.lang.Class,java.lang.Class,boolean)>(r6, $r8, z1);

        if $z2 == 0 goto label4;

     label3:
        return $r2;

     label4:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r7 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: java.lang.reflect.Field findInheritedField(java.lang.Package,java.lang.Class,java.lang.String,java.lang.Class,boolean)>($r4, $r5, r1, r6, z1);

     label5:
        return $r7;

     label6:
        $r11 := @caughtexception;

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r14 = staticinvoke <org.eclipse.jetty.util.IntrospectionUtil: java.lang.reflect.Field findInheritedField(java.lang.Package,java.lang.Class,java.lang.String,java.lang.Class,boolean)>($r12, $r13, r1, r6, z1);

        return $r14;

        catch java.lang.NoSuchFieldException from label2 to label3 with label6;
        catch java.lang.NoSuchFieldException from label4 to label5 with label6;
    }
}
