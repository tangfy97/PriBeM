final class com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream extends java.io.InputStream
{
    private final java.io.InputStream is;

    void <init>(java.io.InputStream)
    {
        com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream r0;
        java.io.InputStream r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream: java.io.InputStream is> = r1;

        return;
    }

    public final void close() throws java.io.IOException
    {
        com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream;

        return;
    }

    public final int read() throws java.io.IOException
    {
        int $i0;
        com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public final int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, $i2;
        com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream r0;
        java.io.InputStream $r2;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream: java.io.InputStream is>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public final int available() throws java.io.IOException
    {
        int $i0;
        com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }
}
