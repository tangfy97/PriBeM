public final class org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)>(r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r5;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest r1;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r4;
        java.lang.String $r2, $r3, $r6;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: java.lang.String getWaveId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setWaveId(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: java.lang.String getWaveletId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setWaveletId(java.lang.String)>($r3);

        $r4 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()>();

        specialinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r5);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r4);

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: java.lang.String getChannelId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setChannelId(java.lang.String)>($r6);

        return;
    }

    public java.lang.String getWaveId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: java.lang.String getWaveId()>();

        return $r2;
    }

    public void setWaveId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder setWaveId(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: java.lang.String getWaveletId()>();

        return $r2;
    }

    public void setWaveletId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder setWaveletId(java.lang.String)>(r1);

        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r3;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDelta()>();

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r3);

        return $r1;
    }

    public void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r5;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r1, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder clearDelta()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getOrCreateProtocolWaveletDeltaProtoImpl(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder setDelta(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r5);

        return;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: java.lang.String getChannelId()>();

        return $r2;
    }

    public void setChannelId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder setChannelId(java.lang.String)>(r1);

        return;
    }

    private org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getOrCreateProtocolWaveletDeltaProtoImpl(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r0;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r3;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r1, $r2;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest build()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r1, $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest)>($r3);

     label2:
        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r6;
        org.waveprotocol.wave.communication.json.RawStringData r7;
        com.google.gson.JsonElement $r9;
        com.google.gson.Gson r8;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r2;
        com.google.gson.JsonPrimitive $r1, $r4, $r10;
        java.lang.String $r3, $r5, $r11;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r7 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r8 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r1 = new com.google.gson.JsonPrimitive;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: java.lang.String getWaveId()>();

        specialinvoke $r1.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r3);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r1);

        $r4 = new com.google.gson.JsonPrimitive;

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: java.lang.String getWaveletId()>();

        specialinvoke $r4.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r5);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r4);

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getDelta()>();

        $r9 = interfaceinvoke $r6.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r7, r8);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("3", $r9);

        $r10 = new com.google.gson.JsonPrimitive;

        $r11 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: java.lang.String getChannelId()>();

        specialinvoke $r10.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r11);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("4", $r10);

        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        com.google.gson.JsonElement r0, $r3, $r5, $r9, $r11;
        com.google.gson.Gson r7;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r2;
        java.lang.String $r4, $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r6;
        org.waveprotocol.wave.communication.json.RawStringData r8;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r7 := @parameter1: com.google.gson.Gson;

        r8 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $r12 = virtualinvoke $r11.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setWaveId(java.lang.String)>($r12);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $r10 = virtualinvoke $r9.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setWaveletId(java.lang.String)>($r10);

     label2:
        $z2 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("3");

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("3");

        $r6 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        specialinvoke $r6.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r6, $r5, r7, r8);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r6);

     label3:
        $z3 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("4");

        if $z3 == 0 goto label4;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("4");

        $r4 = virtualinvoke $r3.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setChannelId(java.lang.String)>($r4);

     label4:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r2, $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest getPB()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequestUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest,org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()
    {
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getDelta()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaRequestProtoImpl: void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaRequest)>($r2);

        return;
    }
}
