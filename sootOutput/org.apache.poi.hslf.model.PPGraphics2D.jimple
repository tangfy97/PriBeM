public final class org.apache.poi.hslf.model.PPGraphics2D extends java.awt.Graphics2D implements java.lang.Cloneable
{
    protected org.apache.poi.util.POILogger log;
    private org.apache.poi.hslf.model.ShapeGroup _group;
    private java.awt.geom.AffineTransform _transform;
    private java.awt.Stroke _stroke;
    private java.awt.Paint _paint;
    private java.awt.Font _font;
    private java.awt.Color _foreground;
    private java.awt.Color _background;
    private java.awt.RenderingHints _hints;

    public void <init>(org.apache.poi.hslf.model.ShapeGroup)
    {
        java.awt.Color $r6, $r8, $r9;
        java.awt.Font $r7;
        org.apache.poi.util.POILogger $r2;
        java.awt.RenderingHints $r10;
        java.awt.geom.AffineTransform $r4;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.lang.Class $r1;
        java.awt.BasicStroke $r5;
        org.apache.poi.hslf.model.ShapeGroup r3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: org.apache.poi.hslf.model.ShapeGroup;

        specialinvoke r0.<java.awt.Graphics2D: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>($r1);

        r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log> = $r2;

        r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group> = r3;

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform> = $r4;

        $r5 = new java.awt.BasicStroke;

        specialinvoke $r5.<java.awt.BasicStroke: void <init>()>();

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Stroke _stroke> = $r5;

        $r6 = <java.awt.Color: java.awt.Color black>;

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint> = $r6;

        $r7 = new java.awt.Font;

        specialinvoke $r7.<java.awt.Font: void <init>(java.lang.String,int,int)>("Arial", 0, 12);

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font> = $r7;

        $r8 = <java.awt.Color: java.awt.Color black>;

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color _background> = $r8;

        $r9 = <java.awt.Color: java.awt.Color white>;

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color _foreground> = $r9;

        $r10 = new java.awt.RenderingHints;

        specialinvoke $r10.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.RenderingHints _hints> = $r10;

        return;
    }

    public org.apache.poi.hslf.model.ShapeGroup getShapeGroup()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.hslf.model.ShapeGroup $r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        return $r1;
    }

    public java.awt.Font getFont()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Font $r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font>;

        return $r1;
    }

    public void setFont(java.awt.Font)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Font r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.Font;

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font> = r1;

        return;
    }

    public java.awt.Color getColor()
    {
        java.awt.Color $r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color _foreground>;

        return $r1;
    }

    public void setColor(java.awt.Color)
    {
        java.awt.Color r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.Color;

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void setPaint(java.awt.Paint)>(r1);

        return;
    }

    public java.awt.Stroke getStroke()
    {
        java.awt.Stroke $r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Stroke _stroke>;

        return $r1;
    }

    public void setStroke(java.awt.Stroke)
    {
        java.awt.Stroke r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.Stroke;

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Stroke _stroke> = r1;

        return;
    }

    public java.awt.Paint getPaint()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Paint $r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint>;

        return $r1;
    }

    public void setPaint(java.awt.Paint)
    {
        java.awt.Color $r2;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        java.awt.Paint r0;
        boolean $z0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r0 := @parameter0: java.awt.Paint;

        if r0 != null goto label1;

        return;

     label1:
        r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint> = r0;

        $z0 = r0 instanceof java.awt.Color;

        if $z0 == 0 goto label2;

        $r2 = (java.awt.Color) r0;

        r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color _foreground> = $r2;

     label2:
        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.poi.hslf.model.PPGraphics2D r1;
        java.awt.geom.AffineTransform $r0, $r2;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r0 = new java.awt.geom.AffineTransform;

        $r2 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r2);

        return $r0;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform $r1, r2;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform> = $r1;

        return;
    }

    public void draw(java.awt.Shape)
    {
        java.awt.Shape r2, $r4;
        java.awt.Color $r11;
        java.awt.geom.AffineTransform $r3;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        org.apache.poi.hslf.model.Freeform $r5;
        java.awt.Paint $r8, $r10;
        java.awt.geom.GeneralPath $r0;
        org.apache.poi.hslf.model.ShapeGroup $r6, $r9;
        org.apache.poi.hslf.model.Fill $r7;
        boolean $z0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r2 := @parameter0: java.awt.Shape;

        $r0 = new java.awt.geom.GeneralPath;

        $r3 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        $r4 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r2);

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r4);

        $r5 = new org.apache.poi.hslf.model.Freeform;

        $r6 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        specialinvoke $r5.<org.apache.poi.hslf.model.Freeform: void <init>(org.apache.poi.hslf.model.Shape)>($r6);

        virtualinvoke $r5.<org.apache.poi.hslf.model.Freeform: void setPath(java.awt.geom.GeneralPath)>($r0);

        $r7 = virtualinvoke $r5.<org.apache.poi.hslf.model.Freeform: org.apache.poi.hslf.model.Fill getFill()>();

        virtualinvoke $r7.<org.apache.poi.hslf.model.Fill: void setForegroundColor(java.awt.Color)>(null);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void applyStroke(org.apache.poi.hslf.model.SimpleShape)>($r5);

        $r8 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint>;

        $z0 = $r8 instanceof java.awt.Color;

        if $z0 == 0 goto label1;

        $r10 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint>;

        $r11 = (java.awt.Color) $r10;

        virtualinvoke $r5.<org.apache.poi.hslf.model.Freeform: void setLineColor(java.awt.Color)>($r11);

     label1:
        $r9 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        virtualinvoke $r9.<org.apache.poi.hslf.model.ShapeGroup: void addShape(org.apache.poi.hslf.model.Shape)>($r5);

        return;
    }

    public void drawString(java.lang.String, float, float)
    {
        java.awt.Color $r17, $r25;
        java.awt.geom.Rectangle2D$Float $r23;
        org.apache.poi.hslf.model.Sheet $r5, $r9;
        boolean $z0, $z1;
        java.awt.Font $r14, $r15, $r18, $r19, $r21;
        org.apache.poi.hslf.usermodel.SlideShow $r6;
        float $f0, $f1, $f2, $f3, $f4, f5, $f6, $f7, $f8, f9;
        org.apache.poi.hslf.model.TextRun $r3, $r7, $r11;
        org.apache.poi.hslf.usermodel.RichTextRun r13;
        java.awt.font.TextLayout $r20;
        int $i0;
        org.apache.poi.hslf.model.ShapeGroup $r2, $r4, $r8, $r24;
        java.lang.String r10, $r16;
        double $d0, $d1;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        org.apache.poi.hslf.usermodel.RichTextRun[] $r12;
        java.awt.font.FontRenderContext $r22;
        org.apache.poi.hslf.model.TextBox $r0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r10 := @parameter0: java.lang.String;

        f5 := @parameter1: float;

        f9 := @parameter2: float;

        $r0 = new org.apache.poi.hslf.model.TextBox;

        $r2 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        specialinvoke $r0.<org.apache.poi.hslf.model.TextBox: void <init>(org.apache.poi.hslf.model.Shape)>($r2);

        $r3 = virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: org.apache.poi.hslf.model.TextRun getTextRun()>();

        $r4 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        $r5 = virtualinvoke $r4.<org.apache.poi.hslf.model.ShapeGroup: org.apache.poi.hslf.model.Sheet getSheet()>();

        $r6 = virtualinvoke $r5.<org.apache.poi.hslf.model.Sheet: org.apache.poi.hslf.usermodel.SlideShow getSlideShow()>();

        virtualinvoke $r3.<org.apache.poi.hslf.model.TextRun: void supplySlideShow(org.apache.poi.hslf.usermodel.SlideShow)>($r6);

        $r7 = virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: org.apache.poi.hslf.model.TextRun getTextRun()>();

        $r8 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        $r9 = virtualinvoke $r8.<org.apache.poi.hslf.model.ShapeGroup: org.apache.poi.hslf.model.Sheet getSheet()>();

        virtualinvoke $r7.<org.apache.poi.hslf.model.TextRun: void setSheet(org.apache.poi.hslf.model.Sheet)>($r9);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setText(java.lang.String)>(r10);

        $r11 = virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: org.apache.poi.hslf.model.TextRun getTextRun()>();

        $r12 = virtualinvoke $r11.<org.apache.poi.hslf.model.TextRun: org.apache.poi.hslf.usermodel.RichTextRun[] getRichTextRuns()>();

        r13 = $r12[0];

        $r14 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font>;

        $i0 = virtualinvoke $r14.<java.awt.Font: int getSize()>();

        virtualinvoke r13.<org.apache.poi.hslf.usermodel.RichTextRun: void setFontSize(int)>($i0);

        $r15 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font>;

        $r16 = virtualinvoke $r15.<java.awt.Font: java.lang.String getFamily()>();

        virtualinvoke r13.<org.apache.poi.hslf.usermodel.RichTextRun: void setFontName(java.lang.String)>($r16);

        $r17 = virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color getColor()>();

        if $r17 == null goto label1;

        $r25 = virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color getColor()>();

        virtualinvoke r13.<org.apache.poi.hslf.usermodel.RichTextRun: void setFontColor(java.awt.Color)>($r25);

     label1:
        $r18 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font>;

        $z0 = virtualinvoke $r18.<java.awt.Font: boolean isBold()>();

        if $z0 == 0 goto label2;

        virtualinvoke r13.<org.apache.poi.hslf.usermodel.RichTextRun: void setBold(boolean)>(1);

     label2:
        $r19 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font>;

        $z1 = virtualinvoke $r19.<java.awt.Font: boolean isItalic()>();

        if $z1 == 0 goto label3;

        virtualinvoke r13.<org.apache.poi.hslf.usermodel.RichTextRun: void setItalic(boolean)>(1);

     label3:
        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setMarginBottom(float)>(0.0F);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setMarginTop(float)>(0.0F);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setMarginLeft(float)>(0.0F);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setMarginRight(float)>(0.0F);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setWordWrap(int)>(2);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setHorizontalAlignment(int)>(0);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setVerticalAlignment(int)>(1);

        $r20 = new java.awt.font.TextLayout;

        $r21 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Font _font>;

        $r22 = virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        specialinvoke $r20.<java.awt.font.TextLayout: void <init>(java.lang.String,java.awt.Font,java.awt.font.FontRenderContext)>(r10, $r21, $r22);

        $f0 = virtualinvoke $r20.<java.awt.font.TextLayout: float getAscent()>();

        $f1 = virtualinvoke $r20.<java.awt.font.TextLayout: float getAdvance()>();

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f6 = (float) $d1;

        $f7 = $f0 * 2.0F;

        $f3 = $f7 / 2.0F;

        $f2 = $f0 / 2.0F;

        $f4 = $f3 + $f2;

        $f8 = f9 - $f4;

        $r23 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r23.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(f5, $f8, $f6, $f7);

        virtualinvoke $r0.<org.apache.poi.hslf.model.TextBox: void setAnchor(java.awt.geom.Rectangle2D)>($r23);

        $r24 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        virtualinvoke $r24.<org.apache.poi.hslf.model.ShapeGroup: void addShape(org.apache.poi.hslf.model.Shape)>($r0);

        return;
    }

    public void fill(java.awt.Shape)
    {
        java.awt.Shape r2, $r4;
        java.awt.geom.AffineTransform $r3;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        org.apache.poi.hslf.model.Freeform $r5;
        java.awt.geom.GeneralPath $r0;
        org.apache.poi.hslf.model.ShapeGroup $r6, $r7;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r2 := @parameter0: java.awt.Shape;

        $r0 = new java.awt.geom.GeneralPath;

        $r3 = r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        $r4 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r2);

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r4);

        $r5 = new org.apache.poi.hslf.model.Freeform;

        $r6 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        specialinvoke $r5.<org.apache.poi.hslf.model.Freeform: void <init>(org.apache.poi.hslf.model.Shape)>($r6);

        virtualinvoke $r5.<org.apache.poi.hslf.model.Freeform: void setPath(java.awt.geom.GeneralPath)>($r0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void applyPaint(org.apache.poi.hslf.model.SimpleShape)>($r5);

        virtualinvoke $r5.<org.apache.poi.hslf.model.Freeform: void setLineColor(java.awt.Color)>(null);

        $r7 = r1.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.hslf.model.ShapeGroup _group>;

        virtualinvoke $r7.<org.apache.poi.hslf.model.ShapeGroup: void addShape(org.apache.poi.hslf.model.Shape)>($r5);

        return;
    }

    public void translate(int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1;
        java.awt.geom.AffineTransform $r1;
        double $d0, $d1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        $d1 = (double) i0;

        $d0 = (double) i1;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d0);

        return;
    }

    public void clip(java.awt.Shape)
    {
        java.awt.Shape r3;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Shape;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public java.awt.Shape getClip()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return null;
    }

    public void scale(double, double)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform $r1;
        double d0, d1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void scale(double,double)>(d0, d1);

        return;
    }

    public void drawRoundRect(int, int, int, int, int, int)
    {
        java.awt.geom.RoundRectangle2D$Float $r0;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.RoundRectangle2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.RoundRectangle2D$Float: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void drawString(java.lang.String, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1;
        float $f0, $f1;
        java.lang.String r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void drawString(java.lang.String,float,float)>(r1, $f1, $f0);

        return;
    }

    public void fillOval(int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.Ellipse2D$Float $r0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.geom.Ellipse2D$Float;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        specialinvoke $r0.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void fillRoundRect(int, int, int, int, int, int)
    {
        java.awt.geom.RoundRectangle2D$Float $r0;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.RoundRectangle2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.RoundRectangle2D$Float: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void fillArc(int, int, int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.awt.geom.Arc2D$Float $r0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.Arc2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.Arc2D$Float: void <init>(float,float,float,float,float,float,int)>($f5, $f4, $f3, $f2, $f1, $f0, 2);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawArc(int, int, int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.awt.geom.Arc2D$Float $r0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.Arc2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.Arc2D$Float: void <init>(float,float,float,float,float,float,int)>($f5, $f4, $f3, $f2, $f1, $f0, 0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void drawPolyline(int[], int[], int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r3;
        int[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.GeneralPath $r0;

        r3 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        if i0 <= 0 goto label3;

        $r0 = new java.awt.geom.GeneralPath;

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>()>();

        $i1 = r1[0];

        $f1 = (float) $i1;

        $i2 = r2[0];

        $f0 = (float) $i2;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f1, $f0);

        i5 = 1;

     label1:
        if i5 >= i0 goto label2;

        $i3 = r1[i5];

        $f3 = (float) $i3;

        $i4 = r2[i5];

        $f2 = (float) $i4;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f3, $f2);

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke r3.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

     label3:
        return;
    }

    public void drawOval(int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.Ellipse2D$Float $r0;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.geom.Ellipse2D$Float;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        specialinvoke $r0.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        java.awt.Color r4;
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.ImageObserver r5;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 := @parameter3: java.awt.Color;

        r5 := @parameter4: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        java.awt.Color r4;
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.ImageObserver r5;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r4 := @parameter5: java.awt.Color;

        r5 := @parameter6: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver)
    {
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.ImageObserver r4;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        r4 := @parameter9: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        java.awt.Color r4;
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.ImageObserver r5;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        r4 := @parameter9: java.awt.Color;

        r5 := @parameter10: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
    {
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.ImageObserver r4;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 := @parameter3: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public void dispose()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        return;
    }

    public void drawLine(int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r1;
        java.awt.geom.Line2D$Float $r0;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.geom.Line2D$Float;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        specialinvoke $r0.<java.awt.geom.Line2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void fillPolygon(int[], int[], int)
    {
        java.awt.Polygon $r0;
        org.apache.poi.hslf.model.PPGraphics2D r3;
        int[] r1, r2;
        int i0;

        r3 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        $r0 = new java.awt.Polygon;

        specialinvoke $r0.<java.awt.Polygon: void <init>(int[],int[],int)>(r1, r2, i0);

        virtualinvoke r3.<org.apache.poi.hslf.model.PPGraphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void fillRect(int, int, int, int)
    {
        java.awt.Rectangle $r0;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawRect(int, int, int, int)
    {
        java.awt.Rectangle $r0;
        org.apache.poi.hslf.model.PPGraphics2D r1;
        int i0, i1, i2, i3;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r1.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void drawPolygon(int[], int[], int)
    {
        java.awt.Polygon $r0;
        org.apache.poi.hslf.model.PPGraphics2D r3;
        int[] r1, r2;
        int i0;

        r3 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        $r0 = new java.awt.Polygon;

        specialinvoke $r0.<java.awt.Polygon: void <init>(int[],int[],int)>(r1, r2, i0);

        virtualinvoke r3.<org.apache.poi.hslf.model.PPGraphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void clipRect(int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Rectangle $r1;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void clip(java.awt.Shape)>($r1);

        return;
    }

    public void setClip(java.awt.Shape)
    {
        java.awt.Shape r3;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Shape;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public java.awt.Rectangle getClipBounds()
    {
        java.awt.Shape $r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Rectangle $r2;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Shape getClip()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        return $r2;
    }

    public void drawString(java.text.AttributedCharacterIterator, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.text.AttributedCharacterIterator r1;
        int i0, i1;
        float $f0, $f1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void drawString(java.text.AttributedCharacterIterator,float,float)>(r1, $f1, $f0);

        return;
    }

    public void clearRect(int, int, int, int)
    {
        java.awt.Color $r2;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Paint $r1;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint getPaint()>();

        $r2 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color getBackground()>();

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void setColor(java.awt.Color)>($r2);

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void fillRect(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void setPaint(java.awt.Paint)>($r1);

        return;
    }

    public void copyArea(int, int, int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        return;
    }

    public void setClip(int, int, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Rectangle $r1;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: void setClip(java.awt.Shape)>($r1);

        return;
    }

    public void rotate(double)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform $r1;
        double d0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void rotate(double)>(d0);

        return;
    }

    public void rotate(double, double, double)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform $r1;
        double d0, d1, d2;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void rotate(double,double,double)>(d0, d1, d2);

        return;
    }

    public void shear(double, double)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform $r1;
        double d0, d1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void shear(double,double)>(d0, d1);

        return;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        java.awt.geom.AffineTransform $r8;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.font.FontRenderContext $r7;
        java.awt.RenderingHints$Key $r1, $r4;
        java.lang.Object $r2, $r3, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r2 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        $r1 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r3 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_FRACTIONALMETRICS_ON>;

        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_FRACTIONALMETRICS>;

        $r6 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r4);

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        $r7 = new java.awt.font.FontRenderContext;

        $r8 = new java.awt.geom.AffineTransform;

        specialinvoke $r8.<java.awt.geom.AffineTransform: void <init>()>();

        specialinvoke $r7.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r8, $z0, $z1);

        return $r7;
    }

    public void transform(java.awt.geom.AffineTransform)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform r1, $r2;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>(r1);

        return;
    }

    public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)
    {
        org.apache.poi.hslf.model.PPGraphics2D r2;
        java.awt.image.BufferedImage $r1, r3;
        int i0, i1;
        java.awt.image.BufferedImageOp r0;

        r2 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: java.awt.image.BufferedImageOp;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = interfaceinvoke r0.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r3, null);

        virtualinvoke r2.<org.apache.poi.hslf.model.PPGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r1, i0, i1, null);

        return;
    }

    public void setBackground(java.awt.Color)
    {
        java.awt.Color r0;
        org.apache.poi.hslf.model.PPGraphics2D r1;

        r1 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return;

     label1:
        r1.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color _background> = r0;

        return;
    }

    public java.awt.Color getBackground()
    {
        java.awt.Color $r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Color _background>;

        return $r1;
    }

    public void setComposite(java.awt.Composite)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Composite r3;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Composite;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public java.awt.Composite getComposite()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return null;
    }

    public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.RenderingHints$Key r1;
        java.awt.RenderingHints $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.RenderingHints$Key;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.RenderingHints _hints>;

        $r3 = virtualinvoke $r2.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.RenderingHints$Key r1;
        java.lang.Object r2;
        java.awt.RenderingHints $r3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.RenderingHints$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.RenderingHints _hints>;

        virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void drawGlyphVector(java.awt.font.GlyphVector, float, float)
    {
        java.awt.Shape $r1;
        org.apache.poi.hslf.model.PPGraphics2D r2;
        float f0, f1;
        java.awt.font.GlyphVector r0;

        r2 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r0 := @parameter0: java.awt.font.GlyphVector;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r1 = virtualinvoke r0.<java.awt.font.GlyphVector: java.awt.Shape getOutline(float,float)>(f0, f1);

        virtualinvoke r2.<org.apache.poi.hslf.model.PPGraphics2D: void fill(java.awt.Shape)>($r1);

        return;
    }

    public java.awt.GraphicsConfiguration getDeviceConfiguration()
    {
        org.apache.poi.hslf.model.PPGraphics2D r3;
        java.awt.GraphicsConfiguration $r2;
        java.awt.GraphicsDevice $r1;
        java.awt.GraphicsEnvironment $r0;

        r3 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.GraphicsDevice getDefaultScreenDevice()>();

        $r2 = virtualinvoke $r1.<java.awt.GraphicsDevice: java.awt.GraphicsConfiguration getDefaultConfiguration()>();

        return $r2;
    }

    public void addRenderingHints(java.util.Map)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.RenderingHints $r2;
        java.util.Map r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.RenderingHints _hints>;

        virtualinvoke $r2.<java.awt.RenderingHints: void putAll(java.util.Map)>(r1);

        return;
    }

    public void translate(double, double)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.geom.AffineTransform $r1;
        double d0, d1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform _transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void translate(double,double)>(d0, d1);

        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, float, float)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.text.AttributedCharacterIterator r3;
        float f0, f1;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.text.AttributedCharacterIterator;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public boolean hit(java.awt.Rectangle, java.awt.Shape, boolean)
    {
        java.awt.Shape $r2, r5;
        java.awt.Stroke $r4;
        java.awt.Rectangle r3;
        java.awt.geom.AffineTransform $r1;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        boolean z0, $z1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Rectangle;

        r5 := @parameter1: java.awt.Shape;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Stroke getStroke()>();

        r5 = interfaceinvoke $r4.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(r5);

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r5);

        $z1 = interfaceinvoke $r2.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(r3);

        return $z1;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.RenderingHints $r1;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.RenderingHints _hints>;

        return $r1;
    }

    public void setRenderingHints(java.util.Map)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.RenderingHints $r1;
        java.util.Map r2;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r2 := @parameter0: java.util.Map;

        $r1 = new java.awt.RenderingHints;

        specialinvoke $r1.<java.awt.RenderingHints: void <init>(java.util.Map)>(r2);

        r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.RenderingHints _hints> = $r1;

        return;
    }

    public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.geom.AffineTransform r4;
        java.awt.image.ImageObserver r5;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        r4 := @parameter1: java.awt.geom.AffineTransform;

        r5 := @parameter2: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)
    {
        java.awt.Image r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.ImageObserver r4;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r4 := @parameter5: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return 0;
    }

    public java.awt.Graphics create()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.hslf.exceptions.HSLFException $r4;
        java.awt.Graphics $r2;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.awt.Graphics) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.poi.hslf.exceptions.HSLFException;

        specialinvoke $r4.<org.apache.poi.hslf.exceptions.HSLFException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.awt.FontMetrics getFontMetrics(java.awt.Font)
    {
        org.apache.poi.hslf.model.PPGraphics2D r3;
        java.awt.FontMetrics $r2;
        java.awt.Font r1;
        java.awt.Toolkit $r0;

        r3 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r1 := @parameter0: java.awt.Font;

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r2 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(r1);

        return $r2;
    }

    public void setXORMode(java.awt.Color)
    {
        java.awt.Color r3;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.Color;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public void setPaintMode()
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        java.awt.image.RenderedImage r3;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.geom.AffineTransform r4;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.image.RenderedImage;

        r4 := @parameter1: java.awt.geom.AffineTransform;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
    {
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.util.POILogger $r1, $r2;
        java.awt.image.renderable.RenderableImage r3;
        java.awt.geom.AffineTransform r4;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r3 := @parameter0: java.awt.image.renderable.RenderableImage;

        r4 := @parameter1: java.awt.geom.AffineTransform;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r1.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: org.apache.poi.util.POILogger log>;

        virtualinvoke $r2.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Not implemented");

     label1:
        return;
    }

    protected void applyStroke(org.apache.poi.hslf.model.SimpleShape)
    {
        java.awt.Stroke $r1, $r2;
        float[] $r5;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.hslf.model.SimpleShape r4;
        float $f0;
        java.awt.BasicStroke r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r4 := @parameter0: org.apache.poi.hslf.model.SimpleShape;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Stroke _stroke>;

        $z0 = $r1 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Stroke _stroke>;

        r3 = (java.awt.BasicStroke) $r2;

        $f0 = virtualinvoke r3.<java.awt.BasicStroke: float getLineWidth()>();

        $d0 = (double) $f0;

        virtualinvoke r4.<org.apache.poi.hslf.model.SimpleShape: void setLineWidth(double)>($d0);

        $r5 = virtualinvoke r3.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r5 == null goto label1;

        virtualinvoke r4.<org.apache.poi.hslf.model.SimpleShape: void setLineDashing(int)>(7);

     label1:
        return;
    }

    protected void applyPaint(org.apache.poi.hslf.model.SimpleShape)
    {
        java.awt.Color $r5;
        org.apache.poi.hslf.model.PPGraphics2D r0;
        org.apache.poi.hslf.model.SimpleShape r2;
        java.awt.Paint $r1, $r4;
        boolean $z0;
        org.apache.poi.hslf.model.Fill $r3;

        r0 := @this: org.apache.poi.hslf.model.PPGraphics2D;

        r2 := @parameter0: org.apache.poi.hslf.model.SimpleShape;

        $r1 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint>;

        $z0 = $r1 instanceof java.awt.Color;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.poi.hslf.model.SimpleShape: org.apache.poi.hslf.model.Fill getFill()>();

        $r4 = r0.<org.apache.poi.hslf.model.PPGraphics2D: java.awt.Paint _paint>;

        $r5 = (java.awt.Color) $r4;

        virtualinvoke $r3.<org.apache.poi.hslf.model.Fill: void setForegroundColor(java.awt.Color)>($r5);

     label1:
        return;
    }
}
