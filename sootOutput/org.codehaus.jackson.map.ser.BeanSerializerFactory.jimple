public class org.codehaus.jackson.map.ser.BeanSerializerFactory extends org.codehaus.jackson.map.ser.BasicSerializerFactory
{
    public static final org.codehaus.jackson.map.ser.BeanSerializerFactory instance;
    protected final org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig;

    protected void <init>(org.codehaus.jackson.map.SerializerFactory$Config)
    {
        org.codehaus.jackson.map.ser.BeanSerializerFactory$ConfigImpl $r1;
        org.codehaus.jackson.map.SerializerFactory$Config r2;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerFactory$Config;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: void <init>()>();

        if r2 != null goto label1;

        $r1 = new org.codehaus.jackson.map.ser.BeanSerializerFactory$ConfigImpl;

        specialinvoke $r1.<org.codehaus.jackson.map.ser.BeanSerializerFactory$ConfigImpl: void <init>()>();

        r2 = $r1;

     label1:
        r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig> = r2;

        return;
    }

    public org.codehaus.jackson.map.SerializerFactory$Config getConfig()
    {
        org.codehaus.jackson.map.SerializerFactory$Config $r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        return $r1;
    }

    public org.codehaus.jackson.map.SerializerFactory withConfig(org.codehaus.jackson.map.SerializerFactory$Config)
    {
        java.lang.IllegalStateException $r5;
        org.codehaus.jackson.map.SerializerFactory$Config r1, $r2;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0, $r4;
        java.lang.Class $r3, $r8;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r9, $r13;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.SerializerFactory$Config;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        if $r2 != r1 goto label1;

        return r0;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == class "Lorg/codehaus/jackson/map/ser/BeanSerializerFactory;" goto label2;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subtype of BeanSerializerFactory (");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has not properly overridden method \'withAdditionalSerializers\': can not instantiate subtype with ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("additional serializer definitions");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label2:
        $r4 = new org.codehaus.jackson.map.ser.BeanSerializerFactory;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void <init>(org.codehaus.jackson.map.SerializerFactory$Config)>(r1);

        return $r4;
    }

    protected java.lang.Iterable customSerializers()
    {
        org.codehaus.jackson.map.SerializerFactory$Config $r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        java.lang.Iterable $r2;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializers()>();

        return $r2;
    }

    public org.codehaus.jackson.map.JsonSerializer createSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r22;
        org.codehaus.jackson.map.SerializerFactory$Config $r9;
        org.codehaus.jackson.map.SerializationConfig r0;
        java.lang.Iterable $r10;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4, $r7;
        org.codehaus.jackson.type.JavaType r1, $r8;
        org.codehaus.jackson.map.Serializers r16;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator $r11;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r3;
        org.codehaus.jackson.map.JsonSerializer $r6, $r12, $r13, $r14, $r17, $r18, r23;
        org.codehaus.jackson.map.BeanProperty r5;
        java.lang.Object $r15;
        java.lang.Class $r19, $r20;
        org.codehaus.jackson.map.BeanDescription $r2, $r21;

        r3 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r5 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspect(org.codehaus.jackson.type.JavaType)>(r1);

        r22 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r2;

        $r4 = virtualinvoke r22.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r0, $r4, r5);

        if $r6 == null goto label1;

        return $r6;

     label1:
        $r7 = virtualinvoke r22.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r0, $r7, r1);

        if $r8 == r1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if $r8 == r1 goto label4;

        $r19 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r20 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r19 == $r20 goto label4;

        $r21 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspect(org.codehaus.jackson.type.JavaType)>($r8);

        r22 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r21;

     label4:
        $z3 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z3 == 0 goto label5;

        $r18 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildContainerSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>(r0, $r8, r22, r5, z0);

        return $r18;

     label5:
        $r9 = r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializers()>();

        $r11 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r15 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.codehaus.jackson.map.Serializers) $r15;

        $r17 = interfaceinvoke r16.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r0, $r8, r22, r5);

        if $r17 == null goto label7;

        return $r17;

     label7:
        goto label6;

     label8:
        $r12 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r8, r0, r22, r5, z0);

        r23 = $r12;

        if $r12 != null goto label9;

        $r13 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByPrimaryType(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r8, r0, r22, r5, z0);

        r23 = $r13;

        if $r13 != null goto label9;

        $r14 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findBeanSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>(r0, $r8, r22, r5);

        r23 = $r14;

        if $r14 != null goto label9;

        r23 = virtualinvoke r3.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByAddonType(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>(r0, $r8, r22, r5, z0);

     label9:
        return r23;
    }

    public org.codehaus.jackson.map.JsonSerializer createKeySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.SerializerFactory$Config $r1, $r7;
        org.codehaus.jackson.map.SerializationConfig r2;
        java.lang.Iterable $r8;
        org.codehaus.jackson.type.JavaType r3;
        org.codehaus.jackson.map.Serializers r11;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r13, r14;
        org.codehaus.jackson.map.BeanProperty r12;
        java.lang.Class $r4;
        java.lang.Object $r10;
        org.codehaus.jackson.map.BeanDescription $r5;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        r12 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasKeySerializers()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r4);

        r6 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r5;

        r14 = null;

        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable keySerializers()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.jackson.map.Serializers) $r10;

        $r13 = interfaceinvoke r11.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r2, r3, r6, r12);

        r14 = $r13;

        if $r13 == null goto label3;

        goto label4;

     label3:
        goto label2;

     label4:
        return r14;
    }

    public org.codehaus.jackson.map.JsonSerializer findBeanSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r4;
        org.codehaus.jackson.map.SerializerFactory$Config $r6, $r7;
        org.codehaus.jackson.map.ser.BeanSerializerModifier r11;
        org.codehaus.jackson.map.SerializationConfig r3;
        java.lang.Iterable $r8;
        org.codehaus.jackson.type.JavaType r1;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer r12;
        org.codehaus.jackson.map.BeanProperty r5;
        java.lang.Class $r2;
        java.lang.Object $r10;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r5 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: boolean isPotentialBeanType(java.lang.Class)>($r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        r12 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer constructBeanSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>(r3, r4, r5);

        $r6 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z1 = virtualinvoke $r6.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r10;

        r12 = virtualinvoke r11.<org.codehaus.jackson.map.ser.BeanSerializerModifier: org.codehaus.jackson.map.JsonSerializer modifySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.JsonSerializer)>(r3, r4, r12);

        goto label2;

     label3:
        return r12;
    }

    public org.codehaus.jackson.map.TypeSerializer findPropertyTypeSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r5;
        java.util.Collection $r6;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r9;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.BeanProperty r7;
        org.codehaus.jackson.map.introspect.AnnotatedMember r2;
        org.codehaus.jackson.map.TypeSerializer $r8, $r10;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        org.codehaus.jackson.type.JavaType r3;

        r9 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        r0 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r7 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>(r0, r2, r3);

        if $r4 != null goto label1;

        $r10 = virtualinvoke r9.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r0, r3, r7);

        return $r10;

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>(r2, r0, $r1);

        $r8 = interfaceinvoke $r4.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r0, r3, $r6, r7);

        return $r8;
    }

    public org.codehaus.jackson.map.TypeSerializer findPropertyContentTypeSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r6;
        java.util.Collection $r7;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r10;
        org.codehaus.jackson.map.SerializationConfig r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        org.codehaus.jackson.map.BeanProperty r8;
        org.codehaus.jackson.map.introspect.AnnotatedMember r4;
        org.codehaus.jackson.map.TypeSerializer $r9, $r11;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r5;
        org.codehaus.jackson.type.JavaType r0, $r1;

        r10 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        r4 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r8 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>(r2, r4, r0);

        if $r5 != null goto label1;

        $r11 = virtualinvoke r10.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r2, $r1, r8);

        return $r11;

     label1:
        $r6 = virtualinvoke r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>(r4, r2, $r3);

        $r9 = interfaceinvoke $r5.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r2, $r1, $r7, r8);

        return $r9;
    }

    protected org.codehaus.jackson.map.JsonSerializer constructBeanSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.type.TypeBindings $r18;
        org.codehaus.jackson.map.SerializationConfig r4;
        org.codehaus.jackson.map.TypeSerializer $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r25;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r10;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r2;
        org.codehaus.jackson.map.JsonSerializer $r11;
        java.util.List $r5, $r7, r37, r39;
        org.codehaus.jackson.map.ser.std.MapSerializer $r24;
        org.codehaus.jackson.map.SerializationConfig$Feature $r17, $r20;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.SerializerFactory$Config $r6, $r8, $r13, $r26, $r30, $r41;
        org.codehaus.jackson.map.ser.BeanSerializerModifier r38, r40, r42;
        java.lang.Iterable $r14, $r27, $r31;
        java.util.ArrayList $r34;
        org.codehaus.jackson.map.ser.BeanSerializer $r12;
        org.codehaus.jackson.type.JavaType $r19, $r21;
        org.codehaus.jackson.map.ser.BeanSerializerBuilder $r3, r36;
        java.util.Iterator $r15, $r28, $r32;
        java.lang.IllegalArgumentException $r35;
        org.codehaus.jackson.map.BeanProperty r22;
        java.lang.Class $r1;
        java.lang.Object $r9, $r16, $r29, $r33;

        r2 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r4 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r22 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.Class getBeanClass()>();

        if $r1 != class "Ljava/lang/Object;" goto label01;

        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not create bean serializer for Object.class");

        throw $r35;

     label01:
        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanSerializerBuilder constructBeanSerializerBuilder(org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r0);

        r36 = $r3;

        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List findBeanProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r4, r0);

        r37 = $r5;

        if $r5 != null goto label02;

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r37 = $r34;

     label02:
        $r6 = r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z0 == 0 goto label04;

        $r30 = r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r31 = virtualinvoke $r30.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r32 = interfaceinvoke $r31.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z7 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label04;

        $r33 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r33;

        r37 = virtualinvoke r38.<org.codehaus.jackson.map.ser.BeanSerializerModifier: java.util.List changeProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>(r4, r0, r37);

        goto label03;

     label04:
        $r7 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List filterBeanProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>(r4, r0, r37);

        r39 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List sortBeanProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>(r4, r0, $r7);

        $r8 = r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z1 = virtualinvoke $r8.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z1 == 0 goto label06;

        $r26 = r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r27 = virtualinvoke $r26.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r28 = interfaceinvoke $r27.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r29;

        r39 = virtualinvoke r40.<org.codehaus.jackson.map.ser.BeanSerializerModifier: java.util.List orderProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>(r4, r0, r39);

        goto label05;

     label06:
        virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setProperties(java.util.List)>(r39);

        $r9 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.lang.Object findFilterId(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r4, r0);

        virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setFilterId(java.lang.Object)>($r9);

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod findAnyGetter()>();

        if $r10 == null goto label08;

        $r17 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z4 = virtualinvoke r4.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r17);

        if $z4 == 0 goto label07;

        virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void fixAccess()>();

     label07:
        $r18 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()>();

        $r19 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: org.codehaus.jackson.type.JavaType getType(org.codehaus.jackson.map.type.TypeBindings)>($r18);

        $r20 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z5 = virtualinvoke r4.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r20);

        $r21 = virtualinvoke $r19.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r23 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r4, $r21, r22);

        $r24 = staticinvoke <org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.std.MapSerializer construct(java.lang.String[],org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer)>(null, $r19, $z5, $r23, r22, null, null);

        $r25 = new org.codehaus.jackson.map.ser.AnyGetterWriter;

        specialinvoke $r25.<org.codehaus.jackson.map.ser.AnyGetterWriter: void <init>(org.codehaus.jackson.map.introspect.AnnotatedMethod,org.codehaus.jackson.map.ser.std.MapSerializer)>($r10, $r24);

        virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setAnyGetter(org.codehaus.jackson.map.ser.AnyGetterWriter)>($r25);

     label08:
        virtualinvoke r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void processViews(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.ser.BeanSerializerBuilder)>(r4, $r3);

        $r41 = r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z8 = virtualinvoke $r41.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z8 == 0 goto label10;

        $r13 = r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r15 = interfaceinvoke $r14.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r42 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r16;

        r36 = virtualinvoke r42.<org.codehaus.jackson.map.ser.BeanSerializerModifier: org.codehaus.jackson.map.ser.BeanSerializerBuilder updateBuilder(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.ser.BeanSerializerBuilder)>(r4, r0, r36);

        goto label09;

     label10:
        $r11 = virtualinvoke r36.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: org.codehaus.jackson.map.JsonSerializer build()>();

        if $r11 != null goto label11;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean hasKnownClassAnnotations()>();

        if $z2 == 0 goto label11;

        $r12 = virtualinvoke r36.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: org.codehaus.jackson.map.ser.BeanSerializer createDummy()>();

        return $r12;

     label11:
        return $r11;
    }

    protected org.codehaus.jackson.map.ser.BeanPropertyWriter constructFilteredBeanWriter(org.codehaus.jackson.map.ser.BeanPropertyWriter, java.lang.Class[])
    {
        org.codehaus.jackson.map.ser.BeanPropertyWriter r0, $r2;
        java.lang.Class[] r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r3;

        r3 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter constructViewBased(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class[])>(r0, r1);

        return $r2;
    }

    protected org.codehaus.jackson.map.ser.PropertyBuilder constructPropertyBuilder(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r2;
        org.codehaus.jackson.map.ser.PropertyBuilder $r0;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r3;
        org.codehaus.jackson.map.SerializationConfig r1;

        r3 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r0 = new org.codehaus.jackson.map.ser.PropertyBuilder;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.PropertyBuilder: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r1, r2);

        return $r0;
    }

    protected org.codehaus.jackson.map.ser.BeanSerializerBuilder constructBeanSerializerBuilder(org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r1;
        org.codehaus.jackson.map.ser.BeanSerializerBuilder $r0;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r2;

        r2 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r0 = new org.codehaus.jackson.map.ser.BeanSerializerBuilder;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void <init>(org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r1);

        return $r0;
    }

    protected java.lang.Object findFilterId(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r2;
        java.lang.Object $r4;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r5;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;

        r5 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findFilterId(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r3);

        return $r4;
    }

    protected boolean isPotentialBeanType(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r2;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.String canBeABeanType(java.lang.Class)>(r0);

        if $r1 != null goto label1;

        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean isProxyType(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected java.util.List findBeanProperties(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.type.TypeBindings $r8;
        org.codehaus.jackson.map.ser.PropertyBuilder $r6;
        org.codehaus.jackson.map.SerializationConfig r2;
        java.util.ArrayList $r7;
        org.codehaus.jackson.map.BeanPropertyDefinition r11;
        org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty $r13;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r12;
        int $i0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r16, $r18;
        java.lang.String $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r9;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r17;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        java.util.List $r1;
        java.lang.Object $r10;
        org.codehaus.jackson.map.introspect.AnnotatedField $r15;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;

        r4 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List findProperties()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        virtualinvoke r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void removeIgnorableTypes(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>(r2, r0, $r1);

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature REQUIRE_SETTERS_FOR_GETTERS>;

        $z0 = virtualinvoke r2.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        if $z0 == 0 goto label1;

        virtualinvoke r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void removeSetterlessGetters(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>(r2, r0, $r1);

     label1:
        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return null;

     label2:
        $z2 = virtualinvoke r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r2, r0, null, null);

        $r6 = virtualinvoke r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.PropertyBuilder constructPropertyBuilder(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r2, r0);

        $r7 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()>();

        $r9 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r10;

        $r12 = virtualinvoke r11.<org.codehaus.jackson.map.BeanPropertyDefinition: org.codehaus.jackson.map.introspect.AnnotatedMember getAccessor()>();

        $r13 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)>($r12);

        if $r13 == null goto label4;

        $z4 = virtualinvoke $r13.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>();

        if $z4 == 0 goto label4;

        goto label3;

     label4:
        $r14 = virtualinvoke r11.<org.codehaus.jackson.map.BeanPropertyDefinition: java.lang.String getName()>();

        $z3 = $r12 instanceof org.codehaus.jackson.map.introspect.AnnotatedMethod;

        if $z3 == 0 goto label5;

        $r17 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r12;

        $r18 = virtualinvoke r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanPropertyWriter _constructWriter(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.TypeBindings,org.codehaus.jackson.map.ser.PropertyBuilder,boolean,java.lang.String,org.codehaus.jackson.map.introspect.AnnotatedMember)>(r2, $r8, $r6, $z2, $r14, $r17);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        goto label6;

     label5:
        $r15 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r12;

        $r16 = virtualinvoke r4.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanPropertyWriter _constructWriter(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.TypeBindings,org.codehaus.jackson.map.ser.PropertyBuilder,boolean,java.lang.String,org.codehaus.jackson.map.introspect.AnnotatedMember)>(r2, $r8, $r6, $z2, $r14, $r15);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label6:
        goto label3;

     label7:
        return $r7;
    }

    protected java.util.List filterBeanProperties(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.List)
    {
        java.util.Iterator $r7;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r2;
        java.lang.String[] $r4;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r11;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.util.HashSet $r6;
        java.util.List r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        int $i0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r9;
        java.lang.Object $r8;
        java.lang.String $r10;
        boolean $z0, $z1;

        r11 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r5 := @parameter2: java.util.List;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r3);

        if $r4 == null goto label2;

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label2;

        $r6 = staticinvoke <org.codehaus.jackson.map.util.ArrayBuilders: java.util.HashSet arrayToSet(java.lang.Object[])>($r4);

        $r7 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r8;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>($r10);

        if $z0 == 0 goto label1;

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return r5;
    }

    protected java.util.List sortBeanProperties(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.List)
    {
        java.util.List r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r3;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r1;
        org.codehaus.jackson.map.SerializationConfig r2;

        r1 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r0 := @parameter2: java.util.List;

        return r0;
    }

    protected void processViews(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.ser.BeanSerializerBuilder)
    {
        org.codehaus.jackson.map.ser.BeanSerializerBuilder r0;
        java.lang.Class[] $r7;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r8;
        org.codehaus.jackson.map.SerializationConfig r2;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] r4;
        java.util.List $r1;
        int $i0, i1, i2;
        org.codehaus.jackson.map.ser.BeanPropertyWriter r6, $r9;
        java.lang.Object $r5;
        org.codehaus.jackson.map.SerializationConfig$Feature $r3;
        boolean $z0;

        r8 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.map.ser.BeanSerializerBuilder;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: java.util.List getProperties()>();

        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature DEFAULT_VIEW_INCLUSION>;

        $z0 = virtualinvoke r2.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = 0;

        r4 = newarray (org.codehaus.jackson.map.ser.BeanPropertyWriter)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r6 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Class[] getViews()>();

        if $r7 != null goto label2;

        if $z0 == 0 goto label3;

        r4[i2] = r6;

        goto label3;

     label2:
        i1 = i1 + 1;

        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanPropertyWriter constructFilteredBeanWriter(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class[])>(r6, $r7);

        r4[i2] = $r9;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        if $z0 == 0 goto label5;

        if i1 != 0 goto label5;

        return;

     label5:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setFilteredProperties(org.codehaus.jackson.map.ser.BeanPropertyWriter[])>(r4);

        return;
    }

    protected void removeIgnorableTypes(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.List)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r11, r15;
        java.util.HashMap $r2;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.BeanPropertyDefinition r6;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r12;
        java.lang.Boolean $r13, r16;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r14;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.util.List r3;
        java.lang.Object $r5, $r9;
        java.lang.Class $r8;
        org.codehaus.jackson.map.BeanDescription $r10;

        r14 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r15 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r3 := @parameter2: java.util.List;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.BeanPropertyDefinition: org.codehaus.jackson.map.introspect.AnnotatedMember getAccessor()>();

        if $r7 != null goto label2;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.Class getRawType()>();

        $r9 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r16 = (java.lang.Boolean) $r9;

        if r16 != null goto label4;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r8);

        r11 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r10;

        $r12 = virtualinvoke r11.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r13 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Boolean isIgnorableType(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r12);

        r16 = $r13;

        if $r13 != null goto label3;

        r16 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label3:
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r16);

     label4:
        $z1 = virtualinvoke r16.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label5;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label5:
        goto label1;

     label6:
        return;
    }

    protected void removeSetterlessGetters(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.List)
    {
        java.util.Iterator $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r4;
        org.codehaus.jackson.map.SerializationConfig r5;
        org.codehaus.jackson.map.BeanPropertyDefinition r3;
        java.util.List r0;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;

        r4 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r6 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r0 := @parameter2: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.codehaus.jackson.map.BeanPropertyDefinition) $r2;

        $z1 = virtualinvoke r3.<org.codehaus.jackson.map.BeanPropertyDefinition: boolean couldDeserialize()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r3.<org.codehaus.jackson.map.BeanPropertyDefinition: boolean isExplicitlyIncluded()>();

        if $z2 != 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    protected org.codehaus.jackson.map.ser.BeanPropertyWriter _constructWriter(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.TypeBindings, org.codehaus.jackson.map.ser.PropertyBuilder, boolean, java.lang.String, org.codehaus.jackson.map.introspect.AnnotatedMember) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.type.TypeBindings r3;
        org.codehaus.jackson.map.ser.PropertyBuilder r7;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.introspect.AnnotatedMember r2;
        org.codehaus.jackson.map.util.Annotations $r8;
        org.codehaus.jackson.map.TypeSerializer $r12, r16;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r13;
        java.lang.String r6;
        boolean $z0, $z1, z2;
        java.lang.Class[] $r15;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r9;
        org.codehaus.jackson.map.JsonSerializer $r10;
        org.codehaus.jackson.map.AnnotationIntrospector $r14;
        java.lang.Class $r11;
        org.codehaus.jackson.map.BeanProperty$Std $r5;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r9 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        r7 := @parameter2: org.codehaus.jackson.map.ser.PropertyBuilder;

        z2 := @parameter3: boolean;

        r6 := @parameter4: java.lang.String;

        r2 := @parameter5: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedMember: void fixAccess()>();

     label1:
        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedMember: org.codehaus.jackson.type.JavaType getType(org.codehaus.jackson.map.type.TypeBindings)>(r3);

        $r5 = new org.codehaus.jackson.map.BeanProperty$Std;

        $r8 = virtualinvoke r7.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        specialinvoke $r5.<org.codehaus.jackson.map.BeanProperty$Std: void <init>(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.util.Annotations,org.codehaus.jackson.map.introspect.AnnotatedMember)>(r6, $r4, $r8, r2);

        $r10 = virtualinvoke r9.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r0, r2, $r5);

        r16 = null;

        $r11 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean isCollectionMapOrArray(java.lang.Class)>($r11);

        if $z1 == 0 goto label2;

        r16 = virtualinvoke r9.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer findPropertyContentTypeSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r4, r0, r2, $r5);

     label2:
        $r12 = virtualinvoke r9.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer findPropertyTypeSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r4, r0, r2, $r5);

        $r13 = virtualinvoke r7.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.ser.BeanPropertyWriter buildWriter(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.introspect.AnnotatedMember,boolean)>(r6, $r4, $r10, $r12, r16, r2, z2);

        $r14 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r15 = virtualinvoke $r14.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class[] findSerializationViews(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        virtualinvoke $r13.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void setViews(java.lang.Class[])>($r15);

        return $r13;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.BeanSerializerFactory $r0;

        $r0 = new org.codehaus.jackson.map.ser.BeanSerializerFactory;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void <init>(org.codehaus.jackson.map.SerializerFactory$Config)>(null);

        <org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanSerializerFactory instance> = $r0;

        return;
    }
}
