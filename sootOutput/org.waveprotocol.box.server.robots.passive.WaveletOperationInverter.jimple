final class org.waveprotocol.box.server.robots.passive.WaveletOperationInverter extends java.lang.Object implements org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor
{
    private final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext;
    private org.waveprotocol.wave.model.operation.wave.WaveletOperation inverse;

    void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext> = r1;

        return;
    }

    static org.waveprotocol.wave.model.operation.wave.WaveletOperation invert(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0, $r6;
        long $l0, $l1, $l2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter $r5;
        org.waveprotocol.wave.model.version.HashedVersion $r4;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r2 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        $l1 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $l2 = neg $l1;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $l0, $l2, $r4);

        $r5 = new org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        specialinvoke $r5.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r2);

        $r6 = specialinvoke $r5.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation visit(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        return $r6;
    }

    private org.waveprotocol.wave.model.operation.wave.WaveletOperation visit(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0, $r2;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r1;

        r1 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void acceptVisitor(org.waveprotocol.wave.model.operation.Visitor)>(r1);

        $r2 = r1.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation inverse>;

        return $r2;
    }

    public void visitWaveletBlipOperation(org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)
    {
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r0;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r5, $r6;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r1, r2;
        java.lang.String $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r4;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r4 = r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext>;

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $r6 = staticinvoke <org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.BlipOperation invert(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r4, $r5);

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r3, $r6);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation inverse> = $r1;

        return;
    }

    public void visitVersionUpdateOp(org.waveprotocol.wave.model.operation.wave.VersionUpdateOp)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r1;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r2;

        r1 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void visitAddParticipant(org.waveprotocol.wave.model.operation.wave.AddParticipant)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r1;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.wave.model.operation.wave.AddParticipant r2;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r1 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        $r3 = r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r3, $r4);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation inverse> = $r1;

        return;
    }

    public void visitRemoveParticipant(org.waveprotocol.wave.model.operation.wave.RemoveParticipant)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant r2;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r1;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        $r1 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r3 = r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r3, $r4);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation inverse> = $r1;

        return;
    }

    public void visitNoOp(org.waveprotocol.wave.model.operation.wave.NoOp)
    {
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter r0;
        org.waveprotocol.wave.model.operation.wave.NoOp $r1, r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.NoOp;

        $r1 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r2 = r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r2);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation inverse> = $r1;

        return;
    }
}
