public class org.apache.batik.css.engine.value.svg.SpacingManager extends org.apache.batik.css.engine.value.LengthManager
{
    protected java.lang.String property;

    public void <init>(java.lang.String)
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.batik.css.engine.value.LengthManager: void <init>()>();

        r0.<org.apache.batik.css.engine.value.svg.SpacingManager: java.lang.String property> = r1;

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        return 1;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        return 1;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        return 42;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        $r1 = r0.<org.apache.batik.css.engine.value.svg.SpacingManager: java.lang.String property>;

        return $r1;
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r1;
        org.apache.batik.css.engine.value.Value $r0;

        r1 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        $r0 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NORMAL_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r2;
        org.apache.batik.css.engine.value.Value $r5, $r6, $r8;
        org.apache.batik.css.engine.CSSEngine r7;
        short $s0;
        org.w3c.dom.DOMException $r4;
        org.w3c.css.sac.LexicalUnit r0;
        int $i1;
        java.lang.String $r1, $r3;
        boolean $z0;

        r2 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        r0 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r7 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 12: goto label1;
            case 35: goto label2;
            default: goto label4;
        };

     label1:
        $r6 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r6;

     label2:
        $r1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("normal");

        if $z0 == 0 goto label3;

        $r5 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NORMAL_VALUE>;

        return $r5;

     label3:
        $r3 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>($r3);

        throw $r4;

     label4:
        $r8 = specialinvoke r2.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>(r0, r7);

        return $r8;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r1;
        org.apache.batik.css.engine.value.Value $r3;
        org.apache.batik.css.engine.CSSEngine r5;
        short s0;
        org.w3c.dom.DOMException $r2, $r4;
        int $i1;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        s0 := @parameter0: short;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $i1 = (int) s0;

        if $i1 == 21 goto label1;

        $r4 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidStringTypeDOMException(short)>(s0);

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("normal");

        if $z0 == 0 goto label2;

        $r3 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NORMAL_VALUE>;

        return $r3;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>(r0);

        throw $r2;
    }

    protected int getOrientation()
    {
        org.apache.batik.css.engine.value.svg.SpacingManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SpacingManager;

        return 2;
    }
}
