public class org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore extends org.bouncycastle.jce.provider.JDKKeyStore
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore r0;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore;

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore: void <init>()>();

        return;
    }

    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException
    {
        java.io.DataInputStream $r3;
        byte[] $r12, $r13, $r15;
        javax.crypto.Cipher $r6;
        javax.crypto.CipherInputStream $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r17;
        java.util.Hashtable $r1, $r10;
        org.bouncycastle.crypto.digests.SHA1Digest $r8;
        boolean $z0;
        org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore r0;
        java.io.IOException $r4, $r11, $r14, $r16;
        org.bouncycastle.crypto.io.DigestInputStream $r9;
        char[] r5;
        java.io.InputStream r2;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore;

        r2 := @parameter0: java.io.InputStream;

        r5 := @parameter1: char[];

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: java.util.Hashtable table>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        if r2 != null goto label1;

        return;

     label1:
        $r3 = new java.io.DataInputStream;

        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        if $i0 == 1 goto label2;

        if $i0 == 0 goto label2;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Wrong version of key store.");

        throw $r16;

     label2:
        $i1 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r15 = newarray (byte)[$i1];

        $i2 = lengthof $r15;

        if $i2 == 20 goto label3;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Key store corrupted.");

        throw $r14;

     label3:
        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>($r15);

        $i3 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        if $i3 < 0 goto label4;

        if $i3 <= 4096 goto label5;

     label4:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Key store corrupted.");

        throw $r4;

     label5:
        if $i0 != 0 goto label6;

        r17 = "OldPBEWithSHAAndTwofish-CBC";

        goto label7;

     label6:
        r17 = "PBEWithSHAAndTwofish-CBC";

     label7:
        $r6 = virtualinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>(r17, 2, r5, $r15, $i3);

        $r7 = new javax.crypto.CipherInputStream;

        specialinvoke $r7.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r3, $r6);

        $r8 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r8.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        $r9 = new org.bouncycastle.crypto.io.DigestInputStream;

        specialinvoke $r9.<org.bouncycastle.crypto.io.DigestInputStream: void <init>(java.io.InputStream,org.bouncycastle.crypto.Digest)>($r7, $r8);

        virtualinvoke r0.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: void loadStore(java.io.InputStream)>($r9);

        $i4 = interfaceinvoke $r8.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r12 = newarray (byte)[$i4];

        interfaceinvoke $r8.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>($r12, 0);

        $i5 = interfaceinvoke $r8.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r13 = newarray (byte)[$i5];

        staticinvoke <org.bouncycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>($r7, $r13);

        $z0 = staticinvoke <org.bouncycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r12, $r13);

        if $z0 != 0 goto label8;

        $r10 = r0.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: java.util.Hashtable table>;

        virtualinvoke $r10.<java.util.Hashtable: void clear()>();

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("KeyStore integrity check failed.");

        throw $r11;

     label8:
        return;
    }

    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException
    {
        byte[] r2, r12;
        org.bouncycastle.crypto.io.DigestOutputStream $r9;
        org.bouncycastle.crypto.Digest $r11;
        javax.crypto.Cipher $r7;
        java.security.SecureRandom $r4, $r5;
        java.io.DataOutputStream $r0;
        int $i0, $i1, i2, $i3, $i4;
        javax.crypto.CipherOutputStream $r8;
        org.bouncycastle.crypto.digests.SHA1Digest $r10;
        java.io.OutputStream r1;
        org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore r3;
        char[] r6;

        r3 := @this: org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore;

        r1 := @parameter0: java.io.OutputStream;

        r6 := @parameter1: char[];

        $r0 = new java.io.DataOutputStream;

        specialinvoke $r0.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        r2 = newarray (byte)[20];

        $r4 = r3.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: java.security.SecureRandom random>;

        $i0 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>();

        $i1 = $i0 & 1023;

        i2 = 1024 + $i1;

        $r5 = r3.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: java.security.SecureRandom random>;

        virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>(1);

        $i3 = lengthof r2;

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>($i3);

        virtualinvoke $r0.<java.io.DataOutputStream: void write(byte[])>(r2);

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>(i2);

        $r7 = virtualinvoke r3.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>("PBEWithSHAAndTwofish-CBC", 1, r6, r2, i2);

        $r8 = new javax.crypto.CipherOutputStream;

        specialinvoke $r8.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r0, $r7);

        $r9 = new org.bouncycastle.crypto.io.DigestOutputStream;

        $r10 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r10.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r9.<org.bouncycastle.crypto.io.DigestOutputStream: void <init>(java.io.OutputStream,org.bouncycastle.crypto.Digest)>($r8, $r10);

        virtualinvoke r3.<org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore: void saveStore(java.io.OutputStream)>($r9);

        $r11 = virtualinvoke $r9.<org.bouncycastle.crypto.io.DigestOutputStream: org.bouncycastle.crypto.Digest getDigest()>();

        $i4 = interfaceinvoke $r11.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r12 = newarray (byte)[$i4];

        interfaceinvoke $r11.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r12, 0);

        virtualinvoke $r8.<javax.crypto.CipherOutputStream: void write(byte[])>(r12);

        virtualinvoke $r8.<javax.crypto.CipherOutputStream: void close()>();

        return;
    }
}
