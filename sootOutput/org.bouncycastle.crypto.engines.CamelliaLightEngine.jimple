public class org.bouncycastle.crypto.engines.CamelliaLightEngine extends java.lang.Object implements org.bouncycastle.crypto.BlockCipher
{
    private static final int BLOCK_SIZE;
    private static final int MASK8;
    private boolean initialized;
    private boolean _keyis128;
    private int[] subkey;
    private int[] kw;
    private int[] ke;
    private int[] state;
    private static final int[] SIGMA;
    private static final byte[] SBOX1;

    private static int rightRotate(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 >>> i1;

        $i2 = 32 - i1;

        $i3 = i0 << $i2;

        $i5 = $i4 + $i3;

        return $i5;
    }

    private static int leftRotate(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 << i1;

        $i2 = 32 - i1;

        $i3 = i0 >>> $i2;

        $i5 = $i4 + $i3;

        return $i5;
    }

    private static void roldq(int, int[], int, int[], int)
    {
        int[] r0, r1;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;

        i3 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        r0 := @parameter3: int[];

        i0 := @parameter4: int;

        $i11 = 0 + i0;

        $i2 = 0 + i1;

        $i4 = r1[$i2];

        $i9 = $i4 << i3;

        $i5 = 1 + i1;

        $i7 = r1[$i5];

        $i6 = 32 - i3;

        $i8 = $i7 >>> $i6;

        $i10 = $i9 | $i8;

        r0[$i11] = $i10;

        $i20 = 1 + i0;

        $i12 = 1 + i1;

        $i13 = r1[$i12];

        $i18 = $i13 << i3;

        $i14 = 2 + i1;

        $i16 = r1[$i14];

        $i15 = 32 - i3;

        $i17 = $i16 >>> $i15;

        $i19 = $i18 | $i17;

        r0[$i20] = $i19;

        $i29 = 2 + i0;

        $i21 = 2 + i1;

        $i22 = r1[$i21];

        $i27 = $i22 << i3;

        $i23 = 3 + i1;

        $i25 = r1[$i23];

        $i24 = 32 - i3;

        $i26 = $i25 >>> $i24;

        $i28 = $i27 | $i26;

        r0[$i29] = $i28;

        $i38 = 3 + i0;

        $i30 = 3 + i1;

        $i31 = r1[$i30];

        $i36 = $i31 << i3;

        $i32 = 0 + i1;

        $i34 = r1[$i32];

        $i33 = 32 - i3;

        $i35 = $i34 >>> $i33;

        $i37 = $i36 | $i35;

        r0[$i38] = $i37;

        $i41 = 0 + i1;

        $i39 = 0 + i0;

        $i40 = r0[$i39];

        r1[$i41] = $i40;

        $i44 = 1 + i1;

        $i42 = 1 + i0;

        $i43 = r0[$i42];

        r1[$i44] = $i43;

        $i47 = 2 + i1;

        $i45 = 2 + i0;

        $i46 = r0[$i45];

        r1[$i47] = $i46;

        $i50 = 3 + i1;

        $i48 = 3 + i0;

        $i49 = r0[$i48];

        r1[$i50] = $i49;

        return;
    }

    private static void decroldq(int, int[], int, int[], int)
    {
        int[] r0, r1;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;

        i3 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        r0 := @parameter3: int[];

        i0 := @parameter4: int;

        $i11 = 2 + i0;

        $i2 = 0 + i1;

        $i4 = r1[$i2];

        $i9 = $i4 << i3;

        $i5 = 1 + i1;

        $i7 = r1[$i5];

        $i6 = 32 - i3;

        $i8 = $i7 >>> $i6;

        $i10 = $i9 | $i8;

        r0[$i11] = $i10;

        $i20 = 3 + i0;

        $i12 = 1 + i1;

        $i13 = r1[$i12];

        $i18 = $i13 << i3;

        $i14 = 2 + i1;

        $i16 = r1[$i14];

        $i15 = 32 - i3;

        $i17 = $i16 >>> $i15;

        $i19 = $i18 | $i17;

        r0[$i20] = $i19;

        $i29 = 0 + i0;

        $i21 = 2 + i1;

        $i22 = r1[$i21];

        $i27 = $i22 << i3;

        $i23 = 3 + i1;

        $i25 = r1[$i23];

        $i24 = 32 - i3;

        $i26 = $i25 >>> $i24;

        $i28 = $i27 | $i26;

        r0[$i29] = $i28;

        $i38 = 1 + i0;

        $i30 = 3 + i1;

        $i31 = r1[$i30];

        $i36 = $i31 << i3;

        $i32 = 0 + i1;

        $i34 = r1[$i32];

        $i33 = 32 - i3;

        $i35 = $i34 >>> $i33;

        $i37 = $i36 | $i35;

        r0[$i38] = $i37;

        $i41 = 0 + i1;

        $i39 = 2 + i0;

        $i40 = r0[$i39];

        r1[$i41] = $i40;

        $i44 = 1 + i1;

        $i42 = 3 + i0;

        $i43 = r0[$i42];

        r1[$i44] = $i43;

        $i47 = 2 + i1;

        $i45 = 0 + i0;

        $i46 = r0[$i45];

        r1[$i47] = $i46;

        $i50 = 3 + i1;

        $i48 = 1 + i0;

        $i49 = r0[$i48];

        r1[$i50] = $i49;

        return;
    }

    private static void roldqo32(int, int[], int, int[], int)
    {
        int[] r0, r1;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54;

        i3 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        r0 := @parameter3: int[];

        i0 := @parameter4: int;

        $i12 = 0 + i0;

        $i2 = 1 + i1;

        $i5 = r1[$i2];

        $i4 = i3 - 32;

        $i10 = $i5 << $i4;

        $i6 = 2 + i1;

        $i8 = r1[$i6];

        $i7 = 64 - i3;

        $i9 = $i8 >>> $i7;

        $i11 = $i10 | $i9;

        r0[$i12] = $i11;

        $i22 = 1 + i0;

        $i13 = 2 + i1;

        $i15 = r1[$i13];

        $i14 = i3 - 32;

        $i20 = $i15 << $i14;

        $i16 = 3 + i1;

        $i18 = r1[$i16];

        $i17 = 64 - i3;

        $i19 = $i18 >>> $i17;

        $i21 = $i20 | $i19;

        r0[$i22] = $i21;

        $i32 = 2 + i0;

        $i23 = 3 + i1;

        $i25 = r1[$i23];

        $i24 = i3 - 32;

        $i30 = $i25 << $i24;

        $i26 = 0 + i1;

        $i28 = r1[$i26];

        $i27 = 64 - i3;

        $i29 = $i28 >>> $i27;

        $i31 = $i30 | $i29;

        r0[$i32] = $i31;

        $i42 = 3 + i0;

        $i33 = 0 + i1;

        $i35 = r1[$i33];

        $i34 = i3 - 32;

        $i40 = $i35 << $i34;

        $i36 = 1 + i1;

        $i38 = r1[$i36];

        $i37 = 64 - i3;

        $i39 = $i38 >>> $i37;

        $i41 = $i40 | $i39;

        r0[$i42] = $i41;

        $i45 = 0 + i1;

        $i43 = 0 + i0;

        $i44 = r0[$i43];

        r1[$i45] = $i44;

        $i48 = 1 + i1;

        $i46 = 1 + i0;

        $i47 = r0[$i46];

        r1[$i48] = $i47;

        $i51 = 2 + i1;

        $i49 = 2 + i0;

        $i50 = r0[$i49];

        r1[$i51] = $i50;

        $i54 = 3 + i1;

        $i52 = 3 + i0;

        $i53 = r0[$i52];

        r1[$i54] = $i53;

        return;
    }

    private static void decroldqo32(int, int[], int, int[], int)
    {
        int[] r0, r1;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54;

        i3 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        r0 := @parameter3: int[];

        i0 := @parameter4: int;

        $i12 = 2 + i0;

        $i2 = 1 + i1;

        $i5 = r1[$i2];

        $i4 = i3 - 32;

        $i10 = $i5 << $i4;

        $i6 = 2 + i1;

        $i8 = r1[$i6];

        $i7 = 64 - i3;

        $i9 = $i8 >>> $i7;

        $i11 = $i10 | $i9;

        r0[$i12] = $i11;

        $i22 = 3 + i0;

        $i13 = 2 + i1;

        $i15 = r1[$i13];

        $i14 = i3 - 32;

        $i20 = $i15 << $i14;

        $i16 = 3 + i1;

        $i18 = r1[$i16];

        $i17 = 64 - i3;

        $i19 = $i18 >>> $i17;

        $i21 = $i20 | $i19;

        r0[$i22] = $i21;

        $i32 = 0 + i0;

        $i23 = 3 + i1;

        $i25 = r1[$i23];

        $i24 = i3 - 32;

        $i30 = $i25 << $i24;

        $i26 = 0 + i1;

        $i28 = r1[$i26];

        $i27 = 64 - i3;

        $i29 = $i28 >>> $i27;

        $i31 = $i30 | $i29;

        r0[$i32] = $i31;

        $i42 = 1 + i0;

        $i33 = 0 + i1;

        $i35 = r1[$i33];

        $i34 = i3 - 32;

        $i40 = $i35 << $i34;

        $i36 = 1 + i1;

        $i38 = r1[$i36];

        $i37 = 64 - i3;

        $i39 = $i38 >>> $i37;

        $i41 = $i40 | $i39;

        r0[$i42] = $i41;

        $i45 = 0 + i1;

        $i43 = 2 + i0;

        $i44 = r0[$i43];

        r1[$i45] = $i44;

        $i48 = 1 + i1;

        $i46 = 3 + i0;

        $i47 = r0[$i46];

        r1[$i48] = $i47;

        $i51 = 2 + i1;

        $i49 = 0 + i0;

        $i50 = r0[$i49];

        r1[$i51] = $i50;

        $i54 = 3 + i1;

        $i52 = 1 + i0;

        $i53 = r0[$i52];

        r1[$i54] = $i53;

        return;
    }

    private int bytes2int(byte[], int)
    {
        byte[] r0;
        short $s3, $s7;
        byte $b2;
        int i0, $i1, $i4, i5, i6, $i8;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= 4 goto label2;

        $i4 = i5 << 8;

        $i1 = i6 + i0;

        $b2 = r0[$i1];

        $s7 = (short) $b2;

        $s3 = $s7 & 255;

        $i8 = (int) $s3;

        i5 = $i4 + $i8;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    private void int2bytes(int, byte[], int)
    {
        byte[] r0;
        byte $b2;
        int i0, $i1, $i3, i4, i5;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        i4 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= 4 goto label2;

        $i1 = 3 - i5;

        $i3 = $i1 + i0;

        $b2 = (byte) i4;

        r0[$i3] = $b2;

        i4 = i4 >>> 8;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    private byte lRot8(byte, int)
    {
        short $s3, $s9;
        byte b0, $b7;
        int i1, $i2, $i4, $i5, $i6, $i8, $i10;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        $i8 = (int) b0;

        $i5 = $i8 << i1;

        $s9 = (short) b0;

        $s3 = $s9 & 255;

        $i2 = 8 - i1;

        $i10 = (int) $s3;

        $i4 = $i10 >>> $i2;

        $i6 = $i5 | $i4;

        $b7 = (byte) $i6;

        return $b7;
    }

    private int sbox2(int)
    {
        byte[] $r1;
        short $s3, $s4;
        byte $b1, $b2;
        int i0, $i5;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        i0 := @parameter0: int;

        $r1 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $b1 = $r1[i0];

        $b2 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: byte lRot8(byte,int)>($b1, 1);

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        return $i5;
    }

    private int sbox3(int)
    {
        byte[] $r1;
        short $s3, $s4;
        byte $b1, $b2;
        int i0, $i5;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        i0 := @parameter0: int;

        $r1 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $b1 = $r1[i0];

        $b2 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: byte lRot8(byte,int)>($b1, 7);

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        return $i5;
    }

    private int sbox4(int)
    {
        byte[] $r1;
        short $s3, $s5, $s6, $s8;
        byte $b1, $b2, $b4;
        int i0, $i7, $i9;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        i0 := @parameter0: int;

        $r1 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $b1 = (byte) i0;

        $b2 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: byte lRot8(byte,int)>($b1, 1);

        $s6 = (short) $b2;

        $s3 = $s6 & 255;

        $i7 = (int) $s3;

        $b4 = $r1[$i7];

        $s8 = (short) $b4;

        $s5 = $s8 & 255;

        $i9 = (int) $s5;

        return $i9;
    }

    private void camelliaF2(int[], int[], int)
    {
        byte[] $r3, $r4, $r5, $r6;
        byte $b16, $b23, $b61, $b68;
        short $s17, $s62, s96, s108, $s115, $s117, $s119, $s121;
        int[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i63, $i64, $i65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, i91, i92, i93, i94, i95, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i109, i110, i111, i112, i113, i114, $i116, $i118, $i120, $i122;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r2;

        r2 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        $i3 = r0[0];

        $i1 = 0 + i0;

        $i2 = r1[$i1];

        i91 = $i3 ^ $i2;

        $i4 = i91 & 255;

        $i5 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i4);

        $i6 = i91 >>> 8;

        $i7 = $i6 & 255;

        $i8 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i7);

        $i9 = $i8 << 8;

        i92 = $i5 | $i9;

        $i10 = i91 >>> 16;

        $i11 = $i10 & 255;

        $i12 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i11);

        $i13 = $i12 << 16;

        i93 = i92 | $i13;

        $r3 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i14 = i91 >>> 24;

        $i15 = $i14 & 255;

        $b16 = $r3[$i15];

        $s115 = (short) $b16;

        $s17 = $s115 & 255;

        $i116 = (int) $s17;

        $i18 = $i116 << 24;

        i94 = i93 | $i18;

        $i21 = r0[1];

        $i19 = 1 + i0;

        $i20 = r1[$i19];

        i95 = $i21 ^ $i20;

        $r4 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i22 = i95 & 255;

        $b23 = $r4[$i22];

        $s117 = (short) $b23;

        s96 = $s117 & 255;

        $i24 = i95 >>> 8;

        $i25 = $i24 & 255;

        $i26 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i25);

        $i27 = $i26 << 8;

        $i118 = (int) s96;

        i97 = $i118 | $i27;

        $i28 = i95 >>> 16;

        $i29 = $i28 & 255;

        $i30 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i29);

        $i31 = $i30 << 16;

        i98 = i97 | $i31;

        $i32 = i95 >>> 24;

        $i33 = $i32 & 255;

        $i34 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i33);

        $i35 = $i34 << 24;

        i99 = i98 | $i35;

        $i36 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>(i99, 8);

        i100 = i94 ^ $i36;

        $i37 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i36, 8);

        i101 = $i37 ^ i100;

        $i38 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int rightRotate(int,int)>(i100, 8);

        i102 = $i38 ^ i101;

        $i39 = r0[2];

        $i40 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>(i101, 16);

        $i41 = $i40 ^ i102;

        $i42 = $i39 ^ $i41;

        r0[2] = $i42;

        $i43 = r0[3];

        $i44 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>(i102, 8);

        $i45 = $i43 ^ $i44;

        r0[3] = $i45;

        $i48 = r0[2];

        $i46 = 2 + i0;

        $i47 = r1[$i46];

        i103 = $i48 ^ $i47;

        $i49 = i103 & 255;

        $i50 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i49);

        $i51 = i103 >>> 8;

        $i52 = $i51 & 255;

        $i53 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i52);

        $i54 = $i53 << 8;

        i104 = $i50 | $i54;

        $i55 = i103 >>> 16;

        $i56 = $i55 & 255;

        $i57 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i56);

        $i58 = $i57 << 16;

        i105 = i104 | $i58;

        $r5 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i59 = i103 >>> 24;

        $i60 = $i59 & 255;

        $b61 = $r5[$i60];

        $s119 = (short) $b61;

        $s62 = $s119 & 255;

        $i120 = (int) $s62;

        $i63 = $i120 << 24;

        i106 = i105 | $i63;

        $i66 = r0[3];

        $i64 = 3 + i0;

        $i65 = r1[$i64];

        i107 = $i66 ^ $i65;

        $r6 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i67 = i107 & 255;

        $b68 = $r6[$i67];

        $s121 = (short) $b68;

        s108 = $s121 & 255;

        $i69 = i107 >>> 8;

        $i70 = $i69 & 255;

        $i71 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i70);

        $i72 = $i71 << 8;

        $i122 = (int) s108;

        i109 = $i122 | $i72;

        $i73 = i107 >>> 16;

        $i74 = $i73 & 255;

        $i75 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i74);

        $i76 = $i75 << 16;

        i110 = i109 | $i76;

        $i77 = i107 >>> 24;

        $i78 = $i77 & 255;

        $i79 = specialinvoke r2.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i78);

        $i80 = $i79 << 24;

        i111 = i110 | $i80;

        $i81 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>(i111, 8);

        i112 = i106 ^ $i81;

        $i82 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i81, 8);

        i113 = $i82 ^ i112;

        $i83 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int rightRotate(int,int)>(i112, 8);

        i114 = $i83 ^ i113;

        $i84 = r0[0];

        $i85 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>(i113, 16);

        $i86 = $i85 ^ i114;

        $i87 = $i84 ^ $i86;

        r0[0] = $i87;

        $i88 = r0[1];

        $i89 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>(i114, 8);

        $i90 = $i88 ^ $i89;

        r0[1] = $i90;

        return;
    }

    private void camelliaFLs(int[], int[], int)
    {
        int[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r2;

        r2 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        $i5 = r0[1];

        $i3 = r0[0];

        $i1 = 0 + i0;

        $i2 = r1[$i1];

        $i4 = $i3 & $i2;

        $i6 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i4, 1);

        $i7 = $i5 ^ $i6;

        r0[1] = $i7;

        $i12 = r0[0];

        $i8 = 1 + i0;

        $i10 = r1[$i8];

        $i9 = r0[1];

        $i11 = $i10 | $i9;

        $i13 = $i12 ^ $i11;

        r0[0] = $i13;

        $i18 = r0[2];

        $i14 = 3 + i0;

        $i16 = r1[$i14];

        $i15 = r0[3];

        $i17 = $i16 | $i15;

        $i19 = $i18 ^ $i17;

        r0[2] = $i19;

        $i24 = r0[3];

        $i20 = 2 + i0;

        $i22 = r1[$i20];

        $i21 = r0[2];

        $i23 = $i22 & $i21;

        $i25 = staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i23, 1);

        $i26 = $i24 ^ $i25;

        r0[3] = $i26;

        return;
    }

    private void setKey(boolean, byte[])
    {
        byte[] r4;
        int[] r0, r1, r2, r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, i82, i83, i84, $i86, $i88;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r5;
        boolean $z0, z1;
        java.lang.IllegalArgumentException $r106;

        r5 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        z1 := @parameter0: boolean;

        r4 := @parameter1: byte[];

        r0 = newarray (int)[8];

        r1 = newarray (int)[4];

        r2 = newarray (int)[4];

        r3 = newarray (int)[4];

        $i0 = lengthof r4;

        lookupswitch($i0)
        {
            case 16: goto label01;
            case 24: goto label02;
            case 32: goto label03;
            default: goto label04;
        };

     label01:
        r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128> = 1;

        $i78 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 0);

        r0[0] = $i78;

        $i79 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 4);

        r0[1] = $i79;

        $i80 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 8);

        r0[2] = $i80;

        $i81 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 12);

        r0[3] = $i81;

        r0[7] = 0;

        r0[6] = 0;

        r0[5] = 0;

        r0[4] = 0;

        goto label05;

     label02:
        $i68 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 0);

        r0[0] = $i68;

        $i69 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 4);

        r0[1] = $i69;

        $i70 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 8);

        r0[2] = $i70;

        $i71 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 12);

        r0[3] = $i71;

        $i72 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 16);

        r0[4] = $i72;

        $i73 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 20);

        r0[5] = $i73;

        $i74 = r0[4];

        $i86 = (int) -1;

        $i75 = $i74 ^ $i86;

        r0[6] = $i75;

        $i76 = r0[5];

        $i88 = (int) -1;

        $i77 = $i76 ^ $i88;

        r0[7] = $i77;

        r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128> = 0;

        goto label05;

     label03:
        $i1 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 0);

        r0[0] = $i1;

        $i2 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 4);

        r0[1] = $i2;

        $i3 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 8);

        r0[2] = $i3;

        $i4 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 12);

        r0[3] = $i4;

        $i5 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 16);

        r0[4] = $i5;

        $i6 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 20);

        r0[5] = $i6;

        $i7 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 24);

        r0[6] = $i7;

        $i8 = specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r4, 28);

        r0[7] = $i8;

        r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128> = 0;

        goto label05;

     label04:
        $r106 = new java.lang.IllegalArgumentException;

        specialinvoke $r106.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key sizes are only 16/24/32 bytes.");

        throw $r106;

     label05:
        i82 = 0;

     label06:
        if i82 >= 4 goto label07;

        $i66 = r0[i82];

        $i64 = i82 + 4;

        $i65 = r0[$i64];

        $i67 = $i66 ^ $i65;

        r1[i82] = $i67;

        i82 = i82 + 1;

        goto label06;

     label07:
        $r6 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA>;

        specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>(r1, $r6, 0);

        i83 = 0;

     label08:
        if i83 >= 4 goto label09;

        $i62 = r1[i83];

        $i61 = r0[i83];

        $i63 = $i62 ^ $i61;

        r1[i83] = $i63;

        i83 = i83 + 1;

        goto label08;

     label09:
        $r7 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA>;

        specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>(r1, $r7, 4);

        $z0 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128>;

        if $z0 == 0 goto label11;

        if z1 == 0 goto label10;

        $r83 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i49 = r0[0];

        $r83[0] = $i49;

        $r84 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i50 = r0[1];

        $r84[1] = $i50;

        $r85 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i51 = r0[2];

        $r85[2] = $i51;

        $r86 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i52 = r0[3];

        $r86[3] = $i52;

        $r87 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r0, 0, $r87, 4);

        $r88 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r0, 0, $r88, 12);

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r0, 0, r3, 0);

        $r89 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i53 = r3[2];

        $r89[18] = $i53;

        $r90 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i54 = r3[3];

        $r90[19] = $i54;

        $r91 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r0, 0, $r91, 4);

        $r92 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r0, 0, $r92, 24);

        $r93 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r0, 0, $r93, 32);

        $r94 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i55 = r1[0];

        $r94[0] = $i55;

        $r95 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i56 = r1[1];

        $r95[1] = $i56;

        $r96 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i57 = r1[2];

        $r96[2] = $i57;

        $r97 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i58 = r1[3];

        $r97[3] = $i58;

        $r98 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r1, 0, $r98, 8);

        $r99 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r1, 0, $r99, 0);

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r1, 0, r3, 0);

        $r100 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i59 = r3[0];

        $r100[16] = $i59;

        $r101 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i60 = r3[1];

        $r101[17] = $i60;

        $r102 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r1, 0, $r102, 20);

        $r103 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(34, r1, 0, $r103, 28);

        $r104 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r1, 0, $r104, 4);

        goto label15;

     label10:
        $r61 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i37 = r0[0];

        $r61[4] = $i37;

        $r62 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i38 = r0[1];

        $r62[5] = $i38;

        $r63 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i39 = r0[2];

        $r63[6] = $i39;

        $r64 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i40 = r0[3];

        $r64[7] = $i40;

        $r65 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r0, 0, $r65, 28);

        $r66 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r0, 0, $r66, 20);

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r0, 0, r3, 0);

        $r67 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i41 = r3[0];

        $r67[16] = $i41;

        $r68 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i42 = r3[1];

        $r68[17] = $i42;

        $r69 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r0, 0, $r69, 0);

        $r70 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r0, 0, $r70, 8);

        $r71 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r0, 0, $r71, 0);

        $r72 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i43 = r1[0];

        $r72[34] = $i43;

        $r73 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i44 = r1[1];

        $r73[35] = $i44;

        $r74 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i45 = r1[2];

        $r74[32] = $i45;

        $r75 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i46 = r1[3];

        $r75[33] = $i46;

        $r76 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r1, 0, $r76, 24);

        $r77 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r1, 0, $r77, 4);

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r1, 0, r3, 0);

        $r78 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i47 = r3[2];

        $r78[18] = $i47;

        $r79 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i48 = r3[3];

        $r79[19] = $i48;

        $r80 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r1, 0, $r80, 12);

        $r81 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(34, r1, 0, $r81, 4);

        $r82 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r1, 0, $r82, 0);

        goto label15;

     label11:
        i84 = 0;

     label12:
        if i84 >= 4 goto label13;

        $i35 = r1[i84];

        $i33 = i84 + 4;

        $i34 = r0[$i33];

        $i36 = $i35 ^ $i34;

        r2[i84] = $i36;

        i84 = i84 + 1;

        goto label12;

     label13:
        $r8 = <org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA>;

        specialinvoke r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>(r2, $r8, 8);

        if z1 == 0 goto label14;

        $r35 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i21 = r0[0];

        $r35[0] = $i21;

        $r36 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i22 = r0[1];

        $r36[1] = $i22;

        $r37 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i23 = r0[2];

        $r37[2] = $i23;

        $r38 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i24 = r0[3];

        $r38[3] = $i24;

        $r39 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(45, r0, 0, $r39, 16);

        $r40 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r0, 0, $r40, 4);

        $r41 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r0, 0, $r41, 32);

        $r42 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(34, r0, 0, $r42, 44);

        $r43 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r0, 4, $r43, 4);

        $r44 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r0, 4, $r44, 0);

        $r45 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r0, 4, $r45, 24);

        $r46 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(34, r0, 4, $r46, 36);

        $r47 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r1, 0, $r47, 8);

        $r48 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r1, 0, $r48, 20);

        $r49 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i25 = r1[1];

        $r49[8] = $i25;

        $r50 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i26 = r1[2];

        $r50[9] = $i26;

        $r51 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i27 = r1[3];

        $r51[10] = $i27;

        $r52 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i28 = r1[0];

        $r52[11] = $i28;

        $r53 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(49, r1, 0, $r53, 40);

        $r54 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i29 = r2[0];

        $r54[0] = $i29;

        $r55 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i30 = r2[1];

        $r55[1] = $i30;

        $r56 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i31 = r2[2];

        $r56[2] = $i31;

        $r57 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i32 = r2[3];

        $r57[3] = $i32;

        $r58 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r2, 0, $r58, 12);

        $r59 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r2, 0, $r59, 28);

        $r60 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(51, r2, 0, $r60, 4);

        goto label15;

     label14:
        $r9 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i9 = r0[0];

        $r9[4] = $i9;

        $r10 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i10 = r0[1];

        $r10[5] = $i10;

        $r11 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i11 = r0[2];

        $r11[6] = $i11;

        $r12 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i12 = r0[3];

        $r12[7] = $i12;

        $r13 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(45, r0, 0, $r13, 28);

        $r14 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r0, 0, $r14, 4);

        $r15 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r0, 0, $r15, 12);

        $r16 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(34, r0, 0, $r16, 0);

        $r17 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r0, 4, $r17, 40);

        $r18 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r0, 4, $r18, 8);

        $r19 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r0, 4, $r19, 20);

        $r20 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(34, r0, 4, $r20, 8);

        $r21 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r1, 0, $r21, 36);

        $r22 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r1, 0, $r22, 24);

        $r23 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i13 = r1[1];

        $r23[2] = $i13;

        $r24 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i14 = r1[2];

        $r24[3] = $i14;

        $r25 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i15 = r1[3];

        $r25[0] = $i15;

        $r26 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i16 = r1[0];

        $r26[1] = $i16;

        $r27 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(49, r1, 0, $r27, 4);

        $r28 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i17 = r2[0];

        $r28[46] = $i17;

        $r29 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i18 = r2[1];

        $r29[47] = $i18;

        $r30 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i19 = r2[2];

        $r30[44] = $i19;

        $r31 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i20 = r2[3];

        $r31[45] = $i20;

        $r32 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r2, 0, $r32, 32);

        $r33 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r2, 0, $r33, 16);

        $r34 = r5.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.bouncycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(51, r2, 0, $r34, 0);

     label15:
        return;
    }

    private int processBlock128(byte[], int, byte[], int)
    {
        byte[] r32, r36;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r39;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, i27;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        r36 := @parameter0: byte[];

        i20 := @parameter1: int;

        r32 := @parameter2: byte[];

        i12 := @parameter3: int;

        i27 = 0;

     label1:
        if i27 >= 4 goto label2;

        $r37 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i21 = i27 * 4;

        $i22 = i20 + $i21;

        $i23 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r36, $i22);

        $r37[i27] = $i23;

        $r38 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i25 = $r38[i27];

        $r39 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i24 = $r39[i27];

        $i26 = $i25 ^ $i24;

        $r38[i27] = $i26;

        i27 = i27 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r1 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r2, $r1, 0);

        $r4 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r3 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r4, $r3, 4);

        $r6 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r5 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r6, $r5, 8);

        $r8 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r7 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r8, $r7, 0);

        $r10 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r9 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r10, $r9, 12);

        $r12 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r11 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r12, $r11, 16);

        $r14 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r13 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r14, $r13, 20);

        $r16 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r15 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r16, $r15, 4);

        $r18 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r17 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r18, $r17, 24);

        $r20 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r19 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r20, $r19, 28);

        $r22 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r21 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r22, $r21, 32);

        $r23 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i1 = $r23[2];

        $r24 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = $r24[4];

        $i2 = $i1 ^ $i0;

        $r23[2] = $i2;

        $r25 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i4 = $r25[3];

        $r26 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i3 = $r26[5];

        $i5 = $i4 ^ $i3;

        $r25[3] = $i5;

        $r27 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i7 = $r27[0];

        $r28 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i6 = $r28[6];

        $i8 = $i7 ^ $i6;

        $r27[0] = $i8;

        $r29 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i10 = $r29[1];

        $r30 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i9 = $r30[7];

        $i11 = $i10 ^ $i9;

        $r29[1] = $i11;

        $r31 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i13 = $r31[2];

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i13, r32, i12);

        $r33 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i15 = $r33[3];

        $i14 = i12 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i15, r32, $i14);

        $r34 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i17 = $r34[0];

        $i16 = i12 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i17, r32, $i16);

        $r35 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i19 = $r35[1];

        $i18 = i12 + 12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i19, r32, $i18);

        return 16;
    }

    private int processBlock192or256(byte[], int, byte[], int)
    {
        byte[] r40, r44;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r45, $r46, $r47;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, i27;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        r44 := @parameter0: byte[];

        i20 := @parameter1: int;

        r40 := @parameter2: byte[];

        i12 := @parameter3: int;

        i27 = 0;

     label1:
        if i27 >= 4 goto label2;

        $r45 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i21 = i27 * 4;

        $i22 = i20 + $i21;

        $i23 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>(r44, $i22);

        $r45[i27] = $i23;

        $r46 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i25 = $r46[i27];

        $r47 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i24 = $r47[i27];

        $i26 = $i25 ^ $i24;

        $r46[i27] = $i26;

        i27 = i27 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r1 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r2, $r1, 0);

        $r4 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r3 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r4, $r3, 4);

        $r6 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r5 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r6, $r5, 8);

        $r8 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r7 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r8, $r7, 0);

        $r10 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r9 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r10, $r9, 12);

        $r12 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r11 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r12, $r11, 16);

        $r14 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r13 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r14, $r13, 20);

        $r16 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r15 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r16, $r15, 4);

        $r18 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r17 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r18, $r17, 24);

        $r20 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r19 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r20, $r19, 28);

        $r22 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r21 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r22, $r21, 32);

        $r24 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r23 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r24, $r23, 8);

        $r26 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r25 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r26, $r25, 36);

        $r28 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r27 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r28, $r27, 40);

        $r30 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r29 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r30, $r29, 44);

        $r31 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i1 = $r31[2];

        $r32 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = $r32[4];

        $i2 = $i1 ^ $i0;

        $r31[2] = $i2;

        $r33 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i4 = $r33[3];

        $r34 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i3 = $r34[5];

        $i5 = $i4 ^ $i3;

        $r33[3] = $i5;

        $r35 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i7 = $r35[0];

        $r36 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i6 = $r36[6];

        $i8 = $i7 ^ $i6;

        $r35[0] = $i8;

        $r37 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i10 = $r37[1];

        $r38 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i9 = $r38[7];

        $i11 = $i10 ^ $i9;

        $r37[1] = $i11;

        $r39 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i13 = $r39[2];

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i13, r40, i12);

        $r41 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i15 = $r41[3];

        $i14 = i12 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i15, r40, $i14);

        $r42 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i17 = $r42[0];

        $i16 = i12 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i17, r40, $i16);

        $r43 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i19 = $r43[1];

        $i18 = i12 + 12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i19, r40, $i18);

        return 16;
    }

    public void <init>()
    {
        int[] $r1, $r2, $r3, $r4;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[96];

        r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] subkey> = $r1;

        $r2 = newarray (int)[8];

        r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] kw> = $r2;

        $r3 = newarray (int)[12];

        r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] ke> = $r3;

        $r4 = newarray (int)[4];

        r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] state> = $r4;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        return "Camellia";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        return 16;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r1;
        java.lang.IllegalArgumentException $r4;
        org.bouncycastle.crypto.params.KeyParameter $r2;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r1 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("only simple KeyParameter expected.");

        throw $r4;

     label1:
        $r2 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r1.<org.bouncycastle.crypto.engines.CamelliaLightEngine: void setKey(boolean,byte[])>(z1, $r3);

        r1.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean initialized> = 1;

        return;
    }

    public int processBlock(byte[], int, byte[], int) throws java.lang.IllegalStateException
    {
        byte[] r1, r2;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.DataLengthException $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;
        boolean $z0, $z1;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i3 := @parameter3: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean initialized>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Camellia is not initialized");

        throw $r5;

     label1:
        $i2 = i0 + 16;

        $i1 = lengthof r1;

        if $i2 <= $i1 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i5 = i3 + 16;

        $i4 = lengthof r2;

        if $i5 <= $i4 goto label3;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label3:
        $z1 = r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128>;

        if $z1 == 0 goto label4;

        $i7 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int processBlock128(byte[],int,byte[],int)>(r1, i0, r2, i3);

        return $i7;

     label4:
        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.CamelliaLightEngine: int processBlock192or256(byte[],int,byte[],int)>(r1, i0, r2, i3);

        return $i6;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.CamelliaLightEngine;

        return;
    }

    static void <clinit>()
    {
        byte[] $r1;
        int[] $r0;

        <org.bouncycastle.crypto.engines.CamelliaLightEngine: int MASK8> = 255;

        <org.bouncycastle.crypto.engines.CamelliaLightEngine: int BLOCK_SIZE> = 16;

        $r0 = newarray (int)[12];

        $r0[0] = -1600231809;

        $r0[1] = 1003262091;

        $r0[2] = -1233459112;

        $r0[3] = 1286239154;

        $r0[4] = -957401297;

        $r0[5] = -380665154;

        $r0[6] = 1426019237;

        $r0[7] = -237801700;

        $r0[8] = 283453434;

        $r0[9] = -563598051;

        $r0[10] = -1336506174;

        $r0[11] = -1276722691;

        <org.bouncycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA> = $r0;

        $r1 = newarray (byte)[256];

        $r1[0] = 112;

        $r1[1] = -126;

        $r1[2] = 44;

        $r1[3] = -20;

        $r1[4] = -77;

        $r1[5] = 39;

        $r1[6] = -64;

        $r1[7] = -27;

        $r1[8] = -28;

        $r1[9] = -123;

        $r1[10] = 87;

        $r1[11] = 53;

        $r1[12] = -22;

        $r1[13] = 12;

        $r1[14] = -82;

        $r1[15] = 65;

        $r1[16] = 35;

        $r1[17] = -17;

        $r1[18] = 107;

        $r1[19] = -109;

        $r1[20] = 69;

        $r1[21] = 25;

        $r1[22] = -91;

        $r1[23] = 33;

        $r1[24] = -19;

        $r1[25] = 14;

        $r1[26] = 79;

        $r1[27] = 78;

        $r1[28] = 29;

        $r1[29] = 101;

        $r1[30] = -110;

        $r1[31] = -67;

        $r1[32] = -122;

        $r1[33] = -72;

        $r1[34] = -81;

        $r1[35] = -113;

        $r1[36] = 124;

        $r1[37] = -21;

        $r1[38] = 31;

        $r1[39] = -50;

        $r1[40] = 62;

        $r1[41] = 48;

        $r1[42] = -36;

        $r1[43] = 95;

        $r1[44] = 94;

        $r1[45] = -59;

        $r1[46] = 11;

        $r1[47] = 26;

        $r1[48] = -90;

        $r1[49] = -31;

        $r1[50] = 57;

        $r1[51] = -54;

        $r1[52] = -43;

        $r1[53] = 71;

        $r1[54] = 93;

        $r1[55] = 61;

        $r1[56] = -39;

        $r1[57] = 1;

        $r1[58] = 90;

        $r1[59] = -42;

        $r1[60] = 81;

        $r1[61] = 86;

        $r1[62] = 108;

        $r1[63] = 77;

        $r1[64] = -117;

        $r1[65] = 13;

        $r1[66] = -102;

        $r1[67] = 102;

        $r1[68] = -5;

        $r1[69] = -52;

        $r1[70] = -80;

        $r1[71] = 45;

        $r1[72] = 116;

        $r1[73] = 18;

        $r1[74] = 43;

        $r1[75] = 32;

        $r1[76] = -16;

        $r1[77] = -79;

        $r1[78] = -124;

        $r1[79] = -103;

        $r1[80] = -33;

        $r1[81] = 76;

        $r1[82] = -53;

        $r1[83] = -62;

        $r1[84] = 52;

        $r1[85] = 126;

        $r1[86] = 118;

        $r1[87] = 5;

        $r1[88] = 109;

        $r1[89] = -73;

        $r1[90] = -87;

        $r1[91] = 49;

        $r1[92] = -47;

        $r1[93] = 23;

        $r1[94] = 4;

        $r1[95] = -41;

        $r1[96] = 20;

        $r1[97] = 88;

        $r1[98] = 58;

        $r1[99] = 97;

        $r1[100] = -34;

        $r1[101] = 27;

        $r1[102] = 17;

        $r1[103] = 28;

        $r1[104] = 50;

        $r1[105] = 15;

        $r1[106] = -100;

        $r1[107] = 22;

        $r1[108] = 83;

        $r1[109] = 24;

        $r1[110] = -14;

        $r1[111] = 34;

        $r1[112] = -2;

        $r1[113] = 68;

        $r1[114] = -49;

        $r1[115] = -78;

        $r1[116] = -61;

        $r1[117] = -75;

        $r1[118] = 122;

        $r1[119] = -111;

        $r1[120] = 36;

        $r1[121] = 8;

        $r1[122] = -24;

        $r1[123] = -88;

        $r1[124] = 96;

        $r1[125] = -4;

        $r1[126] = 105;

        $r1[127] = 80;

        $r1[128] = -86;

        $r1[129] = -48;

        $r1[130] = -96;

        $r1[131] = 125;

        $r1[132] = -95;

        $r1[133] = -119;

        $r1[134] = 98;

        $r1[135] = -105;

        $r1[136] = 84;

        $r1[137] = 91;

        $r1[138] = 30;

        $r1[139] = -107;

        $r1[140] = -32;

        $r1[141] = -1;

        $r1[142] = 100;

        $r1[143] = -46;

        $r1[144] = 16;

        $r1[145] = -60;

        $r1[146] = 0;

        $r1[147] = 72;

        $r1[148] = -93;

        $r1[149] = -9;

        $r1[150] = 117;

        $r1[151] = -37;

        $r1[152] = -118;

        $r1[153] = 3;

        $r1[154] = -26;

        $r1[155] = -38;

        $r1[156] = 9;

        $r1[157] = 63;

        $r1[158] = -35;

        $r1[159] = -108;

        $r1[160] = -121;

        $r1[161] = 92;

        $r1[162] = -125;

        $r1[163] = 2;

        $r1[164] = -51;

        $r1[165] = 74;

        $r1[166] = -112;

        $r1[167] = 51;

        $r1[168] = 115;

        $r1[169] = 103;

        $r1[170] = -10;

        $r1[171] = -13;

        $r1[172] = -99;

        $r1[173] = 127;

        $r1[174] = -65;

        $r1[175] = -30;

        $r1[176] = 82;

        $r1[177] = -101;

        $r1[178] = -40;

        $r1[179] = 38;

        $r1[180] = -56;

        $r1[181] = 55;

        $r1[182] = -58;

        $r1[183] = 59;

        $r1[184] = -127;

        $r1[185] = -106;

        $r1[186] = 111;

        $r1[187] = 75;

        $r1[188] = 19;

        $r1[189] = -66;

        $r1[190] = 99;

        $r1[191] = 46;

        $r1[192] = -23;

        $r1[193] = 121;

        $r1[194] = -89;

        $r1[195] = -116;

        $r1[196] = -97;

        $r1[197] = 110;

        $r1[198] = -68;

        $r1[199] = -114;

        $r1[200] = 41;

        $r1[201] = -11;

        $r1[202] = -7;

        $r1[203] = -74;

        $r1[204] = 47;

        $r1[205] = -3;

        $r1[206] = -76;

        $r1[207] = 89;

        $r1[208] = 120;

        $r1[209] = -104;

        $r1[210] = 6;

        $r1[211] = 106;

        $r1[212] = -25;

        $r1[213] = 70;

        $r1[214] = 113;

        $r1[215] = -70;

        $r1[216] = -44;

        $r1[217] = 37;

        $r1[218] = -85;

        $r1[219] = 66;

        $r1[220] = -120;

        $r1[221] = -94;

        $r1[222] = -115;

        $r1[223] = -6;

        $r1[224] = 114;

        $r1[225] = 7;

        $r1[226] = -71;

        $r1[227] = 85;

        $r1[228] = -8;

        $r1[229] = -18;

        $r1[230] = -84;

        $r1[231] = 10;

        $r1[232] = 54;

        $r1[233] = 73;

        $r1[234] = 42;

        $r1[235] = 104;

        $r1[236] = 60;

        $r1[237] = 56;

        $r1[238] = -15;

        $r1[239] = -92;

        $r1[240] = 64;

        $r1[241] = 40;

        $r1[242] = -45;

        $r1[243] = 123;

        $r1[244] = -69;

        $r1[245] = -55;

        $r1[246] = 67;

        $r1[247] = -63;

        $r1[248] = 21;

        $r1[249] = -29;

        $r1[250] = -83;

        $r1[251] = -12;

        $r1[252] = 119;

        $r1[253] = -57;

        $r1[254] = -128;

        $r1[255] = -98;

        <org.bouncycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1> = $r1;

        return;
    }
}
