public final class org.codehaus.jackson.util.ByteArrayBuilder extends java.io.OutputStream
{
    private static final byte[] NO_BYTES;
    private static final int INITIAL_BLOCK_SIZE;
    private static final int MAX_BLOCK_SIZE;
    static final int DEFAULT_BLOCK_ARRAY_SIZE;
    private final org.codehaus.jackson.util.BufferRecycler _bufferRecycler;
    private final java.util.LinkedList _pastBlocks;
    private int _pastLen;
    private byte[] _currBlock;
    private int _currBlockPtr;

    public void <init>()
    {
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        specialinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>(org.codehaus.jackson.util.BufferRecycler)>(null);

        return;
    }

    public void <init>(org.codehaus.jackson.util.BufferRecycler)
    {
        org.codehaus.jackson.util.BufferRecycler r1;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler;

        specialinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>(org.codehaus.jackson.util.BufferRecycler,int)>(r1, 500);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>(org.codehaus.jackson.util.BufferRecycler,int)>(null, i0);

        return;
    }

    public void <init>(org.codehaus.jackson.util.BufferRecycler, int)
    {
        org.codehaus.jackson.util.BufferRecycler r2;
        org.codehaus.jackson.util.BufferRecycler$ByteBufferType $r3;
        byte[] $r4, $r5;
        int i0;
        java.util.LinkedList $r1;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        r2 := @parameter0: org.codehaus.jackson.util.BufferRecycler;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks> = $r1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: org.codehaus.jackson.util.BufferRecycler _bufferRecycler> = r2;

        if r2 != null goto label1;

        $r5 = newarray (byte)[i0];

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock> = $r5;

        goto label2;

     label1:
        $r3 = <org.codehaus.jackson.util.BufferRecycler$ByteBufferType: org.codehaus.jackson.util.BufferRecycler$ByteBufferType WRITE_CONCAT_BUFFER>;

        $r4 = virtualinvoke r2.<org.codehaus.jackson.util.BufferRecycler: byte[] allocByteBuffer(org.codehaus.jackson.util.BufferRecycler$ByteBufferType)>($r3);

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock> = $r4;

     label2:
        return;
    }

    public void reset()
    {
        byte[] $r4;
        java.lang.Object $r3;
        java.util.LinkedList $r1, $r2, $r5;
        org.codehaus.jackson.util.ByteArrayBuilder r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _pastLen> = 0;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = 0;

        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getLast()>();

        $r4 = (byte[]) $r3;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock> = $r4;

        $r5 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks>;

        virtualinvoke $r5.<java.util.LinkedList: void clear()>();

     label1:
        return;
    }

    public void release()
    {
        org.codehaus.jackson.util.BufferRecycler $r1, $r5;
        byte[] $r2, $r3;
        org.codehaus.jackson.util.BufferRecycler$ByteBufferType $r4;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void reset()>();

        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: org.codehaus.jackson.util.BufferRecycler _bufferRecycler>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        if $r2 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: org.codehaus.jackson.util.BufferRecycler _bufferRecycler>;

        $r4 = <org.codehaus.jackson.util.BufferRecycler$ByteBufferType: org.codehaus.jackson.util.BufferRecycler$ByteBufferType WRITE_CONCAT_BUFFER>;

        $r3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        virtualinvoke $r5.<org.codehaus.jackson.util.BufferRecycler: void releaseByteBuffer(org.codehaus.jackson.util.BufferRecycler$ByteBufferType,byte[])>($r4, $r3);

     label1:
        return;
    }

    public void append(int)
    {
        byte[] $r1, $r2;
        byte b1;
        int i0, $i2, $i3, $i4, $i5;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        i0 := @parameter0: int;

        b1 = (byte) i0;

        $i3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i2 = lengthof $r1;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void _allocMore()>();

     label1:
        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i4 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i5;

        $r2[$i4] = b1;

        return;
    }

    public void appendTwoBytes(int)
    {
        byte[] $r1, $r2, $r3;
        byte $b8, $b11;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i9, $i10;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        i3 := @parameter0: int;

        $i0 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i2 = $i0 + 1;

        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label1;

        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i5 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i6;

        $i7 = i3 >> 8;

        $b8 = (byte) $i7;

        $r2[$i5] = $b8;

        $r3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i9 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i10 = $i9 + 1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i10;

        $b11 = (byte) i3;

        $r3[$i9] = $b11;

        goto label2;

     label1:
        $i4 = i3 >> 8;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>($i4);

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i3);

     label2:
        return;
    }

    public void appendThreeBytes(int)
    {
        byte[] $r1, $r2, $r3, $r4;
        byte $b9, $b13, $b16;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i14, $i15;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        i3 := @parameter0: int;

        $i0 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i2 = $i0 + 2;

        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label1;

        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i6 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i7 = $i6 + 1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i7;

        $i8 = i3 >> 16;

        $b9 = (byte) $i8;

        $r2[$i6] = $b9;

        $r3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i10 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i11 = $i10 + 1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i11;

        $i12 = i3 >> 8;

        $b13 = (byte) $i12;

        $r3[$i10] = $b13;

        $r4 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i14 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i15 = $i14 + 1;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i15;

        $b16 = (byte) i3;

        $r4[$i14] = $b16;

        goto label2;

     label1:
        $i4 = i3 >> 16;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>($i4);

        $i5 = i3 >> 8;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>($i5);

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i3);

     label2:
        return;
    }

    public byte[] toByteArray()
    {
        byte[] r1, $r4, r15, $r16;
        int $i0, $i1, i2, $i3, $i4, i5, i6, i7;
        java.lang.String $r13;
        java.util.LinkedList $r2, $r5;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r14;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        $i1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _pastLen>;

        $i0 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        i2 = $i1 + $i0;

        if i2 != 0 goto label1;

        $r16 = <org.codehaus.jackson.util.ByteArrayBuilder: byte[] NO_BYTES>;

        return $r16;

     label1:
        r1 = newarray (byte)[i2];

        i6 = 0;

        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r15 = (byte[]) $r14;

        i5 = lengthof r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, 0, r1, i6, i5);

        i6 = i6 + i5;

        goto label2;

     label3:
        $r4 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i6, $i3);

        $i4 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        i7 = i6 + $i4;

        if i7 == i2 goto label4;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: total len assumed to be ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", copied ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label4:
        $r5 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks>;

        $z1 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void reset()>();

     label5:
        return r1;
    }

    private void _allocMore()
    {
        byte[] $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.LinkedList $r3;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        $i1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _pastLen>;

        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i0 = lengthof $r1;

        $i2 = $i1 + $i0;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _pastLen> = $i2;

        $i3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _pastLen>;

        $i4 = $i3 >> 1;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, 1000);

        i6 = $i5;

        if $i5 <= 262144 goto label1;

        i6 = 262144;

     label1:
        $r3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: java.util.LinkedList _pastBlocks>;

        $r2 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r2);

        $r4 = newarray (byte)[i6];

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock> = $r4;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = 0;

        return;
    }

    public void write(byte[])
    {
        int $i0;
        byte[] r1;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int)
    {
        byte[] $r1, r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        r2 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

     label1:
        $r1 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i3 = $i1 - $i0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i8);

        if $i2 <= 0 goto label2;

        $r3 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] _currBlock>;

        $i4 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r3, $i4, $i2);

        i7 = i7 + $i2;

        $i5 = r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr>;

        $i6 = $i5 + $i2;

        r0.<org.codehaus.jackson.util.ByteArrayBuilder: int _currBlockPtr> = $i6;

        i8 = i8 - $i2;

     label2:
        if i8 > 0 goto label3;

        goto label4;

     label3:
        specialinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void _allocMore()>();

        goto label1;

     label4:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        int i0;
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i0);

        return;
    }

    public void close()
    {
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        return;
    }

    public void flush()
    {
        org.codehaus.jackson.util.ByteArrayBuilder r0;

        r0 := @this: org.codehaus.jackson.util.ByteArrayBuilder;

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.codehaus.jackson.util.ByteArrayBuilder: int DEFAULT_BLOCK_ARRAY_SIZE> = 40;

        <org.codehaus.jackson.util.ByteArrayBuilder: int MAX_BLOCK_SIZE> = 262144;

        <org.codehaus.jackson.util.ByteArrayBuilder: int INITIAL_BLOCK_SIZE> = 500;

        $r0 = newarray (byte)[0];

        <org.codehaus.jackson.util.ByteArrayBuilder: byte[] NO_BYTES> = $r0;

        return;
    }
}
