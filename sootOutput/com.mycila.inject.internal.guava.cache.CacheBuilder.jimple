public final class com.mycila.inject.internal.guava.cache.CacheBuilder extends java.lang.Object
{
    private static final int DEFAULT_INITIAL_CAPACITY;
    private static final int DEFAULT_CONCURRENCY_LEVEL;
    private static final int DEFAULT_EXPIRATION_NANOS;
    static final com.mycila.inject.internal.guava.base.Supplier DEFAULT_STATS_COUNTER;
    static final com.mycila.inject.internal.guava.cache.CacheStats EMPTY_STATS;
    static final com.mycila.inject.internal.guava.base.Supplier CACHE_STATS_COUNTER;
    static final int UNSET_INT;
    int initialCapacity;
    int concurrencyLevel;
    int maximumSize;
    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength;
    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength;
    long expireAfterWriteNanos;
    long expireAfterAccessNanos;
    com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause;
    com.mycila.inject.internal.guava.base.Equivalence keyEquivalence;
    com.mycila.inject.internal.guava.base.Equivalence valueEquivalence;
    com.mycila.inject.internal.guava.cache.RemovalListener removalListener;
    com.mycila.inject.internal.guava.base.Ticker ticker;

    void <init>()
    {
        int $i1, $i3, $i5;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity> = $i1;

        $i3 = (int) -1;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel> = $i3;

        $i5 = (int) -1;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize> = $i5;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos> = -1L;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos> = -1L;

        return;
    }

    public static com.mycila.inject.internal.guava.cache.CacheBuilder newBuilder()
    {
        com.mycila.inject.internal.guava.cache.CacheBuilder $r0;

        $r0 = new com.mycila.inject.internal.guava.cache.CacheBuilder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: void <init>()>();

        return $r0;
    }

    private boolean useNullCache()
    {
        com.mycila.inject.internal.guava.cache.RemovalCause $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    com.mycila.inject.internal.guava.cache.CacheBuilder keyEquivalence(com.mycila.inject.internal.guava.base.Equivalence)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r1, $r3, r4, $r6;
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r4 := @parameter0: com.mycila.inject.internal.guava.base.Equivalence;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "key equivalence was already set to %s", $r2);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.base.Equivalence) $r5;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence> = $r6;

        return r0;
    }

    com.mycila.inject.internal.guava.base.Equivalence getKeyEquivalence()
    {
        com.mycila.inject.internal.guava.base.Equivalence $r1, $r3, $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r2;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r4;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength getKeyStrength()>();

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.base.Equivalence defaultEquivalence()>();

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r5 = (com.mycila.inject.internal.guava.base.Equivalence) $r4;

        return $r5;
    }

    com.mycila.inject.internal.guava.cache.CacheBuilder valueEquivalence(com.mycila.inject.internal.guava.base.Equivalence)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r1, $r3, r4, $r6;
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r4 := @parameter0: com.mycila.inject.internal.guava.base.Equivalence;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "value equivalence was already set to %s", $r2);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.base.Equivalence) $r5;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence> = $r6;

        return r0;
    }

    com.mycila.inject.internal.guava.base.Equivalence getValueEquivalence()
    {
        com.mycila.inject.internal.guava.base.Equivalence $r1, $r3, $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r2;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r4;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength getValueStrength()>();

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.base.Equivalence defaultEquivalence()>();

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r5 = (com.mycila.inject.internal.guava.base.Equivalence) $r4;

        return $r5;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder initialCapacity(int)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        int $i0, $i1, i2, $i4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        i2 := @parameter0: int;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "initial capacity was already set to %s", $r1);

        if i2 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z1);

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity> = i2;

        return r0;
    }

    int getInitialCapacity()
    {
        int $i0, $i1, $i3;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $i1 = 16;

        goto label2;

     label1:
        $i1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity>;

     label2:
        return $i1;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder concurrencyLevel(int)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        int $i0, $i1, i2, $i4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        i2 := @parameter0: int;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "concurrency level was already set to %s", $r1);

        if i2 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z1);

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel> = i2;

        return r0;
    }

    int getConcurrencyLevel()
    {
        int $i0, $i1, $i3;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $i1 = 4;

        goto label2;

     label1:
        $i1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel>;

     label2:
        return $i1;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder maximumSize(int)
    {
        java.lang.Object[] $r1;
        com.mycila.inject.internal.guava.cache.RemovalCause $r3;
        java.lang.Integer $r2;
        int $i0, $i1, i2, $i3, $i5;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        i2 := @parameter0: int;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "maximum size was already set to %s", $r1);

        if i2 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "maximum size must not be negative");

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize> = i2;

        $i3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize>;

        if $i3 != 0 goto label5;

        $r3 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause SIZE>;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause> = $r3;

     label5:
        return r0;
    }

    com.mycila.inject.internal.guava.cache.CacheBuilder strongKeys()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength STRONG>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setKeyStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r1);

        return $r2;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder weakKeys()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength WEAK>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setKeyStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r1);

        return $r2;
    }

    com.mycila.inject.internal.guava.cache.CacheBuilder setKeyStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)
    {
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1, $r3, r4, $r6;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r4 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength>;

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Key strength was already set to %s", $r2);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength) $r5;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength> = $r6;

        return r0;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength getKeyStrength()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1, $r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength>;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength STRONG>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r4 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength) $r3;

        return $r4;
    }

    com.mycila.inject.internal.guava.cache.CacheBuilder strongValues()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength STRONG>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setValueStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r1);

        return $r2;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder weakValues()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength WEAK>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setValueStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r1);

        return $r2;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder softValues()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength SOFT>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setValueStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r1);

        return $r2;
    }

    com.mycila.inject.internal.guava.cache.CacheBuilder setValueStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)
    {
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1, $r3, r4, $r6;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r4 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Value strength was already set to %s", $r2);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength) $r5;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength> = $r6;

        return r0;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength getValueStrength()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r1, $r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        $r1 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength STRONG>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r4 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength) $r3;

        return $r4;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder expireAfterWrite(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1;
        byte $b2;
        com.mycila.inject.internal.guava.cache.RemovalCause $r2, $r3;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        long l0, $l1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: void checkExpiration(long,java.util.concurrent.TimeUnit)>(l0, r1);

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos> = $l1;

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label1;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause>;

        if $r2 != null goto label1;

        $r3 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPIRED>;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause> = $r3;

     label1:
        return r0;
    }

    private void checkExpiration(long, java.util.concurrent.TimeUnit)
    {
        java.lang.Object[] $r1, $r3, $r5;
        long $l0, $l2, $l3, $l5, l6;
        byte $b1, $b4, $b7;
        java.lang.Long $r2, $r4, $r6;
        int $i8;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        boolean $z0, $z1, $z2;
        java.util.concurrent.TimeUnit r7;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        l6 := @parameter0: long;

        r7 := @parameter1: java.util.concurrent.TimeUnit;

        $l0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $l2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[0] = $r2;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "expireAfterWrite was already set to %s ns", $r1);

        $l3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos>;

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[1];

        $l5 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r3[0] = $r4;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "expireAfterAccess was already set to %s ns", $r3);

        $b7 = l6 cmp 0L;

        $i8 = (int) $b7;

        if $i8 < 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r5[0] = $r6;

        $r5[1] = r7;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "duration cannot be negative: %s %s", $r5);

        return;
    }

    long getExpireAfterWriteNanos()
    {
        byte $b1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        long $l0, $l2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $l0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $l2 = 0L;

        goto label2;

     label1:
        $l2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos>;

     label2:
        return $l2;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder expireAfterAccess(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1;
        byte $b2;
        com.mycila.inject.internal.guava.cache.RemovalCause $r2, $r3;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        long l0, $l1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: void checkExpiration(long,java.util.concurrent.TimeUnit)>(l0, r1);

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos> = $l1;

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label1;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause>;

        if $r2 != null goto label1;

        $r3 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPIRED>;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalCause nullRemovalCause> = $r3;

     label1:
        return r0;
    }

    long getExpireAfterAccessNanos()
    {
        byte $b1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        long $l0, $l2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $l0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $l2 = 0L;

        goto label2;

     label1:
        $l2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos>;

     label2:
        return $l2;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder ticker(com.mycila.inject.internal.guava.base.Ticker)
    {
        com.mycila.inject.internal.guava.base.Ticker $r1, r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r2 := @parameter0: com.mycila.inject.internal.guava.base.Ticker;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Ticker ticker>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (com.mycila.inject.internal.guava.base.Ticker) $r3;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Ticker ticker> = $r4;

        return r0;
    }

    com.mycila.inject.internal.guava.base.Ticker getTicker()
    {
        com.mycila.inject.internal.guava.base.Ticker $r1, $r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Ticker ticker>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Ticker: com.mycila.inject.internal.guava.base.Ticker systemTicker()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r4 = (com.mycila.inject.internal.guava.base.Ticker) $r3;

        return $r4;
    }

    public com.mycila.inject.internal.guava.cache.CacheBuilder removalListener(com.mycila.inject.internal.guava.cache.RemovalListener)
    {
        com.mycila.inject.internal.guava.cache.RemovalListener $r1, r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.RemovalListener;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalListener removalListener>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (com.mycila.inject.internal.guava.cache.RemovalListener) $r3;

        r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalListener removalListener> = $r4;

        return r0;
    }

    com.mycila.inject.internal.guava.cache.RemovalListener getRemovalListener()
    {
        com.mycila.inject.internal.guava.cache.RemovalListener $r2, $r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullListener $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalListener removalListener>;

        $r1 = <com.mycila.inject.internal.guava.cache.CacheBuilder$NullListener: com.mycila.inject.internal.guava.cache.CacheBuilder$NullListener INSTANCE>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r4 = (com.mycila.inject.internal.guava.cache.RemovalListener) $r3;

        return $r4;
    }

    public com.mycila.inject.internal.guava.cache.Cache build(com.mycila.inject.internal.guava.cache.CacheLoader)
    {
        com.mycila.inject.internal.guava.cache.CacheBuilder$NullCache $r6;
        com.mycila.inject.internal.guava.base.Supplier $r2, $r3;
        com.mycila.inject.internal.guava.cache.CacheLoader r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        com.mycila.inject.internal.guava.cache.ComputingCache $r5;
        com.mycila.inject.internal.guava.cache.AbstractCache $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CacheLoader;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: boolean useNullCache()>();

        if $z0 == 0 goto label1;

        $r5 = new com.mycila.inject.internal.guava.cache.ComputingCache;

        $r4 = $r5;

        $r3 = <com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Supplier CACHE_STATS_COUNTER>;

        specialinvoke $r5.<com.mycila.inject.internal.guava.cache.ComputingCache: void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder,com.mycila.inject.internal.guava.base.Supplier,com.mycila.inject.internal.guava.cache.CacheLoader)>(r0, $r3, r1);

        goto label2;

     label1:
        $r6 = new com.mycila.inject.internal.guava.cache.CacheBuilder$NullCache;

        $r4 = $r6;

        $r2 = <com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Supplier CACHE_STATS_COUNTER>;

        specialinvoke $r6.<com.mycila.inject.internal.guava.cache.CacheBuilder$NullCache: void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder,com.mycila.inject.internal.guava.base.Supplier,com.mycila.inject.internal.guava.cache.CacheLoader)>(r0, $r2, r1);

     label2:
        return $r4;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.base.Equivalence $r4, $r5;
        java.lang.Integer $r22, $r23, $r24;
        byte $b4, $b6;
        com.mycila.inject.internal.guava.cache.RemovalListener $r6;
        com.mycila.inject.internal.guava.base.Objects$ToStringHelper $r1;
        java.lang.StringBuilder $r15, $r16, $r19, $r20, $r25, $r26;
        long $l3, $l5, $l7, $l8;
        int $i0, $i1, $i2, $i9, $i10, $i11, $i13, $i15, $i17;
        com.mycila.inject.internal.guava.cache.CacheBuilder r0;
        java.lang.String $r7, $r9, $r10, $r12, $r13, $r17, $r21;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r2, $r3, $r8, $r11;

        r0 := @this: com.mycila.inject.internal.guava.cache.CacheBuilder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: com.mycila.inject.internal.guava.base.Objects$ToStringHelper toStringHelper(java.lang.Object)>(r0);

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity>;

        $i13 = (int) -1;

        if $i0 == $i13 goto label01;

        $i11 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int initialCapacity>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("initialCapacity", $r24);

     label01:
        $i1 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel>;

        $i15 = (int) -1;

        if $i1 == $i15 goto label02;

        $i10 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int concurrencyLevel>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("concurrencyLevel", $r23);

     label02:
        $i2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize>;

        $i17 = (int) -1;

        if $i2 == $i17 goto label03;

        $i9 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: int maximumSize>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("maximumSize", $r22);

     label03:
        $l3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos>;

        $b4 = $l3 cmp -1L;

        if $b4 == 0 goto label04;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $l8 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterWriteNanos>;

        $r19 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("expireAfterWrite", $r21);

     label04:
        $l5 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos>;

        $b6 = $l5 cmp -1L;

        if $b6 == 0 goto label05;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $l7 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: long expireAfterAccessNanos>;

        $r15 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("expireAfterAccess", $r17);

     label05:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength>;

        if $r2 == null goto label06;

        $r11 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength>;

        $r12 = virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: java.lang.String toString()>();

        $r13 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>($r12);

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("keyStrength", $r13);

     label06:
        $r3 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        if $r3 == null goto label07;

        $r8 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        $r9 = virtualinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: java.lang.String toString()>();

        $r10 = staticinvoke <com.mycila.inject.internal.guava.base.Ascii: java.lang.String toLowerCase(java.lang.String)>($r9);

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper add(java.lang.String,java.lang.Object)>("valueStrength", $r10);

     label07:
        $r4 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        if $r4 == null goto label08;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper addValue(java.lang.Object)>("keyEquivalence");

     label08:
        $r5 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        if $r5 == null goto label09;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper addValue(java.lang.Object)>("valueEquivalence");

     label09:
        $r6 = r0.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.RemovalListener removalListener>;

        if $r6 == null goto label10;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: com.mycila.inject.internal.guava.base.Objects$ToStringHelper addValue(java.lang.Object)>("removalListener");

     label10:
        $r7 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Objects$ToStringHelper: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.base.Supplier $r1;
        com.mycila.inject.internal.guava.cache.CacheBuilder$1 $r0;
        com.mycila.inject.internal.guava.cache.CacheBuilder$2 $r3;
        com.mycila.inject.internal.guava.cache.CacheStats $r2;

        <com.mycila.inject.internal.guava.cache.CacheBuilder: int UNSET_INT> = -1;

        <com.mycila.inject.internal.guava.cache.CacheBuilder: int DEFAULT_EXPIRATION_NANOS> = 0;

        <com.mycila.inject.internal.guava.cache.CacheBuilder: int DEFAULT_CONCURRENCY_LEVEL> = 4;

        <com.mycila.inject.internal.guava.cache.CacheBuilder: int DEFAULT_INITIAL_CAPACITY> = 16;

        $r0 = new com.mycila.inject.internal.guava.cache.CacheBuilder$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.cache.CacheBuilder$1: void <init>()>();

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.Suppliers: com.mycila.inject.internal.guava.base.Supplier ofInstance(java.lang.Object)>($r0);

        <com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Supplier DEFAULT_STATS_COUNTER> = $r1;

        $r2 = new com.mycila.inject.internal.guava.cache.CacheStats;

        specialinvoke $r2.<com.mycila.inject.internal.guava.cache.CacheStats: void <init>(long,long,long,long,long,long)>(0L, 0L, 0L, 0L, 0L, 0L);

        <com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheStats EMPTY_STATS> = $r2;

        $r3 = new com.mycila.inject.internal.guava.cache.CacheBuilder$2;

        specialinvoke $r3.<com.mycila.inject.internal.guava.cache.CacheBuilder$2: void <init>()>();

        <com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.base.Supplier CACHE_STATS_COUNTER> = $r3;

        return;
    }
}
