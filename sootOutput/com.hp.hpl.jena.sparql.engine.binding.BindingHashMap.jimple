public class com.hp.hpl.jena.sparql.engine.binding.BindingHashMap extends com.hp.hpl.jena.sparql.engine.binding.BindingBase implements com.hp.hpl.jena.sparql.engine.binding.BindingMap
{
    java.util.Map map;

    public void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        java.util.HashMap $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map> = $r2;

        return;
    }

    public void <init>()
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        java.util.HashMap $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingRoot: com.hp.hpl.jena.sparql.engine.binding.Binding create()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.BindingBase: void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map> = $r2;

        return;
    }

    protected void add1(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r1;
        java.util.Map $r3;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.Var r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isAnonVar(com.hp.hpl.jena.sparql.core.Var)>(r0);

        if $z0 != 0 goto label1;

        $r3 = r1.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label1:
        return;
    }

    protected int size1()
    {
        int $i0;
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    protected boolean isEmpty1()
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator vars1()
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public boolean contains1(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        java.util.Map $r2;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public com.hp.hpl.jena.graph.Node get1(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.graph.Node) $r3;

        return $r4;
    }

    public final void add(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r1;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var r2;

        r1 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r1, "Binding.add: null value - ignored");

        return;

     label1:
        specialinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: void checkAdd(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r2, r0);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: void add1(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r2, r0);

        return;
    }

    public final void addAll(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingUtils: void addAll(com.hp.hpl.jena.sparql.engine.binding.BindingMap,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, r1);

        return;
    }

    private void checkAdd(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r8;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r3, $r16, $r24;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r29, $r30;
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r2;
        java.lang.String $r9, $r12, $r15, $r23, $r31;
        com.hp.hpl.jena.sparql.core.Var r0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = <com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: boolean CHECKING>;

        if $z0 != 0 goto label1;

        return;

     label1:
        if r0 != null goto label2;

        $r24 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("check(");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): null var");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r31);

        throw $r24;

     label2:
        if r1 != null goto label3;

        $r16 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("check(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): null node value");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label3:
        $z1 = <com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: boolean UNIQUE_NAMES_CHECK>;

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r0);

        if $z2 == 0 goto label4;

        $r3 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to reassign \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from \'");

        $r8 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r0);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r15);

        throw $r3;

     label4:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: void checkAdd1(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r0, r1);

        return;
    }

    protected void checkAdd1(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        return;
    }
}
