class org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser
{
    private final char iValue;

    void <init>(char)
    {
        char c0;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        c0 := @parameter0: char;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> = c0;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        return 1;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r3;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r1;
        org.joda.time.Chronology r2;
        char $c0;
        long l1;
        java.lang.StringBuffer r0;
        java.util.Locale r4;
        int i2;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r0 := @parameter0: java.lang.StringBuffer;

        l1 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i2 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        $c0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        return;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.DateTimeZone r3;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r1;
        org.joda.time.Chronology r2;
        char $c0;
        long l1;
        java.util.Locale r4;
        java.io.Writer r0;
        int i2, $i3;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r0 := @parameter0: java.io.Writer;

        l1 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i2 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        $c0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        $i3 = (int) $c0;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i3);

        return;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        java.lang.StringBuffer r0;
        java.util.Locale r3;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r1;
        org.joda.time.ReadablePartial r2;
        char $c0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r0 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $c0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        return;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        java.util.Locale r3;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r1;
        java.io.Writer r0;
        org.joda.time.ReadablePartial r2;
        int $i1;
        char $c0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r0 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $c0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        $i1 = (int) $c0;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i1);

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        return 1;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r1;
        int i0, $i1, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20;
        java.lang.String r0;
        org.joda.time.format.DateTimeParserBucket r2;
        char $c2, $c3, $c4, $c5, $c6, c9;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r2 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 < $i1 goto label1;

        $i12 = (int) -1;

        $i8 = i0 ^ $i12;

        return $i8;

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        c9 = r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        $i13 = (int) $c2;

        $i14 = (int) c9;

        if $i13 == $i14 goto label2;

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c9);

        $i15 = (int) $c3;

        $i16 = (int) $c4;

        if $i15 == $i16 goto label2;

        $c5 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $c6 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c4);

        $i17 = (int) $c5;

        $i18 = (int) $c6;

        if $i17 == $i18 goto label2;

        $i20 = (int) -1;

        $i7 = i0 ^ $i20;

        return $i7;

     label2:
        $i10 = i0 + 1;

        return $i10;
    }
}
