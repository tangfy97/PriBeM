public class org.jdesktop.swingx.JXTreeTable extends org.jdesktop.swingx.JXTable
{
    private static final java.util.logging.Logger LOG;
    public static final java.lang.String DRAG_HACK_FLAG_KEY;
    public static final java.lang.String DROP_HACK_FLAG_KEY;
    private org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer;
    private org.jdesktop.swingx.treetable.TreeTableCellEditor hierarchicalEditor;
    private org.jdesktop.swingx.JXTreeTable$TreeTableHacker treeTableHacker;
    private boolean consumedOnPress;
    private org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster;
    private boolean processMouseMotion;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.jdesktop.swingx.treetable.DefaultTreeTableModel $r1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = new org.jdesktop.swingx.treetable.DefaultTreeTableModel;

        specialinvoke $r1.<org.jdesktop.swingx.treetable.DefaultTreeTableModel: void <init>()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: void <init>(org.jdesktop.swingx.treetable.TreeTableModel)>($r1);

        return;
    }

    public void <init>(org.jdesktop.swingx.treetable.TreeTableModel)
    {
        org.jdesktop.swingx.treetable.TreeTableModel r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: org.jdesktop.swingx.treetable.TreeTableModel;

        $r1 = new org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        specialinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void <init>(org.jdesktop.swingx.treetable.TreeTableModel)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: void <init>(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)>($r1);

        return;
    }

    private void <init>(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)
    {
        org.jdesktop.swingx.treetable.TreeTableCellEditor $r3;
        org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter $r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        $r1 = new org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter;

        specialinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter: void <init>(javax.swing.JTree)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void <init>(javax.swing.table.TableModel)>($r1);

        r0.<org.jdesktop.swingx.JXTreeTable: boolean processMouseMotion> = 1;

        specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: void init(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: void initActions()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setSortable(boolean)>(0);

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setAutoCreateRowSorter(boolean)>(0);

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setRowSorter(javax.swing.RowSorter)>(null);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void setShowGrid(boolean,boolean)>(0, 0);

        $r3 = new org.jdesktop.swingx.treetable.TreeTableCellEditor;

        specialinvoke $r3.<org.jdesktop.swingx.treetable.TreeTableCellEditor: void <init>(javax.swing.JTree)>(r2);

        r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.treetable.TreeTableCellEditor hierarchicalEditor> = $r3;

        return;
    }

    private void init(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer)
    {
        javax.swing.ListSelectionModel $r3;
        java.lang.AssertionError $r9;
        javax.swing.JTree $r7;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$1 $r4;
        org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper $r2;
        int $i0;
        org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter $r6;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer r1, $r8;
        boolean $z0;
        javax.swing.table.TableModel $r5;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer;

        r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer> = r1;

        $z0 = <org.jdesktop.swingx.JXTreeTable: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: javax.swing.table.TableModel getModel()>();

        $r6 = (org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter) $r5;

        $r7 = staticinvoke <org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter: javax.swing.JTree access$000(org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter)>($r6);

        $r8 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r7 == $r8 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r2 = new org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper;

        specialinvoke $r2.<org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper: void <init>(org.jdesktop.swingx.JXTreeTable)>(r0);

        if r1 == null goto label2;

        virtualinvoke r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void bind(org.jdesktop.swingx.JXTreeTable)>(r0);

        virtualinvoke r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setSelectionModel(javax.swing.tree.TreeSelectionModel)>($r2);

     label2:
        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int getRowHeight()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void adjustTreeRowHeight(int)>($i0);

        specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: void adjustTreeBounds()>();

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper: javax.swing.ListSelectionModel getListSelectionModel()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void setSelectionModel(javax.swing.ListSelectionModel)>($r3);

        $r4 = new org.jdesktop.swingx.JXTreeTable$1;

        specialinvoke $r4.<org.jdesktop.swingx.JXTreeTable$1: void <init>(org.jdesktop.swingx.JXTreeTable)>(r0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("JTree.lineStyle", $r4);

        return;
    }

    private void initActions()
    {
        org.jdesktop.swingx.JXTreeTable$Actions $r2, $r3;
        javax.swing.ActionMap $r1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: javax.swing.ActionMap getActionMap()>();

        $r2 = new org.jdesktop.swingx.JXTreeTable$Actions;

        specialinvoke $r2.<org.jdesktop.swingx.JXTreeTable$Actions: void <init>(org.jdesktop.swingx.JXTreeTable,java.lang.String)>(r0, "expand-all");

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("expand-all", $r2);

        $r3 = new org.jdesktop.swingx.JXTreeTable$Actions;

        specialinvoke $r3.<org.jdesktop.swingx.JXTreeTable$Actions: void <init>(org.jdesktop.swingx.JXTreeTable,java.lang.String)>(r0, "collapse-all");

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("collapse-all", $r3);

        return;
    }

    public void setSortable(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        return;
    }

    public void setAutoCreateRowSorter(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        return;
    }

    public void setRowSorter(javax.swing.RowSorter)
    {
        javax.swing.RowSorter r1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.RowSorter;

        return;
    }

    public void setEnabled(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setEnabled(boolean)>(z0);

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setEnabled(boolean)>(z0);

        return;
    }

    public void setSelectionBackground(java.awt.Color)
    {
        java.awt.Color r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r3;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: java.awt.Color;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setSelectionBackground(java.awt.Color)>(r2);

     label1:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setSelectionBackground(java.awt.Color)>(r2);

        return;
    }

    public void setSelectionForeground(java.awt.Color)
    {
        java.awt.Color r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r3;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: java.awt.Color;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setSelectionForeground(java.awt.Color)>(r2);

     label1:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setSelectionForeground(java.awt.Color)>(r2);

        return;
    }

    public boolean editCellAt(int, int, java.util.EventObject)
    {
        java.awt.Rectangle $r3;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableHacker $r1;
        java.util.EventObject r2;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.EventObject;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker getTreeTableHacker()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableHacker: void hitHandleDetectionFromEditCell(int,java.util.EventObject)>(i0, r2);

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean editCellAt(int,int,java.util.EventObject)>(i1, i0, r2);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>(i0);

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.awt.Rectangle getCellRect(int,int,boolean)>(i1, i0, 0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void repaint(java.awt.Rectangle)>($r3);

     label1:
        return $z0;
    }

    protected void processMouseEvent(java.awt.event.MouseEvent)
    {
        int $i0;
        java.awt.event.MouseEvent r0;
        org.jdesktop.swingx.JXTreeTable r1;
        org.jdesktop.swingx.JXTreeTable$TreeTableHacker $r2;
        boolean $z0, $z1;

        r1 := @this: org.jdesktop.swingx.JXTreeTable;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $i0 = virtualinvoke r0.<java.awt.event.MouseEvent: int getID()>();

        if $i0 != 502 goto label1;

        $z1 = r1.<org.jdesktop.swingx.JXTreeTable: boolean consumedOnPress>;

        if $z1 == 0 goto label1;

        r1.<org.jdesktop.swingx.JXTreeTable: boolean consumedOnPress> = 0;

        virtualinvoke r0.<java.awt.event.MouseEvent: void consume()>();

        return;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker getTreeTableHacker()>();

        $z0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableHacker: boolean hitHandleDetectionFromProcessMouse(java.awt.event.MouseEvent)>(r0);

        if $z0 == 0 goto label2;

        r1.<org.jdesktop.swingx.JXTreeTable: boolean consumedOnPress> = 1;

        virtualinvoke r0.<java.awt.event.MouseEvent: void consume()>();

        return;

     label2:
        r1.<org.jdesktop.swingx.JXTreeTable: boolean consumedOnPress> = 0;

        specialinvoke r1.<org.jdesktop.swingx.JXTable: void processMouseEvent(java.awt.event.MouseEvent)>(r0);

        return;
    }

    protected org.jdesktop.swingx.JXTreeTable$TreeTableHacker getTreeTableHacker()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableHacker $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker treeTableHacker>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker createTreeTableHacker()>();

        r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker treeTableHacker> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableHacker treeTableHacker>;

        return $r2;
    }

    protected org.jdesktop.swingx.JXTreeTable$TreeTableHacker createTreeTableHacker()
    {
        org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt5 $r0;
        org.jdesktop.swingx.JXTreeTable r1;

        r1 := @this: org.jdesktop.swingx.JXTreeTable;

        $r0 = new org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt5;

        specialinvoke $r0.<org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt5: void <init>(org.jdesktop.swingx.JXTreeTable)>(r1);

        return $r0;
    }

    protected void processMouseMotionEvent(java.awt.event.MouseEvent)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        java.awt.event.MouseEvent r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: java.awt.event.MouseEvent;

        $z0 = r0.<org.jdesktop.swingx.JXTreeTable: boolean processMouseMotion>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void processMouseMotionEvent(java.awt.event.MouseEvent)>(r1);

     label1:
        return;
    }

    protected boolean hackAroundDragEnabled(java.awt.event.MouseEvent)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        java.awt.event.MouseEvent r4;
        java.lang.Boolean r2, $r3;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r4 := @parameter0: java.awt.event.MouseEvent;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.lang.Object getClientProperty(java.lang.Object)>("treeTable.dragHackFlag");

        r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean getDragEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int getEditingRow()
    {
        int $i0, $i1, $i3;
        org.jdesktop.swingx.JXTreeTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $i0 = r0.<org.jdesktop.swingx.JXTreeTable: int editingColumn>;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>($i0);

        if $z0 == 0 goto label1;

        $i3 = (int) -1;

        $i1 = $i3;

        goto label2;

     label1:
        $i1 = r0.<org.jdesktop.swingx.JXTreeTable: int editingRow>;

     label2:
        return $i1;
    }

    private int realEditingRow()
    {
        int $i0;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $i0 = r0.<org.jdesktop.swingx.JXTreeTable: int editingRow>;

        return $i0;
    }

    public void setTreeTableModel(org.jdesktop.swingx.treetable.TreeTableModel)
    {
        org.jdesktop.swingx.treetable.TreeTableModel $r1, r2, $r4;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r3;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: org.jdesktop.swingx.treetable.TreeTableModel;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.treetable.TreeTableModel getTreeTableModel()>();

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setModel(javax.swing.tree.TreeModel)>(r2);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.treetable.TreeTableModel getTreeTableModel()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("treeTableModel", $r1, $r4);

        return;
    }

    public org.jdesktop.swingx.treetable.TreeTableModel getTreeTableModel()
    {
        javax.swing.tree.TreeModel $r2;
        org.jdesktop.swingx.treetable.TreeTableModel $r3;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeModel getModel()>();

        $r3 = (org.jdesktop.swingx.treetable.TreeTableModel) $r2;

        return $r3;
    }

    public final void setModel(javax.swing.table.TableModel)
    {
        java.lang.IllegalArgumentException $r1, $r4;
        org.jdesktop.swingx.JXTreeTable $r3, r5;
        org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter $r2, $r6;
        javax.swing.table.TableModel r0;
        boolean $z0;

        r5 := @this: org.jdesktop.swingx.JXTreeTable;

        r0 := @parameter0: javax.swing.table.TableModel;

        $z0 = r0 instanceof org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter;

        if $z0 == 0 goto label2;

        $r2 = (org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter) r0;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter: org.jdesktop.swingx.JXTreeTable getTreeTable()>();

        if $r3 != null goto label1;

        specialinvoke r5.<org.jdesktop.swingx.JXTable: void setModel(javax.swing.table.TableModel)>(r0);

        $r6 = (org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter) r0;

        virtualinvoke $r6.<org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter: void bind(org.jdesktop.swingx.JXTreeTable)>(r5);

        goto label3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("model already bound");

        throw $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported model type");

        throw $r1;

     label3:
        return;
    }

    public void tableChanged(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r1;
        org.jdesktop.swingx.JXTreeTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.event.TableModelEvent;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isStructureChanged(javax.swing.event.TableModelEvent)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isUpdate(javax.swing.event.TableModelEvent)>(r1);

        if $z1 == 0 goto label2;

     label1:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void tableChanged(javax.swing.event.TableModelEvent)>(r1);

        goto label3;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void resizeAndRepaint()>();

     label3:
        return;
    }

    public final void setRowHeight(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        org.jdesktop.swingx.JXTreeTable r1;

        r1 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("variable height rows not supported");

        throw $r0;
    }

    public void setRowHeight(int)
    {
        int i0, $i1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setRowHeight(int)>(i0);

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int getRowHeight()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void adjustTreeRowHeight(int)>($i1);

        return;
    }

    protected void adjustTreeRowHeight(int)
    {
        int $i0, i1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i1 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $i0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int getRowHeight()>();

        if $i0 == i1 goto label1;

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setRowHeight(int)>(i1);

     label1:
        return;
    }

    protected void adjustTableRowHeight(int)
    {
        int $i0, i1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int getRowHeight()>();

        if $i0 == i1 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void adminSetRowHeight(int)>(i1);

     label1:
        return;
    }

    public void columnMarginChanged(javax.swing.event.ChangeEvent)
    {
        javax.swing.event.ChangeEvent r1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.event.ChangeEvent;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void columnMarginChanged(javax.swing.event.ChangeEvent)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: void adjustTreeBounds()>();

        return;
    }

    private void adjustTreeBounds()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setBounds(int,int,int,int)>(0, 0, 0, 0);

     label1:
        return;
    }

    public void setSelectionMode(int)
    {
        javax.swing.tree.TreeSelectionModel $r3, $r5, $r7;
        org.jdesktop.swingx.JXTreeTable r0;
        int i0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r2, $r4, $r6;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label4;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r5 = virtualinvoke $r4.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeSelectionModel getSelectionModel()>();

        interfaceinvoke $r5.<javax.swing.tree.TreeSelectionModel: void setSelectionMode(int)>(2);

        goto label4;

     label2:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeSelectionModel getSelectionModel()>();

        interfaceinvoke $r3.<javax.swing.tree.TreeSelectionModel: void setSelectionMode(int)>(4);

        goto label4;

     label3:
        $r6 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r7 = virtualinvoke $r6.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeSelectionModel getSelectionModel()>();

        interfaceinvoke $r7.<javax.swing.tree.TreeSelectionModel: void setSelectionMode(int)>(1);

     label4:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setSelectionMode(int)>(i0);

        return;
    }

    public java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int)
    {
        int i0, i1;
        org.jdesktop.swingx.decorator.ComponentAdapter $r3;
        javax.swing.table.TableCellRenderer r1;
        java.awt.Component $r2, $r4;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.table.TableCellRenderer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer,int,int)>(r1, i0, i1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int,int)>(i0, i1);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.awt.Component applyRenderer(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)>($r2, $r3);

        return $r4;
    }

    protected java.awt.Component applyRenderer(java.awt.Component, org.jdesktop.swingx.decorator.ComponentAdapter)
    {
        java.awt.Color $r6, $r7, $r8, $r9;
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r10;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        javax.swing.tree.DefaultTreeCellRenderer r5;
        org.jdesktop.swingx.decorator.ComponentAdapter r1;
        java.lang.IllegalArgumentException $r11, $r12;
        java.awt.Component r0;
        org.jdesktop.swingx.JXTreeTable r2;
        javax.swing.tree.TreeCellRenderer $r4, r13;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r3;

        r2 := @this: org.jdesktop.swingx.JXTreeTable;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: org.jdesktop.swingx.decorator.ComponentAdapter;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null component");

        throw $r12;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null component data adapter");

        throw $r11;

     label2:
        $i0 = r1.<org.jdesktop.swingx.decorator.ComponentAdapter: int column>;

        $z0 = virtualinvoke r2.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>($i0);

        if $z0 == 0 goto label5;

        $r3 = r2.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r4 = virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        r13 = $r4;

        $z1 = $r4 instanceof org.jdesktop.swingx.JXTree$DelegatingRenderer;

        if $z1 == 0 goto label3;

        $r10 = (org.jdesktop.swingx.JXTree$DelegatingRenderer) $r4;

        r13 = virtualinvoke $r10.<org.jdesktop.swingx.JXTree$DelegatingRenderer: javax.swing.tree.TreeCellRenderer getDelegateRenderer()>();

     label3:
        $z2 = r13 instanceof javax.swing.tree.DefaultTreeCellRenderer;

        if $z2 == 0 goto label5;

        r5 = (javax.swing.tree.DefaultTreeCellRenderer) r13;

        $z3 = virtualinvoke r1.<org.jdesktop.swingx.decorator.ComponentAdapter: boolean isSelected()>();

        if $z3 == 0 goto label4;

        $r8 = virtualinvoke r0.<java.awt.Component: java.awt.Color getForeground()>();

        virtualinvoke r5.<javax.swing.tree.DefaultTreeCellRenderer: void setTextSelectionColor(java.awt.Color)>($r8);

        $r9 = virtualinvoke r0.<java.awt.Component: java.awt.Color getBackground()>();

        virtualinvoke r5.<javax.swing.tree.DefaultTreeCellRenderer: void setBackgroundSelectionColor(java.awt.Color)>($r9);

        goto label5;

     label4:
        $r6 = virtualinvoke r0.<java.awt.Component: java.awt.Color getForeground()>();

        virtualinvoke r5.<javax.swing.tree.DefaultTreeCellRenderer: void setTextNonSelectionColor(java.awt.Color)>($r6);

        $r7 = virtualinvoke r0.<java.awt.Component: java.awt.Color getBackground()>();

        virtualinvoke r5.<javax.swing.tree.DefaultTreeCellRenderer: void setBackgroundNonSelectionColor(java.awt.Color)>($r7);

     label5:
        return r0;
    }

    public void setTreeCellRenderer(javax.swing.tree.TreeCellRenderer)
    {
        javax.swing.tree.TreeCellRenderer r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r3;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: javax.swing.tree.TreeCellRenderer;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setCellRenderer(javax.swing.tree.TreeCellRenderer)>(r2);

     label1:
        return;
    }

    public javax.swing.tree.TreeCellRenderer getTreeCellRenderer()
    {
        javax.swing.tree.TreeCellRenderer $r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        return $r2;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        java.awt.Point $r2, $r4;
        org.jdesktop.swingx.JXTreeTable r0;
        java.awt.event.MouseEvent r1;
        int $i0, $i1;
        java.lang.String $r3, $r6;
        boolean $z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r5;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: java.awt.event.MouseEvent;

        $r2 = virtualinvoke r1.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int columnAtPoint(java.awt.Point)>($r2);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>($i0);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int rowAtPoint(java.awt.Point)>($r4);

        $r5 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r6 = staticinvoke <org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.lang.String access$300(org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer,java.awt.event.MouseEvent,int,int)>($r5, r1, $i1, $i0);

        return $r6;

     label1:
        $r3 = specialinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.String getToolTipText(java.awt.event.MouseEvent)>(r1);

        return $r3;
    }

    public void setCollapsedIcon(javax.swing.Icon)
    {
        javax.swing.Icon r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.Icon;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setCollapsedIcon(javax.swing.Icon)>(r1);

        return;
    }

    public void setExpandedIcon(javax.swing.Icon)
    {
        javax.swing.Icon r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.Icon;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setExpandedIcon(javax.swing.Icon)>(r1);

        return;
    }

    public void setOpenIcon(javax.swing.Icon)
    {
        javax.swing.Icon r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.Icon;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setOpenIcon(javax.swing.Icon)>(r1);

        return;
    }

    public void setClosedIcon(javax.swing.Icon)
    {
        javax.swing.Icon r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.Icon;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setClosedIcon(javax.swing.Icon)>(r1);

        return;
    }

    public void setLeafIcon(javax.swing.Icon)
    {
        javax.swing.Icon r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.Icon;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setLeafIcon(javax.swing.Icon)>(r1);

        return;
    }

    public void setOverwriteRendererIcons(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setOverwriteRendererIcons(boolean)>(z0);

        return;
    }

    public boolean isOverwriteRendererIcons()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isOverwriteRendererIcons()>();

        return $z0;
    }

    public void clearSelection()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void clearSelection()>();

     label1:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void clearSelection()>();

        return;
    }

    public void collapseAll()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void collapseAll()>();

        return;
    }

    public void expandAll()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void expandAll()>();

        return;
    }

    public void collapsePath(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void collapsePath(javax.swing.tree.TreePath)>(r1);

        return;
    }

    public void expandPath(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void expandPath(javax.swing.tree.TreePath)>(r1);

        return;
    }

    public void scrollPathToVisible(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void scrollPathToVisible(javax.swing.tree.TreePath)>(r1);

        return;
    }

    public void collapseRow(int)
    {
        int i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void collapseRow(int)>(i0);

        return;
    }

    public void expandRow(int)
    {
        int i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void expandRow(int)>(i0);

        return;
    }

    public boolean isVisible(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isVisible(javax.swing.tree.TreePath)>(r1);

        return $z0;
    }

    public boolean isExpanded(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isExpanded(javax.swing.tree.TreePath)>(r1);

        return $z0;
    }

    public boolean isExpanded(int)
    {
        int i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isExpanded(int)>(i0);

        return $z0;
    }

    public boolean isCollapsed(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isCollapsed(javax.swing.tree.TreePath)>(r1);

        return $z0;
    }

    public boolean isCollapsed(int)
    {
        int i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isCollapsed(int)>(i0);

        return $z0;
    }

    public java.util.Enumeration getExpandedDescendants(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        java.util.Enumeration $r3;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.util.Enumeration getExpandedDescendants(javax.swing.tree.TreePath)>(r1);

        return $r3;
    }

    public javax.swing.tree.TreePath getPathForLocation(int, int)
    {
        javax.swing.tree.TreePath $r3;
        java.awt.Point $r4;
        org.jdesktop.swingx.JXTreeTable r0;
        int i0, i1, $i2, $i4;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = new java.awt.Point;

        specialinvoke $r4.<java.awt.Point: void <init>(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int rowAtPoint(java.awt.Point)>($r4);

        $i4 = (int) -1;

        if $i2 != $i4 goto label1;

        return null;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreePath getPathForRow(int)>($i2);

        return $r3;
    }

    public javax.swing.tree.TreePath getPathForRow(int)
    {
        javax.swing.tree.TreePath $r2;
        int i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreePath getPathForRow(int)>(i0);

        return $r2;
    }

    public int getRowForPath(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        int $i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $i0 = virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int getRowForPath(javax.swing.tree.TreePath)>(r1);

        return $i0;
    }

    public void setRootVisible(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setRootVisible(boolean)>(z0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void revalidate()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void repaint()>();

        return;
    }

    public boolean isRootVisible()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isRootVisible()>();

        return $z0;
    }

    public void setScrollsOnExpand(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setScrollsOnExpand(boolean)>(z0);

        return;
    }

    public boolean getScrollsOnExpand()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean getScrollsOnExpand()>();

        return $z0;
    }

    public void setShowsRootHandles(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setShowsRootHandles(boolean)>(z0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void repaint()>();

        return;
    }

    public boolean getShowsRootHandles()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean getShowsRootHandles()>();

        return $z0;
    }

    public void setExpandsSelectedPaths(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setExpandsSelectedPaths(boolean)>(z0);

        return;
    }

    public boolean getExpandsSelectedPaths()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean getExpandsSelectedPaths()>();

        return $z0;
    }

    public int getToggleClickCount()
    {
        int $i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $i0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: int getToggleClickCount()>();

        return $i0;
    }

    public void setToggleClickCount(int)
    {
        int i0;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setToggleClickCount(int)>(i0);

        return;
    }

    public boolean isLargeModel()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: boolean isLargeModel()>();

        return $z0;
    }

    public void setLargeModel(boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void setLargeModel(boolean)>(z0);

        return;
    }

    public void addTreeExpansionListener(javax.swing.event.TreeExpansionListener)
    {
        org.jdesktop.swingx.event.TreeExpansionBroadcaster $r1;
        javax.swing.event.TreeExpansionListener r2;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: javax.swing.event.TreeExpansionListener;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster getTreeExpansionBroadcaster()>();

        virtualinvoke $r1.<org.jdesktop.swingx.event.TreeExpansionBroadcaster: void addTreeExpansionListener(javax.swing.event.TreeExpansionListener)>(r2);

        return;
    }

    private org.jdesktop.swingx.event.TreeExpansionBroadcaster getTreeExpansionBroadcaster()
    {
        org.jdesktop.swingx.event.TreeExpansionBroadcaster $r1, $r2, $r3, $r4;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r5;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.event.TreeExpansionBroadcaster;

        specialinvoke $r3.<org.jdesktop.swingx.event.TreeExpansionBroadcaster: void <init>(java.lang.Object)>(r0);

        r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster> = $r3;

        $r5 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r4 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster>;

        virtualinvoke $r5.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void addTreeExpansionListener(javax.swing.event.TreeExpansionListener)>($r4);

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster>;

        return $r2;
    }

    public void removeTreeExpansionListener(javax.swing.event.TreeExpansionListener)
    {
        org.jdesktop.swingx.event.TreeExpansionBroadcaster $r1, $r3;
        javax.swing.event.TreeExpansionListener r2;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r2 := @parameter0: javax.swing.event.TreeExpansionListener;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.event.TreeExpansionBroadcaster treeExpansionBroadcaster>;

        virtualinvoke $r3.<org.jdesktop.swingx.event.TreeExpansionBroadcaster: void removeTreeExpansionListener(javax.swing.event.TreeExpansionListener)>(r2);

        return;
    }

    public void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)
    {
        javax.swing.event.TreeSelectionListener r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.event.TreeSelectionListener;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)>(r1);

        return;
    }

    public void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)
    {
        javax.swing.event.TreeSelectionListener r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.event.TreeSelectionListener;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)>(r1);

        return;
    }

    public void addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)
    {
        javax.swing.event.TreeWillExpandListener r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.event.TreeWillExpandListener;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)>(r1);

        return;
    }

    public void removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)
    {
        javax.swing.event.TreeWillExpandListener r1;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        r1 := @parameter0: javax.swing.event.TreeWillExpandListener;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: void removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)>(r1);

        return;
    }

    public javax.swing.tree.TreeSelectionModel getTreeSelectionModel()
    {
        javax.swing.tree.TreeSelectionModel $r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeSelectionModel getSelectionModel()>();

        return $r2;
    }

    public void sizeColumnsToFit(int)
    {
        java.awt.Rectangle $r1;
        java.awt.Component $r2;
        org.jdesktop.swingx.JXTreeTable r0;
        int i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void sizeColumnsToFit(int)>(i0);

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int getEditingColumn()>();

        $i6 = (int) -1;

        if $i1 == $i6 goto label1;

        $i2 = r0.<org.jdesktop.swingx.JXTreeTable: int editingColumn>;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>($i2);

        if $z0 == 0 goto label1;

        $i3 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: int realEditingRow()>();

        $i4 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int getEditingColumn()>();

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.awt.Rectangle getCellRect(int,int,boolean)>($i3, $i4, 0);

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.awt.Component getEditorComponent()>();

        virtualinvoke $r2.<java.awt.Component: void setBounds(java.awt.Rectangle)>($r1);

        virtualinvoke $r2.<java.awt.Component: void validate()>();

     label1:
        return;
    }

    public boolean isHierarchical(int)
    {
        java.lang.IllegalArgumentException $r0;
        org.jdesktop.swingx.JXTreeTable r5;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r5 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r5.<org.jdesktop.swingx.JXTreeTable: int getColumnCount()>();

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column must be valid, was");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $i2 = virtualinvoke r5.<org.jdesktop.swingx.JXTreeTable: int getHierarchicalColumn()>();

        if $i2 != i0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public int getHierarchicalColumn()
    {
        javax.swing.tree.TreeModel $r2;
        int $i0, $i1;
        org.jdesktop.swingx.treetable.TreeTableModel $r3;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: javax.swing.tree.TreeModel getModel()>();

        $r3 = (org.jdesktop.swingx.treetable.TreeTableModel) $r2;

        $i0 = interfaceinvoke $r3.<org.jdesktop.swingx.treetable.TreeTableModel: int getHierarchicalColumn()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: int convertColumnIndexToView(int)>($i0);

        return $i1;
    }

    public javax.swing.table.TableCellRenderer getCellRenderer(int, int)
    {
        int i0, i1;
        javax.swing.table.TableCellRenderer $r1;
        org.jdesktop.swingx.JXTreeTable r0;
        boolean $z0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        return $r2;

     label1:
        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellRenderer getCellRenderer(int,int)>(i1, i0);

        return $r1;
    }

    public javax.swing.table.TableCellEditor getCellEditor(int, int)
    {
        javax.swing.table.TableCellEditor $r1;
        org.jdesktop.swingx.treetable.TreeTableCellEditor $r2;
        int i0, i1;
        org.jdesktop.swingx.JXTreeTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.treetable.TreeTableCellEditor hierarchicalEditor>;

        return $r2;

     label1:
        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellEditor getCellEditor(int,int)>(i1, i0);

        return $r1;
    }

    public void updateUI()
    {
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateUI()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: void updateHierarchicalRendererEditor()>();

        return;
    }

    protected void updateHierarchicalRendererEditor()
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>($r2);

     label1:
        return;
    }

    public java.lang.String getStringAt(int, int)
    {
        int i0, i1;
        java.lang.String $r1, $r2;
        org.jdesktop.swingx.JXTreeTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTreeTable: boolean isHierarchical(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.lang.String getHierarchicalStringAt(int)>(i1);

        return $r2;

     label1:
        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.String getStringAt(int,int)>(i1, i0);

        return $r1;
    }

    private java.lang.String getHierarchicalStringAt(int)
    {
        int i0;
        java.lang.String $r2;
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer: java.lang.String getStringAt(int)>(i0);

        return $r2;
    }

    protected org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()
    {
        org.jdesktop.swingx.decorator.ComponentAdapter $r1, $r2;
        org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter $r3;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @this: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter;

        specialinvoke $r3.<org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter: void <init>(org.jdesktop.swingx.JXTreeTable)>(r0);

        r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter>;

        return $r2;
    }

    static org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer access$100(org.jdesktop.swingx.JXTreeTable)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer $r1;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable;

        $r1 = r0.<org.jdesktop.swingx.JXTreeTable: org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer renderer>;

        return $r1;
    }

    static boolean access$200(org.jdesktop.swingx.JXTreeTable)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean $z0;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable;

        $z0 = r0.<org.jdesktop.swingx.JXTreeTable: boolean processMouseMotion>;

        return $z0;
    }

    static boolean access$202(org.jdesktop.swingx.JXTreeTable, boolean)
    {
        org.jdesktop.swingx.JXTreeTable r0;
        boolean z0;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable;

        z0 := @parameter1: boolean;

        r0.<org.jdesktop.swingx.JXTreeTable: boolean processMouseMotion> = z0;

        return z0;
    }

    static int access$1000(org.jdesktop.swingx.JXTreeTable)
    {
        int $i0;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable;

        $i0 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: int realEditingRow()>();

        return $i0;
    }

    static java.lang.String access$1200(org.jdesktop.swingx.JXTreeTable, int)
    {
        int i0;
        java.lang.String $r1;
        org.jdesktop.swingx.JXTreeTable r0;

        r0 := @parameter0: org.jdesktop.swingx.JXTreeTable;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTreeTable: java.lang.String getHierarchicalStringAt(int)>(i0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;
        boolean $z0, $z1;

        <org.jdesktop.swingx.JXTreeTable: java.lang.String DROP_HACK_FLAG_KEY> = "treeTable.dropHackFlag";

        <org.jdesktop.swingx.JXTreeTable: java.lang.String DRAG_HACK_FLAG_KEY> = "treeTable.dragHackFlag";

        $r0 = class "Lorg/jdesktop/swingx/JXTreeTable;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.jdesktop.swingx.JXTreeTable: boolean $assertionsDisabled> = $z1;

        $r1 = class "Lorg/jdesktop/swingx/JXTreeTable;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <org.jdesktop.swingx.JXTreeTable: java.util.logging.Logger LOG> = $r3;

        return;
    }
}
