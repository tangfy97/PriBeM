final class org.apache.lucene.index.NormsConsumer extends org.apache.lucene.index.InvertedDocEndConsumer
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.index.NormsConsumer r0;

        r0 := @this: org.apache.lucene.index.NormsConsumer;

        specialinvoke r0.<org.apache.lucene.index.InvertedDocEndConsumer: void <init>()>();

        return;
    }

    void abort()
    {
        org.apache.lucene.index.NormsConsumer r0;

        r0 := @this: org.apache.lucene.index.NormsConsumer;

        return;
    }

    public void flush(java.util.Map, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException
    {
        java.util.Map r12;
        java.io.Closeable[] $r2, $r3, $r31, $r32;
        org.apache.lucene.index.FieldInfos $r1, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.lucene.codecs.DocValuesConsumer $r7, r34;
        org.apache.lucene.index.SegmentInfo $r4;
        org.apache.lucene.index.NormsConsumer r33;
        java.lang.StringBuilder $r18, $r19, $r21, $r22, $r24;
        java.lang.Throwable $r30;
        org.apache.lucene.codecs.NormsFormat $r6;
        java.lang.AssertionError $r17, $r28, $r29;
        org.apache.lucene.index.SegmentWriteState r0;
        java.lang.String $r13, $r23, $r25;
        java.util.Iterator $r9;
        org.apache.lucene.index.FieldInfo$DocValuesType $r16, $r20, $r26, $r27;
        org.apache.lucene.index.NormsConsumerPerField r15;
        org.apache.lucene.codecs.Codec $r5;
        org.apache.lucene.index.FieldInfo r11;
        java.lang.Object $r10, $r14;

        r33 := @this: org.apache.lucene.index.NormsConsumer;

        r12 := @parameter0: java.util.Map;

        r0 := @parameter1: org.apache.lucene.index.SegmentWriteState;

        r34 = null;

     label01:
        $r1 = r0.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.index.FieldInfos: boolean hasNorms()>();

        if $z0 == 0 goto label06;

        $r4 = r0.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.NormsFormat normsFormat()>();

        $z1 = <org.apache.lucene.index.NormsConsumer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if $r6 != null goto label02;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label02:
        $r7 = virtualinvoke $r6.<org.apache.lucene.codecs.NormsFormat: org.apache.lucene.codecs.DocValuesConsumer normsConsumer(org.apache.lucene.index.SegmentWriteState)>(r0);

        r34 = $r7;

        $r8 = r0.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label03:
        $z7 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label06;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.index.FieldInfo) $r10;

        $r13 = r11.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r14 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r15 = (org.apache.lucene.index.NormsConsumerPerField) $r14;

        $z2 = virtualinvoke r11.<org.apache.lucene.index.FieldInfo: boolean omitsNorms()>();

        if $z2 != 0 goto label05;

        if r15 == null goto label04;

        $z5 = virtualinvoke r15.<org.apache.lucene.index.NormsConsumerPerField: boolean isEmpty()>();

        if $z5 != 0 goto label04;

        virtualinvoke r15.<org.apache.lucene.index.NormsConsumerPerField: void flush(org.apache.lucene.index.SegmentWriteState,org.apache.lucene.codecs.DocValuesConsumer)>(r0, $r7);

        $z6 = <org.apache.lucene.index.NormsConsumer: boolean $assertionsDisabled>;

        if $z6 != 0 goto label05;

        $r26 = virtualinvoke r11.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getNormType()>();

        $r27 = <org.apache.lucene.index.FieldInfo$DocValuesType: org.apache.lucene.index.FieldInfo$DocValuesType NUMERIC>;

        if $r26 == $r27 goto label05;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label04:
        $z3 = virtualinvoke r11.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z3 == 0 goto label05;

        $z4 = <org.apache.lucene.index.NormsConsumer: boolean $assertionsDisabled>;

        if $z4 != 0 goto label05;

        $r16 = virtualinvoke r11.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getNormType()>();

        if $r16 == null goto label05;

        $r17 = new java.lang.AssertionError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got ");

        $r20 = virtualinvoke r11.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getNormType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; field=");

        $r23 = r11.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r17;

     label05:
        goto label03;

     label06:
        if 1 == 0 goto label07;

        $r3 = newarray (java.io.Closeable)[1];

        $r3[0] = r34;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r3);

        goto label12;

     label07:
        $r2 = newarray (java.io.Closeable)[1];

        $r2[0] = r34;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r2);

        goto label12;

     label08:
        $r30 := @caughtexception;

     label09:
        if 0 == 0 goto label10;

        $r32 = newarray (java.io.Closeable)[1];

        $r32[0] = r34;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r32);

        goto label11;

     label10:
        $r31 = newarray (java.io.Closeable)[1];

        $r31[0] = r34;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r31);

     label11:
        throw $r30;

     label12:
        return;

        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void finishDocument()
    {
        org.apache.lucene.index.NormsConsumer r0;

        r0 := @this: org.apache.lucene.index.NormsConsumer;

        return;
    }

    void startDocument()
    {
        org.apache.lucene.index.NormsConsumer r0;

        r0 := @this: org.apache.lucene.index.NormsConsumer;

        return;
    }

    org.apache.lucene.index.InvertedDocEndConsumerPerField addField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.NormsConsumerPerField $r0;
        org.apache.lucene.index.FieldInfo r2;
        org.apache.lucene.index.NormsConsumer r3;
        org.apache.lucene.index.DocInverterPerField r1;

        r3 := @this: org.apache.lucene.index.NormsConsumer;

        r1 := @parameter0: org.apache.lucene.index.DocInverterPerField;

        r2 := @parameter1: org.apache.lucene.index.FieldInfo;

        $r0 = new org.apache.lucene.index.NormsConsumerPerField;

        specialinvoke $r0.<org.apache.lucene.index.NormsConsumerPerField: void <init>(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.FieldInfo,org.apache.lucene.index.NormsConsumer)>(r1, r2, r3);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/NormsConsumer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.NormsConsumer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
