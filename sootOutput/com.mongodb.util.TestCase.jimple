public class com.mongodb.util.TestCase extends com.mongodb.util.MyAsserts
{
    public java.lang.String cleanupDB;
    public com.mongodb.Mongo cleanupMongo;
    final java.util.List _tests;

    public void <init>()
    {
        com.mongodb.util.TestCase r0;

        r0 := @this: com.mongodb.util.TestCase;

        specialinvoke r0.<com.mongodb.util.TestCase: void <init>(java.lang.String)>(null);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.reflect.Method[] $r3;
        java.util.ArrayList $r1;
        java.util.List $r8;
        com.mongodb.util.TestCase$Test $r6;
        com.mongodb.util.TestCase r0;
        int i0, $i1, $i2, i3;
        java.lang.Class $r2;
        java.lang.String $r5, r7;
        java.lang.reflect.Method r4;
        boolean $z0;

        r0 := @this: com.mongodb.util.TestCase;

        r7 := @parameter0: java.lang.String;

        specialinvoke r0.<com.mongodb.util.MyAsserts: void <init>()>();

        r0.<com.mongodb.util.TestCase: java.lang.String cleanupDB> = null;

        r0.<com.mongodb.util.TestCase: com.mongodb.Mongo cleanupMongo> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.mongodb.util.TestCase: java.util.List _tests> = $r1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r4 = $r3[i3];

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $i1 = virtualinvoke r4.<java.lang.reflect.Method: int getModifiers()>();

        $i2 = $i1 & 0;

        if $i2 <= 0 goto label3;

        goto label4;

     label3:
        $r6 = new com.mongodb.util.TestCase$Test;

        specialinvoke $r6.<com.mongodb.util.TestCase$Test: void <init>(java.lang.Object,java.lang.reflect.Method)>(r0, r4);

        $r6.<com.mongodb.util.TestCase$Test: java.lang.String _name> = r7;

        $r8 = r0.<com.mongodb.util.TestCase: java.util.List _tests>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return;
    }

    public void <init>(java.lang.Object, java.lang.String) throws java.lang.NoSuchMethodException
    {
        com.mongodb.util.TestCase r0;
        java.lang.Class[] $r4;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String r3;
        java.lang.reflect.Method $r5;

        r0 := @this: com.mongodb.util.TestCase;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r3, $r4);

        specialinvoke r0.<com.mongodb.util.TestCase: void <init>(java.lang.Object,java.lang.reflect.Method)>(r1, $r5);

        return;
    }

    public void <init>(java.lang.Object, java.lang.reflect.Method)
    {
        java.util.List $r5;
        com.mongodb.util.TestCase$Test $r2;
        com.mongodb.util.TestCase r0;
        java.lang.Object r3;
        java.lang.reflect.Method r4;
        java.util.ArrayList $r1;

        r0 := @this: com.mongodb.util.TestCase;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<com.mongodb.util.MyAsserts: void <init>()>();

        r0.<com.mongodb.util.TestCase: java.lang.String cleanupDB> = null;

        r0.<com.mongodb.util.TestCase: com.mongodb.Mongo cleanupMongo> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.mongodb.util.TestCase: java.util.List _tests> = $r1;

        $r5 = r0.<com.mongodb.util.TestCase: java.util.List _tests>;

        $r2 = new com.mongodb.util.TestCase$Test;

        specialinvoke $r2.<com.mongodb.util.TestCase$Test: void <init>(java.lang.Object,java.lang.reflect.Method)>(r3, r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void add(com.mongodb.util.TestCase)
    {
        java.util.List $r2, $r3;
        com.mongodb.util.TestCase r0, r1;

        r0 := @this: com.mongodb.util.TestCase;

        r1 := @parameter0: com.mongodb.util.TestCase;

        $r3 = r0.<com.mongodb.util.TestCase: java.util.List _tests>;

        $r2 = r1.<com.mongodb.util.TestCase: java.util.List _tests>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public void cleanup()
    {
        com.mongodb.Mongo $r1, $r4;
        com.mongodb.util.TestCase r0;
        java.lang.String $r2, $r3;

        r0 := @this: com.mongodb.util.TestCase;

        $r1 = r0.<com.mongodb.util.TestCase: com.mongodb.Mongo cleanupMongo>;

        if $r1 == null goto label1;

        $r2 = r0.<com.mongodb.util.TestCase: java.lang.String cleanupDB>;

        if $r2 == null goto label1;

        $r4 = r0.<com.mongodb.util.TestCase: com.mongodb.Mongo cleanupMongo>;

        $r3 = r0.<com.mongodb.util.TestCase: java.lang.String cleanupDB>;

        virtualinvoke $r4.<com.mongodb.Mongo: void dropDatabase(java.lang.String)>($r3);

     label1:
        return;
    }

    public boolean runConsole()
    {
        com.mongodb.util.TestCase$Test r61;
        java.lang.StringBuilder $r2, $r4, $r7, $r14, $r16, $r17, $r18, $r20, $r22, $r24, $r26, $r29, $r31, $r33, $r35, $r37, $r38, $r40, $r42, $r43;
        java.lang.Throwable $r59;
        com.mongodb.util.TestCase$Result $r57, r62, r63;
        java.util.ArrayList $r0, $r1;
        com.mongodb.util.TestCase r5;
        java.lang.String $r8, $r21, $r27, $r34, $r39, $r44;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r6, $r10, $r13, $r19, $r25, $r28, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        double $d0, $d1, $d2, $d3;
        java.io.PrintStream $r3, $r9, $r12, $r15, $r23, $r30, $r36, $r41, $r45, $r46, $r48, $r49, $r52, $r54, $r55, $r58, $r60;
        java.util.Iterator $r11, $r47, $r50;
        java.lang.Object $r51, $r53, $r56;

        r5 := @this: com.mongodb.util.TestCase;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Num Tests : ");

        $r6 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("----");

        $r10 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r56 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r61 = (com.mongodb.util.TestCase$Test) $r56;

        $r57 = virtualinvoke r61.<com.mongodb.util.TestCase$Test: com.mongodb.util.TestCase$Result run()>();

        $z2 = virtualinvoke $r57.<com.mongodb.util.TestCase$Result: boolean ok()>();

        if $z2 == 0 goto label02;

        $r60 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r60.<java.io.PrintStream: void print(java.lang.String)>(".");

        goto label01;

     label02:
        $r58 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r58.<java.io.PrintStream: void print(java.lang.String)>("x");

        $r59 = $r57.<com.mongodb.util.TestCase$Result: java.lang.Throwable _error>;

        $z3 = $r59 instanceof com.mongodb.util.MyAsserts$MyAssert;

        if $z3 == 0 goto label03;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r57);

        goto label04;

     label03:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r57);

     label04:
        goto label01;

     label05:
        virtualinvoke r5.<com.mongodb.util.TestCase: void cleanup()>();

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("\n----");

        $r13 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i4 = $i2 + $i3;

        i15 = $i1 - $i4;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Passes : ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $r19 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i5 = interfaceinvoke $r19.<java.util.List: int size()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("% Pass : ");

        $d0 = (double) i15;

        $d1 = $d0 * 100.0;

        $r25 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i6 = interfaceinvoke $r25.<java.util.List: int size()>();

        $d2 = (double) $i6;

        $d3 = $d1 / $d2;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r28 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i7 = interfaceinvoke $r28.<java.util.List: int size()>();

        if i15 != $i7 goto label06;

        $r55 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>("SUCCESS");

        return 1;

     label06:
        $r30 = <java.lang.System: java.io.PrintStream err>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Num Pass : ");

        $r32 = r5.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i8 = interfaceinvoke $r32.<java.util.List: int size()>();

        $i9 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i10 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i11 = $i9 + $i10;

        $i12 = $i8 - $i11;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r34);

        $r36 = <java.lang.System: java.io.PrintStream err>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Num Erros : ");

        $i13 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r41 = <java.lang.System: java.io.PrintStream err>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Num Fails : ");

        $i14 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r44);

        $r45 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r45.<java.io.PrintStream: void println(java.lang.String)>("---------");

        $r46 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r46.<java.io.PrintStream: void println(java.lang.String)>("ERRORS");

        $r47 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r47.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r53 = interfaceinvoke $r47.<java.util.Iterator: java.lang.Object next()>();

        r62 = (com.mongodb.util.TestCase$Result) $r53;

        $r54 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.Object)>(r62);

        goto label07;

     label08:
        $r48 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.String)>("---------");

        $r49 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>("FAILS");

        $r50 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r51 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r63 = (com.mongodb.util.TestCase$Result) $r51;

        $r52 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.Object)>(r63);

        goto label09;

     label10:
        return 0;
    }

    public java.lang.String toString()
    {
        java.util.List $r3;
        com.mongodb.util.TestCase r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r5;

        r2 := @this: com.mongodb.util.TestCase;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TestCase numCase:");

        $r3 = r2.<com.mongodb.util.TestCase: java.util.List _tests>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected static void run(java.lang.String[])
    {
        java.lang.String[] r1;
        com.mongodb.util.Args $r0;
        java.lang.Thread $r2;
        int i0, i1;
        com.mongodb.util.TestCase $r7, r16;
        java.lang.StackTraceElement r10;
        java.lang.String $r6, $r8, $r11, $r12, r15;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r9, $r14;
        java.lang.Exception $r13;
        java.lang.StackTraceElement[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r1 := @parameter0: java.lang.String[];

        $r0 = new com.mongodb.util.Args;

        specialinvoke $r0.<com.mongodb.util.Args: void <init>(java.lang.String[])>(r1);

        z2 = 0;

        r15 = null;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r10 = $r3[i1];

        if z2 == 0 goto label2;

        r15 = virtualinvoke r10.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        goto label4;

     label2:
        $r11 = virtualinvoke r10.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("com.mongodb.util.TestCase");

        if $z0 == 0 goto label3;

        $r12 = virtualinvoke r10.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("run");

        if $z1 == 0 goto label3;

        z2 = 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if r15 != null goto label5;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("something is broken");

        throw $r9;

     label5:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r15);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        r16 = (com.mongodb.util.TestCase) $r5;

        $r6 = virtualinvoke $r0.<com.mongodb.util.Args: java.lang.String getOption(java.lang.String)>("m");

        if $r6 == null goto label6;

        $r7 = new com.mongodb.util.TestCase;

        $r8 = virtualinvoke $r0.<com.mongodb.util.Args: java.lang.String getOption(java.lang.String)>("m");

        specialinvoke $r7.<com.mongodb.util.TestCase: void <init>(java.lang.Object,java.lang.String)>(r16, $r8);

        r16 = $r7;

     label6:
        virtualinvoke r16.<com.mongodb.util.TestCase: boolean runConsole()>();

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label9:
        return;

        catch java.lang.Exception from label5 to label7 with label8;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        boolean $z0, $z1;
        java.lang.Process $r20;
        java.lang.Runtime $r15;
        java.lang.Exception $r13;
        java.util.List $r11, $r12;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4;
        com.mongodb.util.TestCase r10, $r24;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, r14, $r19, $r25;
        java.io.PrintStream $r9;
        java.io.InputStreamReader $r22;
        java.lang.Class $r7;
        java.lang.Object $r8;
        java.io.BufferedReader $r21;
        java.io.InputStream $r23;

        r0 := @parameter0: java.lang.String[];

        r14 = "src/test";

        if r0 == null goto label1;

        $i4 = lengthof r0;

        if $i4 <= 0 goto label1;

        r14 = r0[0];

     label1:
        $r15 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("find ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke $r15.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>($r19);

        $r21 = new java.io.BufferedReader;

        $r22 = new java.io.InputStreamReader;

        $r23 = virtualinvoke $r20.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r22.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r23);

        specialinvoke $r21.<java.io.BufferedReader: void <init>(java.io.Reader)>($r22);

        $r24 = new com.mongodb.util.TestCase;

        specialinvoke $r24.<com.mongodb.util.TestCase: void <init>()>();

     label2:
        $r25 = virtualinvoke $r21.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r25 == null goto label9;

        $z0 = virtualinvoke $r25.<java.lang.String: boolean endsWith(java.lang.String)>("Test.java");

        if $z0 != 0 goto label3;

        goto label2;

     label3:
        $r1 = "src/test/";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke $r25.<java.lang.String: java.lang.String substring(int)>($i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = ".java";

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//+", "/");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

     label4:
        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

        $z1 = $r8 instanceof com.mongodb.util.TestCase;

        if $z1 != 0 goto label6;

     label5:
        goto label2;

     label6:
        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r6);

        r10 = (com.mongodb.util.TestCase) $r8;

        $r12 = $r24.<com.mongodb.util.TestCase: java.util.List _tests>;

        $r11 = r10.<com.mongodb.util.TestCase: java.util.List _tests>;

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r11);

     label7:
        goto label2;

     label8:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        goto label2;

     label9:
        virtualinvoke $r24.<com.mongodb.util.TestCase: boolean runConsole()>();

        return;

        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }
}
