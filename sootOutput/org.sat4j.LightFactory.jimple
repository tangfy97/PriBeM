public class org.sat4j.LightFactory extends org.sat4j.core.ASolverFactory
{
    private static final long serialVersionUID;
    private static org.sat4j.LightFactory instance;

    public void <init>()
    {
        org.sat4j.LightFactory r0;

        r0 := @this: org.sat4j.LightFactory;

        specialinvoke r0.<org.sat4j.core.ASolverFactory: void <init>()>();

        return;
    }

    private static synchronized void createInstance()
    {
        org.sat4j.LightFactory $r0, $r1;

        $r0 = <org.sat4j.LightFactory: org.sat4j.LightFactory instance>;

        if $r0 != null goto label1;

        $r1 = new org.sat4j.LightFactory;

        specialinvoke $r1.<org.sat4j.LightFactory: void <init>()>();

        <org.sat4j.LightFactory: org.sat4j.LightFactory instance> = $r1;

     label1:
        return;
    }

    public static org.sat4j.LightFactory instance()
    {
        org.sat4j.LightFactory $r0, $r1;

        $r0 = <org.sat4j.LightFactory: org.sat4j.LightFactory instance>;

        if $r0 != null goto label1;

        staticinvoke <org.sat4j.LightFactory: void createInstance()>();

     label1:
        $r1 = <org.sat4j.LightFactory: org.sat4j.LightFactory instance>;

        return $r1;
    }

    public org.sat4j.specs.ISolver defaultSolver()
    {
        org.sat4j.LightFactory r8;
        org.sat4j.minisat.core.ISimplifier $r6;
        org.sat4j.minisat.learning.MiniSATLearning $r0;
        org.sat4j.minisat.core.SearchParams $r7;
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r2;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.orders.VarOrderHeap $r3;
        org.sat4j.minisat.orders.RSATPhaseSelectionStrategy $r4;
        org.sat4j.minisat.restarts.ArminRestarts $r5;

        r8 := @this: org.sat4j.LightFactory;

        $r0 = new org.sat4j.minisat.learning.MiniSATLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void <init>()>();

        $r1 = new org.sat4j.minisat.core.Solver;

        $r2 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r2.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r3 = new org.sat4j.minisat.orders.VarOrderHeap;

        $r4 = new org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;

        specialinvoke $r4.<org.sat4j.minisat.orders.RSATPhaseSelectionStrategy: void <init>()>();

        specialinvoke $r3.<org.sat4j.minisat.orders.VarOrderHeap: void <init>(org.sat4j.minisat.core.IPhaseSelectionStrategy)>($r4);

        $r5 = new org.sat4j.minisat.restarts.ArminRestarts;

        specialinvoke $r5.<org.sat4j.minisat.restarts.ArminRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, $r2, $r3, $r5);

        virtualinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        $r6 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier EXPENSIVE_SIMPLIFICATION>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r6);

        $r7 = new org.sat4j.minisat.core.SearchParams;

        specialinvoke $r7.<org.sat4j.minisat.core.SearchParams: void <init>(double,int)>(1.1, 100);

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSearchParams(org.sat4j.minisat.core.SearchParams)>($r7);

        return $r1;
    }

    public org.sat4j.specs.ISolver lightSolver()
    {
        org.sat4j.LightFactory r0;
        org.sat4j.specs.ISolver $r1;

        r0 := @this: org.sat4j.LightFactory;

        $r1 = virtualinvoke r0.<org.sat4j.LightFactory: org.sat4j.specs.ISolver defaultSolver()>();

        return $r1;
    }

    public static void main(java.lang.String[])
    {
        org.sat4j.LightFactory $r1;
        int $i0, $i1;
        org.sat4j.ExitCode $r3;
        java.lang.String[] r2;
        org.sat4j.BasicLauncher $r0;

        r2 := @parameter0: java.lang.String[];

        $r0 = new org.sat4j.BasicLauncher;

        $r1 = staticinvoke <org.sat4j.LightFactory: org.sat4j.LightFactory instance()>();

        specialinvoke $r0.<org.sat4j.BasicLauncher: void <init>(org.sat4j.core.ASolverFactory)>($r1);

        $i0 = lengthof r2;

        if $i0 == 1 goto label1;

        virtualinvoke $r0.<org.sat4j.AbstractLauncher: void usage()>();

        return;

     label1:
        virtualinvoke $r0.<org.sat4j.AbstractLauncher: void run(java.lang.String[])>(r2);

        $r3 = virtualinvoke $r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode getExitCode()>();

        $i1 = virtualinvoke $r3.<org.sat4j.ExitCode: int value()>();

        staticinvoke <java.lang.System: void exit(int)>($i1);

        return;
    }

    public static void <clinit>()
    {
        <org.sat4j.LightFactory: long serialVersionUID> = 1460304168178023681L;

        return;
    }
}
