public final class org.apache.poi.hslf.model.TextPainter extends java.lang.Object
{
    public static final org.apache.poi.hslf.model.TextPainter$Key KEY_FONTFALLBACK;
    public static final org.apache.poi.hslf.model.TextPainter$Key KEY_FONTMAP;
    protected org.apache.poi.util.POILogger logger;
    protected static final char DEFAULT_BULLET_CHAR;
    protected org.apache.poi.hslf.model.TextShape _shape;

    public void <init>(org.apache.poi.hslf.model.TextShape)
    {
        org.apache.poi.hslf.model.TextShape r3;
        java.lang.Class $r1;
        org.apache.poi.util.POILogger $r2;
        org.apache.poi.hslf.model.TextPainter r0;

        r0 := @this: org.apache.poi.hslf.model.TextPainter;

        r3 := @parameter0: org.apache.poi.hslf.model.TextShape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>($r1);

        r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.util.POILogger logger> = $r2;

        r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape> = r3;

        return;
    }

    public java.text.AttributedString getAttributedString(org.apache.poi.hslf.model.TextRun)
    {
        java.text.AttributedString $r2;
        org.apache.poi.hslf.model.TextRun r1;
        org.apache.poi.hslf.model.TextPainter r0;

        r0 := @this: org.apache.poi.hslf.model.TextPainter;

        r1 := @parameter0: org.apache.poi.hslf.model.TextRun;

        $r2 = virtualinvoke r0.<org.apache.poi.hslf.model.TextPainter: java.text.AttributedString getAttributedString(org.apache.poi.hslf.model.TextRun,java.awt.Graphics2D)>(r1, null);

        return $r2;
    }

    public java.text.AttributedString getAttributedString(org.apache.poi.hslf.model.TextRun, java.awt.Graphics2D)
    {
        java.awt.Color $r46;
        java.lang.Float $r24, $r26, $r54;
        java.lang.Integer $r20, $r22, $r48;
        byte $b10, $b11, $b16;
        java.util.Map r36, $r39;
        org.apache.poi.hslf.model.TextPainter r32;
        org.apache.poi.hslf.usermodel.RichTextRun $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r43, $r45, $r47, $r49, $r51;
        java.awt.font.TextAttribute $r16, $r17, $r19, $r21, $r23, $r25, $r27, $r40, $r41, $r44;
        java.lang.String $r1, $r2, $r3, $r9, r34, r35;
        char[] $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        java.awt.Font $r55;
        org.apache.poi.util.POILogger $r33;
        java.text.AttributedString $r53;
        float $f0;
        org.apache.poi.hslf.model.TextRun r0;
        org.apache.poi.hslf.model.TextPainter$Key $r28, $r37;
        java.awt.Graphics2D r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, i8, $i9, $i12, $i13, i14, i15, $i18;
        java.lang.Boolean $r18;
        char $c6;
        org.apache.poi.hslf.usermodel.RichTextRun[] $r5;
        java.lang.Object $r29, $r30, $r31, $r38;

        r32 := @this: org.apache.poi.hslf.model.TextPainter;

        r0 := @parameter0: org.apache.poi.hslf.model.TextRun;

        r10 := @parameter1: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.hslf.model.TextRun: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(9, 32);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(160, 32);

        $r53 = new java.text.AttributedString;

        specialinvoke $r53.<java.text.AttributedString: void <init>(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<org.apache.poi.hslf.model.TextRun: org.apache.poi.hslf.usermodel.RichTextRun[] getRichTextRuns()>();

        i8 = 0;

     label01:
        $i0 = lengthof $r5;

        if i8 >= $i0 goto label26;

        $r6 = $r5[i8];

        $i1 = virtualinvoke $r6.<org.apache.poi.hslf.usermodel.RichTextRun: int getStartIndex()>();

        $r7 = $r5[i8];

        $i2 = virtualinvoke $r7.<org.apache.poi.hslf.usermodel.RichTextRun: int getEndIndex()>();

        if $i1 != $i2 goto label02;

        $r33 = r32.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r33.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(3, "Skipping RichTextRun with zero length");

        goto label25;

     label02:
        $r8 = $r5[i8];

        $r9 = virtualinvoke $r8.<org.apache.poi.hslf.usermodel.RichTextRun: java.lang.String getFontName()>();

        r34 = $r9;

        r35 = "SansSerif";

        if r10 == null goto label04;

        $r28 = <org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextPainter$Key KEY_FONTMAP>;

        $r29 = virtualinvoke r10.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r28);

        r36 = (java.util.Map) $r29;

        if r36 == null goto label03;

        $z7 = interfaceinvoke r36.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z7 == 0 goto label03;

        $r31 = interfaceinvoke r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r34 = (java.lang.String) $r31;

     label03:
        $r37 = <org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextPainter$Key KEY_FONTFALLBACK>;

        $r38 = virtualinvoke r10.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r37);

        $r39 = (java.util.Map) $r38;

        if $r39 == null goto label04;

        $z6 = interfaceinvoke $r39.<java.util.Map: boolean containsKey(java.lang.Object)>(r34);

        if $z6 == 0 goto label04;

        $r30 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r34);

        r35 = (java.lang.String) $r30;

     label04:
        $r40 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r40, r34, $i1, $i2);

        $r41 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r54 = new java.lang.Float;

        $r43 = $r5[i8];

        $i9 = virtualinvoke $r43.<org.apache.poi.hslf.usermodel.RichTextRun: int getFontSize()>();

        $f0 = (float) $i9;

        specialinvoke $r54.<java.lang.Float: void <init>(float)>($f0);

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r41, $r54, $i1, $i2);

        $r44 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;

        $r45 = $r5[i8];

        $r46 = virtualinvoke $r45.<org.apache.poi.hslf.usermodel.RichTextRun: java.awt.Color getFontColor()>();

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r44, $r46, $i1, $i2);

        $r47 = $r5[i8];

        $z8 = virtualinvoke $r47.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isBold()>();

        if $z8 == 0 goto label05;

        $r27 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r26 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r27, $r26, $i1, $i2);

     label05:
        $r11 = $r5[i8];

        $z0 = virtualinvoke $r11.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isItalic()>();

        if $z0 == 0 goto label06;

        $r25 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r24 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r25, $r24, $i1, $i2);

     label06:
        $r12 = $r5[i8];

        $z1 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isUnderlined()>();

        if $z1 == 0 goto label07;

        $r21 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute UNDERLINE>;

        $r20 = <java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_ON>;

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r21, $r20, $i1, $i2);

        $r23 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute INPUT_METHOD_UNDERLINE>;

        $r22 = <java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_TWO_PIXEL>;

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r23, $r22, $i1, $i2);

     label07:
        $r13 = $r5[i8];

        $z2 = virtualinvoke $r13.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isStrikethrough()>();

        if $z2 == 0 goto label08;

        $r19 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute STRIKETHROUGH>;

        $r18 = <java.awt.font.TextAttribute: java.lang.Boolean STRIKETHROUGH_ON>;

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r19, $r18, $i1, $i2);

     label08:
        $r14 = $r5[i8];

        $i3 = virtualinvoke $r14.<org.apache.poi.hslf.usermodel.RichTextRun: int getSuperscript()>();

        if $i3 == 0 goto label11;

        $r17 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SUPERSCRIPT>;

        if $i3 <= 0 goto label09;

        $r48 = <java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUPER>;

        goto label10;

     label09:
        $r48 = <java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUB>;

     label10:
        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r17, $r48, $i1, $i2);

     label11:
        $r49 = $r5[i8];

        $z9 = virtualinvoke $r49.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isBold()>();

        if $z9 == 0 goto label12;

        $z10 = 1;

        goto label13;

     label12:
        $z10 = 0;

     label13:
        $r15 = $r5[i8];

        $z3 = virtualinvoke $r15.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isItalic()>();

        if $z3 == 0 goto label14;

        $b10 = 2;

        goto label15;

     label14:
        $b10 = 0;

     label15:
        $b11 = $z10 | $b10;

        $r55 = new java.awt.Font;

        $r51 = $r5[i8];

        $i12 = virtualinvoke $r51.<org.apache.poi.hslf.usermodel.RichTextRun: int getFontSize()>();

        specialinvoke $r55.<java.awt.Font: void <init>(java.lang.String,int,int)>(r34, $b11, $i12);

        $r52 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $i13 = virtualinvoke $r55.<java.awt.Font: int canDisplayUpTo(char[],int,int)>($r52, $i1, $i2);

        i14 = $i13;

        if $i13 != $i1 goto label16;

        $z11 = 1;

        goto label17;

     label16:
        $z11 = 0;

     label17:
        z12 = $z11;

        i15 = $i1;

     label18:
        $i18 = (int) -1;

        if i14 == $i18 goto label25;

        if i14 > $i2 goto label25;

        if z12 == 0 goto label19;

        i14 = virtualinvoke $r55.<java.awt.Font: int canDisplayUpTo(char[],int,int)>($r52, i14, $i2);

        z12 = 0;

        goto label18;

     label19:
        if i14 >= $i2 goto label20;

        $i5 = staticinvoke <java.lang.Character: int codePointAt(char[],int,int)>($r52, i14, $i2);

        $z4 = virtualinvoke $r55.<java.awt.Font: boolean canDisplay(int)>($i5);

        if $z4 == 0 goto label22;

     label20:
        $r16 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i14, $i2);

        virtualinvoke $r53.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r16, r35, i15, $i4);

        if i14 < $i2 goto label21;

        goto label25;

     label21:
        i15 = i14;

        z12 = 1;

        goto label18;

     label22:
        $c6 = $r52[i14];

        $z5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c6);

        $i7 = i14;

        if $z5 == 0 goto label23;

        $b16 = 2;

        goto label24;

     label23:
        $b16 = 1;

     label24:
        i14 = $i7 + $b16;

        goto label18;

     label25:
        i8 = i8 + 1;

        goto label01;

     label26:
        return $r53;
    }

    public void paint(java.awt.Graphics2D)
    {
        java.awt.geom.Point2D$Double $r11;
        org.apache.poi.hslf.model.TextPainter$TextElement $r10, $r12, $r14, $r17, $r20, $r21, $r22, $r25, $r27, $r35, $r36, $r38;
        java.awt.font.FontRenderContext $r5;
        java.text.AttributedCharacterIterator $r19, $r24;
        java.awt.Graphics2D r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        org.apache.poi.hslf.model.TextShape $r3, $r7, $r8, $r9, $r13, $r15, $r16, $r26, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r37;
        java.awt.geom.Rectangle2D $r4;
        java.awt.geom.AffineTransform $r1;
        org.apache.poi.hslf.model.TextPainter r2;
        boolean $z0, $z1;
        java.text.AttributedString $r18, $r23, $r39;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, f29, f30;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, d71, d72, d73, d74;
        org.apache.poi.hslf.model.TextPainter$TextElement[] $r6;

        r2 := @this: org.apache.poi.hslf.model.TextPainter;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r3 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $r4 = virtualinvoke $r3.<org.apache.poi.hslf.model.TextShape: java.awt.geom.Rectangle2D getLogicalAnchor2D()>();

        $d0 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $f0 = (float) $d0;

        $r5 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        $r6 = virtualinvoke r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextPainter$TextElement[] getTextElements(float,java.awt.font.FontRenderContext,java.awt.Graphics2D)>($f0, $r5, r0);

        if $r6 != null goto label01;

        return;

     label01:
        f29 = 0.0F;

        i7 = 0;

     label02:
        $i0 = lengthof $r6;

        if i7 >= $i0 goto label03;

        $r35 = $r6[i7];

        $f27 = $r35.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent>;

        $r36 = $r6[i7];

        $f26 = $r36.<org.apache.poi.hslf.model.TextPainter$TextElement: float descent>;

        $f28 = $f27 + $f26;

        f29 = f29 + $f28;

        i7 = i7 + 1;

        goto label02;

     label03:
        $r7 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $i1 = virtualinvoke $r7.<org.apache.poi.hslf.model.TextShape: int getVerticalAlignment()>();

        $d1 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        tableswitch($i1)
        {
            case 0: goto label04;
            case 1: goto label06;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label04;
            default: goto label06;
        };

     label04:
        $r31 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f17 = virtualinvoke $r31.<org.apache.poi.hslf.model.TextShape: float getMarginTop()>();

        $d68 = (double) $f17;

        d71 = $d1 + $d68;

        goto label07;

     label05:
        $d2 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d3 = (double) f29;

        $d4 = $d2 - $d3;

        $r8 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f1 = virtualinvoke $r8.<org.apache.poi.hslf.model.TextShape: float getMarginBottom()>();

        $d5 = (double) $f1;

        $d6 = $d4 - $d5;

        d71 = $d1 + $d6;

        goto label07;

     label06:
        $d69 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $f18 = (float) $d69;

        $f19 = $f18 - f29;

        $r32 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f20 = virtualinvoke $r32.<org.apache.poi.hslf.model.TextShape: float getMarginTop()>();

        $f21 = $f19 - $f20;

        $r33 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f22 = virtualinvoke $r33.<org.apache.poi.hslf.model.TextShape: float getMarginBottom()>();

        f30 = $f21 - $f22;

        $r34 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f23 = virtualinvoke $r34.<org.apache.poi.hslf.model.TextShape: float getMarginTop()>();

        $f24 = f30 / 2.0F;

        $f25 = $f23 + $f24;

        $d70 = (double) $f25;

        d71 = $d1 + $d70;

     label07:
        $r37 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $z1 = virtualinvoke $r37.<org.apache.poi.hslf.model.TextShape: boolean getFlipVertical()>();

        if $z1 == 0 goto label08;

        $d51 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d52 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        $d53 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d54 = $d52 + $d53;

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>($d51, $d54);

        virtualinvoke r0.<java.awt.Graphics2D: void scale(double,double)>(1.0, -1.0);

        $d55 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d56 = neg $d55;

        $d57 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        $d58 = neg $d57;

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>($d56, $d58);

        $d59 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d60 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d61 = $d60 / 2.0;

        d72 = $d59 + $d61;

        $d62 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        $d63 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d64 = $d63 / 2.0;

        d73 = $d62 + $d64;

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>(d72, d73);

        $d65 = staticinvoke <java.lang.Math: double toRadians(double)>(180.0);

        virtualinvoke r0.<java.awt.Graphics2D: void rotate(double)>($d65);

        $d67 = neg d72;

        $d66 = neg d73;

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>($d67, $d66);

     label08:
        $r9 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $z0 = virtualinvoke $r9.<org.apache.poi.hslf.model.TextShape: boolean getFlipHorizontal()>();

        if $z0 == 0 goto label09;

        $d43 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d44 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d45 = $d43 + $d44;

        $d46 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>($d45, $d46);

        virtualinvoke r0.<java.awt.Graphics2D: void scale(double,double)>(-1.0, 1.0);

        $d47 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $d48 = neg $d47;

        $d49 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        $d50 = neg $d49;

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>($d48, $d50);

     label09:
        i8 = 0;

     label10:
        $i9 = lengthof $r6;

        if i8 >= $i9 goto label17;

        $r10 = $r6[i8];

        $f2 = $r10.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent>;

        $d7 = (double) $f2;

        d74 = d71 + $d7;

        $r11 = new java.awt.geom.Point2D$Double;

        specialinvoke $r11.<java.awt.geom.Point2D$Double: void <init>()>();

        $r11.<java.awt.geom.Point2D$Double: double y> = d74;

        $r12 = $r6[i8];

        $i2 = $r12.<org.apache.poi.hslf.model.TextPainter$TextElement: int _align>;

        tableswitch($i2)
        {
            case 0: goto label11;
            case 1: goto label12;
            case 2: goto label13;
            default: goto label11;
        };

     label11:
        $d40 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $r30 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f16 = virtualinvoke $r30.<org.apache.poi.hslf.model.TextShape: float getMarginLeft()>();

        $d41 = (double) $f16;

        $d42 = $d40 + $d41;

        $r11.<java.awt.geom.Point2D$Double: double x> = $d42;

        goto label14;

     label12:
        $d28 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $r26 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f12 = virtualinvoke $r26.<org.apache.poi.hslf.model.TextShape: float getMarginLeft()>();

        $d29 = (double) $f12;

        $d30 = $d28 + $d29;

        $d31 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $r27 = $r6[i8];

        $f13 = $r27.<org.apache.poi.hslf.model.TextPainter$TextElement: float advance>;

        $d32 = (double) $f13;

        $d33 = $d31 - $d32;

        $r28 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f14 = virtualinvoke $r28.<org.apache.poi.hslf.model.TextShape: float getMarginLeft()>();

        $d34 = (double) $f14;

        $d35 = $d33 - $d34;

        $r29 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f15 = virtualinvoke $r29.<org.apache.poi.hslf.model.TextShape: float getMarginRight()>();

        $d36 = (double) $f15;

        $d37 = $d35 - $d36;

        $d38 = $d37 / 2.0;

        $d39 = $d30 + $d38;

        $r11.<java.awt.geom.Point2D$Double: double x> = $d39;

        goto label14;

     label13:
        $d8 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getX()>();

        $r13 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f3 = virtualinvoke $r13.<org.apache.poi.hslf.model.TextShape: float getMarginLeft()>();

        $d9 = (double) $f3;

        $d10 = $d8 + $d9;

        $d11 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $r14 = $r6[i8];

        $f4 = $r14.<org.apache.poi.hslf.model.TextPainter$TextElement: float advance>;

        $d12 = (double) $f4;

        $d13 = $d11 - $d12;

        $r15 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f5 = virtualinvoke $r15.<org.apache.poi.hslf.model.TextShape: float getMarginLeft()>();

        $d14 = (double) $f5;

        $d15 = $d13 - $d14;

        $r16 = r2.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f6 = virtualinvoke $r16.<org.apache.poi.hslf.model.TextShape: float getMarginRight()>();

        $d16 = (double) $f6;

        $d17 = $d15 - $d16;

        $d18 = $d10 + $d17;

        $r11.<java.awt.geom.Point2D$Double: double x> = $d18;

     label14:
        $r38 = $r6[i8];

        $r39 = $r38.<org.apache.poi.hslf.model.TextPainter$TextElement: java.text.AttributedString _bullet>;

        if $r39 == null goto label15;

        $r22 = $r6[i8];

        $r23 = $r22.<org.apache.poi.hslf.model.TextPainter$TextElement: java.text.AttributedString _bullet>;

        $r24 = virtualinvoke $r23.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $d25 = $r11.<java.awt.geom.Point2D$Double: double x>;

        $r25 = $r6[i8];

        $i6 = $r25.<org.apache.poi.hslf.model.TextPainter$TextElement: int _bulletOffset>;

        $d24 = (double) $i6;

        $d26 = $d25 + $d24;

        $f11 = (float) $d26;

        $d27 = $r11.<java.awt.geom.Point2D$Double: double y>;

        $f10 = (float) $d27;

        virtualinvoke r0.<java.awt.Graphics2D: void drawString(java.text.AttributedCharacterIterator,float,float)>($r24, $f11, $f10);

     label15:
        $r17 = $r6[i8];

        $r18 = $r17.<org.apache.poi.hslf.model.TextPainter$TextElement: java.text.AttributedString _text>;

        $r19 = virtualinvoke $r18.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $i3 = interfaceinvoke $r19.<java.text.AttributedCharacterIterator: int getEndIndex()>();

        $i4 = interfaceinvoke $r19.<java.text.AttributedCharacterIterator: int getBeginIndex()>();

        if $i3 <= $i4 goto label16;

        $d21 = $r11.<java.awt.geom.Point2D$Double: double x>;

        $r21 = $r6[i8];

        $i5 = $r21.<org.apache.poi.hslf.model.TextPainter$TextElement: int _textOffset>;

        $d20 = (double) $i5;

        $d22 = $d21 + $d20;

        $f9 = (float) $d22;

        $d23 = $r11.<java.awt.geom.Point2D$Double: double y>;

        $f8 = (float) $d23;

        virtualinvoke r0.<java.awt.Graphics2D: void drawString(java.text.AttributedCharacterIterator,float,float)>($r19, $f9, $f8);

     label16:
        $r20 = $r6[i8];

        $f7 = $r20.<org.apache.poi.hslf.model.TextPainter$TextElement: float descent>;

        $d19 = (double) $f7;

        d71 = d74 + $d19;

        i8 = i8 + 1;

        goto label10;

     label17:
        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        return;
    }

    public org.apache.poi.hslf.model.TextPainter$TextElement[] getTextElements(float, java.awt.font.FontRenderContext)
    {
        java.awt.font.FontRenderContext r1;
        float f0;
        org.apache.poi.hslf.model.TextPainter r0;
        org.apache.poi.hslf.model.TextPainter$TextElement[] $r2;

        r0 := @this: org.apache.poi.hslf.model.TextPainter;

        f0 := @parameter0: float;

        r1 := @parameter1: java.awt.font.FontRenderContext;

        $r2 = virtualinvoke r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextPainter$TextElement[] getTextElements(float,java.awt.font.FontRenderContext,java.awt.Graphics2D)>(f0, r1, null);

        return $r2;
    }

    public org.apache.poi.hslf.model.TextPainter$TextElement[] getTextElements(float, java.awt.font.FontRenderContext, java.awt.Graphics2D)
    {
        java.awt.Color $r22;
        java.awt.font.LineBreakMeasurer $r68;
        org.apache.poi.hslf.model.Sheet $r27, $r51;
        java.util.Map $r40;
        java.lang.StringBuilder $r44, $r45, $r46, $r48, $r58, $r59, $r60, $r61, $r69, $r70;
        java.lang.Object[] $r10;
        org.apache.poi.hslf.usermodel.RichTextRun $r12;
        java.awt.font.TextLayout $r16, r65;
        java.awt.font.TextAttribute $r23, $r24, $r30, $r33, $r37, $r41;
        org.apache.poi.hslf.record.TextRulerAtom $r15;
        org.apache.poi.hslf.model.TextPainter$TextElement $r71;
        java.awt.font.FontRenderContext r9;
        org.apache.poi.hslf.model.PPFont $r29;
        int[] $r54, $r55;
        org.apache.poi.util.POILogger $r43, $r57;
        java.text.AttributedCharacterIterator $r6, $r39;
        org.apache.poi.hslf.usermodel.SlideShow $r28, $r52;
        java.awt.Graphics2D r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, $i43, i44, i45, i46, i47, i48, $i49, $i50, $i51, i52, i53, i54, $i55, $i57, $i59, $i61, $i63;
        org.apache.poi.hslf.model.TextShape $r1, $r13, $r14, $r26, $r50, $r64;
        java.lang.Object $r25;
        java.lang.Float $r74;
        java.awt.geom.Rectangle2D $r17;
        org.apache.poi.hslf.model.TextPainter r0;
        java.util.ArrayList $r67;
        java.lang.String $r3, $r21, $r31, $r35, $r36, $r47, $r49, $r62;
        boolean $z0, z1, $z2, $z4, $z5, $z6;
        java.awt.Font $r75;
        java.text.AttributedString $r5, r66, $r72, $r73, $r76;
        java.awt.Dimension $r53;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, $f28, f29, f30, f31, f32;
        org.apache.poi.hslf.model.TextRun $r2;
        double $d0;
        char $c7, $c19, $c23;
        org.apache.poi.hslf.model.TextPainter$TextElement[] $r11, $r63;

        r0 := @this: org.apache.poi.hslf.model.TextPainter;

        f0 := @parameter0: float;

        r9 := @parameter1: java.awt.font.FontRenderContext;

        r4 := @parameter2: java.awt.Graphics2D;

        $r1 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hslf.model.TextShape: org.apache.poi.hslf.model.TextRun getTextRun()>();

        if $r2 != null goto label01;

        return null;

     label01:
        $r3 = virtualinvoke $r2.<org.apache.poi.hslf.model.TextRun: java.lang.String getText()>();

        if $r3 == null goto label02;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label03;

     label02:
        return null;

     label03:
        $r5 = virtualinvoke r0.<org.apache.poi.hslf.model.TextPainter: java.text.AttributedString getAttributedString(org.apache.poi.hslf.model.TextRun,java.awt.Graphics2D)>($r2, r4);

        $r6 = virtualinvoke $r5.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $i0 = interfaceinvoke $r6.<java.text.AttributedCharacterIterator: int getBeginIndex()>();

        $i1 = interfaceinvoke $r6.<java.text.AttributedCharacterIterator: int getEndIndex()>();

        $r67 = new java.util.ArrayList;

        specialinvoke $r67.<java.util.ArrayList: void <init>()>();

        $r68 = new java.awt.font.LineBreakMeasurer;

        specialinvoke $r68.<java.awt.font.LineBreakMeasurer: void <init>(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext)>($r6, r9);

        virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: void setPosition(int)>($i0);

     label04:
        $i41 = virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: int getPosition()>();

        if $i41 >= $i1 goto label41;

        $i3 = virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: int getPosition()>();

        i42 = $i3;

        $i4 = virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: int getPosition()>();

        $i5 = $i4 + 1;

        $i6 = virtualinvoke $r3.<java.lang.String: int indexOf(int,int)>(10, $i5);

        $c7 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i3);

        $i55 = (int) $c7;

        if $i55 != 10 goto label05;

        $z6 = 1;

        $z5 = 1;

        goto label06;

     label05:
        $z6 = 0;

        $z5 = 0;

     label06:
        z1 = $z6;

        if $z5 == 0 goto label07;

        i42 = $i3 + 1;

        virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: void setPosition(int)>($i3);

     label07:
        $i8 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i42 != $i8 goto label08;

        $i43 = i42 - 1;

        goto label09;

     label08:
        $i43 = i42;

     label09:
        $r12 = virtualinvoke $r2.<org.apache.poi.hslf.model.TextRun: org.apache.poi.hslf.usermodel.RichTextRun getRichTextRunAt(int)>($i43);

        if $r12 != null goto label10;

        $r57 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.util.POILogger logger>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RichTextRun not found at pos");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i42);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; text.length: ");

        $i40 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i40);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r62);

        goto label41;

     label10:
        $r13 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f1 = virtualinvoke $r13.<org.apache.poi.hslf.model.TextShape: float getMarginLeft()>();

        $f2 = f0 - $f1;

        $r14 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $f3 = virtualinvoke $r14.<org.apache.poi.hslf.model.TextShape: float getMarginRight()>();

        f27 = $f2 - $f3;

        i44 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getBulletOffset()>();

        i45 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getTextOffset()>();

        $i9 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getIndentLevel()>();

        $r15 = virtualinvoke $r2.<org.apache.poi.hslf.model.TextRun: org.apache.poi.hslf.record.TextRulerAtom getTextRuler()>();

        if $r15 == null goto label13;

        $r54 = virtualinvoke $r15.<org.apache.poi.hslf.record.TextRulerAtom: int[] getBulletOffsets()>();

        $i36 = $r54[$i9];

        $i37 = $i36 * 72;

        i46 = $i37 / 576;

        $r55 = virtualinvoke $r15.<org.apache.poi.hslf.record.TextRulerAtom: int[] getTextOffsets()>();

        $i38 = $r55[$i9];

        $i39 = $i38 * 72;

        i47 = $i39 / 576;

        if i46 <= i47 goto label11;

        i48 = i46;

        i46 = i47;

        i47 = i48;

     label11:
        if i46 == 0 goto label12;

        i44 = i46;

     label12:
        if i47 == 0 goto label13;

        i45 = i47;

     label13:
        if i44 > 0 goto label14;

        if z1 != 0 goto label14;

        if i42 != 0 goto label15;

     label14:
        $f28 = (float) i45;

        f27 = f27 - $f28;

     label15:
        $r64 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $i49 = virtualinvoke $r64.<org.apache.poi.hslf.model.TextShape: int getWordWrap()>();

        if $i49 != 2 goto label16;

        $r50 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $r51 = virtualinvoke $r50.<org.apache.poi.hslf.model.TextShape: org.apache.poi.hslf.model.Sheet getSheet()>();

        $r52 = virtualinvoke $r51.<org.apache.poi.hslf.model.Sheet: org.apache.poi.hslf.usermodel.SlideShow getSlideShow()>();

        $r53 = virtualinvoke $r52.<org.apache.poi.hslf.usermodel.SlideShow: java.awt.Dimension getPageSize()>();

        $i35 = $r53.<java.awt.Dimension: int width>;

        f27 = (float) $i35;

     label16:
        $f4 = f27 + 1.0F;

        $i57 = (int) -1;

        if $i6 != $i57 goto label17;

        $i50 = $i1;

        goto label18;

     label17:
        $i50 = $i6;

     label18:
        $r16 = virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: java.awt.font.TextLayout nextLayout(float,int,boolean)>($f4, $i50, 1);

        r65 = $r16;

        if $r16 != null goto label21;

        $i59 = (int) -1;

        if $i6 != $i59 goto label19;

        $i51 = $i1;

        goto label20;

     label19:
        $i51 = $i6;

     label20:
        r65 = virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: java.awt.font.TextLayout nextLayout(float,int,boolean)>(f0, $i51, 0);

     label21:
        if r65 != null goto label22;

        $r43 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.util.POILogger logger>;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to break text into lines: wrappingWidth: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f27);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; text: ");

        $r47 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: java.lang.String getText()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r49);

        $i34 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getEndIndex()>();

        virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: void setPosition(int)>($i34);

        goto label04;

     label22:
        $i10 = virtualinvoke $r68.<java.awt.font.LineBreakMeasurer: int getPosition()>();

        $r17 = virtualinvoke r65.<java.awt.font.TextLayout: java.awt.geom.Rectangle2D getBounds()>();

        $d0 = virtualinvoke $r17.<java.awt.geom.Rectangle2D: double getHeight()>();

        f29 = (float) $d0;

        $i11 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getLineSpacing()>();

        i52 = $i11;

        if $i11 != 0 goto label23;

        i52 = 100;

     label23:
        $r71 = new org.apache.poi.hslf.model.TextPainter$TextElement;

        specialinvoke $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: void <init>()>();

        if i52 < 0 goto label24;

        $f23 = virtualinvoke r65.<java.awt.font.TextLayout: float getAscent()>();

        $f24 = (float) i52;

        $f25 = $f23 * $f24;

        $f26 = $f25 / 100.0F;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent> = $f26;

        goto label25;

     label24:
        $i12 = neg i52;

        $i13 = $i12 * 72;

        $i14 = $i13 / 576;

        $f5 = (float) $i14;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent> = $f5;

     label25:
        $i15 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getAlignment()>();

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: int _align> = $i15;

        $f6 = virtualinvoke r65.<java.awt.font.TextLayout: float getAdvance()>();

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float advance> = $f6;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: int _textOffset> = i45;

        $r72 = new java.text.AttributedString;

        specialinvoke $r72.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int)>($r6, i42, $i10);

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: java.text.AttributedString _text> = $r72;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: int textStartIndex> = i42;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: int textEndIndex> = $i10;

        if z1 == 0 goto label28;

        $i30 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getSpaceBefore()>();

        if $i30 < 0 goto label26;

        $f21 = (float) $i30;

        $f22 = f29 * $f21;

        f30 = $f22 / 100.0F;

        goto label27;

     label26:
        $i31 = neg $i30;

        $i32 = $i31 * 72;

        $i33 = $i32 / 576;

        f30 = (float) $i33;

     label27:
        $f19 = $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent>;

        $f20 = $f19 + f30;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent> = $f20;

     label28:
        if i52 < 0 goto label29;

        $f14 = virtualinvoke r65.<java.awt.font.TextLayout: float getDescent()>();

        $f15 = virtualinvoke r65.<java.awt.font.TextLayout: float getLeading()>();

        $f17 = $f14 + $f15;

        $f16 = (float) i52;

        $f18 = $f17 * $f16;

        f31 = $f18 / 100.0F;

        goto label30;

     label29:
        $i16 = neg i52;

        $i17 = $i16 * 72;

        $i18 = $i17 / 576;

        f31 = (float) $i18;

     label30:
        if z1 == 0 goto label33;

        $i26 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getSpaceAfter()>();

        if $i26 < 0 goto label31;

        $f12 = (float) $i26;

        $f13 = f29 * $f12;

        f32 = $f13 / 100.0F;

        goto label32;

     label31:
        $i27 = neg $i26;

        $i28 = $i27 * 72;

        $i29 = $i28 / 576;

        f32 = (float) $i29;

     label32:
        $f10 = $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent>;

        $f11 = $f10 + f32;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float ascent> = $f11;

     label33:
        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: float descent> = f31;

        $z4 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: boolean isBullet()>();

        if $z4 == 0 goto label40;

        if z1 != 0 goto label34;

        if i42 != 0 goto label40;

     label34:
        interfaceinvoke $r6.<java.text.AttributedCharacterIterator: char setIndex(int)>(i42);

        $r73 = new java.text.AttributedString;

        $c19 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: char getBulletChar()>();

        $r21 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c19);

        specialinvoke $r73.<java.text.AttributedString: void <init>(java.lang.String)>($r21);

        r66 = $r73;

        $r22 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: java.awt.Color getBulletColor()>();

        if $r22 == null goto label35;

        $r41 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;

        virtualinvoke $r73.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r41, $r22);

        goto label36;

     label35:
        $r24 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;

        $r23 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;

        $r25 = interfaceinvoke $r6.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r23);

        virtualinvoke $r73.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r24, $r25);

     label36:
        $i20 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getBulletFont()>();

        i53 = $i20;

        $i61 = (int) -1;

        if $i20 != $i61 goto label37;

        i53 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getFontIndex()>();

     label37:
        $r26 = r0.<org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextShape _shape>;

        $r27 = virtualinvoke $r26.<org.apache.poi.hslf.model.TextShape: org.apache.poi.hslf.model.Sheet getSheet()>();

        $r28 = virtualinvoke $r27.<org.apache.poi.hslf.model.Sheet: org.apache.poi.hslf.usermodel.SlideShow getSlideShow()>();

        $r29 = virtualinvoke $r28.<org.apache.poi.hslf.usermodel.SlideShow: org.apache.poi.hslf.model.PPFont getFont(int)>(i53);

        $r30 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;

        $r31 = virtualinvoke $r29.<org.apache.poi.hslf.model.PPFont: java.lang.String getFontName()>();

        virtualinvoke $r73.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r30, $r31);

        $i21 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getBulletSize()>();

        $i22 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: int getFontSize()>();

        i54 = $i22;

        $i63 = (int) -1;

        if $i21 == $i63 goto label38;

        $i25 = $i22 * $i21;

        $f8 = (float) $i25;

        $f9 = $f8 * 0.01F;

        i54 = staticinvoke <java.lang.Math: int round(float)>($f9);

     label38:
        $r33 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r74 = new java.lang.Float;

        $f7 = (float) i54;

        specialinvoke $r74.<java.lang.Float: void <init>(float)>($f7);

        virtualinvoke $r73.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r33, $r74);

        $r75 = new java.awt.Font;

        $r35 = virtualinvoke $r29.<org.apache.poi.hslf.model.PPFont: java.lang.String getFontName()>();

        specialinvoke $r75.<java.awt.Font: void <init>(java.lang.String,int,int)>($r35, 0, 1);

        $c23 = virtualinvoke $r12.<org.apache.poi.hslf.usermodel.RichTextRun: char getBulletChar()>();

        $z2 = virtualinvoke $r75.<java.awt.Font: boolean canDisplay(char)>($c23);

        if $z2 != 0 goto label39;

        $r37 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;

        virtualinvoke $r73.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r37, "Arial");

        $r76 = new java.text.AttributedString;

        $r39 = virtualinvoke $r73.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $r40 = interfaceinvoke $r39.<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>();

        specialinvoke $r76.<java.text.AttributedString: void <init>(java.lang.String,java.util.Map)>("\u25a0", $r40);

        r66 = $r76;

     label39:
        $r36 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i42, $i10);

        $i24 = virtualinvoke $r36.<java.lang.String: int length()>();

        if $i24 <= 1 goto label40;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: java.text.AttributedString _bullet> = r66;

        $r71.<org.apache.poi.hslf.model.TextPainter$TextElement: int _bulletOffset> = i44;

     label40:
        interfaceinvoke $r67.<java.util.List: boolean add(java.lang.Object)>($r71);

        goto label04;

     label41:
        $i2 = interfaceinvoke $r67.<java.util.List: int size()>();

        $r63 = newarray (org.apache.poi.hslf.model.TextPainter$TextElement)[$i2];

        $r10 = interfaceinvoke $r67.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r63);

        $r11 = (org.apache.poi.hslf.model.TextPainter$TextElement[]) $r10;

        return $r11;
    }

    static void <clinit>()
    {
        org.apache.poi.hslf.model.TextPainter$Key $r0, $r1;

        <org.apache.poi.hslf.model.TextPainter: char DEFAULT_BULLET_CHAR> = 9632;

        $r0 = new org.apache.poi.hslf.model.TextPainter$Key;

        specialinvoke $r0.<org.apache.poi.hslf.model.TextPainter$Key: void <init>(int,java.lang.String)>(50, "Font fallback map");

        <org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextPainter$Key KEY_FONTFALLBACK> = $r0;

        $r1 = new org.apache.poi.hslf.model.TextPainter$Key;

        specialinvoke $r1.<org.apache.poi.hslf.model.TextPainter$Key: void <init>(int,java.lang.String)>(51, "Font map");

        <org.apache.poi.hslf.model.TextPainter: org.apache.poi.hslf.model.TextPainter$Key KEY_FONTMAP> = $r1;

        return;
    }
}
