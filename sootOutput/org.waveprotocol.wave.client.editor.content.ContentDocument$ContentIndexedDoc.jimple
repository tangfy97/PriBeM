class org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc extends org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl
{
    private final org.waveprotocol.wave.model.document.indexed.LocationMapper indexedDocLocationMapper;
    final org.waveprotocol.wave.client.editor.content.ContentDocument this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc, org.waveprotocol.wave.model.document.indexed.RawAnnotationSet, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc$1 $r5;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r3 := @parameter2: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet;

        r4 := @parameter3: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument,org.waveprotocol.wave.model.document.indexed.RawAnnotationSet,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r2, r3, r4);

        $r5 = new org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc$1;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc$1: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.model.document.indexed.LocationMapper indexedDocLocationMapper> = $r5;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getCurrentNode()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object getCurrentNode()>();

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r1;

        return $r2;
    }

    public int getLocation(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r4, r5;
        int $i0;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc access$1100(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: java.lang.Object getVisibleNodeFirst(java.lang.Object)>(r4);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r3;

        if r5 != null goto label1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: int size()>();

        goto label2;

     label1:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(java.lang.Object)>(r5);

     label2:
        return $i0;
    }

    public int getLocation(org.waveprotocol.wave.model.document.util.Point)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2;
        org.waveprotocol.wave.model.document.util.Point r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.model.document.indexed.LocationMapper indexedDocLocationMapper>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc access$1100(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int getFilteredLocation(org.waveprotocol.wave.model.document.indexed.LocationMapper,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3, r4);

        return $i0;
    }

    protected java.lang.Void evaluate()
    {
        java.lang.Void $r2;
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object evaluate()>();

        $r2 = (java.lang.Void) $r1;

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode splitText(org.waveprotocol.wave.client.editor.content.ContentTextNode, int)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1, $r6, $r9;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r2, $r7, $r10;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r3, r5;
        int i0;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void saveSelection()>();

     label1:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object splitText(java.lang.Object,int)>(r3, i0);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r4;

     label2:
        $r6 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r6);

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection()>();

        return r5;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r9);

        virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode mergeText(org.waveprotocol.wave.client.editor.content.ContentTextNode)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1, $r6, $r9;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r2, $r7, $r10;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r3, r5;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void saveSelection()>();

     label1:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object mergeText(java.lang.Object)>(r3);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r4;

     label2:
        $r6 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r6);

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection()>();

        return r5;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r9);

        virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile java.lang.Object getCurrentNode()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentNode getCurrentNode()>();

        return $r1;
    }

    protected volatile java.lang.Object evaluate()
    {
        java.lang.Void $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: java.lang.Void evaluate()>();

        return $r1;
    }

    public volatile java.lang.Object mergeText(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2, $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentTextNode mergeText(org.waveprotocol.wave.client.editor.content.ContentTextNode)>($r2);

        return $r3;
    }

    public volatile java.lang.Object splitText(java.lang.Object, int)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2, $r3;
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.client.editor.content.ContentTextNode splitText(org.waveprotocol.wave.client.editor.content.ContentTextNode,int)>($r2, i0);

        return $r3;
    }

    public volatile int getLocation(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        int $i0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: int getLocation(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return $i0;
    }

    static int access$2401(org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r1 := @parameter1: java.lang.Object;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(java.lang.Object)>(r1);

        return $i0;
    }

    static int access$2501(org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc, org.waveprotocol.wave.model.document.util.Point)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return $i0;
    }

    static org.waveprotocol.wave.model.document.util.Point access$2601(org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc, int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        return $r1;
    }

    static int access$2701(org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        return $i0;
    }
}
