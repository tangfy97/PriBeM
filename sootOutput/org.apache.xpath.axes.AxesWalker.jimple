public class org.apache.xpath.axes.AxesWalker extends org.apache.xpath.axes.PredicatedNodeTest implements java.lang.Cloneable, org.apache.xpath.axes.PathComponent, org.apache.xpath.ExpressionOwner
{
    private org.apache.xml.dtm.DTM m_dtm;
    transient int m_root;
    private transient int m_currentNode;
    transient boolean m_isFresh;
    protected org.apache.xpath.axes.AxesWalker m_nextWalker;
    org.apache.xpath.axes.AxesWalker m_prevWalker;
    protected int m_axis;
    protected org.apache.xml.dtm.DTMAxisTraverser m_traverser;

    public void <init>(org.apache.xpath.axes.LocPathIterator, int)
    {
        int i0, $i2, $i4, $i6;
        org.apache.xpath.axes.AxesWalker r0;
        org.apache.xpath.axes.LocPathIterator r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void <init>(org.apache.xpath.axes.LocPathIterator)>(r1);

        $i2 = (int) -1;

        r0.<org.apache.xpath.axes.AxesWalker: int m_root> = $i2;

        $i4 = (int) -1;

        r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode> = $i4;

        $i6 = (int) -1;

        r0.<org.apache.xpath.axes.AxesWalker: int m_axis> = $i6;

        r0.<org.apache.xpath.axes.AxesWalker: int m_axis> = i0;

        return;
    }

    public final org.apache.xpath.axes.WalkingIterator wi()
    {
        org.apache.xpath.axes.AxesWalker r0;
        org.apache.xpath.axes.LocPathIterator $r1;
        org.apache.xpath.axes.WalkingIterator $r2;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $r1 = r0.<org.apache.xpath.axes.PredicatedNodeTest: org.apache.xpath.axes.LocPathIterator m_lpi>;

        $r2 = (org.apache.xpath.axes.WalkingIterator) $r1;

        return $r2;
    }

    public void init(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        int i0, i1;
        org.apache.xpath.axes.AxesWalker r0;
        org.apache.xpath.compiler.Compiler r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void initPredicateInfo(org.apache.xpath.compiler.Compiler,int)>(r1, i0);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.AxesWalker r0, r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: java.lang.Object clone()>();

        r2 = (org.apache.xpath.axes.AxesWalker) $r1;

        return r2;
    }

    org.apache.xpath.axes.AxesWalker cloneDeep(org.apache.xpath.axes.WalkingIterator, java.util.Vector) throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.WalkingIterator r4, $r5;
        java.util.Vector r1;
        org.apache.xpath.axes.AxesWalker r0, $r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r15;
        java.lang.Object $r3;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r4 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter1: java.util.Vector;

        $r2 = staticinvoke <org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker findClone(org.apache.xpath.axes.AxesWalker,java.util.Vector)>(r0, r1);

        if null == $r2 goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r15 = (org.apache.xpath.axes.AxesWalker) $r3;

        virtualinvoke r15.<org.apache.xpath.axes.PredicatedNodeTest: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>(r4);

        if null == r1 goto label2;

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>(r0);

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>(r15);

     label2:
        $r5 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        $r6 = $r5.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker>;

        if $r6 != r0 goto label3;

        r4.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker> = r15;

     label3:
        $r7 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        if null == $r7 goto label4;

        $r13 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        $r14 = virtualinvoke $r13.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker cloneDeep(org.apache.xpath.axes.WalkingIterator,java.util.Vector)>(r4, r1);

        r15.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker> = $r14;

     label4:
        if null == r1 goto label5;

        $r10 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker>;

        if null == $r10 goto label6;

        $r11 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker>;

        $r12 = virtualinvoke $r11.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker cloneDeep(org.apache.xpath.axes.WalkingIterator,java.util.Vector)>(r4, r1);

        r15.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker> = $r12;

        goto label6;

     label5:
        $r8 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        if null == $r8 goto label6;

        $r9 = r15.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        $r9.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker> = r15;

     label6:
        return r15;
    }

    static org.apache.xpath.axes.AxesWalker findClone(org.apache.xpath.axes.AxesWalker, java.util.Vector)
    {
        java.util.Vector r0;
        int $i0, $i1, i2;
        org.apache.xpath.axes.AxesWalker r1, $r4;
        java.lang.Object $r2, $r3;

        r1 := @parameter0: org.apache.xpath.axes.AxesWalker;

        r0 := @parameter1: java.util.Vector;

        if null == r0 goto label4;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        i2 = 0;

        goto label3;

     label1:
        $r2 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        if r1 != $r2 goto label2;

        $i1 = i2 + 1;

        $r3 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r4 = (org.apache.xpath.axes.AxesWalker) $r3;

        return $r4;

     label2:
        i2 = i2 + 2;

     label3:
        if i2 < $i0 goto label1;

     label4:
        return null;
    }

    public void detach()
    {
        int $i1, $i3;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $i1 = (int) -1;

        r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode> = $i1;

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTM m_dtm> = null;

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = null;

        r0.<org.apache.xpath.axes.AxesWalker: boolean m_isFresh> = 1;

        $i3 = (int) -1;

        r0.<org.apache.xpath.axes.AxesWalker: int m_root> = $i3;

        return;
    }

    public int getRoot()
    {
        int $i0;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $i0 = r0.<org.apache.xpath.axes.AxesWalker: int m_root>;

        return $i0;
    }

    public int getAnalysisBits()
    {
        int $i0, $i1;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: int getAxis()>();

        $i1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int getAnalysisBitFromAxes(int)>($i0);

        return $i1;
    }

    public void setRoot(int)
    {
        java.lang.RuntimeException $r8;
        org.apache.xpath.axes.WalkingIterator $r1;
        org.apache.xpath.XPathContext $r2;
        int i0, $i1, $i3;
        org.apache.xml.dtm.DTM $r3, $r4;
        org.apache.xpath.axes.AxesWalker r0;
        java.lang.String $r7;
        org.apache.xml.dtm.DTMAxisTraverser $r5;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        $r2 = virtualinvoke $r1.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext getXPathContext()>();

        $r3 = virtualinvoke $r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTM m_dtm> = $r3;

        $r4 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTM m_dtm>;

        $i1 = r0.<org.apache.xpath.axes.AxesWalker: int m_axis>;

        $r5 = interfaceinvoke $r4.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i1);

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r5;

        r0.<org.apache.xpath.axes.AxesWalker: boolean m_isFresh> = 1;

        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 0;

        r0.<org.apache.xpath.axes.AxesWalker: int m_root> = i0;

        r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode> = i0;

        $i3 = (int) -1;

        if $i3 != i0 goto label1;

        $r8 = new java.lang.RuntimeException;

        $r7 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_SETTING_WALKER_ROOT_TO_NULL", null);

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label1:
        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void resetProximityPositions()>();

        return;
    }

    public final int getCurrentNode()
    {
        int $i0;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $i0 = r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode>;

        return $i0;
    }

    public void setNextWalker(org.apache.xpath.axes.AxesWalker)
    {
        org.apache.xpath.axes.AxesWalker r0, r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xpath.axes.AxesWalker;

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker> = r1;

        return;
    }

    public org.apache.xpath.axes.AxesWalker getNextWalker()
    {
        org.apache.xpath.axes.AxesWalker r0, $r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $r1 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        return $r1;
    }

    public void setPrevWalker(org.apache.xpath.axes.AxesWalker)
    {
        org.apache.xpath.axes.AxesWalker r0, r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xpath.axes.AxesWalker;

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker> = r1;

        return;
    }

    public org.apache.xpath.axes.AxesWalker getPrevWalker()
    {
        org.apache.xpath.axes.AxesWalker r0, $r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $r1 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker>;

        return $r1;
    }

    private int returnNextNode(int)
    {
        int i0;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        i0 := @parameter0: int;

        return i0;
    }

    protected int getNextNode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i13;
        org.apache.xml.dtm.DTMAxisTraverser $r1, $r2;
        boolean $z0, $z1;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z0 == 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $z1 = r0.<org.apache.xpath.axes.AxesWalker: boolean m_isFresh>;

        if $z1 == 0 goto label2;

        $r2 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i5 = r0.<org.apache.xpath.axes.AxesWalker: int m_root>;

        $i6 = virtualinvoke $r2.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i5);

        r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode> = $i6;

        r0.<org.apache.xpath.axes.AxesWalker: boolean m_isFresh> = 0;

        goto label3;

     label2:
        $i0 = r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode>;

        $i11 = (int) -1;

        if $i11 == $i0 goto label3;

        $r1 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i3 = r0.<org.apache.xpath.axes.AxesWalker: int m_root>;

        $i2 = r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode>;

        $i4 = virtualinvoke $r1.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int)>($i3, $i2);

        r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode> = $i4;

     label3:
        $i7 = r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode>;

        $i13 = (int) -1;

        if $i13 != $i7 goto label4;

        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 1;

     label4:
        $i1 = r0.<org.apache.xpath.axes.AxesWalker: int m_currentNode>;

        return $i1;
    }

    public int nextNode()
    {
        org.apache.xpath.axes.WalkingIterator $r1, $r4;
        short $s1;
        int $i0, i2, $i4, $i6;
        org.apache.xpath.axes.AxesWalker r0, $r2, r3, r5;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $i4 = (int) -1;

        i2 = $i4;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        r5 = virtualinvoke $r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getLastUsedWalker()>();

        goto label1;

     label1:
        if null != r5 goto label2;

        goto label6;

     label2:
        $i0 = virtualinvoke r5.<org.apache.xpath.axes.AxesWalker: int getNextNode()>();

        i2 = $i0;

        $i6 = (int) -1;

        if $i6 != $i0 goto label3;

        r5 = r5.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker>;

        goto label1;

     label3:
        $s1 = virtualinvoke r5.<org.apache.xpath.axes.PredicatedNodeTest: short acceptNode(int)>($i0);

        if $s1 == 1 goto label4;

        goto label1;

     label4:
        $r2 = r5.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        if null != $r2 goto label5;

        $r4 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r4.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r5);

        goto label6;

     label5:
        r3 = r5;

        r5 = r5.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        virtualinvoke r5.<org.apache.xpath.axes.AxesWalker: void setRoot(int)>($i0);

        r5.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_prevWalker> = r3;

        goto label1;

     label6:
        return i2;
    }

    public int getLastPos(org.apache.xpath.XPathContext)
    {
        java.lang.Throwable $r5;
        org.apache.xpath.axes.WalkingIterator $r3;
        java.lang.CloneNotSupportedException $r6;
        org.apache.xpath.XPathContext r7;
        int $i0, $i1, $i2, i3, $i5, $i7;
        org.apache.xpath.axes.AxesWalker r0, r2, $r4;
        java.lang.Object $r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r7 := @parameter0: org.apache.xpath.XPathContext;

        i3 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getProximityPosition()>();

     label01:
        $r1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r2 = (org.apache.xpath.axes.AxesWalker) $r1;

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

        $i5 = (int) -1;

        return $i5;

     label04:
        $i0 = virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: int getPredicateCount()>();

        $i1 = $i0 - 1;

        virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: void setPredicateCount(int)>($i1);

        virtualinvoke r2.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

        virtualinvoke r2.<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(null);

        $r3 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        $r4 = virtualinvoke $r3.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getLastUsedWalker()>();

     label05:
        virtualinvoke $r3.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r2);

        goto label07;

     label06:
        i3 = i3 + 1;

     label07:
        $i2 = virtualinvoke r2.<org.apache.xpath.axes.AxesWalker: int nextNode()>();

        $i7 = (int) -1;

        if $i7 != $i2 goto label06;

        goto label12;

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

        goto label13;

     label10:
        throw $r5;

     label11:
        return i3;

     label12:
        virtualinvoke $r3.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r4);

        goto label08;

     label13:
        virtualinvoke $r3.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>($r4);

        goto label10;

        catch java.lang.CloneNotSupportedException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label09 with label09;
    }

    public void setDefaultDTM(org.apache.xml.dtm.DTM)
    {
        org.apache.xml.dtm.DTM r1;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xml.dtm.DTM;

        r0.<org.apache.xpath.axes.AxesWalker: org.apache.xml.dtm.DTM m_dtm> = r1;

        return;
    }

    public org.apache.xml.dtm.DTM getDTM(int)
    {
        org.apache.xpath.XPathContext $r2;
        int i0;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xpath.axes.AxesWalker r0;
        org.apache.xpath.axes.WalkingIterator $r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        $r2 = virtualinvoke $r1.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext getXPathContext()>();

        $r3 = virtualinvoke $r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        return $r3;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        return 1;
    }

    public int getAxis()
    {
        int $i0;
        org.apache.xpath.axes.AxesWalker r0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $i0 = r0.<org.apache.xpath.axes.AxesWalker: int m_axis>;

        return $i0;
    }

    public void callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor)
    {
        org.apache.xpath.XPathVisitor r0;
        org.apache.xpath.axes.AxesWalker r2, $r3, $r4;
        org.apache.xpath.ExpressionOwner r1;
        boolean $z0;

        r2 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r0 := @parameter1: org.apache.xpath.XPathVisitor;

        $z0 = virtualinvoke r0.<org.apache.xpath.XPathVisitor: boolean visitStep(org.apache.xpath.ExpressionOwner,org.apache.xpath.patterns.NodeTest)>(r1, r2);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: void callPredicateVisitors(org.apache.xpath.XPathVisitor)>(r0);

        $r3 = r2.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        if null == $r3 goto label1;

        $r4 = r2.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        virtualinvoke $r4.<org.apache.xpath.axes.AxesWalker: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r2, r0);

     label1:
        return;
    }

    public org.apache.xpath.Expression getExpression()
    {
        org.apache.xpath.axes.AxesWalker r0, $r1;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        $r1 = r0.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker>;

        return $r1;
    }

    public void setExpression(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.axes.AxesWalker r1, $r2;

        r1 := @this: org.apache.xpath.axes.AxesWalker;

        r0 := @parameter0: org.apache.xpath.Expression;

        virtualinvoke r0.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r1);

        $r2 = (org.apache.xpath.axes.AxesWalker) r0;

        r1.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker m_nextWalker> = $r2;

        return;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r1;
        int $i0, $i1;
        org.apache.xpath.axes.AxesWalker r0, r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.AxesWalker;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.xpath.axes.AxesWalker) r1;

        $i1 = r0.<org.apache.xpath.axes.AxesWalker: int m_axis>;

        $i0 = r2.<org.apache.xpath.axes.AxesWalker: int m_axis>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        return 1;
    }
}
