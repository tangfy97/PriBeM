public class org.apache.tika.parser.pkg.CompressorParser extends org.apache.tika.parser.AbstractParser
{
    private static final long serialVersionUID;
    private static final org.apache.tika.mime.MediaType BZIP;
    private static final org.apache.tika.mime.MediaType BZIP2;
    private static final org.apache.tika.mime.MediaType GZIP;
    private static final org.apache.tika.mime.MediaType GZIP_ALT;
    private static final org.apache.tika.mime.MediaType XZ;
    private static final org.apache.tika.mime.MediaType PACK;
    private static final java.util.Set SUPPORTED_TYPES;

    public void <init>()
    {
        org.apache.tika.parser.pkg.CompressorParser r0;

        r0 := @this: org.apache.tika.parser.pkg.CompressorParser;

        specialinvoke r0.<org.apache.tika.parser.AbstractParser: void <init>()>();

        return;
    }

    static org.apache.tika.mime.MediaType getMediaType(org.apache.commons.compress.compressors.CompressorInputStream)
    {
        org.apache.commons.compress.compressors.CompressorInputStream r0;
        org.apache.tika.mime.MediaType $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.commons.compress.compressors.CompressorInputStream;

        $z0 = r0 instanceof org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;

        if $z0 == 0 goto label1;

        $r5 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType BZIP2>;

        return $r5;

     label1:
        $z1 = r0 instanceof org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        if $z1 == 0 goto label2;

        $r4 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType GZIP>;

        return $r4;

     label2:
        $z2 = r0 instanceof org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        if $z2 == 0 goto label3;

        $r3 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType XZ>;

        return $r3;

     label3:
        $z3 = r0 instanceof org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        if $z3 == 0 goto label4;

        $r2 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType PACK>;

        return $r2;

     label4:
        $r1 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        return $r1;
    }

    public java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)
    {
        java.util.Set $r0;
        org.apache.tika.parser.pkg.CompressorParser r1;
        org.apache.tika.parser.ParseContext r2;

        r1 := @this: org.apache.tika.parser.pkg.CompressorParser;

        r2 := @parameter0: org.apache.tika.parser.ParseContext;

        $r0 = <org.apache.tika.parser.pkg.CompressorParser: java.util.Set SUPPORTED_TYPES>;

        return $r0;
    }

    public void parse(java.io.InputStream, org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata, org.apache.tika.parser.ParseContext) throws java.io.IOException, org.xml.sax.SAXException, org.apache.tika.exception.TikaException
    {
        java.io.BufferedInputStream $r1;
        org.apache.commons.compress.compressors.CompressorInputStream $r8;
        org.apache.tika.metadata.Metadata r7, $r13;
        org.apache.tika.parser.pkg.CompressorParserOptions r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor $r30;
        org.apache.commons.compress.compressors.CompressorStreamFactory $r2;
        org.apache.tika.io.CloseShieldInputStream $r0;
        org.apache.tika.parser.ParseContext r3;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r21, $r22;
        java.lang.Throwable $r24;
        org.apache.tika.mime.MediaType $r9, $r10;
        org.apache.tika.extractor.EmbeddedDocumentExtractor $r32;
        org.apache.tika.parser.pkg.CompressorParser r5;
        org.apache.tika.exception.TikaException $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.xml.sax.ContentHandler r12;
        java.lang.String $r14, $r16, $r20, $r23, r29;
        org.apache.commons.compress.compressors.CompressorException $r25;
        org.apache.tika.sax.XHTMLContentHandler $r11;
        org.apache.tika.parser.pkg.CompressorParser$1 $r4;
        java.lang.Object $r6, $r31;
        java.io.InputStream r27;

        r5 := @this: org.apache.tika.parser.pkg.CompressorParser;

        r27 := @parameter0: java.io.InputStream;

        r12 := @parameter1: org.xml.sax.ContentHandler;

        r7 := @parameter2: org.apache.tika.metadata.Metadata;

        r3 := @parameter3: org.apache.tika.parser.ParseContext;

        $r0 = new org.apache.tika.io.CloseShieldInputStream;

        specialinvoke $r0.<org.apache.tika.io.CloseShieldInputStream: void <init>(java.io.InputStream)>(r27);

        $r1 = new java.io.BufferedInputStream;

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r0);

     label01:
        $r2 = new org.apache.commons.compress.compressors.CompressorStreamFactory;

        specialinvoke $r2.<org.apache.commons.compress.compressors.CompressorStreamFactory: void <init>()>();

        $r4 = new org.apache.tika.parser.pkg.CompressorParser$1;

        specialinvoke $r4.<org.apache.tika.parser.pkg.CompressorParser$1: void <init>(org.apache.tika.parser.pkg.CompressorParser)>(r5);

        $r6 = virtualinvoke r3.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class,java.lang.Object)>(class "Lorg/apache/tika/parser/pkg/CompressorParserOptions;", $r4);

        r28 = (org.apache.tika.parser.pkg.CompressorParserOptions) $r6;

        $z0 = interfaceinvoke r28.<org.apache.tika.parser.pkg.CompressorParserOptions: boolean decompressConcatenated(org.apache.tika.metadata.Metadata)>(r7);

        virtualinvoke $r2.<org.apache.commons.compress.compressors.CompressorStreamFactory: void setDecompressConcatenated(boolean)>($z0);

        $r8 = virtualinvoke $r2.<org.apache.commons.compress.compressors.CompressorStreamFactory: org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)>($r1);

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        $r26 = new org.apache.tika.exception.TikaException;

        specialinvoke $r26.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to uncompress document stream", $r25);

        throw $r26;

     label04:
        $r9 = staticinvoke <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType getMediaType(org.apache.commons.compress.compressors.CompressorInputStream)>($r8);

        $r10 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        $z1 = virtualinvoke $r9.<org.apache.tika.mime.MediaType: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label05;

        $r23 = virtualinvoke $r9.<org.apache.tika.mime.MediaType: java.lang.String toString()>();

        virtualinvoke r7.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("Content-Type", $r23);

     label05:
        $r11 = new org.apache.tika.sax.XHTMLContentHandler;

        specialinvoke $r11.<org.apache.tika.sax.XHTMLContentHandler: void <init>(org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata)>(r12, r7);

        virtualinvoke $r11.<org.apache.tika.sax.XHTMLContentHandler: void startDocument()>();

     label06:
        $r13 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r13.<org.apache.tika.metadata.Metadata: void <init>()>();

        $r14 = virtualinvoke r7.<org.apache.tika.metadata.Metadata: java.lang.String get(java.lang.String)>("resourceName");

        r29 = $r14;

        if $r14 == null goto label14;

        $z2 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".tbz");

        if $z2 == 0 goto label07;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $i11 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i12 = $i11 - 4;

        $r20 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i12);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tar");

        r29 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label13;

     label07:
        $z3 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".tbz2");

        if $z3 == 0 goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $i9 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i10 = $i9 - 5;

        $r16 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i10);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tar");

        r29 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label13;

     label08:
        $z4 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".bz");

        if $z4 == 0 goto label09;

        $i7 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i8 = $i7 - 3;

        r29 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        goto label13;

     label09:
        $z5 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".bz2");

        if $z5 == 0 goto label10;

        $i5 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i6 = $i5 - 4;

        r29 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        goto label13;

     label10:
        $z6 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".xz");

        if $z6 == 0 goto label11;

        $i3 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i4 = $i3 - 3;

        r29 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        goto label13;

     label11:
        $z7 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".pack");

        if $z7 == 0 goto label12;

        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i2 = $i1 - 5;

        r29 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label13;

     label12:
        $i0 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i0 <= 0 goto label13;

        r29 = staticinvoke <org.apache.commons.compress.compressors.gzip.GzipUtils: java.lang.String getUncompressedFilename(java.lang.String)>($r14);

     label13:
        virtualinvoke $r13.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("resourceName", r29);

     label14:
        $r30 = new org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor;

        specialinvoke $r30.<org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor: void <init>(org.apache.tika.parser.ParseContext)>(r3);

        $r31 = virtualinvoke r3.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class,java.lang.Object)>(class "Lorg/apache/tika/extractor/EmbeddedDocumentExtractor;", $r30);

        $r32 = (org.apache.tika.extractor.EmbeddedDocumentExtractor) $r31;

        $z8 = interfaceinvoke $r32.<org.apache.tika.extractor.EmbeddedDocumentExtractor: boolean shouldParseEmbedded(org.apache.tika.metadata.Metadata)>($r13);

        if $z8 == 0 goto label15;

        interfaceinvoke $r32.<org.apache.tika.extractor.EmbeddedDocumentExtractor: void parseEmbedded(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,boolean)>($r8, $r11, $r13, 1);

     label15:
        virtualinvoke $r8.<org.apache.commons.compress.compressors.CompressorInputStream: void close()>();

        goto label18;

     label16:
        $r24 := @caughtexception;

     label17:
        virtualinvoke $r8.<org.apache.commons.compress.compressors.CompressorInputStream: void close()>();

        throw $r24;

     label18:
        virtualinvoke $r11.<org.apache.tika.sax.XHTMLContentHandler: void endDocument()>();

        return;

        catch org.apache.commons.compress.compressors.CompressorException from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    static void <clinit>()
    {
        java.util.Set $r13;
        org.apache.tika.mime.MediaType $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.tika.mime.MediaType[] $r6;

        <org.apache.tika.parser.pkg.CompressorParser: long serialVersionUID> = 2793565792967222459L;

        $r0 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-bzip");

        <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType BZIP> = $r0;

        $r1 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-bzip2");

        <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType BZIP2> = $r1;

        $r2 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("gzip");

        <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType GZIP> = $r2;

        $r3 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-gzip");

        <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType GZIP_ALT> = $r3;

        $r4 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-xz");

        <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType XZ> = $r4;

        $r5 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("application/x-java-pack200");

        <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType PACK> = $r5;

        $r6 = newarray (org.apache.tika.mime.MediaType)[6];

        $r7 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType BZIP>;

        $r6[0] = $r7;

        $r8 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType BZIP2>;

        $r6[1] = $r8;

        $r9 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType GZIP>;

        $r6[2] = $r9;

        $r10 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType GZIP_ALT>;

        $r6[3] = $r10;

        $r11 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType XZ>;

        $r6[4] = $r11;

        $r12 = <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType PACK>;

        $r6[5] = $r12;

        $r13 = staticinvoke <org.apache.tika.mime.MediaType: java.util.Set set(org.apache.tika.mime.MediaType[])>($r6);

        <org.apache.tika.parser.pkg.CompressorParser: java.util.Set SUPPORTED_TYPES> = $r13;

        return;
    }
}
