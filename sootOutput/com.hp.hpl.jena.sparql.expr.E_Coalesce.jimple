public class com.hp.hpl.jena.sparql.expr.E_Coalesce extends com.hp.hpl.jena.sparql.expr.ExprFunctionN
{
    private static final java.lang.String name;

    public void <init>(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.E_Coalesce r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Coalesce;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>("coalesce", r1);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r8;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.expr.E_Coalesce r0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6;
        com.hp.hpl.jena.sparql.expr.Expr r5;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r3, $r9;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.function.FunctionEnv r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Coalesce;

        r6 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r7 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: java.util.List getArgs()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.expr.Expr) $r4;

     label2:
        $r8 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r6, r7);

     label3:
        return $r8;

     label4:
        $r9 := @caughtexception;

        goto label1;

     label5:
        $r3 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("COALESCE: no value");

        throw $r3;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label2 to label3 with label4;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.E_Coalesce $r0, r2;
        com.hp.hpl.jena.sparql.expr.ExprList r1;

        r2 := @this: com.hp.hpl.jena.sparql.expr.E_Coalesce;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_Coalesce;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_Coalesce: void <init>(com.hp.hpl.jena.sparql.expr.ExprList)>(r1);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r0;
        com.hp.hpl.jena.sparql.expr.E_Coalesce r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_Coalesce;

        r2 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_Coalesce: java.lang.String name> = "coalesce";

        return;
    }
}
