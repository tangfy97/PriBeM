public class org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter extends org.springframework.remoting.rmi.RemoteInvocationSerializingExporter implements com.sun.net.httpserver.HttpHandler
{

    public void <init>()
    {
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r0;

        r0 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        specialinvoke r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: void <init>()>();

        return;
    }

    public void handle(com.sun.net.httpserver.HttpExchange) throws java.io.IOException
    {
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r0;
        org.springframework.remoting.support.RemoteInvocationResult $r4;
        org.springframework.remoting.support.RemoteInvocation $r2;
        com.sun.net.httpserver.HttpExchange r1;
        java.lang.Object $r3;
        java.lang.ClassNotFoundException $r5;
        org.apache.commons.logging.Log $r6;

        r0 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r1 := @parameter0: com.sun.net.httpserver.HttpExchange;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(com.sun.net.httpserver.HttpExchange)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: java.lang.Object getProxy()>();

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocationResult invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation,java.lang.Object)>($r2, $r3);

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: void writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange,org.springframework.remoting.support.RemoteInvocationResult)>(r1, $r4);

        virtualinvoke r1.<com.sun.net.httpserver.HttpExchange: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<com.sun.net.httpserver.HttpExchange: void sendResponseHeaders(int,long)>(500, -1L);

        $r6 = r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Class not found during deserialization", $r5);

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(com.sun.net.httpserver.HttpExchange) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r0;
        org.springframework.remoting.support.RemoteInvocation $r3;
        com.sun.net.httpserver.HttpExchange r1;
        java.io.InputStream $r2;

        r0 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r1 := @parameter0: com.sun.net.httpserver.HttpExchange;

        $r2 = virtualinvoke r1.<com.sun.net.httpserver.HttpExchange: java.io.InputStream getRequestBody()>();

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(com.sun.net.httpserver.HttpExchange,java.io.InputStream)>(r1, $r2);

        return $r3;
    }

    protected org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r0;
        java.io.ObjectInputStream $r4;
        org.springframework.remoting.support.RemoteInvocation $r5;
        com.sun.net.httpserver.HttpExchange r1;
        java.io.InputStream r2, $r3;

        r0 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r1 := @parameter0: com.sun.net.httpserver.HttpExchange;

        r2 := @parameter1: java.io.InputStream;

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: java.io.InputStream decorateInputStream(com.sun.net.httpserver.HttpExchange,java.io.InputStream)>(r1, r2);

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)>($r3);

        $r5 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocation doReadRemoteInvocation(java.io.ObjectInputStream)>($r4);

        return $r5;
    }

    protected java.io.InputStream decorateInputStream(com.sun.net.httpserver.HttpExchange, java.io.InputStream) throws java.io.IOException
    {
        com.sun.net.httpserver.HttpExchange r2;
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r1;
        java.io.InputStream r0;

        r1 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r2 := @parameter0: com.sun.net.httpserver.HttpExchange;

        r0 := @parameter1: java.io.InputStream;

        return r0;
    }

    protected void writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult) throws java.io.IOException
    {
        java.io.OutputStream $r5;
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r2;
        org.springframework.remoting.support.RemoteInvocationResult r4;
        com.sun.net.httpserver.Headers $r1;
        com.sun.net.httpserver.HttpExchange r0;
        java.lang.String $r3;

        r2 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r0 := @parameter0: com.sun.net.httpserver.HttpExchange;

        r4 := @parameter1: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = virtualinvoke r0.<com.sun.net.httpserver.HttpExchange: com.sun.net.httpserver.Headers getResponseHeaders()>();

        $r3 = virtualinvoke r2.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: java.lang.String getContentType()>();

        virtualinvoke $r1.<com.sun.net.httpserver.Headers: void set(java.lang.String,java.lang.String)>("Content-Type", $r3);

        virtualinvoke r0.<com.sun.net.httpserver.HttpExchange: void sendResponseHeaders(int,long)>(200, 0L);

        $r5 = virtualinvoke r0.<com.sun.net.httpserver.HttpExchange: java.io.OutputStream getResponseBody()>();

        virtualinvoke r2.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: void writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange,org.springframework.remoting.support.RemoteInvocationResult,java.io.OutputStream)>(r0, r4, $r5);

        return;
    }

    protected void writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2, $r3;
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r0;
        org.springframework.remoting.support.RemoteInvocationResult r5;
        com.sun.net.httpserver.HttpExchange r1;
        java.io.ObjectOutputStream $r4;

        r0 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r1 := @parameter0: com.sun.net.httpserver.HttpExchange;

        r5 := @parameter1: org.springframework.remoting.support.RemoteInvocationResult;

        r2 := @parameter2: java.io.OutputStream;

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: java.io.OutputStream decorateOutputStream(com.sun.net.httpserver.HttpExchange,java.io.OutputStream)>(r1, r2);

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)>($r3);

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter: void doWriteRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult,java.io.ObjectOutputStream)>(r5, $r4);

        virtualinvoke $r4.<java.io.ObjectOutputStream: void flush()>();

        return;
    }

    protected java.io.OutputStream decorateOutputStream(com.sun.net.httpserver.HttpExchange, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        com.sun.net.httpserver.HttpExchange r2;
        org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter r1;

        r1 := @this: org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter;

        r2 := @parameter0: com.sun.net.httpserver.HttpExchange;

        r0 := @parameter1: java.io.OutputStream;

        return r0;
    }
}
