public class groovy.swing.impl.TableLayoutRow extends java.lang.Object implements groovy.swing.impl.Startable
{
    private final groovy.swing.impl.TableLayout parent;
    private final java.util.List cells;
    private int rowIndex;

    public void <init>(groovy.swing.impl.TableLayout)
    {
        groovy.swing.impl.TableLayout r2;
        groovy.swing.impl.TableLayoutRow r0;
        java.util.ArrayList $r1;

        r0 := @this: groovy.swing.impl.TableLayoutRow;

        r2 := @parameter0: groovy.swing.impl.TableLayout;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<groovy.swing.impl.TableLayoutRow: java.util.List cells> = $r1;

        r0.<groovy.swing.impl.TableLayoutRow: groovy.swing.impl.TableLayout parent> = r2;

        return;
    }

    public void addCell(groovy.swing.impl.TableLayoutCell)
    {
        groovy.swing.impl.TableLayoutCell r3, r7;
        java.util.Iterator $r2;
        java.awt.GridBagConstraints $r4;
        java.util.List $r1, $r5;
        groovy.swing.impl.TableLayoutRow r0;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: groovy.swing.impl.TableLayoutRow;

        r3 := @parameter0: groovy.swing.impl.TableLayoutCell;

        i1 = 0;

        $r1 = r0.<groovy.swing.impl.TableLayoutRow: java.util.List cells>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (groovy.swing.impl.TableLayoutCell) $r6;

        $i0 = virtualinvoke r7.<groovy.swing.impl.TableLayoutCell: int getColspan()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        $r4 = virtualinvoke r3.<groovy.swing.impl.TableLayoutCell: java.awt.GridBagConstraints getConstraints()>();

        $r4.<java.awt.GridBagConstraints: int gridx> = i1;

        $r5 = r0.<groovy.swing.impl.TableLayoutRow: java.util.List cells>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void start()
    {
        groovy.swing.impl.TableLayoutCell r5;
        java.util.Iterator $r3;
        java.awt.GridBagConstraints $r6;
        java.util.List $r2;
        groovy.swing.impl.TableLayoutRow r0;
        int $i0, $i1;
        groovy.swing.impl.TableLayout $r1, $r7;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: groovy.swing.impl.TableLayoutRow;

        $r1 = r0.<groovy.swing.impl.TableLayoutRow: groovy.swing.impl.TableLayout parent>;

        $i0 = virtualinvoke $r1.<groovy.swing.impl.TableLayout: int nextRowIndex()>();

        r0.<groovy.swing.impl.TableLayoutRow: int rowIndex> = $i0;

        $r2 = r0.<groovy.swing.impl.TableLayoutRow: java.util.List cells>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (groovy.swing.impl.TableLayoutCell) $r4;

        $r6 = virtualinvoke r5.<groovy.swing.impl.TableLayoutCell: java.awt.GridBagConstraints getConstraints()>();

        $i1 = r0.<groovy.swing.impl.TableLayoutRow: int rowIndex>;

        $r6.<java.awt.GridBagConstraints: int gridy> = $i1;

        $r7 = r0.<groovy.swing.impl.TableLayoutRow: groovy.swing.impl.TableLayout parent>;

        virtualinvoke $r7.<groovy.swing.impl.TableLayout: void addCell(groovy.swing.impl.TableLayoutCell)>(r5);

        goto label1;

     label2:
        return;
    }

    public int getRowIndex()
    {
        int $i0;
        groovy.swing.impl.TableLayoutRow r0;

        r0 := @this: groovy.swing.impl.TableLayoutRow;

        $i0 = r0.<groovy.swing.impl.TableLayoutRow: int rowIndex>;

        return $i0;
    }
}
