public class com.hp.hpl.jena.sparql.expr.E_IRI extends com.hp.hpl.jena.sparql.expr.ExprFunction1
{
    private static final java.lang.String symbol;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_IRI r0;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_IRI;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction1: void <init>(com.hp.hpl.jena.sparql.expr.Expr,java.lang.String)>(r1, "iri");

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, java.lang.String)
    {
        java.lang.String r2;
        com.hp.hpl.jena.sparql.expr.E_IRI r0;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_IRI;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction1: void <init>(com.hp.hpl.jena.sparql.expr.Expr,java.lang.String)>(r1, r2);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.query.Query r6;
        com.hp.hpl.jena.sparql.expr.NodeValue r2, $r9;
        com.hp.hpl.jena.sparql.expr.E_IRI r7;
        com.hp.hpl.jena.sparql.util.Context $r1, $r3;
        java.lang.Object $r5;
        java.lang.String r8;
        com.hp.hpl.jena.sparql.function.FunctionEnv r0;
        com.hp.hpl.jena.sparql.util.Symbol $r4;

        r7 := @this: com.hp.hpl.jena.sparql.expr.E_IRI;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r0 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        r8 = null;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        if $r1 == null goto label1;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r4 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysCurrentQuery>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r4);

        r6 = (com.hp.hpl.jena.query.Query) $r5;

        if r6 == null goto label1;

        r8 = virtualinvoke r6.<com.hp.hpl.jena.query.Query: java.lang.String getBaseURI()>();

     label1:
        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.sparql.expr.NodeValue iri(com.hp.hpl.jena.sparql.expr.NodeValue,java.lang.String)>(r2, r8);

        return $r9;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_IRI $r0, r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r2 := @this: com.hp.hpl.jena.sparql.expr.E_IRI;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_IRI;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_IRI: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r1);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r0;
        com.hp.hpl.jena.sparql.expr.NodeValue r2;
        com.hp.hpl.jena.sparql.expr.E_IRI r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_IRI;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Should not be called");

        throw $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_IRI: java.lang.String symbol> = "iri";

        return;
    }
}
