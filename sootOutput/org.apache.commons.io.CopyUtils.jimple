public class org.apache.commons.io.CopyUtils extends java.lang.Object
{
    private static final int DEFAULT_BUFFER_SIZE;

    public void <init>()
    {
        org.apache.commons.io.CopyUtils r0;

        r0 := @this: org.apache.commons.io.CopyUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void copy(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;

        r1 := @parameter0: byte[];

        r0 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    public static void copy(byte[], java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r2;
        byte[] r1;
        java.io.ByteArrayInputStream $r0;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.Writer;

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        staticinvoke <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer)>($r0, r2);

        return;
    }

    public static void copy(byte[], java.io.Writer, java.lang.String) throws java.io.IOException
    {
        byte[] r1;
        java.io.ByteArrayInputStream $r0;
        java.io.Writer r2;
        java.lang.String r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.Writer;

        r3 := @parameter2: java.lang.String;

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        staticinvoke <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r0, r2, r3);

        return;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int $i0, i1, $i3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[4096];

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i3 = (int) -1;

        if $i3 == $i0 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        int $i0, i1, $i3;
        java.io.Writer r2;
        char[] r0;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.Writer;

        r0 = newarray (char)[4096];

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        $i3 = (int) -1;

        if $i3 == $i0 goto label2;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0);

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r2;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.Writer;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r2);

        return;
    }

    public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.io.Writer r3;
        java.lang.String r2;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.Writer;

        r2 := @parameter2: java.lang.String;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2);

        staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r3);

        return;
    }

    public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.OutputStreamWriter $r0;
        java.io.Reader r2;

        r2 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.OutputStream;

        $r0 = new java.io.OutputStreamWriter;

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>(r2, $r0);

        virtualinvoke $r0.<java.io.OutputStreamWriter: void flush()>();

        return;
    }

    public static void copy(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        java.io.StringReader $r0;
        java.io.OutputStreamWriter $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.OutputStream;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r2 = new java.io.OutputStreamWriter;

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r3);

        staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>($r0, $r2);

        virtualinvoke $r2.<java.io.OutputStreamWriter: void flush()>();

        return;
    }

    public static void copy(java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.io.Writer;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.CopyUtils: int DEFAULT_BUFFER_SIZE> = 4096;

        return;
    }
}
