class org.springframework.beans.TypeConverterDelegate extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private final org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry;
    private final java.lang.Object targetObject;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/TypeConverterDelegate;");

        <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(org.springframework.beans.PropertyEditorRegistrySupport)
    {
        org.springframework.beans.PropertyEditorRegistrySupport r1;
        org.springframework.beans.TypeConverterDelegate r0;

        r0 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: org.springframework.beans.PropertyEditorRegistrySupport;

        specialinvoke r0.<org.springframework.beans.TypeConverterDelegate: void <init>(org.springframework.beans.PropertyEditorRegistrySupport,java.lang.Object)>(r1, null);

        return;
    }

    public void <init>(org.springframework.beans.PropertyEditorRegistrySupport, java.lang.Object)
    {
        java.lang.Object r2;
        org.springframework.beans.PropertyEditorRegistrySupport r1;
        org.springframework.beans.TypeConverterDelegate r0;

        r0 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: org.springframework.beans.PropertyEditorRegistrySupport;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry> = r1;

        r0.<org.springframework.beans.TypeConverterDelegate: java.lang.Object targetObject> = r2;

        return;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) throws java.lang.IllegalArgumentException
    {
        org.springframework.core.convert.TypeDescriptor $r5;
        org.springframework.core.MethodParameter r3;
        java.lang.Object r1, $r4;
        java.lang.Class r2;
        org.springframework.beans.TypeConverterDelegate r0;

        r0 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.springframework.core.MethodParameter;

        if r3 == null goto label1;

        $r5 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r5.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>(r3);

        goto label2;

     label1:
        $r5 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r2);

     label2:
        $r4 = virtualinvoke r0.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>(null, null, r1, r2, $r5);

        return $r4;
    }

    public java.lang.Object convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class) throws java.lang.IllegalArgumentException
    {
        org.springframework.core.convert.TypeDescriptor $r5;
        java.lang.Object r2, r3, $r6;
        java.lang.Class r4;
        java.lang.String r1;
        org.springframework.beans.TypeConverterDelegate r0;

        r0 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Class;

        $r5 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r4);

        $r6 = virtualinvoke r0.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>(r1, r2, r3, r4, $r5);

        return $r6;
    }

    public java.lang.Object convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class, org.springframework.core.convert.TypeDescriptor) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r36;
        java.lang.Exception $r49;
        java.lang.StringBuilder $r9, $r10, $r12, $r14, $r17, $r20, $r21, $r23, $r26, $r27, $r51, $r54, $r55, $r59, $r62, $r63;
        java.lang.Object[] $r31;
        java.lang.reflect.Constructor $r30;
        java.lang.String r3, $r11, $r13, $r16, $r19, $r22, $r25, $r28, $r34, $r40, $r46, $r53, $r56, $r61, $r64, $r71, $r72;
        org.springframework.core.convert.ConversionService $r7;
        java.lang.Class[] $r29;
        java.lang.IllegalStateException $r15;
        org.springframework.beans.PropertyEditorRegistrySupport $r4, $r6;
        java.lang.NoSuchMethodException $r57;
        org.springframework.core.MethodParameter $r42, $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.util.Collection $r37;
        org.springframework.core.convert.TypeDescriptor r35, $r47;
        int $i0;
        org.springframework.beans.TypeConverterDelegate r1;
        java.beans.PropertyEditor $r5, r66;
        java.lang.IllegalArgumentException $r24;
        java.lang.Object r0, r8, $r32, $r48, r65, $r68;
        java.lang.Class r2, $r18, $r33, $r38, $r39, $r41, $r44, $r45, $r67, $r69, $r70;
        org.apache.commons.logging.Log $r50, $r52, $r58, $r60;

        r1 := @this: org.springframework.beans.TypeConverterDelegate;

        r3 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Class;

        r35 := @parameter4: org.springframework.core.convert.TypeDescriptor;

        r65 = r0;

        $r4 = r1.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        $r5 = virtualinvoke $r4.<org.springframework.beans.PropertyEditorRegistrySupport: java.beans.PropertyEditor findCustomEditor(java.lang.Class,java.lang.String)>(r2, r3);

        r66 = $r5;

        $r6 = r1.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        $r7 = virtualinvoke $r6.<org.springframework.beans.PropertyEditorRegistrySupport: org.springframework.core.convert.ConversionService getConversionService()>();

        if $r5 != null goto label01;

        if $r7 == null goto label01;

        if r0 == null goto label01;

        $r47 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r0);

        $z15 = interfaceinvoke $r7.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r47, r35);

        if $z15 == 0 goto label01;

        $r48 = interfaceinvoke $r7.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r0, $r47, r35);

        return $r48;

     label01:
        if $r5 != null goto label02;

        if r2 == null goto label05;

        $z14 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>(r2, r0);

        if $z14 != 0 goto label05;

     label02:
        if r2 == null goto label03;

        $r41 = class "Ljava/util/Collection;";

        $z11 = virtualinvoke $r41.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z11 == 0 goto label03;

        $z12 = r0 instanceof java.lang.String;

        if $z12 == 0 goto label03;

        $r42 = virtualinvoke r35.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        if $r42 == null goto label03;

        $r43 = virtualinvoke r35.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        $r44 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>($r43);

        if $r44 == null goto label03;

        $r45 = class "Ljava/lang/Enum;";

        $z13 = virtualinvoke $r45.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r44);

        if $z13 == 0 goto label03;

        $r46 = (java.lang.String) r0;

        r65 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>($r46);

     label03:
        if $r5 != null goto label04;

        r66 = virtualinvoke r1.<org.springframework.beans.TypeConverterDelegate: java.beans.PropertyEditor findDefaultEditor(java.lang.Class,org.springframework.core.convert.TypeDescriptor)>(r2, r35);

     label04:
        r65 = virtualinvoke r1.<org.springframework.beans.TypeConverterDelegate: java.lang.Object doConvertValue(java.lang.Object,java.lang.Object,java.lang.Class,java.beans.PropertyEditor)>(r8, r65, r2, r66);

     label05:
        if r2 == null goto label21;

        if r65 == null goto label18;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label07;

        $z9 = r65 instanceof java.lang.String;

        if $z9 == 0 goto label06;

        $r38 = class "Ljava/lang/Enum;";

        $r39 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $z10 = virtualinvoke $r38.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r39);

        if $z10 == 0 goto label06;

        $r40 = (java.lang.String) r65;

        r65 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>($r40);

     label06:
        $r67 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r68 = virtualinvoke r1.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertToTypedArray(java.lang.Object,java.lang.String,java.lang.Class)>(r65, r3, $r67);

        return $r68;

     label07:
        $z1 = r65 instanceof java.util.Collection;

        if $z1 == 0 goto label08;

        $r37 = (java.util.Collection) r65;

        r65 = virtualinvoke r1.<org.springframework.beans.TypeConverterDelegate: java.util.Collection convertToTypedCollection(java.util.Collection,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>($r37, r3, r2, r35);

        goto label09;

     label08:
        $z2 = r65 instanceof java.util.Map;

        if $z2 == 0 goto label09;

        $r36 = (java.util.Map) r65;

        r65 = virtualinvoke r1.<org.springframework.beans.TypeConverterDelegate: java.util.Map convertToTypedMap(java.util.Map,java.lang.String,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>($r36, r3, r2, r35);

     label09:
        $r69 = virtualinvoke r65.<java.lang.Object: java.lang.Class getClass()>();

        $z18 = virtualinvoke $r69.<java.lang.Class: boolean isArray()>();

        if $z18 == 0 goto label10;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r65);

        if $i0 != 1 goto label10;

        r65 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r65, 0);

     label10:
        $r70 = class "Ljava/lang/String;";

        $z19 = virtualinvoke $r70.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z19 == 0 goto label11;

        $r33 = virtualinvoke r65.<java.lang.Object: java.lang.Class getClass()>();

        $z8 = staticinvoke <org.springframework.util.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($r33);

        if $z8 == 0 goto label11;

        $r34 = virtualinvoke r65.<java.lang.Object: java.lang.String toString()>();

        return $r34;

     label11:
        $z3 = r65 instanceof java.lang.String;

        if $z3 == 0 goto label18;

        $z4 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r65);

        if $z4 != 0 goto label18;

        $z5 = virtualinvoke r2.<java.lang.Class: boolean isInterface()>();

        if $z5 != 0 goto label16;

        $z7 = virtualinvoke r2.<java.lang.Class: boolean isEnum()>();

        if $z7 != 0 goto label16;

     label12:
        $r29 = newarray (java.lang.Class)[1];

        $r29[0] = class "Ljava/lang/String;";

        $r30 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r29);

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = r65;

        $r32 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>($r30, $r31);

     label13:
        return $r32;

     label14:
        $r57 := @caughtexception;

        $r58 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z17 = interfaceinvoke $r58.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z17 == 0 goto label16;

        $r60 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>(java.lang.String)>("No String constructor found on type [");

        $r61 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r60.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>($r64, $r57);

        goto label16;

     label15:
        $r49 := @caughtexception;

        $r50 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z16 = interfaceinvoke $r50.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z16 == 0 goto label16;

        $r52 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>(java.lang.String)>("Construction via String failed for type [");

        $r53 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r52.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r56, $r49);

     label16:
        $r71 = (java.lang.String) r65;

        $r72 = virtualinvoke $r71.<java.lang.String: java.lang.String trim()>();

        $z20 = virtualinvoke r2.<java.lang.Class: boolean isEnum()>();

        if $z20 == 0 goto label17;

        $r28 = "";

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r72);

        if $z6 == 0 goto label17;

        return null;

     label17:
        r65 = specialinvoke r1.<org.springframework.beans.TypeConverterDelegate: java.lang.Object attemptToConvertStringToEnum(java.lang.Class,java.lang.String,java.lang.Object)>(r2, $r72, r65);

     label18:
        $z21 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>(r2, r65);

        if $z21 != 0 goto label21;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert value of type [");

        $r11 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getDescriptiveType(java.lang.Object)>(r0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to required type [");

        $r13 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>(r2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        if r3 == null goto label19;

        $r26 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for property \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label19:
        if r66 == null goto label20;

        $r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": PropertyEditor [");

        $r18 = virtualinvoke r66.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] returned inappropriate value of type [");

        $r22 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getDescriptiveType(java.lang.Object)>(r65);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label20:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": no matching editors or conversion strategy found");

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label21:
        return r65;

        catch java.lang.NoSuchMethodException from label12 to label13 with label14;
        catch java.lang.Exception from label12 to label13 with label15;
    }

    private java.lang.Object attemptToConvertStringToEnum(java.lang.Class, java.lang.String, java.lang.Object)
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r17, $r18, $r24, $r25, $r26, $r27, $r33, $r34, $r35, $r36, $r39, $r40, $r41;
        java.lang.ClassLoader $r10;
        java.lang.Throwable $r13, $r20;
        int $i0, $i1, $i3;
        java.lang.String r3, $r5, $r6, $r19, $r28, $r37;
        org.springframework.beans.TypeConverterDelegate r7;
        java.lang.reflect.Field $r4, $r12;
        java.lang.Object r0, $r8, r38;
        java.lang.Class r1, $r2, $r9, $r11;
        org.apache.commons.logging.Log $r14, $r16, $r21, $r23, $r30, $r32;
        java.lang.ClassNotFoundException $r29;

        r7 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object;

        r38 = r0;

        $r2 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i3 = (int) -1;

        if $i0 <= $i3 goto label5;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        $r8 = r7.<org.springframework.beans.TypeConverterDelegate: java.lang.Object targetObject>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        $r11 = virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r5);

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r6);

        r38 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        goto label5;

     label3:
        $r29 := @caughtexception;

        $r30 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r30.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z3 == 0 goto label5;

        $r32 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Enum class [");

        $r33 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be loaded from [");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>($r37, $r29);

        goto label5;

     label4:
        $r20 := @caughtexception;

        $r21 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z2 == 0 goto label5;

        $r23 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field [");

        $r24 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] isn\'t an enum value for type [");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>($r28, $r20);

     label5:
        if r38 != r0 goto label9;

     label6:
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r3);

        r38 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label9;

        $r16 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field [");

        $r17 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] isn\'t an enum value");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>($r19, $r13);

     label9:
        return r38;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    protected java.beans.PropertyEditor findDefaultEditor(java.lang.Class, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor $r6;
        java.beans.PropertyEditor $r4, r9;
        org.springframework.beans.PropertyEditorRegistrySupport $r3;
        org.springframework.core.convert.TypeDescriptor r0;
        java.beans.PropertyDescriptor $r7;
        java.lang.Class r1, $r5;
        java.lang.Object $r8;
        org.springframework.beans.TypeConverterDelegate r2;
        boolean $z0, $z1;

        r2 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r9 = null;

        $z0 = r0 instanceof org.springframework.core.convert.support.PropertyTypeDescriptor;

        if $z0 == 0 goto label1;

        $r6 = (org.springframework.core.convert.support.PropertyTypeDescriptor) r0;

        $r7 = virtualinvoke $r6.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor getPropertyDescriptor()>();

        $r8 = r2.<org.springframework.beans.TypeConverterDelegate: java.lang.Object targetObject>;

        r9 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.beans.PropertyEditor createPropertyEditor(java.lang.Object)>($r8);

     label1:
        if r9 != null goto label2;

        if r1 == null goto label2;

        $r3 = r2.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        $r4 = virtualinvoke $r3.<org.springframework.beans.PropertyEditorRegistrySupport: java.beans.PropertyEditor getDefaultEditor(java.lang.Class)>(r1);

        r9 = $r4;

        if $r4 != null goto label2;

        $r5 = class "Ljava/lang/String;";

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        r9 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyEditor findEditorByConvention(java.lang.Class)>(r1);

     label2:
        return r9;
    }

    protected java.lang.Object doConvertValue(java.lang.Object, java.lang.Object, java.lang.Class, java.beans.PropertyEditor)
    {
        org.springframework.beans.PropertyEditorRegistrySupport $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8;
        java.lang.Exception $r26;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r19, $r21, $r22, $r28, $r32, $r33;
        java.lang.Throwable $r25, $r35;
        java.lang.String[] $r18;
        java.lang.String $r15, $r16, $r23, $r31, $r34;
        org.springframework.beans.TypeConverterDelegate r4;
        java.beans.PropertyEditor r7, r36, r38;
        java.lang.Object r0, r5, $r6, $r8, r37, r39, r40;
        java.lang.Class r1, $r2, $r30;
        org.apache.commons.logging.Log $r3, $r10, $r17, $r20, $r27, $r29;

        r4 := @this: org.springframework.beans.TypeConverterDelegate;

        r5 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Class;

        r36 := @parameter3: java.beans.PropertyEditor;

        r37 = r0;

        z7 = 0;

        if r36 == null goto label01;

        $r24 = r4.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        z7 = virtualinvoke $r24.<org.springframework.beans.PropertyEditorRegistrySupport: boolean isSharedEditor(java.beans.PropertyEditor)>(r36);

     label01:
        if r36 == null goto label11;

        $z5 = r0 instanceof java.lang.String;

        if $z5 != 0 goto label11;

     label02:
        if z7 == 0 goto label07;

        r38 = r36;

        entermonitor r36;

     label03:
        interfaceinvoke r36.<java.beans.PropertyEditor: void setValue(java.lang.Object)>(r0);

        r39 = interfaceinvoke r36.<java.beans.PropertyEditor: java.lang.Object getValue()>();

        exitmonitor r36;

     label04:
        goto label08;

     label05:
        $r35 := @caughtexception;

        exitmonitor r38;

     label06:
        throw $r35;

     label07:
        interfaceinvoke r36.<java.beans.PropertyEditor: void setValue(java.lang.Object)>(r0);

        r39 = interfaceinvoke r36.<java.beans.PropertyEditor: java.lang.Object getValue()>();

     label08:
        if r39 == r0 goto label11;

        r37 = r39;

        r36 = null;

     label09:
        goto label11;

     label10:
        $r26 := @caughtexception;

        $r27 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label11;

        $r29 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("PropertyEditor [");

        $r30 = virtualinvoke r36.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support setValue call");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r34, $r26);

     label11:
        r40 = r37;

        if r1 == null goto label13;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z2 != 0 goto label13;

        $z3 = r37 instanceof java.lang.String[];

        if $z3 == 0 goto label13;

        $r17 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z4 == 0 goto label12;

        $r20 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Converting String array to comma-delimited String [");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r23);

     label12:
        $r18 = (java.lang.String[]) r37;

        r37 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>($r18);

     label13:
        $z8 = r37 instanceof java.lang.String;

        if $z8 == 0 goto label21;

        if r36 == null goto label20;

        $r3 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label14;

        $r10 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Converting String to [");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] using property editor [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r15);

     label14:
        $r16 = (java.lang.String) r37;

        if z7 == 0 goto label19;

        r7 = r36;

        entermonitor r36;

     label15:
        $r8 = virtualinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object doConvertTextValue(java.lang.Object,java.lang.String,java.beans.PropertyEditor)>(r5, $r16, r36);

        exitmonitor r36;

     label16:
        return $r8;

     label17:
        $r25 := @caughtexception;

        exitmonitor r7;

     label18:
        throw $r25;

     label19:
        $r6 = virtualinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object doConvertTextValue(java.lang.Object,java.lang.String,java.beans.PropertyEditor)>(r5, $r16, r36);

        return $r6;

     label20:
        $r2 = class "Ljava/lang/String;";

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label21;

        r40 = r37;

     label21:
        return r40;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Exception from label02 to label09 with label10;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    protected java.lang.Object doConvertTextValue(java.lang.Object, java.lang.String, java.beans.PropertyEditor)
    {
        java.beans.PropertyEditor r0;
        java.lang.Exception $r3;
        java.lang.Object r1, $r13;
        org.apache.commons.logging.Log $r4, $r6;
        java.lang.StringBuilder $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String r2, $r8, $r11;
        org.springframework.beans.TypeConverterDelegate r12;
        boolean $z0;

        r12 := @this: org.springframework.beans.TypeConverterDelegate;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.beans.PropertyEditor;

     label1:
        interfaceinvoke r0.<java.beans.PropertyEditor: void setValue(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r6 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("PropertyEditor [");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support setValue call");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r11, $r3);

     label4:
        interfaceinvoke r0.<java.beans.PropertyEditor: void setAsText(java.lang.String)>(r2);

        $r13 = interfaceinvoke r0.<java.beans.PropertyEditor: java.lang.Object getValue()>();

        return $r13;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.Object convertToTypedArray(java.lang.Object, java.lang.String, java.lang.Class)
    {
        org.springframework.beans.PropertyEditorRegistrySupport $r14;
        int $i0, $i1, i2, i3;
        java.lang.String r5, $r6, $r11, $r17;
        org.springframework.beans.TypeConverterDelegate r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r16;
        java.util.Collection r20;
        java.lang.Object r0, $r3, $r7, $r10, $r12, $r13, $r15, $r18, $r19;
        java.lang.Class $r1, r2, $r8, $r9;

        r4 := @this: org.springframework.beans.TypeConverterDelegate;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label3;

        r20 = (java.util.Collection) r0;

        $i1 = interfaceinvoke r20.<java.util.Collection: int size()>();

        $r15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, $i1);

        i2 = 0;

        $r16 = interfaceinvoke r20.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r17 = specialinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.String buildIndexedPropertyName(java.lang.String,int)>(r5, i2);

        $r18 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r19 = virtualinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class)>($r17, null, $r18, r2);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r15, i2, $r19);

        i2 = i2 + 1;

     label2:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        return $r15;

     label3:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label7;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label4;

        $r14 = r4.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        $z3 = virtualinvoke $r14.<org.springframework.beans.PropertyEditorRegistrySupport: boolean hasCustomEditorForElement(java.lang.Class,java.lang.String)>(r2, r5);

        if $z3 != 0 goto label4;

        return r0;

     label4:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, $i0);

        i3 = 0;

        goto label6;

     label5:
        $r11 = specialinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.String buildIndexedPropertyName(java.lang.String,int)>(r5, i3);

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i3);

        $r13 = virtualinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class)>($r11, null, $r12, r2);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r10, i3, $r13);

        i3 = i3 + 1;

     label6:
        if i3 < $i0 goto label5;

        return $r10;

     label7:
        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, 1);

        $r6 = specialinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.String buildIndexedPropertyName(java.lang.String,int)>(r5, 0);

        $r7 = virtualinvoke r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class)>($r6, null, r0, r2);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r3, 0, $r7);

        return $r3;
    }

    protected java.util.Collection convertToTypedCollection(java.util.Collection, java.lang.String, java.lang.Class, org.springframework.core.convert.TypeDescriptor)
    {
        java.lang.StringBuilder $r12, $r16, $r17, $r21, $r25, $r26, $r30, $r34, $r35, $r36, $r40, $r44, $r45, $r46, $r50, $r54, $r55, $r56;
        java.lang.Throwable $r28, $r38, $r48;
        java.lang.String r8, $r9, $r15, $r18, $r24, $r27, $r33, $r37, $r43, $r47, $r53, $r57;
        org.springframework.beans.PropertyEditorRegistrySupport $r19;
        org.springframework.core.MethodParameter $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12;
        java.util.Collection r2, r60, $r61;
        org.springframework.core.convert.TypeDescriptor r3;
        int $i0, i1;
        org.springframework.beans.TypeConverterDelegate r7;
        java.util.Iterator $r59;
        java.lang.Class r0, $r1, $r14, $r23, $r32, $r42, $r52, r58;
        java.lang.Object $r5, $r6, $r10;
        org.apache.commons.logging.Log $r11, $r13, $r20, $r22, $r29, $r31, $r39, $r41, $r49, $r51;

        r7 := @this: org.springframework.beans.TypeConverterDelegate;

        r2 := @parameter0: java.util.Collection;

        r8 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Class;

        r3 := @parameter3: org.springframework.core.convert.TypeDescriptor;

        $r1 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label01;

        return r2;

     label01:
        $z1 = staticinvoke <org.springframework.core.CollectionFactory: boolean isApproximableCollectionType(java.lang.Class)>(r0);

        if $z1 != 0 goto label03;

        $z5 = specialinvoke r7.<org.springframework.beans.TypeConverterDelegate: boolean canCreateCopy(java.lang.Class)>(r0);

        if $z5 != 0 goto label03;

        $r20 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label02;

        $r22 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Custom Collection type [");

        $r23 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not allow for creating a copy - injecting original Collection as-is");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label02:
        return r2;

     label03:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        z10 = $z2;

        $r4 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        r58 = null;

        if $r4 == null goto label04;

        r58 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>($r4);

     label04:
        if r58 != null goto label05;

        if $z2 == 0 goto label05;

        $r19 = r7.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        $z4 = virtualinvoke $r19.<org.springframework.beans.PropertyEditorRegistrySupport: boolean hasCustomEditorForElement(java.lang.Class,java.lang.String)>(null, r8);

        if $z4 != 0 goto label05;

        return r2;

     label05:
        $r59 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

        if $r59 != null goto label09;

        $r11 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label06;

        $r13 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Collection of type [");

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] returned null Iterator - injecting original Collection as-is");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label06:
        return r2;

     label07:
        $r48 := @caughtexception;

        $r49 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z9 = interfaceinvoke $r49.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z9 == 0 goto label08;

        $r51 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot access Collection of type [");

        $r52 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r53 = virtualinvoke $r52.<java.lang.Class: java.lang.String getName()>();

        $r54 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - injecting original Collection as-is: ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r51.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r57);

     label08:
        return r2;

     label09:
        if $z1 == 0 goto label10;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        r60 = staticinvoke <org.springframework.core.CollectionFactory: java.util.Collection createApproximateCollection(java.lang.Object,int)>(r2, $i0);

        goto label14;

     label10:
        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r60 = (java.util.Collection) $r5;

     label11:
        goto label14;

     label12:
        $r38 := @caughtexception;

        $r39 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z8 = interfaceinvoke $r39.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z8 == 0 goto label13;

        $r41 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create copy of Collection type [");

        $r42 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - injecting original Collection as-is: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r41.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r47);

     label13:
        return r2;

     label14:
        i1 = 0;

        goto label24;

     label15:
        $r6 = interfaceinvoke $r59.<java.util.Iterator: java.lang.Object next()>();

        $r9 = specialinvoke r7.<org.springframework.beans.TypeConverterDelegate: java.lang.String buildIndexedPropertyName(java.lang.String,int)>(r8, i1);

        if $r4 == null goto label16;

        virtualinvoke $r4.<org.springframework.core.MethodParameter: void increaseNestingLevel()>();

     label16:
        $r10 = virtualinvoke r7.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>($r9, null, $r6, r58, r3);

        if $r4 == null goto label17;

        virtualinvoke $r4.<org.springframework.core.MethodParameter: void decreaseNestingLevel()>();

     label17:
        interfaceinvoke r60.<java.util.Collection: boolean add(java.lang.Object)>($r10);

     label18:
        goto label21;

     label19:
        $r28 := @caughtexception;

        $r29 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z7 = interfaceinvoke $r29.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z7 == 0 goto label20;

        $r31 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Collection type [");

        $r32 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] seems to be read-only - injecting original Collection as-is: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r37);

     label20:
        return r2;

     label21:
        if z10 == 0 goto label22;

        if $r6 != $r10 goto label22;

        $z11 = 1;

        goto label23;

     label22:
        $z11 = 0;

     label23:
        z10 = $z11;

        i1 = i1 + 1;

     label24:
        $z12 = interfaceinvoke $r59.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label15;

        if z10 == 0 goto label25;

        $r61 = r2;

        goto label26;

     label25:
        $r61 = r60;

     label26:
        return $r61;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    protected java.util.Map convertToTypedMap(java.util.Map, java.lang.String, java.lang.Class, org.springframework.core.convert.TypeDescriptor)
    {
        java.util.Map r2, r65, $r67;
        java.util.Set $r63;
        java.lang.StringBuilder $r15, $r19, $r20, $r24, $r28, $r29, $r33, $r37, $r38, $r39, $r43, $r47, $r48, $r49, $r53, $r57, $r58, $r59;
        java.lang.Throwable $r31, $r41, $r51;
        java.lang.String r10, $r11, $r18, $r21, $r27, $r30, $r36, $r40, $r46, $r50, $r56, $r60;
        java.util.Map$Entry r66;
        org.springframework.beans.PropertyEditorRegistrySupport $r22;
        org.springframework.core.MethodParameter $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12;
        org.springframework.core.convert.TypeDescriptor r3;
        int $i0;
        org.springframework.beans.TypeConverterDelegate r9;
        java.util.Iterator $r64;
        java.lang.Class r0, $r1, $r17, $r26, $r35, $r45, $r55, r61, r62;
        java.lang.Object $r5, $r6, $r7, $r8, $r12, $r13;
        org.apache.commons.logging.Log $r14, $r16, $r23, $r25, $r32, $r34, $r42, $r44, $r52, $r54;

        r9 := @this: org.springframework.beans.TypeConverterDelegate;

        r2 := @parameter0: java.util.Map;

        r10 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Class;

        r3 := @parameter3: org.springframework.core.convert.TypeDescriptor;

        $r1 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label01;

        return r2;

     label01:
        $z1 = staticinvoke <org.springframework.core.CollectionFactory: boolean isApproximableMapType(java.lang.Class)>(r0);

        if $z1 != 0 goto label03;

        $z5 = specialinvoke r9.<org.springframework.beans.TypeConverterDelegate: boolean canCreateCopy(java.lang.Class)>(r0);

        if $z5 != 0 goto label03;

        $r23 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r23.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label02;

        $r25 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Custom Map type [");

        $r26 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not allow for creating a copy - injecting original Map as-is");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r30);

     label02:
        return r2;

     label03:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        z10 = $z2;

        r61 = null;

        r62 = null;

        $r4 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        if $r4 == null goto label04;

        r61 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapKeyParameterType(org.springframework.core.MethodParameter)>($r4);

        r62 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapValueParameterType(org.springframework.core.MethodParameter)>($r4);

     label04:
        if r61 != null goto label05;

        if r62 != null goto label05;

        if $z2 == 0 goto label05;

        $r22 = r9.<org.springframework.beans.TypeConverterDelegate: org.springframework.beans.PropertyEditorRegistrySupport propertyEditorRegistry>;

        $z4 = virtualinvoke $r22.<org.springframework.beans.PropertyEditorRegistrySupport: boolean hasCustomEditorForElement(java.lang.Class,java.lang.String)>(null, r10);

        if $z4 != 0 goto label05;

        return r2;

     label05:
        $r63 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r64 = interfaceinvoke $r63.<java.util.Set: java.util.Iterator iterator()>();

        if $r64 != null goto label09;

        $r14 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label06;

        $r16 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Map of type [");

        $r17 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] returned null Iterator - injecting original Map as-is");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21);

     label06:
        return r2;

     label07:
        $r51 := @caughtexception;

        $r52 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z9 = interfaceinvoke $r52.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z9 == 0 goto label08;

        $r54 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot access Map of type [");

        $r55 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r56 = virtualinvoke $r55.<java.lang.Class: java.lang.String getName()>();

        $r57 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - injecting original Map as-is: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r60);

     label08:
        return r2;

     label09:
        if $z1 == 0 goto label10;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        r65 = staticinvoke <org.springframework.core.CollectionFactory: java.util.Map createApproximateMap(java.lang.Object,int)>(r2, $i0);

        goto label24;

     label10:
        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r65 = (java.util.Map) $r5;

     label11:
        goto label24;

     label12:
        $r41 := @caughtexception;

        $r42 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z8 = interfaceinvoke $r42.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z8 == 0 goto label13;

        $r44 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create copy of Map type [");

        $r45 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r46 = virtualinvoke $r45.<java.lang.Class: java.lang.String getName()>();

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - injecting original Map as-is: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r50);

     label13:
        return r2;

     label14:
        $r6 = interfaceinvoke $r64.<java.util.Iterator: java.lang.Object next()>();

        r66 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r66.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r66.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = specialinvoke r9.<org.springframework.beans.TypeConverterDelegate: java.lang.String buildKeyedPropertyName(java.lang.String,java.lang.Object)>(r10, $r7);

        if $r4 == null goto label15;

        virtualinvoke $r4.<org.springframework.core.MethodParameter: void increaseNestingLevel()>();

        virtualinvoke $r4.<org.springframework.core.MethodParameter: void setTypeIndexForCurrentLevel(int)>(0);

     label15:
        $r12 = virtualinvoke r9.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>($r11, null, $r7, r61, r3);

        if $r4 == null goto label16;

        virtualinvoke $r4.<org.springframework.core.MethodParameter: void setTypeIndexForCurrentLevel(int)>(1);

     label16:
        $r13 = virtualinvoke r9.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>($r11, null, $r8, r62, r3);

        if $r4 == null goto label17;

        virtualinvoke $r4.<org.springframework.core.MethodParameter: void decreaseNestingLevel()>();

     label17:
        interfaceinvoke r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

     label18:
        goto label21;

     label19:
        $r31 := @caughtexception;

        $r32 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $z7 = interfaceinvoke $r32.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z7 == 0 goto label20;

        $r34 = <org.springframework.beans.TypeConverterDelegate: org.apache.commons.logging.Log logger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Map type [");

        $r35 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] seems to be read-only - injecting original Map as-is: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r40);

     label20:
        return r2;

     label21:
        if z10 == 0 goto label22;

        if $r7 != $r12 goto label22;

        if $r8 != $r13 goto label22;

        $z11 = 1;

        goto label23;

     label22:
        $z11 = 0;

     label23:
        z10 = $z11;

     label24:
        $z12 = interfaceinvoke $r64.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label14;

        if z10 == 0 goto label25;

        $r67 = r2;

        goto label26;

     label25:
        $r67 = r65;

     label26:
        return $r67;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    private java.lang.String buildIndexedPropertyName(java.lang.String, int)
    {
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String r0, $r2, $r7;
        org.springframework.beans.TypeConverterDelegate r6;

        r6 := @this: org.springframework.beans.TypeConverterDelegate;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r7 = null;

     label2:
        return $r7;
    }

    private java.lang.String buildKeyedPropertyName(java.lang.String, java.lang.Object)
    {
        java.lang.StringBuilder $r1, $r3, $r5, $r6;
        java.lang.Object r4;
        java.lang.String r0, $r2, $r8;
        org.springframework.beans.TypeConverterDelegate r7;

        r7 := @this: org.springframework.beans.TypeConverterDelegate;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r8 = null;

     label2:
        return $r8;
    }

    private boolean canCreateCopy(java.lang.Class)
    {
        java.lang.Class[] $r1;
        int $i0, $i1;
        java.lang.Class r0;
        org.springframework.beans.TypeConverterDelegate r2;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.springframework.beans.TypeConverterDelegate;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 == 0 goto label1;

        $r1 = newarray (java.lang.Class)[0];

        $z3 = staticinvoke <org.springframework.util.ClassUtils: boolean hasConstructor(java.lang.Class,java.lang.Class[])>(r0, $r1);

        if $z3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
