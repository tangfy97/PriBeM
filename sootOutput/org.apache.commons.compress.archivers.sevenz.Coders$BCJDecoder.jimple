class org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder extends org.apache.commons.compress.archivers.sevenz.CoderBase
{
    private final org.tukaani.xz.FilterOptions opts;

    void <init>(org.tukaani.xz.FilterOptions)
    {
        java.lang.Class[] $r1;
        org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder r0;
        org.tukaani.xz.FilterOptions r2;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder;

        r2 := @parameter0: org.tukaani.xz.FilterOptions;

        $r1 = newarray (java.lang.Class)[0];

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.CoderBase: void <init>(java.lang.Class[])>($r1);

        r0.<org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder: org.tukaani.xz.FilterOptions opts> = r2;

        return;
    }

    java.io.InputStream decode(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException
    {
        byte[] r7;
        java.io.IOException $r5;
        java.lang.AssertionError $r4;
        org.apache.commons.compress.archivers.sevenz.Coder r6;
        org.tukaani.xz.FilterOptions $r2;
        org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder r0;
        java.io.InputStream r1, $r3;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder;

        r1 := @parameter0: java.io.InputStream;

        r6 := @parameter1: org.apache.commons.compress.archivers.sevenz.Coder;

        r7 := @parameter2: byte[];

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder: org.tukaani.xz.FilterOptions opts>;

        $r3 = virtualinvoke $r2.<org.tukaani.xz.FilterOptions: java.io.InputStream getInputStream(java.io.InputStream)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("BCJ filter needs XZ for Java > 1.4 - see http://commons.apache.org/proper/commons-compress/limitations.html#7Z");

        virtualinvoke $r5.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.AssertionError from label1 to label2 with label3;
    }

    java.io.OutputStream encode(java.io.OutputStream, java.lang.Object)
    {
        java.io.OutputStream r2;
        org.tukaani.xz.FilterOptions $r3;
        org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder$1 $r5;
        org.tukaani.xz.FinishableOutputStream $r4;
        java.lang.Object r6;
        org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder r0;
        org.tukaani.xz.FinishableWrapperOutputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder;

        r2 := @parameter0: java.io.OutputStream;

        r6 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder: org.tukaani.xz.FilterOptions opts>;

        $r1 = new org.tukaani.xz.FinishableWrapperOutputStream;

        specialinvoke $r1.<org.tukaani.xz.FinishableWrapperOutputStream: void <init>(java.io.OutputStream)>(r2);

        $r4 = virtualinvoke $r3.<org.tukaani.xz.FilterOptions: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>($r1);

        $r5 = new org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder$1;

        specialinvoke $r5.<org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder$1: void <init>(org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder,java.io.OutputStream)>(r0, $r4);

        return $r5;
    }
}
