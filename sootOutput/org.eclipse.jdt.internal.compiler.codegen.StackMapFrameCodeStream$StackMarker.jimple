public class org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker extends java.lang.Object
{
    public int pc;
    public int destinationPC;
    public org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] infos;

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: int pc> = i0;

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: int destinationPC> = i1;

        return;
    }

    public void setInfos(org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[])
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker r0;
        org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[];

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] infos> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker r2;
        org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] $r5, $r7, $r8;
        java.lang.StringBuffer $r0, $r1, $r3, $r4;
        int $i0, $i1, i2, i3;
        java.lang.String $r6;
        org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo $r9;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[copy stack items from ");

        $i0 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: int pc>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $i1 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: int destinationPC>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r5 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] infos>;

        if $r5 == null goto label4;

        i3 = 0;

        $r7 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] infos>;

        i2 = lengthof $r7;

        goto label3;

     label1:
        if i3 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label2:
        $r8 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo[] infos>;

        $r9 = $r8[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        i3 = i3 + 1;

     label3:
        if i3 < i2 goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        return $r6;
    }
}
