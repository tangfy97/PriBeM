public class org.apache.commons.configuration.EnvironmentConfiguration extends org.apache.commons.configuration.AbstractConfiguration
{
    private static final java.lang.String METHOD_NAME;
    private static final int VERSION_1_5;
    private java.util.Map environment;
    static java.lang.Class class$java$lang$System;

    public void <init>()
    {
        org.apache.commons.configuration.EnvironmentConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        specialinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void <init>()>();

        $z0 = staticinvoke <org.apache.commons.lang.SystemUtils: boolean isJavaVersionAtLeast(int)>(150);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.configuration.EnvironmentConfiguration: void extractProperties15()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.commons.configuration.EnvironmentConfiguration: void extractProperties14()>();

     label2:
        return;
    }

    protected void addPropertyDirect(java.lang.String, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r3;
        java.lang.String r2;
        org.apache.commons.configuration.EnvironmentConfiguration r1;

        r1 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Configuration is read-only!");

        throw $r0;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.String r1;
        org.apache.commons.configuration.EnvironmentConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator getKeys()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        org.apache.commons.configuration.EnvironmentConfiguration r0;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        $r1 = r0.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.commons.configuration.EnvironmentConfiguration r0;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        org.apache.commons.configuration.EnvironmentConfiguration r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        $r1 = r0.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public void clearProperty(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.apache.commons.configuration.EnvironmentConfiguration r1;

        r1 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Configuration is read-only!");

        throw $r0;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.commons.configuration.EnvironmentConfiguration r1;

        r1 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Configuration is read-only!");

        throw $r0;
    }

    void extractProperties14()
    {
        java.util.Vector $r1;
        org.apache.commons.configuration.EnvironmentConfiguration r0;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        $r1 = staticinvoke <org.apache.tools.ant.taskdefs.Execute: java.util.Vector getProcEnvironment()>();

        virtualinvoke r0.<org.apache.commons.configuration.EnvironmentConfiguration: void extractPropertiesFromCollection(java.util.Collection)>($r1);

        return;
    }

    void extractPropertiesFromCollection(java.util.Collection)
    {
        java.util.HashMap $r14;
        java.lang.StringBuffer $r11, $r12, $r15;
        java.util.Map $r6;
        int $i0, $i1, $i3;
        java.lang.String r5, $r7, $r8, $r13;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.Collection r2;
        org.apache.commons.configuration.EnvironmentConfiguration r0;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r9;

        r0 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

        r2 := @parameter0: java.util.Collection;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment> = $r14;

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $i0 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(61);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $r9 = virtualinvoke r0.<org.apache.commons.configuration.EnvironmentConfiguration: org.apache.commons.logging.Log getLogger()>();

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ignoring: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r13);

        goto label3;

     label2:
        $r6 = r0.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment>;

        $r7 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r8 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label3:
        goto label1;

     label4:
        return;
    }

    void extractProperties15()
    {
        java.lang.Exception $r5;
        org.apache.commons.configuration.EnvironmentConfiguration r2;
        org.apache.commons.configuration.ConfigurationRuntimeException $r6;
        java.util.Map $r4;
        java.lang.Class $r0, $r7;
        java.lang.Object $r3;
        java.lang.reflect.Method $r1;

        r2 := @this: org.apache.commons.configuration.EnvironmentConfiguration;

     label1:
        $r0 = <org.apache.commons.configuration.EnvironmentConfiguration: java.lang.Class class$java$lang$System>;

        if $r0 != null goto label2;

        $r7 = staticinvoke <org.apache.commons.configuration.EnvironmentConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.System");

        <org.apache.commons.configuration.EnvironmentConfiguration: java.lang.Class class$java$lang$System> = $r7;

        goto label3;

     label2:
        $r7 = <org.apache.commons.configuration.EnvironmentConfiguration: java.lang.Class class$java$lang$System>;

     label3:
        $r1 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getenv", null);

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

        $r4 = (java.util.Map) $r3;

        r2.<org.apache.commons.configuration.EnvironmentConfiguration: java.util.Map environment> = $r4;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r6.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error when accessing environment properties", $r5);

        throw $r6;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.configuration.EnvironmentConfiguration: int VERSION_1_5> = 150;

        <org.apache.commons.configuration.EnvironmentConfiguration: java.lang.String METHOD_NAME> = "getenv";

        return;
    }
}
