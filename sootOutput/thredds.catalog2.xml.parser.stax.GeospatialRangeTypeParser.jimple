class thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser extends thredds.catalog2.xml.parser.stax.AbstractElementParser
{
    private final thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder parentBuilder;
    private thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder selfBuilder;
    private thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory startFac;
    private thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory sizeFac;
    private thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory resolutionFac;
    private thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory unitsFac;
    private java.lang.String startAsString;
    private java.lang.String sizeAsString;
    private java.lang.String resolutionAsString;
    private java.lang.String unitsAsString;

    private void <init>(javax.xml.namespace.QName, javax.xml.stream.XMLEventReader, thredds.catalog2.builder.ThreddsBuilderFactory, thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder)
    {
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory $r5, $r7, $r9, $r11;
        javax.xml.stream.XMLEventReader r2;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;
        thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder r4;
        thredds.catalog2.builder.ThreddsBuilderFactory r3;
        javax.xml.namespace.QName r1, $r6, $r8, $r10, $r12;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        r1 := @parameter0: javax.xml.namespace.QName;

        r2 := @parameter1: javax.xml.stream.XMLEventReader;

        r3 := @parameter2: thredds.catalog2.builder.ThreddsBuilderFactory;

        r4 := @parameter3: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder;

        specialinvoke r0.<thredds.catalog2.xml.parser.stax.AbstractElementParser: void <init>(javax.xml.namespace.QName,javax.xml.stream.XMLEventReader,thredds.catalog2.builder.ThreddsBuilderFactory)>(r1, r2, r3);

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder parentBuilder> = r4;

        $r5 = new thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory;

        $r6 = <thredds.catalog2.xml.names.ThreddsMetadataElementNames: javax.xml.namespace.QName SpatialRangeType_Start>;

        specialinvoke $r5.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: void <init>(javax.xml.namespace.QName)>($r6);

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory startFac> = $r5;

        $r7 = new thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory;

        $r8 = <thredds.catalog2.xml.names.ThreddsMetadataElementNames: javax.xml.namespace.QName SpatialRangeType_Size>;

        specialinvoke $r7.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: void <init>(javax.xml.namespace.QName)>($r8);

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory sizeFac> = $r7;

        $r9 = new thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory;

        $r10 = <thredds.catalog2.xml.names.ThreddsMetadataElementNames: javax.xml.namespace.QName SpatialRangeType_Resolution>;

        specialinvoke $r9.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: void <init>(javax.xml.namespace.QName)>($r10);

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory resolutionFac> = $r9;

        $r11 = new thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory;

        $r12 = <thredds.catalog2.xml.names.ThreddsMetadataElementNames: javax.xml.namespace.QName SpatialRangeType_Units>;

        specialinvoke $r11.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: void <init>(javax.xml.namespace.QName)>($r12);

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory unitsFac> = $r11;

        return;
    }

    thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder getSelfBuilder()
    {
        thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder $r1;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        $r1 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder selfBuilder>;

        return $r1;
    }

    void parseStartElement() throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        javax.xml.stream.XMLEventReader $r2;
        javax.xml.namespace.QName $r1;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        $r2 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.XMLEventReader reader>;

        $r1 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.namespace.QName elementName>;

        staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: javax.xml.stream.events.StartElement readNextEventCheckItIsStartElementWithExpectedName(javax.xml.stream.XMLEventReader,javax.xml.namespace.QName)>($r2, $r1);

        return;
    }

    void handleChildStartElement() throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser $r8, $r12, $r16, $r20;
        javax.xml.stream.events.StartElement $r1;
        java.lang.String $r10, $r14, $r18, $r22;
        boolean $z0, $z1, $z2, $z3;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory $r2, $r3, $r4, $r5, $r7, $r11, $r15, $r19;
        javax.xml.stream.XMLEventReader $r6, $r9, $r13, $r17, $r21;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        $r1 = virtualinvoke r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.events.StartElement peekAtNextEventIfStartElement()>();

        $r2 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory startFac>;

        $z0 = virtualinvoke $r2.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: boolean isEventMyStartElement(javax.xml.stream.events.XMLEvent)>($r1);

        if $z0 == 0 goto label1;

        $r19 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory startFac>;

        $r20 = virtualinvoke $r19.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser getParser()>();

        $r21 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.XMLEventReader reader>;

        virtualinvoke $r20.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: void parseElement(javax.xml.stream.XMLEventReader)>($r21);

        $r22 = virtualinvoke $r20.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: java.lang.String getValue()>();

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String startAsString> = $r22;

        goto label5;

     label1:
        $r3 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory sizeFac>;

        $z1 = virtualinvoke $r3.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: boolean isEventMyStartElement(javax.xml.stream.events.XMLEvent)>($r1);

        if $z1 == 0 goto label2;

        $r15 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory sizeFac>;

        $r16 = virtualinvoke $r15.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser getParser()>();

        $r17 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.XMLEventReader reader>;

        virtualinvoke $r16.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: void parseElement(javax.xml.stream.XMLEventReader)>($r17);

        $r18 = virtualinvoke $r16.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: java.lang.String getValue()>();

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String sizeAsString> = $r18;

        goto label5;

     label2:
        $r4 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory resolutionFac>;

        $z2 = virtualinvoke $r4.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: boolean isEventMyStartElement(javax.xml.stream.events.XMLEvent)>($r1);

        if $z2 == 0 goto label3;

        $r11 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory resolutionFac>;

        $r12 = virtualinvoke $r11.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser getParser()>();

        $r13 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.XMLEventReader reader>;

        virtualinvoke $r12.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: void parseElement(javax.xml.stream.XMLEventReader)>($r13);

        $r14 = virtualinvoke $r12.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: java.lang.String getValue()>();

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String resolutionAsString> = $r14;

        goto label5;

     label3:
        $r5 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory unitsFac>;

        $z3 = virtualinvoke $r5.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: boolean isEventMyStartElement(javax.xml.stream.events.XMLEvent)>($r1);

        if $z3 == 0 goto label4;

        $r7 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory unitsFac>;

        $r8 = virtualinvoke $r7.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser$Factory: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser getParser()>();

        $r9 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.XMLEventReader reader>;

        virtualinvoke $r8.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: void parseElement(javax.xml.stream.XMLEventReader)>($r9);

        $r10 = virtualinvoke $r8.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$CharContentOnlyElementParser: java.lang.String getValue()>();

        r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String unitsAsString> = $r10;

        goto label5;

     label4:
        $r6 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: javax.xml.stream.XMLEventReader reader>;

        staticinvoke <thredds.catalog2.xml.parser.stax.StaxThreddsXmlParserUtils: java.lang.String consumeElementAndConvertToXmlString(javax.xml.stream.XMLEventReader)>($r6);

     label5:
        return;
    }

    void postProcessingAfterEndElement() throws thredds.catalog2.xml.parser.ThreddsXmlParserException
    {
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;
        thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder $r5, $r7, $r9;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r8;
        double $d0, $d1, $d2;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        $r1 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String startAsString>;

        if $r1 == null goto label1;

        $r9 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder selfBuilder>;

        $r8 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String startAsString>;

        $d2 = specialinvoke r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: double parseDouble(java.lang.String)>($r8);

        interfaceinvoke $r9.<thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder: void setStart(double)>($d2);

     label1:
        $r2 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String sizeAsString>;

        if $r2 == null goto label2;

        $r7 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder selfBuilder>;

        $r6 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String sizeAsString>;

        $d1 = specialinvoke r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: double parseDouble(java.lang.String)>($r6);

        interfaceinvoke $r7.<thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder: void setSize(double)>($d1);

     label2:
        $r3 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String resolutionAsString>;

        if $r3 == null goto label3;

        $r5 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder selfBuilder>;

        $r4 = r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: java.lang.String resolutionAsString>;

        $d0 = specialinvoke r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: double parseDouble(java.lang.String)>($r4);

        interfaceinvoke $r5.<thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder: void setResolution(double)>($d0);

     label3:
        return;
    }

    private double parseDouble(java.lang.String)
    {
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r2;
        java.lang.NumberFormatException $r1;
        java.lang.String r0;
        double $d0;

        r2 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return #NaN;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

     label2:
        return $d0;

     label3:
        $r1 := @caughtexception;

        return #NaN;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    volatile thredds.catalog2.builder.ThreddsBuilder getSelfBuilder()
    {
        thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder $r1;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        $r1 = virtualinvoke r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialRangeBuilder getSelfBuilder()>();

        return $r1;
    }

    void <init>(javax.xml.namespace.QName, javax.xml.stream.XMLEventReader, thredds.catalog2.builder.ThreddsBuilderFactory, thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder, thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$1)
    {
        javax.xml.stream.XMLEventReader r2;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser r0;
        thredds.catalog2.builder.ThreddsBuilderFactory r3;
        thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$1 r5;
        javax.xml.namespace.QName r1;
        thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder r4;

        r0 := @this: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser;

        r1 := @parameter0: javax.xml.namespace.QName;

        r2 := @parameter1: javax.xml.stream.XMLEventReader;

        r3 := @parameter2: thredds.catalog2.builder.ThreddsBuilderFactory;

        r4 := @parameter3: thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder;

        r5 := @parameter4: thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser$1;

        specialinvoke r0.<thredds.catalog2.xml.parser.stax.GeospatialRangeTypeParser: void <init>(javax.xml.namespace.QName,javax.xml.stream.XMLEventReader,thredds.catalog2.builder.ThreddsBuilderFactory,thredds.catalog2.builder.ThreddsMetadataBuilder$GeospatialCoverageBuilder)>(r1, r2, r3, r4);

        return;
    }
}
