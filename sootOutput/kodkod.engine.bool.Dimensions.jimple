public abstract class kodkod.engine.bool.Dimensions extends java.lang.Object
{
    private final int capacity;

    private void <init>(int)
    {
        int i0;
        kodkod.engine.bool.Dimensions r0;

        r0 := @this: kodkod.engine.bool.Dimensions;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.Dimensions: int capacity> = i0;

        return;
    }

    public static kodkod.engine.bool.Dimensions square(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0;
        kodkod.engine.bool.Dimensions$Square $r1;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 < 1 goto label1;

        if i1 >= 1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n < 1 || size < 1");

        throw $r0;

     label2:
        $r1 = new kodkod.engine.bool.Dimensions$Square;

        specialinvoke $r1.<kodkod.engine.bool.Dimensions$Square: void <init>(int,int)>(i0, i1);

        return $r1;
    }

    public static kodkod.engine.bool.Dimensions rectangular(int[])
    {
        long $l3, l9;
        int[] r0, r8;
        kodkod.engine.bool.Dimensions$Rectangle $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, i10, i11, $i12;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1, $r7;
        kodkod.engine.bool.Dimensions$Square $r6;
        java.lang.StringBuilder $r2, $r3;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n=0.");

        throw $r7;

     label1:
        l9 = 1L;

        i10 = r0[0];

        i11 = 0;

        goto label5;

     label2:
        $i1 = r0[i11];

        if $i1 >= 1 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid dimension: ");

        $i5 = r0[i11];

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label3:
        $i2 = r0[i11];

        $l3 = (long) $i2;

        l9 = l9 * $l3;

        $i4 = r0[i11];

        if i10 == $i4 goto label4;

        i10 = 0;

     label4:
        i11 = i11 + 1;

     label5:
        $i12 = lengthof r0;

        if i11 < $i12 goto label2;

        if i10 <= 0 goto label6;

        $r6 = new kodkod.engine.bool.Dimensions$Square;

        $i8 = lengthof r0;

        specialinvoke $r6.<kodkod.engine.bool.Dimensions$Square: void <init>(int,int)>($i8, i10);

        return $r6;

     label6:
        $i6 = lengthof r0;

        r8 = newarray (int)[$i6];

        $i7 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r8, 0, $i7);

        $r5 = new kodkod.engine.bool.Dimensions$Rectangle;

        specialinvoke $r5.<kodkod.engine.bool.Dimensions$Rectangle: void <init>(int[],long)>(r8, l9);

        return $r5;
    }

    public final int capacity()
    {
        int $i0;
        kodkod.engine.bool.Dimensions r0;

        r0 := @this: kodkod.engine.bool.Dimensions;

        $i0 = r0.<kodkod.engine.bool.Dimensions: int capacity>;

        return $i0;
    }

    public abstract int dimension(int);

    public abstract int numDimensions();

    public abstract boolean isSquare();

    abstract boolean isSquare(int, int);

    abstract void copy(int, int[], int, int);

    public final kodkod.engine.bool.Dimensions dot(kodkod.engine.bool.Dimensions)
    {
        long $l19;
        int[] $r4;
        kodkod.engine.bool.Dimensions$Rectangle $r5;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        kodkod.engine.bool.Dimensions r0, r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        kodkod.engine.bool.Dimensions$Square $r3;

        r0 := @this: kodkod.engine.bool.Dimensions;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $i2 = $i0 + $i1;

        i3 = $i2 - 2;

        $i4 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        if i3 == 0 goto label1;

        $i5 = $i0 - 1;

        $i6 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>($i5);

        if $i6 == $i4 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $i7 = $i0 - 1;

        $z0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: boolean isSquare(int,int)>(0, $i7);

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: boolean isSquare(int,int)>(1, $i1);

        if $z1 == 0 goto label4;

        if $i0 == 1 goto label3;

        if $i1 == 1 goto label3;

        $i8 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        $i9 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int dimension(int)>(1);

        if $i8 != $i9 goto label4;

     label3:
        $r3 = new kodkod.engine.bool.Dimensions$Square;

        $i10 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        specialinvoke $r3.<kodkod.engine.bool.Dimensions$Square: void <init>(int,int)>(i3, $i10);

        return $r3;

     label4:
        $r4 = newarray (int)[i3];

        $i11 = $i0 - 1;

        virtualinvoke r0.<kodkod.engine.bool.Dimensions: void copy(int,int[],int,int)>(0, $r4, 0, $i11);

        $i12 = $i0 - 1;

        $i13 = $i1 - 1;

        virtualinvoke r1.<kodkod.engine.bool.Dimensions: void copy(int,int[],int,int)>(1, $r4, $i12, $i13);

        $r5 = new kodkod.engine.bool.Dimensions$Rectangle;

        $i14 = r0.<kodkod.engine.bool.Dimensions: int capacity>;

        $i15 = r1.<kodkod.engine.bool.Dimensions: int capacity>;

        $i16 = $i14 * $i15;

        $i17 = $i4 * $i4;

        $i18 = $i16 / $i17;

        $l19 = (long) $i18;

        specialinvoke $r5.<kodkod.engine.bool.Dimensions$Rectangle: void <init>(int[],long)>($r4, $l19);

        return $r5;
    }

    public final kodkod.engine.bool.Dimensions cross(kodkod.engine.bool.Dimensions)
    {
        long $l8, $l10, $l11;
        int[] $r3;
        kodkod.engine.bool.Dimensions$Rectangle $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        kodkod.engine.bool.Dimensions r0, r1;
        boolean $z0, $z1;
        kodkod.engine.bool.Dimensions$Square $r2;

        r0 := @this: kodkod.engine.bool.Dimensions;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $z0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: boolean isSquare()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: boolean isSquare()>();

        if $z1 == 0 goto label1;

        $i2 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        $i3 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        if $i2 != $i3 goto label1;

        $r2 = new kodkod.engine.bool.Dimensions$Square;

        $i4 = $i0 + $i1;

        $i5 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(0);

        specialinvoke $r2.<kodkod.engine.bool.Dimensions$Square: void <init>(int,int)>($i4, $i5);

        return $r2;

     label1:
        $i6 = $i0 + $i1;

        $r3 = newarray (int)[$i6];

        virtualinvoke r0.<kodkod.engine.bool.Dimensions: void copy(int,int[],int,int)>(0, $r3, 0, $i0);

        virtualinvoke r1.<kodkod.engine.bool.Dimensions: void copy(int,int[],int,int)>(0, $r3, $i0, $i1);

        $r4 = new kodkod.engine.bool.Dimensions$Rectangle;

        $i7 = r0.<kodkod.engine.bool.Dimensions: int capacity>;

        $l8 = (long) $i7;

        $i9 = r1.<kodkod.engine.bool.Dimensions: int capacity>;

        $l10 = (long) $i9;

        $l11 = $l8 * $l10;

        specialinvoke $r4.<kodkod.engine.bool.Dimensions$Rectangle: void <init>(int[],long)>($r3, $l11);

        return $r4;
    }

    public abstract kodkod.engine.bool.Dimensions transpose();

    private static boolean positiveBounded(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 >= i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean validate(int)
    {
        int i0, $i1;
        kodkod.engine.bool.Dimensions r0;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.Dimensions;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.engine.bool.Dimensions: int capacity>;

        $z0 = staticinvoke <kodkod.engine.bool.Dimensions: boolean positiveBounded(int,int)>(i0, $i1);

        return $z0;
    }

    public final boolean validate(int[])
    {
        int[] r1;
        int $i0, $i1, $i2, $i3, i4;
        kodkod.engine.bool.Dimensions r0;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.Dimensions;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $i1 = lengthof r1;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i4 = 0;

        goto label4;

     label2:
        $i2 = r1[i4];

        $i3 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(i4);

        $z0 = staticinvoke <kodkod.engine.bool.Dimensions: boolean positiveBounded(int,int)>($i2, $i3);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i4 = i4 + 1;

     label4:
        if i4 < $i0 goto label2;

        return 1;
    }

    public final int[] convert(int)
    {
        int[] r1;
        int $i0, i1;
        kodkod.engine.bool.Dimensions r0;

        r0 := @this: kodkod.engine.bool.Dimensions;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        r1 = newarray (int)[$i0];

        virtualinvoke r0.<kodkod.engine.bool.Dimensions: void convert(int,int[])>(i1, r1);

        return r1;
    }

    public final void convert(int, int[])
    {
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;
        int[] r1;
        int $i0, $i1, i2, $i3, $i4, i5, i6, i7;
        kodkod.engine.bool.Dimensions r0;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.Dimensions;

        i2 := @parameter0: int;

        r1 := @parameter1: int[];

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $i1 = lengthof r1;

        if $i1 >= $i0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("arrayIndex.length<this.numDimensions");

        throw $r3;

     label1:
        $z0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: boolean validate(int)>(i2);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("index");

        throw $r2;

     label2:
        i5 = r0.<kodkod.engine.bool.Dimensions: int capacity>;

        i6 = i2;

        i7 = 0;

        goto label4;

     label3:
        $i3 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(i7);

        i5 = i5 / $i3;

        $i4 = i6 / i5;

        r1[i7] = $i4;

        i6 = i6 % i5;

        i7 = i7 + 1;

     label4:
        if i7 < $i0 goto label3;

        return;
    }

    public final int convert(int[])
    {
        java.lang.IndexOutOfBoundsException $r2;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        kodkod.engine.bool.Dimensions r0;
        java.lang.String $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: kodkod.engine.bool.Dimensions;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        $i1 = lengthof r1;

        if $i1 >= $i0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index.length < this.n");

        throw $r7;

     label1:
        i6 = 0;

        i7 = r0.<kodkod.engine.bool.Dimensions: int capacity>;

        i8 = 0;

        goto label4;

     label2:
        $i2 = virtualinvoke r0.<kodkod.engine.bool.Dimensions: int dimension(int)>(i8);

        $i3 = r1[i8];

        $z0 = staticinvoke <kodkod.engine.bool.Dimensions: boolean positiveBounded(int,int)>($i3, $i2);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("index[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        i7 = i7 / $i2;

        $i4 = r1[i8];

        $i5 = i7 * $i4;

        i6 = i6 + $i5;

        i8 = i8 + 1;

     label4:
        if i8 < $i0 goto label2;

        return i6;
    }

    public java.lang.String toString()
    {
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0;
        kodkod.engine.bool.Dimensions r1;
        java.lang.String $r2;

        r1 := @this: kodkod.engine.bool.Dimensions;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ ");

        i2 = 0;

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int dimension(int)>(i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i2 = i2 + 1;

     label2:
        $i0 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: int numDimensions()>();

        if i2 < $i0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    void <init>(int, kodkod.engine.bool.Dimensions)
    {
        int i0;
        kodkod.engine.bool.Dimensions r0, r1;

        r0 := @this: kodkod.engine.bool.Dimensions;

        i0 := @parameter0: int;

        r1 := @parameter1: kodkod.engine.bool.Dimensions;

        specialinvoke r0.<kodkod.engine.bool.Dimensions: void <init>(int)>(i0);

        return;
    }

    static boolean access$1(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <kodkod.engine.bool.Dimensions: boolean positiveBounded(int,int)>(i0, i1);

        return $z0;
    }
}
