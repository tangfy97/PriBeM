public class org.apache.xpath.axes.OneStepIteratorForward extends org.apache.xpath.axes.ChildTestIterator
{
    protected int m_axis;

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        int i0, i1, $i2, $i3, $i5;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xpath.axes.OneStepIteratorForward r0;

        r0 := @this: org.apache.xpath.axes.OneStepIteratorForward;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r1, i0, i1);

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis> = $i5;

        $i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        $i3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int getAxisFromStep(org.apache.xpath.compiler.Compiler,int)>(r1, $i2);

        r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis> = $i3;

        return;
    }

    public void <init>(int)
    {
        int i0, $i2, $i4;
        org.apache.xpath.axes.OneStepIteratorForward r0;

        r0 := @this: org.apache.xpath.axes.OneStepIteratorForward;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xml.dtm.DTMAxisTraverser)>(null);

        $i2 = (int) -1;

        r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis> = $i2;

        r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis> = i0;

        $i4 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i4);

        return;
    }

    public void setRoot(int, java.lang.Object)
    {
        int i0, $i1;
        org.apache.xml.dtm.DTM $r2;
        java.lang.Object r1;
        org.apache.xml.dtm.DTMAxisTraverser $r3;
        org.apache.xpath.axes.OneStepIteratorForward r0;

        r0 := @this: org.apache.xpath.axes.OneStepIteratorForward;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i1 = r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i1);

        r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        return;
    }

    protected int getNextNode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        org.apache.xml.dtm.DTMAxisTraverser $r1, $r2;
        org.apache.xpath.axes.OneStepIteratorForward r0;

        r0 := @this: org.apache.xpath.axes.OneStepIteratorForward;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i7 = (int) -1;

        if $i7 != $i0 goto label1;

        $r2 = r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i4 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i5 = virtualinvoke $r2.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i4);

        goto label2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i5 = virtualinvoke $r1.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int)>($i2, $i1);

     label2:
        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i5;

        $i3 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        return $i3;
    }

    public int getAxis()
    {
        int $i0;
        org.apache.xpath.axes.OneStepIteratorForward r0;

        r0 := @this: org.apache.xpath.axes.OneStepIteratorForward;

        $i0 = r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis>;

        return $i0;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r1;
        int $i0, $i1;
        org.apache.xpath.axes.OneStepIteratorForward r0, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.OneStepIteratorForward;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis>;

        $r2 = (org.apache.xpath.axes.OneStepIteratorForward) r1;

        $i0 = $r2.<org.apache.xpath.axes.OneStepIteratorForward: int m_axis>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        return 1;
    }
}
