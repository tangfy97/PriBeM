public class org.apache.http.impl.conn.BasicClientConnectionManager extends java.lang.Object implements org.apache.http.conn.ClientConnectionManager
{
    private final org.apache.commons.logging.Log log;
    private static final java.util.concurrent.atomic.AtomicLong COUNTER;
    public static final java.lang.String MISUSE_MESSAGE;
    private final org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    private final org.apache.http.conn.ClientConnectionOperator connOperator;
    private org.apache.http.impl.conn.HttpPoolEntry poolEntry;
    private org.apache.http.impl.conn.ManagedClientConnectionImpl conn;
    private volatile boolean shutdown;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.conn.scheme.SchemeRegistry r3;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;
        org.apache.http.conn.ClientConnectionOperator $r4;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        r3 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log> = $r2;

        if r3 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme registry may not be null");

        throw $r5;

     label1:
        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r3;

        $r4 = virtualinvoke r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>(r3);

        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionOperator connOperator> = $r4;

        return;
    }

    public void <init>()
    {
        org.apache.http.conn.scheme.SchemeRegistry $r1;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        $r1 = staticinvoke <org.apache.http.impl.conn.SchemeRegistryFactory: org.apache.http.conn.scheme.SchemeRegistry createDefault()>();

        specialinvoke r0.<org.apache.http.impl.conn.BasicClientConnectionManager: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>($r1);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.lang.Throwable $r1;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

     label1:
        virtualinvoke r0.<org.apache.http.impl.conn.BasicClientConnectionManager: void shutdown()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r1 := @caughtexception;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()
    {
        org.apache.http.conn.scheme.SchemeRegistry $r1;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        return $r1;
    }

    protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.impl.conn.BasicClientConnectionManager r2;

        r2 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        $r0 = new org.apache.http.impl.conn.DefaultClientConnectionOperator;

        specialinvoke $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>(r1);

        return $r0;
    }

    public final org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        org.apache.http.impl.conn.BasicClientConnectionManager$1 $r0;
        org.apache.http.impl.conn.BasicClientConnectionManager r1;
        java.lang.Object r3;
        org.apache.http.conn.routing.HttpRoute r2;

        r1 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        r2 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r3 := @parameter1: java.lang.Object;

        $r0 = new org.apache.http.impl.conn.BasicClientConnectionManager$1;

        specialinvoke $r0.<org.apache.http.impl.conn.BasicClientConnectionManager$1: void <init>(org.apache.http.impl.conn.BasicClientConnectionManager,org.apache.http.conn.routing.HttpRoute,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    private void assertNotShutdown()
    {
        java.lang.IllegalStateException $r1;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        $z0 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection manager has been shut down");

        throw $r1;

     label1:
        return;
    }

    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        java.lang.IllegalStateException $r23;
        boolean $z0, $z1, $z2;
        org.apache.http.impl.conn.BasicClientConnectionManager r1;
        org.apache.http.conn.OperatedClientConnection $r16;
        org.apache.http.impl.conn.HttpPoolEntry $r4, $r5, $r7, $r10, $r11, $r17, $r20, $r22, $r32;
        java.lang.StringBuilder $r24, $r26, $r27;
        java.lang.Throwable $r30;
        org.apache.http.impl.conn.ManagedClientConnectionImpl $r3, $r6, $r9;
        org.apache.http.conn.routing.RouteTracker $r12;
        long $l0, $l1;
        org.apache.http.conn.routing.HttpRoute r0, $r21;
        org.apache.http.conn.ClientConnectionOperator $r8, $r15;
        java.lang.String $r14, $r28;
        java.lang.IllegalArgumentException $r29;
        java.util.concurrent.TimeUnit $r18;
        java.util.concurrent.atomic.AtomicLong $r13;
        org.apache.commons.logging.Log $r2, $r19, $r25;
        java.lang.Object r31;

        r1 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        r0 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r31 := @parameter1: java.lang.Object;

        if r0 != null goto label01;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null.");

        throw $r29;

     label01:
        entermonitor r1;

     label02:
        specialinvoke r1.<org.apache.http.impl.conn.BasicClientConnectionManager: void assertNotShutdown()>();

        $r2 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r25 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Get connection for route ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r28);

     label03:
        $r3 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn>;

        if $r3 == null goto label04;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid use of BasicClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.");

        throw $r23;

     label04:
        $r4 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r4 == null goto label05;

        $r20 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r21 = virtualinvoke $r20.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()>();

        $z2 = virtualinvoke $r21.<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label05;

        $r22 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        virtualinvoke $r22.<org.apache.http.impl.conn.HttpPoolEntry: void close()>();

        r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

     label05:
        $r32 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r32 != null goto label06;

        $r13 = <org.apache.http.impl.conn.BasicClientConnectionManager: java.util.concurrent.atomic.AtomicLong COUNTER>;

        $l1 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        $r15 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionOperator connOperator>;

        $r16 = interfaceinvoke $r15.<org.apache.http.conn.ClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()>();

        $r17 = new org.apache.http.impl.conn.HttpPoolEntry;

        $r19 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke $r17.<org.apache.http.impl.conn.HttpPoolEntry: void <init>(org.apache.commons.logging.Log,java.lang.String,org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.OperatedClientConnection,long,java.util.concurrent.TimeUnit)>($r19, $r14, r0, $r16, 0L, $r18);

        r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = $r17;

     label06:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $z1 = virtualinvoke $r5.<org.apache.http.impl.conn.HttpPoolEntry: boolean isExpired(long)>($l0);

        if $z1 == 0 goto label07;

        $r10 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        virtualinvoke $r10.<org.apache.http.impl.conn.HttpPoolEntry: void close()>();

        $r11 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r12 = virtualinvoke $r11.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r12.<org.apache.http.conn.routing.RouteTracker: void reset()>();

     label07:
        $r6 = new org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r8 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionOperator connOperator>;

        $r7 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        specialinvoke $r6.<org.apache.http.impl.conn.ManagedClientConnectionImpl: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.conn.ClientConnectionOperator,org.apache.http.impl.conn.HttpPoolEntry)>(r1, $r8, $r7);

        r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn> = $r6;

        $r9 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn>;

        exitmonitor r1;

     label08:
        return $r9;

     label09:
        $r30 := @caughtexception;

        exitmonitor r1;

     label10:
        throw $r30;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void shutdownConnection(org.apache.http.HttpClientConnection)
    {
        org.apache.http.HttpClientConnection r0;
        org.apache.http.impl.conn.BasicClientConnectionManager r2;
        java.io.IOException $r1;
        org.apache.commons.logging.Log $r3, $r4;
        boolean $z0;

        r2 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        r0 := @parameter0: org.apache.http.HttpClientConnection;

     label1:
        interfaceinvoke r0.<org.apache.http.HttpClientConnection: void shutdown()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r4 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O exception shutting down connection", $r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit)
    {
        java.lang.IllegalStateException $r35;
        byte $b1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.http.impl.conn.BasicClientConnectionManager r2;
        org.apache.http.conn.ClientConnectionManager $r5;
        org.apache.http.impl.conn.HttpPoolEntry $r4, $r7, $r29, $r32;
        java.lang.StringBuilder $r11, $r12, $r15, $r16, $r17, $r18, $r22, $r23, $r34, $r36, $r37;
        java.lang.Throwable $r26, $r27, $r28;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r1;
        long l0;
        int $i2;
        java.lang.String $r13, $r24, r31;
        org.apache.http.conn.ManagedClientConnection r0;
        java.lang.IllegalArgumentException $r33;
        java.util.concurrent.TimeUnit r6, $r30;
        org.apache.commons.logging.Log $r3, $r8, $r10, $r21;

        r2 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        r0 := @parameter0: org.apache.http.conn.ManagedClientConnection;

        l0 := @parameter1: long;

        r6 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = r0 instanceof org.apache.http.impl.conn.ManagedClientConnectionImpl;

        if $z0 != 0 goto label01;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection class mismatch, connection not obtained from this manager");

        throw $r33;

     label01:
        r1 = (org.apache.http.impl.conn.ManagedClientConnectionImpl) r0;

        entermonitor r1;

     label02:
        $r3 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label03;

        $r21 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing connection ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label03:
        $r4 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry getPoolEntry()>();

        if $r4 != null goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $r5 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionManager getManager()>();

        if $r5 == null goto label06;

        if $r5 == r2 goto label06;

        $r35 = new java.lang.IllegalStateException;

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not obtained from this manager");

        throw $r35;

     label06:
        entermonitor r2;

     label07:
        $z2 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: boolean shutdown>;

        if $z2 == 0 goto label10;

        specialinvoke r2.<org.apache.http.impl.conn.BasicClientConnectionManager: void shutdownConnection(org.apache.http.HttpClientConnection)>(r1);

        exitmonitor r2;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $z3 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isOpen()>();

        if $z3 == 0 goto label11;

        $z5 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isMarkedReusable()>();

        if $z5 != 0 goto label11;

        specialinvoke r2.<org.apache.http.impl.conn.BasicClientConnectionManager: void shutdownConnection(org.apache.http.HttpClientConnection)>(r1);

     label11:
        $r7 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if r6 == null goto label12;

        $r30 = r6;

        goto label13;

     label12:
        $r30 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label13:
        virtualinvoke $r7.<org.apache.http.impl.conn.HttpPoolEntry: void updateExpiry(long,java.util.concurrent.TimeUnit)>(l0, $r30);

        $r8 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $z4 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label16;

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label14;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        r31 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label15;

     label14:
        r31 = "indefinitely";

     label15:
        $r10 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.commons.logging.Log log>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection can be kept alive ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label16:
        virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry detach()>();

        r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn> = null;

        $r32 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $z7 = virtualinvoke $r32.<org.apache.http.impl.conn.HttpPoolEntry: boolean isClosed()>();

        if $z7 == 0 goto label20;

        r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

        goto label20;

     label17:
        $r28 := @caughtexception;

     label18:
        virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry detach()>();

        r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn> = null;

        $r29 = r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $z6 = virtualinvoke $r29.<org.apache.http.impl.conn.HttpPoolEntry: boolean isClosed()>();

        if $z6 == 0 goto label19;

        r2.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

     label19:
        throw $r28;

     label20:
        exitmonitor r2;

     label21:
        goto label24;

     label22:
        $r27 := @caughtexception;

        exitmonitor r2;

     label23:
        throw $r27;

     label24:
        exitmonitor r1;

     label25:
        goto label28;

     label26:
        $r26 := @caughtexception;

        exitmonitor r1;

     label27:
        throw $r26;

     label28:
        return;

        catch java.lang.Throwable from label10 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label10 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label02 to label04 with label26;
        catch java.lang.Throwable from label05 to label09 with label26;
        catch java.lang.Throwable from label10 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    public void closeExpiredConnections()
    {
        java.lang.Throwable $r6;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;
        org.apache.http.conn.routing.RouteTracker $r5;
        long $l0;
        org.apache.http.impl.conn.HttpPoolEntry $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<org.apache.http.impl.conn.BasicClientConnectionManager: void assertNotShutdown()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $z0 = virtualinvoke $r2.<org.apache.http.impl.conn.HttpPoolEntry: boolean isExpired(long)>($l0);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        virtualinvoke $r3.<org.apache.http.impl.conn.HttpPoolEntry: void close()>();

        $r4 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r5.<org.apache.http.conn.routing.RouteTracker: void reset()>();

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void closeIdleConnections(long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r8;
        org.apache.http.conn.routing.RouteTracker $r6;
        long l0, $l1, $l3, $l4, $l6, l7;
        byte $b2, $b5;
        int $i8, $i9;
        org.apache.http.impl.conn.BasicClientConnectionManager r1;
        java.lang.IllegalArgumentException $r9;
        java.util.concurrent.TimeUnit r0;
        org.apache.http.impl.conn.HttpPoolEntry $r2, $r3, $r4, $r5;

        r1 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time unit must not be null.");

        throw $r9;

     label1:
        entermonitor r1;

     label2:
        specialinvoke r1.<org.apache.http.impl.conn.BasicClientConnectionManager: void assertNotShutdown()>();

        $l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        l7 = $l1;

        $b2 = $l1 cmp 0L;

        $i8 = (int) $b2;

        if $i8 >= 0 goto label3;

        l7 = 0L;

     label3:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l3 - l7;

        $r2 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r2 == null goto label4;

        $r3 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $l4 = virtualinvoke $r3.<org.apache.http.impl.conn.HttpPoolEntry: long getUpdated()>();

        $b5 = $l4 cmp $l6;

        $i9 = (int) $b5;

        if $i9 > 0 goto label4;

        $r4 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        virtualinvoke $r4.<org.apache.http.impl.conn.HttpPoolEntry: void close()>();

        $r5 = r1.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r6 = virtualinvoke $r5.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r6.<org.apache.http.conn.routing.RouteTracker: void reset()>();

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        exitmonitor r1;

     label7:
        throw $r8;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void shutdown()
    {
        java.lang.Throwable $r3, $r4;
        org.apache.http.impl.conn.BasicClientConnectionManager r0;
        org.apache.http.impl.conn.HttpPoolEntry $r1, $r2;

        r0 := @this: org.apache.http.impl.conn.BasicClientConnectionManager;

        entermonitor r0;

     label01:
        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: boolean shutdown> = 1;

     label02:
        $r1 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r1 == null goto label03;

        $r2 = r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        virtualinvoke $r2.<org.apache.http.impl.conn.HttpPoolEntry: void close()>();

     label03:
        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn> = null;

        goto label06;

     label04:
        $r4 := @caughtexception;

     label05:
        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

        r0.<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.impl.conn.ManagedClientConnectionImpl conn> = null;

        throw $r4;

     label06:
        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r3 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r3;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        <org.apache.http.impl.conn.BasicClientConnectionManager: java.lang.String MISUSE_MESSAGE> = "Invalid use of BasicClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.";

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <org.apache.http.impl.conn.BasicClientConnectionManager: java.util.concurrent.atomic.AtomicLong COUNTER> = $r0;

        return;
    }
}
