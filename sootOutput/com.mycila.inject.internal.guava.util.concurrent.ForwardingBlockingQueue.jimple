public abstract class com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue extends com.mycila.inject.internal.guava.collect.ForwardingQueue implements java.util.concurrent.BlockingQueue
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingQueue: void <init>()>();

        return;
    }

    protected abstract java.util.concurrent.BlockingQueue delegate();

    public int drainTo(java.util.Collection, int)
    {
        java.util.Collection r2;
        int i0, $i1;
        java.util.concurrent.BlockingQueue $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        r2 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        $i1 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection,int)>(r2, i0);

        return $i1;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.Collection r2;
        int $i0;
        java.util.concurrent.BlockingQueue $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>(r2);

        return $i0;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r3;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object r2;
        long l0;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        r2 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r3 := @parameter2: java.util.concurrent.TimeUnit;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>(r2, l0, r3);

        return $z0;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.BlockingQueue $r1;
        long l0;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        l0 := @parameter0: long;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        $r3 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(l0, r2);

        return $r3;
    }

    public void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>(r2);

        return;
    }

    public int remainingCapacity()
    {
        int $i0;
        java.util.concurrent.BlockingQueue $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int remainingCapacity()>();

        return $i0;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        return $r2;
    }

    protected volatile java.util.Queue delegate()
    {
        java.util.concurrent.BlockingQueue $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        return $r1;
    }

    protected volatile java.util.Collection delegate()
    {
        java.util.concurrent.BlockingQueue $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        java.util.concurrent.BlockingQueue $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingBlockingQueue: java.util.concurrent.BlockingQueue delegate()>();

        return $r1;
    }
}
