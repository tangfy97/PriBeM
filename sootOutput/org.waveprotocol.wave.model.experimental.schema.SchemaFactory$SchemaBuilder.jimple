final class org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.DocInitializationCursor
{
    private final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler;
    private org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler;

    private void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler> = $r1;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler>;

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler> = $r2;

        return;
    }

    public void characters(java.lang.String)
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException $r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String r4, $r6;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r7;

        r7 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        r4 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered character data in schema: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r6);

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException: void <init>(org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException)>($r1);

        throw $r0;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler $r3, $r4;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r5;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException $r6;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler pushHandler(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException;

        specialinvoke $r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException: void <init>(org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException)>($r5);

        throw $r6;

     label4:
        return;

        catch org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException from label1 to label2 with label3;
    }

    public void elementEnd()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler $r1, $r2;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r3;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException $r4;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler popHandler()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException;

        specialinvoke $r4.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException: void <init>(org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException)>($r3);

        throw $r4;

     label4:
        return;

        catch org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException from label1 to label2 with label3;
    }

    public void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r3;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r2;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException $r0;

        r2 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Encountered annotation boundary");

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException: void <init>(org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException)>($r1);

        throw $r0;
    }

    public org.waveprotocol.wave.model.experimental.schema.SchemaPattern buildSchema() throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler $r2;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r10, $r11;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern $r9;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler $r1, $r3, $r5, $r7;
        java.util.Map $r6;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r0;
        java.lang.String $r4, $r8;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler handler>;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler>;

        if $r2 == $r1 goto label1;

        $r11 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r11.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Ill-formed schema");

        throw $r11;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String access$800(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)>($r3);

        if $r4 != null goto label2;

        $r10 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r10.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Root not specified");

        throw $r10;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.util.Map access$900(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)>($r5);

        $r7 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler baseHandler>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String access$800(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)>($r7);

        $r9 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.SchemaPattern compile(java.util.Map,java.lang.String)>($r6, $r8);

        return $r9;
    }

    void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1 r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: void <init>()>();

        return;
    }
}
