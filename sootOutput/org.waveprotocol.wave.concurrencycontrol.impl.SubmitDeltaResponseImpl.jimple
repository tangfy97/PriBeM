public class org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse
{
    private org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status;
    private java.lang.Integer operationsApplied;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl hashedVersionAfterApplication;
    private java.lang.Long timestampAfterApplication;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse r1;
        long $l1;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r2;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r3;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r2);

        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: int getOperationsApplied()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void setOperationsApplied(int)>($i0);

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r3);

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void clearHashedVersionAfterApplication()>();

     label2:
        $z1 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z1 == 0 goto label3;

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: long getTimestampAfterApplication()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void setTimestampAfterApplication(long)>($l1);

        goto label4;

     label3:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: void clearTimestampAfterApplication()>();

     label4:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r2);

        return $r0;
    }

    public void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r2;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status> = $r1;

        return;
    }

    public int getOperationsApplied()
    {
        int $i0;
        java.lang.Integer $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Integer operationsApplied>;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public void setOperationsApplied(int)
    {
        int i0;
        java.lang.Integer $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Integer operationsApplied> = $r1;

        return;
    }

    public boolean hasHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl hashedVersionAfterApplication>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl hashedVersionAfterApplication> = null;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl hashedVersionAfterApplication>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl hashedVersionAfterApplication> = $r1;

        return;
    }

    public boolean hasTimestampAfterApplication()
    {
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Long timestampAfterApplication>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearTimestampAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Long timestampAfterApplication> = null;

        return;
    }

    public long getTimestampAfterApplication()
    {
        long $l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Long timestampAfterApplication>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void setTimestampAfterApplication(long)
    {
        long l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Long timestampAfterApplication> = $r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Integer operationsApplied> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl hashedVersionAfterApplication> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: java.lang.Long timestampAfterApplication> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse $r2;
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse,org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getHashedVersionAfterApplication()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaResponseImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl getStatus()>();

        return $r1;
    }
}
