public class org.codehaus.jackson.map.deser.std.StringDeserializer extends org.codehaus.jackson.map.deser.std.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.StringDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StringDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/lang/String;");

        return;
    }

    public java.lang.String deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r12, $r13;
        org.codehaus.jackson.JsonToken $r1, $r2, $r3;
        org.codehaus.jackson.map.deser.std.StringDeserializer r5;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.map.JsonMappingException $r7;
        org.codehaus.jackson.Base64Variant $r11;
        java.lang.String $r8, $r10, $r14, $r15;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1;
        java.lang.Class $r6;
        java.lang.Object $r9;

        r5 := @this: org.codehaus.jackson.map.deser.std.StringDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label1;

        $r15 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r15;

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r1 != $r3 goto label4;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        if $r9 != null goto label2;

        return null;

     label2:
        $z1 = $r9 instanceof byte[];

        if $z1 == 0 goto label3;

        $r11 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        $r12 = (byte[]) $r9;

        $r13 = (byte[]) $r12;

        $r14 = virtualinvoke $r11.<org.codehaus.jackson.Base64Variant: java.lang.String encode(byte[],boolean)>($r13, 0);

        return $r14;

     label3:
        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        return $r10;

     label4:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: boolean isScalarValue()>();

        if $z0 == 0 goto label5;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r8;

     label5:
        $r6 = r5.<org.codehaus.jackson.map.deser.std.StringDeserializer: java.lang.Class _valueClass>;

        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r6, $r1);

        throw $r7;
    }

    public java.lang.String deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r4;
        org.codehaus.jackson.map.deser.std.StringDeserializer r0;
        java.lang.String $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StringDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r4 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StringDeserializer: java.lang.String deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r3;
        org.codehaus.jackson.map.deser.std.StringDeserializer r0;
        java.lang.String $r4;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StringDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StringDeserializer: java.lang.String deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>(r1, r2, r3);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.StringDeserializer r0;
        java.lang.String $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StringDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StringDeserializer: java.lang.String deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
