public class org.junit.experimental.categories.Categories extends org.junit.runners.Suite
{

    public void <init>(java.lang.Class, org.junit.runners.model.RunnerBuilder) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.model.RunnerBuilder r2;
        org.junit.experimental.categories.Categories$CategoryFilter $r3;
        org.junit.runner.Description $r6;
        org.junit.runner.manipulation.NoTestsRemainException $r7;
        java.lang.Class r1, $r4, $r5;
        org.junit.experimental.categories.Categories r0;
        org.junit.runners.model.InitializationError $r8;

        r0 := @this: org.junit.experimental.categories.Categories;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.junit.runners.model.RunnerBuilder;

        specialinvoke r0.<org.junit.runners.Suite: void <init>(java.lang.Class,org.junit.runners.model.RunnerBuilder)>(r1, r2);

     label1:
        $r3 = new org.junit.experimental.categories.Categories$CategoryFilter;

        $r4 = specialinvoke r0.<org.junit.experimental.categories.Categories: java.lang.Class getIncludedCategory(java.lang.Class)>(r1);

        $r5 = specialinvoke r0.<org.junit.experimental.categories.Categories: java.lang.Class getExcludedCategory(java.lang.Class)>(r1);

        specialinvoke $r3.<org.junit.experimental.categories.Categories$CategoryFilter: void <init>(java.lang.Class,java.lang.Class)>($r4, $r5);

        virtualinvoke r0.<org.junit.experimental.categories.Categories: void filter(org.junit.runner.manipulation.Filter)>($r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.junit.runners.model.InitializationError;

        specialinvoke $r8.<org.junit.runners.model.InitializationError: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r6 = virtualinvoke r0.<org.junit.experimental.categories.Categories: org.junit.runner.Description getDescription()>();

        specialinvoke r0.<org.junit.experimental.categories.Categories: void assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)>($r6);

        return;

        catch org.junit.runner.manipulation.NoTestsRemainException from label1 to label2 with label3;
    }

    private java.lang.Class getIncludedCategory(java.lang.Class)
    {
        org.junit.experimental.categories.Categories$IncludeCategory r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0, $r4;
        org.junit.experimental.categories.Categories r3;

        r3 := @this: org.junit.experimental.categories.Categories;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Categories$IncludeCategory;");

        r2 = (org.junit.experimental.categories.Categories$IncludeCategory) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.junit.experimental.categories.Categories$IncludeCategory: java.lang.Class value()>();

     label2:
        return $r4;
    }

    private java.lang.Class getExcludedCategory(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0, $r4;
        org.junit.experimental.categories.Categories$ExcludeCategory r2;
        org.junit.experimental.categories.Categories r3;

        r3 := @this: org.junit.experimental.categories.Categories;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Categories$ExcludeCategory;");

        r2 = (org.junit.experimental.categories.Categories$ExcludeCategory) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.junit.experimental.categories.Categories$ExcludeCategory: java.lang.Class value()>();

     label2:
        return $r4;
    }

    private void assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description) throws org.junit.runners.model.InitializationError
    {
        java.util.Iterator $r2;
        org.junit.runner.Description r0, r4;
        java.util.ArrayList $r1;
        java.lang.Object $r3;
        org.junit.experimental.categories.Categories r5;
        boolean $z0, $z1;

        r5 := @this: org.junit.experimental.categories.Categories;

        r0 := @parameter0: org.junit.runner.Description;

        $z0 = staticinvoke <org.junit.experimental.categories.Categories: boolean canHaveCategorizedChildren(org.junit.runner.Description)>(r0);

        if $z0 != 0 goto label1;

        specialinvoke r5.<org.junit.experimental.categories.Categories: void assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)>(r0);

     label1:
        $r1 = virtualinvoke r0.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runner.Description) $r3;

        specialinvoke r5.<org.junit.experimental.categories.Categories: void assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)>(r4);

        goto label2;

     label3:
        return;
    }

    private void assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description) throws org.junit.runners.model.InitializationError
    {
        java.util.Iterator $r2;
        org.junit.runner.Description r0, r4;
        java.util.ArrayList $r1;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Object $r3;
        org.junit.experimental.categories.Categories r6;
        org.junit.runners.model.InitializationError $r7;
        boolean $z0;

        r6 := @this: org.junit.experimental.categories.Categories;

        r0 := @parameter0: org.junit.runner.Description;

        $r1 = virtualinvoke r0.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runner.Description) $r3;

        $r5 = virtualinvoke r4.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Category;");

        if $r5 == null goto label2;

        $r7 = new org.junit.runners.model.InitializationError;

        specialinvoke $r7.<org.junit.runners.model.InitializationError: void <init>(java.lang.String)>("Category annotations on Parameterized classes are not supported on individual methods.");

        throw $r7;

     label2:
        specialinvoke r6.<org.junit.experimental.categories.Categories: void assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)>(r4);

        goto label1;

     label3:
        return;
    }

    private static boolean canHaveCategorizedChildren(org.junit.runner.Description)
    {
        java.util.Iterator $r2;
        org.junit.runner.Description r0, r4;
        java.lang.Object $r3;
        java.lang.Class $r5;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @parameter0: org.junit.runner.Description;

        $r1 = virtualinvoke r0.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runner.Description) $r3;

        $r5 = virtualinvoke r4.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if $r5 != null goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }
}
