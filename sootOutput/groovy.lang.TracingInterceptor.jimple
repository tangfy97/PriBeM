public class groovy.lang.TracingInterceptor extends java.lang.Object implements groovy.lang.Interceptor
{
    protected java.io.Writer writer;
    private int indent;

    public void <init>()
    {
        groovy.lang.TracingInterceptor r0;
        java.io.PrintWriter $r1;
        java.io.PrintStream $r2;

        r0 := @this: groovy.lang.TracingInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        r0.<groovy.lang.TracingInterceptor: java.io.Writer writer> = $r1;

        r0.<groovy.lang.TracingInterceptor: int indent> = 0;

        return;
    }

    public java.io.Writer getWriter()
    {
        groovy.lang.TracingInterceptor r0;
        java.io.Writer $r1;

        r0 := @this: groovy.lang.TracingInterceptor;

        $r1 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        return $r1;
    }

    public void setWriter(java.io.Writer)
    {
        groovy.lang.TracingInterceptor r0;
        java.io.Writer r1;

        r0 := @this: groovy.lang.TracingInterceptor;

        r1 := @parameter0: java.io.Writer;

        r0.<groovy.lang.TracingInterceptor: java.io.Writer writer> = r1;

        return;
    }

    public java.lang.Object beforeInvoke(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        groovy.lang.TracingInterceptor r0;
        java.lang.Object[] r3;
        int $i0, $i1;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: groovy.lang.TracingInterceptor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        virtualinvoke r0.<groovy.lang.TracingInterceptor: void write(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.String)>(r1, r2, r3, "before");

        $i0 = r0.<groovy.lang.TracingInterceptor: int indent>;

        $i1 = $i0 + 1;

        r0.<groovy.lang.TracingInterceptor: int indent> = $i1;

        return null;
    }

    public java.lang.Object afterInvoke(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Object)
    {
        groovy.lang.TracingInterceptor r0;
        java.lang.Object[] r3;
        int $i0, $i1;
        java.lang.Object r1, r4;
        java.lang.String r2;

        r0 := @this: groovy.lang.TracingInterceptor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        r4 := @parameter3: java.lang.Object;

        $i0 = r0.<groovy.lang.TracingInterceptor: int indent>;

        $i1 = $i0 - 1;

        r0.<groovy.lang.TracingInterceptor: int indent> = $i1;

        virtualinvoke r0.<groovy.lang.TracingInterceptor: void write(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.String)>(r1, r2, r3, "after ");

        return r4;
    }

    public boolean doInvoke()
    {
        groovy.lang.TracingInterceptor r0;

        r0 := @this: groovy.lang.TracingInterceptor;

        return 1;
    }

    private java.lang.String indent()
    {
        groovy.lang.TracingInterceptor r1;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.String $r2;

        r1 := @this: groovy.lang.TracingInterceptor;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        $i0 = r1.<groovy.lang.TracingInterceptor: int indent>;

        if i1 >= $i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    protected void write(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.String)
    {
        groovy.lang.TracingInterceptor r0;
        java.lang.Object[] r8;
        java.io.IOException $r11;
        java.io.Writer $r1, $r4, $r5, $r9, $r10;
        java.lang.Object r6;
        java.lang.Class $r12;
        java.lang.String $r2, r3, r7;
        boolean $z0;

        r0 := @this: groovy.lang.TracingInterceptor;

        r6 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.Object[];

        r3 := @parameter3: java.lang.String;

     label1:
        $r1 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        $r2 = specialinvoke r0.<groovy.lang.TracingInterceptor: java.lang.String indent()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        $r4 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(r3);

        $r5 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>(" ");

        $z0 = r6 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r12 = (java.lang.Class) r6;

        goto label3;

     label2:
        $r12 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        virtualinvoke r0.<groovy.lang.TracingInterceptor: void writeInfo(java.lang.Class,java.lang.String,java.lang.Object[])>($r12, r7, r8);

        $r9 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>("\n");

        $r10 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r10.<java.io.Writer: void flush()>();

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.io.IOException: void printStackTrace()>();

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    protected void writeInfo(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.io.IOException
    {
        java.lang.Object[] r8;
        int $i0, i1;
        java.lang.String $r3, r5, $r12;
        groovy.lang.TracingInterceptor r0;
        java.io.Writer $r2, $r4, $r6, $r7, $r9, $r10, $r13;
        java.lang.Class r1, $r11;
        java.lang.Object $r14;

        r0 := @this: groovy.lang.TracingInterceptor;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.Object[];

        $r2 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r4 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(".");

        $r6 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>(r5);

        $r7 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>("(");

        i1 = 0;

     label1:
        $i0 = lengthof r8;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        $r13 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r13.<java.io.Writer: void write(java.lang.String)>(", ");

     label2:
        $r14 = r8[i1];

        $r10 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        $r11 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.io.Writer: void write(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r9 = r0.<groovy.lang.TracingInterceptor: java.io.Writer writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>(")");

        return;
    }
}
