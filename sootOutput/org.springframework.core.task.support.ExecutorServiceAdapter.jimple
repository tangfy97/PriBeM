public class org.springframework.core.task.support.ExecutorServiceAdapter extends java.util.concurrent.AbstractExecutorService
{
    private final org.springframework.core.task.TaskExecutor taskExecutor;

    public void <init>(org.springframework.core.task.TaskExecutor)
    {
        org.springframework.core.task.TaskExecutor r1;
        org.springframework.core.task.support.ExecutorServiceAdapter r0;

        r0 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        r1 := @parameter0: org.springframework.core.task.TaskExecutor;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "TaskExecutor must not be null");

        r0.<org.springframework.core.task.support.ExecutorServiceAdapter: org.springframework.core.task.TaskExecutor taskExecutor> = r1;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        org.springframework.core.task.TaskExecutor $r2;
        org.springframework.core.task.support.ExecutorServiceAdapter r0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.springframework.core.task.support.ExecutorServiceAdapter: org.springframework.core.task.TaskExecutor taskExecutor>;

        interfaceinvoke $r2.<org.springframework.core.task.TaskExecutor: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public void shutdown()
    {
        java.lang.IllegalStateException $r0;
        org.springframework.core.task.support.ExecutorServiceAdapter r1;

        r1 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Manual shutdown not supported - ExecutorServiceAdapter is dependent on an external lifecycle");

        throw $r0;
    }

    public java.util.List shutdownNow()
    {
        java.lang.IllegalStateException $r0;
        org.springframework.core.task.support.ExecutorServiceAdapter r1;

        r1 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Manual shutdown not supported - ExecutorServiceAdapter is dependent on an external lifecycle");

        throw $r0;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r2;
        java.lang.IllegalStateException $r0;
        org.springframework.core.task.support.ExecutorServiceAdapter r1;
        long l0;

        r1 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        l0 := @parameter0: long;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Manual shutdown not supported - ExecutorServiceAdapter is dependent on an external lifecycle");

        throw $r0;
    }

    public boolean isShutdown()
    {
        org.springframework.core.task.support.ExecutorServiceAdapter r0;

        r0 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        return 0;
    }

    public boolean isTerminated()
    {
        org.springframework.core.task.support.ExecutorServiceAdapter r0;

        r0 := @this: org.springframework.core.task.support.ExecutorServiceAdapter;

        return 0;
    }
}
