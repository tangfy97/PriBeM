public abstract class org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler extends org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: void <init>()>();

        return;
    }

    protected org.waveprotocol.wave.model.document.util.Point maybeSplitForNewline(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentPoint)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        org.waveprotocol.wave.model.document.util.Point $r1;
        org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler r2;

        r2 := @this: org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        return $r1;
    }

    public boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 1;
    }

    public boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        return 1;
    }
}
