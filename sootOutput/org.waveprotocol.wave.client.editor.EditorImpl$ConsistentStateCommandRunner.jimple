class org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner extends java.lang.Object implements org.waveprotocol.wave.client.scheduler.Scheduler$Task
{
    private java.util.Queue commands;
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    private void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner r0;
        java.util.Queue $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Queue createQueue()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands> = $r2;

        return;
    }

    public void schedule(java.lang.Runnable)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r3;
        java.util.Queue $r2;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$500(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>(r0);

     label1:
        return;
    }

    public void execute()
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r3, $r6;
        java.lang.Runnable $r8;
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner r0;
        java.lang.Object $r7;
        java.util.Queue r1, $r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner;

        r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Queue createQueue()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands> = $r2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistent()>();

        if $z0 == 0 goto label2;

        $z3 = interfaceinvoke r1.<java.util.Queue: boolean isEmpty()>();

        if $z3 != 0 goto label2;

        $r7 = interfaceinvoke r1.<java.util.Queue: java.lang.Object poll()>();

        $r8 = (java.lang.Runnable) $r7;

        interfaceinvoke $r8.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands>;

        interfaceinvoke r1.<java.util.Queue: boolean addAll(java.util.Collection)>($r4);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands> = r1;

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: java.util.Queue commands>;

        $z1 = interfaceinvoke $r5.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$500(org.waveprotocol.wave.client.editor.EditorImpl)>($r6);

        if $z2 == 0 goto label3;

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>(r0);

     label3:
        return;
    }

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.client.editor.EditorImpl$1)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner r0;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r2;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.EditorImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r1);

        return;
    }
}
