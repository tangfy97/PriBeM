public final class org.apache.cxf.helpers.HttpHeaderHelper extends java.lang.Object
{
    public static final java.lang.String ACCEPT_ENCODING;
    public static final java.lang.String CONTENT_TYPE;
    public static final java.lang.String CONTENT_ID;
    public static final java.lang.String CONTENT_ENCODING;
    public static final java.lang.String CONTENT_LENGTH;
    public static final java.lang.String CONTENT_TRANSFER_ENCODING;
    public static final java.lang.String COOKIE;
    public static final java.lang.String TRANSFER_ENCODING;
    public static final java.lang.String CHUNKED;
    public static final java.lang.String CONNECTION;
    public static final java.lang.String CLOSE;
    public static final java.lang.String AUTHORIZATION;
    private static final java.lang.String ISO88591;
    private static java.util.Map internalHeaders;
    private static java.util.concurrent.ConcurrentHashMap encodings;
    private static java.util.regex.Pattern charsetPattern;

    private void <init>()
    {
        org.apache.cxf.helpers.HttpHeaderHelper r0;

        r0 := @this: org.apache.cxf.helpers.HttpHeaderHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getHeader(java.util.Map, java.lang.String)
    {
        java.util.List $r4;
        java.util.Map r0;
        java.lang.Object $r3;
        java.lang.String r1, $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String getHeaderKey(java.lang.String)>(r1);

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.lang.String getHeaderKey(java.lang.String)
    {
        java.util.Map $r1, $r2;
        java.lang.Object $r3;
        java.lang.String r0, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.String) $r3;

        return $r4;

     label1:
        return r0;
    }

    public static java.lang.String findCharset(java.lang.String)
    {
        char $c3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i8, $i10, $i11;
        java.lang.String r0, $r1, $r2, r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("charset=");

        $i8 = (int) -1;

        if $i0 == $i8 goto label4;

        $i1 = $i0 + 8;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        r3 = $r1;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(";");

        $i10 = (int) -1;

        if $i2 == $i10 goto label2;

        $i6 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(";");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label2:
        $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c3;

        if $i11 != 34 goto label3;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(1, $i5);

     label3:
        return r3;

     label4:
        return null;
    }

    public static java.lang.String mapCharset(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String ISO88591>;

        $r2 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String mapCharset(java.lang.String,java.lang.String)>(r0, $r1);

        return $r2;
    }

    public static java.lang.String mapCharset(java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r1;
        java.nio.charset.Charset $r7;
        int $i0, $i2;
        java.nio.charset.IllegalCharsetNameException $r13;
        java.lang.String $r2, $r3, $r4, $r8, r11, r14, r15, r16;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5, $r9;
        java.lang.Object $r6, $r10;
        java.util.regex.Pattern $r0;
        java.nio.charset.UnsupportedCharsetException $r12;

        r14 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        if r14 != null goto label1;

        return r11;

     label1:
        $i0 = virtualinvoke r14.<java.lang.String: int indexOf(java.lang.String)>(";");

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        r14 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        $r0 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.regex.Pattern charsetPattern>;

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r14);

        $r2 = virtualinvoke $r1.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return r11;

     label3:
        $r5 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.concurrent.ConcurrentHashMap encodings>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        r15 = (java.lang.String) $r6;

        if r15 != null goto label9;

     label4:
        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

        r15 = $r8;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        return null;

     label7:
        $r12 := @caughtexception;

        return null;

     label8:
        $r9 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.concurrent.ConcurrentHashMap encodings>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r8);

        r16 = (java.lang.String) $r10;

        if r16 == null goto label9;

        r15 = r16;

     label9:
        return r15;

        catch java.nio.charset.IllegalCharsetNameException from label4 to label5 with label6;
        catch java.nio.charset.UnsupportedCharsetException from label4 to label5 with label7;
    }

    static void <clinit>()
    {
        java.util.HashMap $r2;
        java.nio.charset.Charset $r0;
        java.util.Map $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.regex.Pattern $r4;

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String AUTHORIZATION> = "Authorization";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CLOSE> = "close";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CONNECTION> = "Connection";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CHUNKED> = "chunked";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String TRANSFER_ENCODING> = "Transfer-Encoding";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String COOKIE> = "Cookie";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CONTENT_TRANSFER_ENCODING> = "Content-Transfer-Encoding";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CONTENT_LENGTH> = "Content-Length";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CONTENT_ENCODING> = "Content-Encoding";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CONTENT_ID> = "Content-ID";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String CONTENT_TYPE> = "Content-Type";

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String ACCEPT_ENCODING> = "Accept-Encoding";

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        $r1 = virtualinvoke $r0.<java.nio.charset.Charset: java.lang.String name()>();

        <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String ISO88591> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.apache.cxf.helpers.HttpHeaderHelper: java.util.concurrent.ConcurrentHashMap encodings> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\"|\'");

        <org.apache.cxf.helpers.HttpHeaderHelper: java.util.regex.Pattern charsetPattern> = $r4;

        $r5 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept-Encoding", "accept-encoding");

        $r6 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Encoding", "content-encoding");

        $r7 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", "content-type");

        $r8 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-ID", "content-id");

        $r9 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Transfer-Encoding", "content-transfer-encoding");

        $r10 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Transfer-Encoding", "transfer-encoding");

        $r11 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Connection", "connection");

        $r12 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authorization", "Authorization");

        $r13 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soapaction", "SOAPAction");

        $r14 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("accept", "Accept");

        $r15 = <org.apache.cxf.helpers.HttpHeaderHelper: java.util.Map internalHeaders>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("content-length", "Content-Length");

        return;
    }
}
