public class org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator extends java.lang.Object implements org.bouncycastle.crypto.DerivationFunction
{
    private org.bouncycastle.crypto.DerivationFunction kdf;
    private org.bouncycastle.asn1.DERObjectIdentifier algorithm;
    private int keySize;
    private byte[] z;

    public void <init>(org.bouncycastle.crypto.Digest)
    {
        org.bouncycastle.crypto.Digest r2;
        org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator r0;
        org.bouncycastle.crypto.generators.KDF2BytesGenerator $r1;

        r0 := @this: org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        r2 := @parameter0: org.bouncycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.bouncycastle.crypto.generators.KDF2BytesGenerator;

        specialinvoke $r1.<org.bouncycastle.crypto.generators.KDF2BytesGenerator: void <init>(org.bouncycastle.crypto.Digest)>(r2);

        r0.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.bouncycastle.crypto.DerivationFunction kdf> = $r1;

        return;
    }

    public void init(org.bouncycastle.crypto.DerivationParameters)
    {
        byte[] $r4;
        org.bouncycastle.crypto.agreement.kdf.DHKDFParameters r1;
        org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator r2;
        int $i0;
        org.bouncycastle.crypto.DerivationParameters r0;
        org.bouncycastle.asn1.DERObjectIdentifier $r3;

        r2 := @this: org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        r0 := @parameter0: org.bouncycastle.crypto.DerivationParameters;

        r1 = (org.bouncycastle.crypto.agreement.kdf.DHKDFParameters) r0;

        $r3 = virtualinvoke r1.<org.bouncycastle.crypto.agreement.kdf.DHKDFParameters: org.bouncycastle.asn1.DERObjectIdentifier getAlgorithm()>();

        r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.bouncycastle.asn1.DERObjectIdentifier algorithm> = $r3;

        $i0 = virtualinvoke r1.<org.bouncycastle.crypto.agreement.kdf.DHKDFParameters: int getKeySize()>();

        r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: int keySize> = $i0;

        $r4 = virtualinvoke r1.<org.bouncycastle.crypto.agreement.kdf.DHKDFParameters: byte[] getZ()>();

        r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: byte[] z> = $r4;

        return;
    }

    public org.bouncycastle.crypto.Digest getDigest()
    {
        org.bouncycastle.crypto.DerivationFunction $r1;
        org.bouncycastle.crypto.Digest $r2;
        org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator r0;

        r0 := @this: org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        $r1 = r0.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.bouncycastle.crypto.DerivationFunction kdf>;

        $r2 = interfaceinvoke $r1.<org.bouncycastle.crypto.DerivationFunction: org.bouncycastle.crypto.Digest getDigest()>();

        return $r2;
    }

    public int generateBytes(byte[], int, int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        byte[] $r7, $r11, $r12, r13;
        org.bouncycastle.asn1.DEROctetString $r6;
        org.bouncycastle.asn1.DERTaggedObject $r5;
        org.bouncycastle.asn1.DERNull $r3;
        int $i0, i1, i2, $i3;
        org.bouncycastle.crypto.params.KDFParameters $r8;
        org.bouncycastle.asn1.DERObjectIdentifier $r4;
        org.bouncycastle.crypto.DerivationFunction $r10, $r14;
        org.bouncycastle.asn1.ASN1EncodableVector $r0;
        org.bouncycastle.asn1.DERSequence $r9;
        org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator r2;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r1;

        r2 := @this: org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        r13 := @parameter0: byte[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r1 = new org.bouncycastle.asn1.x509.AlgorithmIdentifier;

        $r4 = r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.bouncycastle.asn1.DERObjectIdentifier algorithm>;

        $r3 = new org.bouncycastle.asn1.DERNull;

        specialinvoke $r3.<org.bouncycastle.asn1.DERNull: void <init>()>();

        specialinvoke $r1.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable)>($r4, $r3);

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r1);

        $r5 = new org.bouncycastle.asn1.DERTaggedObject;

        $r6 = new org.bouncycastle.asn1.DEROctetString;

        $i0 = r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: int keySize>;

        $r7 = specialinvoke r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: byte[] integerToBytes(int)>($i0);

        specialinvoke $r6.<org.bouncycastle.asn1.DEROctetString: void <init>(byte[])>($r7);

        specialinvoke $r5.<org.bouncycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.bouncycastle.asn1.DEREncodable)>(1, 2, $r6);

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r5);

        $r10 = r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.bouncycastle.crypto.DerivationFunction kdf>;

        $r8 = new org.bouncycastle.crypto.params.KDFParameters;

        $r11 = r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: byte[] z>;

        $r9 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r9.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r0);

        $r12 = virtualinvoke $r9.<org.bouncycastle.asn1.DERSequence: byte[] getDEREncoded()>();

        specialinvoke $r8.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>($r11, $r12);

        interfaceinvoke $r10.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r8);

        $r14 = r2.<org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.bouncycastle.crypto.DerivationFunction kdf>;

        $i3 = interfaceinvoke $r14.<org.bouncycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r13, i1, i2);

        return $i3;
    }

    private byte[] integerToBytes(int)
    {
        byte[] r0;
        byte $b2, $b4, $b6, $b7;
        org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator r1;
        int i0, $i1, $i3, $i5;

        r1 := @this: org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        $i1 = i0 >> 24;

        $b2 = (byte) $i1;

        r0[0] = $b2;

        $i3 = i0 >> 16;

        $b4 = (byte) $i3;

        r0[1] = $b4;

        $i5 = i0 >> 8;

        $b6 = (byte) $i5;

        r0[2] = $b6;

        $b7 = (byte) i0;

        r0[3] = $b7;

        return r0;
    }
}
