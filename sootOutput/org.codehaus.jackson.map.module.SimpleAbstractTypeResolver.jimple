public class org.codehaus.jackson.map.module.SimpleAbstractTypeResolver extends org.codehaus.jackson.map.AbstractTypeResolver
{
    protected final java.util.HashMap _mappings;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        specialinvoke r0.<org.codehaus.jackson.map.AbstractTypeResolver: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings> = $r1;

        return;
    }

    public org.codehaus.jackson.map.module.SimpleAbstractTypeResolver addMapping(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r2;
        java.util.HashMap $r4;
        int $i0;
        java.lang.String $r8, $r11, $r15, $r18, $r21;
        org.codehaus.jackson.map.type.ClassKey $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5, $r12, $r22;
        java.lang.Class r0, r1;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r19, $r20;

        r2 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        if r0 != r1 goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not add mapping from class to itself");

        throw $r22;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not add mapping from class ");

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r18 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", as latter is not a subtype of former");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r12;

     label2:
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not add mapping from class ");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since it is not abstract");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label3:
        $r4 = r2.<org.codehaus.jackson.map.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings>;

        $r3 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>(r0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return r2;
    }

    public org.codehaus.jackson.type.JavaType findTypeMapping(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r2;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.DeserializationConfig r8;
        org.codehaus.jackson.type.JavaType r0, $r7;
        java.lang.Class $r1, r6;
        java.lang.Object $r5;
        org.codehaus.jackson.map.type.ClassKey $r3;

        r2 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        r8 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r4 = r2.<org.codehaus.jackson.map.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings>;

        $r3 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r1);

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.Class) $r5;

        if r6 != null goto label1;

        return null;

     label1:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>(r6);

        return $r7;
    }

    public org.codehaus.jackson.type.JavaType resolveAbstractType(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        return null;
    }
}
