public class org.apache.batik.bridge.SVGAnimateMotionElementBridge extends org.apache.batik.bridge.SVGAnimateElementBridge
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        return "animateMotion";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.bridge.SVGAnimateMotionElementBridge $r0, r1;

        r1 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        $r0 = new org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        specialinvoke $r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: void <init>()>();

        return $r0;
    }

    protected org.apache.batik.anim.AbstractAnimation createAnimation(org.apache.batik.dom.anim.AnimationTarget)
    {
        org.apache.batik.parser.AngleParser $r6;
        org.apache.batik.dom.anim.AnimationTarget r13;
        java.lang.Object[] $r10;
        float[] $r16, $r17, $r20;
        org.apache.batik.anim.values.AnimatableValue[] $r18;
        short s1;
        int $i0, $i2;
        java.lang.String $r5;
        org.apache.batik.dom.svg.SVGOMElement $r4, $r11;
        boolean $z0, $z1, z2, z3, $z4, $z5;
        org.apache.batik.ext.awt.geom.ExtendedGeneralPath $r19;
        org.apache.batik.anim.MotionAnimation $r14;
        org.apache.batik.bridge.BridgeException $r9;
        org.apache.batik.bridge.BridgeContext $r12;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;
        org.apache.batik.anim.timing.TimedElement $r15;
        float f0;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge$1$Handler $r7;
        org.apache.batik.anim.values.AnimatableValue $r1, $r2, $r3;
        org.apache.batik.parser.ParseException $r8;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        r13 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: short animationType> = 2;

        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: java.lang.String attributeLocalName> = "motion";

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.values.AnimatableValue parseLengthPair(java.lang.String)>("from");

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.values.AnimatableValue parseLengthPair(java.lang.String)>("to");

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.values.AnimatableValue parseLengthPair(java.lang.String)>("by");

        z2 = 0;

        z3 = 0;

        f0 = 0.0F;

        s1 = 0;

        $r4 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "rotate");

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label7;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z0 == 0 goto label1;

        z2 = 1;

        goto label7;

     label1:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("auto-reverse");

        if $z1 == 0 goto label2;

        z2 = 1;

        z3 = 1;

        goto label7;

     label2:
        $r6 = new org.apache.batik.parser.AngleParser;

        specialinvoke $r6.<org.apache.batik.parser.AngleParser: void <init>()>();

        $r7 = new org.apache.batik.bridge.SVGAnimateMotionElementBridge$1$Handler;

        specialinvoke $r7.<org.apache.batik.bridge.SVGAnimateMotionElementBridge$1$Handler: void <init>(org.apache.batik.bridge.SVGAnimateMotionElementBridge)>(r0);

        virtualinvoke $r6.<org.apache.batik.parser.AngleParser: void setAngleHandler(org.apache.batik.parser.AngleHandler)>($r7);

     label3:
        virtualinvoke $r6.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>($r5);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.batik.bridge.BridgeException;

        $r12 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r11 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "rotate";

        $r10[1] = $r5;

        specialinvoke $r9.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>($r12, $r11, $r8, "attribute.malformed", $r10);

        throw $r9;

     label6:
        f0 = $r7.<org.apache.batik.bridge.SVGAnimateMotionElementBridge$1$Handler: float theAngle>;

        s1 = $r7.<org.apache.batik.bridge.SVGAnimateMotionElementBridge$1$Handler: short theUnit>;

     label7:
        $r14 = new org.apache.batik.anim.MotionAnimation;

        $r15 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.anim.timing.TimedElement timedElement>;

        $i2 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: int parseCalcMode()>();

        $r16 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: float[] parseKeyTimes()>();

        $r17 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: float[] parseKeySplines()>();

        $z4 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: boolean parseAdditive()>();

        $z5 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: boolean parseAccumulate()>();

        $r18 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.values.AnimatableValue[] parseValues()>();

        $r19 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.ext.awt.geom.ExtendedGeneralPath parsePath()>();

        $r20 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: float[] parseKeyPoints()>();

        specialinvoke $r14.<org.apache.batik.anim.MotionAnimation: void <init>(org.apache.batik.anim.timing.TimedElement,org.apache.batik.dom.anim.AnimatableElement,int,float[],float[],boolean,boolean,org.apache.batik.anim.values.AnimatableValue[],org.apache.batik.anim.values.AnimatableValue,org.apache.batik.anim.values.AnimatableValue,org.apache.batik.anim.values.AnimatableValue,org.apache.batik.ext.awt.geom.ExtendedGeneralPath,float[],boolean,boolean,float,short)>($r15, r0, $i2, $r16, $r17, $z4, $z5, $r18, $r1, $r2, $r3, $r19, $r20, z2, z3, f0, s1);

        return $r14;

        catch org.apache.batik.parser.ParseException from label3 to label4 with label5;
    }

    protected org.apache.batik.ext.awt.geom.ExtendedGeneralPath parsePath()
    {
        org.w3c.dom.svg.SVGPathSegList $r20;
        org.apache.batik.parser.AWTPathProducer $r19, $r25;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r8, $r15, $r23, $r32;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Shape $r21, $r27;
        org.apache.batik.bridge.BridgeException $r13, $r30;
        org.apache.batik.bridge.BridgeContext $r9, $r16, $r33;
        org.apache.batik.parser.ParseException $r29;
        java.lang.Object[] $r14, $r31;
        short $s0;
        org.w3c.dom.Node r34;
        int $i1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r11, $r12, $r17, $r18, $r24;
        org.apache.batik.parser.PathParser $r26;
        org.apache.batik.ext.awt.geom.ExtendedGeneralPath $r22, $r28;
        org.w3c.dom.Element $r6, $r10;
        org.apache.batik.dom.svg.SVGOMPathElement r35;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        r34 = virtualinvoke $r1.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r34.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

        $r2 = "http://www.w3.org/2000/svg";

        $r3 = interfaceinvoke r34.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r4 = "mpath";

        $r5 = interfaceinvoke r34.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

        $r6 = (org.w3c.dom.Element) r34;

        $r7 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>($r6);

        $r9 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r8 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>($r8, $r7);

        $r11 = "http://www.w3.org/2000/svg";

        $r12 = interfaceinvoke $r10.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label2;

        $r17 = "path";

        $r18 = interfaceinvoke $r10.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 != 0 goto label3;

     label2:
        $r13 = new org.apache.batik.bridge.BridgeException;

        $r16 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r15 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r7;

        specialinvoke $r13.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r16, $r15, "uri.badTarget", $r14);

        throw $r13;

     label3:
        r35 = (org.apache.batik.dom.svg.SVGOMPathElement) $r10;

        $r19 = new org.apache.batik.parser.AWTPathProducer;

        specialinvoke $r19.<org.apache.batik.parser.AWTPathProducer: void <init>()>();

        $r20 = virtualinvoke r35.<org.apache.batik.dom.svg.SVGOMPathElement: org.w3c.dom.svg.SVGPathSegList getPathSegList()>();

        staticinvoke <org.apache.batik.dom.svg.SVGAnimatedPathDataSupport: void handlePathSegList(org.w3c.dom.svg.SVGPathSegList,org.apache.batik.parser.PathHandler)>($r20, $r19);

        $r21 = virtualinvoke $r19.<org.apache.batik.parser.AWTPathProducer: java.awt.Shape getShape()>();

        $r22 = (org.apache.batik.ext.awt.geom.ExtendedGeneralPath) $r21;

        return $r22;

     label4:
        r34 = interfaceinvoke r34.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r34 != null goto label1;

        $r23 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r24 = virtualinvoke $r23.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "path");

        $i1 = virtualinvoke $r24.<java.lang.String: int length()>();

        if $i1 != 0 goto label6;

        return null;

     label6:
        $r25 = new org.apache.batik.parser.AWTPathProducer;

        specialinvoke $r25.<org.apache.batik.parser.AWTPathProducer: void <init>()>();

        $r26 = new org.apache.batik.parser.PathParser;

        specialinvoke $r26.<org.apache.batik.parser.PathParser: void <init>()>();

        virtualinvoke $r26.<org.apache.batik.parser.PathParser: void setPathHandler(org.apache.batik.parser.PathHandler)>($r25);

        virtualinvoke $r26.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>($r24);

        $r27 = virtualinvoke $r25.<org.apache.batik.parser.AWTPathProducer: java.awt.Shape getShape()>();

        $r28 = (org.apache.batik.ext.awt.geom.ExtendedGeneralPath) $r27;

        return $r28;

     label7:
        $r29 := @caughtexception;

        $r30 = new org.apache.batik.bridge.BridgeException;

        $r33 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r32 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r31 = newarray (java.lang.Object)[2];

        $r31[0] = "path";

        $r31[1] = $r24;

        specialinvoke $r30.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>($r33, $r32, $r29, "attribute.malformed", $r31);

        throw $r30;

        catch org.apache.batik.parser.ParseException from label6 to label7 with label7;
    }

    protected float[] parseKeyPoints()
    {
        java.lang.Float $r5, $r15;
        java.lang.Object[] $r9;
        float[] $r6;
        java.util.ArrayList $r14;
        int $i0, $i2, i3, i4, i5, i7, $i8, $i9, $i10, $i11;
        java.lang.String $r2, $r12;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r10;
        org.apache.batik.bridge.BridgeException $r16;
        char $c1, c6;
        java.lang.NumberFormatException $r7;
        org.apache.batik.bridge.BridgeContext $r11;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;
        float $f0, $f1;
        java.lang.Object $r4;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "keyPoints");

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return null;

     label01:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(7);

        i3 = 0;

        goto label11;

     label02:
        i3 = i3 + 1;

        if i3 != $i0 goto label03;

        goto label12;

     label03:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i3);

        $i8 = (int) $c1;

        if $i8 == 32 goto label02;

        i4 = i3 + 1;

        i5 = i3;

        if i4 == $i0 goto label07;

        c6 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i4);

        goto label06;

     label04:
        i4 = i4 + 1;

        if i4 != $i0 goto label05;

        goto label07;

     label05:
        c6 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i4);

     label06:
        $i9 = (int) c6;

        if $i9 == 32 goto label07;

        $i10 = (int) c6;

        if $i10 == 59 goto label07;

        $i11 = (int) c6;

        if $i11 != 44 goto label04;

     label07:
        i3 = i4 + 1;

     label08:
        $r12 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i5, i4);

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r12);

        $r15 = new java.lang.Float;

        specialinvoke $r15.<java.lang.Float: void <init>(float)>($f1);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

        $r16 = new org.apache.batik.bridge.BridgeException;

        $r11 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r10 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "keyPoints";

        $r9[1] = $r2;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>($r11, $r10, $r7, "attribute.malformed", $r9);

        throw $r16;

     label11:
        if i3 < $i0 goto label03;

     label12:
        $i2 = interfaceinvoke $r14.<java.util.List: int size()>();

        $r6 = newarray (float)[$i2];

        i7 = 0;

        goto label14;

     label13:
        $r4 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i7);

        $r5 = (java.lang.Float) $r4;

        $f0 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        $r6[i7] = $f0;

        i7 = i7 + 1;

     label14:
        if i7 < $i2 goto label13;

        return $r6;

        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    protected int getDefaultCalcMode()
    {
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        return 2;
    }

    protected org.apache.batik.anim.values.AnimatableValue[] parseValues()
    {
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;
        int $i0;
        java.lang.String $r2;
        org.apache.batik.dom.svg.SVGOMElement $r1;
        org.apache.batik.anim.values.AnimatableValue[] $r3;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "values");

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.values.AnimatableValue[] parseValues(java.lang.String)>($r2);

        return $r3;
    }

    protected org.apache.batik.anim.values.AnimatableValue[] parseValues(java.lang.String)
    {
        org.apache.batik.dom.anim.AnimationTarget $r7, $r8, $r10;
        org.apache.batik.parser.LengthPairListParser $r0;
        java.lang.Object[] $r13;
        float[] $r4;
        org.apache.batik.anim.values.AnimatableValue[] r5;
        org.apache.batik.anim.values.AnimatableMotionPointValue $r9;
        short $s3, $s6;
        int $i0, $i1, $i2, $i4, $i5, $i7, i8;
        org.apache.batik.parser.LengthArrayProducer $r1;
        java.lang.String r2;
        org.apache.batik.dom.svg.SVGOMElement $r14;
        org.apache.batik.bridge.BridgeException $r12;
        org.apache.batik.bridge.BridgeContext $r15;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r6;
        float $f0, $f1, $f2, $f3;
        short[] $r3;
        org.apache.batik.parser.ParseException $r11;

        r6 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        r2 := @parameter0: java.lang.String;

     label1:
        $r0 = new org.apache.batik.parser.LengthPairListParser;

        specialinvoke $r0.<org.apache.batik.parser.LengthPairListParser: void <init>()>();

        $r1 = new org.apache.batik.parser.LengthArrayProducer;

        specialinvoke $r1.<org.apache.batik.parser.LengthArrayProducer: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.parser.LengthListParser: void setLengthListHandler(org.apache.batik.parser.LengthListHandler)>($r1);

        virtualinvoke $r0.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r2);

        $r3 = virtualinvoke $r1.<org.apache.batik.parser.LengthArrayProducer: short[] getLengthTypeArray()>();

        $r4 = virtualinvoke $r1.<org.apache.batik.parser.LengthArrayProducer: float[] getLengthValueArray()>();

        $i0 = lengthof $r3;

        $i1 = $i0 / 2;

        r5 = newarray (org.apache.batik.anim.values.AnimatableValue)[$i1];

        i8 = 0;

        goto label3;

     label2:
        $r7 = r6.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        $f0 = $r4[i8];

        $s3 = $r3[i8];

        $f1 = interfaceinvoke $r7.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f0, $s3, 1);

        $r8 = r6.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        $i4 = i8 + 1;

        $f2 = $r4[$i4];

        $i5 = i8 + 1;

        $s6 = $r3[$i5];

        $f3 = interfaceinvoke $r8.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f2, $s6, 2);

        $i7 = i8 / 2;

        $r9 = new org.apache.batik.anim.values.AnimatableMotionPointValue;

        $r10 = r6.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        specialinvoke $r9.<org.apache.batik.anim.values.AnimatableMotionPointValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,float,float,float)>($r10, $f1, $f3, 0.0F);

        r5[$i7] = $r9;

        i8 = i8 + 2;

     label3:
        $i2 = lengthof $r3;

        if i8 < $i2 goto label2;

        return r5;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.apache.batik.bridge.BridgeException;

        $r15 = r6.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r14 = r6.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = "values";

        $r13[1] = r2;

        specialinvoke $r12.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>($r15, $r14, $r11, "attribute.malformed", $r13);

        throw $r12;

        catch org.apache.batik.parser.ParseException from label1 to label4 with label4;
    }

    protected org.apache.batik.anim.values.AnimatableValue parseLengthPair(java.lang.String)
    {
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;
        int $i0;
        java.lang.String r1, $r3;
        org.apache.batik.dom.svg.SVGOMElement $r2;
        org.apache.batik.anim.values.AnimatableValue $r5;
        org.apache.batik.anim.values.AnimatableValue[] $r4;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, r1);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.values.AnimatableValue[] parseValues(java.lang.String)>($r3);

        $r5 = $r4[0];

        return $r5;
    }

    public org.apache.batik.anim.values.AnimatableValue getUnderlyingValue()
    {
        org.apache.batik.dom.anim.AnimationTarget $r2;
        org.apache.batik.anim.values.AnimatableMotionPointValue $r0;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r1;

        r1 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        $r0 = new org.apache.batik.anim.values.AnimatableMotionPointValue;

        $r2 = r1.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        specialinvoke $r0.<org.apache.batik.anim.values.AnimatableMotionPointValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,float,float,float)>($r2, 0.0F, 0.0F, 0.0F);

        return $r0;
    }

    protected void initializeAnimation()
    {
        org.apache.batik.anim.AbstractAnimation $r12, $r13;
        org.w3c.dom.Document $r6, $r8;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r3, $r7, $r20, $r22, $r23, $r26, $r28;
        boolean $z0;
        org.apache.batik.bridge.BridgeException $r18, $r24;
        org.apache.batik.bridge.BridgeContext $r4, $r21, $r27;
        org.apache.batik.dom.anim.AnimationTarget $r9, $r11, $r16;
        java.lang.Object[] $r19, $r25;
        org.w3c.dom.Node r29;
        int $i0;
        java.lang.String $r2, $r14, $r15;
        org.w3c.dom.Element $r5;
        org.apache.batik.bridge.SVGAnimateMotionElementBridge r0;
        org.apache.batik.bridge.SVGAnimationEngine $r17;
        org.apache.batik.anim.timing.TimedElement $r10;

        r0 := @this: org.apache.batik.bridge.SVGAnimateMotionElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r2 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r28 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        r29 = virtualinvoke $r28.<org.apache.batik.dom.AbstractParentChildNode: org.w3c.dom.Node getParentNode()>();

        goto label2;

     label1:
        $r4 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r3 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r5 = virtualinvoke $r4.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>($r3, $r2);

        r29 = $r5;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r7 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        if $r6 == $r8 goto label2;

        $r24 = new org.apache.batik.bridge.BridgeException;

        $r27 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r26 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = $r2;

        specialinvoke $r24.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r27, $r26, "uri.badTarget", $r25);

        throw $r24;

     label2:
        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget> = null;

        $z0 = r29 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label3;

        $r22 = (org.apache.batik.dom.svg.SVGOMElement) r29;

        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement targetElement> = $r22;

        $r23 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement targetElement>;

        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget> = $r23;

     label3:
        $r9 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        if $r9 != null goto label4;

        $r18 = new org.apache.batik.bridge.BridgeException;

        $r21 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r20 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = $r2;

        specialinvoke $r18.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r21, $r20, "uri.badTarget", $r19);

        throw $r18;

     label4:
        $r10 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.anim.timing.TimedElement createTimedElement()>();

        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.anim.timing.TimedElement timedElement> = $r10;

        $r11 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        $r12 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateMotionElementBridge: org.apache.batik.anim.AbstractAnimation createAnimation(org.apache.batik.dom.anim.AnimationTarget)>($r11);

        r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.anim.AbstractAnimation animation> = $r12;

        $r17 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.SVGAnimationEngine eng>;

        $r16 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.anim.AnimationTarget animationTarget>;

        $r15 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: java.lang.String attributeNamespaceURI>;

        $r14 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: java.lang.String attributeLocalName>;

        $r13 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.anim.AbstractAnimation animation>;

        virtualinvoke $r17.<org.apache.batik.anim.AnimationEngine: void addAnimation(org.apache.batik.dom.anim.AnimationTarget,short,java.lang.String,java.lang.String,org.apache.batik.anim.AbstractAnimation)>($r16, 2, $r15, $r14, $r13);

        return;
    }
}
