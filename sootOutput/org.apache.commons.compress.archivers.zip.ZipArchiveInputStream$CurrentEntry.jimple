final class org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry extends java.lang.Object
{
    private final org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry;
    private boolean hasDataDescriptor;
    private boolean usesZip64;
    private long bytesRead;
    private long bytesReadFromStream;
    private final java.util.zip.CRC32 crc;
    private java.io.InputStream in;

    private void <init>()
    {
        java.util.zip.CRC32 $r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        specialinvoke $r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry> = $r1;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.util.zip.CRC32 crc> = $r2;

        return;
    }

    void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1 r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: void <init>()>();

        return;
    }

    static org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry>;

        return $r1;
    }

    static boolean access$202(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry, boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean hasDataDescriptor> = z0;

        return z0;
    }

    static boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean hasDataDescriptor>;

        return $z0;
    }

    static java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry, java.io.InputStream)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        java.io.InputStream r1;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        r1 := @parameter1: java.io.InputStream;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream in> = r1;

        return r1;
    }

    static boolean access$402(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry, boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean usesZip64> = z0;

        return z0;
    }

    static java.io.InputStream access$300(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        java.io.InputStream $r1;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream in>;

        return $r1;
    }

    static java.util.zip.CRC32 access$500(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        java.util.zip.CRC32 $r1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.util.zip.CRC32 crc>;

        return $r1;
    }

    static long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        long $l0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesRead>;

        return $l0;
    }

    static long access$714(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry, long)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        long l0, $l1, $l2;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        l0 := @parameter1: long;

        $l1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesReadFromStream>;

        $l2 = $l1 + l0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesReadFromStream> = $l2;

        return $l2;
    }

    static long access$614(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry, long)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        long l0, $l1, $l2;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        l0 := @parameter1: long;

        $l1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesRead>;

        $l2 = $l1 + l0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesRead> = $l2;

        return $l2;
    }

    static long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        long $l0;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesReadFromStream>;

        return $l0;
    }

    static boolean access$400(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean usesZip64>;

        return $z0;
    }

    static long access$708(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)
    {
        long $l0, $l1;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry r0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesReadFromStream>;

        $l1 = $l0 + 1L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long bytesReadFromStream> = $l1;

        return $l0;
    }
}
