final class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference extends java.lang.Object implements com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference
{
    final com.mycila.inject.internal.guava.cache.CacheLoader loader;
    volatile com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue;

    public void <init>(com.mycila.inject.internal.guava.cache.CacheLoader)
    {
        com.mycila.inject.internal.guava.cache.CacheLoader r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CacheLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue> = null;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CacheLoader loader> = r1;

        return;
    }

    public boolean isComputingReference()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        return 1;
    }

    public java.lang.Object waitForValue() throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r3, $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue $r1, $r7, $r8;
        java.lang.InterruptedException $r6;
        java.lang.Thread $r2, $r4;
        java.lang.Object $r9;
        boolean z0, z1, z2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue>;

        if $r1 != null goto label14;

        z0 = 0;

        z2 = 0;

        z1 = 0;

     label01:
        entermonitor r0;

     label02:
        $r7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue>;

        if $r7 != null goto label06;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label04:
        goto label02;

     label05:
        $r6 := @caughtexception;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label02;

     label06:
        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r5;

     label10:
        if z2 == 0 goto label14;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        goto label14;

     label11:
        $r3 := @caughtexception;

     label12:
        if z1 == 0 goto label13;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label13:
        throw $r3;

     label14:
        $r8 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue>;

        $r9 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue: java.lang.Object get()>();

        return $r9;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void notifyNewValue(java.lang.Object)
    {
        java.lang.Object r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedReference $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        r2 := @parameter0: java.lang.Object;

        $r1 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedReference;

        specialinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedReference: void <init>(java.lang.Object)>(r2);

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: void setComputedValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue)>($r1);

        return;
    }

    java.lang.Object compute(java.lang.Object, int) throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedReference $r4;
        java.lang.Error $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue r13;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedUncheckedException $r12;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedNull $r5;
        int i0;
        com.mycila.inject.internal.guava.cache.CacheLoader $r2, $r6;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedError $r8;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException $r10;
        java.lang.RuntimeException $r11;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;
        java.lang.Exception $r9;
        java.lang.Object r1, $r3, $r14;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CacheLoader loader>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CacheLoader: java.lang.Object load(java.lang.Object)>(r1);

        if $r3 != null goto label2;

        $r5 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedNull;

        $r6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CacheLoader loader>;

        specialinvoke $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedNull: void <init>(com.mycila.inject.internal.guava.cache.CacheLoader,java.lang.Object)>($r6, r1);

        r13 = $r5;

        goto label3;

     label2:
        $r4 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedReference;

        specialinvoke $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedReference: void <init>(java.lang.Object)>($r3);

        r13 = $r4;

     label3:
        goto label7;

     label4:
        $r11 := @caughtexception;

        $r12 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedUncheckedException;

        specialinvoke $r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedUncheckedException: void <init>(java.lang.RuntimeException)>($r11);

        r13 = $r12;

        goto label7;

     label5:
        $r9 := @caughtexception;

        $r10 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException;

        specialinvoke $r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedException: void <init>(java.lang.Exception)>($r9);

        r13 = $r10;

        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedError;

        specialinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedError: void <init>(java.lang.Error)>($r7);

        r13 = $r8;

     label7:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: void setComputedValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue)>(r13);

        $r14 = interfaceinvoke r13.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue: java.lang.Object get()>();

        return $r14;

        catch java.lang.RuntimeException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
        catch java.lang.Error from label1 to label3 with label6;
    }

    void setComputedValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue)
    {
        java.lang.Throwable $r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue $r1, r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue;

        entermonitor r0;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue>;

        if $r1 != null goto label2;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputedValue computedValue> = r2;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object get()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        return null;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getEntry()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        return null;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference copyFor(java.lang.ref.ReferenceQueue, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r0;
        java.lang.ref.ReferenceQueue r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: java.lang.ref.ReferenceQueue;

        r2 := @parameter1: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        return r0;
    }
}
