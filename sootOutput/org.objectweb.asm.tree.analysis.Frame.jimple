public class org.objectweb.asm.tree.analysis.Frame extends java.lang.Object
{
    private org.objectweb.asm.tree.analysis.Value returnValue;
    private org.objectweb.asm.tree.analysis.Value[] values;
    private int locals;
    private int top;

    public void <init>(int, int)
    {
        org.objectweb.asm.tree.analysis.Value[] $r1, $r2;
        org.objectweb.asm.tree.analysis.Frame r0;
        int i0, i1, $i2;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = i0 + i1;

        $r1 = newarray (org.objectweb.asm.tree.analysis.Value)[$i2];

        $r2 = (org.objectweb.asm.tree.analysis.Value[]) $r1;

        r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values> = $r2;

        r0.<org.objectweb.asm.tree.analysis.Frame: int locals> = i0;

        return;
    }

    public void <init>(org.objectweb.asm.tree.analysis.Frame)
    {
        org.objectweb.asm.tree.analysis.Value[] $r2;
        org.objectweb.asm.tree.analysis.Frame r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Frame;

        $i3 = r1.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $r2 = r1.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $i1 = lengthof $r2;

        $i0 = r1.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $i2 = $i1 - $i0;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.Frame: void <init>(int,int)>($i3, $i2);

        virtualinvoke r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Frame init(org.objectweb.asm.tree.analysis.Frame)>(r1);

        return;
    }

    public org.objectweb.asm.tree.analysis.Frame init(org.objectweb.asm.tree.analysis.Frame)
    {
        org.objectweb.asm.tree.analysis.Value[] $r3, $r4, $r5;
        org.objectweb.asm.tree.analysis.Frame r0, r1;
        org.objectweb.asm.tree.analysis.Value $r2;
        int $i0, $i1;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Frame;

        $r2 = r1.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value returnValue>;

        r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value returnValue> = $r2;

        $r5 = r1.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r4 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r3 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i0);

        $i1 = r1.<org.objectweb.asm.tree.analysis.Frame: int top>;

        r0.<org.objectweb.asm.tree.analysis.Frame: int top> = $i1;

        return r0;
    }

    public void setReturn(org.objectweb.asm.tree.analysis.Value)
    {
        org.objectweb.asm.tree.analysis.Value r1;
        org.objectweb.asm.tree.analysis.Frame r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Value;

        r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value returnValue> = r1;

        return;
    }

    public int getLocals()
    {
        int $i0;
        org.objectweb.asm.tree.analysis.Frame r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        $i0 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        return $i0;
    }

    public org.objectweb.asm.tree.analysis.Value getLocal(int) throws java.lang.IndexOutOfBoundsException
    {
        org.objectweb.asm.tree.analysis.Value[] $r1;
        java.lang.IndexOutOfBoundsException $r3;
        org.objectweb.asm.tree.analysis.Value $r2;
        org.objectweb.asm.tree.analysis.Frame r0;
        int i0, $i1;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        i0 := @parameter0: int;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Trying to access an inexistant local variable");

        throw $r3;

     label1:
        $r1 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r2 = $r1[i0];

        return $r2;
    }

    public void setLocal(int, org.objectweb.asm.tree.analysis.Value) throws java.lang.IndexOutOfBoundsException
    {
        org.objectweb.asm.tree.analysis.Value[] $r2;
        java.lang.IndexOutOfBoundsException $r3;
        org.objectweb.asm.tree.analysis.Frame r0;
        org.objectweb.asm.tree.analysis.Value r1;
        int i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to access an inexistant local variable ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r2[i0] = r1;

        return;
    }

    public int getStackSize()
    {
        int $i0;
        org.objectweb.asm.tree.analysis.Frame r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        $i0 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        return $i0;
    }

    public org.objectweb.asm.tree.analysis.Value getStack(int) throws java.lang.IndexOutOfBoundsException
    {
        org.objectweb.asm.tree.analysis.Value[] $r1;
        org.objectweb.asm.tree.analysis.Value $r2;
        org.objectweb.asm.tree.analysis.Frame r0;
        int i0, $i1, $i2;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $i2 = i0 + $i1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public void clearStack()
    {
        org.objectweb.asm.tree.analysis.Frame r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r0.<org.objectweb.asm.tree.analysis.Frame: int top> = 0;

        return;
    }

    public org.objectweb.asm.tree.analysis.Value pop() throws java.lang.IndexOutOfBoundsException
    {
        org.objectweb.asm.tree.analysis.Value[] $r1;
        java.lang.IndexOutOfBoundsException $r3;
        org.objectweb.asm.tree.analysis.Frame r0;
        org.objectweb.asm.tree.analysis.Value $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        $i0 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Cannot pop operand off an empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        $i2 = $i1 - 1;

        r0.<org.objectweb.asm.tree.analysis.Frame: int top> = $i2;

        $i3 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $i4 = $i2 + $i3;

        $r2 = $r1[$i4];

        return $r2;
    }

    public void push(org.objectweb.asm.tree.analysis.Value) throws java.lang.IndexOutOfBoundsException
    {
        org.objectweb.asm.tree.analysis.Value[] $r1, $r2;
        java.lang.IndexOutOfBoundsException $r4;
        org.objectweb.asm.tree.analysis.Frame r0;
        org.objectweb.asm.tree.analysis.Value r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r3 := @parameter0: org.objectweb.asm.tree.analysis.Value;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        $i0 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $i3 = $i1 + $i0;

        $r1 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $i2 = lengthof $r1;

        if $i3 < $i2 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Insufficient maximum stack size.");

        throw $r4;

     label1:
        $r2 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $i4 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        $i5 = $i4 + 1;

        r0.<org.objectweb.asm.tree.analysis.Frame: int top> = $i5;

        $i6 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $i7 = $i4 + $i6;

        $r2[$i7] = r3;

        return;
    }

    public void execute(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.Interpreter) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.AnalyzerException $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143;
        org.objectweb.asm.tree.analysis.Frame r2;
        java.lang.StringBuilder $r127, $r128, $r147;
        org.objectweb.asm.tree.MethodInsnNode $r23;
        org.objectweb.asm.tree.IincInsnNode $r50;
        org.objectweb.asm.tree.MultiANewArrayInsnNode $r5;
        org.objectweb.asm.Type[] $r17, $r24;
        org.objectweb.asm.tree.InvokeDynamicInsnNode $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i34, i35, i36, $i38, $i40, $i42;
        org.objectweb.asm.tree.VarInsnNode $r114, $r121;
        java.util.ArrayList $r144, $r145, $r146;
        java.lang.String $r129, r132, r133;
        java.lang.RuntimeException $r148;
        org.objectweb.asm.tree.analysis.Value $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r20, $r21, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r89, $r90, $r91, $r93, $r94, $r95, $r96, $r97, $r98, $r100, $r101, $r102, $r104, $r105, $r107, $r109, $r110, $r111, $r112, $r113, $r115, $r116, $r117, $r118, $r119, $r120, $r122, $r123, $r124;
        org.objectweb.asm.Type $r18, $r19, $r25, $r26;
        org.objectweb.asm.tree.analysis.Interpreter r1;
        org.objectweb.asm.tree.AbstractInsnNode r0;

        r2 := @this: org.objectweb.asm.tree.analysis.Frame;

        r0 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.Interpreter;

        $i0 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label02;
            case 6: goto label02;
            case 7: goto label02;
            case 8: goto label02;
            case 9: goto label02;
            case 10: goto label02;
            case 11: goto label02;
            case 12: goto label02;
            case 13: goto label02;
            case 14: goto label02;
            case 15: goto label02;
            case 16: goto label02;
            case 17: goto label02;
            case 18: goto label02;
            case 19: goto label69;
            case 20: goto label69;
            case 21: goto label03;
            case 22: goto label03;
            case 23: goto label03;
            case 24: goto label03;
            case 25: goto label03;
            case 26: goto label69;
            case 27: goto label69;
            case 28: goto label69;
            case 29: goto label69;
            case 30: goto label69;
            case 31: goto label69;
            case 32: goto label69;
            case 33: goto label69;
            case 34: goto label69;
            case 35: goto label69;
            case 36: goto label69;
            case 37: goto label69;
            case 38: goto label69;
            case 39: goto label69;
            case 40: goto label69;
            case 41: goto label69;
            case 42: goto label69;
            case 43: goto label69;
            case 44: goto label69;
            case 45: goto label69;
            case 46: goto label04;
            case 47: goto label04;
            case 48: goto label04;
            case 49: goto label04;
            case 50: goto label04;
            case 51: goto label04;
            case 52: goto label04;
            case 53: goto label04;
            case 54: goto label05;
            case 55: goto label05;
            case 56: goto label05;
            case 57: goto label05;
            case 58: goto label05;
            case 59: goto label69;
            case 60: goto label69;
            case 61: goto label69;
            case 62: goto label69;
            case 63: goto label69;
            case 64: goto label69;
            case 65: goto label69;
            case 66: goto label69;
            case 67: goto label69;
            case 68: goto label69;
            case 69: goto label69;
            case 70: goto label69;
            case 71: goto label69;
            case 72: goto label69;
            case 73: goto label69;
            case 74: goto label69;
            case 75: goto label69;
            case 76: goto label69;
            case 77: goto label69;
            case 78: goto label69;
            case 79: goto label08;
            case 80: goto label08;
            case 81: goto label08;
            case 82: goto label08;
            case 83: goto label08;
            case 84: goto label08;
            case 85: goto label08;
            case 86: goto label08;
            case 87: goto label09;
            case 88: goto label10;
            case 89: goto label11;
            case 90: goto label13;
            case 91: goto label16;
            case 92: goto label19;
            case 93: goto label22;
            case 94: goto label25;
            case 95: goto label30;
            case 96: goto label33;
            case 97: goto label33;
            case 98: goto label33;
            case 99: goto label33;
            case 100: goto label33;
            case 101: goto label33;
            case 102: goto label33;
            case 103: goto label33;
            case 104: goto label33;
            case 105: goto label33;
            case 106: goto label33;
            case 107: goto label33;
            case 108: goto label33;
            case 109: goto label33;
            case 110: goto label33;
            case 111: goto label33;
            case 112: goto label33;
            case 113: goto label33;
            case 114: goto label33;
            case 115: goto label33;
            case 116: goto label34;
            case 117: goto label34;
            case 118: goto label34;
            case 119: goto label34;
            case 120: goto label35;
            case 121: goto label35;
            case 122: goto label35;
            case 123: goto label35;
            case 124: goto label35;
            case 125: goto label35;
            case 126: goto label35;
            case 127: goto label35;
            case 128: goto label35;
            case 129: goto label35;
            case 130: goto label35;
            case 131: goto label35;
            case 132: goto label36;
            case 133: goto label37;
            case 134: goto label37;
            case 135: goto label37;
            case 136: goto label37;
            case 137: goto label37;
            case 138: goto label37;
            case 139: goto label37;
            case 140: goto label37;
            case 141: goto label37;
            case 142: goto label37;
            case 143: goto label37;
            case 144: goto label37;
            case 145: goto label37;
            case 146: goto label37;
            case 147: goto label37;
            case 148: goto label38;
            case 149: goto label38;
            case 150: goto label38;
            case 151: goto label38;
            case 152: goto label38;
            case 153: goto label39;
            case 154: goto label39;
            case 155: goto label39;
            case 156: goto label39;
            case 157: goto label39;
            case 158: goto label39;
            case 159: goto label40;
            case 160: goto label40;
            case 161: goto label40;
            case 162: goto label40;
            case 163: goto label40;
            case 164: goto label40;
            case 165: goto label40;
            case 166: goto label40;
            case 167: goto label41;
            case 168: goto label42;
            case 169: goto label43;
            case 170: goto label44;
            case 171: goto label44;
            case 172: goto label45;
            case 173: goto label45;
            case 174: goto label45;
            case 175: goto label45;
            case 176: goto label45;
            case 177: goto label46;
            case 178: goto label47;
            case 179: goto label48;
            case 180: goto label49;
            case 181: goto label50;
            case 182: goto label51;
            case 183: goto label51;
            case 184: goto label51;
            case 185: goto label51;
            case 186: goto label56;
            case 187: goto label60;
            case 188: goto label61;
            case 189: goto label61;
            case 190: goto label61;
            case 191: goto label62;
            case 192: goto label63;
            case 193: goto label63;
            case 194: goto label64;
            case 195: goto label64;
            case 196: goto label69;
            case 197: goto label65;
            case 198: goto label68;
            case 199: goto label68;
            default: goto label69;
        };

     label01:
        goto label70;

     label02:
        $r124 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newOperation(org.objectweb.asm.tree.AbstractInsnNode)>(r0);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r124);

        goto label70;

     label03:
        $r121 = (org.objectweb.asm.tree.VarInsnNode) r0;

        $i30 = $r121.<org.objectweb.asm.tree.VarInsnNode: int var>;

        $r122 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getLocal(int)>($i30);

        $r123 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r122);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r123);

        goto label70;

     label04:
        $r118 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r119 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r120 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r119, $r118);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r120);

        goto label70;

     label05:
        $r112 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r113 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r112);

        $r114 = (org.objectweb.asm.tree.VarInsnNode) r0;

        i32 = $r114.<org.objectweb.asm.tree.VarInsnNode: int var>;

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>(i32, $r113);

        $i25 = interfaceinvoke $r113.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i25 != 2 goto label06;

        $i29 = i32 + 1;

        $r117 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>(null);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>($i29, $r117);

     label06:
        if i32 <= 0 goto label70;

        $i26 = i32 - 1;

        $r115 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getLocal(int)>($i26);

        if $r115 == null goto label07;

        $i27 = interfaceinvoke $r115.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i27 != 2 goto label07;

        $i28 = i32 - 1;

        $r116 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>(null);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>($i28, $r116);

     label07:
        goto label70;

     label08:
        $r109 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r110 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r111 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r111, $r110, $r109);

        goto label70;

     label09:
        $r107 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i24 = interfaceinvoke $r107.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i24 != 2 goto label70;

        $r134 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r134.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of POP");

        throw $r134;

     label10:
        $r104 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i22 = interfaceinvoke $r104.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i22 != 1 goto label70;

        $r105 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i23 = interfaceinvoke $r105.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i23 == 1 goto label70;

        $r135 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r135.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of POP2");

        throw $r135;

     label11:
        $r101 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i21 = interfaceinvoke $r101.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i21 == 1 goto label12;

        $r136 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r136.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of DUP");

        throw $r136;

     label12:
        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r101);

        $r102 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r101);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r102);

        goto label70;

     label13:
        $r97 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r98 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i19 = interfaceinvoke $r97.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i19 != 1 goto label14;

        $i20 = interfaceinvoke $r98.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i20 == 1 goto label15;

     label14:
        $r137 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r137.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of DUP_X1");

        throw $r137;

     label15:
        $r100 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r97);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r100);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r98);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r97);

        goto label70;

     label16:
        $r91 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i16 = interfaceinvoke $r91.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i16 != 1 goto label18;

        $r93 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i17 = interfaceinvoke $r93.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i17 != 1 goto label17;

        $r95 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i18 = interfaceinvoke $r95.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i18 != 1 goto label18;

        $r96 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r91);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r96);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r95);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r93);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r91);

        goto label70;

     label17:
        $r94 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r91);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r94);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r93);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r91);

        goto label70;

     label18:
        $r138 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r138.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of DUP_X2");

        throw $r138;

     label19:
        $r85 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i14 = interfaceinvoke $r85.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i14 != 1 goto label20;

        $r87 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i15 = interfaceinvoke $r87.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i15 != 1 goto label21;

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r87);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r85);

        $r89 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r87);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r89);

        $r90 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r85);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r90);

        goto label70;

     label20:
        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r85);

        $r86 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r85);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r86);

        goto label70;

     label21:
        $r139 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r139.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of DUP2");

        throw $r139;

     label22:
        $r78 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i10 = interfaceinvoke $r78.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i10 != 1 goto label23;

        $r81 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i12 = interfaceinvoke $r81.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i12 != 1 goto label24;

        $r82 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i13 = interfaceinvoke $r82.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i13 != 1 goto label24;

        $r83 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r81);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r83);

        $r84 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r78);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r84);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r82);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r81);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r78);

        goto label70;

     label23:
        $r79 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i11 = interfaceinvoke $r79.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i11 != 1 goto label24;

        $r80 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r78);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r80);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r79);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r78);

        goto label70;

     label24:
        $r140 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r140.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of DUP2_X1");

        throw $r140;

     label25:
        $r66 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i4 = interfaceinvoke $r66.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i4 != 1 goto label27;

        $r71 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i7 = interfaceinvoke $r71.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i7 != 1 goto label29;

        $r72 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i8 = interfaceinvoke $r72.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i8 != 1 goto label26;

        $r75 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i9 = interfaceinvoke $r75.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i9 != 1 goto label29;

        $r76 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r71);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r76);

        $r77 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r66);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r77);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r75);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r72);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r71);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r66);

        goto label70;

     label26:
        $r73 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r71);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r73);

        $r74 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r66);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r74);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r72);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r71);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r66);

        goto label70;

     label27:
        $r67 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i5 = interfaceinvoke $r67.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i5 != 1 goto label28;

        $r69 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i6 = interfaceinvoke $r69.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i6 != 1 goto label29;

        $r70 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r66);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r70);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r69);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r67);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r66);

        goto label70;

     label28:
        $r68 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r66);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r68);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r67);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r66);

        goto label70;

     label29:
        $r141 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r141.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of DUP2_X2");

        throw $r141;

     label30:
        $r61 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r62 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $i2 = interfaceinvoke $r62.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i2 != 1 goto label31;

        $i3 = interfaceinvoke $r61.<org.objectweb.asm.tree.analysis.Value: int getSize()>();

        if $i3 == 1 goto label32;

     label31:
        $r142 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r142.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Illegal use of SWAP");

        throw $r142;

     label32:
        $r64 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r61);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r64);

        $r65 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r62);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r65);

        goto label70;

     label33:
        $r58 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r59 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r60 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r59, $r58);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r60);

        goto label70;

     label34:
        $r56 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r57 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r56);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r57);

        goto label70;

     label35:
        $r53 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r54 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r55 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r54, $r53);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r55);

        goto label70;

     label36:
        $r50 = (org.objectweb.asm.tree.IincInsnNode) r0;

        i33 = $r50.<org.objectweb.asm.tree.IincInsnNode: int var>;

        $r51 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getLocal(int)>(i33);

        $r52 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r51);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>(i33, $r52);

        goto label70;

     label37:
        $r48 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r49 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r48);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r49);

        goto label70;

     label38:
        $r45 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r46 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r47 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r46, $r45);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r47);

        goto label70;

     label39:
        $r44 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r44);

        goto label70;

     label40:
        $r42 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r43 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r43, $r42);

        goto label70;

     label41:
        goto label70;

     label42:
        $r41 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newOperation(org.objectweb.asm.tree.AbstractInsnNode)>(r0);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r41);

        goto label70;

     label43:
        goto label70;

     label44:
        $r40 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r40);

        goto label70;

     label45:
        $r38 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r38);

        $r39 = r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value returnValue>;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r38, $r39);

        goto label70;

     label46:
        $r36 = r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value returnValue>;

        if $r36 == null goto label70;

        $r143 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r143.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Incompatible return type");

        throw $r143;

     label47:
        $r35 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newOperation(org.objectweb.asm.tree.AbstractInsnNode)>(r0);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r35);

        goto label70;

     label48:
        $r34 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r34);

        goto label70;

     label49:
        $r32 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r33 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r32);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r33);

        goto label70;

     label50:
        $r30 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r31 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>(r0, $r31, $r30);

        goto label70;

     label51:
        $r144 = new java.util.ArrayList;

        specialinvoke $r144.<java.util.ArrayList: void <init>()>();

        $r23 = (org.objectweb.asm.tree.MethodInsnNode) r0;

        r132 = $r23.<org.objectweb.asm.tree.MethodInsnNode: java.lang.String desc>;

        $r24 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>(r132);

        i34 = lengthof $r24;

     label52:
        if i34 <= 0 goto label53;

        $r29 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        interfaceinvoke $r144.<java.util.List: void add(int,java.lang.Object)>(0, $r29);

        $i38 = (int) -1;

        i34 = i34 + $i38;

        goto label52;

     label53:
        $i1 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i1 == 184 goto label54;

        $r28 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        interfaceinvoke $r144.<java.util.List: void add(int,java.lang.Object)>(0, $r28);

     label54:
        $r25 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>(r132);

        $r26 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        if $r25 != $r26 goto label55;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r0, $r144);

        goto label70;

     label55:
        $r27 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r0, $r144);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r27);

        goto label70;

     label56:
        $r145 = new java.util.ArrayList;

        specialinvoke $r145.<java.util.ArrayList: void <init>()>();

        $r16 = (org.objectweb.asm.tree.InvokeDynamicInsnNode) r0;

        r133 = $r16.<org.objectweb.asm.tree.InvokeDynamicInsnNode: java.lang.String desc>;

        $r17 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>(r133);

        i35 = lengthof $r17;

     label57:
        if i35 <= 0 goto label58;

        $r21 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        interfaceinvoke $r145.<java.util.List: void add(int,java.lang.Object)>(0, $r21);

        $i40 = (int) -1;

        i35 = i35 + $i40;

        goto label57;

     label58:
        $r18 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>(r133);

        $r19 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        if $r18 != $r19 goto label59;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r0, $r145);

        goto label70;

     label59:
        $r20 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r0, $r145);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r20);

        goto label70;

     label60:
        $r14 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newOperation(org.objectweb.asm.tree.AbstractInsnNode)>(r0);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r14);

        goto label70;

     label61:
        $r12 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r13 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r12);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r13);

        goto label70;

     label62:
        $r11 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r11);

        goto label70;

     label63:
        $r9 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        $r10 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r9);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r10);

        goto label70;

     label64:
        $r8 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r8);

        goto label70;

     label65:
        $r146 = new java.util.ArrayList;

        specialinvoke $r146.<java.util.ArrayList: void <init>()>();

        $r5 = (org.objectweb.asm.tree.MultiANewArrayInsnNode) r0;

        i36 = $r5.<org.objectweb.asm.tree.MultiANewArrayInsnNode: int dims>;

     label66:
        if i36 <= 0 goto label67;

        $r7 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        interfaceinvoke $r146.<java.util.List: void add(int,java.lang.Object)>(0, $r7);

        $i42 = (int) -1;

        i36 = i36 + $i42;

        goto label66;

     label67:
        $r6 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r0, $r146);

        virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r6);

        goto label70;

     label68:
        $r3 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value pop()>();

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value)>(r0, $r3);

        goto label70;

     label69:
        $r148 = new java.lang.RuntimeException;

        $r147 = new java.lang.StringBuilder;

        specialinvoke $r147.<java.lang.StringBuilder: void <init>()>();

        $r127 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal opcode ");

        $i31 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r148.<java.lang.RuntimeException: void <init>(java.lang.String)>($r129);

        throw $r148;

     label70:
        return;
    }

    public boolean merge(org.objectweb.asm.tree.analysis.Frame, org.objectweb.asm.tree.analysis.Interpreter) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Value[] $r3, $r4, $r8, $r10;
        org.objectweb.asm.tree.analysis.AnalyzerException $r11;
        org.objectweb.asm.tree.analysis.Frame r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.objectweb.asm.tree.analysis.Interpreter r2;
        boolean $z0, z1;
        org.objectweb.asm.tree.analysis.Value $r5, $r6, $r7, $r9;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Frame;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Interpreter;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        $i0 = r1.<org.objectweb.asm.tree.analysis.Frame: int top>;

        if $i1 == $i0 goto label1;

        $r11 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r11.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(null, "Incompatible stack heights");

        throw $r11;

     label1:
        z1 = 0;

        i5 = 0;

     label2:
        $i3 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        $i2 = r0.<org.objectweb.asm.tree.analysis.Frame: int top>;

        $i4 = $i3 + $i2;

        if i5 >= $i4 goto label4;

        $r3 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r6 = $r3[i5];

        $r4 = r1.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r5 = $r4[i5];

        $r7 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value merge(org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value)>($r6, $r5);

        $r8 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r9 = $r8[i5];

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label3;

        $r10 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r10[i5] = $r7;

        z1 = 1;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return z1;
    }

    public boolean merge(org.objectweb.asm.tree.analysis.Frame, boolean[])
    {
        org.objectweb.asm.tree.analysis.Value[] $r2, $r4, $r7, $r9;
        org.objectweb.asm.tree.analysis.Frame r0, r3;
        boolean[] r1;
        org.objectweb.asm.tree.analysis.Value $r5, $r6, $r8;
        int $i0, i1;
        boolean $z0, $z1, z2;

        r0 := @this: org.objectweb.asm.tree.analysis.Frame;

        r3 := @parameter0: org.objectweb.asm.tree.analysis.Frame;

        r1 := @parameter1: boolean[];

        z2 = 0;

        i1 = 0;

     label1:
        $i0 = r0.<org.objectweb.asm.tree.analysis.Frame: int locals>;

        if i1 >= $i0 goto label3;

        $z0 = r1[i1];

        if $z0 != 0 goto label2;

        $r2 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r6 = $r2[i1];

        $r4 = r3.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r5 = $r4[i1];

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

        $r9 = r0.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r7 = r3.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value[] values>;

        $r8 = $r7[i1];

        $r9[i1] = $r8;

        z2 = 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z2;
    }

    public java.lang.String toString()
    {
        org.objectweb.asm.tree.analysis.Frame r1;
        org.objectweb.asm.tree.analysis.Value $r3, $r5;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2, i3;
        java.lang.String $r2, $r4;

        r1 := @this: org.objectweb.asm.tree.analysis.Frame;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Frame: int getLocals()>();

        if i2 >= $i0 goto label2;

        $r5 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getLocal(int)>(i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i3 = 0;

     label3:
        $i1 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Frame: int getStackSize()>();

        if i3 >= $i1 goto label4;

        $r3 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getStack(int)>(i3);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
