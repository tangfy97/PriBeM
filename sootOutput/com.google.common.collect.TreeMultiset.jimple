public final class com.google.common.collect.TreeMultiset extends com.google.common.collect.AbstractMapBasedMultiset
{
    private static final long serialVersionUID;

    public static com.google.common.collect.TreeMultiset create()
    {
        com.google.common.collect.TreeMultiset $r0;

        $r0 = new com.google.common.collect.TreeMultiset;

        specialinvoke $r0.<com.google.common.collect.TreeMultiset: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.TreeMultiset create(java.util.Comparator)
    {
        com.google.common.collect.TreeMultiset $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new com.google.common.collect.TreeMultiset;

        specialinvoke $r0.<com.google.common.collect.TreeMultiset: void <init>(java.util.Comparator)>(r1);

        return $r0;
    }

    public static com.google.common.collect.TreeMultiset create(java.lang.Iterable)
    {
        com.google.common.collect.TreeMultiset $r0;
        java.lang.Iterable r1;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset create()>();

        staticinvoke <com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r0, r1);

        return $r0;
    }

    private void <init>()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.TreeMap $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: void <init>(java.util.Map)>($r1);

        return;
    }

    private void <init>(java.util.Comparator)
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.TreeMap $r1;
        java.util.Comparator r2;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r2 := @parameter0: java.util.Comparator;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>(r2);

        specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: void <init>(java.util.Map)>($r1);

        return;
    }

    public java.util.SortedSet elementSet()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Set $r1;
        java.util.SortedSet $r2;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Set elementSet()>();

        $r2 = (java.util.SortedSet) $r1;

        return $r2;
    }

    public int count(java.lang.Object)
    {
        com.google.common.collect.TreeMultiset r0;
        int $i0;
        java.lang.Object r1;
        java.lang.ClassCastException $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

     label1:
        $i0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>(r1);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        return 0;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    java.util.Set createElementSet()
    {
        com.google.common.collect.TreeMultiset r1;
        java.util.Map $r2;
        com.google.common.collect.TreeMultiset$SortedMapBasedElementSet $r0;
        java.util.SortedMap $r3;

        r1 := @this: com.google.common.collect.TreeMultiset;

        $r0 = new com.google.common.collect.TreeMultiset$SortedMapBasedElementSet;

        $r2 = virtualinvoke r1.<com.google.common.collect.TreeMultiset: java.util.Map backingMap()>();

        $r3 = (java.util.SortedMap) $r2;

        specialinvoke $r0.<com.google.common.collect.TreeMultiset$SortedMapBasedElementSet: void <init>(com.google.common.collect.TreeMultiset,java.util.SortedMap)>(r1, $r3);

        return $r0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.common.collect.TreeMultiset r1;
        java.util.SortedSet $r2;
        java.io.ObjectOutputStream r0;
        java.util.Comparator $r3;

        r1 := @this: com.google.common.collect.TreeMultiset;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = virtualinvoke r1.<com.google.common.collect.TreeMultiset: java.util.SortedSet elementSet()>();

        $r3 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Comparator comparator()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        staticinvoke <com.google.common.collect.Serialization: void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)>(r1, r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.common.collect.TreeMultiset r3;
        java.util.TreeMap $r4;
        java.io.ObjectInputStream r0;
        java.lang.Object $r1;
        java.util.Comparator r2;

        r3 := @this: com.google.common.collect.TreeMultiset;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2 = (java.util.Comparator) $r1;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>(java.util.Comparator)>(r2);

        virtualinvoke r3.<com.google.common.collect.TreeMultiset: void setBackingMap(java.util.Map)>($r4);

        staticinvoke <com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)>(r3, r0);

        return;
    }

    public volatile int setCount(java.lang.Object, int)
    {
        com.google.common.collect.TreeMultiset r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int setCount(java.lang.Object,int)>(r1, i0);

        return $i1;
    }

    public volatile int remove(java.lang.Object, int)
    {
        com.google.common.collect.TreeMultiset r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int remove(java.lang.Object,int)>(r1, i0);

        return $i1;
    }

    public volatile int add(java.lang.Object, int)
    {
        com.google.common.collect.TreeMultiset r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int add(java.lang.Object,int)>(r1, i0);

        return $i1;
    }

    public volatile boolean contains(java.lang.Object)
    {
        com.google.common.collect.TreeMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Iterator iterator()>();

        return $r1;
    }

    public volatile int size()
    {
        com.google.common.collect.TreeMultiset r0;
        int $i0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $i0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int size()>();

        return $i0;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Set $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Set entrySet()>();

        return $r1;
    }

    public volatile java.lang.String toString()
    {
        com.google.common.collect.TreeMultiset r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: java.lang.String toString()>();

        return $r1;
    }

    public volatile int hashCode()
    {
        com.google.common.collect.TreeMultiset r0;
        int $i0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $i0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int hashCode()>();

        return $i0;
    }

    public volatile boolean equals(java.lang.Object)
    {
        com.google.common.collect.TreeMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile java.util.Set elementSet()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.SortedSet $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.SortedSet elementSet()>();

        return $r1;
    }

    public volatile void clear()
    {
        com.google.common.collect.TreeMultiset r0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: void clear()>();

        return;
    }

    public volatile boolean retainAll(java.util.Collection)
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean removeAll(java.util.Collection)
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean addAll(java.util.Collection)
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean setCount(java.lang.Object, int, int)
    {
        com.google.common.collect.TreeMultiset r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean setCount(java.lang.Object,int,int)>(r1, i0, i1);

        return $z0;
    }

    public volatile boolean remove(java.lang.Object)
    {
        com.google.common.collect.TreeMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean add(java.lang.Object)
    {
        com.google.common.collect.TreeMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean isEmpty()
    {
        com.google.common.collect.TreeMultiset r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: boolean isEmpty()>();

        return $z0;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.TreeMultiset: long serialVersionUID> = 0L;

        return;
    }
}
