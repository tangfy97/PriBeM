public abstract class org.apache.jena.riot.system.JenaWriterBase extends java.lang.Object implements com.hp.hpl.jena.rdf.model.RDFWriter
{
    protected java.util.Map writerPropertyMap;
    private com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler;

    public void <init>()
    {
        org.apache.jena.riot.system.JenaWriterBase r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.jena.riot.system.JenaWriterBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.system.JenaWriterBase: java.util.Map writerPropertyMap> = $r1;

        r0.<org.apache.jena.riot.system.JenaWriterBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = null;

        return;
    }

    public com.hp.hpl.jena.rdf.model.RDFErrorHandler setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r1, r2;
        org.apache.jena.riot.system.JenaWriterBase r0;

        r0 := @this: org.apache.jena.riot.system.JenaWriterBase;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        r1 = r0.<org.apache.jena.riot.system.JenaWriterBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        r0.<org.apache.jena.riot.system.JenaWriterBase: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = r2;

        return r1;
    }

    public java.lang.Object setProperty(java.lang.String, java.lang.Object)
    {
        org.apache.jena.riot.system.JenaWriterBase r0;
        java.util.HashMap $r7;
        java.util.Map $r2, $r3, $r6;
        java.lang.String $r1, $r5, $r8, $r13, r14;
        boolean $z0;
        java.lang.Object $r4, r15;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.jena.riot.system.JenaWriterBase;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.Object;

        $z0 = r15 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProperty: Property for \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a string");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r13);

        r15 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

     label1:
        $r1 = virtualinvoke r0.<org.apache.jena.riot.system.JenaWriterBase: java.lang.String absolutePropName(java.lang.String)>(r14);

        $r2 = r0.<org.apache.jena.riot.system.JenaWriterBase: java.util.Map writerPropertyMap>;

        if $r2 != null goto label2;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.system.JenaWriterBase: java.util.Map writerPropertyMap> = $r7;

     label2:
        $r3 = r0.<org.apache.jena.riot.system.JenaWriterBase: java.util.Map writerPropertyMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (java.lang.String) $r4;

        $r6 = r0.<org.apache.jena.riot.system.JenaWriterBase: java.util.Map writerPropertyMap>;

        $r5 = (java.lang.String) r15;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        return $r8;
    }

    protected java.lang.String absolutePropName(java.lang.String)
    {
        org.apache.jena.riot.system.JenaWriterBase r1;
        java.lang.String r0;

        r1 := @this: org.apache.jena.riot.system.JenaWriterBase;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public void write(com.hp.hpl.jena.rdf.model.Model, java.io.Writer, java.lang.String)
    {
        org.apache.jena.riot.system.JenaWriterBase r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.io.Writer r3;
        java.lang.String r4;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: org.apache.jena.riot.system.JenaWriterBase;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.io.Writer;

        r4 := @parameter2: java.lang.String;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        virtualinvoke r0.<org.apache.jena.riot.system.JenaWriterBase: void write(com.hp.hpl.jena.graph.Graph,java.io.Writer,java.lang.String)>($r2, r3, r4);

        return;
    }

    public void write(com.hp.hpl.jena.rdf.model.Model, java.io.OutputStream, java.lang.String)
    {
        java.io.OutputStream r1;
        org.apache.jena.riot.system.JenaWriterBase r4;
        java.io.BufferedWriter $r3;
        java.lang.Exception $r8;
        java.nio.charset.CharsetEncoder $r2;
        com.hp.hpl.jena.rdf.model.Model r5;
        java.io.OutputStreamWriter $r0;
        java.lang.String r7;
        com.hp.hpl.jena.graph.Graph $r6;

        r4 := @this: org.apache.jena.riot.system.JenaWriterBase;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.io.OutputStream;

        r7 := @parameter2: java.lang.String;

        $r0 = new java.io.OutputStreamWriter;

        $r2 = staticinvoke <org.apache.jena.atlas.lib.Chars: java.nio.charset.CharsetEncoder createEncoder()>();

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>(r1, $r2);

        $r3 = new java.io.BufferedWriter;

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r0, 8192);

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        virtualinvoke r4.<org.apache.jena.riot.system.JenaWriterBase: void write(com.hp.hpl.jena.graph.Graph,java.io.Writer,java.lang.String)>($r6, $r3, r7);

     label1:
        virtualinvoke $r3.<java.io.Writer: void flush()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected abstract void write(com.hp.hpl.jena.graph.Graph, java.io.Writer, java.lang.String);
}
