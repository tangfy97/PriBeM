public class org.apache.solr.client.solrj.impl.CloudSolrServer extends org.apache.solr.client.solrj.SolrServer
{
    private volatile org.apache.solr.common.cloud.ZkStateReader zkStateReader;
    private java.lang.String zkHost;
    private int zkConnectTimeout;
    private int zkClientTimeout;
    private volatile java.lang.String defaultCollection;
    private org.apache.solr.client.solrj.impl.LBHttpSolrServer lbServer;
    private org.apache.http.client.HttpClient myClient;
    java.util.Random rand;
    private java.lang.Object cachLock;
    private java.util.Map urlLists;
    private java.util.Map leaderUrlLists;
    private java.util.Map replicasLists;
    private volatile int lastClusterStateHashCode;
    private final boolean updatesToLeaders;

    public void <init>(java.lang.String) throws java.net.MalformedURLException
    {
        java.util.Random $r1;
        java.util.HashMap $r3, $r4, $r5;
        java.lang.String[] $r9;
        org.apache.solr.client.solrj.impl.LBHttpSolrServer $r8;
        org.apache.http.client.HttpClient $r7, $r10;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        java.lang.Object $r2;
        java.lang.String r6;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        r6 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrServer: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkConnectTimeout> = 10000;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkClientTimeout> = 10000;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Random rand> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.Object cachLock> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map urlLists> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map leaderUrlLists> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map replicasLists> = $r5;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.String zkHost> = r6;

        $r7 = staticinvoke <org.apache.solr.client.solrj.impl.HttpClientUtil: org.apache.http.client.HttpClient createClient(org.apache.solr.common.params.SolrParams)>(null);

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.http.client.HttpClient myClient> = $r7;

        $r8 = new org.apache.solr.client.solrj.impl.LBHttpSolrServer;

        $r10 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.http.client.HttpClient myClient>;

        $r9 = newarray (java.lang.String)[0];

        specialinvoke $r8.<org.apache.solr.client.solrj.impl.LBHttpSolrServer: void <init>(org.apache.http.client.HttpClient,java.lang.String[])>($r10, $r9);

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.client.solrj.impl.LBHttpSolrServer lbServer> = $r8;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: boolean updatesToLeaders> = 1;

        return;
    }

    public void <init>(java.lang.String, org.apache.solr.client.solrj.impl.LBHttpSolrServer)
    {
        java.util.Random $r1;
        java.util.HashMap $r3, $r4, $r5;
        org.apache.solr.client.solrj.impl.LBHttpSolrServer r7;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        java.lang.Object $r2;
        java.lang.String r6;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: org.apache.solr.client.solrj.impl.LBHttpSolrServer;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrServer: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkConnectTimeout> = 10000;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkClientTimeout> = 10000;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Random rand> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.Object cachLock> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map urlLists> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map leaderUrlLists> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map replicasLists> = $r5;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.String zkHost> = r6;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.client.solrj.impl.LBHttpSolrServer lbServer> = r7;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: boolean updatesToLeaders> = 1;

        return;
    }

    public void <init>(java.lang.String, org.apache.solr.client.solrj.impl.LBHttpSolrServer, boolean)
    {
        java.util.Random $r1;
        java.util.HashMap $r3, $r4, $r5;
        org.apache.solr.client.solrj.impl.LBHttpSolrServer r7;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        java.lang.Object $r2;
        java.lang.String r6;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: org.apache.solr.client.solrj.impl.LBHttpSolrServer;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrServer: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkConnectTimeout> = 10000;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkClientTimeout> = 10000;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Random rand> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.Object cachLock> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map urlLists> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map leaderUrlLists> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map replicasLists> = $r5;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.String zkHost> = r6;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.client.solrj.impl.LBHttpSolrServer lbServer> = r7;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: boolean updatesToLeaders> = z0;

        return;
    }

    public org.apache.solr.common.cloud.ZkStateReader getZkStateReader()
    {
        org.apache.solr.common.cloud.ZkStateReader $r1;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        return $r1;
    }

    public void setDefaultCollection(java.lang.String)
    {
        java.lang.String r1;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.String defaultCollection> = r1;

        return;
    }

    public void setZkConnectTimeout(int)
    {
        int i0;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        i0 := @parameter0: int;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkConnectTimeout> = i0;

        return;
    }

    public void setZkClientTimeout(int)
    {
        int i0;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        i0 := @parameter0: int;

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkClientTimeout> = i0;

        return;
    }

    public void connect()
    {
        java.lang.Throwable $r5;
        java.util.concurrent.TimeoutException $r6;
        java.lang.Thread $r16;
        int $i0, $i1;
        java.lang.String $r4;
        org.apache.solr.common.cloud.ZkStateReader $r1, $r2, $r3;
        org.apache.zookeeper.KeeperException $r12;
        org.apache.solr.common.cloud.ZooKeeperException $r7, $r10, $r13, $r17;
        java.io.IOException $r9;
        org.apache.solr.common.SolrException$ErrorCode $r8, $r11, $r14, $r18;
        java.lang.InterruptedException $r15;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        if $r1 != null goto label12;

        entermonitor r0;

     label01:
        $r2 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        if $r2 != null goto label08;

     label02:
        $r3 = new org.apache.solr.common.cloud.ZkStateReader;

        $r4 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.String zkHost>;

        $i1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkConnectTimeout>;

        $i0 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int zkClientTimeout>;

        specialinvoke $r3.<org.apache.solr.common.cloud.ZkStateReader: void <init>(java.lang.String,int,int)>($r4, $i1, $i0);

        virtualinvoke $r3.<org.apache.solr.common.cloud.ZkStateReader: void createClusterStateWatchersAndUpdate()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader> = $r3;

     label03:
        goto label08;

     label04:
        $r15 := @caughtexception;

        $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r16.<java.lang.Thread: void interrupt()>();

        $r17 = new org.apache.solr.common.cloud.ZooKeeperException;

        $r18 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r17.<org.apache.solr.common.cloud.ZooKeeperException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r18, "", $r15);

        throw $r17;

     label05:
        $r12 := @caughtexception;

        $r13 = new org.apache.solr.common.cloud.ZooKeeperException;

        $r14 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r13.<org.apache.solr.common.cloud.ZooKeeperException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r14, "", $r12);

        throw $r13;

     label06:
        $r9 := @caughtexception;

        $r10 = new org.apache.solr.common.cloud.ZooKeeperException;

        $r11 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r10.<org.apache.solr.common.cloud.ZooKeeperException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r11, "", $r9);

        throw $r10;

     label07:
        $r6 := @caughtexception;

        $r7 = new org.apache.solr.common.cloud.ZooKeeperException;

        $r8 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r7.<org.apache.solr.common.cloud.ZooKeeperException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r8, "", $r6);

        throw $r7;

     label08:
        exitmonitor r0;

     label09:
        goto label12;

     label10:
        $r5 := @caughtexception;

        exitmonitor r0;

     label11:
        throw $r5;

     label12:
        return;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch org.apache.zookeeper.KeeperException from label02 to label03 with label05;
        catch java.io.IOException from label02 to label03 with label06;
        catch java.util.concurrent.TimeoutException from label02 to label03 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.solr.common.util.NamedList request(org.apache.solr.client.solrj.SolrRequest) throws org.apache.solr.client.solrj.SolrServerException, java.io.IOException
    {
        org.apache.solr.common.cloud.ClusterState $r2;
        java.util.Map $r34, $r36, $r38, $r45, $r46, $r47, $r50;
        org.apache.solr.common.cloud.ZkStateReader $r1;
        org.apache.solr.client.solrj.impl.LBHttpSolrServer$Rsp $r10;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r20, $r28, $r65, $r66, $r67, $r71, $r73, $r74;
        org.apache.solr.client.solrj.SolrRequest r3;
        org.apache.solr.common.cloud.ZkCoreNodeProps $r55;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        org.apache.solr.client.solrj.impl.LBHttpSolrServer$Req $r8;
        java.util.Random $r41, $r43;
        org.apache.solr.common.params.SolrParams $r81, r82;
        org.apache.solr.common.SolrException $r70;
        java.util.Collection $r51, $r63, $r93;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        java.lang.Object $r12, $r27, $r33, $r35, $r37, $r39, $r48, $r53, $r59, $r62, $r69;
        org.apache.solr.client.solrj.SolrServerException $r64, $r76;
        org.apache.solr.common.params.ModifiableSolrParams $r77;
        java.util.Set $r6, $r25, $r32;
        java.lang.Throwable $r79;
        java.util.ArrayList $r4, $r40, $r42, $r44, $r78, r80, r83, $r92;
        java.lang.String $r5, $r15, $r18, $r19, $r21, $r22, $r23, $r24, $r56, $r57, $r58, $r60, $r61, $r68, $r75, r84, r85, r86, r87;
        org.apache.solr.common.cloud.Slice r49;
        org.apache.solr.common.util.NamedList $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10, $z11, z12, z13, z14, z15, z16, z17, z18, z19;
        org.apache.solr.common.cloud.Replica r54;
        java.util.List r88, r89, r90;
        java.util.HashMap $r30, $r91;
        org.apache.solr.client.solrj.impl.LBHttpSolrServer $r9;
        java.util.Iterator $r7, $r26, $r29, $r31, $r52, $r94;
        org.apache.solr.common.SolrException$ErrorCode $r72;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        r3 := @parameter0: org.apache.solr.client.solrj.SolrRequest;

        virtualinvoke r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: void connect()>();

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState getClusterState()>();

        z8 = 0;

        z19 = 0;

        z18 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

        z14 = 0;

        z13 = 0;

        z12 = 0;

        r80 = null;

        $z0 = r3 instanceof org.apache.solr.client.solrj.request.IsUpdateRequest;

        if $z0 == 0 goto label01;

        $z7 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: boolean updatesToLeaders>;

        if $z7 == 0 goto label01;

        z8 = 1;

        z19 = 1;

        z18 = 1;

        z17 = 1;

        z16 = 1;

        z15 = 1;

        z14 = 1;

        z13 = 1;

        z12 = 1;

        $r78 = new java.util.ArrayList;

        specialinvoke $r78.<java.util.ArrayList: void <init>()>();

        r80 = $r78;

     label01:
        $r81 = virtualinvoke r3.<org.apache.solr.client.solrj.SolrRequest: org.apache.solr.common.params.SolrParams getParams()>();

        r82 = $r81;

        if $r81 != null goto label02;

        $r77 = new org.apache.solr.common.params.ModifiableSolrParams;

        specialinvoke $r77.<org.apache.solr.common.params.ModifiableSolrParams: void <init>()>();

        r82 = $r77;

     label02:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r83 = $r4;

        $r5 = virtualinvoke r3.<org.apache.solr.client.solrj.SolrRequest: java.lang.String getPath()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("/admin/collections");

        if $z1 != 0 goto label03;

        $r22 = virtualinvoke r3.<org.apache.solr.client.solrj.SolrRequest: java.lang.String getPath()>();

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("/admin/cores");

        if $z2 == 0 goto label06;

     label03:
        $r6 = virtualinvoke $r2.<org.apache.solr.common.cloud.ClusterState: java.util.Set getLiveNodes()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z9 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label05;

        $r12 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r84 = (java.lang.String) $r12;

        $i0 = virtualinvoke r84.<java.lang.String: int indexOf(java.lang.String)>("_");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r15 = virtualinvoke r84.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r18 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r84, "UTF-8");

        $i1 = $i0 + 1;

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>($i1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label04;

     label05:
        goto label36;

     label06:
        $r23 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.String defaultCollection>;

        $r24 = virtualinvoke r82.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String,java.lang.String)>("collection", $r23);

        if $r24 != null goto label07;

        $r76 = new org.apache.solr.client.solrj.SolrServerException;

        specialinvoke $r76.<org.apache.solr.client.solrj.SolrServerException: void <init>(java.lang.String)>("No collection param specified on request and no default collection has been set.");

        throw $r76;

     label07:
        $r25 = specialinvoke r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Set getCollectionList(org.apache.solr.common.cloud.ClusterState,java.lang.String)>($r2, $r24);

        $i2 = interfaceinvoke $r25.<java.util.Set: int size()>();

        if $i2 != 0 goto label08;

        $r70 = new org.apache.solr.common.SolrException;

        $r72 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find collection: ");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r70.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r72, $r75);

        throw $r70;

     label08:
        $r26 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r85 = (java.lang.String) $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

        i12 = 0;

     label09:
        $i3 = interfaceinvoke $r25.<java.util.Set: int size()>();

        if i12 >= $i3 goto label11;

        $r69 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r86 = (java.lang.String) $r69;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r86);

        $i10 = interfaceinvoke $r25.<java.util.Set: int size()>();

        $i11 = $i10 - 1;

        if i12 >= $i11 goto label10;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label10:
        i12 = i12 + 1;

        goto label09;

     label11:
        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>()>();

        $r31 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r62 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r87 = (java.lang.String) $r62;

        $r63 = virtualinvoke $r2.<org.apache.solr.common.cloud.ClusterState: java.util.Collection getActiveSlices(java.lang.String)>(r87);

        if $r63 != null goto label13;

        $r64 = new org.apache.solr.client.solrj.SolrServerException;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find collection:");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r87);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<org.apache.solr.client.solrj.SolrServerException: void <init>(java.lang.String)>($r68);

        throw $r64;

     label13:
        staticinvoke <org.apache.solr.client.solrj.util.ClientUtils: void addSlices(java.util.Map,java.lang.String,java.util.Collection,boolean)>($r30, r87, $r63, 1);

        goto label12;

     label14:
        $r32 = virtualinvoke $r2.<org.apache.solr.common.cloud.ClusterState: java.util.Set getLiveNodes()>();

        $r33 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.lang.Object cachLock>;

        entermonitor $r33;

     label15:
        $r34 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map leaderUrlLists>;

        $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r85);

        r88 = (java.util.List) $r35;

        $r36 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map urlLists>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r85);

        r89 = (java.util.List) $r37;

        $r38 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map replicasLists>;

        $r39 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>(r85);

        r90 = (java.util.List) $r39;

        if z17 == 0 goto label16;

        if r88 == null goto label18;

     label16:
        if z15 != 0 goto label17;

        if r89 == null goto label18;

     label17:
        $i4 = virtualinvoke $r2.<org.apache.solr.common.cloud.ClusterState: int hashCode()>();

        $i5 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int lastClusterStateHashCode>;

        if $i4 == $i5 goto label29;

     label18:
        $r91 = new java.util.HashMap;

        specialinvoke $r91.<java.util.HashMap: void <init>()>();

        $r92 = new java.util.ArrayList;

        specialinvoke $r92.<java.util.ArrayList: void <init>()>();

        $r93 = interfaceinvoke $r30.<java.util.Map: java.util.Collection values()>();

        $r94 = interfaceinvoke $r93.<java.util.Collection: java.util.Iterator iterator()>();

     label19:
        $z10 = interfaceinvoke $r94.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label26;

        $r48 = interfaceinvoke $r94.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.solr.common.cloud.Slice) $r48;

        $r50 = virtualinvoke r49.<org.apache.solr.common.cloud.Slice: java.util.Map getReplicasMap()>();

        $r51 = interfaceinvoke $r50.<java.util.Map: java.util.Collection values()>();

        $r52 = interfaceinvoke $r51.<java.util.Collection: java.util.Iterator iterator()>();

     label20:
        $z11 = interfaceinvoke $r52.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label25;

        $r53 = interfaceinvoke $r52.<java.util.Iterator: java.lang.Object next()>();

        r54 = (org.apache.solr.common.cloud.Replica) $r53;

        $r55 = new org.apache.solr.common.cloud.ZkCoreNodeProps;

        specialinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: void <init>(org.apache.solr.common.cloud.ZkNodeProps)>(r54);

        $r56 = virtualinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getNodeName()>();

        $r57 = virtualinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getNodeName()>();

        $z4 = interfaceinvoke $r32.<java.util.Set: boolean contains(java.lang.Object)>($r57);

        if $z4 == 0 goto label20;

        $r58 = virtualinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getState()>();

        $z5 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>("active");

        if $z5 != 0 goto label21;

        goto label20;

     label21:
        $r59 = interfaceinvoke $r91.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, r54);

        if $r59 != null goto label24;

        if z16 == 0 goto label22;

        if z13 == 0 goto label23;

        $z6 = virtualinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: boolean isLeader()>();

        if $z6 == 0 goto label23;

     label22:
        $r60 = virtualinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getCoreUrl()>();

        interfaceinvoke $r92.<java.util.List: boolean add(java.lang.Object)>($r60);

        goto label24;

     label23:
        if z14 == 0 goto label24;

        $r61 = virtualinvoke $r55.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getCoreUrl()>();

        interfaceinvoke r80.<java.util.List: boolean add(java.lang.Object)>($r61);

     label24:
        goto label20;

     label25:
        goto label19;

     label26:
        if z12 == 0 goto label27;

        $r46 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map leaderUrlLists>;

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r85, $r92);

        r88 = $r92;

        $r47 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map replicasLists>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r85, r80);

        r90 = r80;

        goto label28;

     label27:
        $r45 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map urlLists>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r85, $r92);

        r89 = $r92;

     label28:
        $i9 = virtualinvoke $r2.<org.apache.solr.common.cloud.ClusterState: int hashCode()>();

        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: int lastClusterStateHashCode> = $i9;

     label29:
        if z18 == 0 goto label30;

        $r44 = new java.util.ArrayList;

        $i8 = interfaceinvoke r88.<java.util.List: int size()>();

        specialinvoke $r44.<java.util.ArrayList: void <init>(int)>($i8);

        r83 = $r44;

        interfaceinvoke $r44.<java.util.List: boolean addAll(java.util.Collection)>(r88);

        goto label31;

     label30:
        $r40 = new java.util.ArrayList;

        $i6 = interfaceinvoke r89.<java.util.List: int size()>();

        specialinvoke $r40.<java.util.ArrayList: void <init>(int)>($i6);

        r83 = $r40;

        interfaceinvoke $r40.<java.util.List: boolean addAll(java.util.Collection)>(r89);

     label31:
        $r41 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Random rand>;

        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>(r83, $r41);

        if z19 == 0 goto label32;

        $r42 = new java.util.ArrayList;

        $i7 = interfaceinvoke r90.<java.util.List: int size()>();

        specialinvoke $r42.<java.util.ArrayList: void <init>(int)>($i7);

        virtualinvoke $r42.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r90);

        $r43 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Random rand>;

        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>($r42, $r43);

        interfaceinvoke r83.<java.util.List: boolean addAll(java.util.Collection)>($r42);

     label32:
        exitmonitor $r33;

     label33:
        goto label36;

     label34:
        $r79 := @caughtexception;

        exitmonitor $r33;

     label35:
        throw $r79;

     label36:
        $r8 = new org.apache.solr.client.solrj.impl.LBHttpSolrServer$Req;

        specialinvoke $r8.<org.apache.solr.client.solrj.impl.LBHttpSolrServer$Req: void <init>(org.apache.solr.client.solrj.SolrRequest,java.util.List)>(r3, r83);

        $r9 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.client.solrj.impl.LBHttpSolrServer lbServer>;

        $r10 = virtualinvoke $r9.<org.apache.solr.client.solrj.impl.LBHttpSolrServer: org.apache.solr.client.solrj.impl.LBHttpSolrServer$Rsp request(org.apache.solr.client.solrj.impl.LBHttpSolrServer$Req)>($r8);

        $r11 = virtualinvoke $r10.<org.apache.solr.client.solrj.impl.LBHttpSolrServer$Rsp: org.apache.solr.common.util.NamedList getResponse()>();

        return $r11;

        catch java.lang.Throwable from label15 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
    }

    private java.util.Set getCollectionList(org.apache.solr.common.cloud.ClusterState, java.lang.String)
    {
        org.apache.solr.common.cloud.ClusterState r6;
        java.util.HashSet $r2;
        org.apache.solr.common.SolrException $r12;
        java.lang.String r0, r5, $r11, $r17;
        boolean $z0, $z1;
        org.apache.solr.common.cloud.ZkStateReader $r9;
        java.util.Iterator $r3;
        org.apache.solr.common.cloud.Aliases $r10;
        java.util.Set $r7;
        org.apache.solr.common.SolrException$ErrorCode $r14;
        java.util.List $r1, $r18;
        org.apache.solr.client.solrj.impl.CloudSolrServer r8;
        java.lang.Object $r4;
        java.lang.StringBuilder $r13, $r15, $r16;

        r8 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        r6 := @parameter0: org.apache.solr.common.cloud.ClusterState;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.solr.common.util.StrUtils: java.util.List splitSmart(java.lang.String,java.lang.String,boolean)>(r0, ",", 1);

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r7 = virtualinvoke r6.<org.apache.solr.common.cloud.ClusterState: java.util.Set getCollections()>();

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label3;

        $r9 = r8.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        $r10 = virtualinvoke $r9.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Aliases getAliases()>();

        $r11 = virtualinvoke $r10.<org.apache.solr.common.cloud.Aliases: java.lang.String getCollectionAlias(java.lang.String)>(r5);

        if $r11 == null goto label2;

        $r18 = staticinvoke <org.apache.solr.common.util.StrUtils: java.util.List splitSmart(java.lang.String,java.lang.String,boolean)>($r11, ",", 1);

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r18);

        goto label1;

     label2:
        $r12 = new org.apache.solr.common.SolrException;

        $r14 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collection not found: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r14, $r17);

        throw $r12;

     label3:
        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r5);

        goto label1;

     label4:
        return $r2;
    }

    public void shutdown()
    {
        java.lang.Throwable $r7;
        org.apache.solr.common.cloud.ZkStateReader $r1, $r5, $r6;
        org.apache.http.conn.ClientConnectionManager $r4;
        org.apache.http.client.HttpClient $r2, $r3;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        if $r1 == null goto label6;

        entermonitor r0;

     label1:
        $r5 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        if $r5 == null goto label2;

        $r6 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader>;

        virtualinvoke $r6.<org.apache.solr.common.cloud.ZkStateReader: void close()>();

     label2:
        r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.common.cloud.ZkStateReader zkStateReader> = null;

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r7;

     label6:
        $r2 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.http.client.HttpClient myClient>;

        if $r2 == null goto label7;

        $r3 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.http.client.HttpClient myClient>;

        $r4 = interfaceinvoke $r3.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r4.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.solr.client.solrj.impl.LBHttpSolrServer getLbServer()
    {
        org.apache.solr.client.solrj.impl.LBHttpSolrServer $r1;
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: org.apache.solr.client.solrj.impl.LBHttpSolrServer lbServer>;

        return $r1;
    }

    java.util.Map getUrlLists()
    {
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map urlLists>;

        return $r1;
    }

    java.util.Map getLeaderUrlLists()
    {
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map leaderUrlLists>;

        return $r1;
    }

    java.util.Map getReplicasLists()
    {
        org.apache.solr.client.solrj.impl.CloudSolrServer r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.client.solrj.impl.CloudSolrServer;

        $r1 = r0.<org.apache.solr.client.solrj.impl.CloudSolrServer: java.util.Map replicasLists>;

        return $r1;
    }
}
