public class ucar.nc2.iosp.LayoutTiled extends java.lang.Object implements ucar.nc2.iosp.Layout
{
    private ucar.ma2.Section want;
    private int[] chunkSize;
    private int elemSize;
    private long startSrcPos;
    private ucar.nc2.iosp.LayoutTiled$DataChunkIterator chunkIterator;
    private ucar.nc2.iosp.IndexChunkerTiled index;
    private long totalNelems;
    private long totalNelemsDone;
    private boolean debug;
    private boolean debugNext;
    private ucar.nc2.iosp.Layout$Chunk next;

    public void <init>(ucar.nc2.iosp.LayoutTiled$DataChunkIterator, int[], int, ucar.ma2.Section) throws ucar.ma2.InvalidRangeException, java.io.IOException
    {
        ucar.ma2.Section r3, $r4;
        int[] r2;
        int i0;
        ucar.nc2.iosp.LayoutTiled r0;
        long $l1;
        ucar.nc2.iosp.LayoutTiled$DataChunkIterator r1;

        r0 := @this: ucar.nc2.iosp.LayoutTiled;

        r1 := @parameter0: ucar.nc2.iosp.LayoutTiled$DataChunkIterator;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.IndexChunkerTiled index> = null;

        r0.<ucar.nc2.iosp.LayoutTiled: boolean debug> = 0;

        r0.<ucar.nc2.iosp.LayoutTiled: boolean debugNext> = 0;

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.Layout$Chunk next> = null;

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.LayoutTiled$DataChunkIterator chunkIterator> = r1;

        r0.<ucar.nc2.iosp.LayoutTiled: int[] chunkSize> = r2;

        r0.<ucar.nc2.iosp.LayoutTiled: int elemSize> = i0;

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.ma2.Section want> = r3;

        $r4 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.ma2.Section want>;

        $l1 = virtualinvoke $r4.<ucar.ma2.Section: long computeSize()>();

        r0.<ucar.nc2.iosp.LayoutTiled: long totalNelems> = $l1;

        r0.<ucar.nc2.iosp.LayoutTiled: long totalNelemsDone> = 0L;

        return;
    }

    public long getTotalNelems()
    {
        ucar.nc2.iosp.LayoutTiled r0;
        long $l0;

        r0 := @this: ucar.nc2.iosp.LayoutTiled;

        $l0 = r0.<ucar.nc2.iosp.LayoutTiled: long totalNelems>;

        return $l0;
    }

    public int getElemSize()
    {
        int $i0;
        ucar.nc2.iosp.LayoutTiled r0;

        r0 := @this: ucar.nc2.iosp.LayoutTiled;

        $i0 = r0.<ucar.nc2.iosp.LayoutTiled: int elemSize>;

        return $i0;
    }

    public boolean hasNext()
    {
        java.lang.IllegalStateException $r27;
        ucar.nc2.iosp.IndexChunkerTiled $r1, $r10, $r19, $r26;
        byte $b2;
        int[] $r5, $r6;
        ucar.nc2.iosp.LayoutTiled r0;
        ucar.nc2.iosp.LayoutTiled$DataChunk $r3;
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.iosp.IndexChunker$Chunk $r11;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r25;
        ucar.ma2.Section $r7, $r9, $r24;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14;
        int $i5, $i10, $i15;
        java.lang.String $r18;
        java.io.PrintStream $r13;
        java.io.IOException $r22;
        ucar.ma2.InvalidRangeException $r20;
        ucar.nc2.iosp.LayoutTiled$DataChunkIterator $r2, $r23;

        r0 := @this: ucar.nc2.iosp.LayoutTiled;

        $l1 = r0.<ucar.nc2.iosp.LayoutTiled: long totalNelemsDone>;

        $l0 = r0.<ucar.nc2.iosp.LayoutTiled: long totalNelems>;

        $b2 = $l1 cmp $l0;

        $i15 = (int) $b2;

        if $i15 < 0 goto label01;

        return 0;

     label01:
        $r1 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.IndexChunkerTiled index>;

        if $r1 == null goto label02;

        $r19 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.IndexChunkerTiled index>;

        $z2 = virtualinvoke $r19.<ucar.nc2.iosp.IndexChunkerTiled: boolean hasNext()>();

        if $z2 != 0 goto label13;

     label02:
        $r23 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.LayoutTiled$DataChunkIterator chunkIterator>;

        $z3 = interfaceinvoke $r23.<ucar.nc2.iosp.LayoutTiled$DataChunkIterator: boolean hasNext()>();

        if $z3 != 0 goto label04;

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.Layout$Chunk next> = null;

     label03:
        return 0;

     label04:
        $r2 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.LayoutTiled$DataChunkIterator chunkIterator>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.iosp.LayoutTiled$DataChunkIterator: ucar.nc2.iosp.LayoutTiled$DataChunk next()>();

     label05:
        goto label08;

     label06:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.Layout$Chunk next> = null;

     label07:
        return 0;

     label08:
        $r24 = new ucar.ma2.Section;

        $r6 = $r3.<ucar.nc2.iosp.LayoutTiled$DataChunk: int[] offset>;

        $r5 = r0.<ucar.nc2.iosp.LayoutTiled: int[] chunkSize>;

        specialinvoke $r24.<ucar.ma2.Section: void <init>(int[],int[])>($r6, $r5);

        $r7 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.ma2.Section want>;

        $z0 = virtualinvoke $r24.<ucar.ma2.Section: boolean intersects(ucar.ma2.Section)>($r7);

        if $z0 == 0 goto label02;

        goto label09;

     label09:
        $z1 = r0.<ucar.nc2.iosp.LayoutTiled: boolean debug>;

        if $z1 == 0 goto label10;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found intersecting section: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for filePos ");

        $l14 = $r3.<ucar.nc2.iosp.LayoutTiled$DataChunk: long filePos>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label10:
        $r26 = new ucar.nc2.iosp.IndexChunkerTiled;

        $r9 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.ma2.Section want>;

        specialinvoke $r26.<ucar.nc2.iosp.IndexChunkerTiled: void <init>(ucar.ma2.Section,ucar.ma2.Section)>($r24, $r9);

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.IndexChunkerTiled index> = $r26;

        $l3 = $r3.<ucar.nc2.iosp.LayoutTiled$DataChunk: long filePos>;

        r0.<ucar.nc2.iosp.LayoutTiled: long startSrcPos> = $l3;

     label11:
        goto label13;

     label12:
        $r20 := @caughtexception;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r20);

        throw $r27;

     label13:
        $r10 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.IndexChunkerTiled index>;

        $r11 = virtualinvoke $r10.<ucar.nc2.iosp.IndexChunkerTiled: ucar.nc2.iosp.IndexChunker$Chunk next()>();

        $l4 = r0.<ucar.nc2.iosp.LayoutTiled: long totalNelemsDone>;

        $i5 = virtualinvoke $r11.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        $l6 = (long) $i5;

        $l7 = $l4 + $l6;

        r0.<ucar.nc2.iosp.LayoutTiled: long totalNelemsDone> = $l7;

        $l8 = r0.<ucar.nc2.iosp.LayoutTiled: long startSrcPos>;

        $l9 = virtualinvoke $r11.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i10 = r0.<ucar.nc2.iosp.LayoutTiled: int elemSize>;

        $l11 = (long) $i10;

        $l12 = $l9 * $l11;

        $l13 = $l8 + $l12;

        virtualinvoke $r11.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcPos(long)>($l13);

        r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.Layout$Chunk next> = $r11;

        return 1;

        catch java.io.IOException from label04 to label05 with label06;
        catch ucar.ma2.InvalidRangeException from label02 to label03 with label12;
        catch ucar.ma2.InvalidRangeException from label04 to label07 with label12;
        catch ucar.ma2.InvalidRangeException from label08 to label11 with label12;
    }

    public ucar.nc2.iosp.Layout$Chunk next() throws java.io.IOException
    {
        java.io.PrintStream $r3;
        ucar.nc2.iosp.LayoutTiled r0;
        java.lang.StringBuilder $r2, $r4, $r6;
        ucar.nc2.iosp.Layout$Chunk $r1, $r5;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.LayoutTiled;

        $z0 = r0.<ucar.nc2.iosp.LayoutTiled: boolean debugNext>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  next=");

        $r5 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.Layout$Chunk next>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r1 = r0.<ucar.nc2.iosp.LayoutTiled: ucar.nc2.iosp.Layout$Chunk next>;

        return $r1;
    }

    public java.lang.String toString()
    {
        ucar.ma2.Section $r3;
        long $l1;
        int[] $r5, $r9;
        int $i0, $i2, $i3, i4;
        java.lang.StringBuilder $r0, $r1, $r4, $r6, $r7;
        ucar.nc2.iosp.LayoutTiled r2;
        java.lang.String $r8;

        r2 := @this: ucar.nc2.iosp.LayoutTiled;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("want=");

        $r3 = r2.<ucar.nc2.iosp.LayoutTiled: ucar.ma2.Section want>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("chunkSize=[");

        i4 = 0;

     label1:
        $r5 = r2.<ucar.nc2.iosp.LayoutTiled: int[] chunkSize>;

        $i0 = lengthof $r5;

        if i4 >= $i0 goto label3;

        if i4 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r9 = r2.<ucar.nc2.iosp.LayoutTiled: int[] chunkSize>;

        $i3 = $r9[i4];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        i4 = i4 + 1;

        goto label1;

     label3:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] totalNelems=");

        $l1 = r2.<ucar.nc2.iosp.LayoutTiled: long totalNelems>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" elemSize=");

        $i2 = r2.<ucar.nc2.iosp.LayoutTiled: int elemSize>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
