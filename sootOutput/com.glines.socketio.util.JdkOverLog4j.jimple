public final class com.glines.socketio.util.JdkOverLog4j extends java.util.logging.Handler
{
    private static final java.util.Map LEVELS_JDK_TO_LOG4J;
    private static final java.util.Map LEVELS_LOG4J_TO_JDK;

    static void <clinit>()
    {
        com.glines.socketio.util.JdkOverLog4j$1 $r0;
        com.glines.socketio.util.JdkOverLog4j$2 $r1;

        $r0 = new com.glines.socketio.util.JdkOverLog4j$1;

        specialinvoke $r0.<com.glines.socketio.util.JdkOverLog4j$1: void <init>()>();

        <com.glines.socketio.util.JdkOverLog4j: java.util.Map LEVELS_JDK_TO_LOG4J> = $r0;

        $r1 = new com.glines.socketio.util.JdkOverLog4j$2;

        specialinvoke $r1.<com.glines.socketio.util.JdkOverLog4j$2: void <init>()>();

        <com.glines.socketio.util.JdkOverLog4j: java.util.Map LEVELS_LOG4J_TO_JDK> = $r1;

        return;
    }

    public void <init>()
    {
        com.glines.socketio.util.JdkOverLog4j r0;

        r0 := @this: com.glines.socketio.util.JdkOverLog4j;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        return;
    }

    public void publish(java.util.logging.LogRecord)
    {
        java.lang.Throwable $r16;
        java.lang.AssertionError $r17;
        java.util.logging.Level r8, $r9, $r12;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Level $r3;
        java.util.Map $r6, $r11;
        java.lang.String $r1, $r4, $r10, $r15, $r20;
        boolean $z0;
        com.glines.socketio.util.JdkOverLog4j r21;
        java.util.logging.LogRecord r0;
        java.util.logging.Logger $r5;
        org.apache.log4j.Priority $r14;
        java.lang.Object $r7, $r13;
        java.lang.StringBuilder $r18, $r19;

        r21 := @this: com.glines.socketio.util.JdkOverLog4j;

        r0 := @parameter0: java.util.logging.LogRecord;

        $r1 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.log4j.Logger: org.apache.log4j.Level getEffectiveLevel()>();

        $r4 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();

        $r5 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r4);

        $r6 = <com.glines.socketio.util.JdkOverLog4j: java.util.Map LEVELS_LOG4J_TO_JDK>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (java.util.logging.Level) $r7;

        if r8 != null goto label1;

        $r17 = new java.lang.AssertionError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Level not supported yet - have a bug !");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r20);

        throw $r17;

     label1:
        $r9 = virtualinvoke $r5.<java.util.logging.Logger: java.util.logging.Level getLevel()>();

        $z0 = virtualinvoke r8.<java.util.logging.Level: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label2;

        virtualinvoke $r5.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(r8);

     label2:
        $r10 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();

        $r11 = <com.glines.socketio.util.JdkOverLog4j: java.util.Map LEVELS_JDK_TO_LOG4J>;

        $r12 = virtualinvoke r0.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (org.apache.log4j.Priority) $r13;

        $r15 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getMessage()>();

        $r16 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r10, $r14, $r15, $r16);

        return;
    }

    public void flush()
    {
        com.glines.socketio.util.JdkOverLog4j r0;

        r0 := @this: com.glines.socketio.util.JdkOverLog4j;

        return;
    }

    public void close() throws java.lang.SecurityException
    {
        com.glines.socketio.util.JdkOverLog4j r0;

        r0 := @this: com.glines.socketio.util.JdkOverLog4j;

        return;
    }

    public static void install()
    {
        com.glines.socketio.util.JdkOverLog4j $r3;
        java.util.logging.LogManager $r0, $r1, $r4;
        java.util.logging.Logger $r2, $r5;
        java.util.logging.Level $r6;

        $r0 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r0.<java.util.logging.LogManager: void reset()>();

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r2 = virtualinvoke $r1.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>("");

        $r3 = new com.glines.socketio.util.JdkOverLog4j;

        specialinvoke $r3.<com.glines.socketio.util.JdkOverLog4j: void <init>()>();

        virtualinvoke $r2.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>($r3);

        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r5 = virtualinvoke $r4.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>("");

        $r6 = <java.util.logging.Level: java.util.logging.Level ALL>;

        virtualinvoke $r5.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r6);

        return;
    }
}
