public class org.eclipse.jetty.server.nio.BlockingChannelConnector extends org.eclipse.jetty.server.nio.AbstractNIOConnector
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private transient java.nio.channels.ServerSocketChannel _acceptChannel;
    private final java.util.Set _endpoints;

    public void <init>()
    {
        org.eclipse.jetty.util.ConcurrentHashSet $r1;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void <init>()>();

        $r1 = new org.eclipse.jetty.util.ConcurrentHashSet;

        specialinvoke $r1.<org.eclipse.jetty.util.ConcurrentHashSet: void <init>()>();

        r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.util.Set _endpoints> = $r1;

        return;
    }

    public java.lang.Object getConnection()
    {
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        java.nio.channels.ServerSocketChannel $r1;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        return $r1;
    }

    protected void doStart() throws java.lang.Exception
    {
        org.eclipse.jetty.server.nio.BlockingChannelConnector$1 $r2;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        org.eclipse.jetty.util.thread.ThreadPool $r1;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void doStart()>();

        $r1 = virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: org.eclipse.jetty.util.thread.ThreadPool getThreadPool()>();

        $r2 = new org.eclipse.jetty.server.nio.BlockingChannelConnector$1;

        specialinvoke $r2.<org.eclipse.jetty.server.nio.BlockingChannelConnector$1: void <init>(org.eclipse.jetty.server.nio.BlockingChannelConnector)>(r0);

        interfaceinvoke $r1.<org.eclipse.jetty.util.thread.ThreadPool: boolean dispatch(java.lang.Runnable)>($r2);

        return;
    }

    public void open() throws java.io.IOException
    {
        java.net.InetSocketAddress $r7;
        java.nio.channels.ServerSocketChannel $r1, $r2, $r5;
        java.net.ServerSocket $r6;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        $r1 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>();

        r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel> = $r1;

        $r2 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke $r2.<java.nio.channels.ServerSocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r3 = virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.lang.String getHost()>();

        if $r3 != null goto label1;

        $r7 = new java.net.InetSocketAddress;

        $i2 = virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: int getPort()>();

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(int)>($i2);

        goto label2;

     label1:
        $r7 = new java.net.InetSocketAddress;

        $r4 = virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: int getPort()>();

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r4, $i0);

     label2:
        $r5 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $r6 = virtualinvoke $r5.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $i1 = virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: int getAcceptQueueSize()>();

        virtualinvoke $r6.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>($r7, $i1);

        return;
    }

    public void close() throws java.io.IOException
    {
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        java.nio.channels.ServerSocketChannel $r1, $r2;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke $r2.<java.nio.channels.ServerSocketChannel: void close()>();

     label1:
        r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel> = null;

        return;
    }

    public void accept(int) throws java.io.IOException, java.lang.InterruptedException
    {
        java.net.Socket $r3;
        java.nio.channels.SocketChannel $r2;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        int i0;
        org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint $r4;
        java.nio.channels.ServerSocketChannel $r1;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $r2 = virtualinvoke $r1.<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>();

        virtualinvoke $r2.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r3 = virtualinvoke $r2.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: void configure(java.net.Socket)>($r3);

        $r4 = new org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint;

        specialinvoke $r4.<org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint: void <init>(org.eclipse.jetty.server.nio.BlockingChannelConnector,java.nio.channels.ByteChannel)>(r0, $r2);

        virtualinvoke $r4.<org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint: void dispatch()>();

        return;
    }

    public void customize(org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.Request) throws java.io.IOException
    {
        org.eclipse.jetty.server.Request r2;
        java.net.Socket $r5;
        org.eclipse.jetty.io.EndPoint r1;
        java.nio.channels.SocketChannel $r4;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r2 := @parameter1: org.eclipse.jetty.server.Request;

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>(r1, r2);

        $i0 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: int _maxIdleTime>;

        interfaceinvoke r1.<org.eclipse.jetty.io.EndPoint: void setMaxIdleTime(int)>($i0);

        $r3 = interfaceinvoke r1.<org.eclipse.jetty.io.EndPoint: java.lang.Object getTransport()>();

        $r4 = (java.nio.channels.SocketChannel) $r3;

        $r5 = virtualinvoke $r4.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: void configure(java.net.Socket)>($r5);

        return;
    }

    public int getLocalPort()
    {
        java.nio.channels.ServerSocketChannel $r1, $r2, $r3;
        java.net.ServerSocket $r4;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $z0 = virtualinvoke $r2.<java.nio.channels.ServerSocketChannel: boolean isOpen()>();

        if $z0 != 0 goto label2;

     label1:
        $i2 = (int) -1;

        return $i2;

     label2:
        $r3 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $r4 = virtualinvoke $r3.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $i0 = virtualinvoke $r4.<java.net.ServerSocket: int getLocalPort()>();

        return $i0;
    }

    static java.util.Set access$000(org.eclipse.jetty.server.nio.BlockingChannelConnector)
    {
        java.util.Set $r1;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: java.util.Set _endpoints>;

        return $r1;
    }

    static org.eclipse.jetty.util.log.Logger access$100()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.server.nio.BlockingChannelConnector: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static int access$200(org.eclipse.jetty.server.nio.BlockingChannelConnector)
    {
        int $i0;
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        $i0 = r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: int _maxIdleTime>;

        return $i0;
    }

    static void access$300(org.eclipse.jetty.server.nio.BlockingChannelConnector, org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        org.eclipse.jetty.io.Connection r1;

        r0 := @parameter0: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        r1 := @parameter1: org.eclipse.jetty.io.Connection;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: void connectionOpened(org.eclipse.jetty.io.Connection)>(r1);

        return;
    }

    static void access$400(org.eclipse.jetty.server.nio.BlockingChannelConnector, org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.server.nio.BlockingChannelConnector r0;
        org.eclipse.jetty.io.Connection r1;

        r0 := @parameter0: org.eclipse.jetty.server.nio.BlockingChannelConnector;

        r1 := @parameter1: org.eclipse.jetty.io.Connection;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.BlockingChannelConnector: void connectionClosed(org.eclipse.jetty.io.Connection)>(r1);

        return;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/server/nio/BlockingChannelConnector;");

        <org.eclipse.jetty.server.nio.BlockingChannelConnector: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
