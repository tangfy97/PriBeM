public final class org.waveprotocol.wave.model.document.operation.Nindo extends java.lang.Object
{
    private final java.util.List mutationList;
    static boolean printing;
    static final boolean $assertionsDisabled;

    private void <init>(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.Nindo r0;
        java.util.List r2;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r0.<org.waveprotocol.wave.model.document.operation.Nindo: java.util.List mutationList> = $r1;

        return;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo$Builder builder()
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r0;

        $r0 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo shift(int, org.waveprotocol.wave.model.document.operation.Nindo)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r7;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r0;
        int i0, $i1, i2, $i3, $i4, i5;
        org.waveprotocol.wave.model.document.operation.Nindo$MutationComponent r6;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.operation.Nindo r1, $r4;
        java.util.List $r2;
        java.lang.Object $r5;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo;

        $i1 = neg i0;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.operation.Nindo: org.waveprotocol.wave.model.document.operation.Nindo$Builder builder()>();

        if i0 <= 0 goto label1;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>(i0);

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.operation.Nindo: java.util.List mutationList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.document.operation.Nindo$MutationComponent) $r5;

        if i5 <= 0 goto label5;

        $z0 = r6 instanceof org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        if $z0 == 0 goto label4;

        $r7 = (org.waveprotocol.wave.model.document.operation.Nindo$Skip) r6;

        i2 = $r7.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: int skipSize>;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i2);

        i5 = i5 - $i3;

        if $i3 >= i2 goto label3;

        $i4 = i2 - $i3;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>($i4);

     label3:
        goto label6;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>("Not enough initial skips in nindo to take off");

        goto label6;

     label5:
        virtualinvoke r6.<org.waveprotocol.wave.model.document.operation.Nindo$MutationComponent: void apply(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)>($r0);

     label6:
        goto label2;

     label7:
        $r4 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder annotationBuilder(org.waveprotocol.wave.model.document.indexed.IndexedDocument, int, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r1;
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder $r0;
        int i0, i1;
        java.lang.String r2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocument,int,int,java.lang.String)>(r1, i0, i1, r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo insertCharacters(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Characters $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r1;
        java.lang.AssertionError $r5;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.Nindo $r4;
        int i0;
        java.lang.String r3;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.operation.Nindo: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r2 = new org.waveprotocol.wave.model.document.operation.Nindo$Characters;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.Nindo$Characters: void <init>(java.lang.String)>(r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo insertElement(int, java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$ElementEnd $r4;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r6;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.Nindo$ElementStart $r1;
        org.waveprotocol.wave.model.document.operation.Nindo $r5;
        int i0;
        java.lang.String r2;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4);

        if i0 <= 0 goto label1;

        $r6 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label1:
        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$ElementStart;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$ElementStart: void <init>(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = <org.waveprotocol.wave.model.document.operation.Nindo$ElementEnd: org.waveprotocol.wave.model.document.operation.Nindo$ElementEnd INSTANCE>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r5;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo deleteCharacters(int, int)
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r3;
        org.waveprotocol.wave.model.document.operation.Nindo$DeleteCharacters $r2;
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r1;
        java.util.ArrayList $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r2 = new org.waveprotocol.wave.model.document.operation.Nindo$DeleteCharacters;

        $i2 = i1 - i0;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.Nindo$DeleteCharacters: void <init>(int)>($i2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo deleteElement(int)
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r3;
        org.waveprotocol.wave.model.document.operation.Nindo$DeleteElementEnd $r2;
        int i0;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r4;
        org.waveprotocol.wave.model.document.operation.Nindo$DeleteElementStart $r1;
        java.util.ArrayList $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        if i0 <= 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        $r1 = <org.waveprotocol.wave.model.document.operation.Nindo$DeleteElementStart: org.waveprotocol.wave.model.document.operation.Nindo$DeleteElementStart INSTANCE>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r2 = <org.waveprotocol.wave.model.document.operation.Nindo$DeleteElementEnd: org.waveprotocol.wave.model.document.operation.Nindo$DeleteElementEnd INSTANCE>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo replaceAttributes(int, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$ReplaceAttributes $r1;
        org.waveprotocol.wave.model.document.operation.Nindo $r3;
        int i0;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r4;
        org.waveprotocol.wave.model.document.operation.Attributes r2;
        java.util.ArrayList $r0;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        if i0 <= 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$ReplaceAttributes;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$ReplaceAttributes: void <init>(org.waveprotocol.wave.model.document.operation.Attributes)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r3 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo setAttribute(int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r6;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.Nindo $r5;
        org.waveprotocol.wave.model.document.operation.Nindo$UpdateAttributes $r1;
        java.util.Map $r4;
        int i0;
        java.lang.String r2, r3;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        if i0 <= 0 goto label1;

        $r6 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label1:
        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$UpdateAttributes;

        $r4 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r2, r3);

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$UpdateAttributes: void <init>(java.util.Map)>($r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r5 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r5;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo removeAttribute(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r4;
        org.waveprotocol.wave.model.document.operation.Nindo$UpdateAttributes $r1;
        java.util.Map $r3;
        int i0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r5;
        java.util.ArrayList $r0;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        if i0 <= 0 goto label1;

        $r5 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label1:
        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$UpdateAttributes;

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r2, null);

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$UpdateAttributes: void <init>(java.util.Map)>($r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo setAnnotation(int, int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$StartAnnotation $r1;
        org.waveprotocol.wave.model.document.operation.Nindo$Skip $r4, $r6;
        org.waveprotocol.wave.model.document.operation.Nindo$EndAnnotation $r5;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.Nindo $r7;
        int i0, i1, $i2;
        java.lang.String r2, r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(0);

        if i0 == i1 goto label2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, 2147483647);

        if i0 <= 0 goto label1;

        $r6 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label1:
        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$StartAnnotation;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$StartAnnotation: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = new org.waveprotocol.wave.model.document.operation.Nindo$Skip;

        $i2 = i1 - i0;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.Nindo$Skip: void <init>(int)>($i2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new org.waveprotocol.wave.model.document.operation.Nindo$EndAnnotation;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.Nindo$EndAnnotation: void <init>(java.lang.String)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        $r7 = new org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>($r0);

        return $r7;
    }

    public void apply(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor r0;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        java.util.List $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.operation.Nindo$MutationComponent r5;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.Nindo;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor: void begin()>();

        $z0 = <org.waveprotocol.wave.model.document.operation.Nindo: boolean printing>;

        if $z0 != 0 goto label1;

        <org.waveprotocol.wave.model.document.operation.Nindo: boolean printing> = 1;

        <org.waveprotocol.wave.model.document.operation.Nindo: boolean printing> = 0;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.operation.Nindo: java.util.List mutationList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.document.operation.Nindo$MutationComponent) $r4;

        $z1 = <org.waveprotocol.wave.model.document.operation.Nindo: boolean printing>;

        if $z1 != 0 goto label3;

     label3:
        virtualinvoke r5.<org.waveprotocol.wave.model.document.operation.Nindo$MutationComponent: void apply(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)>(r0);

        goto label2;

     label4:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor: void finish()>();

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        java.lang.StringBuilder $r0;
        org.waveprotocol.wave.model.document.operation.Nindo$1 $r2;
        java.lang.String $r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.Nindo;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = new org.waveprotocol.wave.model.document.operation.Nindo$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.Nindo$1: void <init>(org.waveprotocol.wave.model.document.operation.Nindo,java.lang.StringBuilder)>(r1, $r0);

        virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.Nindo: void apply(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.Nindo fromDocOp(org.waveprotocol.wave.model.document.operation.DocOp, boolean)
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r3;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r0;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.document.operation.Nindo$2 $r2;
        boolean z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        z0 := @parameter1: boolean;

        $r0 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        $r2 = new org.waveprotocol.wave.model.document.operation.Nindo$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.Nindo$2: void <init>(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r2);

        if z0 == 0 goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo access$200(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r0);

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

     label2:
        return $r3;
    }

    void <init>(java.util.List, org.waveprotocol.wave.model.document.operation.Nindo$1)
    {
        org.waveprotocol.wave.model.document.operation.Nindo r0;
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.Nindo$1 r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo: void <init>(java.util.List)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/Nindo;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.Nindo: boolean $assertionsDisabled> = $z1;

        <org.waveprotocol.wave.model.document.operation.Nindo: boolean printing> = 0;

        return;
    }
}
