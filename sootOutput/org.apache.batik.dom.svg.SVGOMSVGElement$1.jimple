class org.apache.batik.dom.svg.SVGOMSVGElement$1 extends java.lang.Object implements org.w3c.dom.svg.SVGPoint
{
    private final org.apache.batik.dom.svg.SVGOMSVGElement this$0;

    void <init>(org.apache.batik.dom.svg.SVGOMSVGElement)
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        r1 := @parameter0: org.apache.batik.dom.svg.SVGOMSVGElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: org.apache.batik.dom.svg.SVGOMSVGElement this$0> = r1;

        return;
    }

    protected java.awt.geom.AffineTransform getScreenTransform()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        org.apache.batik.dom.svg.SVGContext $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement $r1;
        java.awt.geom.AffineTransform $r3;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: org.apache.batik.dom.svg.SVGOMSVGElement this$0>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getScreenTransform()>();

        return $r3;
    }

    public float getX()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: java.awt.geom.AffineTransform getScreenTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getY()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        float $f0;
        java.awt.geom.AffineTransform $r1;
        double $d0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: java.awt.geom.AffineTransform getScreenTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public void setX(float)
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        java.awt.geom.AffineTransform $r3, $r4;
        org.apache.batik.dom.svg.SVGContext $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement $r1;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: org.apache.batik.dom.svg.SVGOMSVGElement this$0>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getScreenTransform()>();

        $r4 = new java.awt.geom.AffineTransform;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = (double) f0;

        $d5 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGContext: void setScreenTransform(java.awt.geom.AffineTransform)>($r4);

        return;
    }

    public void setY(float)
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        java.awt.geom.AffineTransform $r3, $r4;
        org.apache.batik.dom.svg.SVGContext $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement $r1;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: org.apache.batik.dom.svg.SVGOMSVGElement this$0>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getScreenTransform()>();

        $r4 = new java.awt.geom.AffineTransform;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d4 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = (double) f0;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGContext: void setScreenTransform(java.awt.geom.AffineTransform)>($r4);

        return;
    }

    public org.w3c.dom.svg.SVGPoint matrixTransform(org.w3c.dom.svg.SVGMatrix)
    {
        double $d0, $d1;
        org.apache.batik.dom.svg.SVGOMSVGElement$1 r0;
        org.apache.batik.dom.svg.SVGOMPoint $r3;
        java.awt.geom.AffineTransform $r1;
        org.w3c.dom.svg.SVGMatrix r2;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, f15;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement$1;

        r2 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: java.awt.geom.AffineTransform getScreenTransform()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        f0 = (float) $d0;

        $d1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        f1 = (float) $d1;

        $f2 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f3 = $f2 * f0;

        $f4 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getC()>();

        $f5 = $f4 * f1;

        $f6 = $f3 + $f5;

        $f7 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        f8 = $f6 + $f7;

        $f9 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getB()>();

        $f10 = $f9 * f0;

        $f11 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f12 = $f11 * f1;

        $f13 = $f10 + $f12;

        $f14 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        f15 = $f13 + $f14;

        $r3 = new org.apache.batik.dom.svg.SVGOMPoint;

        specialinvoke $r3.<org.apache.batik.dom.svg.SVGOMPoint: void <init>(float,float)>(f8, f15);

        return $r3;
    }
}
