public final class org.waveprotocol.wave.client.gadget.Gadget extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.client.gadget.Gadget r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.Gadget;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.conversation.ConversationBlip, org.waveprotocol.wave.model.supplement.ObservableSupplementedWave, org.waveprotocol.wave.client.account.ProfileManager, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r6;
        org.waveprotocol.wave.model.conversation.ConversationBlip r2;
        org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler $r7;
        org.waveprotocol.wave.client.gadget.renderer.GadgetRenderer $r0;
        java.lang.String r5;
        org.waveprotocol.wave.client.account.ProfileManager r4;

        r6 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter2: org.waveprotocol.wave.model.conversation.ConversationBlip;

        r3 := @parameter3: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave;

        r4 := @parameter4: org.waveprotocol.wave.client.account.ProfileManager;

        r5 := @parameter5: java.lang.String;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetRenderer;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetRenderer: void <init>(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.conversation.ConversationBlip,org.waveprotocol.wave.model.supplement.ObservableSupplementedWave,org.waveprotocol.wave.client.account.ProfileManager,java.lang.String)>(r1, r2, r3, r4, r5);

        $r7 = <org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler: org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler INSTANCE>;

        virtualinvoke r6.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>("gadget", $r7);

        virtualinvoke r6.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderingMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>("gadget", $r0);

        return;
    }

    public static boolean isGadget(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean isNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode,java.lang.String)>(r0, "gadget");

        return $z0;
    }

    public static org.waveprotocol.wave.client.doodad.DoodadInstallers$BlipInstaller install(org.waveprotocol.wave.client.account.ProfileManager, org.waveprotocol.wave.model.supplement.ObservableSupplementedWave, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.client.gadget.Gadget$1 $r0;
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.client.account.ProfileManager r2;

        r2 := @parameter0: org.waveprotocol.wave.client.account.ProfileManager;

        r1 := @parameter1: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r0 = new org.waveprotocol.wave.client.gadget.Gadget$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.Gadget$1: void <init>(org.waveprotocol.wave.model.supplement.ObservableSupplementedWave,org.waveprotocol.wave.client.account.ProfileManager,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2, r3);

        return $r0;
    }
}
