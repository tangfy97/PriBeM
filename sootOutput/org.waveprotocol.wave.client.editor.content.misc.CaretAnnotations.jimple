public class org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations extends java.lang.Object
{
    java.util.Map annotations;
    org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver resolver;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations> = $r1;

        r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver resolver> = null;

        return;
    }

    public java.util.Set getAnnotationKeys()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.String getAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver $r2, $r3;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.lang.String r1, $r4, $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: boolean hasAnnotation(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.String) $r6;

        return $r7;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver resolver>;

        if $r2 == null goto label2;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver resolver>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver: java.lang.String getAnnotation(java.lang.String)>(r1);

        return $r4;

     label2:
        return null;
    }

    public void setAnnotation(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r3;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public boolean hasAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void removeAnnotation(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public void setAnnotationResolver(org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver)
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver;

        r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver resolver> = r1;

        return;
    }

    public void buildAnnotationStarts(org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r6 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        virtualinvoke r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>($r8, $r10);

        goto label1;

     label2:
        return;
    }

    public void buildAnnotationEnds(org.waveprotocol.wave.model.document.operation.Nindo$Builder, boolean)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.util.Map $r1;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0, z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r6 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        z1 := @parameter1: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.util.Map annotations>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        virtualinvoke r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void endAnnotation(java.lang.String)>(r5);

        goto label1;

     label2:
        if z1 == 0 goto label3;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void clear()>();

     label3:
        return;
    }

    public boolean isAnnotated(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r0;
        java.lang.String r1, $r2, r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.lang.String getAnnotation(java.lang.String)>(r1);

        if $r2 != null goto label2;

        if r3 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

     label3:
        return $z0;
    }
}
