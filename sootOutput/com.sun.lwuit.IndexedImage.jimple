public class com.sun.lwuit.IndexedImage extends com.sun.lwuit.Image
{
    private int width;
    private int height;
    byte[] imageDataByte;
    int[] palette;
    static int[] lineCache;

    public void <init>(int, int, int[], byte[])
    {
        com.sun.lwuit.IndexedImage r0;
        byte[] r2;
        int[] r1;
        int i0, i1;

        r0 := @this: com.sun.lwuit.IndexedImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: byte[];

        specialinvoke r0.<com.sun.lwuit.Image: void <init>(java.lang.Object)>(null);

        r0.<com.sun.lwuit.IndexedImage: int width> = i0;

        r0.<com.sun.lwuit.IndexedImage: int height> = i1;

        r0.<com.sun.lwuit.IndexedImage: int[] palette> = r1;

        r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte> = r2;

        specialinvoke r0.<com.sun.lwuit.IndexedImage: void initOpaque()>();

        return;
    }

    private void initOpaque()
    {
        com.sun.lwuit.IndexedImage r0;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2, i3;

        r0 := @this: com.sun.lwuit.IndexedImage;

        $r1 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        if $r1 == null goto label4;

        i3 = 0;

     label1:
        $r2 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label3;

        $r3 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i1 = $r3[i3];

        $i2 = $i1 & -16777216;

        if $i2 == -16777216 goto label2;

        virtualinvoke r0.<com.sun.lwuit.IndexedImage: void setOpaque(boolean)>(0);

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<com.sun.lwuit.IndexedImage: void setOpaque(boolean)>(1);

        goto label5;

     label4:
        virtualinvoke r0.<com.sun.lwuit.IndexedImage: void setOpaque(boolean)>(0);

     label5:
        return;
    }

    private void <init>(int, int, int[], int[])
    {
        byte[] $r2, $r3, $r5;
        com.sun.lwuit.IndexedImage r0;
        byte $b6;
        int[] r1, r4;
        int i0, i1, $i2, $i3, $i4, $i5, i7;

        r0 := @this: com.sun.lwuit.IndexedImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r4 := @parameter3: int[];

        specialinvoke r0.<com.sun.lwuit.Image: void <init>(java.lang.Object)>(null);

        r0.<com.sun.lwuit.IndexedImage: int width> = i0;

        r0.<com.sun.lwuit.IndexedImage: int height> = i1;

        r0.<com.sun.lwuit.IndexedImage: int[] palette> = r1;

        $i2 = i0 * i1;

        $r2 = newarray (byte)[$i2];

        r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte> = $r2;

        i7 = 0;

     label1:
        $r3 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $i3 = lengthof $r3;

        if i7 >= $i3 goto label2;

        $r5 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $i4 = r4[i7];

        $i5 = specialinvoke r0.<com.sun.lwuit.IndexedImage: int paletteOffset(int)>($i4);

        $b6 = (byte) $i5;

        $r5[i7] = $b6;

        i7 = i7 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.sun.lwuit.IndexedImage: void initOpaque()>();

        return;
    }

    private int paletteOffset(int)
    {
        java.lang.IllegalStateException $r2;
        com.sun.lwuit.IndexedImage r0;
        int[] $r1, $r3;
        int $i0, i1, $i2, i3;

        r0 := @this: com.sun.lwuit.IndexedImage;

        i1 := @parameter0: int;

        i3 = 0;

     label1:
        $r1 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $r3 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i2 = $r3[i3];

        if i1 != $i2 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid palette request in paletteOffset");

        throw $r2;
    }

    public static com.sun.lwuit.Image pack(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        com.sun.lwuit.Image $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createImage(java.lang.String)>(r0);

        $r2 = staticinvoke <com.sun.lwuit.IndexedImage: com.sun.lwuit.Image pack(com.sun.lwuit.Image)>($r1);

        return $r2;
    }

    public com.sun.lwuit.Image subImage(int, int, int, int, boolean)
    {
        byte[] r0, $r4;
        com.sun.lwuit.IndexedImage $r1, r2;
        byte $b13;
        int[] $r3;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, i12, i14;
        boolean z0;

        r2 := @this: com.sun.lwuit.IndexedImage;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i2 = i0 * i1;

        r0 = newarray (byte)[$i2];

        i14 = 0;

     label1:
        $i3 = lengthof r0;

        if i14 >= $i3 goto label2;

        i4 = i14 / i0;

        i5 = i14 % i0;

        $i11 = i6 + i5;

        $i9 = i7 + i4;

        $i8 = r2.<com.sun.lwuit.IndexedImage: int width>;

        $i10 = $i9 * $i8;

        i12 = $i11 + $i10;

        $r4 = r2.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $b13 = $r4[i12];

        r0[i14] = $b13;

        i14 = i14 + 1;

        goto label1;

     label2:
        $r1 = new com.sun.lwuit.IndexedImage;

        $r3 = r2.<com.sun.lwuit.IndexedImage: int[] palette>;

        specialinvoke $r1.<com.sun.lwuit.IndexedImage: void <init>(int,int,int[],byte[])>(i0, i1, $r3, r0);

        return $r1;
    }

    public com.sun.lwuit.Image rotate(int)
    {
        int i0;
        com.sun.lwuit.IndexedImage r1;
        java.lang.RuntimeException $r0;

        r1 := @this: com.sun.lwuit.IndexedImage;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("The rotate method is not supported by indexed images at the moment");

        throw $r0;
    }

    public com.sun.lwuit.Image modifyAlpha(byte)
    {
        byte[] $r7;
        com.sun.lwuit.IndexedImage r0, $r10;
        byte b2;
        int[] $r1, r2, $r3, $r4, $r5, $r8, $r9;
        int $i0, $i1, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14;

        r0 := @this: com.sun.lwuit.IndexedImage;

        b2 := @parameter0: byte;

        $r1 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        $r4 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $r3 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        $i14 = (int) b2;

        $i3 = $i14 << 24;

        i4 = $i3 & -16777216;

        i13 = 0;

     label1:
        $r5 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i5 = lengthof $r5;

        if i13 >= $i5 goto label3;

        $r8 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i8 = $r8[i13];

        $i9 = $i8 & -16777216;

        if $i9 == 0 goto label2;

        $r9 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i10 = $r9[i13];

        $i11 = $i10 & 16777215;

        $i12 = $i11 | i4;

        r2[i13] = $i12;

     label2:
        i13 = i13 + 1;

        goto label1;

     label3:
        $r10 = new com.sun.lwuit.IndexedImage;

        $i7 = r0.<com.sun.lwuit.IndexedImage: int width>;

        $i6 = r0.<com.sun.lwuit.IndexedImage: int height>;

        $r7 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        specialinvoke $r10.<com.sun.lwuit.IndexedImage: void <init>(int,int,int[],byte[])>($i7, $i6, r2, $r7);

        return $r10;
    }

    public com.sun.lwuit.Graphics getGraphics()
    {
        com.sun.lwuit.IndexedImage r1;
        java.lang.RuntimeException $r0;

        r1 := @this: com.sun.lwuit.IndexedImage;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Indexed image objects are immutable");

        throw $r0;
    }

    void getRGB(int[], int, int, int, int, int)
    {
        byte[] $r1;
        com.sun.lwuit.IndexedImage r0;
        short s10, $s18;
        byte $b9;
        int[] r2, $r3;
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, $i8, i11, $i12, $i13, $i14, i15, i16, i17, $i19;

        r0 := @this: com.sun.lwuit.IndexedImage;

        r2 := @parameter0: int[];

        i11 := @parameter1: int;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i5 := @parameter4: int;

        i4 := @parameter5: int;

        $i1 = r0.<com.sun.lwuit.IndexedImage: int width>;

        $i3 = i0 * $i1;

        i15 = $i3 + i2;

        i16 = 0;

     label1:
        if i16 >= i4 goto label4;

        i6 = i16 * i5;

        i17 = 0;

     label2:
        if i17 >= i5 goto label3;

        $r1 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $i8 = i15 + i17;

        $b9 = $r1[$i8];

        $s18 = (short) $b9;

        s10 = $s18 & 255;

        $i12 = i11 + i6;

        $i14 = $i12 + i17;

        $r3 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i19 = (int) s10;

        $i13 = $r3[$i19];

        r2[$i14] = $i13;

        i17 = i17 + 1;

        goto label2;

     label3:
        $i7 = r0.<com.sun.lwuit.IndexedImage: int width>;

        i15 = i15 + $i7;

        i16 = i16 + 1;

        goto label1;

     label4:
        return;
    }

    public static com.sun.lwuit.IndexedImage pack(int[], int, int)
    {
        com.sun.lwuit.IndexedImage $r0;
        int[] r1, r2, r3;
        int i0, i1, i2, $i3, i4, i5, i6;
        boolean $z0;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 * i1;

        r2 = newarray (int)[256];

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i2 goto label4;

        i4 = r1[i6];

        $z0 = staticinvoke <com.sun.lwuit.IndexedImage: boolean contains(int[],int,int)>(r2, i5, i4);

        if $z0 != 0 goto label3;

        if i5 <= 255 goto label2;

        return null;

     label2:
        r2[i5] = i4;

        i5 = i5 + 1;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $i3 = lengthof r2;

        if i5 == $i3 goto label5;

        r3 = newarray (int)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i5);

        r2 = r3;

     label5:
        $r0 = new com.sun.lwuit.IndexedImage;

        specialinvoke $r0.<com.sun.lwuit.IndexedImage: void <init>(int,int,int[],int[])>(i0, i1, r2, r1);

        return $r0;
    }

    public static com.sun.lwuit.Image pack(com.sun.lwuit.Image)
    {
        com.sun.lwuit.IndexedImage $r2;
        int[] $r1;
        int $i0, $i1;
        com.sun.lwuit.Image r0;

        r0 := @parameter0: com.sun.lwuit.Image;

        $i0 = virtualinvoke r0.<com.sun.lwuit.Image: int getWidth()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.Image: int getHeight()>();

        $r1 = virtualinvoke r0.<com.sun.lwuit.Image: int[] getRGBCached()>();

        $r2 = staticinvoke <com.sun.lwuit.IndexedImage: com.sun.lwuit.IndexedImage pack(int[],int,int)>($r1, $i0, $i1);

        if $r2 != null goto label1;

        return r0;

     label1:
        return $r2;
    }

    private static boolean contains(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i2 = r0[i3];

        if $i2 != i1 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    protected void drawImage(com.sun.lwuit.Graphics, java.lang.Object, int, int)
    {
        byte[] $r5;
        com.sun.lwuit.IndexedImage r1;
        byte $b16;
        int[] $r0, $r2, $r4, $r6, $r7, $r8;
        com.sun.lwuit.Graphics r3;
        short s17, $s29;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, $i30;
        java.lang.Object r9;

        r1 := @this: com.sun.lwuit.IndexedImage;

        r3 := @parameter0: com.sun.lwuit.Graphics;

        r9 := @parameter1: java.lang.Object;

        i12 := @parameter2: int;

        i2 := @parameter3: int;

        $r0 = <com.sun.lwuit.IndexedImage: int[] lineCache>;

        if $r0 == null goto label1;

        $r8 = <com.sun.lwuit.IndexedImage: int[] lineCache>;

        $i21 = lengthof $r8;

        $i19 = r1.<com.sun.lwuit.IndexedImage: int width>;

        $i20 = $i19 * 3;

        if $i21 >= $i20 goto label2;

     label1:
        $i0 = r1.<com.sun.lwuit.IndexedImage: int width>;

        $i1 = $i0 * 3;

        $r2 = newarray (int)[$i1];

        <com.sun.lwuit.IndexedImage: int[] lineCache> = $r2;

     label2:
        $i22 = virtualinvoke r3.<com.sun.lwuit.Graphics: int getClipY()>();

        $i23 = virtualinvoke r3.<com.sun.lwuit.Graphics: int getClipHeight()>();

        $i24 = $i23 + $i22;

        i25 = 0;

        i26 = r1.<com.sun.lwuit.IndexedImage: int height>;

        if $i22 <= i2 goto label3;

        i25 = $i22 - i2;

     label3:
        $i3 = r1.<com.sun.lwuit.IndexedImage: int height>;

        $i4 = i2 + $i3;

        if $i24 >= $i4 goto label4;

        i26 = $i24 - i2;

     label4:
        i27 = i25;

     label5:
        if i27 >= i26 goto label8;

        $i5 = r1.<com.sun.lwuit.IndexedImage: int width>;

        i6 = i27 * $i5;

        $i7 = r1.<com.sun.lwuit.IndexedImage: int height>;

        $i8 = $i7 - i27;

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i8);

        $i10 = r1.<com.sun.lwuit.IndexedImage: int width>;

        i11 = $i10 * $i9;

        i28 = 0;

     label6:
        if i28 >= i11 goto label7;

        $r5 = r1.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $i15 = i28 + i6;

        $b16 = $r5[$i15];

        $s29 = (short) $b16;

        s17 = $s29 & 255;

        $r7 = <com.sun.lwuit.IndexedImage: int[] lineCache>;

        $r6 = r1.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i30 = (int) s17;

        $i18 = $r6[$i30];

        $r7[i28] = $i18;

        i28 = i28 + 1;

        goto label6;

     label7:
        $r4 = <com.sun.lwuit.IndexedImage: int[] lineCache>;

        $i14 = i2 + i27;

        $i13 = r1.<com.sun.lwuit.IndexedImage: int width>;

        virtualinvoke r3.<com.sun.lwuit.Graphics: void drawRGB(int[],int,int,int,int,int,boolean)>($r4, 0, i12, $i14, $i13, $i9, 1);

        i27 = i27 + 3;

        goto label5;

     label8:
        return;
    }

    public int getWidth()
    {
        int $i0;
        com.sun.lwuit.IndexedImage r0;

        r0 := @this: com.sun.lwuit.IndexedImage;

        $i0 = r0.<com.sun.lwuit.IndexedImage: int width>;

        return $i0;
    }

    public int getHeight()
    {
        int $i0;
        com.sun.lwuit.IndexedImage r0;

        r0 := @this: com.sun.lwuit.IndexedImage;

        $i0 = r0.<com.sun.lwuit.IndexedImage: int height>;

        return $i0;
    }

    public void scale(int, int)
    {
        com.sun.lwuit.IndexedImage r0, r2;
        byte[] $r3;
        int i0, i1;
        com.sun.lwuit.Image $r1;

        r0 := @this: com.sun.lwuit.IndexedImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.sun.lwuit.IndexedImage: com.sun.lwuit.Image scaled(int,int)>(i0, i1);

        r2 = (com.sun.lwuit.IndexedImage) $r1;

        $r3 = r2.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte> = $r3;

        r0.<com.sun.lwuit.IndexedImage: int width> = i0;

        r0.<com.sun.lwuit.IndexedImage: int height> = i1;

        return;
    }

    public com.sun.lwuit.Image scaled(int, int)
    {
        byte[] $r3, $r5;
        com.sun.lwuit.IndexedImage r0, $r2;
        com.sun.lwuit.geom.Dimension $r1;
        int[] $r4;
        int $i0, $i1, i2, i3;

        r0 := @this: com.sun.lwuit.IndexedImage;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.IndexedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.IndexedImage: int getHeight()>();

        if $i0 != i2 goto label1;

        if $i1 != i3 goto label1;

        return r0;

     label1:
        $r1 = new com.sun.lwuit.geom.Dimension;

        specialinvoke $r1.<com.sun.lwuit.geom.Dimension: void <init>(int,int)>(i2, i3);

        virtualinvoke r0.<com.sun.lwuit.IndexedImage: com.sun.lwuit.Image getCachedImage(com.sun.lwuit.geom.Dimension)>($r1);

        $r2 = new com.sun.lwuit.IndexedImage;

        $r4 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $r3 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $r5 = virtualinvoke r0.<com.sun.lwuit.IndexedImage: byte[] scaleArray(byte[],int,int)>($r3, i2, i3);

        specialinvoke $r2.<com.sun.lwuit.IndexedImage: void <init>(int,int,int[],byte[])>(i2, i3, $r4, $r5);

        virtualinvoke r0.<com.sun.lwuit.IndexedImage: void cacheImage(com.sun.lwuit.geom.Dimension,com.sun.lwuit.Image)>($r1, $r2);

        return $r2;
    }

    byte[] scaleArray(byte[], int, int)
    {
        byte[] r1, $r2;
        com.sun.lwuit.IndexedImage r0;
        byte $b15;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, i7, i8, $i9, i10, $i11, i12, $i13, $i14, $i16, $i17, i18, i19, i20, i21;

        r0 := @this: com.sun.lwuit.IndexedImage;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.IndexedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.IndexedImage: int getHeight()>();

        if $i0 != i2 goto label1;

        if $i1 != i3 goto label1;

        return r1;

     label1:
        $i4 = i2 * i3;

        $r2 = newarray (byte)[$i4];

        $i5 = $i1 << 16;

        $i16 = $i5 / i3;

        $i6 = $i0 << 16;

        $i17 = $i6 / i2;

        i18 = $i17 / 2;

        i19 = $i16 / 2;

        i20 = 0;

     label2:
        if i20 >= i2 goto label6;

        i7 = i18 >> 16;

        i21 = 0;

     label3:
        if i21 >= i3 goto label5;

        i8 = i19 >> 16;

        $i9 = i21 * i2;

        i10 = i20 + $i9;

        $i11 = i8 * $i0;

        i12 = i7 + $i11;

        if i10 < 0 goto label4;

        $i13 = lengthof $r2;

        if i10 >= $i13 goto label4;

        if i12 < 0 goto label4;

        $i14 = lengthof r1;

        if i12 >= $i14 goto label4;

        $b15 = r1[i12];

        $r2[i10] = $b15;

     label4:
        i19 = i19 + $i16;

        i21 = i21 + 1;

        goto label3;

     label5:
        i19 = $i16 / 2;

        i18 = i18 + $i17;

        i20 = i20 + 1;

        goto label2;

     label6:
        return $r2;
    }

    int[] getRGBImpl()
    {
        byte[] $r2;
        com.sun.lwuit.IndexedImage r0;
        short s5, $s8;
        byte $b4;
        int[] r1, $r3;
        int $i0, $i1, $i2, $i3, $i6, i7, $i9;

        r0 := @this: com.sun.lwuit.IndexedImage;

        $i1 = r0.<com.sun.lwuit.IndexedImage: int width>;

        $i0 = r0.<com.sun.lwuit.IndexedImage: int height>;

        $i2 = $i1 * $i0;

        r1 = newarray (int)[$i2];

        i7 = 0;

     label1:
        $i3 = lengthof r1;

        if i7 >= $i3 goto label2;

        $r2 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        $b4 = $r2[i7];

        $s8 = (short) $b4;

        s5 = $s8 & 255;

        $r3 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i9 = (int) s5;

        $i6 = $r3[$i9];

        r1[i7] = $i6;

        i7 = i7 + 1;

        goto label1;

     label2:
        return r1;
    }

    public final int[] getPalette()
    {
        com.sun.lwuit.IndexedImage r0;
        int[] $r1;

        r0 := @this: com.sun.lwuit.IndexedImage;

        $r1 = r0.<com.sun.lwuit.IndexedImage: int[] palette>;

        return $r1;
    }

    public final byte[] getImageDataByte()
    {
        com.sun.lwuit.IndexedImage r0;
        byte[] $r1;

        r0 := @this: com.sun.lwuit.IndexedImage;

        $r1 = r0.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        return $r1;
    }

    public byte[] toByteArray()
    {
        byte[] $r5, $r6;
        java.io.ByteArrayOutputStream $r0;
        java.io.IOException $r8;
        com.sun.lwuit.IndexedImage r2;
        java.io.DataOutputStream $r1;
        int[] $r3, $r4, $r7;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r2 := @this: com.sun.lwuit.IndexedImage;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $i0 = r2.<com.sun.lwuit.IndexedImage: int width>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i1 = r2.<com.sun.lwuit.IndexedImage: int height>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r3 = r2.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i2 = lengthof $r3;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>($i2);

        i5 = 0;

     label2:
        $r4 = r2.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i3 = lengthof $r4;

        if i5 >= $i3 goto label3;

        $r7 = r2.<com.sun.lwuit.IndexedImage: int[] palette>;

        $i4 = $r7[i5];

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i4);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r5 = r2.<com.sun.lwuit.IndexedImage: byte[] imageDataByte>;

        virtualinvoke $r1.<java.io.DataOutputStream: void write(byte[])>($r5);

        virtualinvoke $r1.<java.io.DataOutputStream: void close()>();

        $r6 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label4:
        return $r6;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public static com.sun.lwuit.IndexedImage load(byte[])
    {
        byte[] r2, r6;
        java.io.DataInputStream $r8;
        com.sun.lwuit.IndexedImage $r9;
        short $s0, $s1, $s3, $s8;
        byte $b2;
        java.io.ByteArrayInputStream $r7;
        int[] r3;
        int $i4, $i5, $i6, i7, $i9, $i10, $i11, $i12, $i13;
        java.io.IOException $r5;

        r2 := @parameter0: byte[];

     label1:
        $r8 = new java.io.DataInputStream;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

        $s0 = virtualinvoke $r8.<java.io.DataInputStream: short readShort()>();

        $s1 = virtualinvoke $r8.<java.io.DataInputStream: short readShort()>();

        $b2 = virtualinvoke $r8.<java.io.DataInputStream: byte readByte()>();

        $s8 = (short) $b2;

        $s3 = $s8 & 255;

        $i9 = (int) $s3;

        r3 = newarray (int)[$i9];

        i7 = 0;

     label2:
        $i4 = lengthof r3;

        if i7 >= $i4 goto label3;

        $i6 = virtualinvoke $r8.<java.io.DataInputStream: int readInt()>();

        r3[i7] = $i6;

        i7 = i7 + 1;

        goto label2;

     label3:
        $i10 = (int) $s0;

        $i11 = (int) $s1;

        $i5 = $i10 * $i11;

        r6 = newarray (byte)[$i5];

        virtualinvoke $r8.<java.io.DataInputStream: void readFully(byte[])>(r6);

        $r9 = new com.sun.lwuit.IndexedImage;

        $i12 = (int) $s0;

        $i13 = (int) $s1;

        specialinvoke $r9.<com.sun.lwuit.IndexedImage: void <init>(int,int,int[],byte[])>($i12, $i13, r3, r6);

     label4:
        return $r9;

     label5:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
