public class com.jhlabs.image.PlasmaFilter extends com.jhlabs.image.WholeImageFilter implements java.io.Serializable
{
    static final long serialVersionUID;
    public float turbulence;
    private float scaling;
    private com.jhlabs.image.Colormap colormap;
    private java.util.Random randomGenerator;
    private long seed;
    private boolean useColormap;
    private boolean useImageColors;

    public void <init>()
    {
        com.jhlabs.image.LinearColormap $r1;
        java.util.Random $r2;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.PlasmaFilter: float turbulence> = 1.0F;

        r0.<com.jhlabs.image.PlasmaFilter: float scaling> = 0.0F;

        $r1 = new com.jhlabs.image.LinearColormap;

        specialinvoke $r1.<com.jhlabs.image.LinearColormap: void <init>()>();

        r0.<com.jhlabs.image.PlasmaFilter: com.jhlabs.image.Colormap colormap> = $r1;

        r0.<com.jhlabs.image.PlasmaFilter: long seed> = 567L;

        r0.<com.jhlabs.image.PlasmaFilter: boolean useColormap> = 0;

        r0.<com.jhlabs.image.PlasmaFilter: boolean useImageColors> = 0;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator> = $r2;

        return;
    }

    public void setTurbulence(float)
    {
        float f0;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.PlasmaFilter: float turbulence> = f0;

        return;
    }

    public float getTurbulence()
    {
        float $f0;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $f0 = r0.<com.jhlabs.image.PlasmaFilter: float turbulence>;

        return $f0;
    }

    public void setScaling(float)
    {
        float f0;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.PlasmaFilter: float scaling> = f0;

        return;
    }

    public float getScaling()
    {
        float $f0;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $f0 = r0.<com.jhlabs.image.PlasmaFilter: float scaling>;

        return $f0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.Colormap r1;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.PlasmaFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.Colormap $r1;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $r1 = r0.<com.jhlabs.image.PlasmaFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public void setUseColormap(boolean)
    {
        com.jhlabs.image.PlasmaFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.PlasmaFilter: boolean useColormap> = z0;

        return;
    }

    public boolean getUseColormap()
    {
        com.jhlabs.image.PlasmaFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $z0 = r0.<com.jhlabs.image.PlasmaFilter: boolean useColormap>;

        return $z0;
    }

    public void setUseImageColors(boolean)
    {
        com.jhlabs.image.PlasmaFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.PlasmaFilter: boolean useImageColors> = z0;

        return;
    }

    public boolean getUseImageColors()
    {
        com.jhlabs.image.PlasmaFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $z0 = r0.<com.jhlabs.image.PlasmaFilter: boolean useImageColors>;

        return $z0;
    }

    public void setSeed(int)
    {
        int i0;
        long $l1;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        r0.<com.jhlabs.image.PlasmaFilter: long seed> = $l1;

        return;
    }

    public int getSeed()
    {
        int $i1;
        long $l0;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $l0 = r0.<com.jhlabs.image.PlasmaFilter: long seed>;

        $i1 = (int) $l0;

        return $i1;
    }

    public void randomize()
    {
        long $l0;
        com.jhlabs.image.PlasmaFilter r0;
        java.util.Date $r1;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        r0.<com.jhlabs.image.PlasmaFilter: long seed> = $l0;

        return;
    }

    private int randomRGB(int[], int, int)
    {
        java.awt.Rectangle $r5;
        java.util.Random $r1, $r2, $r3;
        int[] r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, $i11, $i12, $i13;
        boolean $z0;
        com.jhlabs.image.PlasmaFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        r4 := @parameter0: int[];

        i10 := @parameter1: int;

        i8 := @parameter2: int;

        $z0 = r0.<com.jhlabs.image.PlasmaFilter: boolean useImageColors>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle originalSpace>;

        $i9 = $r5.<java.awt.Rectangle: int width>;

        $i11 = i8 * $i9;

        $i12 = $i11 + i10;

        $i13 = r4[$i12];

        return $i13;

     label1:
        $r1 = r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = 255.0F * $f0;

        i0 = (int) $f1;

        $r2 = r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $f2 = virtualinvoke $r2.<java.util.Random: float nextFloat()>();

        $f3 = 255.0F * $f2;

        i1 = (int) $f3;

        $r3 = r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $f4 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f5 = 255.0F * $f4;

        i2 = (int) $f5;

        $i3 = i0 << 16;

        $i5 = -16777216 | $i3;

        $i4 = i1 << 8;

        $i6 = $i5 | $i4;

        $i7 = $i6 | i2;

        return $i7;
    }

    private int displace(int, float)
    {
        java.util.Random $r1, $r2, $r3;
        float f0, $f1, $f2, $f3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = i0 >> 16;

        i17 = $i1 & 255;

        $i2 = i0 >> 8;

        i18 = $i2 & 255;

        i19 = i0 & 255;

        $d0 = (double) f0;

        $r1 = r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $f1 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $d1 = (double) $f1;

        $d2 = $d1 - 0.5;

        $d3 = $d0 * $d2;

        $i3 = (int) $d3;

        $i4 = i17 + $i3;

        $i5 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i4);

        $d4 = (double) f0;

        $r2 = r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $f2 = virtualinvoke $r2.<java.util.Random: float nextFloat()>();

        $d5 = (double) $f2;

        $d6 = $d5 - 0.5;

        $d7 = $d4 * $d6;

        $i6 = (int) $d7;

        $i7 = i18 + $i6;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $d8 = (double) f0;

        $r3 = r0.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $f3 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $d9 = (double) $f3;

        $d10 = $d9 - 0.5;

        $d11 = $d8 * $d10;

        $i9 = (int) $d11;

        $i10 = i19 + $i9;

        $i11 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i10);

        $i12 = $i5 << 16;

        $i14 = -16777216 | $i12;

        $i13 = $i8 << 8;

        $i15 = $i14 | $i13;

        $i16 = $i15 | $i11;

        return $i16;
    }

    private int average(int, int)
    {
        com.jhlabs.image.PlasmaFilter r0;
        int i0, i1, $i2;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>(i0, i1, 13);

        return $i2;
    }

    private int getPixel(int, int, int[], int)
    {
        com.jhlabs.image.PlasmaFilter r1;
        int[] r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r1 := @this: com.jhlabs.image.PlasmaFilter;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        i1 := @parameter3: int;

        $i3 = i0 * i1;

        $i4 = $i3 + i2;

        $i5 = r0[$i4];

        return $i5;
    }

    private void putPixel(int, int, int, int[], int)
    {
        com.jhlabs.image.PlasmaFilter r1;
        int[] r0;
        int i0, i1, i2, $i3, i4, $i5;

        r1 := @this: com.jhlabs.image.PlasmaFilter;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        r0 := @parameter3: int[];

        i1 := @parameter4: int;

        $i3 = i0 * i1;

        $i5 = $i3 + i2;

        r0[$i5] = i4;

        return;
    }

    private boolean doPixel(int, int, int, int, int[], int, int, int)
    {
        int[] r1;
        boolean $z0;
        float $f0, $f1, $f2, $f3, f4;
        int i0, i1, i2, $i3, i4, i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i36, i37, $i38, i39, i40;
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        i1 := @parameter0: int;

        i4 := @parameter1: int;

        i2 := @parameter2: int;

        i5 := @parameter3: int;

        r1 := @parameter4: int[];

        i7 := @parameter5: int;

        i0 := @parameter6: int;

        i8 := @parameter7: int;

        if i0 != 0 goto label11;

        $i17 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int getPixel(int,int,int[],int)>(i1, i4, r1, i7);

        $i18 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int getPixel(int,int,int[],int)>(i1, i5, r1, i7);

        $i19 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int getPixel(int,int,int[],int)>(i2, i4, r1, i7);

        $i20 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int getPixel(int,int,int[],int)>(i2, i5, r1, i7);

        $f0 = (float) i8;

        $f1 = 2.0F * $f0;

        $f3 = 256.0F / $f1;

        $f2 = r0.<com.jhlabs.image.PlasmaFilter: float turbulence>;

        f4 = $f3 * $f2;

        $i21 = i1 + i2;

        i36 = $i21 / 2;

        $i22 = i4 + i5;

        i37 = $i22 / 2;

        if i36 != i1 goto label01;

        if i36 != i2 goto label01;

        if i37 != i4 goto label01;

        if i37 != i5 goto label01;

        return 1;

     label01:
        if i36 != i1 goto label02;

        if i36 == i2 goto label03;

     label02:
        $i23 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i17, $i18);

        $i24 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int displace(int,float)>($i23, f4);

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i1, i37, $i24, r1, i7);

        if i1 == i2 goto label03;

        $i34 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i19, $i20);

        $i35 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int displace(int,float)>($i34, f4);

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i2, i37, $i35, r1, i7);

     label03:
        if i37 != i4 goto label04;

        if i37 == i5 goto label07;

     label04:
        if i1 != i36 goto label05;

        if i37 == i5 goto label06;

     label05:
        $i25 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i18, $i20);

        $i26 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int displace(int,float)>($i25, f4);

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i36, i5, $i26, r1, i7);

     label06:
        if i4 == i5 goto label07;

        $i32 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i17, $i19);

        $i33 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int displace(int,float)>($i32, f4);

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i36, i4, $i33, r1, i7);

     label07:
        if i4 != i5 goto label08;

        if i1 == i2 goto label09;

     label08:
        $i27 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i17, $i20);

        $i28 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i18, $i19);

        $i29 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int average(int,int)>($i27, $i28);

        $i30 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: int displace(int,float)>($i29, f4);

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i36, i37, $i30, r1, i7);

     label09:
        $i38 = i2 - i1;

        if $i38 >= 3 goto label10;

        $i31 = i5 - i4;

        if $i31 >= 3 goto label10;

        return 0;

     label10:
        return 1;

     label11:
        $i3 = i1 + i2;

        i39 = $i3 / 2;

        $i6 = i4 + i5;

        i40 = $i6 / 2;

        $i10 = i0 - 1;

        $i9 = i8 + 1;

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: boolean doPixel(int,int,int,int,int[],int,int,int)>(i1, i4, i39, i40, r1, i7, $i10, $i9);

        $i12 = i0 - 1;

        $i11 = i8 + 1;

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: boolean doPixel(int,int,int,int,int[],int,int,int)>(i1, i40, i39, i5, r1, i7, $i12, $i11);

        $i14 = i0 - 1;

        $i13 = i8 + 1;

        specialinvoke r0.<com.jhlabs.image.PlasmaFilter: boolean doPixel(int,int,int,int,int[],int,int,int)>(i39, i4, i2, i40, r1, i7, $i14, $i13);

        $i16 = i0 - 1;

        $i15 = i8 + 1;

        $z0 = specialinvoke r0.<com.jhlabs.image.PlasmaFilter: boolean doPixel(int,int,int,int,int[],int,int,int)>(i39, i40, i2, i5, r1, i7, $i16, $i15);

        return $z0;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        java.util.Random $r2;
        int[] r0, r3;
        boolean $z0, $z1;
        float $f0, $f1;
        java.awt.Rectangle r6;
        long $l3;
        int i0, i1, $i2, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i34, i35;
        com.jhlabs.image.Colormap $r4, $r5;
        com.jhlabs.image.PlasmaFilter r1;

        r1 := @this: com.jhlabs.image.PlasmaFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: int[];

        r6 := @parameter3: java.awt.Rectangle;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        $r2 = r1.<com.jhlabs.image.PlasmaFilter: java.util.Random randomGenerator>;

        $l3 = r1.<com.jhlabs.image.PlasmaFilter: long seed>;

        virtualinvoke $r2.<java.util.Random: void setSeed(long)>($l3);

        i4 = i0 - 1;

        i5 = i1 - 1;

        $i6 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, 0, 0);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(0, 0, $i6, r0, i0);

        $i7 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, i4, 0);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i4, 0, $i7, r0, i0);

        $i8 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, 0, i5);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(0, i5, $i8, r0, i0);

        $i9 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, i4, i5);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i4, i5, $i9, r0, i0);

        $i12 = i4 / 2;

        $i13 = i5 / 2;

        $i11 = i4 / 2;

        $i10 = i5 / 2;

        $i14 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, $i11, $i10);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>($i12, $i13, $i14, r0, i0);

        $i16 = i5 / 2;

        $i15 = i5 / 2;

        $i17 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, 0, $i15);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(0, $i16, $i17, r0, i0);

        $i19 = i5 / 2;

        $i18 = i5 / 2;

        $i20 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, i4, $i18);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>(i4, $i19, $i20, r0, i0);

        $i22 = i4 / 2;

        $i21 = i4 / 2;

        $i23 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, $i21, 0);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>($i22, 0, $i23, r0, i0);

        $i25 = i4 / 2;

        $i24 = i4 / 2;

        $i26 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: int randomRGB(int[],int,int)>(r3, $i24, i5);

        specialinvoke r1.<com.jhlabs.image.PlasmaFilter: void putPixel(int,int,int,int[],int)>($i25, i5, $i26, r0, i0);

        i32 = 1;

     label1:
        $i28 = i0 - 1;

        $i27 = i1 - 1;

        $z0 = specialinvoke r1.<com.jhlabs.image.PlasmaFilter: boolean doPixel(int,int,int,int,int[],int,int,int)>(0, 0, $i28, $i27, r0, i0, i32, 0);

        if $z0 == 0 goto label2;

        i32 = i32 + 1;

        goto label1;

     label2:
        $z1 = r1.<com.jhlabs.image.PlasmaFilter: boolean useColormap>;

        if $z1 == 0 goto label6;

        $r4 = r1.<com.jhlabs.image.PlasmaFilter: com.jhlabs.image.Colormap colormap>;

        if $r4 == null goto label6;

        i33 = 0;

        i34 = 0;

     label3:
        if i34 >= i1 goto label6;

        i35 = 0;

     label4:
        if i35 >= i0 goto label5;

        $r5 = r1.<com.jhlabs.image.PlasmaFilter: com.jhlabs.image.Colormap colormap>;

        $i29 = r0[i33];

        $i30 = $i29 & 255;

        $f0 = (float) $i30;

        $f1 = $f0 / 255.0F;

        $i31 = interfaceinvoke $r5.<com.jhlabs.image.Colormap: int getColor(float)>($f1);

        r0[i33] = $i31;

        i33 = i33 + 1;

        i35 = i35 + 1;

        goto label4;

     label5:
        i34 = i34 + 1;

        goto label3;

     label6:
        return r0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.PlasmaFilter r0;

        r0 := @this: com.jhlabs.image.PlasmaFilter;

        return "Texture/Plasma...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.PlasmaFilter: long serialVersionUID> = 6491871753122667752L;

        return;
    }
}
