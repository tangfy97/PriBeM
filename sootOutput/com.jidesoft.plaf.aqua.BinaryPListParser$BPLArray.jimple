class com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray extends java.lang.Object
{
    java.util.ArrayList objectTable;
    int[] objref;

    private void <init>()
    {
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray r0;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object getValue(int)
    {
        int[] $r1;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray r0;
        int i0, $i1;
        java.lang.Object $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        i0 := @parameter0: int;

        $r2 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.util.ArrayList objectTable>;

        $r1 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i1 = $r1[i0];

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray r1;
        java.util.ArrayList $r4, $r12, $r15;
        int[] $r2, $r5, $r8, $r11, $r14;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r3, $r10;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Object $r13, $r16;

        r1 := @this: com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("Array{");

        i6 = 0;

     label1:
        $r2 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i0 = lengthof $r2;

        if i6 >= $i0 goto label5;

        if i6 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label2:
        $r4 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.util.ArrayList objectTable>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r5 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i2 = $r5[i6];

        if $i1 <= $i2 goto label3;

        $r12 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.util.ArrayList objectTable>;

        $r11 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i4 = $r11[i6];

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        if $r13 == r1 goto label3;

        $r15 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.util.ArrayList objectTable>;

        $r14 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i5 = $r14[i6];

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*");

        $r8 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i3 = $r8[i6];

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    void <init>(com.jidesoft.plaf.aqua.BinaryPListParser$1)
    {
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray r0;
        com.jidesoft.plaf.aqua.BinaryPListParser$1 r1;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        r1 := @parameter0: com.jidesoft.plaf.aqua.BinaryPListParser$1;

        specialinvoke r0.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: void <init>()>();

        return;
    }
}
