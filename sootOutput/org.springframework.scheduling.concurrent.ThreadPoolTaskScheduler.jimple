public class org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler extends org.springframework.scheduling.concurrent.ExecutorConfigurationSupport implements org.springframework.scheduling.TaskScheduler, org.springframework.scheduling.SchedulingTaskExecutor
{
    private volatile int poolSize;
    private volatile java.util.concurrent.ScheduledExecutorService scheduledExecutor;
    private volatile org.springframework.util.ErrorHandler errorHandler;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: int poolSize> = 1;

        return;
    }

    public void setPoolSize(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "\'poolSize\' must be 1 or higher");

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: int poolSize> = i0;

        return;
    }

    public void setErrorHandler(org.springframework.util.ErrorHandler)
    {
        org.springframework.util.ErrorHandler r0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r1;

        r1 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r0 := @parameter0: org.springframework.util.ErrorHandler;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'errorHandler\' must not be null");

        r1.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: org.springframework.util.ErrorHandler errorHandler> = r0;

        return;
    }

    protected java.util.concurrent.ExecutorService initializeExecutor(java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.RejectedExecutionHandler r2;
        int $i0;
        java.util.concurrent.ScheduledExecutorService $r3, $r4;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.util.concurrent.ThreadFactory r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        r2 := @parameter1: java.util.concurrent.RejectedExecutionHandler;

        $i0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: int poolSize>;

        $r3 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService createExecutor(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>($i0, r1, r2);

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor> = $r3;

        $r4 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        return $r4;
    }

    protected java.util.concurrent.ScheduledExecutorService createExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.RejectedExecutionHandler r2;
        int i0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r3;
        java.util.concurrent.ThreadFactory r1;

        r3 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ThreadFactory;

        r2 := @parameter2: java.util.concurrent.RejectedExecutionHandler;

        $r0 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, r1, r2);

        return $r0;
    }

    public java.util.concurrent.ScheduledExecutorService getScheduledExecutor() throws java.lang.IllegalStateException
    {
        java.util.concurrent.ScheduledExecutorService $r1, $r2;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z0, "ThreadPoolTaskScheduler not initialized");

        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        return $r2;
    }

    public void execute(java.lang.Runnable)
    {
        org.springframework.core.task.TaskRejectedException $r5;
        java.lang.Runnable r2, $r3;
        java.util.concurrent.RejectedExecutionException $r4;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r10;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

     label1:
        $r3 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 0);

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.core.task.TaskRejectedException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public void execute(java.lang.Runnable, long)
    {
        long l0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        org.springframework.core.task.TaskRejectedException $r6;
        java.lang.Runnable r2, $r3;
        java.util.concurrent.Future $r4;
        java.util.concurrent.RejectedExecutionException $r5;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r11;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

     label1:
        $r3 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 0);

        $r4 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.springframework.core.task.TaskRejectedException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable $r4;
        org.springframework.core.task.TaskRejectedException $r7;
        java.util.concurrent.Callable r13;
        org.springframework.util.ErrorHandler $r2, $r5;
        java.util.concurrent.Future $r3;
        java.util.concurrent.RejectedExecutionException $r6;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r13 := @parameter0: java.util.concurrent.Callable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

     label1:
        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        if $r2 == null goto label2;

        $r4 = new org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable;

        $r5 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        specialinvoke $r4.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable: void <init>(java.util.concurrent.Callable,org.springframework.util.ErrorHandler)>(r13, $r5);

        r13 = $r4;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r13);

     label3:
        return $r3;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.springframework.core.task.TaskRejectedException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch java.util.concurrent.RejectedExecutionException from label1 to label3 with label4;
    }

    public boolean prefersShortLivedTasks()
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        return 1;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)
    {
        java.util.concurrent.ScheduledFuture $r6;
        org.springframework.scheduling.Trigger r5;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r4;
        org.springframework.util.ErrorHandler $r2, $r14;
        java.util.concurrent.RejectedExecutionException $r7;
        org.springframework.scheduling.concurrent.ReschedulingRunnable $r3;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r13;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r4 := @parameter0: java.lang.Runnable;

        r5 := @parameter1: org.springframework.scheduling.Trigger;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

     label1:
        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        if $r2 == null goto label2;

        $r14 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        goto label3;

     label2:
        $r14 = staticinvoke <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean)>(1);

     label3:
        $r3 = new org.springframework.scheduling.concurrent.ReschedulingRunnable;

        specialinvoke $r3.<org.springframework.scheduling.concurrent.ReschedulingRunnable: void <init>(java.lang.Runnable,org.springframework.scheduling.Trigger,java.util.concurrent.ScheduledExecutorService,org.springframework.util.ErrorHandler)>(r4, r5, $r1, $r14);

        $r6 = virtualinvoke $r3.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture schedule()>();

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label4 with label5;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, java.util.Date)
    {
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date r2;
        long $l0, $l1, l2;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r3, $r4;
        java.util.concurrent.RejectedExecutionException $r7;
        java.util.concurrent.ScheduledExecutorService $r1;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r13;
        java.util.concurrent.TimeUnit $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r3 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.Date;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

     label1:
        $r4 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r3, 0);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, l2, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)
    {
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date r2;
        long $l0, $l1, l2, l3;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r3, $r4;
        java.util.concurrent.RejectedExecutionException $r7;
        java.util.concurrent.ScheduledExecutorService $r1;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r13;
        java.util.concurrent.TimeUnit $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r3 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.Date;

        l3 := @parameter2: long;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

     label1:
        $r4 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r3, 1);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r4, l2, l3, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long)
    {
        java.util.concurrent.ScheduledFuture $r5;
        long l0;
        org.springframework.core.task.TaskRejectedException $r7;
        java.lang.Runnable r2, $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.RejectedExecutionException $r6;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

     label1:
        $r3 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 1);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r3, 0L, l0, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.core.task.TaskRejectedException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)
    {
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date r2;
        long $l0, $l1, l2, l3;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r3, $r4;
        java.util.concurrent.RejectedExecutionException $r7;
        java.util.concurrent.ScheduledExecutorService $r1;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r13;
        java.util.concurrent.TimeUnit $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r3 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.Date;

        l3 := @parameter2: long;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

     label1:
        $r4 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r3, 1);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r4, l2, l3, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long)
    {
        java.util.concurrent.ScheduledFuture $r5;
        long l0;
        org.springframework.core.task.TaskRejectedException $r7;
        java.lang.Runnable r2, $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.RejectedExecutionException $r6;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r0;
        java.lang.String $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.util.concurrent.ScheduledExecutorService getScheduledExecutor()>();

     label1:
        $r3 = specialinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 1);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r3, 0L, l0, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.core.task.TaskRejectedException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private java.lang.Runnable errorHandlingTask(java.lang.Runnable, boolean)
    {
        org.springframework.util.ErrorHandler $r2;
        org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler r1;
        java.lang.Runnable r0;
        boolean z0;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable $r3;

        r1 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

        r0 := @parameter0: java.lang.Runnable;

        z0 := @parameter1: boolean;

        $r2 = r1.<org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        $r3 = staticinvoke <org.springframework.scheduling.support.TaskUtils: org.springframework.scheduling.support.DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(java.lang.Runnable,org.springframework.util.ErrorHandler,boolean)>(r0, $r2, z0);

        return $r3;
    }
}
