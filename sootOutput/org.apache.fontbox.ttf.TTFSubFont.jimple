public class org.apache.fontbox.ttf.TTFSubFont extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    private static final byte[] PAD_BUF;
    private final org.apache.fontbox.ttf.TrueTypeFont baseTTF;
    private final java.lang.String nameSuffix;
    private final org.apache.fontbox.ttf.CMAPEncodingEntry baseCmap;
    private final java.util.SortedMap characters;
    private final java.util.SortedSet glyphIds;

    public void <init>(org.apache.fontbox.ttf.TrueTypeFont, java.lang.String)
    {
        java.util.TreeSet $r4;
        org.apache.fontbox.ttf.CMAPEncodingEntry[] $r7;
        org.apache.fontbox.ttf.TrueTypeFont r1, $r5;
        org.apache.fontbox.ttf.CMAPTable $r6;
        java.util.TreeMap $r3;
        org.apache.fontbox.ttf.TTFSubFont r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r2;
        org.apache.fontbox.ttf.CMAPEncodingEntry r8, r9;

        r0 := @this: org.apache.fontbox.ttf.TTFSubFont;

        r1 := @parameter0: org.apache.fontbox.ttf.TrueTypeFont;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF> = r1;

        r0.<org.apache.fontbox.ttf.TTFSubFont: java.lang.String nameSuffix> = r2;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters> = $r3;

        $r4 = new java.util.TreeSet;

        specialinvoke $r4.<java.util.TreeSet: void <init>()>();

        r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds> = $r4;

        $r5 = r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r6 = virtualinvoke $r5.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.CMAPTable getCMAP()>();

        $r7 = virtualinvoke $r6.<org.apache.fontbox.ttf.CMAPTable: org.apache.fontbox.ttf.CMAPEncodingEntry[] getCmaps()>();

        r9 = null;

        i0 = lengthof $r7;

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        r8 = $r7[i4];

        $i1 = virtualinvoke r8.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformId()>();

        if $i1 == 0 goto label2;

        $i2 = virtualinvoke r8.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformId()>();

        if $i2 != 3 goto label3;

        $i3 = virtualinvoke r8.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformEncodingId()>();

        if $i3 != 1 goto label3;

     label2:
        r9 = r8;

        goto label4;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.CMAPEncodingEntry baseCmap> = r9;

        virtualinvoke r0.<org.apache.fontbox.ttf.TTFSubFont: void addCharCode(int)>(0);

        return;
    }

    public void addCharCode(int)
    {
        java.util.SortedSet $r5;
        java.lang.Integer $r2, $r4;
        org.apache.fontbox.ttf.TTFSubFont r0;
        int i0, $i1, $i2;
        org.apache.fontbox.ttf.CMAPEncodingEntry $r1;
        java.util.SortedMap $r3;

        r0 := @this: org.apache.fontbox.ttf.TTFSubFont;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.CMAPEncodingEntry baseCmap>;

        $i1 = virtualinvoke $r1.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>(i0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        if i0 == 0 goto label1;

        $i2 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if $i2 == 0 goto label2;

     label1:
        $r3 = r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        $r5 = r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        interfaceinvoke $r5.<java.util.SortedSet: boolean add(java.lang.Object)>($r2);

     label2:
        return;
    }

    private static int log2i(int)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8, $i10;

        i5 := @parameter0: int;

        $i8 = (int) -1;

        i6 = $i8;

        $i0 = i5 & -65536;

        if $i0 == 0 goto label1;

        i5 = i5 >>> 16;

        i6 = 15;

     label1:
        $i10 = (int) 65280;

        $i1 = i5 & $i10;

        if $i1 == 0 goto label2;

        i5 = i5 >>> 8;

        i6 = i6 + 8;

     label2:
        $i2 = i5 & 240;

        if $i2 == 0 goto label3;

        i5 = i5 >>> 4;

        i6 = i6 + 4;

     label3:
        $i3 = i5 & 12;

        if $i3 == 0 goto label4;

        i5 = i5 >>> 2;

        i6 = i6 + 2;

     label4:
        $i4 = i5 & 2;

        if $i4 == 0 goto label5;

        i5 = i5 >>> 1;

        i6 = i6 + 1;

     label5:
        if i5 == 0 goto label6;

        i6 = i6 + 1;

     label6:
        return i6;
    }

    private static long buildUint32(int, int)
    {
        long $l1, $l2, $l4, $l5, $l6, $l7;
        int i0, i3;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $l1 = (long) i0;

        $l2 = $l1 & 65535L;

        $l6 = $l2 << 16;

        $l4 = (long) i3;

        $l5 = $l4 & 65535L;

        $l7 = $l6 | $l5;

        return $l7;
    }

    private static long buildUint32(byte[])
    {
        byte[] r0;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17;
        byte $b0, $b3, $b8, $b13;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        $l1 = (long) $b0;

        $l2 = $l1 & 255L;

        $l7 = $l2 << 24;

        $b3 = r0[1];

        $l4 = (long) $b3;

        $l5 = $l4 & 255L;

        $l6 = $l5 << 16;

        $l12 = $l7 | $l6;

        $b8 = r0[2];

        $l9 = (long) $b8;

        $l10 = $l9 & 255L;

        $l11 = $l10 << 8;

        $l16 = $l12 | $l11;

        $b13 = r0[3];

        $l14 = (long) $b13;

        $l15 = $l14 & 255L;

        $l17 = $l16 | $l15;

        return $l17;
    }

    private static long writeFileHeader(java.io.DataOutputStream, int) throws java.io.IOException
    {
        long $l6, $l7, $l8, $l9;
        java.io.DataOutputStream r0;
        int i0, $i1, i2, $i3, $i4, i5;

        r0 := @parameter0: java.io.DataOutputStream;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>(65536);

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>(i0);

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i0);

        i2 = $i1 * 16;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>(i2);

        $i3 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: int log2i(int)>($i1);

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i3);

        $i4 = 16 * i0;

        i5 = $i4 - i2;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>(i5);

        $l6 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: long buildUint32(int,int)>(i0, i2);

        $l7 = 65536L + $l6;

        $l8 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: long buildUint32(int,int)>($i3, i5);

        $l9 = $l7 + $l8;

        return $l9;
    }

    private static long writeTableHeader(java.io.DataOutputStream, java.lang.String, long, byte[]) throws java.io.IOException
    {
        byte[] r0, $r8;
        java.lang.Integer $r6;
        java.io.DataOutputStream r9;
        byte $b13;
        java.lang.Long $r4, $r5;
        java.lang.Object[] $r1;
        long l1, $l6, $l7, $l8, $l10, $l11, $l12, $l14, $l18, $l19, l20, l22;
        int i0, $i2, $i3, $i4, $i5, $i9, $i15, $i16, $i17, i21;
        java.lang.String r2, $r7;
        org.apache.commons.logging.Log $r3;

        r9 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        r0 := @parameter3: byte[];

        i0 = lengthof r0;

        l20 = 0L;

        i21 = 0;

     label1:
        if i21 >= i0 goto label2;

        $b13 = r0[i21];

        $l14 = (long) $b13;

        $l18 = $l14 & 255L;

        $i15 = i21 % 4;

        $i16 = $i15 * 8;

        $i17 = 24 - $i16;

        $l19 = $l18 << $i17;

        l20 = l20 + $l19;

        i21 = i21 + 1;

        goto label1;

     label2:
        l22 = l20 & 4294967295L;

        $r3 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r1 = newarray (java.lang.Object)[4];

        $r1[0] = r2;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l22);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[2] = $r5;

        $i2 = lengthof r0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Writing table header [%s,%08x,%08x,%08x]", $r1);

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

        $r8 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        virtualinvoke r9.<java.io.DataOutputStream: void write(byte[],int,int)>($r8, 0, 4);

        $i3 = (int) l22;

        virtualinvoke r9.<java.io.DataOutputStream: void writeInt(int)>($i3);

        $i4 = (int) l1;

        virtualinvoke r9.<java.io.DataOutputStream: void writeInt(int)>($i4);

        $i5 = lengthof r0;

        virtualinvoke r9.<java.io.DataOutputStream: void writeInt(int)>($i5);

        $l6 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: long buildUint32(byte[])>($r8);

        $l7 = $l6 + l22;

        $l8 = $l7 + l22;

        $l11 = $l8 + l1;

        $i9 = lengthof r0;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        return $l12;
    }

    private static void writeTableBody(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] r0, $r2;
        int i0, $i1, $i2, $i3;

        r1 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: byte[];

        i0 = lengthof r0;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        $i1 = i0 % 4;

        if $i1 == 0 goto label1;

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: byte[] PAD_BUF>;

        $i2 = i0 % 4;

        $i3 = 4 - $i2;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i3);

     label1:
        return;
    }

    private static void writeFixed(java.io.DataOutputStream, double) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int $i0, $i1;
        double d0, $d1, $d2, d3;

        r0 := @parameter0: java.io.DataOutputStream;

        d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        $d2 = d0 - $d1;

        d3 = $d2 * 65536.0;

        $i0 = (int) $d1;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i1 = (int) d3;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i1);

        return;
    }

    private static void writeUint32(java.io.DataOutputStream, long) throws java.io.IOException
    {
        int $i1;
        long l0;
        java.io.DataOutputStream r0;

        r0 := @parameter0: java.io.DataOutputStream;

        l0 := @parameter1: long;

        $i1 = (int) l0;

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i1);

        return;
    }

    private static void writeUint16(java.io.DataOutputStream, int) throws java.io.IOException
    {
        int i0;
        java.io.DataOutputStream r0;

        r0 := @parameter0: java.io.DataOutputStream;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>(i0);

        return;
    }

    private static void writeSint16(java.io.DataOutputStream, short) throws java.io.IOException
    {
        int $i1;
        short s0;
        java.io.DataOutputStream r0;

        r0 := @parameter0: java.io.DataOutputStream;

        s0 := @parameter1: short;

        $i1 = (int) s0;

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i1);

        return;
    }

    private static void writeUint8(java.io.DataOutputStream, int) throws java.io.IOException
    {
        int i0;
        java.io.DataOutputStream r0;

        r0 := @parameter0: java.io.DataOutputStream;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.io.DataOutputStream: void writeByte(int)>(i0);

        return;
    }

    private static void writeLongDateTime(java.io.DataOutputStream, java.util.Calendar) throws java.io.IOException
    {
        java.util.Calendar r1;
        java.util.GregorianCalendar $r0;
        java.io.DataOutputStream r2;
        long $l0, $l1, $l2, l3;

        r2 := @parameter0: java.io.DataOutputStream;

        r1 := @parameter1: java.util.Calendar;

        $r0 = new java.util.GregorianCalendar;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>(int,int,int)>(1904, 0, 1);

        $l0 = virtualinvoke $r0.<java.util.GregorianCalendar: long getTimeInMillis()>();

        $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>();

        $l2 = $l1 - $l0;

        l3 = $l2 / 1000L;

        virtualinvoke r2.<java.io.DataOutputStream: void writeLong(long)>(l3);

        return;
    }

    private byte[] buildHeadTable() throws java.io.IOException
    {
        byte[] $r9;
        java.io.ByteArrayOutputStream $r0;
        long $l0;
        short $s3, $s4, $s5, $s6, $s9, $s10;
        java.util.Calendar $r6, $r7;
        java.io.DataOutputStream $r1;
        org.apache.fontbox.ttf.HeaderTable $r5;
        org.apache.fontbox.ttf.TTFSubFont r3;
        int $i1, $i2, $i7, $i8;
        double $d0, $d1;
        org.apache.fontbox.ttf.TrueTypeFont $r4;
        float $f0, $f1;
        org.apache.commons.logging.Log $r2, $r8;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [head]...");

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r5 = virtualinvoke $r4.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HeaderTable getHeader()>();

        $f0 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: float getVersion()>();

        $d0 = (double) $f0;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeFixed(java.io.DataOutputStream,double)>($r1, $d0);

        $f1 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: float getFontRevision()>();

        $d1 = (double) $f1;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeFixed(java.io.DataOutputStream,double)>($r1, $d1);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, 0L);

        $l0 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: long getMagicNumber()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, $l0);

        $i1 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: int getFlags()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i1);

        $i2 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: int getUnitsPerEm()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i2);

        $r6 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: java.util.Calendar getCreated()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeLongDateTime(java.io.DataOutputStream,java.util.Calendar)>($r1, $r6);

        $r7 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: java.util.Calendar getModified()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeLongDateTime(java.io.DataOutputStream,java.util.Calendar)>($r1, $r7);

        $s3 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: short getXMin()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s3);

        $s4 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: short getYMin()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s4);

        $s5 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: short getXMax()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s5);

        $s6 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: short getYMax()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s6);

        $i7 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: int getMacStyle()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i7);

        $i8 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: int getLowestRecPPEM()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i8);

        $s9 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: short getFontDirectionHint()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s9);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, 1);

        $s10 = virtualinvoke $r5.<org.apache.fontbox.ttf.HeaderTable: short getGlyphDataFormat()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s10);

        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        $r8 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [head].");

        $r9 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r9;
    }

    private byte[] buildHheaTable() throws java.io.IOException
    {
        byte[] $r11;
        java.io.ByteArrayOutputStream $r0;
        java.util.SortedSet $r6, $r9;
        java.lang.Integer $r7, $r8;
        org.apache.fontbox.ttf.HorizontalHeaderTable $r5;
        short $s0, $s1, $s2, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14;
        java.io.DataOutputStream $r1;
        org.apache.fontbox.ttf.TTFSubFont r3;
        int $i3, $i15, $i16;
        double $d0;
        org.apache.fontbox.ttf.TrueTypeFont $r4;
        float $f0;
        org.apache.commons.logging.Log $r2, $r10;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [hhea]...");

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r5 = virtualinvoke $r4.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalHeaderTable getHorizontalHeader()>();

        $f0 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: float getVersion()>();

        $d0 = (double) $f0;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeFixed(java.io.DataOutputStream,double)>($r1, $d0);

        $s0 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getAscender()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s0);

        $s1 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getDescender()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s1);

        $s2 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getLineGap()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s2);

        $i3 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getAdvanceWidthMax()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i3);

        $s4 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getMinLeftSideBearing()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s4);

        $s5 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getMinRightSideBearing()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s5);

        $s6 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getXMaxExtent()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s6);

        $s7 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getCaretSlopeRise()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s7);

        $s8 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getCaretSlopeRun()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s8);

        $s9 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getReserved1()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s9);

        $s10 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getReserved2()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s10);

        $s11 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getReserved3()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s11);

        $s12 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getReserved4()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s12);

        $s13 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getReserved5()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s13);

        $s14 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getMetricDataFormat()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s14);

        $r6 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i15 = virtualinvoke $r5.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getNumberOfHMetrics()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r9 = interfaceinvoke $r6.<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>($r7, $r8);

        $i16 = interfaceinvoke $r9.<java.util.SortedSet: int size()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i16);

        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        $r10 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [hhea].");

        $r11 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r11;
    }

    private static boolean replicateNameRecord(org.apache.fontbox.ttf.NameRecord)
    {
        org.apache.fontbox.ttf.NameRecord r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @parameter0: org.apache.fontbox.ttf.NameRecord;

        $i0 = virtualinvoke r0.<org.apache.fontbox.ttf.NameRecord: int getPlatformId()>();

        if $i0 != 3 goto label1;

        $i1 = virtualinvoke r0.<org.apache.fontbox.ttf.NameRecord: int getPlatformEncodingId()>();

        if $i1 != 1 goto label1;

        $i2 = virtualinvoke r0.<org.apache.fontbox.ttf.NameRecord: int getLanguageId()>();

        if $i2 != 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        if $i3 < 0 goto label1;

        $i4 = virtualinvoke r0.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        if $i4 >= 7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private byte[] buildNameTable() throws java.io.IOException
    {
        byte[] $r10, $r11, $r13, $r14, $r38;
        java.io.DataOutputStream $r1;
        byte[][] r33;
        java.lang.StringBuilder $r17, $r18, $r20, $r22, $r24, $r25, $r26, $r28, $r29;
        java.io.ByteArrayOutputStream $r0;
        java.util.ArrayList $r6;
        java.lang.String $r16, $r19, $r27, $r30, r35, $r36, r37;
        org.apache.fontbox.ttf.NameRecord $r7, $r8, r32, r34, r39;
        org.apache.fontbox.ttf.TTFSubFont r3;
        org.apache.fontbox.ttf.NamingTable $r5;
        boolean $z0, $z1, $z2;
        java.util.List r31;
        org.apache.fontbox.ttf.TrueTypeFont $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i16, i17, i18, i19, i20;
        org.apache.commons.logging.Log $r2, $r9, $r23;
        java.lang.Object $r12, $r15, $r21;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [name]...");

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r5 = virtualinvoke $r4.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.NamingTable getNaming()>();

        if $r5 == null goto label01;

        r31 = virtualinvoke $r5.<org.apache.fontbox.ttf.NamingTable: java.util.List getNameRecords()>();

        goto label02;

     label01:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r31 = $r6;

        $r7 = new org.apache.fontbox.ttf.NameRecord;

        specialinvoke $r7.<org.apache.fontbox.ttf.NameRecord: void <init>()>();

        virtualinvoke $r7.<org.apache.fontbox.ttf.NameRecord: void setPlatformId(int)>(3);

        virtualinvoke $r7.<org.apache.fontbox.ttf.NameRecord: void setPlatformEncodingId(int)>(1);

        virtualinvoke $r7.<org.apache.fontbox.ttf.NameRecord: void setLanguageId(int)>(0);

        virtualinvoke $r7.<org.apache.fontbox.ttf.NameRecord: void setNameId(int)>(1);

        virtualinvoke $r7.<org.apache.fontbox.ttf.NameRecord: void setString(java.lang.String)>("PDFBox-Dummy-Familyname");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new org.apache.fontbox.ttf.NameRecord;

        specialinvoke $r8.<org.apache.fontbox.ttf.NameRecord: void <init>()>();

        virtualinvoke $r8.<org.apache.fontbox.ttf.NameRecord: void setPlatformId(int)>(3);

        virtualinvoke $r8.<org.apache.fontbox.ttf.NameRecord: void setPlatformEncodingId(int)>(1);

        virtualinvoke $r8.<org.apache.fontbox.ttf.NameRecord: void setLanguageId(int)>(0);

        virtualinvoke $r8.<org.apache.fontbox.ttf.NameRecord: void setNameId(int)>(4);

        virtualinvoke $r8.<org.apache.fontbox.ttf.NameRecord: void setString(java.lang.String)>("PDFBox-Dummy-Fullname");

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

     label02:
        $i0 = interfaceinvoke r31.<java.util.List: int size()>();

        i12 = 0;

        i13 = 0;

     label03:
        if i13 >= $i0 goto label05;

        $r21 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i13);

        r32 = (org.apache.fontbox.ttf.NameRecord) $r21;

        $z2 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: boolean replicateNameRecord(org.apache.fontbox.ttf.NameRecord)>(r32);

        if $z2 == 0 goto label04;

        $r23 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing name record [");

        $i11 = virtualinvoke r32.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], [");

        $r27 = virtualinvoke r32.<org.apache.fontbox.ttf.NameRecord: java.lang.String getString()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r30);

        i12 = i12 + 1;

     label04:
        i13 = i13 + 1;

        goto label03;

     label05:
        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, 0);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, i12);

        $i1 = 12 * i12;

        $i2 = 6 + $i1;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i2);

        r33 = newarray (byte[])[i12];

        i14 = 0;

        i15 = 0;

     label06:
        if i15 >= $i0 goto label13;

        $r15 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i15);

        r34 = (org.apache.fontbox.ttf.NameRecord) $r15;

        $z1 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: boolean replicateNameRecord(org.apache.fontbox.ttf.NameRecord)>(r34);

        if $z1 == 0 goto label12;

        $i9 = virtualinvoke r34.<org.apache.fontbox.ttf.NameRecord: int getPlatformId()>();

        $i10 = virtualinvoke r34.<org.apache.fontbox.ttf.NameRecord: int getPlatformEncodingId()>();

        r35 = "ISO-8859-1";

        if $i9 != 3 goto label07;

        if $i10 != 1 goto label07;

        r35 = "UTF-16BE";

        goto label10;

     label07:
        if $i9 != 2 goto label10;

        if $i10 != 0 goto label08;

        r35 = "US-ASCII";

        goto label10;

     label08:
        if $i10 != 1 goto label09;

        r35 = "UTF16-BE";

        goto label10;

     label09:
        if $i10 != 2 goto label10;

        r35 = "ISO-8859-1";

     label10:
        $r36 = virtualinvoke r34.<org.apache.fontbox.ttf.NameRecord: java.lang.String getString()>();

        r37 = $r36;

        $i16 = virtualinvoke r34.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        if $i16 != 6 goto label11;

        $r16 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.lang.String nameSuffix>;

        if $r16 == null goto label11;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r19 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.lang.String nameSuffix>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r37 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $r38 = virtualinvoke r37.<java.lang.String: byte[] getBytes(java.lang.String)>(r35);

        r33[i14] = $r38;

        i14 = i14 + 1;

     label12:
        i15 = i15 + 1;

        goto label06;

     label13:
        i17 = 0;

        i18 = 0;

        i19 = 0;

     label14:
        if i19 >= $i0 goto label16;

        $r12 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i19);

        r39 = (org.apache.fontbox.ttf.NameRecord) $r12;

        $z0 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: boolean replicateNameRecord(org.apache.fontbox.ttf.NameRecord)>(r39);

        if $z0 == 0 goto label15;

        $i3 = virtualinvoke r39.<org.apache.fontbox.ttf.NameRecord: int getPlatformId()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i3);

        $i4 = virtualinvoke r39.<org.apache.fontbox.ttf.NameRecord: int getPlatformEncodingId()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i4);

        $i5 = virtualinvoke r39.<org.apache.fontbox.ttf.NameRecord: int getLanguageId()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i5);

        $i6 = virtualinvoke r39.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i6);

        $r13 = r33[i18];

        $i7 = lengthof $r13;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i7);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, i17);

        $r14 = r33[i18];

        $i8 = lengthof $r14;

        i17 = i17 + $i8;

        i18 = i18 + 1;

     label15:
        i19 = i19 + 1;

        goto label14;

     label16:
        i20 = 0;

     label17:
        if i20 >= i12 goto label18;

        $r11 = r33[i20];

        virtualinvoke $r1.<java.io.DataOutputStream: void write(byte[])>($r11);

        i20 = i20 + 1;

        goto label17;

     label18:
        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        $r9 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [name].");

        $r10 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;
    }

    private byte[] buildMaxpTable() throws java.io.IOException
    {
        byte[] $r8;
        java.io.ByteArrayOutputStream $r0;
        java.util.SortedSet $r6;
        java.io.DataOutputStream $r1;
        org.apache.fontbox.ttf.TTFSubFont r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.fontbox.ttf.MaximumProfileTable $r5;
        org.apache.fontbox.ttf.TrueTypeFont $r4;
        org.apache.commons.logging.Log $r2, $r7;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [maxp]...");

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r5 = virtualinvoke $r4.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.MaximumProfileTable getMaximumProfile()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeFixed(java.io.DataOutputStream,double)>($r1, 1.0);

        $r6 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $i0 = interfaceinvoke $r6.<java.util.SortedSet: int size()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i0);

        $i1 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxPoints()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i1);

        $i2 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxContours()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i2);

        $i3 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxCompositePoints()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i3);

        $i4 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxCompositeContours()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i4);

        $i5 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxZones()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i5);

        $i6 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxTwilightPoints()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i6);

        $i7 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxStorage()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i7);

        $i8 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxFunctionDefs()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i8);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, 0);

        $i9 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxStackElements()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i9);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, 0);

        $i10 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxComponentElements()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i10);

        $i11 = virtualinvoke $r5.<org.apache.fontbox.ttf.MaximumProfileTable: int getMaxComponentDepth()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i11);

        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        $r7 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [maxp].");

        $r8 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r8;
    }

    private byte[] buildOS2Table() throws java.io.IOException
    {
        byte[] $r6, $r8, $r19;
        java.lang.Integer $r14, $r17;
        java.io.DataOutputStream $r1;
        org.apache.fontbox.ttf.TTFSubFont r2;
        java.util.Set $r10;
        org.apache.fontbox.ttf.OS2WindowsMetricsTable $r4, $r20, r22;
        org.apache.fontbox.ttf.TrueTypeFont $r3;
        java.util.SortedMap $r9, $r15;
        java.io.ByteArrayOutputStream $r0;
        short $s0, $s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13;
        int $i1, $i2, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.String $r7;
        java.util.Map$Entry $r21;
        java.util.Iterator $r11;
        org.apache.commons.logging.Log $r5, $r18;
        java.lang.Object $r12, $r13, $r16;

        r2 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.OS2WindowsMetricsTable getOS2Windows()>();

        r22 = $r4;

        if $r4 != null goto label1;

        $r20 = new org.apache.fontbox.ttf.OS2WindowsMetricsTable;

        specialinvoke $r20.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: void <init>()>();

        r22 = $r20;

     label1:
        $r5 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [OS/2]...");

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, 0);

        $s0 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getAverageCharWidth()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s0);

        $i1 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getWeightClass()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i1);

        $i2 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getWidthClass()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i2);

        $s3 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getFsType()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s3);

        $s4 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSubscriptXSize()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s4);

        $s5 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSubscriptYSize()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s5);

        $s6 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSubscriptXOffset()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s6);

        $s7 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSubscriptYOffset()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s7);

        $s8 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSuperscriptXSize()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s8);

        $s9 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSuperscriptYSize()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s9);

        $s10 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSuperscriptXOffset()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s10);

        $s11 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getSuperscriptYOffset()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s11);

        $s12 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getStrikeoutSize()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s12);

        $s13 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: short getStrikeoutPosition()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r1, $s13);

        $i14 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getFamilyClass()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint8(java.io.DataOutputStream,int)>($r1, $i14);

        $i15 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getFamilySubClass()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint8(java.io.DataOutputStream,int)>($r1, $i15);

        $r6 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: byte[] getPanose()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void write(byte[])>($r6);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, 0L);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, 0L);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, 0L);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, 0L);

        $r7 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: java.lang.String getAchVendId()>();

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r1.<java.io.DataOutputStream: void write(byte[])>($r8);

        $r9 = r2.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $r10 = interfaceinvoke $r9.<java.util.SortedMap: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.util.Map$Entry) $r12;

        $i16 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getFsSelection()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i16);

        $r13 = interfaceinvoke $r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.Integer) $r13;

        $i17 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i17);

        $r15 = r2.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $r16 = interfaceinvoke $r15.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r17 = (java.lang.Integer) $r16;

        $i18 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i18);

        $i19 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getTypoAscender()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i19);

        $i20 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getTypoDescender()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i20);

        $i21 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getTypeLineGap()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i21);

        $i22 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getWinAscent()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i22);

        $i23 = virtualinvoke r22.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getWinDescent()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r1, $i23);

        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        $r18 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [OS/2].");

        $r19 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r19;
    }

    private byte[] buildLocaTable(long[]) throws java.io.IOException
    {
        byte[] $r5;
        java.io.ByteArrayOutputStream $r0;
        long l1;
        long[] r3;
        java.io.DataOutputStream $r1;
        org.apache.fontbox.ttf.TTFSubFont r6;
        int i0, i2;
        org.apache.commons.logging.Log $r2, $r4;

        r6 := @this: org.apache.fontbox.ttf.TTFSubFont;

        r3 := @parameter0: long[];

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [loca]...");

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        l1 = r3[i2];

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r1, l1);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        $r4 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [loca].");

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;
    }

    private boolean addCompoundReferences() throws java.io.IOException
    {
        byte[] r13;
        java.lang.Integer r12, $r15, $r23;
        byte $b10, $b11, $b12, $b15, $b18, $b21;
        org.apache.fontbox.ttf.GlyphTable $r2;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r27;
        java.lang.Throwable $r25;
        long $l0, l2, $l5, l6, $l7, l29;
        java.util.TreeSet r26, $r28;
        org.apache.fontbox.ttf.IndexToLocationTable $r4;
        short $s13, $s16, $s19, $s22, $s43, $s45, $s47, $s49;
        java.lang.String $r22;
        java.util.SortedSet $r8, $r10, $r14;
        org.apache.fontbox.ttf.TTFSubFont r0;
        boolean $z0, $z1, $z2;
        org.apache.fontbox.ttf.TrueTypeFont $r1, $r3, $r6;
        long[] $r5;
        int $i1, $i3, $i4, $i8, $i9, $i14, $i17, $i20, $i23, $i24, $i25, $i26, $i27, $i28, i30, i31, i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i42, $i44, $i46, $i48, $i50;
        java.util.Iterator $r9;
        java.lang.Object $r11;
        org.apache.commons.logging.Log $r17;
        java.io.InputStream $r7;

        r0 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r1 = r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r2 = virtualinvoke $r1.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.GlyphTable getGlyph()>();

        $r3 = r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.IndexToLocationTable getIndexToLocation()>();

        $r5 = virtualinvoke $r4.<org.apache.fontbox.ttf.IndexToLocationTable: long[] getOffsets()>();

        $r6 = r0.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r7 = virtualinvoke $r6.<org.apache.fontbox.ttf.TrueTypeFont: java.io.InputStream getOriginalData()>();

        r26 = null;

     label01:
        $l0 = virtualinvoke $r2.<org.apache.fontbox.ttf.GlyphTable: long getOffset()>();

        virtualinvoke $r7.<java.io.InputStream: long skip(long)>($l0);

        l29 = 0L;

        $r8 = r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r9 = interfaceinvoke $r8.<java.util.SortedSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        l2 = $r5[$i1];

        $i3 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        $i4 = $i3 + 1;

        $l5 = $r5[$i4];

        l6 = $l5 - l2;

        $l7 = l2 - l29;

        virtualinvoke $r7.<java.io.InputStream: long skip(long)>($l7);

        $i8 = (int) l6;

        r13 = newarray (byte)[$i8];

        virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r13);

        $i9 = lengthof r13;

        if $i9 < 2 goto label11;

        $b10 = r13[0];

        $i37 = (int) $b10;

        $i39 = (int) -1;

        if $i37 != $i39 goto label11;

        $b11 = r13[1];

        $i40 = (int) $b11;

        $i42 = (int) -1;

        if $i40 != $i42 goto label11;

        i30 = 10;

     label03:
        $b12 = r13[i30];

        $s43 = (short) $b12;

        $s13 = $s43 & 255;

        $i44 = (int) $s13;

        $i17 = $i44 << 8;

        $i14 = i30 + 1;

        $b15 = r13[$i14];

        $s45 = (short) $b15;

        $s16 = $s45 & 255;

        $i46 = (int) $s16;

        $i27 = $i17 | $i46;

        i31 = i30 + 2;

        $b18 = r13[i31];

        $s47 = (short) $b18;

        $s19 = $s47 & 255;

        $i48 = (int) $s19;

        $i23 = $i48 << 8;

        $i20 = i31 + 1;

        $b21 = r13[$i20];

        $s49 = (short) $b21;

        $s22 = $s49 & 255;

        $i50 = (int) $s22;

        $i28 = $i23 | $i50;

        $r14 = r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i28);

        $z1 = interfaceinvoke $r14.<java.util.SortedSet: boolean contains(java.lang.Object)>($r15);

        if $z1 != 0 goto label05;

        $r17 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding referenced glyph ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of compound glyph ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

        if r26 != null goto label04;

        $r28 = new java.util.TreeSet;

        specialinvoke $r28.<java.util.TreeSet: void <init>()>();

        r26 = $r28;

     label04:
        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i28);

        interfaceinvoke r26.<java.util.Set: boolean add(java.lang.Object)>($r23);

     label05:
        i32 = i31 + 2;

        $i33 = $i27 & 1;

        if $i33 == 0 goto label06;

        i30 = i32 + 4;

        goto label07;

     label06:
        i30 = i32 + 2;

     label07:
        $i24 = $i27 & 128;

        if $i24 == 0 goto label08;

        i30 = i30 + 8;

        goto label10;

     label08:
        $i25 = $i27 & 64;

        if $i25 == 0 goto label09;

        i30 = i30 + 4;

        goto label10;

     label09:
        $i26 = $i27 & 8;

        if $i26 == 0 goto label10;

        i30 = i30 + 2;

     label10:
        $i34 = $i27 & 32;

        if $i34 != 0 goto label03;

     label11:
        $i35 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        $i36 = $i35 + 1;

        l29 = $r5[$i36];

        goto label02;

     label12:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

        goto label15;

     label13:
        $r25 := @caughtexception;

     label14:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

        throw $r25;

     label15:
        if r26 == null goto label16;

        $r10 = r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        interfaceinvoke $r10.<java.util.SortedSet: boolean addAll(java.util.Collection)>(r26);

     label16:
        if r26 != null goto label17;

        $z2 = 1;

        goto label18;

     label17:
        $z2 = 0;

     label18:
        return $z2;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private byte[] buildGlyfTable(long[]) throws java.io.IOException
    {
        byte[] $r14, r17, $r18;
        java.lang.Integer r16, $r25, $r26, $r30, $r31, $r32, $r35;
        byte $b16, $b18, $b23, $b26, $b35, $b36, $b37, $b39, $b40, $b43, $b46, $b49, $b54, $b55, $b79;
        java.lang.StringBuilder $r21, $r22, $r38;
        java.lang.Object[] $r28;
        java.io.ByteArrayOutputStream $r37;
        long $l0, l2, $l5, l6, $l8, $l13, $l14, $l15, $l22, $l34, $l63, l64, l65, l74, l76, $l78;
        org.apache.fontbox.ttf.IndexToLocationTable $r6;
        short $s17, $s19, $s24, $s27, $s38, $s41, $s44, $s47, $s50, $s87, $s88, $s90, $s92, $s94, $s96, $s98, $s100, $s102;
        java.util.SortedSet $r10, $r24, $r34;
        org.apache.fontbox.ttf.TrueTypeFont $r3, $r5, $r8;
        long[] $r7, r12;
        int $i1, $i3, $i4, $i7, $i9, $i10, $i11, $i12, $i20, $i21, $i25, $i28, $i29, $i30, $i31, $i32, $i33, $i42, $i45, $i48, $i51, $i52, $i53, $i56, $i57, $i58, $i59, $i60, $i61, $i62, i66, i67, i68, i69, $i70, $i71, i72, i73, i75, i77, i80, $i81, $i83, $i84, $i86, $i89, $i91, $i93, $i95, $i97, $i99, $i101, $i103;
        java.lang.Object $r15;
        org.apache.fontbox.ttf.GlyphTable $r4;
        java.lang.Throwable $r36;
        java.lang.String $r23, $r33;
        org.apache.fontbox.ttf.TTFSubFont r2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r11;
        org.apache.commons.logging.Log $r1, $r13, $r20, $r27, $r29;
        java.io.InputStream $r9;

        r2 := @this: org.apache.fontbox.ttf.TTFSubFont;

        r12 := @parameter0: long[];

        $r37 = new java.io.ByteArrayOutputStream;

        specialinvoke $r37.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [glyf]...");

        $r3 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.GlyphTable getGlyph()>();

        $r5 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r6 = virtualinvoke $r5.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.IndexToLocationTable getIndexToLocation()>();

        $r7 = virtualinvoke $r6.<org.apache.fontbox.ttf.IndexToLocationTable: long[] getOffsets()>();

        $r8 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r9 = virtualinvoke $r8.<org.apache.fontbox.ttf.TrueTypeFont: java.io.InputStream getOriginalData()>();

     label01:
        $l0 = virtualinvoke $r4.<org.apache.fontbox.ttf.GlyphTable: long getOffset()>();

        virtualinvoke $r9.<java.io.InputStream: long skip(long)>($l0);

        l64 = 0L;

        l65 = 0L;

        i66 = 0;

        $r10 = r2.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r11 = interfaceinvoke $r10.<java.util.SortedSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r15 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.Integer) $r15;

        $i1 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

        l2 = $r7[$i1];

        $i3 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

        $i4 = $i3 + 1;

        $l5 = $r7[$i4];

        l6 = $l5 - l2;

        $i7 = i66;

        i66 = i66 + 1;

        r12[$i7] = l65;

        $l8 = l2 - l64;

        virtualinvoke $r9.<java.io.InputStream: long skip(long)>($l8);

        $i9 = (int) l6;

        r17 = newarray (byte)[$i9];

        virtualinvoke $r9.<java.io.InputStream: int read(byte[])>(r17);

        $i10 = lengthof r17;

        if $i10 < 2 goto label11;

        $b35 = r17[0];

        $i81 = (int) $b35;

        $i83 = (int) -1;

        if $i81 != $i83 goto label11;

        $b36 = r17[1];

        $i84 = (int) $b36;

        $i86 = (int) -1;

        if $i84 != $i86 goto label11;

        $r20 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compound glyph ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r23);

        i67 = 10;

     label03:
        $b37 = r17[i67];

        $s87 = (short) $b37;

        $s38 = $s87 & 254;

        $b39 = (byte) $s38;

        r17[i67] = $b39;

        $b40 = r17[i67];

        $s88 = (short) $b40;

        $s41 = $s88 & 255;

        $i89 = (int) $s41;

        $i45 = $i89 << 8;

        $i42 = i67 + 1;

        $b43 = r17[$i42];

        $s90 = (short) $b43;

        $s44 = $s90 & 255;

        $i91 = (int) $s44;

        $i61 = $i45 | $i91;

        i68 = i67 + 2;

        $b46 = r17[i68];

        $s92 = (short) $b46;

        $s47 = $s92 & 255;

        $i93 = (int) $s47;

        $i51 = $i93 << 8;

        $i48 = i68 + 1;

        $b49 = r17[$i48];

        $s94 = (short) $b49;

        $s50 = $s94 & 255;

        $i95 = (int) $s50;

        $i62 = $i51 | $i95;

        $r24 = r2.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i62);

        $z1 = interfaceinvoke $r24.<java.util.SortedSet: boolean contains(java.lang.Object)>($r25);

        if $z1 != 0 goto label04;

        $r34 = r2.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i62);

        interfaceinvoke $r34.<java.util.SortedSet: boolean add(java.lang.Object)>($r35);

     label04:
        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i62);

        $i52 = specialinvoke r2.<org.apache.fontbox.ttf.TTFSubFont: int getNewGlyphId(java.lang.Integer)>($r26);

        $r27 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label05;

        $r29 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r28 = newarray (java.lang.Object)[3];

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i62);

        $r28[0] = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i52);

        $r28[1] = $r31;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i61);

        $r28[2] = $r32;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("mapped glyph  %d to %d in compound reference (flags=%04x)", $r28);

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r33);

     label05:
        $i53 = $i52 >>> 8;

        $b54 = (byte) $i53;

        r17[i68] = $b54;

        $i56 = i68 + 1;

        $b55 = (byte) $i52;

        r17[$i56] = $b55;

        i69 = i68 + 2;

        $i57 = $i61 & 1;

        if $i57 == 0 goto label06;

        i67 = i69 + 4;

        goto label07;

     label06:
        i67 = i69 + 2;

     label07:
        $i58 = $i61 & 128;

        if $i58 == 0 goto label08;

        i67 = i67 + 8;

        goto label10;

     label08:
        $i59 = $i61 & 64;

        if $i59 == 0 goto label09;

        i67 = i67 + 4;

        goto label10;

     label09:
        $i60 = $i61 & 8;

        if $i60 == 0 goto label10;

        i67 = i67 + 2;

     label10:
        $i70 = $i61 & 32;

        if $i70 != 0 goto label03;

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r17, 0, i67);

        $l63 = (long) i67;

        l65 = l65 + $l63;

        goto label12;

     label11:
        $i71 = lengthof r17;

        if $i71 <= 0 goto label12;

        $b16 = r17[0];

        $s96 = (short) $b16;

        $s17 = $s96 & 255;

        $i97 = (int) $s17;

        $i20 = $i97 << 8;

        $b18 = r17[1];

        $s98 = (short) $b18;

        $s19 = $s98 & 255;

        $i99 = (int) $s19;

        i72 = $i20 | $i99;

        $i21 = i72 * 2;

        i73 = 10 + $i21;

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r17, 0, i73);

        $l22 = (long) i73;

        l74 = l65 + $l22;

        $b23 = r17[i73];

        $s100 = (short) $b23;

        $s24 = $s100 & 255;

        $i101 = (int) $s24;

        $i28 = $i101 << 8;

        $i25 = i73 + 1;

        $b26 = r17[$i25];

        $s102 = (short) $b26;

        $s27 = $s102 & 255;

        $i103 = (int) $s27;

        i75 = $i28 | $i103;

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(int)>(0);

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(int)>(0);

        l76 = l74 + 2L;

        $i29 = 2 + i75;

        i77 = i73 + $i29;

        $i30 = lengthof r17;

        $i31 = $i30 - i77;

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r17, i77, $i31);

        $i32 = lengthof r17;

        $i33 = $i32 - i77;

        $l34 = (long) $i33;

        l65 = l76 + $l34;

     label12:
        $l78 = l65 % 4L;

        $b79 = $l78 cmp 0L;

        if $b79 == 0 goto label13;

        $l13 = l65 % 4L;

        $l14 = 4L - $l13;

        i80 = (int) $l14;

        $r18 = <org.apache.fontbox.ttf.TTFSubFont: byte[] PAD_BUF>;

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r18, 0, i80);

        $l15 = (long) i80;

        l65 = l65 + $l15;

     label13:
        $i11 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

        $i12 = $i11 + 1;

        l64 = $r7[$i12];

        goto label02;

     label14:
        r12[i66] = l65;

     label15:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

        goto label18;

     label16:
        $r36 := @caughtexception;

     label17:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

        throw $r36;

     label18:
        $r13 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [glyf].");

        $r14 = virtualinvoke $r37.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r14;

        catch java.lang.Throwable from label01 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private int getNewGlyphId(java.lang.Integer)
    {
        java.util.SortedSet $r2, $r3;
        org.apache.fontbox.ttf.TTFSubFont r0;
        int $i0;
        java.lang.Integer r1;

        r0 := @this: org.apache.fontbox.ttf.TTFSubFont;

        r1 := @parameter0: java.lang.Integer;

        $r2 = r0.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r3 = interfaceinvoke $r2.<java.util.SortedSet: java.util.SortedSet headSet(java.lang.Object)>(r1);

        $i0 = interfaceinvoke $r3.<java.util.SortedSet: int size()>();

        return $i0;
    }

    private byte[] buildCmapTable() throws java.io.IOException
    {
        byte[] $r23;
        java.lang.Integer $r9, $r17, $r19, $r21, $r26, $r28, $r30, $r32, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49;
        java.io.DataOutputStream $r54;
        java.util.Set $r5;
        java.io.ByteArrayOutputStream $r53;
        java.util.Map$Entry r50, r51, r52;
        int[] r11, r13, r15;
        org.apache.fontbox.ttf.TTFSubFont r3;
        boolean $z0, $z1;
        java.util.SortedMap $r4, $r10, $r12, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36, i37, i38, i39, i40, i41, i42, $i44, $i46;
        java.util.Iterator $r6;
        org.apache.commons.logging.Log $r2, $r22;
        java.lang.Object $r7, $r8, $r16, $r18, $r20, $r24, $r25, $r27, $r29, $r31, $r33, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r53 = new java.io.ByteArrayOutputStream;

        specialinvoke $r53.<java.io.ByteArrayOutputStream: void <init>()>();

        $r54 = new java.io.DataOutputStream;

        specialinvoke $r54.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r53);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [cmap]...");

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 0);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 1);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 3);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 1);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r54, 12L);

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.util.Map$Entry) $r7;

        r51 = r50;

        $r8 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Integer) $r8;

        i35 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: int getNewGlyphId(java.lang.Integer)>($r9);

        $r10 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $i0 = interfaceinvoke $r10.<java.util.SortedMap: int size()>();

        r11 = newarray (int)[$i0];

        $r12 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $i1 = interfaceinvoke $r12.<java.util.SortedMap: int size()>();

        r13 = newarray (int)[$i1];

        $r14 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedMap characters>;

        $i2 = interfaceinvoke $r14.<java.util.SortedMap: int size()>();

        r15 = newarray (int)[$i2];

        i36 = 0;

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r24 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.util.Map$Entry) $r24;

        $r25 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.Integer) $r25;

        $i18 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: int getNewGlyphId(java.lang.Integer)>($r26);

        $r27 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = (java.lang.Integer) $r27;

        $i19 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        $r29 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r30 = (java.lang.Integer) $r29;

        $i20 = virtualinvoke $r30.<java.lang.Integer: int intValue()>();

        $i21 = $i20 + 1;

        if $i19 != $i21 goto label02;

        $i31 = $i18 - i35;

        $r46 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r47 = (java.lang.Integer) $r46;

        $i32 = virtualinvoke $r47.<java.lang.Integer: int intValue()>();

        $r48 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r49 = (java.lang.Integer) $r48;

        $i33 = virtualinvoke $r49.<java.lang.Integer: int intValue()>();

        $i34 = $i32 - $i33;

        if $i31 == $i34 goto label05;

     label02:
        if i35 == 0 goto label03;

        $r40 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r41 = (java.lang.Integer) $r40;

        $i27 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();

        r11[i36] = $i27;

        $r42 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r43 = (java.lang.Integer) $r42;

        $i28 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        r13[i36] = $i28;

        $r44 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r45 = (java.lang.Integer) $r44;

        $i29 = virtualinvoke $r45.<java.lang.Integer: int intValue()>();

        $i30 = i35 - $i29;

        r15[i36] = $i30;

        i36 = i36 + 1;

        goto label04;

     label03:
        $r31 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r32 = (java.lang.Integer) $r31;

        $r33 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke $r32.<java.lang.Integer: boolean equals(java.lang.Object)>($r33);

        if $z1 != 0 goto label04;

        $r34 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r35 = (java.lang.Integer) $r34;

        $i22 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();

        $i23 = $i22 + 1;

        r11[i36] = $i23;

        $r36 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.Integer) $r36;

        $i24 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        r13[i36] = $i24;

        $r38 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = (java.lang.Integer) $r38;

        $i25 = virtualinvoke $r39.<java.lang.Integer: int intValue()>();

        $i26 = i35 - $i25;

        r15[i36] = $i26;

        i36 = i36 + 1;

     label04:
        i35 = $i18;

        r50 = r52;

     label05:
        r51 = r52;

        goto label01;

     label06:
        $r16 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (java.lang.Integer) $r16;

        $i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        r11[i36] = $i3;

        $r18 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.Integer) $r18;

        $i4 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        r13[i36] = $i4;

        $r20 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (java.lang.Integer) $r20;

        $i5 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $i6 = i35 - $i5;

        r15[i36] = $i6;

        i37 = i36 + 1;

        $i44 = (int) 65535;

        r11[i37] = $i44;

        $i46 = (int) 65535;

        r13[i37] = $i46;

        r15[i37] = 1;

        i38 = i37 + 1;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 4);

        $i7 = i38 * 8;

        $i8 = 16 + $i7;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i8);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 0);

        $i9 = i38 * 2;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i9);

        $i10 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i38);

        $i11 = $i10 * 2;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i11);

        $i12 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: int log2i(int)>($i10);

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i12);

        $i13 = i38 - $i10;

        $i14 = 2 * $i13;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i14);

        i39 = 0;

     label07:
        if i39 >= i38 goto label08;

        $i17 = r13[i39];

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i17);

        i39 = i39 + 1;

        goto label07;

     label08:
        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 0);

        i40 = 0;

     label09:
        if i40 >= i38 goto label10;

        $i16 = r11[i40];

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i16);

        i40 = i40 + 1;

        goto label09;

     label10:
        i41 = 0;

     label11:
        if i41 >= i38 goto label12;

        $i15 = r15[i41];

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, $i15);

        i41 = i41 + 1;

        goto label11;

     label12:
        i42 = 0;

     label13:
        if i42 >= i38 goto label14;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r54, 0);

        i42 = i42 + 1;

        goto label13;

     label14:
        $r22 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [cmap].");

        $r23 = virtualinvoke $r53.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r23;
    }

    private byte[] buildPostTable() throws java.io.IOException
    {
        byte[] $r15, $r23;
        java.lang.Integer $r28, $r37, $r40, $r41, r46, r48, r49, r51, r52;
        java.io.DataOutputStream $r55;
        java.util.Map $r25, $r34;
        java.lang.StringBuilder $r19, $r20, $r21, $r59;
        java.lang.Object[] $r38;
        java.io.ByteArrayOutputStream $r54;
        long $l2, $l3, $l4, $l5, $l6;
        java.util.ArrayList $r57;
        short $s0, $s1;
        java.lang.String $r22, r47, r50, r53;
        java.io.IOException $r43;
        org.apache.fontbox.ttf.PostScriptTable $r5, r44, $r56;
        java.util.SortedSet $r11, $r31;
        org.apache.fontbox.encoding.MacRomanEncoding r45;
        org.apache.fontbox.ttf.HorizontalHeaderTable $r8;
        int[] $r30;
        java.util.Locale $r39;
        org.apache.fontbox.ttf.TTFSubFont r3;
        org.apache.fontbox.ttf.CMAPEncodingEntry $r29;
        boolean $z0, $z1, $z2;
        org.apache.fontbox.ttf.TrueTypeFont $r4, $r7;
        float $f0;
        java.lang.String[] $r6;
        java.util.HashMap $r58;
        int $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20, $i22;
        double $d0;
        java.util.Iterator $r12, $r13, $r32;
        char $c19;
        org.apache.commons.logging.Log $r2, $r14, $r18;
        java.lang.Object $r16, $r24, $r26, $r27, $r33, $r35, $r36;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r54 = new java.io.ByteArrayOutputStream;

        specialinvoke $r54.<java.io.ByteArrayOutputStream: void <init>()>();

        $r55 = new java.io.DataOutputStream;

        specialinvoke $r55.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r54);

        $r2 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [post]...");

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r5 = virtualinvoke $r4.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.PostScriptTable getPostScript()>();

        r44 = $r5;

        if $r5 != null goto label01;

        $r56 = new org.apache.fontbox.ttf.PostScriptTable;

        specialinvoke $r56.<org.apache.fontbox.ttf.PostScriptTable: void <init>()>();

        r44 = $r56;

     label01:
        $r6 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: java.lang.String[] getGlyphNames()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeFixed(java.io.DataOutputStream,double)>($r55, 2.0);

        $f0 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: float getItalicAngle()>();

        $d0 = (double) $f0;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeFixed(java.io.DataOutputStream,double)>($r55, $d0);

        $s0 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: short getUnderlinePosition()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r55, $s0);

        $s1 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: short getUnderlineThickness()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeSint16(java.io.DataOutputStream,short)>($r55, $s1);

        $l2 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: long getIsFixedPitch()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r55, $l2);

        $l3 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: long getMinMemType42()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r55, $l3);

        $l4 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: long getMaxMemType42()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r55, $l4);

        $l5 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: long getMimMemType1()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r55, $l5);

        $l6 = virtualinvoke r44.<org.apache.fontbox.ttf.PostScriptTable: long getMaxMemType1()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint32(java.io.DataOutputStream,long)>($r55, $l6);

        $r7 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r8 = virtualinvoke $r7.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalHeaderTable getHorizontalHeader()>();

        $i7 = virtualinvoke $r8.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getNumberOfHMetrics()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r55, $i7);

        $r57 = new java.util.ArrayList;

        specialinvoke $r57.<java.util.ArrayList: void <init>()>();

        $r58 = new java.util.HashMap;

        specialinvoke $r58.<java.util.HashMap: void <init>()>();

        if $r6 != null goto label12;

        r45 = <org.apache.fontbox.encoding.MacRomanEncoding: org.apache.fontbox.encoding.MacRomanEncoding INSTANCE>;

        $r29 = r3.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.CMAPEncodingEntry baseCmap>;

        $r30 = virtualinvoke $r29.<org.apache.fontbox.ttf.CMAPEncodingEntry: int[] getGlyphIdToCharacterCode()>();

        $r31 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r32 = interfaceinvoke $r31.<java.util.SortedSet: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r33 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.lang.Integer) $r33;

        $i14 = virtualinvoke r46.<java.lang.Integer: int intValue()>();

        i20 = $r30[$i14];

        r47 = null;

        $i22 = (int) 32768;

        if i20 >= $i22 goto label06;

     label03:
        $c19 = (char) i20;

        r47 = virtualinvoke r45.<org.apache.fontbox.encoding.Encoding: java.lang.String getNameFromCharacter(char)>($c19);

     label04:
        goto label06;

     label05:
        $r43 := @caughtexception;

     label06:
        if r47 != null goto label07;

        $r39 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r38 = newarray (java.lang.Object)[1];

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        $r38[0] = $r40;

        r47 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r39, "uni%04X", $r38);

     label07:
        $r34 = <org.apache.fontbox.encoding.Encoding: java.util.Map MAC_GLYPH_NAMES_INDICES>;

        $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r47);

        $r41 = (java.lang.Integer) $r35;

        if $r41 != null goto label09;

        $r36 = interfaceinvoke $r58.<java.util.Map: java.lang.Object get(java.lang.Object)>(r47);

        r48 = (java.lang.Integer) $r36;

        if r48 != null goto label08;

        $i18 = interfaceinvoke $r57.<java.util.List: int size()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        r48 = $r37;

        interfaceinvoke $r57.<java.util.List: boolean add(java.lang.Object)>(r47);

        interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r37);

     label08:
        $i16 = virtualinvoke r48.<java.lang.Integer: int intValue()>();

        $i17 = $i16 + 258;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r55, $i17);

        goto label10;

     label09:
        $i15 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r55, $i15);

     label10:
        goto label02;

     label11:
        goto label17;

     label12:
        $r11 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r12 = interfaceinvoke $r11.<java.util.SortedSet: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r24 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r49 = (java.lang.Integer) $r24;

        $i9 = virtualinvoke r49.<java.lang.Integer: int intValue()>();

        r50 = $r6[$i9];

        $r25 = <org.apache.fontbox.encoding.Encoding: java.util.Map MAC_GLYPH_NAMES_INDICES>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r50);

        r51 = (java.lang.Integer) $r26;

        if r51 != null goto label15;

        $r27 = interfaceinvoke $r58.<java.util.Map: java.lang.Object get(java.lang.Object)>(r50);

        r52 = (java.lang.Integer) $r27;

        if r52 != null goto label14;

        $i13 = interfaceinvoke $r57.<java.util.List: int size()>();

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        r52 = $r28;

        interfaceinvoke $r57.<java.util.List: boolean add(java.lang.Object)>(r50);

        interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r50, $r28);

     label14:
        $i11 = virtualinvoke r52.<java.lang.Integer: int intValue()>();

        $i12 = $i11 + 258;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r55, $i12);

        goto label16;

     label15:
        $i10 = virtualinvoke r51.<java.lang.Integer: int intValue()>();

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint16(java.io.DataOutputStream,int)>($r55, $i10);

     label16:
        goto label13;

     label17:
        $r13 = interfaceinvoke $r57.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label19;

        $r16 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.lang.String) $r16;

        $r18 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("additionalName=[");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

        $r23 = virtualinvoke r53.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $i8 = lengthof $r23;

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeUint8(java.io.DataOutputStream,int)>($r55, $i8);

        virtualinvoke $r55.<java.io.DataOutputStream: void write(byte[])>($r23);

        goto label18;

     label19:
        virtualinvoke $r55.<java.io.DataOutputStream: void flush()>();

        $r14 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [post].");

        $r15 = virtualinvoke $r54.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r15;

        catch java.io.IOException from label03 to label04 with label05;
    }

    private byte[] buildHmtxTable() throws java.io.IOException
    {
        byte[] r7, $r13;
        java.util.SortedSet $r10;
        java.lang.Integer r15;
        org.apache.fontbox.ttf.HorizontalHeaderTable $r4;
        byte $b10, $b16, $b23, $b24, $b25, $b26;
        org.apache.fontbox.ttf.TTFSubFont r2;
        boolean $z0;
        java.io.EOFException $r16, $r17;
        org.apache.fontbox.ttf.TrueTypeFont $r3, $r5, $r8;
        java.lang.Throwable $r18;
        java.io.ByteArrayOutputStream $r0;
        long $l0, $l14, $l15, l19, l20, l21;
        org.apache.fontbox.ttf.HorizontalMetricsTable $r6;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i17, $i18;
        java.util.Iterator $r11;
        org.apache.commons.logging.Log $r1, $r12;
        java.lang.Object $r14;
        java.io.InputStream $r9;

        r2 := @this: org.apache.fontbox.ttf.TTFSubFont;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Building table [hmtx]...");

        $r3 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalHeaderTable getHorizontalHeader()>();

        $r5 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r6 = virtualinvoke $r5.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalMetricsTable getHorizontalMetrics()>();

        r7 = newarray (byte)[4];

        $r8 = r2.<org.apache.fontbox.ttf.TTFSubFont: org.apache.fontbox.ttf.TrueTypeFont baseTTF>;

        $r9 = virtualinvoke $r8.<org.apache.fontbox.ttf.TrueTypeFont: java.io.InputStream getOriginalData()>();

     label01:
        $l0 = virtualinvoke $r6.<org.apache.fontbox.ttf.HorizontalMetricsTable: long getOffset()>();

        virtualinvoke $r9.<java.io.InputStream: long skip(long)>($l0);

        l19 = 0L;

        $r10 = r2.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r11 = interfaceinvoke $r10.<java.util.SortedSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke $r4.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getNumberOfHMetrics()>();

        if $i1 >= $i2 goto label03;

        $i17 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        $i18 = $i17 * 4;

        l20 = (long) $i18;

        goto label04;

     label03:
        $i3 = virtualinvoke $r4.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getNumberOfHMetrics()>();

        $i4 = $i3 * 4;

        $i5 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        $i6 = virtualinvoke $r4.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getNumberOfHMetrics()>();

        $i7 = $i5 - $i6;

        $i8 = $i7 * 2;

        $i9 = $i4 + $i8;

        l20 = (long) $i9;

     label04:
        $b10 = l20 cmp l19;

        if $b10 == 0 goto label05;

        l21 = l20 - l19;

        $l15 = virtualinvoke $r9.<java.io.InputStream: long skip(long)>(l21);

        $b16 = l21 cmp $l15;

        if $b16 == 0 goto label05;

        $r17 = new java.io.EOFException;

        specialinvoke $r17.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected EOF exception parsing glyphId of hmtx table.");

        throw $r17;

     label05:
        $i11 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        $i12 = virtualinvoke $r4.<org.apache.fontbox.ttf.HorizontalHeaderTable: int getNumberOfHMetrics()>();

        if $i11 >= $i12 goto label06;

        $b26 = 4;

        $b25 = 4;

        $b24 = 4;

        $b23 = 4;

        goto label07;

     label06:
        $b26 = 2;

        $b25 = 2;

        $b24 = 2;

        $b23 = 2;

     label07:
        $i13 = virtualinvoke $r9.<java.io.InputStream: int read(byte[],int,int)>(r7, 0, $b25);

        if $b23 == $i13 goto label08;

        $r16 = new java.io.EOFException;

        specialinvoke $r16.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected EOF exception parsing glyphId of hmtx table.");

        throw $r16;

     label08:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r7, 0, $b26);

        $l14 = (long) $b24;

        l19 = l20 + $l14;

        goto label02;

     label09:
        $r12 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Finished table [hmtx].");

        $r13 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label10:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

        return $r13;

     label11:
        $r18 := @caughtexception;

     label12:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

        throw $r18;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void writeToStream(java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r38;
        java.io.DataOutputStream $r15;
        byte $b12, $b15, $b18, $b20;
        byte[][] r18;
        java.lang.StringBuilder $r0, $r2, $r5, $r6, $r8, $r10, $r12, $r13;
        java.lang.Throwable $r39;
        long $l6, $l7, $l9, $l10, $l13, $l16, $l22, $l27, l28, l29, l31;
        java.lang.String $r7, $r14, $r37;
        java.util.SortedSet $r4, $r11, $r19;
        org.apache.fontbox.ttf.TTFSubFont r3;
        boolean $z0;
        java.lang.String[] $r17;
        long[] r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i11, $i14, $i17, $i19, $i21, $i23, $i24, $i25, $i26, i30, i32;
        java.io.OutputStream r16;
        org.apache.commons.logging.Log $r1, $r9;

        r3 := @this: org.apache.fontbox.ttf.TTFSubFont;

        r16 := @parameter0: java.io.OutputStream;

        $r1 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("glyphIds=[");

        $r4 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

        $r9 = <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numGlyphs=[");

        $r11 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $i0 = interfaceinvoke $r11.<java.util.SortedSet: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label01:
        $z0 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: boolean addCompoundReferences()>();

        if $z0 != 0 goto label02;

        goto label01;

     label02:
        $r15 = new java.io.DataOutputStream;

        specialinvoke $r15.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r16);

     label03:
        $r17 = newarray (java.lang.String)[10];

        $r17[0] = "OS/2";

        $r17[1] = "cmap";

        $r17[2] = "glyf";

        $r17[3] = "head";

        $r17[4] = "hhea";

        $r17[5] = "hmtx";

        $r17[6] = "loca";

        $r17[7] = "maxp";

        $r17[8] = "name";

        $r17[9] = "post";

        $i1 = lengthof $r17;

        r18 = newarray (byte[])[$i1];

        $r19 = r3.<org.apache.fontbox.ttf.TTFSubFont: java.util.SortedSet glyphIds>;

        $i2 = interfaceinvoke $r19.<java.util.SortedSet: int size()>();

        $i3 = $i2 + 1;

        r20 = newarray (long)[$i3];

        $r21 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildHeadTable()>();

        r18[3] = $r21;

        $r22 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildHheaTable()>();

        r18[4] = $r22;

        $r23 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildMaxpTable()>();

        r18[7] = $r23;

        $r24 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildNameTable()>();

        r18[8] = $r24;

        $r25 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildOS2Table()>();

        r18[0] = $r25;

        $r26 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildGlyfTable(long[])>(r20);

        r18[2] = $r26;

        $r27 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildLocaTable(long[])>(r20);

        r18[6] = $r27;

        $r28 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildCmapTable()>();

        r18[1] = $r28;

        $r29 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildHmtxTable()>();

        r18[5] = $r29;

        $r30 = specialinvoke r3.<org.apache.fontbox.ttf.TTFSubFont: byte[] buildPostTable()>();

        r18[9] = $r30;

        $i4 = lengthof $r17;

        l28 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: long writeFileHeader(java.io.DataOutputStream,int)>($r15, $i4);

        $i5 = lengthof $r17;

        $l6 = (long) $i5;

        $l7 = 16L * $l6;

        l29 = 12L + $l7;

        i30 = 0;

     label04:
        $i8 = lengthof $r17;

        if i30 >= $i8 goto label05;

        $r37 = $r17[i30];

        $r36 = r18[i30];

        $l22 = staticinvoke <org.apache.fontbox.ttf.TTFSubFont: long writeTableHeader(java.io.DataOutputStream,java.lang.String,long,byte[])>($r15, $r37, l29, $r36);

        l28 = l28 + $l22;

        $r38 = r18[i30];

        $i23 = lengthof $r38;

        $i24 = $i23 + 3;

        $i25 = $i24 / 4;

        $i26 = $i25 * 4;

        $l27 = (long) $i26;

        l29 = l29 + $l27;

        i30 = i30 + 1;

        goto label04;

     label05:
        $l9 = l28 & 4294967295L;

        l31 = 2981146554L - $l9;

        $r31 = r18[3];

        $l10 = l31 >>> 24;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $r31[8] = $b12;

        $r32 = r18[3];

        $l13 = l31 >>> 16;

        $i14 = (int) $l13;

        $b15 = (byte) $i14;

        $r32[9] = $b15;

        $r33 = r18[3];

        $l16 = l31 >>> 8;

        $i17 = (int) $l16;

        $b18 = (byte) $i17;

        $r33[10] = $b18;

        $r34 = r18[3];

        $i19 = (int) l31;

        $b20 = (byte) $i19;

        $r34[11] = $b20;

        i32 = 0;

     label06:
        $i21 = lengthof $r17;

        if i32 >= $i21 goto label07;

        $r35 = r18[i32];

        staticinvoke <org.apache.fontbox.ttf.TTFSubFont: void writeTableBody(java.io.OutputStream,byte[])>($r15, $r35);

        i32 = i32 + 1;

        goto label06;

     label07:
        virtualinvoke $r15.<java.io.DataOutputStream: void close()>();

        goto label10;

     label08:
        $r39 := @caughtexception;

     label09:
        virtualinvoke $r15.<java.io.DataOutputStream: void close()>();

        throw $r39;

     label10:
        return;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static void <clinit>()
    {
        byte[] $r1;
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/fontbox/ttf/TTFSubFont;");

        <org.apache.fontbox.ttf.TTFSubFont: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = newarray (byte)[3];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        <org.apache.fontbox.ttf.TTFSubFont: byte[] PAD_BUF> = $r1;

        return;
    }
}
