public class com.hp.hpl.jena.mem.NodeToTriplesMap extends com.hp.hpl.jena.mem.NodeToTriplesMapBase
{

    public void <init>(com.hp.hpl.jena.graph.Triple$Field, com.hp.hpl.jena.graph.Triple$Field, com.hp.hpl.jena.graph.Triple$Field)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;
        com.hp.hpl.jena.graph.Triple$Field r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple$Field;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple$Field;

        r3 := @parameter2: com.hp.hpl.jena.graph.Triple$Field;

        specialinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: void <init>(com.hp.hpl.jena.graph.Triple$Field,com.hp.hpl.jena.graph.Triple$Field,com.hp.hpl.jena.graph.Triple$Field)>(r1, r2, r3);

        return;
    }

    public boolean add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4;
        java.util.Set $r5;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch $r7, r8;
        com.hp.hpl.jena.mem.BunchMap $r3, $r6;
        int $i0, $i1;
        java.lang.Object $r2;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r2);

        r8 = (com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch) $r4;

        if r8 != null goto label1;

        $r6 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r7 = specialinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch createSetBunch()>();

        r8 = $r7;

        interfaceinvoke $r6.<com.hp.hpl.jena.mem.BunchMap: void put(java.lang.Object,com.hp.hpl.jena.mem.TripleBunch)>($r2, $r7);

     label1:
        $r5 = virtualinvoke r8.<com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch: java.util.Set baseSet()>();

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $i0 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: int size>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: int size> = $i1;

        return 1;

     label2:
        return 0;
    }

    private com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch createSetBunch()
    {
        com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch $r0;
        com.hp.hpl.jena.mem.NodeToTriplesMap r1;

        r1 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        $r0 = new com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch;

        specialinvoke $r0.<com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch: void <init>()>();

        return $r0;
    }

    public boolean remove(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4;
        java.util.Set $r6;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch r5;
        com.hp.hpl.jena.mem.BunchMap $r3, $r7;
        int $i0, $i1;
        java.lang.Object $r2;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r2);

        r5 = (com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch) $r4;

        if r5 != null goto label1;

        return 0;

     label1:
        $r6 = virtualinvoke r5.<com.hp.hpl.jena.mem.NodeToTriplesMap$OpenSetBunch: java.util.Set baseSet()>();

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $i0 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: int size>;

        $i1 = $i0 - 1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: int size> = $i1;

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        interfaceinvoke $r7.<com.hp.hpl.jena.mem.BunchMap: void remove(java.lang.Object)>($r2);

     label3:
        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(java.lang.Object, com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r3;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r4;
        java.lang.Object r1;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label2:
        return $r5;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r3);

        if $r4 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

     label2:
        return $z0;
    }

    protected static boolean equalsObjectOK(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r2 != null goto label1;

        $z1 = 1;

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = 1;

     label3:
        return $z1;
    }

    public boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.NodeToTriplesMap r1;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $z0 = staticinvoke <com.hp.hpl.jena.mem.NodeToTriplesMap: boolean equalsObjectOK(com.hp.hpl.jena.graph.Triple)>(r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.mem.NodeToTriplesMap: boolean contains(com.hp.hpl.jena.graph.Triple)>(r0);

        goto label2;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.mem.NodeToTriplesMap: boolean slowContains(com.hp.hpl.jena.graph.Triple)>(r0);

     label2:
        return $z1;
    }

    protected boolean slowContains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4;
        com.hp.hpl.jena.graph.Triple r1, $r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.mem.BunchMap $r2;
        java.lang.Object $r3, $r6;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r3);

        if $r4 != null goto label1;

        return 0;

     label1:
        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: boolean matches(com.hp.hpl.jena.graph.Triple)>($r7);

        if $z1 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterateAll(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Triple$Field $r2, $r4, $r7;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.util.iterator.Filter $r3, $r5, $r6, $r8, $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r10, $r11;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.graph.Triple$Field indexField>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.graph.Triple$Field f2>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Triple)>(r1);

        $r6 = virtualinvoke $r3.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.Filter and(com.hp.hpl.jena.util.iterator.Filter)>($r5);

        $r7 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.graph.Triple$Field f3>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Triple)>(r1);

        $r9 = virtualinvoke $r6.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.Filter and(com.hp.hpl.jena.util.iterator.Filter)>($r8);

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.util.iterator.ExtendedIterator iterateAll()>();

        $r11 = virtualinvoke $r9.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(java.util.Iterator)>($r10);

        return $r11;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.mem.TripleBunch $r4;
        com.hp.hpl.jena.graph.Node r1, r5, r8;
        com.hp.hpl.jena.graph.Triple$Field $r6, $r9;
        com.hp.hpl.jena.util.iterator.Filter $r7, $r10, $r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r12, $r13;
        com.hp.hpl.jena.mem.BunchMap $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r8 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getIndexingValue()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>($r3);

        if $r4 != null goto label1;

        $r13 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        goto label2;

     label1:
        $r6 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.graph.Triple$Field f2>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Node)>(r5);

        $r9 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.graph.Triple$Field f3>;

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Node)>(r8);

        $r11 = virtualinvoke $r7.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.Filter and(com.hp.hpl.jena.util.iterator.Filter)>($r10);

        $r12 = interfaceinvoke $r4.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        $r13 = virtualinvoke $r11.<com.hp.hpl.jena.util.iterator.Filter: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(java.util.Iterator)>($r12);

     label2:
        return $r13;
    }

    public java.util.Iterator iteratorForIndexed(java.lang.Object)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.mem.TripleBunch $r2;
        java.lang.Object r1;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>(r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        return $r3;
    }

    private com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)
    {
        com.hp.hpl.jena.mem.BunchMap $r2;
        com.hp.hpl.jena.mem.TripleBunch $r3;
        java.lang.Object r1;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)>(r1);

        return $r3;
    }

    public volatile java.util.Iterator iterator(java.lang.Object, com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r2;
        java.lang.Object r1;
        com.hp.hpl.jena.mem.NodeToTriplesMap r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMap: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(java.lang.Object,com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>(r1, r2);

        return $r3;
    }
}
