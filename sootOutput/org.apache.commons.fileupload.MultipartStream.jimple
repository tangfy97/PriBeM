public class org.apache.commons.fileupload.MultipartStream extends java.lang.Object
{
    public static final byte CR;
    public static final byte LF;
    public static final byte DASH;
    public static final int HEADER_PART_SIZE_MAX;
    protected static final int DEFAULT_BUFSIZE;
    protected static final byte[] HEADER_SEPARATOR;
    protected static final byte[] FIELD_SEPARATOR;
    protected static final byte[] STREAM_TERMINATOR;
    protected static final byte[] BOUNDARY_PREFIX;
    private final java.io.InputStream input;
    private int boundaryLength;
    private int keepRegion;
    private byte[] boundary;
    private final int bufSize;
    private final byte[] buffer;
    private int head;
    private int tail;
    private java.lang.String headerEncoding;
    private final org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier;

    public void <init>()
    {
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        specialinvoke r0.<org.apache.commons.fileupload.MultipartStream: void <init>(java.io.InputStream,byte[],org.apache.commons.fileupload.MultipartStream$ProgressNotifier)>(null, null, null);

        return;
    }

    public void <init>(java.io.InputStream, byte[], int)
    {
        byte[] r2;
        int i0;
        org.apache.commons.fileupload.MultipartStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.fileupload.MultipartStream: void <init>(java.io.InputStream,byte[],int,org.apache.commons.fileupload.MultipartStream$ProgressNotifier)>(r1, r2, i0, null);

        return;
    }

    void <init>(java.io.InputStream, byte[], int, org.apache.commons.fileupload.MultipartStream$ProgressNotifier)
    {
        byte[] $r2, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.commons.fileupload.MultipartStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        r1 := @parameter0: java.io.InputStream;

        r4 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.commons.fileupload.MultipartStream$ProgressNotifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input> = r1;

        r0.<org.apache.commons.fileupload.MultipartStream: int bufSize> = i0;

        $r2 = newarray (byte)[i0];

        r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer> = $r2;

        r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier> = r3;

        $i2 = lengthof r4;

        $r5 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $i1 = lengthof $r5;

        $i3 = $i2 + $i1;

        $r6 = newarray (byte)[$i3];

        r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary> = $r6;

        $i5 = lengthof r4;

        $r7 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $i4 = lengthof $r7;

        $i6 = $i5 + $i4;

        r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i6;

        $r8 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i7 = lengthof $r8;

        r0.<org.apache.commons.fileupload.MultipartStream: int keepRegion> = $i7;

        $r11 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $r10 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r9 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $i8 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i8);

        $r13 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r12 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $i10 = lengthof $r12;

        $i9 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r13, $i10, $i9);

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = 0;

        r0.<org.apache.commons.fileupload.MultipartStream: int tail> = 0;

        return;
    }

    void <init>(java.io.InputStream, byte[], org.apache.commons.fileupload.MultipartStream$ProgressNotifier)
    {
        byte[] r2;
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier r3;
        org.apache.commons.fileupload.MultipartStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: byte[];

        r3 := @parameter2: org.apache.commons.fileupload.MultipartStream$ProgressNotifier;

        specialinvoke r0.<org.apache.commons.fileupload.MultipartStream: void <init>(java.io.InputStream,byte[],int,org.apache.commons.fileupload.MultipartStream$ProgressNotifier)>(r1, r2, 4096, r3);

        return;
    }

    public void <init>(java.io.InputStream, byte[])
    {
        byte[] r2;
        org.apache.commons.fileupload.MultipartStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: byte[];

        specialinvoke r0.<org.apache.commons.fileupload.MultipartStream: void <init>(java.io.InputStream,byte[],int,org.apache.commons.fileupload.MultipartStream$ProgressNotifier)>(r1, r2, 4096, null);

        return;
    }

    public java.lang.String getHeaderEncoding()
    {
        java.lang.String $r1;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: java.lang.String headerEncoding>;

        return $r1;
    }

    public void setHeaderEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.fileupload.MultipartStream: java.lang.String headerEncoding> = r1;

        return;
    }

    public byte readByte() throws java.io.IOException
    {
        byte[] $r1, $r6;
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier $r3, $r4;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11;
        org.apache.commons.fileupload.MultipartStream r0;
        java.io.IOException $r7;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        $i1 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        if $i1 != $i0 goto label2;

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = 0;

        $r2 = r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input>;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>;

        $i3 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        $i2 = r0.<org.apache.commons.fileupload.MultipartStream: int bufSize>;

        $i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i3, $i2);

        r0.<org.apache.commons.fileupload.MultipartStream: int tail> = $i4;

        $i5 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        $i11 = (int) -1;

        if $i5 != $i11 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("No more data is available");

        throw $r7;

     label1:
        $r3 = r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>;

        if $r3 == null goto label2;

        $r4 = r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>;

        $i6 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        virtualinvoke $r4.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void noteBytesRead(int)>($i6);

     label2:
        $r6 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>;

        $i7 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        $i8 = $i7 + 1;

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = $i8;

        $b9 = $r6[$i7];

        return $b9;
    }

    public boolean readBoundary() throws org.apache.commons.fileupload.MultipartStream$MalformedStreamException
    {
        byte[] r0, $r2, $r3;
        org.apache.commons.fileupload.MultipartStream$MalformedStreamException $r7, $r8;
        byte $b3, $b4, $b5;
        int $i0, $i1, $i2, $i6;
        org.apache.commons.fileupload.MultipartStream r1;
        boolean $z0, $z1, z2;
        java.io.IOException $r5;

        r1 := @this: org.apache.commons.fileupload.MultipartStream;

        r0 = newarray (byte)[2];

        $i1 = r1.<org.apache.commons.fileupload.MultipartStream: int head>;

        $i0 = r1.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>;

        $i2 = $i1 + $i0;

        r1.<org.apache.commons.fileupload.MultipartStream: int head> = $i2;

     label1:
        $b3 = virtualinvoke r1.<org.apache.commons.fileupload.MultipartStream: byte readByte()>();

        r0[0] = $b3;

        $b4 = r0[0];

        $i6 = (int) $b4;

        if $i6 != 10 goto label3;

     label2:
        return 1;

     label3:
        $b5 = virtualinvoke r1.<org.apache.commons.fileupload.MultipartStream: byte readByte()>();

        r0[1] = $b5;

        $r2 = <org.apache.commons.fileupload.MultipartStream: byte[] STREAM_TERMINATOR>;

        $z0 = staticinvoke <org.apache.commons.fileupload.MultipartStream: boolean arrayequals(byte[],byte[],int)>(r0, $r2, 2);

        if $z0 == 0 goto label4;

        z2 = 0;

        goto label6;

     label4:
        $r3 = <org.apache.commons.fileupload.MultipartStream: byte[] FIELD_SEPARATOR>;

        $z1 = staticinvoke <org.apache.commons.fileupload.MultipartStream: boolean arrayequals(byte[],byte[],int)>(r0, $r3, 2);

        if $z1 == 0 goto label5;

        z2 = 1;

        goto label6;

     label5:
        $r7 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException;

        specialinvoke $r7.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>("Unexpected characters follow a boundary");

        throw $r7;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        $r8 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException;

        specialinvoke $r8.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>("Stream ended unexpectedly");

        throw $r8;

     label8:
        return z2;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label6 with label7;
    }

    public void setBoundary(byte[]) throws org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException
    {
        byte[] r0, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException $r5;
        org.apache.commons.fileupload.MultipartStream r1;

        r1 := @this: org.apache.commons.fileupload.MultipartStream;

        r0 := @parameter0: byte[];

        $i3 = lengthof r0;

        $i1 = r1.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>;

        $r2 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $i0 = lengthof $r2;

        $i2 = $i1 - $i0;

        if $i3 == $i2 goto label1;

        $r5 = new org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException;

        specialinvoke $r5.<org.apache.commons.fileupload.MultipartStream$IllegalBoundaryException: void <init>(java.lang.String)>("The length of a boundary token can not be changed");

        throw $r5;

     label1:
        $r4 = r1.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r3 = <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX>;

        $i5 = lengthof $r3;

        $i4 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r4, $i5, $i4);

        return;
    }

    public java.lang.String readHeaders() throws org.apache.commons.fileupload.MultipartStream$MalformedStreamException
    {
        byte[] $r1, $r5;
        java.io.ByteArrayOutputStream $r11;
        org.apache.commons.fileupload.MultipartStream$MalformedStreamException $r12, $r13;
        byte $b1, $b2;
        int $i0, i3, i4, $i5, $i6, $i7;
        java.lang.String $r3, $r4, r10;
        org.apache.commons.fileupload.MultipartStream r2;
        java.io.IOException $r8;
        java.io.UnsupportedEncodingException $r7;

        r2 := @this: org.apache.commons.fileupload.MultipartStream;

        i3 = 0;

        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>();

        i4 = 0;

     label01:
        $r1 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label09;

     label02:
        $b1 = virtualinvoke r2.<org.apache.commons.fileupload.MultipartStream: byte readByte()>();

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

        $r12 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException;

        specialinvoke $r12.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>("Stream ended unexpectedly");

        throw $r12;

     label05:
        i4 = i4 + 1;

        if i4 <= 10240 goto label06;

        $r13 = new org.apache.commons.fileupload.MultipartStream$MalformedStreamException;

        specialinvoke $r13.<org.apache.commons.fileupload.MultipartStream$MalformedStreamException: void <init>(java.lang.String)>("Header section has more than 10240 bytes (maybe it is not properly terminated)");

        throw $r13;

     label06:
        $r5 = <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR>;

        $b2 = $r5[i3];

        $i5 = (int) $b1;

        $i6 = (int) $b2;

        if $i5 != $i6 goto label07;

        i3 = i3 + 1;

        goto label08;

     label07:
        i3 = 0;

     label08:
        $i7 = (int) $b1;

        virtualinvoke $r11.<java.io.ByteArrayOutputStream: void write(int)>($i7);

        goto label01;

     label09:
        $r3 = r2.<org.apache.commons.fileupload.MultipartStream: java.lang.String headerEncoding>;

        if $r3 == null goto label13;

     label10:
        $r4 = r2.<org.apache.commons.fileupload.MultipartStream: java.lang.String headerEncoding>;

        r10 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>($r4);

     label11:
        goto label14;

     label12:
        $r7 := @caughtexception;

        r10 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        goto label14;

     label13:
        r10 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

     label14:
        return r10;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.UnsupportedEncodingException from label10 to label11 with label12;
    }

    public int readBodyData(java.io.OutputStream) throws org.apache.commons.fileupload.MultipartStream$MalformedStreamException, java.io.IOException
    {
        java.io.OutputStream r2;
        org.apache.commons.fileupload.MultipartStream$ItemInputStream $r1;
        int $i1;
        long $l0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        r2 := @parameter0: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ItemInputStream newInputStream()>();

        $l0 = staticinvoke <org.apache.commons.fileupload.util.Streams: long copy(java.io.InputStream,java.io.OutputStream,boolean)>($r1, r2, 0);

        $i1 = (int) $l0;

        return $i1;
    }

    org.apache.commons.fileupload.MultipartStream$ItemInputStream newInputStream()
    {
        org.apache.commons.fileupload.MultipartStream$ItemInputStream $r0;
        org.apache.commons.fileupload.MultipartStream r1;

        r1 := @this: org.apache.commons.fileupload.MultipartStream;

        $r0 = new org.apache.commons.fileupload.MultipartStream$ItemInputStream;

        specialinvoke $r0.<org.apache.commons.fileupload.MultipartStream$ItemInputStream: void <init>(org.apache.commons.fileupload.MultipartStream)>(r1);

        return $r0;
    }

    public int discardBodyData() throws org.apache.commons.fileupload.MultipartStream$MalformedStreamException, java.io.IOException
    {
        int $i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        $i0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: int readBodyData(java.io.OutputStream)>(null);

        return $i0;
    }

    public boolean skipPreamble() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        org.apache.commons.fileupload.MultipartStream$MalformedStreamException $r18;
        boolean $z0;
        java.lang.Throwable $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r2 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 2, $r2, 0, $i1);

        $r4 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i2 = lengthof $r4;

        $i3 = $i2 - 2;

        r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i3;

     label1:
        virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: int discardBodyData()>();

        $z0 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: boolean readBoundary()>();

     label2:
        $r7 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r6 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r5 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i4 = lengthof $r5;

        $i5 = $i4 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 2, $i5);

        $r8 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i6 = lengthof $r8;

        r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i6;

        $r9 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r9[0] = 13;

        $r10 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r10[1] = 10;

        return $z0;

     label3:
        $r18 := @caughtexception;

     label4:
        $r21 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r20 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r19 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i10 = lengthof $r19;

        $i11 = $i10 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r20, 2, $i11);

        $r22 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i12 = lengthof $r22;

        r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i12;

        $r23 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r23[0] = 13;

        $r24 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r24[1] = 10;

        return 0;

     label5:
        $r11 := @caughtexception;

     label6:
        $r14 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r13 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r12 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i7 = lengthof $r12;

        $i8 = $i7 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 2, $i8);

        $r15 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $i9 = lengthof $r15;

        r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength> = $i9;

        $r16 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r16[0] = 13;

        $r17 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $r17[1] = 10;

        throw $r11;

        catch org.apache.commons.fileupload.MultipartStream$MalformedStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static boolean arrayequals(byte[], byte[], int)
    {
        byte[] r0, r1;
        byte $b1, $b2;
        int i0, i3, $i4, $i5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $b2 = r0[i3];

        $b1 = r1[i3];

        $i4 = (int) $b2;

        $i5 = (int) $b1;

        if $i4 == $i5 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    protected int findByte(byte, int)
    {
        byte[] $r1;
        byte b2, $b3;
        int i0, $i1, i4, $i5, $i6, $i8;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        b2 := @parameter0: byte;

        i0 := @parameter1: int;

        i4 = i0;

     label1:
        $i1 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        if i4 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>;

        $b3 = $r1[i4];

        $i5 = (int) $b3;

        $i6 = (int) b2;

        if $i5 != $i6 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $i8 = (int) -1;

        return $i8;
    }

    protected int findSeparator()
    {
        byte[] $r1, $r2, $r3;
        byte $b6, $b10, $b11;
        int $i0, $i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, i12, i13, $i15, $i17, $i18, $i19, $i21;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @this: org.apache.commons.fileupload.MultipartStream;

        i12 = 0;

        $i1 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>;

        i2 = $i1 - $i0;

        i13 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

     label1:
        if i13 > i2 goto label7;

        $i5 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>;

        if i12 == $i5 goto label7;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $b6 = $r1[0];

        $i7 = virtualinvoke r0.<org.apache.commons.fileupload.MultipartStream: int findByte(byte,int)>($b6, i13);

        $i15 = (int) -1;

        if $i7 == $i15 goto label2;

        if $i7 <= i2 goto label3;

     label2:
        $i17 = (int) -1;

        return $i17;

     label3:
        i12 = 1;

     label4:
        $i8 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>;

        if i12 >= $i8 goto label6;

        $r2 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>;

        $i9 = $i7 + i12;

        $b11 = $r2[$i9];

        $r3 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] boundary>;

        $b10 = $r3[i12];

        $i18 = (int) $b11;

        $i19 = (int) $b10;

        if $i18 == $i19 goto label5;

        goto label6;

     label5:
        i12 = i12 + 1;

        goto label4;

     label6:
        i13 = $i7 + 1;

        goto label1;

     label7:
        $i3 = r0.<org.apache.commons.fileupload.MultipartStream: int boundaryLength>;

        if i12 != $i3 goto label8;

        $i4 = i13 - 1;

        return $i4;

     label8:
        $i21 = (int) -1;

        return $i21;
    }

    static int access$000(org.apache.commons.fileupload.MultipartStream)
    {
        int $i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        return $i0;
    }

    static int access$100(org.apache.commons.fileupload.MultipartStream)
    {
        int $i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        return $i0;
    }

    static int access$200(org.apache.commons.fileupload.MultipartStream)
    {
        int $i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int keepRegion>;

        return $i0;
    }

    static byte[] access$300(org.apache.commons.fileupload.MultipartStream)
    {
        byte[] $r1;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: byte[] buffer>;

        return $r1;
    }

    static int access$108(org.apache.commons.fileupload.MultipartStream)
    {
        int $i0, $i1;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = $i1;

        return $i0;
    }

    static int access$112(org.apache.commons.fileupload.MultipartStream, int)
    {
        int i0, $i1, $i2;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        $i2 = $i1 + i0;

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = $i2;

        return $i2;
    }

    static java.io.InputStream access$400(org.apache.commons.fileupload.MultipartStream)
    {
        org.apache.commons.fileupload.MultipartStream r0;
        java.io.InputStream $r1;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: java.io.InputStream input>;

        return $r1;
    }

    static int access$114(org.apache.commons.fileupload.MultipartStream, long)
    {
        int $i0, $i4;
        long l1, $l2, $l3;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        l1 := @parameter1: long;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int head>;

        $l2 = (long) $i0;

        $l3 = $l2 + l1;

        $i4 = (int) $l3;

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = $i4;

        return $i4;
    }

    static int access$102(org.apache.commons.fileupload.MultipartStream, int)
    {
        int i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        i0 := @parameter1: int;

        r0.<org.apache.commons.fileupload.MultipartStream: int head> = i0;

        return i0;
    }

    static int access$002(org.apache.commons.fileupload.MultipartStream, int)
    {
        int i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        i0 := @parameter1: int;

        r0.<org.apache.commons.fileupload.MultipartStream: int tail> = i0;

        return i0;
    }

    static int access$500(org.apache.commons.fileupload.MultipartStream)
    {
        int $i0;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $i0 = r0.<org.apache.commons.fileupload.MultipartStream: int bufSize>;

        return $i0;
    }

    static org.apache.commons.fileupload.MultipartStream$ProgressNotifier access$600(org.apache.commons.fileupload.MultipartStream)
    {
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier $r1;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        $r1 = r0.<org.apache.commons.fileupload.MultipartStream: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>;

        return $r1;
    }

    static int access$012(org.apache.commons.fileupload.MultipartStream, int)
    {
        int i0, $i1, $i2;
        org.apache.commons.fileupload.MultipartStream r0;

        r0 := @parameter0: org.apache.commons.fileupload.MultipartStream;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.commons.fileupload.MultipartStream: int tail>;

        $i2 = $i1 + i0;

        r0.<org.apache.commons.fileupload.MultipartStream: int tail> = $i2;

        return $i2;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;

        <org.apache.commons.fileupload.MultipartStream: int DEFAULT_BUFSIZE> = 4096;

        <org.apache.commons.fileupload.MultipartStream: int HEADER_PART_SIZE_MAX> = 10240;

        <org.apache.commons.fileupload.MultipartStream: byte DASH> = 45;

        <org.apache.commons.fileupload.MultipartStream: byte LF> = 10;

        <org.apache.commons.fileupload.MultipartStream: byte CR> = 13;

        $r0 = newarray (byte)[4];

        $r0[0] = 13;

        $r0[1] = 10;

        $r0[2] = 13;

        $r0[3] = 10;

        <org.apache.commons.fileupload.MultipartStream: byte[] HEADER_SEPARATOR> = $r0;

        $r1 = newarray (byte)[2];

        $r1[0] = 13;

        $r1[1] = 10;

        <org.apache.commons.fileupload.MultipartStream: byte[] FIELD_SEPARATOR> = $r1;

        $r2 = newarray (byte)[2];

        $r2[0] = 45;

        $r2[1] = 45;

        <org.apache.commons.fileupload.MultipartStream: byte[] STREAM_TERMINATOR> = $r2;

        $r3 = newarray (byte)[4];

        $r3[0] = 13;

        $r3[1] = 10;

        $r3[2] = 45;

        $r3[3] = 45;

        <org.apache.commons.fileupload.MultipartStream: byte[] BOUNDARY_PREFIX> = $r3;

        return;
    }
}
