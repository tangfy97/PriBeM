public class com.jidesoft.utils.CachedVector extends java.util.Vector
{
    private java.util.Map _indexCache;
    private boolean _lazyCaching;

    public void <init>()
    {
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        specialinvoke r0.<java.util.Vector: void <init>()>();

        r0.<com.jidesoft.utils.CachedVector: boolean _lazyCaching> = 0;

        return;
    }

    public void <init>(java.util.Collection)
    {
        com.jidesoft.utils.CachedVector r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.Vector: void <init>(java.util.Collection)>(r1);

        r0.<com.jidesoft.utils.CachedVector: boolean _lazyCaching> = 0;

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: boolean isLazyCaching()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheAll()>();

     label1:
        return;
    }

    public void <init>(int)
    {
        int i0;
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Vector: void <init>(int)>(i0);

        r0.<com.jidesoft.utils.CachedVector: boolean _lazyCaching> = 0;

        return;
    }

    public int indexOf(java.lang.Object)
    {
        java.lang.Integer r4;
        java.util.Map $r2;
        int $i0, $i1, $i3, $i5;
        java.lang.Object r1, $r3;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.jidesoft.utils.CachedVector: void initializeCache()>();

        $r2 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label1;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i1;

     label1:
        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: boolean isLazyCaching()>();

        if $z0 == 0 goto label4;

        $i0 = specialinvoke r0.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheIt(java.lang.Object)>(r1);

        goto label3;

     label2:
        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheIt(java.lang.Object,int)>(r1, $i0);

     label3:
        return $i0;

     label4:
        $i5 = (int) -1;

        return $i5;
    }

    protected synchronized void adjustCache(int, int)
    {
        java.lang.Integer $r9, $r10, $r11;
        java.util.Map $r1, $r2, $r3, $r7;
        int $i0, i1, i2, $i3;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.lang.Object $r6, $r8;
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        if $r1 == null goto label5;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: java.util.Map createCache()>();

        $r3 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if $i0 < i1 goto label2;

        $i3 = $i0 + i2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r11);

        goto label3;

     label2:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

     label3:
        goto label1;

     label4:
        r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache> = $r2;

     label5:
        return;
    }

    protected java.util.Map createCache()
    {
        java.util.IdentityHashMap $r0;
        com.jidesoft.utils.CachedVector r1;

        r1 := @this: com.jidesoft.utils.CachedVector;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        return $r0;
    }

    public synchronized void cacheIt(java.lang.Object, int)
    {
        java.lang.Integer $r6, $r9;
        java.util.Map $r1, $r3, $r5, $r7;
        int i0, $i1;
        java.lang.Object r2, $r4, $r8;
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        if $r1 == null goto label2;

        $r3 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r4 == null goto label1;

        $r7 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if i0 >= $i1 goto label2;

     label1:
        $r5 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

     label2:
        return;
    }

    public synchronized void uncacheIt(java.lang.Object)
    {
        java.util.Map $r1, $r3;
        java.lang.Object r2;
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public boolean add(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r1;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        $z1 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: boolean isLazyCaching()>();

        if $z1 != 0 goto label1;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.jidesoft.utils.CachedVector: void initializeCache()>();

        $i0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheIt(java.lang.Object,int)>(r1, $i1);

     label1:
        return $z0;
    }

    public void add(int, java.lang.Object)
    {
        java.util.Map $r2;
        int i0;
        java.lang.Object r1;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.Vector: void add(int,java.lang.Object)>(i0, r1);

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: boolean isLazyCaching()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.jidesoft.utils.CachedVector: void initializeCache()>();

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void adjustCache(int,int)>(i0, 1);

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheIt(java.lang.Object,int)>(r1, i0);

        goto label2;

     label1:
        $r2 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        if $r2 == null goto label2;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void adjustCache(int,int)>(i0, 1);

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheIt(java.lang.Object,int)>(r1, i0);

     label2:
        return;
    }

    private void initializeCache()
    {
        com.jidesoft.utils.CachedVector r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.jidesoft.utils.CachedVector;

        $r1 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: java.util.Map createCache()>();

        r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache> = $r2;

     label1:
        return;
    }

    public java.lang.Object remove(int)
    {
        int i0, $i2;
        java.lang.Object $r1;
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<java.util.Vector: java.lang.Object remove(int)>(i0);

        if $r1 == null goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheIt(java.lang.Object)>($r1);

        $i2 = (int) -1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void adjustCache(int,int)>(i0, $i2);

     label1:
        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        int $i0, $i2;
        java.lang.Object r1;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: int indexOf(java.lang.Object)>(r1);

        $z0 = specialinvoke r0.<java.util.Vector: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheIt(java.lang.Object)>(r1);

        $i2 = (int) -1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void adjustCache(int,int)>($i0, $i2);

     label1:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        com.jidesoft.utils.CachedVector r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r1 := @parameter0: java.util.Collection;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheAll()>();

        $z0 = specialinvoke r0.<java.util.Vector: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public void clear()
    {
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheAll()>();

        specialinvoke r0.<java.util.Vector: void clear()>();

        return;
    }

    public boolean addAll(java.util.Collection)
    {
        com.jidesoft.utils.CachedVector r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.Vector: boolean addAll(java.util.Collection)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheAll()>();

     label1:
        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i2 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.Vector: boolean addAll(int,java.util.Collection)>(i2, r1);

        specialinvoke r0.<com.jidesoft.utils.CachedVector: void initializeCache()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void adjustCache(int,int)>(i2, $i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i1 = i2;

        i2 = i2 + 1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheIt(java.lang.Object,int)>($r3, $i1);

        goto label1;

     label2:
        return $z0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r1, $r2, $r3;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: boolean isLazyCaching()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.jidesoft.utils.CachedVector: void initializeCache()>();

        $r3 = specialinvoke r0.<java.util.Vector: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheIt(java.lang.Object)>($r3);

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheIt(java.lang.Object,int)>(r1, i0);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.Vector: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return $r2;
    }

    public void invalidateCache()
    {
        com.jidesoft.utils.CachedVector r0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheAll()>();

        return;
    }

    public synchronized void uncacheAll()
    {
        com.jidesoft.utils.CachedVector r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.jidesoft.utils.CachedVector;

        $r1 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache> = null;

     label1:
        return;
    }

    public synchronized void cacheAll()
    {
        java.util.Iterator $r2;
        java.lang.Integer r7;
        java.util.Map $r1, $r4, $r6;
        int $i0, $i1;
        java.lang.Object $r3, $r5;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        $r1 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: java.util.Map createCache()>();

        r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache> = $r1;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        if $r5 != null goto label2;

        $r6 = r0.<com.jidesoft.utils.CachedVector: java.util.Map _indexCache>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r7);

     label2:
        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        goto label1;

     label3:
        return;
    }

    public boolean isLazyCaching()
    {
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        $z0 = r0.<com.jidesoft.utils.CachedVector: boolean _lazyCaching>;

        return $z0;
    }

    public void setLazyCaching(boolean)
    {
        com.jidesoft.utils.CachedVector r0;
        boolean z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.utils.CachedVector: boolean _lazyCaching> = z0;

        return;
    }

    protected void removeRange(int, int)
    {
        int i0, i1;
        com.jidesoft.utils.CachedVector r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: java.lang.Object remove(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<java.util.Vector: void removeRange(int,int)>(i0, i1);

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void uncacheAll()>();

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedVector: boolean isLazyCaching()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.jidesoft.utils.CachedVector: void cacheAll()>();

     label2:
        return;
    }
}
