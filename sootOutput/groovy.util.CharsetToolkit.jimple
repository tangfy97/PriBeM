public class groovy.util.CharsetToolkit extends java.lang.Object
{
    private byte[] buffer;
    private java.nio.charset.Charset defaultCharset;
    private java.nio.charset.Charset charset;
    private boolean enforce8Bit;
    private final java.io.File file;
    private static final byte[] EMPTY_BYTE_ARRAY;

    public void <init>(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        byte[] r4, $r5, r9;
        groovy.util.CharsetToolkit r0;
        java.io.IOException $r6, $r8;
        java.io.FileInputStream $r10;
        java.io.File r1;
        java.nio.charset.Charset $r2;
        int $i0, $i2;

        r0 := @this: groovy.util.CharsetToolkit;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovy.util.CharsetToolkit: boolean enforce8Bit> = 1;

        r0.<groovy.util.CharsetToolkit: java.io.File file> = r1;

        $r2 = staticinvoke <groovy.util.CharsetToolkit: java.nio.charset.Charset getDefaultSystemCharset()>();

        r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset defaultCharset> = $r2;

        r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset charset> = null;

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label01:
        r9 = newarray (byte)[4096];

        $i0 = virtualinvoke $r10.<java.io.InputStream: int read(byte[])>(r9);

        $i2 = (int) -1;

        if $i0 != $i2 goto label02;

        $r5 = <groovy.util.CharsetToolkit: byte[] EMPTY_BYTE_ARRAY>;

        r0.<groovy.util.CharsetToolkit: byte[] buffer> = $r5;

        goto label04;

     label02:
        if $i0 >= 4096 goto label03;

        r4 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r4, 0, $i0);

        r0.<groovy.util.CharsetToolkit: byte[] buffer> = r4;

        goto label04;

     label03:
        r0.<groovy.util.CharsetToolkit: byte[] buffer> = r9;

     label04:
        virtualinvoke $r10.<java.io.InputStream: void close()>();

     label05:
        goto label12;

     label06:
        $r8 := @caughtexception;

        goto label12;

     label07:
        $r7 := @caughtexception;

     label08:
        virtualinvoke $r10.<java.io.InputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        throw $r7;

     label12:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void setDefaultCharset(java.nio.charset.Charset)
    {
        java.nio.charset.Charset r0, $r2;
        groovy.util.CharsetToolkit r1;

        r1 := @this: groovy.util.CharsetToolkit;

        r0 := @parameter0: java.nio.charset.Charset;

        if r0 == null goto label1;

        r1.<groovy.util.CharsetToolkit: java.nio.charset.Charset defaultCharset> = r0;

        goto label2;

     label1:
        $r2 = staticinvoke <groovy.util.CharsetToolkit: java.nio.charset.Charset getDefaultSystemCharset()>();

        r1.<groovy.util.CharsetToolkit: java.nio.charset.Charset defaultCharset> = $r2;

     label2:
        return;
    }

    public java.nio.charset.Charset getCharset()
    {
        java.nio.charset.Charset $r1, $r2, $r3;
        groovy.util.CharsetToolkit r0;

        r0 := @this: groovy.util.CharsetToolkit;

        $r1 = r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset charset>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset guessEncoding()>();

        r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset charset> = $r3;

     label1:
        $r2 = r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset charset>;

        return $r2;
    }

    public void setEnforce8Bit(boolean)
    {
        groovy.util.CharsetToolkit r0;
        boolean z0;

        r0 := @this: groovy.util.CharsetToolkit;

        z0 := @parameter0: boolean;

        r0.<groovy.util.CharsetToolkit: boolean enforce8Bit> = z0;

        return;
    }

    public boolean getEnforce8Bit()
    {
        groovy.util.CharsetToolkit r0;
        boolean $z0;

        r0 := @this: groovy.util.CharsetToolkit;

        $z0 = r0.<groovy.util.CharsetToolkit: boolean enforce8Bit>;

        return $z0;
    }

    public java.nio.charset.Charset getDefaultCharset()
    {
        java.nio.charset.Charset $r1;
        groovy.util.CharsetToolkit r0;

        r0 := @this: groovy.util.CharsetToolkit;

        $r1 = r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset defaultCharset>;

        return $r1;
    }

    private java.nio.charset.Charset guessEncoding()
    {
        byte[] $r1, $r6, $r7, $r8, $r9, $r10, $r11;
        groovy.util.CharsetToolkit r0;
        byte b2, b4, b6, b8, b10, b12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, z24, z25, z26, z27;
        java.nio.charset.Charset $r2, $r3, $r4, $r5, $r12, $r13, $r14;
        int i0, $i1, $i3, $i5, $i7, $i9, $i11, i13, $i14;

        r0 := @this: groovy.util.CharsetToolkit;

        $z0 = virtualinvoke r0.<groovy.util.CharsetToolkit: boolean hasUTF8Bom()>();

        if $z0 == 0 goto label01;

        $r14 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        return $r14;

     label01:
        $z1 = virtualinvoke r0.<groovy.util.CharsetToolkit: boolean hasUTF16LEBom()>();

        if $z1 == 0 goto label02;

        $r13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16LE");

        return $r13;

     label02:
        $z2 = virtualinvoke r0.<groovy.util.CharsetToolkit: boolean hasUTF16BEBom()>();

        if $z2 == 0 goto label03;

        $r12 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16BE");

        return $r12;

     label03:
        z24 = 0;

        z25 = 1;

        z27 = 1;

        z26 = 1;

        $r1 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        i0 = lengthof $r1;

        i13 = 0;

     label04:
        $i1 = i0 - 6;

        if i13 >= $i1 goto label21;

        $r6 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        b2 = $r6[i13];

        $r7 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i3 = i13 + 1;

        b4 = $r7[$i3];

        $r8 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i5 = i13 + 2;

        b6 = $r8[$i5];

        $r9 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i7 = i13 + 3;

        b8 = $r9[$i7];

        $r10 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i9 = i13 + 4;

        b10 = $r10[$i9];

        $r11 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i11 = i13 + 5;

        b12 = $r11[$i11];

        $i14 = (int) b2;

        if $i14 >= 0 goto label19;

        z24 = 1;

        $z4 = staticinvoke <groovy.util.CharsetToolkit: boolean isTwoBytesSequence(byte)>(b2);

        if $z4 == 0 goto label06;

        $z23 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b4);

        if $z23 != 0 goto label05;

        z25 = 0;

        z27 = 0;

        z26 = 0;

        goto label19;

     label05:
        i13 = i13 + 1;

        goto label19;

     label06:
        $z5 = staticinvoke <groovy.util.CharsetToolkit: boolean isThreeBytesSequence(byte)>(b2);

        if $z5 == 0 goto label09;

        $z21 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b4);

        if $z21 == 0 goto label07;

        $z22 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b6);

        if $z22 != 0 goto label08;

     label07:
        z25 = 0;

        z27 = 0;

        z26 = 0;

        goto label19;

     label08:
        i13 = i13 + 2;

        goto label19;

     label09:
        $z6 = staticinvoke <groovy.util.CharsetToolkit: boolean isFourBytesSequence(byte)>(b2);

        if $z6 == 0 goto label12;

        $z18 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b4);

        if $z18 == 0 goto label10;

        $z19 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b6);

        if $z19 == 0 goto label10;

        $z20 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b8);

        if $z20 != 0 goto label11;

     label10:
        z25 = 0;

        z27 = 0;

        z26 = 0;

        goto label19;

     label11:
        i13 = i13 + 3;

        goto label19;

     label12:
        $z7 = staticinvoke <groovy.util.CharsetToolkit: boolean isFiveBytesSequence(byte)>(b2);

        if $z7 == 0 goto label15;

        $z14 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b4);

        if $z14 == 0 goto label13;

        $z15 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b6);

        if $z15 == 0 goto label13;

        $z16 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b8);

        if $z16 == 0 goto label13;

        $z17 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b10);

        if $z17 != 0 goto label14;

     label13:
        z25 = 0;

        z27 = 0;

        z26 = 0;

        goto label19;

     label14:
        i13 = i13 + 4;

        goto label19;

     label15:
        $z8 = staticinvoke <groovy.util.CharsetToolkit: boolean isSixBytesSequence(byte)>(b2);

        if $z8 == 0 goto label18;

        $z9 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b4);

        if $z9 == 0 goto label16;

        $z10 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b6);

        if $z10 == 0 goto label16;

        $z11 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b8);

        if $z11 == 0 goto label16;

        $z12 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b10);

        if $z12 == 0 goto label16;

        $z13 = staticinvoke <groovy.util.CharsetToolkit: boolean isContinuationChar(byte)>(b12);

        if $z13 != 0 goto label17;

     label16:
        z25 = 0;

        z27 = 0;

        z26 = 0;

        goto label19;

     label17:
        i13 = i13 + 5;

        goto label19;

     label18:
        z25 = 0;

        z27 = 0;

        z26 = 0;

     label19:
        if z26 != 0 goto label20;

        goto label21;

     label20:
        i13 = i13 + 1;

        goto label04;

     label21:
        if z24 != 0 goto label23;

        $z3 = r0.<groovy.util.CharsetToolkit: boolean enforce8Bit>;

        if $z3 == 0 goto label22;

        $r5 = r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset defaultCharset>;

        return $r5;

     label22:
        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        return $r4;

     label23:
        if z27 == 0 goto label24;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        return $r3;

     label24:
        $r2 = r0.<groovy.util.CharsetToolkit: java.nio.charset.Charset defaultCharset>;

        return $r2;
    }

    private static boolean isContinuationChar(byte)
    {
        byte b0;
        int $i2, $i3, $i4, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $i2 = (int) -128;

        $i3 = (int) b0;

        if $i2 > $i3 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -65;

        if $i4 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isTwoBytesSequence(byte)
    {
        byte b0;
        int $i2, $i3, $i4, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $i2 = (int) -64;

        $i3 = (int) b0;

        if $i2 > $i3 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -33;

        if $i4 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isThreeBytesSequence(byte)
    {
        byte b0;
        int $i2, $i3, $i4, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $i2 = (int) -32;

        $i3 = (int) b0;

        if $i2 > $i3 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -17;

        if $i4 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isFourBytesSequence(byte)
    {
        byte b0;
        int $i2, $i3, $i4, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $i2 = (int) -16;

        $i3 = (int) b0;

        if $i2 > $i3 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -9;

        if $i4 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isFiveBytesSequence(byte)
    {
        byte b0;
        int $i2, $i3, $i4, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $i2 = (int) -8;

        $i3 = (int) b0;

        if $i2 > $i3 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -5;

        if $i4 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isSixBytesSequence(byte)
    {
        byte b0;
        int $i2, $i3, $i4, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $i2 = (int) -4;

        $i3 = (int) b0;

        if $i2 > $i3 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -3;

        if $i4 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.nio.charset.Charset getDefaultSystemCharset()
    {
        java.lang.String $r0;
        java.nio.charset.Charset $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.encoding");

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r0);

        return $r1;
    }

    public boolean hasUTF8Bom()
    {
        byte[] $r1, $r2, $r3, $r4;
        groovy.util.CharsetToolkit r0;
        byte $b1, $b2, $b3;
        int $i0, $i4, $i6, $i7, $i9, $i10, $i12;
        boolean $z0;

        r0 := @this: groovy.util.CharsetToolkit;

        $r1 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i0 = lengthof $r1;

        if $i0 < 3 goto label3;

        $r2 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b1 = $r2[0];

        $i4 = (int) $b1;

        $i6 = (int) -17;

        if $i4 != $i6 goto label1;

        $r3 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b2 = $r3[1];

        $i7 = (int) $b2;

        $i9 = (int) -69;

        if $i7 != $i9 goto label1;

        $r4 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b3 = $r4[2];

        $i10 = (int) $b3;

        $i12 = (int) -65;

        if $i10 != $i12 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public boolean hasUTF16LEBom()
    {
        byte[] $r1, $r2, $r3;
        groovy.util.CharsetToolkit r0;
        byte $b1, $b2;
        int $i0, $i3, $i5, $i6, $i8;
        boolean $z0;

        r0 := @this: groovy.util.CharsetToolkit;

        $r1 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i0 = lengthof $r1;

        if $i0 < 2 goto label3;

        $r2 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b1 = $r2[0];

        $i3 = (int) $b1;

        $i5 = (int) -1;

        if $i3 != $i5 goto label1;

        $r3 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b2 = $r3[1];

        $i6 = (int) $b2;

        $i8 = (int) -2;

        if $i6 != $i8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public boolean hasUTF16BEBom()
    {
        byte[] $r1, $r2, $r3;
        groovy.util.CharsetToolkit r0;
        byte $b1, $b2;
        int $i0, $i3, $i5, $i6, $i8;
        boolean $z0;

        r0 := @this: groovy.util.CharsetToolkit;

        $r1 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $i0 = lengthof $r1;

        if $i0 < 2 goto label3;

        $r2 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b1 = $r2[0];

        $i3 = (int) $b1;

        $i5 = (int) -2;

        if $i3 != $i5 goto label1;

        $r3 = r0.<groovy.util.CharsetToolkit: byte[] buffer>;

        $b2 = $r3[1];

        $i6 = (int) $b2;

        $i8 = (int) -1;

        if $i6 != $i8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public java.io.BufferedReader getReader() throws java.io.FileNotFoundException
    {
        groovy.util.CharsetToolkit r3;
        java.io.LineNumberReader $r0;
        java.io.IOException $r6;
        java.io.FileInputStream $r2;
        java.io.InputStreamReader $r1;
        java.io.File $r4;
        java.nio.charset.Charset $r5;
        boolean $z0, $z1, $z2;

        r3 := @this: groovy.util.CharsetToolkit;

        $r0 = new java.io.LineNumberReader;

        $r1 = new java.io.InputStreamReader;

        $r2 = new java.io.FileInputStream;

        $r4 = r3.<groovy.util.CharsetToolkit: java.io.File file>;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        $r5 = virtualinvoke r3.<groovy.util.CharsetToolkit: java.nio.charset.Charset getCharset()>();

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r2, $r5);

        specialinvoke $r0.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r1);

        $z0 = virtualinvoke r3.<groovy.util.CharsetToolkit: boolean hasUTF8Bom()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<groovy.util.CharsetToolkit: boolean hasUTF16LEBom()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r3.<groovy.util.CharsetToolkit: boolean hasUTF16BEBom()>();

        if $z2 == 0 goto label4;

     label1:
        virtualinvoke $r0.<java.io.LineNumberReader: int read()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return $r0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.nio.charset.Charset[] getAvailableCharsets()
    {
        java.lang.Object[] $r3;
        java.util.Collection $r1;
        int $i0;
        java.nio.charset.Charset[] $r2, $r4, $r5;
        java.util.SortedMap $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.util.SortedMap availableCharsets()>();

        $r1 = interfaceinvoke $r0.<java.util.SortedMap: java.util.Collection values()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $r2 = newarray (java.nio.charset.Charset)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.nio.charset.Charset[]) $r3;

        $r5 = (java.nio.charset.Charset[]) $r4;

        return $r5;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <groovy.util.CharsetToolkit: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }
}
