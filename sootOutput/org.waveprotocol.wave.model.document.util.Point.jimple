public abstract class org.waveprotocol.wave.model.document.util.Point extends java.lang.Object
{
    private final java.lang.Object container;
    private final java.lang.Object nodeAfter;
    private final int offset;
    static final boolean $assertionsDisabled;

    public static void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        int $i0;
        java.lang.Object $r2, $r3, $r4, $r6, $r7;
        java.lang.String r5;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r5 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r6);

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkOffset(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,int,java.lang.String)>(r1, $r7, $i0, r5);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r2);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkRelationship(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,java.lang.String)>(r1, $r3, $r4, r5);

     label2:
        return;
    }

    public static void checkOffset(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r9;
        int i0, $i1, $i2;
        java.lang.String r3, $r12, $r15;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14;

        r9 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Container must not be null");

        if i0 < 0 goto label1;

        $i2 = interfaceinvoke r9.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>(r0);

        if i0 <= $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": offset \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not inside text node, ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length ");

        $i1 = interfaceinvoke r9.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", text: \'");

        $r12 = interfaceinvoke r9.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r1;

     label2:
        return;
    }

    public static void checkRelationship(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object r0, r1, $r3;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r6, $r9;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Container must not be null");

        if r1 == null goto label1;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        if $r3 == r0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": nodeAfter must be null or a child of parent");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    public static java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = $r2;

     label2:
        return $r3;
    }

    public static java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object $r2, $r3;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r2);

        return $r3;
    }

    public static java.lang.Object elementBefore(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        org.waveprotocol.wave.model.document.util.Point$El $r2;
        int $i0;
        java.lang.Object $r3, $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i0 <= 0 goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r6);

        return $r7;

     label2:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r1, $r2);

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r3);

        return $r4;
    }

    public static java.lang.Object elementAfter(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i1 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>($r4);

        if $i0 >= $i1 goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r6);

        return $r7;

     label2:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r2);

        return $r3;
    }

    public static java.lang.Object elementEndingAt(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i1 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>($r3);

        if $i0 >= $i1 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r4);

        if $r5 != null goto label2;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>($r6);

        return $r7;

     label2:
        return null;

     label3:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r1 != null goto label4;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        goto label5;

     label4:
        $r8 = null;

     label5:
        return $r8;
    }

    public static java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.Object $r1, $r3, $r4;
        org.waveprotocol.wave.model.document.util.Point$El r0;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getLastChild(java.lang.Object)>($r3);

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r1);

     label2:
        return $r4;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2, $r3;
        org.waveprotocol.wave.model.document.util.Point$El $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$El;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(java.lang.Object,java.lang.Object)>($r3, r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2, $r3, $r4;
        org.waveprotocol.wave.model.document.util.Point$El $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$El;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.Object r1, $r3;
        org.waveprotocol.wave.model.document.util.Point$El $r0;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$El;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(java.lang.Object,java.lang.Object)>(r1, $r3);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point textOrElementStart(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2;
        org.waveprotocol.wave.model.document.util.Point $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r1, 0);

        goto label2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r2);

     label2:
        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.Point textOrElementEnd(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        int $i0;
        java.lang.Object r1, $r2, $r3;
        java.lang.String $r4;
        org.waveprotocol.wave.model.document.util.Point $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r1);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r1, $i0);

        goto label2;

     label1:
        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

     label2:
        return $r5;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.Point$El $r0;

        r1 := @parameter0: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$El;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(java.lang.Object,java.lang.Object)>(r1, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.document.util.Point$El $r0;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$El;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El inElementReverse(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        java.lang.Object r1, r2, $r4;
        org.waveprotocol.wave.model.document.util.Point$El $r0;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$El;

        if r2 != null goto label1;

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r2);

     label2:
        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.Point$Tx $r0;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new org.waveprotocol.wave.model.document.util.Point$Tx;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Point$Tx: void <init>(java.lang.Object,int)>(r1, i0);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.Point dup(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.Point$El $r2, $r4;
        org.waveprotocol.wave.model.document.util.Point r0, $r3;
        boolean $z0;
        org.waveprotocol.wave.model.document.util.Point$Tx $r1, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = r0 instanceof org.waveprotocol.wave.model.document.util.Point$El;

        if $z0 == 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.document.util.Point$El;

        $r3 = $r4;

        $r2 = (org.waveprotocol.wave.model.document.util.Point$El) r0;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.util.Point$El: void <init>(org.waveprotocol.wave.model.document.util.Point$El)>($r2);

        goto label2;

     label1:
        $r5 = new org.waveprotocol.wave.model.document.util.Point$Tx;

        $r3 = $r5;

        $r1 = (org.waveprotocol.wave.model.document.util.Point$Tx) r0;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.util.Point$Tx: void <init>(org.waveprotocol.wave.model.document.util.Point$Tx)>($r1);

     label2:
        return $r3;
    }

    void <init>(java.lang.Object, java.lang.Object)
    {
        int $i1;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Container must not be null");

        r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container> = r1;

        r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter> = r2;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.model.document.util.Point: int offset> = $i1;

        return;
    }

    void <init>(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Container must not be null");

        r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container> = r1;

        r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter> = null;

        r0.<org.waveprotocol.wave.model.document.util.Point: int offset> = i0;

        return;
    }

    private void <init>(org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.AssertionError $r5;
        int $i0;
        java.lang.Object $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.util.Point r0, r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container> = $r2;

        $r3 = r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter> = $r3;

        $i0 = r1.<org.waveprotocol.wave.model.document.util.Point: int offset>;

        r0.<org.waveprotocol.wave.model.document.util.Point: int offset> = $i0;

        $z0 = <org.waveprotocol.wave.model.document.util.Point: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        if $r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        return;
    }

    public java.lang.Object getContainer()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        return $r1;
    }

    public java.lang.Object getNodeAfter()
    {
        java.lang.IllegalStateException $r2;
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getNodeAfter() can only be called on points within elements");

        throw $r2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        return $r1;
    }

    public int getTextOffset()
    {
        java.lang.IllegalStateException $r1;
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getOffset() can only be called on points within text nodes");

        throw $r1;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.document.util.Point: int offset>;

        return $i0;
    }

    public abstract org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint();

    public abstract org.waveprotocol.wave.model.document.util.Point$El asElementPoint();

    public boolean isInTextNode()
    {
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.Point: int offset>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInElementEnd()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isBeforeNode()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Object getCanonicalNode()
    {
        java.lang.Object $r1, $r2;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        if $r1 != null goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        goto label3;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

     label3:
        return $r2;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.String $r12, $r16;
        org.waveprotocol.wave.model.document.util.Point r2;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15;
        java.lang.Object $r3, $r7;

        r2 := @this: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r3 = r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public final int hashCode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        if $r1 != null goto label1;

        $i6 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        $i5 = 31 + $i6;

        $i0 = 31 * $i5;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        if $r3 != null goto label3;

        $i7 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        $i7 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label4:
        $i3 = $i0 + $i7;

        $i2 = 31 * $i3;

        $i1 = r0.<org.waveprotocol.wave.model.document.util.Point: int offset>;

        $i4 = $i2 + $i1;

        return $i4;
    }

    public final boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point r0, r4;
        boolean $z0, $z1;
        java.lang.Object r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Class $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.waveprotocol.wave.model.document.util.Point) r1;

        $r5 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        if $r5 != null goto label4;

        $r12 = r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        if $r12 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        $r6 = r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object container>;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r8 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        if $r8 != null goto label6;

        $r11 = r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        if $r11 == null goto label7;

        return 0;

     label6:
        $r10 = r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        $r9 = r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeAfter>;

        $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label7;

        return 0;

     label7:
        $i1 = r0.<org.waveprotocol.wave.model.document.util.Point: int offset>;

        $i0 = r4.<org.waveprotocol.wave.model.document.util.Point: int offset>;

        if $i1 == $i0 goto label8;

        return 0;

     label8:
        return 1;
    }

    void <init>(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point$1)
    {
        org.waveprotocol.wave.model.document.util.Point r0, r1;
        org.waveprotocol.wave.model.document.util.Point$1 r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Point: void <init>(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/Point;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.Point: boolean $assertionsDisabled> = $z1;

        return;
    }
}
