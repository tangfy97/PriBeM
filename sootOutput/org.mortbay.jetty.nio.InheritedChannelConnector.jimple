public class org.mortbay.jetty.nio.InheritedChannelConnector extends org.mortbay.jetty.nio.SelectChannelConnector
{
    static java.lang.Class class$java$lang$System;

    public void <init>()
    {
        org.mortbay.jetty.nio.InheritedChannelConnector r0;

        r0 := @this: org.mortbay.jetty.nio.InheritedChannelConnector;

        specialinvoke r0.<org.mortbay.jetty.nio.SelectChannelConnector: void <init>()>();

        return;
    }

    public void open() throws java.io.IOException
    {
        java.lang.Throwable $r9;
        java.io.IOException $r4;
        java.lang.Exception $r10;
        java.nio.channels.ServerSocketChannel $r3, $r5, $r8, $r12;
        java.lang.Class $r1, $r11;
        java.lang.Object $r6;
        org.mortbay.jetty.nio.InheritedChannelConnector r0;
        java.lang.reflect.Method $r2;
        java.nio.channels.Channel r7;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.nio.InheritedChannelConnector;

        entermonitor r0;

     label01:
        $r1 = <org.mortbay.jetty.nio.InheritedChannelConnector: java.lang.Class class$java$lang$System>;

        if $r1 != null goto label02;

        $r11 = staticinvoke <org.mortbay.jetty.nio.InheritedChannelConnector: java.lang.Class class$(java.lang.String)>("java.lang.System");

        <org.mortbay.jetty.nio.InheritedChannelConnector: java.lang.Class class$java$lang$System> = $r11;

        goto label03;

     label02:
        $r11 = <org.mortbay.jetty.nio.InheritedChannelConnector: java.lang.Class class$java$lang$System>;

     label03:
        $r2 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("inheritedChannel", null);

        if $r2 == null goto label04;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

        r7 = (java.nio.channels.Channel) $r6;

        $z0 = r7 instanceof java.nio.channels.ServerSocketChannel;

        if $z0 == 0 goto label04;

        $r8 = (java.nio.channels.ServerSocketChannel) r7;

        r0.<org.mortbay.jetty.nio.InheritedChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel> = $r8;

     label04:
        $r12 = r0.<org.mortbay.jetty.nio.InheritedChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        if $r12 == null goto label05;

        $r5 = r0.<org.mortbay.jetty.nio.InheritedChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke $r5.<java.nio.channels.ServerSocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>($r10);

     label07:
        $r3 = r0.<org.mortbay.jetty.nio.InheritedChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        if $r3 != null goto label08;

        specialinvoke r0.<org.mortbay.jetty.nio.SelectChannelConnector: void open()>();

        goto label09;

     label08:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("No System.inheritedChannel()");

        throw $r4;

     label09:
        exitmonitor r0;

     label10:
        goto label13;

     label11:
        $r9 := @caughtexception;

        exitmonitor r0;

     label12:
        throw $r9;

     label13:
        return;

        catch java.lang.Exception from label01 to label05 with label06;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
