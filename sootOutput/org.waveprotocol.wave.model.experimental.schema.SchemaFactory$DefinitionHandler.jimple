final class org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler extends org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler
{
    private final java.lang.String name;
    private final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler previousTop;

    void <init>(java.lang.String, org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r2;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: java.lang.String name> = r1;

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler previousTop> = r2;

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler popHandler() throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler $r1, $r4;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment $r3;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler previousTop>;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: java.lang.String name>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment extractPattern()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: void registerDefinition(java.lang.String,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment)>($r2, $r3);

        $r4 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler previousTop>;

        return $r4;
    }
}
