public class org.eclipse.jetty.util.statistic.CounterStatistic extends java.lang.Object
{
    protected final java.util.concurrent.atomic.AtomicLong _max;
    protected final java.util.concurrent.atomic.AtomicLong _curr;
    protected final java.util.concurrent.atomic.AtomicLong _total;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _max> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _curr> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _total> = $r3;

        return;
    }

    public void reset()
    {
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        virtualinvoke r0.<org.eclipse.jetty.util.statistic.CounterStatistic: void reset(long)>(0L);

        return;
    }

    public void reset(long)
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;
        long l0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        l0 := @parameter0: long;

        $r1 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _max>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l0);

        $r2 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _curr>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l0);

        $r3 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        return;
    }

    public void add(long)
    {
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;
        byte $b2;
        int $i3;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        l0 := @parameter0: long;

        $r1 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _curr>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        $b2 = l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        $r3 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

     label1:
        $r2 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _max>;

        staticinvoke <org.eclipse.jetty.util.Atomics: void updateMax(java.util.concurrent.atomic.AtomicLong,long)>($r2, $l1);

        return;
    }

    public void subtract(long)
    {
        long l0, $l1;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        l0 := @parameter0: long;

        $l1 = neg l0;

        virtualinvoke r0.<org.eclipse.jetty.util.statistic.CounterStatistic: void add(long)>($l1);

        return;
    }

    public void increment()
    {
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        virtualinvoke r0.<org.eclipse.jetty.util.statistic.CounterStatistic: void add(long)>(1L);

        return;
    }

    public void decrement()
    {
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        virtualinvoke r0.<org.eclipse.jetty.util.statistic.CounterStatistic: void add(long)>(-1L);

        return;
    }

    public long getMax()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _max>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getCurrent()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _curr>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getTotal()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        org.eclipse.jetty.util.statistic.CounterStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.CounterStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.CounterStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }
}
