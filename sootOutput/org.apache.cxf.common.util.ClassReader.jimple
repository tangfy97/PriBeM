public class org.apache.cxf.common.util.ClassReader extends java.io.ByteArrayInputStream
{
    private static final int CONSTANT_CLASS;
    private static final int CONSTANT_FIELDREF;
    private static final int CONSTANT_METHODREF;
    private static final int CONSTANT_INTERFACE_METHOD_REF;
    private static final int CONSTANT_STRING;
    private static final int CONSTANT_INTEGER;
    private static final int CONSTANT_FLOAT;
    private static final int CONSTANT_LONG;
    private static final int CONSTANT_DOUBLE;
    private static final int CONSTANT_NAME_AND_TYPE;
    private static final int CONSTANT_UTF_8;
    private int[] cpoolIndex;
    private java.lang.Object[] cpool;
    private java.util.Map attrMethods;

    protected void <init>(byte[], java.util.Map)
    {
        org.apache.cxf.common.util.ClassReader r0;
        byte[] r1;
        java.util.Map r2;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r0.<org.apache.cxf.common.util.ClassReader: java.util.Map attrMethods> = r2;

        return;
    }

    protected static byte[] getBytes(java.lang.Class) throws java.io.IOException
    {
        java.lang.Throwable $r13;
        byte[] r10, $r11;
        java.io.ByteArrayOutputStream $r9;
        java.io.IOException $r12;
        int $i0;
        java.lang.Class r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.String $r3, $r4, $r7;
        java.io.InputStream $r8;

        r0 := @parameter0: java.lang.Class;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r7);

        if $r8 != null goto label1;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>()>();

        throw $r12;

     label1:
        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        r10 = newarray (byte)[1024];

     label2:
        $i0 = virtualinvoke $r8.<java.io.InputStream: int read(byte[])>(r10);

        if $i0 <= 0 goto label3;

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r10, 0, $i0);

     label3:
        if $i0 > 0 goto label2;

        $r11 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label4:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

        return $r11;

     label5:
        $r13 := @caughtexception;

     label6:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static java.lang.String classDescriptorToName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r1;
    }

    protected static java.util.Map findAttributeReaders(java.lang.Class)
    {
        java.util.HashMap $r0;
        java.lang.reflect.Method[] $r2;
        int $i0, i1;
        java.lang.Class r1, $r6, $r7;
        java.lang.String $r4, $r8;
        java.lang.reflect.Method $r3, $r5, $r9;
        boolean $z0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = $r2[i1];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("read");

        if $z0 == 0 goto label2;

        $r5 = $r2[i1];

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if $r6 != $r7 goto label2;

        $r8 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(4);

        $r9 = $r2[i1];

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    protected static java.lang.String getSignature(java.lang.reflect.Member, java.lang.Class[])
    {
        java.lang.reflect.Member r1;
        java.lang.Class[] r2;
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.Class $r3, $r5, $r6;
        java.lang.String $r7, $r8;
        java.lang.reflect.Method $r4;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.reflect.Member;

        r2 := @parameter1: java.lang.Class[];

        $r0 = new java.lang.StringBuilder;

        $z0 = r1 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r1.<java.lang.reflect.Member: java.lang.String getName()>();

        goto label2;

     label1:
        $r7 = "<init>";

     label2:
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        i0 = 0;

     label3:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label4;

        $r6 = r2[i0];

        staticinvoke <org.apache.cxf.common.util.ClassReader: void addDescriptor(java.lang.StringBuilder,java.lang.Class)>($r0, $r6);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $z1 = r1 instanceof java.lang.reflect.Method;

        if $z1 == 0 goto label5;

        $r4 = (java.lang.reflect.Method) r1;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        staticinvoke <org.apache.cxf.common.util.ClassReader: void addDescriptor(java.lang.StringBuilder,java.lang.Class)>($r0, $r5);

        goto label6;

     label5:
        $z2 = r1 instanceof java.lang.reflect.Constructor;

        if $z2 == 0 goto label6;

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        staticinvoke <org.apache.cxf.common.util.ClassReader: void addDescriptor(java.lang.StringBuilder,java.lang.Class)>($r0, $r3);

     label6:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static void addDescriptor(java.lang.StringBuilder, java.lang.Class)
    {
        java.lang.String $r3, $r4;
        boolean $z0, $z1;
        java.lang.Class r0, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.StringBuilder r1, $r2, $r5;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label09;

        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r7 goto label01;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(86);

        goto label11;

     label01:
        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r8 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(73);

        goto label11;

     label02:
        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r9 goto label03;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        goto label11;

     label03:
        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r10 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(66);

        goto label11;

     label04:
        $r11 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r11 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83);

        goto label11;

     label05:
        $r12 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r12 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(74);

        goto label11;

     label06:
        $r13 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r13 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(67);

        goto label11;

     label07:
        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r14 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(70);

        goto label11;

     label08:
        $r15 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r15 goto label11;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(68);

        goto label11;

     label09:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.apache.cxf.common.util.ClassReader: void addDescriptor(java.lang.StringBuilder,java.lang.Class)>(r1, $r6);

        goto label11;

     label10:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label11:
        return;
    }

    protected final int readShort()
    {
        org.apache.cxf.common.util.ClassReader r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $i1 = $i0 << 8;

        $i2 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $i3 = $i1 | $i2;

        return $i3;
    }

    protected final int readInt()
    {
        org.apache.cxf.common.util.ClassReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $i1 = $i0 << 24;

        $i2 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $i3 = $i2 << 16;

        $i4 = $i1 | $i3;

        $i5 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $i6 = $i5 << 8;

        $i7 = $i4 | $i6;

        $i8 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $i9 = $i7 | $i8;

        return $i9;
    }

    protected void skipFully(int) throws java.io.IOException
    {
        org.apache.cxf.common.util.ClassReader r0;
        int i2, i3;
        long $l0, $l1;
        java.io.EOFException $r1;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        i3 := @parameter0: int;

     label1:
        if i3 <= 0 goto label3;

        $l0 = (long) i3;

        $l1 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: long skip(long)>($l0);

        i2 = (int) $l1;

        if i2 > 0 goto label2;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label2:
        i3 = i3 - i2;

        goto label1;

     label3:
        return;
    }

    protected final java.lang.reflect.Member resolveMethod(int) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r15;
        java.lang.reflect.Method[] $r14;
        org.apache.cxf.common.util.ClassReader r0;
        int[] $r3;
        java.lang.reflect.Method $r16, $r17, $r20, r32;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Member r30;
        java.lang.StringBuilder $r6, $r8, $r10;
        java.lang.Throwable $r29;
        java.lang.Object[] $r1, $r21, $r28;
        java.lang.reflect.Constructor $r23, $r24, $r27, r31;
        java.lang.reflect.Constructor[] $r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r7, $r9, $r11, $r12, $r13, $r19, $r26;
        java.lang.Class[] $r18, $r25;
        org.apache.cxf.common.util.ClassReader$NameAndType $r5;
        java.lang.Object $r2;
        java.lang.Class $r4;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        i1 := @parameter0: int;

        i0 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

     label01:
        $r1 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r2 = $r1[i1];

        r30 = (java.lang.reflect.Member) $r2;

        if r30 != null goto label11;

        $r3 = r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex>;

        $i2 = $r3[i1];

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = $i2;

        $i3 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: java.lang.Class resolveClass(int)>($i3);

        $i4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r5 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: org.apache.cxf.common.util.ClassReader$NameAndType resolveNameAndType(int)>($i4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = $r5.<org.apache.cxf.common.util.ClassReader$NameAndType: java.lang.String name>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = $r5.<org.apache.cxf.common.util.ClassReader$NameAndType: java.lang.String type>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = "<init>";

        $r12 = $r5.<org.apache.cxf.common.util.ClassReader$NameAndType: java.lang.String name>;

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label06;

        $r22 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i7 = 0;

     label02:
        $i6 = lengthof $r22;

        if i7 >= $i6 goto label05;

        $r24 = $r22[i7];

        $r23 = $r22[i7];

        $r25 = virtualinvoke $r23.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r26 = staticinvoke <org.apache.cxf.common.util.ClassReader: java.lang.String getSignature(java.lang.reflect.Member,java.lang.Class[])>($r24, $r25);

        $z2 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label04;

        $r28 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r27 = $r22[i7];

        $r28[i1] = $r27;

        r31 = $r22[i7];

     label03:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r31;

     label04:
        i7 = i7 + 1;

        goto label02;

     label05:
        goto label10;

     label06:
        $r14 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i8 = 0;

     label07:
        $i5 = lengthof $r14;

        if i8 >= $i5 goto label10;

        $r17 = $r14[i8];

        $r16 = $r14[i8];

        $r18 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r19 = staticinvoke <org.apache.cxf.common.util.ClassReader: java.lang.String getSignature(java.lang.reflect.Member,java.lang.Class[])>($r17, $r18);

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label09;

        $r21 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r20 = $r14[i8];

        $r21[i1] = $r20;

        r32 = $r14[i8];

     label08:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r32;

     label09:
        i8 = i8 + 1;

        goto label07;

     label10:
        $r15 = new java.lang.NoSuchMethodException;

        specialinvoke $r15.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r11);

        throw $r15;

     label11:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r30;

     label12:
        $r29 := @caughtexception;

     label13:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        throw $r29;

        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.lang.Throwable from label04 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected final java.lang.reflect.Field resolveField(int) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.NoSuchFieldException
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r1, $r7;
        org.apache.cxf.common.util.ClassReader r0;
        int[] $r3;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r6, $r9;
        java.lang.reflect.Field $r8, r11;
        org.apache.cxf.common.util.ClassReader$NameAndType $r5;
        java.lang.Object $r2;
        java.lang.Class $r4;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        i1 := @parameter0: int;

        i0 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

     label1:
        $r1 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r2 = $r1[i1];

        r11 = (java.lang.reflect.Field) $r2;

        if r11 != null goto label2;

        $r3 = r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex>;

        $i2 = $r3[i1];

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = $i2;

        $i3 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: java.lang.Class resolveClass(int)>($i3);

        $i4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r5 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: org.apache.cxf.common.util.ClassReader$NameAndType resolveNameAndType(int)>($i4);

        $r7 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r6 = $r5.<org.apache.cxf.common.util.ClassReader$NameAndType: java.lang.String name>;

        $r8 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r6);

        $r7[i1] = $r8;

        $r9 = $r5.<org.apache.cxf.common.util.ClassReader$NameAndType: java.lang.String name>;

        r11 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r9);

     label2:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r11;

     label3:
        $r10 := @caughtexception;

     label4:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final org.apache.cxf.common.util.ClassReader$NameAndType resolveNameAndType(int) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        java.lang.Object[] $r1, $r7;
        org.apache.cxf.common.util.ClassReader r0;
        int[] $r3;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r4, $r5;
        org.apache.cxf.common.util.ClassReader$NameAndType $r6, $r8, r10;
        java.lang.Object $r2;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        i1 := @parameter0: int;

        i0 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

     label1:
        $r1 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r2 = $r1[i1];

        r10 = (org.apache.cxf.common.util.ClassReader$NameAndType) $r2;

        if r10 != null goto label2;

        $r3 = r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex>;

        $i2 = $r3[i1];

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = $i2;

        $i3 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: java.lang.String resolveUtf8(int)>($i3);

        $i4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r5 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: java.lang.String resolveUtf8(int)>($i4);

        $r7 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r6 = new org.apache.cxf.common.util.ClassReader$NameAndType;

        specialinvoke $r6.<org.apache.cxf.common.util.ClassReader$NameAndType: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        $r7[i1] = $r6;

        $r8 = new org.apache.cxf.common.util.ClassReader$NameAndType;

        specialinvoke $r8.<org.apache.cxf.common.util.ClassReader$NameAndType: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        r10 = $r8;

     label2:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r10;

     label3:
        $r9 := @caughtexception;

     label4:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final java.lang.Class resolveClass(int) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r9;
        java.lang.Object[] $r1, $r5;
        org.apache.cxf.common.util.ClassReader r0;
        int[] $r3;
        int i0, i1, $i2, $i3;
        java.lang.Object $r2;
        java.lang.Class $r7, r10;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        i1 := @parameter0: int;

        i0 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

     label1:
        $r1 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r2 = $r1[i1];

        r10 = (java.lang.Class) $r2;

        if r10 != null goto label2;

        $r3 = r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex>;

        $i2 = $r3[i1];

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = $i2;

        $i3 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r4 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: java.lang.String resolveUtf8(int)>($i3);

        $r5 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r6 = staticinvoke <org.apache.cxf.common.util.ClassReader: java.lang.String classDescriptorToName(java.lang.String)>($r4);

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6);

        $r5[i1] = $r7;

        $r8 = staticinvoke <org.apache.cxf.common.util.ClassReader: java.lang.String classDescriptorToName(java.lang.String)>($r4);

        r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r8);

     label2:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r10;

     label3:
        $r9 := @caughtexception;

     label4:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final java.lang.String resolveUtf8(int) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        byte[] $r5, $r8;
        java.lang.Object[] $r1, $r6;
        org.apache.cxf.common.util.ClassReader r0;
        int[] $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r4, $r7, r10;
        java.lang.Object $r2;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        i1 := @parameter0: int;

        i0 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

     label1:
        $r1 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r2 = $r1[i1];

        r10 = (java.lang.String) $r2;

        if r10 != null goto label2;

        $r3 = r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex>;

        $i2 = $r3[i1];

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = $i2;

        $i3 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i3);

        $r6 = r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool>;

        $r4 = new java.lang.String;

        $r5 = r0.<org.apache.cxf.common.util.ClassReader: byte[] buf>;

        $i4 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

        $i5 = $i4 - $i3;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r5, $i5, $i3, "utf-8");

        $r6[i1] = $r4;

        $r7 = new java.lang.String;

        $r8 = r0.<org.apache.cxf.common.util.ClassReader: byte[] buf>;

        $i6 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

        $i7 = $i6 - $i3;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r8, $i7, $i3, "utf-8");

        r10 = $r7;

     label2:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        return r10;

     label3:
        $r9 := @caughtexception;

     label4:
        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i0;

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final void readCpool() throws java.io.IOException
    {
        java.lang.IllegalStateException $r4;
        java.lang.Object[] $r2;
        org.apache.cxf.common.util.ClassReader r0;
        int[] $r1, $r3;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $r1 = newarray (int)[$i0];

        r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex> = $r1;

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<org.apache.cxf.common.util.ClassReader: java.lang.Object[] cpool> = $r2;

        i4 = 1;

     label1:
        if i4 >= $i0 goto label9;

        $i1 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int read()>();

        $r3 = r0.<org.apache.cxf.common.util.ClassReader: int[] cpoolIndex>;

        $i2 = r0.<java.io.ByteArrayInputStream: int pos>;

        $r3[i4] = $i2;

        tableswitch($i1)
        {
            case 1: goto label6;
            case 2: goto label7;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            default: goto label7;
        };

     label2:
        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        goto label8;

     label3:
        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        goto label8;

     label4:
        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readInt()>();

        i4 = i4 + 1;

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readInt()>();

        goto label8;

     label5:
        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readInt()>();

        goto label8;

     label6:
        $i3 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i3);

        goto label8;

     label7:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label8:
        i4 = i4 + 1;

        goto label1;

     label9:
        return;
    }

    protected final void skipAttributes() throws java.io.IOException
    {
        org.apache.cxf.common.util.ClassReader r0;
        int $i0, $i1, i2;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $i1 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readInt()>();

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected final void readAttributes() throws java.io.IOException
    {
        java.lang.Throwable $r6, $r11;
        java.lang.Object[] $r5;
        java.lang.Error $r9;
        org.apache.cxf.common.util.ClassReader r0;
        java.util.Map $r2;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r1;
        java.lang.reflect.Method r4;
        java.lang.IllegalAccessException $r12;
        java.io.IOException $r7;
        java.lang.RuntimeException $r8;
        java.lang.reflect.InvocationTargetException $r10;
        java.lang.Object $r3;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        i4 = 0;

     label01:
        if i4 >= $i0 goto label13;

        $i1 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $i2 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readInt()>();

        i3 = r0.<org.apache.cxf.common.util.ClassReader: int pos>;

        $r1 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: java.lang.String resolveUtf8(int)>($i1);

        $r2 = r0.<org.apache.cxf.common.util.ClassReader: java.util.Map attrMethods>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.reflect.Method) $r3;

        if r4 == null goto label11;

     label02:
        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

     label03:
        goto label12;

     label04:
        $r12 := @caughtexception;

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i3;

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i2);

        goto label12;

     label05:
        $r10 := @caughtexception;

     label06:
        $r11 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r11;

     label07:
        $r9 := @caughtexception;

        throw $r9;

     label08:
        $r8 := @caughtexception;

        throw $r8;

     label09:
        $r7 := @caughtexception;

        throw $r7;

     label10:
        $r6 := @caughtexception;

        r0.<org.apache.cxf.common.util.ClassReader: int pos> = i3;

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i2);

        goto label12;

     label11:
        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i2);

     label12:
        i4 = i4 + 1;

        goto label01;

     label13:
        return;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label05;
        catch java.lang.Error from label06 to label07 with label07;
        catch java.lang.RuntimeException from label06 to label07 with label08;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label10;
    }

    public void readCode() throws java.io.IOException
    {
        org.apache.cxf.common.util.ClassReader r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.cxf.common.util.ClassReader;

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $i0 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readInt()>();

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: int readShort()>();

        $i2 = 8 * $i1;

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void skipFully(int)>($i2);

        virtualinvoke r0.<org.apache.cxf.common.util.ClassReader: void readAttributes()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.common.util.ClassReader: int CONSTANT_UTF_8> = 1;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_NAME_AND_TYPE> = 12;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_DOUBLE> = 6;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_LONG> = 5;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_FLOAT> = 4;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_INTEGER> = 3;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_STRING> = 8;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_INTERFACE_METHOD_REF> = 11;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_METHODREF> = 10;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_FIELDREF> = 9;

        <org.apache.cxf.common.util.ClassReader: int CONSTANT_CLASS> = 7;

        return;
    }
}
