final class com.mycila.inject.internal.guava.base.FunctionalEquivalence extends com.mycila.inject.internal.guava.base.Equivalence implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final com.mycila.inject.internal.guava.base.Function function;
    private final com.mycila.inject.internal.guava.base.Equivalence resultEquivalence;

    void <init>(com.mycila.inject.internal.guava.base.Function, com.mycila.inject.internal.guava.base.Equivalence)
    {
        com.mycila.inject.internal.guava.base.Equivalence r4, $r6;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence r0;
        java.lang.Object $r2, $r5;
        com.mycila.inject.internal.guava.base.Function r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Function;

        r4 := @parameter1: com.mycila.inject.internal.guava.base.Equivalence;

        specialinvoke r0.<com.mycila.inject.internal.guava.base.Equivalence: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.mycila.inject.internal.guava.base.Function) $r2;

        r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function> = $r3;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.base.Equivalence) $r5;

        r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence> = $r6;

        return;
    }

    protected boolean doEquivalent(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r3;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence r0;
        java.lang.Object r1, $r4, r5, $r7;
        com.mycila.inject.internal.guava.base.Function $r2, $r6;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r3 = r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence>;

        $r2 = r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $r4 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r6 = r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $r7 = interfaceinvoke $r6.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>(r5);

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>($r4, $r7);

        return $z0;
    }

    protected int doHash(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r3;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence r0;
        int $i0;
        java.lang.Object r1, $r4;
        com.mycila.inject.internal.guava.base.Function $r2;

        r0 := @this: com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence>;

        $r2 = r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $r4 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.base.Equivalence: int hash(java.lang.Object)>($r4);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r5, $r6;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence r1, r2;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.base.Function $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        if $z0 == 0 goto label4;

        r2 = (com.mycila.inject.internal.guava.base.FunctionalEquivalence) r0;

        $r4 = r1.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $r3 = r2.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r1.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence>;

        $r5 = r2.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence>;

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public int hashCode()
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.base.Equivalence $r3;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence r1;
        int $i0;
        com.mycila.inject.internal.guava.base.Function $r2;

        r1 := @this: com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = r1.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $r0[0] = $r2;

        $r3 = r1.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence>;

        $r0[1] = $r3;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: int hashCode(java.lang.Object[])>($r0);

        return $i0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.base.Equivalence $r2;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        com.mycila.inject.internal.guava.base.Function $r5;
        java.lang.String $r8;

        r1 := @this: com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Equivalence resultEquivalence>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".onResultOf(");

        $r5 = r1.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: com.mycila.inject.internal.guava.base.Function function>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.base.FunctionalEquivalence: long serialVersionUID> = 0L;

        return;
    }
}
