public abstract class org.apache.batik.ext.awt.geom.AbstractSegment extends java.lang.Object implements org.apache.batik.ext.awt.geom.Segment
{
    static final double eps;
    static final double tol;

    public void <init>()
    {
        org.apache.batik.ext.awt.geom.AbstractSegment r0;

        r0 := @this: org.apache.batik.ext.awt.geom.AbstractSegment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract int findRoots(double, double[]);

    public org.apache.batik.ext.awt.geom.Segment$SplitResults split(double)
    {
        org.apache.batik.ext.awt.geom.Segment[] r10, r11, r12;
        byte $b2, $b3, $b5, $b8, $b11;
        org.apache.batik.ext.awt.geom.Segment $r3, $r4, $r6, $r7, $r8;
        boolean z0, z1, $z4, $z5, $z6, $z7, $z8;
        org.apache.batik.ext.awt.geom.AbstractSegment r1;
        double[] $r0, r2;
        org.apache.batik.ext.awt.geom.Segment$SplitResults $r13;
        java.awt.geom.Point2D$Double $r5;
        int $i0, $i1, $i4, $i6, $i7, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, i26, i27, $i28, $i29, $i30, $i31;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;

        r1 := @this: org.apache.batik.ext.awt.geom.AbstractSegment;

        d0 := @parameter0: double;

        $r0 = newarray (double)[3];

        $r0[0] = 0.0;

        $r0[1] = 0.0;

        $r0[2] = 0.0;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.geom.AbstractSegment: int findRoots(double,double[])>(d0, $r0);

        if $i0 != 0 goto label01;

        return null;

     label01:
        staticinvoke <java.util.Arrays: void sort(double[],int,int)>($r0, 0, $i0);

        $i1 = $i0 + 2;

        r2 = newarray (double)[$i1];

        i20 = 1;

        r2[0] = 0.0;

        i21 = 0;

        goto label06;

     label02:
        d7 = $r0[i21];

        $b2 = d7 cmpg 0.0;

        $i28 = (int) $b2;

        if $i28 > 0 goto label03;

        goto label05;

     label03:
        $b3 = d7 cmpl 1.0;

        $i29 = (int) $b3;

        if $i29 < 0 goto label04;

        goto label07;

     label04:
        $i4 = i20 - 1;

        $d1 = r2[$i4];

        $b5 = $d1 cmpl d7;

        if $b5 == 0 goto label05;

        $i6 = i20;

        i20 = i20 + 1;

        r2[$i6] = d7;

     label05:
        i21 = i21 + 1;

     label06:
        if i21 < $i0 goto label02;

     label07:
        i22 = i20 + 1;

        r2[i20] = 1.0;

        if i22 != 2 goto label08;

        return null;

     label08:
        r10 = newarray (org.apache.batik.ext.awt.geom.Segment)[i22];

        d8 = 0.0;

        i23 = 0;

        z0 = 0;

        z1 = 0;

        i24 = 1;

        goto label17;

     label09:
        $i7 = i24 - 1;

        $d3 = r2[$i7];

        $d2 = r2[i24];

        $r3 = virtualinvoke r1.<org.apache.batik.ext.awt.geom.AbstractSegment: org.apache.batik.ext.awt.geom.Segment getSegment(double,double)>($d3, $d2);

        r10[i23] = $r3;

        $r4 = r10[i23];

        $r5 = interfaceinvoke $r4.<org.apache.batik.ext.awt.geom.Segment: java.awt.geom.Point2D$Double eval(double)>(0.5);

        if i23 != 0 goto label12;

        i23 = i23 + 1;

        $d6 = $r5.<java.awt.geom.Point2D$Double: double y>;

        $b11 = $d6 cmpg d0;

        $i30 = (int) $b11;

        if $i30 >= 0 goto label10;

        $z8 = 1;

        $z7 = 1;

        goto label11;

     label10:
        $z8 = 0;

        $z7 = 0;

     label11:
        z1 = $z7;

        z0 = $z8;

        goto label16;

     label12:
        $d4 = $r5.<java.awt.geom.Point2D$Double: double y>;

        $b8 = $d4 cmpg d0;

        $i31 = (int) $b8;

        if $i31 >= 0 goto label13;

        $z6 = 1;

        $z5 = 1;

        goto label14;

     label13:
        $z6 = 0;

        $z5 = 0;

     label14:
        if z1 != $z5 goto label15;

        $i10 = i23 - 1;

        $d5 = r2[i24];

        $r6 = virtualinvoke r1.<org.apache.batik.ext.awt.geom.AbstractSegment: org.apache.batik.ext.awt.geom.Segment getSegment(double,double)>(d8, $d5);

        r10[$i10] = $r6;

        goto label16;

     label15:
        i23 = i23 + 1;

        $i9 = i24 - 1;

        d8 = r2[$i9];

        z1 = $z6;

     label16:
        i24 = i24 + 1;

     label17:
        if i24 < i22 goto label09;

        if i23 != 1 goto label18;

        return null;

     label18:
        if z0 == 0 goto label19;

        $i17 = i23 + 1;

        $i18 = $i17 / 2;

        r11 = newarray (org.apache.batik.ext.awt.geom.Segment)[$i18];

        $i19 = i23 / 2;

        r12 = newarray (org.apache.batik.ext.awt.geom.Segment)[$i19];

        goto label20;

     label19:
        $i12 = i23 / 2;

        r11 = newarray (org.apache.batik.ext.awt.geom.Segment)[$i12];

        $i13 = i23 + 1;

        $i14 = $i13 / 2;

        r12 = newarray (org.apache.batik.ext.awt.geom.Segment)[$i14];

     label20:
        i25 = 0;

        i26 = 0;

        i27 = 0;

        goto label26;

     label21:
        if z0 == 0 goto label22;

        $i16 = i25;

        i25 = i25 + 1;

        $r8 = r10[i27];

        r11[$i16] = $r8;

        goto label23;

     label22:
        $i15 = i26;

        i26 = i26 + 1;

        $r7 = r10[i27];

        r12[$i15] = $r7;

     label23:
        if z0 != 0 goto label24;

        $z4 = 1;

        goto label25;

     label24:
        $z4 = 0;

     label25:
        z0 = $z4;

        i27 = i27 + 1;

     label26:
        if i27 < i23 goto label21;

        $r13 = new org.apache.batik.ext.awt.geom.Segment$SplitResults;

        specialinvoke $r13.<org.apache.batik.ext.awt.geom.Segment$SplitResults: void <init>(org.apache.batik.ext.awt.geom.Segment[],org.apache.batik.ext.awt.geom.Segment[])>(r12, r11);

        return $r13;
    }

    public org.apache.batik.ext.awt.geom.Segment splitBefore(double)
    {
        org.apache.batik.ext.awt.geom.AbstractSegment r0;
        org.apache.batik.ext.awt.geom.Segment $r1;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.geom.AbstractSegment;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.AbstractSegment: org.apache.batik.ext.awt.geom.Segment getSegment(double,double)>(0.0, d0);

        return $r1;
    }

    public org.apache.batik.ext.awt.geom.Segment splitAfter(double)
    {
        org.apache.batik.ext.awt.geom.AbstractSegment r0;
        org.apache.batik.ext.awt.geom.Segment $r1;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.geom.AbstractSegment;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.AbstractSegment: org.apache.batik.ext.awt.geom.Segment getSegment(double,double)>(d0, 1.0);

        return $r1;
    }

    public static int solveLine(double, double, double[])
    {
        byte $b0, $b1;
        double[] r0;
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: double[];

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $b1 = d1 cmpl 0.0;

        if $b1 == 0 goto label1;

        return 0;

     label1:
        r0[0] = 0.0;

        return 1;

     label2:
        $d2 = neg d1;

        $d3 = $d2 / d0;

        r0[0] = $d3;

        return 1;
    }

    public static int solveQuad(double, double, double, double[])
    {
        double[] r0;
        byte $b0, $b1, $b2;
        int $i3, $i4, $i5;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: double[];

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $i3 = staticinvoke <org.apache.batik.ext.awt.geom.AbstractSegment: int solveLine(double,double,double[])>(d1, d2, r0);

        return $i3;

     label1:
        $d5 = d1 * d1;

        $d3 = 4.0 * d0;

        $d4 = $d3 * d2;

        d20 = $d5 - $d4;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>(d20);

        $d7 = 1.4210854715202004E-14 * d1;

        $d8 = $d7 * d1;

        $b1 = $d6 cmpg $d8;

        $i4 = (int) $b1;

        if $i4 > 0 goto label2;

        $d18 = neg d1;

        $d17 = 2.0 * d0;

        $d19 = $d18 / $d17;

        r0[0] = $d19;

        return 1;

     label2:
        $b2 = d20 cmpg 0.0;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label3;

        return 0;

     label3:
        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>(d20);

        $d10 = staticinvoke <org.apache.batik.ext.awt.geom.AbstractSegment: double matchSign(double,double)>($d9, d1);

        $d11 = d1 + $d10;

        d12 = neg $d11;

        $d13 = 2.0 * d2;

        $d14 = $d13 / d12;

        r0[0] = $d14;

        $d15 = 2.0 * d0;

        $d16 = d12 / $d15;

        r0[1] = $d16;

        return 2;
    }

    public static double matchSign(double, double)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4, $i5;
        double d0, d1, $d2, $d3;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label3;

        $b2 = d1 cmpg 0.0;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label1;

        $d2 = d1;

        goto label2;

     label1:
        $d2 = neg d1;

     label2:
        return $d2;

     label3:
        $b1 = d1 cmpl 0.0;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label4;

        $d3 = d1;

        goto label5;

     label4:
        $d3 = neg d1;

     label5:
        return $d3;
    }

    public static int solveCubic(double, double, double, double, double[])
    {
        byte $b1, $b2, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b16, $b17, $b18, $b19, $b20, $b21, $b23, b29, b30, b31;
        double[] $r0, $r1, $r2, r3;
        int $i0, $i3, $i4, $i12, $i13, $i14, $i15, i22, i24, i25, i26, i27, $i28, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47;
        double d0, d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, $d21, $d22, $d23, $d24, $d25, d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, d50, d51, $d52, $d53, $d54, $d55, d56, d57, d58, d59, d60, d61, d62;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d5 := @parameter3: double;

        r3 := @parameter4: double[];

        $r0 = newarray (double)[2];

        $r0[0] = 0.0;

        $r0[1] = 0.0;

        $d4 = 3.0 * d0;

        $d3 = 2.0 * d1;

        $i0 = staticinvoke <org.apache.batik.ext.awt.geom.AbstractSegment: int solveQuad(double,double,double,double[])>($d4, $d3, d2, $r0);

        $r1 = newarray (double)[4];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r2 = newarray (double)[4];

        $r2[0] = 0.0;

        $r2[1] = 0.0;

        $r2[2] = 0.0;

        $r2[3] = 0.0;

        $r1[0] = d5;

        i22 = 1;

        b31 = 1;

        b30 = 1;

        b29 = 1;

        $r2[0] = 0.0;

        lookupswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            default: goto label05;
        };

     label01:
        d50 = $r0[0];

        $b20 = d50 cmpl 0.0;

        $i32 = (int) $b20;

        if $i32 <= 0 goto label05;

        $b21 = d50 cmpg 1.0;

        $i33 = (int) $b21;

        if $i33 >= 0 goto label05;

        $d44 = d0 * d50;

        $d45 = $d44 + d1;

        $d46 = $d45 * d50;

        $d47 = $d46 + d2;

        $d48 = $d47 * d50;

        $d49 = $d48 + d5;

        $r1[1] = $d49;

        i22 = 2;

        $r2[1] = d50;

        goto label05;

     label02:
        $d7 = $r0[0];

        $d6 = $r0[1];

        $b1 = $d7 cmpl $d6;

        $i34 = (int) $b1;

        if $i34 <= 0 goto label03;

        d51 = $r0[0];

        $d42 = $r0[1];

        $r0[0] = $d42;

        $r0[1] = d51;

     label03:
        $d43 = $r0[0];

        $b2 = $d43 cmpl 0.0;

        $i35 = (int) $b2;

        if $i35 <= 0 goto label04;

        $b19 = $d43 cmpg 1.0;

        $i36 = (int) $b19;

        if $i36 >= 0 goto label04;

        $d36 = d0 * $d43;

        $d37 = $d36 + d1;

        $d38 = $d37 * $d43;

        $d39 = $d38 + d2;

        $d40 = $d39 * $d43;

        $d41 = $d40 + d5;

        $r1[1] = $d41;

        i22 = 2;

        b31 = 2;

        b30 = 2;

        b29 = 2;

        $r2[1] = $d43;

     label04:
        $d52 = $r0[1];

        $b23 = $d52 cmpl 0.0;

        $i37 = (int) $b23;

        if $i37 <= 0 goto label05;

        $b18 = $d52 cmpg 1.0;

        $i38 = (int) $b18;

        if $i38 >= 0 goto label05;

        $d30 = d0 * $d52;

        $d31 = $d30 + d1;

        $d32 = $d31 * $d52;

        $d33 = $d32 + d2;

        $d34 = $d33 * $d52;

        $d35 = $d34 + d5;

        $r1[b29] = $d35;

        i22 = b31 + 1;

        $r2[b30] = $d52;

        goto label05;

     label05:
        $d53 = d0 + d1;

        $d54 = $d53 + d2;

        $d55 = $d54 + d5;

        $r1[i22] = $d55;

        i24 = i22 + 1;

        $r2[i22] = 1.0;

        i25 = 0;

        i26 = 0;

        goto label19;

     label06:
        d56 = $r1[i26];

        d57 = $r2[i26];

        $i3 = i26 + 1;

        d58 = $r1[$i3];

        $i4 = i26 + 1;

        d59 = $r2[$i4];

        $b5 = d56 cmpg 0.0;

        $i39 = (int) $b5;

        if $i39 >= 0 goto label07;

        $b17 = d58 cmpg 0.0;

        $i40 = (int) $b17;

        if $i40 >= 0 goto label07;

        goto label18;

     label07:
        $b6 = d56 cmpl 0.0;

        $i41 = (int) $b6;

        if $i41 <= 0 goto label08;

        $b16 = d58 cmpl 0.0;

        $i42 = (int) $b16;

        if $i42 <= 0 goto label08;

        goto label18;

     label08:
        $b7 = d56 cmpl d58;

        $i43 = (int) $b7;

        if $i43 <= 0 goto label09;

        d60 = d56;

        d56 = d58;

        d58 = d60;

        d61 = d57;

        d57 = d59;

        d59 = d61;

     label09:
        $d9 = neg d56;

        $d8 = 1.4210854715202004E-14 * d58;

        $b8 = $d9 cmpg $d8;

        $i44 = (int) $b8;

        if $i44 >= 0 goto label10;

        $i15 = i25;

        i25 = i25 + 1;

        r3[$i15] = d57;

        goto label18;

     label10:
        $d10 = -1.4210854715202004E-14 * d56;

        $b9 = d58 cmpg $d10;

        $i45 = (int) $b9;

        if $i45 >= 0 goto label11;

        $i14 = i25;

        i25 = i25 + 1;

        r3[$i14] = d59;

        i26 = i26 + 1;

        goto label18;

     label11:
        $d11 = d58 - d56;

        d62 = 1.4210854715202004E-14 * $d11;

        i27 = 0;

        goto label16;

     label12:
        d12 = d59 - d57;

        d13 = d58 - d56;

        $d14 = d56 / d13;

        $d15 = staticinvoke <java.lang.Math: double abs(double)>($d14);

        $d16 = $d15 * 99.0;

        $d17 = $d16 + 0.5;

        $d18 = $d17 * d12;

        $d19 = $d18 / 100.0;

        d20 = d57 + $d19;

        $d21 = d0 * d20;

        $d22 = $d21 + d1;

        $d23 = $d22 * d20;

        $d24 = $d23 + d2;

        $d25 = $d24 * d20;

        d26 = $d25 + d5;

        $d27 = staticinvoke <java.lang.Math: double abs(double)>(d26);

        $b10 = $d27 cmpg d62;

        $i46 = (int) $b10;

        if $i46 >= 0 goto label13;

        $i12 = i25;

        i25 = i25 + 1;

        r3[$i12] = d20;

        goto label17;

     label13:
        $b11 = d26 cmpg 0.0;

        $i47 = (int) $b11;

        if $i47 >= 0 goto label14;

        d57 = d20;

        d56 = d26;

        goto label15;

     label14:
        d59 = d20;

        d58 = d26;

     label15:
        i27 = i27 + 1;

     label16:
        if i27 < 20 goto label12;

     label17:
        if i27 != 20 goto label18;

        $i13 = i25;

        i25 = i25 + 1;

        $d28 = d57 + d59;

        $d29 = $d28 / 2.0;

        r3[$i13] = $d29;

     label18:
        i26 = i26 + 1;

     label19:
        $i28 = i24 - 1;

        if i26 < $i28 goto label06;

        return i25;
    }

    public abstract double getLength(double);

    public abstract double getLength();

    public abstract void subdivide(double, org.apache.batik.ext.awt.geom.Segment, org.apache.batik.ext.awt.geom.Segment);

    public abstract void subdivide(org.apache.batik.ext.awt.geom.Segment, org.apache.batik.ext.awt.geom.Segment);

    public abstract org.apache.batik.ext.awt.geom.Segment getSegment(double, double);

    public abstract java.awt.geom.Point2D$Double eval(double);

    public abstract java.awt.geom.Point2D$Double evalDt(double);

    public abstract java.awt.geom.Rectangle2D getBounds2D();

    public abstract double maxY();

    public abstract double minY();

    public abstract double maxX();

    public abstract double minX();

    public static void <clinit>()
    {
        <org.apache.batik.ext.awt.geom.AbstractSegment: double tol> = 1.4210854715202004E-14;

        <org.apache.batik.ext.awt.geom.AbstractSegment: double eps> = 3.552713678800501E-15;

        return;
    }
}
