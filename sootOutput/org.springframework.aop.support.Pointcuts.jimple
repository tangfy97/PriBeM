public abstract class org.springframework.aop.support.Pointcuts extends java.lang.Object
{
    public static final org.springframework.aop.Pointcut SETTERS;
    public static final org.springframework.aop.Pointcut GETTERS;

    static void <clinit>()
    {
        org.springframework.aop.support.Pointcuts$SetterPointcut $r0;
        org.springframework.aop.support.Pointcuts$GetterPointcut $r1;

        $r0 = <org.springframework.aop.support.Pointcuts$SetterPointcut: org.springframework.aop.support.Pointcuts$SetterPointcut INSTANCE>;

        <org.springframework.aop.support.Pointcuts: org.springframework.aop.Pointcut SETTERS> = $r0;

        $r1 = <org.springframework.aop.support.Pointcuts$GetterPointcut: org.springframework.aop.support.Pointcuts$GetterPointcut INSTANCE>;

        <org.springframework.aop.support.Pointcuts: org.springframework.aop.Pointcut GETTERS> = $r1;

        return;
    }

    public void <init>()
    {
        org.springframework.aop.support.Pointcuts r0;

        r0 := @this: org.springframework.aop.support.Pointcuts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.springframework.aop.Pointcut union(org.springframework.aop.Pointcut, org.springframework.aop.Pointcut)
    {
        org.springframework.aop.support.ComposablePointcut $r0, $r3;
        org.springframework.aop.Pointcut r1, r2;

        r1 := @parameter0: org.springframework.aop.Pointcut;

        r2 := @parameter1: org.springframework.aop.Pointcut;

        $r0 = new org.springframework.aop.support.ComposablePointcut;

        specialinvoke $r0.<org.springframework.aop.support.ComposablePointcut: void <init>(org.springframework.aop.Pointcut)>(r1);

        $r3 = virtualinvoke $r0.<org.springframework.aop.support.ComposablePointcut: org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.Pointcut)>(r2);

        return $r3;
    }

    public static org.springframework.aop.Pointcut intersection(org.springframework.aop.Pointcut, org.springframework.aop.Pointcut)
    {
        org.springframework.aop.support.ComposablePointcut $r0, $r3;
        org.springframework.aop.Pointcut r1, r2;

        r1 := @parameter0: org.springframework.aop.Pointcut;

        r2 := @parameter1: org.springframework.aop.Pointcut;

        $r0 = new org.springframework.aop.support.ComposablePointcut;

        specialinvoke $r0.<org.springframework.aop.support.ComposablePointcut: void <init>(org.springframework.aop.Pointcut)>(r1);

        $r3 = virtualinvoke $r0.<org.springframework.aop.support.ComposablePointcut: org.springframework.aop.support.ComposablePointcut intersection(org.springframework.aop.Pointcut)>(r2);

        return $r3;
    }

    public static boolean matches(org.springframework.aop.Pointcut, java.lang.reflect.Method, java.lang.Class, java.lang.Object[])
    {
        java.lang.Object[] r6;
        org.springframework.aop.Pointcut r0, $r1;
        org.springframework.aop.ClassFilter $r2;
        java.lang.Class r3;
        java.lang.reflect.Method r5;
        org.springframework.aop.MethodMatcher $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.springframework.aop.Pointcut;

        r5 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Class;

        r6 := @parameter3: java.lang.Object[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Pointcut must not be null");

        $r1 = <org.springframework.aop.Pointcut: org.springframework.aop.Pointcut TRUE>;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.aop.Pointcut: org.springframework.aop.ClassFilter getClassFilter()>();

        $z0 = interfaceinvoke $r2.<org.springframework.aop.ClassFilter: boolean matches(java.lang.Class)>(r3);

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r0.<org.springframework.aop.Pointcut: org.springframework.aop.MethodMatcher getMethodMatcher()>();

        $z1 = interfaceinvoke $r4.<org.springframework.aop.MethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class)>(r5, r3);

        if $z1 == 0 goto label3;

        $z2 = interfaceinvoke $r4.<org.springframework.aop.MethodMatcher: boolean isRuntime()>();

        if $z2 == 0 goto label2;

        $z3 = interfaceinvoke $r4.<org.springframework.aop.MethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class,java.lang.Object[])>(r5, r3, r6);

        if $z3 != 0 goto label2;

        return 0;

     label2:
        return 1;

     label3:
        return 0;
    }
}
