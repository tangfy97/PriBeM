public class org.waveprotocol.wave.model.document.parser.AnnotationParser extends java.lang.Object
{
    int offset;
    java.lang.String input;

    private void <init>(java.lang.String) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.AnnotationParser r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.AnnotationParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = 0;

        r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input> = r1;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>(r1);

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Input is not valid UTF-16: ";

        $r2[1] = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: void ensure(boolean,java.lang.Object[])>($z0, $r2);

        return;
    }

    public static java.util.List parseAnnotations(java.lang.String) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.util.List $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.AnnotationParser $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.parser.AnnotationParser;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: void <init>(java.lang.String)>(r1);

        $r2 = specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.util.List parse()>();

        return $r2;
    }

    private java.lang.String quotedValue() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        int $i0, $i2;
        char $c1;
        java.lang.String $r1, $r2, $r3;
        org.waveprotocol.wave.model.document.parser.AnnotationParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.AnnotationParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i0 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i2 = (int) $c1;

        if $i2 != 34 goto label1;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String quotedValue(char)>(34);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String quotedValue(char)>(39);

        return $r2;
    }

    private transient void ensure(boolean, java.lang.Object[]) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] r0;
        java.lang.String[] r1;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r3;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        java.lang.String $r2, $r5;
        boolean z0;
        org.waveprotocol.wave.model.document.parser.AnnotationParser r6;

        r6 := @this: org.waveprotocol.wave.model.document.parser.AnnotationParser;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object[];

        if z0 != 0 goto label3;

        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r4 = r0[i2];

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        r1[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.lang.String join(java.lang.String[])>(r1);

        $r3 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label3:
        return;
    }

    private java.lang.String quotedValue(char) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Integer $r4;
        java.lang.Character $r3, $r7;
        boolean $z0, $z1;
        java.lang.Object[] $r2, $r6;
        int $i0, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21;
        java.lang.String $r1, $r5, $r8, $r9, $r10, $r11, $r12, $r13;
        char $c1, c2, $c7;
        org.waveprotocol.wave.model.document.parser.AnnotationParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.AnnotationParser;

        c2 := @parameter0: char;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i0 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i16 = (int) $c1;

        $i17 = (int) c2;

        if $i16 != $i17 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[6];

        $r2[0] = "expected ";

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);

        $r2[1] = $r3;

        $r2[2] = " at position ";

        $i3 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[3] = $r4;

        $r2[4] = " in ";

        $r5 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $r2[5] = $r5;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: void ensure(boolean,java.lang.Object[])>($z0, $r2);

        $i4 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $i5 = $i4 + 1;

        r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = $i5;

        $i13 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

     label3:
        $r13 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i14 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $i18 = (int) c2;

        $i15 = virtualinvoke $r13.<java.lang.String: int indexOf(int,int)>($i18, $i14);

        $i20 = (int) -1;

        if $i15 == $i20 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = "closing ";

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);

        $r6[1] = $r7;

        $r6[2] = " not found";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: void ensure(boolean,java.lang.Object[])>($z1, $r6);

        r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = $i15;

        $r8 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i6 = $i15 - 1;

        $c7 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i6);

        $i21 = (int) $c7;

        if $i21 == 92 goto label6;

        goto label7;

     label6:
        $i8 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $i9 = $i8 + 1;

        r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = $i9;

        goto label3;

     label7:
        $r9 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i10 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>($i13, $i10);

        $i11 = r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $i12 = $i11 + 1;

        r0.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = $i12;

        $r11 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String xmlTextUnEscape(java.lang.String)>($r10);

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String annotationUnEscape(java.lang.String)>($r11);

        return $r12;
    }

    private java.util.List parse() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object[] $r4, $r6;
        java.util.ArrayList $r15;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r2, $r3, $r5, $r7, $r8, $r10, $r11, $r12, $r14;
        char $c5, $c9;
        org.waveprotocol.wave.model.util.Pair $r16, $r17;
        org.waveprotocol.wave.model.document.parser.AnnotationParser r1;

        r1 := @this: org.waveprotocol.wave.model.document.parser.AnnotationParser;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

     label1:
        $i0 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $r2 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label9;

        $r3 = specialinvoke r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String quotedValue()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("?");

        if $z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "Invalid char ?: ";

        $r5 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $r4[1] = $r5;

        specialinvoke r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: void ensure(boolean,java.lang.Object[])>($z2, $r4);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("@");

        if $z1 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "Invalid char @: ";

        $r7 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $r6[1] = $r7;

        specialinvoke r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: void ensure(boolean,java.lang.Object[])>($z3, $r6);

        $i2 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $r8 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label6;

        $r11 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i8 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $c9 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i8);

        $i14 = (int) $c9;

        if $i14 != 61 goto label6;

        $i10 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $i11 = $i10 + 1;

        r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = $i11;

        $r12 = specialinvoke r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String quotedValue()>();

        $r16 = new org.waveprotocol.wave.model.util.Pair;

        specialinvoke $r16.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r12);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label7;

     label6:
        $r17 = new org.waveprotocol.wave.model.util.Pair;

        specialinvoke $r17.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, null);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r17);

     label7:
        $i12 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $r14 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i13 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i12 >= $i13 goto label8;

        $r10 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: java.lang.String input>;

        $i4 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $c5 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i4);

        $i15 = (int) $c5;

        if $i15 != 32 goto label8;

        $i6 = r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset>;

        $i7 = $i6 + 1;

        r1.<org.waveprotocol.wave.model.document.parser.AnnotationParser: int offset> = $i7;

        goto label7;

     label8:
        goto label1;

     label9:
        return $r15;
    }
}
