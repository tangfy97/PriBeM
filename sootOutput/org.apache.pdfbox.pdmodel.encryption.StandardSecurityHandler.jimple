public class org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler extends org.apache.pdfbox.pdmodel.encryption.SecurityHandler
{
    public static final java.lang.String FILTER;
    private static final int DEFAULT_VERSION;
    private static final int DEFAULT_REVISION;
    private int revision;
    private org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy;
    private org.apache.pdfbox.encryption.ARCFour rc4;
    public static final java.lang.Class PROTECTION_POLICY_CLASS;
    public static final byte[] ENCRYPT_PADDING;

    public void <init>()
    {
        org.apache.pdfbox.encryption.ARCFour $r1;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision> = 3;

        $r1 = new org.apache.pdfbox.encryption.ARCFour;

        specialinvoke $r1.<org.apache.pdfbox.encryption.ARCFour: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4> = $r1;

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy)
    {
        int $i0;
        org.apache.pdfbox.encryption.ARCFour $r1;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;
        org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy r2, $r3;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision> = 3;

        $r1 = new org.apache.pdfbox.encryption.ARCFour;

        specialinvoke $r1.<org.apache.pdfbox.encryption.ARCFour: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4> = $r1;

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy> = r2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy>;

        $i0 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy: int getEncryptionKeyLength()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int keyLength> = $i0;

        return;
    }

    private int computeVersionNumber()
    {
        int $i0;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        $i0 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int keyLength>;

        if $i0 != 40 goto label1;

        return 1;

     label1:
        return 2;
    }

    private int computeRevisionNumber()
    {
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r2, $r4;
        int $i0, $i1, $i2;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;
        org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        $i0 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int version>;

        if $i0 >= 2 goto label1;

        $r3 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy: org.apache.pdfbox.pdmodel.encryption.AccessPermission getPermissions()>();

        $z1 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: boolean hasAnyRevision3PermissionSet()>();

        if $z1 != 0 goto label1;

        return 2;

     label1:
        $i1 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int version>;

        if $i1 == 2 goto label2;

        $i2 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int version>;

        if $i2 == 3 goto label2;

        $r1 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy>;

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy: org.apache.pdfbox.pdmodel.encryption.AccessPermission getPermissions()>();

        $z0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: boolean hasAnyRevision3PermissionSet()>();

        if $z0 == 0 goto label3;

     label2:
        return 3;

     label3:
        return 4;
    }

    public void decryptDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r5;
        org.apache.pdfbox.cos.COSArray $r6;
        org.apache.pdfbox.pdmodel.PDDocument r1, $r2, $r4;
        org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial r7;
        org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary $r3;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r7 := @parameter1: org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document> = r1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary getEncryptionDictionary()>();

        $r4 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSArray getDocumentID()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)>($r3, $r6, r7);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void proceedDecryption()>();

        return;
    }

    public void prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary, org.apache.pdfbox.cos.COSArray, org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r8, $r9, $r10, $r16, $r17, r22, $r23, $r24, $r25, $r26;
        org.apache.pdfbox.exceptions.CryptographyException $r6, $r19;
        org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial r0;
        org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r7, $r15;
        org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial r1;
        org.apache.pdfbox.cos.COSBase $r18;
        org.apache.pdfbox.cos.COSArray r4;
        long $l3;
        org.apache.pdfbox.cos.COSString r21;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.String $r2, $r13, $r14, r20;
        org.apache.pdfbox.cos.COSName $r12;
        org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary r3;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r5;

        r5 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r3 := @parameter0: org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary;

        r4 := @parameter1: org.apache.pdfbox.cos.COSArray;

        r0 := @parameter2: org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;

        $z0 = r0 instanceof org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;

        if $z0 != 0 goto label1;

        $r19 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r19.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>("Provided decryption material is not compatible with the document");

        throw $r19;

     label1:
        r1 = (org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial) r0;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial: java.lang.String getPassword()>();

        r20 = $r2;

        if $r2 != null goto label2;

        r20 = "";

     label2:
        $i0 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getPermissions()>();

        $i1 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getRevision()>();

        $i2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getLength()>();

        $i5 = $i2 / 8;

        if r4 == null goto label3;

        $i4 = virtualinvoke r4.<org.apache.pdfbox.cos.COSArray: int size()>();

        if $i4 < 1 goto label3;

        $r18 = virtualinvoke r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(0);

        r21 = (org.apache.pdfbox.cos.COSString) $r18;

        r22 = virtualinvoke r21.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        goto label4;

     label3:
        r22 = newarray (byte)[0];

     label4:
        $z2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: boolean isEncryptMetaData()>();

        $r23 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: byte[] getUserKey()>();

        $r24 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: byte[] getOwnerKey()>();

        $r25 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $z3 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r25, $r23, $r24, $i0, r22, $i1, $i5, $z2);

        $r26 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $z4 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isOwnerPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r26, $r23, $r24, $i0, r22, $i1, $i5, $z2);

        if $z3 == 0 goto label5;

        $r15 = new org.apache.pdfbox.pdmodel.encryption.AccessPermission;

        specialinvoke $r15.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void <init>(int)>($i0);

        r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission> = $r15;

        $r16 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r17 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],int,byte[],int,int,boolean)>($r16, $r24, $i0, r22, $i1, $i5, $z2);

        r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r17;

        goto label7;

     label5:
        if $z4 == 0 goto label6;

        $r7 = staticinvoke <org.apache.pdfbox.pdmodel.encryption.AccessPermission: org.apache.pdfbox.pdmodel.encryption.AccessPermission getOwnerAccessPermission()>();

        r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission> = $r7;

        $r8 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $l3 = (long) $i5;

        $r9 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] getUserPassword(byte[],byte[],int,long)>($r8, $r24, $i1, $l3);

        $r10 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],int,byte[],int,int,boolean)>($r9, $r24, $i0, r22, $i1, $i5, $z2);

        r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r10;

        goto label7;

     label6:
        $r6 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r6.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>("Error: The supplied password does not match either the owner or user password in the document.");

        throw $r6;

     label7:
        $r11 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary getStdCryptFilterDictionary()>();

        if $r11 == null goto label8;

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary: org.apache.pdfbox.cos.COSName getCryptFilterMethod()>();

        if $r12 == null goto label8;

        $r13 = "AESV2";

        $r14 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14);

        virtualinvoke r5.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setAES(boolean)>($z1);

     label8:
        return;
    }

    public void prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r16, $r17, $r18, $r22, $r24, $r25, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38;
        java.math.BigInteger $r15;
        org.apache.pdfbox.pdmodel.PDDocument r1, $r2, $r10, $r19, $r27, $r39, $r40;
        org.apache.pdfbox.cos.COSBase $r29;
        java.security.NoSuchAlgorithmException $r47;
        long $l7;
        org.apache.pdfbox.cos.COSString $r26, $r43;
        java.lang.String $r5, $r7, $r21, $r23, r50, r51;
        org.apache.pdfbox.cos.COSDocument $r11, $r20, $r28, $r41;
        java.io.IOException $r45;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;
        org.apache.pdfbox.exceptions.CryptographyException $r46, $r48;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r9;
        org.apache.pdfbox.cos.COSDictionary $r42;
        org.apache.pdfbox.cos.COSArray $r12, $r13, r52;
        java.security.MessageDigest $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12;
        org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy $r4, $r6, $r8;
        org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary $r3, $r44, r49;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document> = r1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary getEncryptionDictionary()>();

        r49 = $r3;

        if $r3 != null goto label1;

        $r44 = new org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary;

        specialinvoke $r44.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void <init>()>();

        r49 = $r44;

     label1:
        $i0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int computeVersionNumber()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int version> = $i0;

        $i1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int computeRevisionNumber()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision> = $i1;

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setFilter(java.lang.String)>("Standard");

        $i2 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int version>;

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setVersion(int)>($i2);

        $i3 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision>;

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setRevision(int)>($i3);

        $i4 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int keyLength>;

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setLength(int)>($i4);

        $r4 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy>;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy: java.lang.String getOwnerPassword()>();

        r50 = $r5;

        $r6 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy>;

        $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy: java.lang.String getUserPassword()>();

        r51 = $r7;

        if $r5 != null goto label2;

        r50 = "";

     label2:
        if $r7 != null goto label3;

        r51 = "";

     label3:
        $r8 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy policy>;

        $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy: org.apache.pdfbox.pdmodel.encryption.AccessPermission getPermissions()>();

        $i5 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: int getPermissionBytes()>();

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setPermissions(int)>($i5);

        $i6 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int keyLength>;

        $i12 = $i6 / 8;

        $r10 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r11 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSArray getDocumentID()>();

        r52 = $r12;

        if $r12 == null goto label4;

        $i11 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSArray: int size()>();

        if $i11 >= 2 goto label9;

     label4:
        $r13 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r13.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        r52 = $r13;

     label5:
        $r14 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: byte[] toByteArray()>();

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>($r16);

        $r17 = virtualinvoke r50.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>($r17);

        $r18 = virtualinvoke r51.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>($r18);

        $r19 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r20 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        $r22 = virtualinvoke $r21.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>($r22);

        $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r25 = virtualinvoke $r14.<java.security.MessageDigest: byte[] digest(byte[])>($r24);

        $r26 = new org.apache.pdfbox.cos.COSString;

        specialinvoke $r26.<org.apache.pdfbox.cos.COSString: void <init>()>();

        virtualinvoke $r26.<org.apache.pdfbox.cos.COSString: void append(byte[])>($r25);

        virtualinvoke $r13.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r26);

        virtualinvoke $r13.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r26);

        $r27 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r28 = virtualinvoke $r27.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        virtualinvoke $r28.<org.apache.pdfbox.cos.COSDocument: void setDocumentID(org.apache.pdfbox.cos.COSArray)>($r13);

     label6:
        goto label9;

     label7:
        $r47 := @caughtexception;

        $r48 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r48.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r47);

        throw $r48;

     label8:
        $r45 := @caughtexception;

        $r46 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r46.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r45);

        throw $r46;

     label9:
        $r29 = virtualinvoke r52.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(0);

        $r43 = (org.apache.pdfbox.cos.COSString) $r29;

        $r30 = virtualinvoke r50.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r31 = virtualinvoke r51.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $i8 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision>;

        $r32 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeOwnerPassword(byte[],byte[],int,int)>($r30, $r31, $i8, $i12);

        $r33 = virtualinvoke r51.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r34 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $i9 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision>;

        $r35 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeUserPassword(byte[],byte[],int,byte[],int,int,boolean)>($r33, $r32, $i5, $r34, $i9, $i12, 1);

        $r36 = virtualinvoke r51.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r37 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $i10 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int revision>;

        $r38 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],int,byte[],int,int,boolean)>($r36, $r32, $i5, $r37, $i10, $i12, 1);

        r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r38;

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setOwnerKey(byte[])>($r32);

        virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setUserKey(byte[])>($r35);

        $r39 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r39.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary)>(r49);

        $r40 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r41 = virtualinvoke $r40.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r42 = virtualinvoke r49.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: org.apache.pdfbox.cos.COSDictionary getCOSDictionary()>();

        virtualinvoke $r41.<org.apache.pdfbox.cos.COSDocument: void setEncryptionDictionary(org.apache.pdfbox.cos.COSDictionary)>($r42);

        return;

        catch java.security.NoSuchAlgorithmException from label5 to label6 with label7;
        catch java.io.IOException from label5 to label6 with label8;
    }

    public final boolean isOwnerPassword(byte[], byte[], byte[], int, byte[], int, int, boolean) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] r1, r2, $r3, r4, r5;
        long $l2;
        int i0, i1, i3;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;
        boolean z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: byte[];

        r4 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i3 := @parameter3: int;

        r5 := @parameter4: byte[];

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        z0 := @parameter7: boolean;

        $l2 = (long) i1;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] getUserPassword(byte[],byte[],int,long)>(r1, r2, i0, $l2);

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r3, r4, r2, i3, r5, i0, i1, z0);

        return $z1;
    }

    public final byte[] getUserPassword(byte[], byte[], int, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] r2, $r3, r5, $r9, $r10, $r13, r21, r22, $r23;
        org.apache.pdfbox.exceptions.CryptographyException $r26, $r27;
        byte $b9, $b10, $b11, $b12, $b13;
        java.security.NoSuchAlgorithmException $r19;
        java.lang.StringBuilder $r16, $r17, $r25;
        java.io.ByteArrayOutputStream $r24;
        java.security.MessageDigest $r4;
        org.apache.pdfbox.encryption.ARCFour $r6, $r7, $r8, $r11, $r12;
        long l1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i14, i15, i16, $i18;
        java.lang.String $r18;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r1;

        r1 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r2 := @parameter0: byte[];

        r5 := @parameter1: byte[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

     label01:
        $r24 = new java.io.ByteArrayOutputStream;

        specialinvoke $r24.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = specialinvoke r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] truncateOrPad(byte[])>(r2);

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        r21 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        if i0 == 3 goto label02;

        if i0 != 4 goto label04;

     label02:
        i14 = 0;

     label03:
        if i14 >= 50 goto label04;

        virtualinvoke $r4.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>(r21);

        r21 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        i14 = i14 + 1;

        goto label03;

     label04:
        if i0 != 2 goto label05;

        $b13 = l1 cmp 5L;

        if $b13 == 0 goto label05;

        $r26 = new org.apache.pdfbox.exceptions.CryptographyException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected length=5 actual=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>($r18);

        throw $r26;

     label05:
        $i2 = (int) l1;

        $r13 = newarray (byte)[$i2];

        $i3 = (int) l1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, 0, $r13, 0, $i3);

        if i0 != 2 goto label06;

        $r11 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r11.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>($r13);

        $r12 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r12.<org.apache.pdfbox.encryption.ARCFour: void write(byte[],java.io.OutputStream)>(r5, $r24);

        goto label11;

     label06:
        if i0 == 3 goto label07;

        if i0 != 4 goto label11;

     label07:
        $i4 = lengthof $r13;

        $r9 = newarray (byte)[$i4];

        $i5 = lengthof r5;

        $r10 = newarray (byte)[$i5];

        r22 = $r10;

        $i6 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r10, 0, $i6);

        $r6 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r6.<org.apache.pdfbox.encryption.ARCFour: void write(byte[],java.io.OutputStream)>(r5, $r24);

        i15 = 19;

     label08:
        if i15 < 0 goto label11;

        $i7 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r9, 0, $i7);

        i16 = 0;

     label09:
        $i8 = lengthof $r9;

        if i16 >= $i8 goto label10;

        $b10 = $r9[i16];

        $b9 = (byte) i15;

        $b11 = $b10 ^ $b9;

        $b12 = (byte) $b11;

        $r9[i16] = $b12;

        i16 = i16 + 1;

        goto label09;

     label10:
        $r7 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r7.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>($r9);

        virtualinvoke $r24.<java.io.ByteArrayOutputStream: void reset()>();

        $r8 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r8.<org.apache.pdfbox.encryption.ARCFour: void write(byte[],java.io.OutputStream)>(r22, $r24);

        r22 = virtualinvoke $r24.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i18 = (int) -1;

        i15 = i15 + $i18;

        goto label08;

     label11:
        $r23 = virtualinvoke $r24.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label12:
        return $r23;

     label13:
        $r19 := @caughtexception;

        $r27 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r27.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r19);

        throw $r27;

        catch java.security.NoSuchAlgorithmException from label01 to label12 with label13;
    }

    public final byte[] computeEncryptedKey(byte[], byte[], int, byte[], int, int, boolean) throws org.apache.pdfbox.exceptions.CryptographyException
    {
        byte[] r0, r2, $r3, r5, r6, $r12, r15;
        java.security.MessageDigest $r4;
        org.apache.pdfbox.exceptions.CryptographyException $r7, $r14;
        byte b3, b5, b7, b9;
        int i0, i1, $i2, $i4, $i6, $i8, i10, i11;
        java.lang.String $r11;
        boolean z0;
        java.security.NoSuchAlgorithmException $r13;
        java.lang.StringBuilder $r8, $r9, $r10;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r1;

        r1 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r2 := @parameter0: byte[];

        r5 := @parameter1: byte[];

        i1 := @parameter2: int;

        r6 := @parameter3: byte[];

        i10 := @parameter4: int;

        i0 := @parameter5: int;

        z0 := @parameter6: boolean;

        r0 = newarray (byte)[i0];

     label1:
        $r3 = specialinvoke r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] truncateOrPad(byte[])>(r2);

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>(r5);

        $i2 = i1 >>> 0;

        b3 = (byte) $i2;

        $i4 = i1 >>> 8;

        b5 = (byte) $i4;

        $i6 = i1 >>> 16;

        b7 = (byte) $i6;

        $i8 = i1 >>> 24;

        b9 = (byte) $i8;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte)>(b3);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte)>(b5);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte)>(b7);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte)>(b9);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>(r6);

        if i10 != 4 goto label2;

        if z0 != 0 goto label2;

        $r12 = newarray (byte)[4];

        $r12[0] = -1;

        $r12[1] = -1;

        $r12[2] = -1;

        $r12[3] = -1;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r12);

     label2:
        r15 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        if i10 == 3 goto label3;

        if i10 != 4 goto label5;

     label3:
        i11 = 0;

     label4:
        if i11 >= 50 goto label5;

        virtualinvoke $r4.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[],int,int)>(r15, 0, i0);

        r15 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        i11 = i11 + 1;

        goto label4;

     label5:
        if i10 != 2 goto label6;

        if i0 == 5 goto label6;

        $r7 = new org.apache.pdfbox.exceptions.CryptographyException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: length should be 5 when revision is two actual=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label6:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, 0, r0, 0, i0);

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r14.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r13);

        throw $r14;

     label9:
        return r0;

        catch java.security.NoSuchAlgorithmException from label1 to label7 with label8;
    }

    public final byte[] computeUserPassword(byte[], byte[], int, byte[], int, int, boolean) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] r2, r3, r4, $r5, $r7, $r8, $r9, $r10, $r13, $r15, $r17, r21, $r22;
        org.apache.pdfbox.exceptions.CryptographyException $r25;
        byte $b6, $b8;
        java.io.ByteArrayInputStream $r24;
        boolean z0;
        java.security.NoSuchAlgorithmException $r19;
        java.io.ByteArrayOutputStream $r23;
        java.security.MessageDigest $r6;
        org.apache.pdfbox.encryption.ARCFour $r11, $r14, $r16, $r18;
        int i0, i1, i2, $i3, $i4, $i5, $i7, i9, i10, $i11;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r1;

        r1 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r2 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        i0 := @parameter2: int;

        r4 := @parameter3: byte[];

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        $r23 = new java.io.ByteArrayOutputStream;

        specialinvoke $r23.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],int,byte[],int,int,boolean)>(r2, r3, i0, r4, i1, i2, z0);

        if i1 != 2 goto label1;

        $r16 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r16.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>($r5);

        $r18 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        $r17 = <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING>;

        virtualinvoke $r18.<org.apache.pdfbox.encryption.ARCFour: void write(byte[],java.io.OutputStream)>($r17, $r23);

        goto label9;

     label1:
        if i1 == 3 goto label2;

        if i1 != 4 goto label9;

     label2:
        $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r7 = <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING>;

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>($r7);

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>(r4);

        $r8 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>();

        virtualinvoke $r23.<java.io.ByteArrayOutputStream: void write(byte[])>($r8);

        $i3 = lengthof $r5;

        $r15 = newarray (byte)[$i3];

        i9 = 0;

     label3:
        if i9 >= 20 goto label6;

        $i4 = lengthof $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r15, 0, $i4);

        i10 = 0;

     label4:
        $i5 = lengthof $r15;

        if i10 >= $i5 goto label5;

        $b6 = $r15[i10];

        $i11 = (int) $b6;

        $i7 = $i11 ^ i9;

        $b8 = (byte) $i7;

        $r15[i10] = $b8;

        i10 = i10 + 1;

        goto label4;

     label5:
        $r11 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r11.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>($r15);

        $r24 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke $r23.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r24.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        virtualinvoke $r23.<java.io.ByteArrayOutputStream: void reset()>();

        $r14 = r1.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r14.<org.apache.pdfbox.encryption.ARCFour: void write(java.io.InputStream,java.io.OutputStream)>($r24, $r23);

        i9 = i9 + 1;

        goto label3;

     label6:
        r21 = newarray (byte)[32];

        $r9 = virtualinvoke $r23.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r21, 0, 16);

        $r10 = <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r21, 16, 16);

        virtualinvoke $r23.<java.io.ByteArrayOutputStream: void reset()>();

        virtualinvoke $r23.<java.io.ByteArrayOutputStream: void write(byte[])>(r21);

     label7:
        goto label9;

     label8:
        $r19 := @caughtexception;

        $r25 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r25.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r19);

        throw $r25;

     label9:
        $r22 = virtualinvoke $r23.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r22;

        catch java.security.NoSuchAlgorithmException from label2 to label7 with label8;
    }

    public final byte[] computeOwnerPassword(byte[], byte[], int, int) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] r1, $r2, r4, $r5, $r10, $r13, $r15, $r16, r25;
        org.apache.pdfbox.exceptions.CryptographyException $r17, $r23;
        java.io.ByteArrayInputStream $r8, $r12;
        byte $b5, $b6, $b7, $b8;
        java.security.NoSuchAlgorithmException $r22;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.io.ByteArrayOutputStream $r7;
        java.security.MessageDigest $r3;
        org.apache.pdfbox.encryption.ARCFour $r6, $r9, $r11, $r14;
        int i0, i1, $i2, $i3, $i4, i9, i10, i11;
        java.lang.String $r21, $r24;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: byte[];

        r4 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label01:
        $r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] truncateOrPad(byte[])>(r1);

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r2);

        r25 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>();

        if i0 == 3 goto label02;

        if i0 != 4 goto label04;

     label02:
        i9 = 0;

     label03:
        if i9 >= 50 goto label04;

        virtualinvoke $r3.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[],int,int)>(r25, 0, i1);

        r25 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>();

        i9 = i9 + 1;

        goto label03;

     label04:
        if i0 != 2 goto label05;

        if i1 == 5 goto label05;

        $r17 = new org.apache.pdfbox.exceptions.CryptographyException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected length=5 actual=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label05:
        $r16 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r25, 0, $r16, 0, i1);

        $r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] truncateOrPad(byte[])>(r4);

        $r6 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r6.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>($r16);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        virtualinvoke $r9.<org.apache.pdfbox.encryption.ARCFour: void write(java.io.InputStream,java.io.OutputStream)>($r8, $r7);

        if i0 == 3 goto label06;

        if i0 != 4 goto label10;

     label06:
        $i2 = lengthof $r16;

        $r15 = newarray (byte)[$i2];

        i10 = 1;

     label07:
        if i10 >= 20 goto label10;

        $i3 = lengthof $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, $r15, 0, $i3);

        i11 = 0;

     label08:
        $i4 = lengthof $r15;

        if i11 >= $i4 goto label09;

        $b6 = $r15[i11];

        $b5 = (byte) i10;

        $b7 = $b6 ^ $b5;

        $b8 = (byte) $b7;

        $r15[i11] = $b8;

        i11 = i11 + 1;

        goto label08;

     label09:
        $r11 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r11.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>($r15);

        $r12 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void reset()>();

        $r14 = r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r14.<org.apache.pdfbox.encryption.ARCFour: void write(java.io.InputStream,java.io.OutputStream)>($r12, $r7);

        i10 = i10 + 1;

        goto label07;

     label10:
        $r10 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label11:
        return $r10;

     label12:
        $r22 := @caughtexception;

        $r23 = new org.apache.pdfbox.exceptions.CryptographyException;

        $r24 = virtualinvoke $r22.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r23.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>($r24);

        throw $r23;

        catch java.security.NoSuchAlgorithmException from label01 to label11 with label12;
    }

    private final byte[] truncateOrPad(byte[])
    {
        byte[] $r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r5;

        r5 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r2 := @parameter0: byte[];

        $r0 = <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING>;

        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i2 = lengthof r2;

        $i1 = lengthof r1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i3);

        $r4 = <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING>;

        $r3 = <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING>;

        $i4 = lengthof $r3;

        $i5 = $i4 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, $i3, $i5);

        return r1;
    }

    public final boolean isUserPassword(byte[], byte[], byte[], int, byte[], int, int, boolean) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] r1, r2, r3, $r4, r5;
        int i0, i1, i2;
        java.lang.String $r10;
        boolean z0, z1;
        java.io.IOException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: byte[];

        r5 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        r3 := @parameter4: byte[];

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        z0 := @parameter7: boolean;

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeUserPassword(byte[],byte[],int,byte[],int,int,boolean)>(r1, r2, i0, r3, i1, i2, z0);

        if i1 != 2 goto label1;

        z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r5, $r4);

        goto label4;

     label1:
        if i1 == 3 goto label2;

        if i1 != 4 goto label3;

     label2:
        z1 = staticinvoke <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean arraysEqual(byte[],byte[],int)>(r5, $r4, 16);

        goto label4;

     label3:
        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown Encryption Revision ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return z1;
    }

    public final boolean isUserPassword(java.lang.String, byte[], byte[], int, byte[], int, int, boolean) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r2, r3, r4, r5;
        int i0, i1, i2;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;
        java.lang.String r1;
        boolean z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        r4 := @parameter2: byte[];

        i0 := @parameter3: int;

        r5 := @parameter4: byte[];

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        z0 := @parameter7: boolean;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r2, r3, r4, i0, r5, i1, i2, z0);

        return $z1;
    }

    public final boolean isOwnerPassword(java.lang.String, byte[], byte[], int, byte[], int, int, boolean) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r2, r3, r4, r5;
        int i0, i1, i2;
        org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler r0;
        java.lang.String r1;
        boolean z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        r4 := @parameter2: byte[];

        i0 := @parameter3: int;

        r5 := @parameter4: byte[];

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        z0 := @parameter7: boolean;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isOwnerPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r2, r3, r4, i0, r5, i1, i2, z0);

        return $z1;
    }

    private static final boolean arraysEqual(byte[], byte[], int)
    {
        byte[] r0, r1;
        byte $b3, $b4;
        int i0, $i1, $i2, i5, $i6, $i7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i1 = lengthof r0;

        if $i1 < i0 goto label1;

        $i2 = lengthof r1;

        if $i2 >= i0 goto label2;

     label1:
        return 0;

     label2:
        i5 = 0;

     label3:
        if i5 >= i0 goto label5;

        $b4 = r0[i5];

        $b3 = r1[i5];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label4;

        return 0;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        return 1;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int DEFAULT_REVISION> = 3;

        <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: int DEFAULT_VERSION> = 1;

        <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: java.lang.String FILTER> = "Standard";

        <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: java.lang.Class PROTECTION_POLICY_CLASS> = class "Lorg/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy;";

        $r0 = newarray (byte)[32];

        $r0[0] = 40;

        $r0[1] = -65;

        $r0[2] = 78;

        $r0[3] = 94;

        $r0[4] = 78;

        $r0[5] = 117;

        $r0[6] = -118;

        $r0[7] = 65;

        $r0[8] = 100;

        $r0[9] = 0;

        $r0[10] = 78;

        $r0[11] = 86;

        $r0[12] = -1;

        $r0[13] = -6;

        $r0[14] = 1;

        $r0[15] = 8;

        $r0[16] = 46;

        $r0[17] = 46;

        $r0[18] = 0;

        $r0[19] = -74;

        $r0[20] = -48;

        $r0[21] = 104;

        $r0[22] = 62;

        $r0[23] = -128;

        $r0[24] = 47;

        $r0[25] = 12;

        $r0[26] = -87;

        $r0[27] = -2;

        $r0[28] = 100;

        $r0[29] = 83;

        $r0[30] = 105;

        $r0[31] = 122;

        <org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] ENCRYPT_PADDING> = $r0;

        return;
    }
}
