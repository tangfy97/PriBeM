public final class de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter extends java.lang.Object implements de.l3s.boilerpipe.BoilerpipeFilter
{
    public static final de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter INSTANCE;

    public void <init>()
    {
        de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter r0;

        r0 := @this: de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter getInstance()
    {
        de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter $r0;

        $r0 = <de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter: de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter INSTANCE>;

        return $r0;
    }

    public boolean process(de.l3s.boilerpipe.document.TextDocument) throws de.l3s.boilerpipe.BoilerpipeProcessingException
    {
        de.l3s.boilerpipe.document.TextDocument r0;
        java.util.Iterator $r2;
        de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter r5;
        java.util.List $r1;
        de.l3s.boilerpipe.document.TextBlock r4;
        java.lang.Object $r3;
        boolean $z0, $z1, z2;

        r5 := @this: de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter;

        r0 := @parameter0: de.l3s.boilerpipe.document.TextDocument;

        $r1 = virtualinvoke r0.<de.l3s.boilerpipe.document.TextDocument: java.util.List getTextBlocks()>();

        z2 = 0;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (de.l3s.boilerpipe.document.TextBlock) $r3;

        $z1 = virtualinvoke r4.<de.l3s.boilerpipe.document.TextBlock: boolean isContent()>();

        if $z1 != 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        z2 = 1;

     label2:
        goto label1;

     label3:
        return z2;
    }

    static void <clinit>()
    {
        de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter $r0;

        $r0 = new de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter;

        specialinvoke $r0.<de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter: void <init>()>();

        <de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter: de.l3s.boilerpipe.filters.simple.BoilerplateBlockFilter INSTANCE> = $r0;

        return;
    }
}
