public final class org.apache.commons.compress.archivers.zip.ZipEightByteInteger extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int BYTE_1;
    private static final int BYTE_1_MASK;
    private static final int BYTE_1_SHIFT;
    private static final int BYTE_2;
    private static final int BYTE_2_MASK;
    private static final int BYTE_2_SHIFT;
    private static final int BYTE_3;
    private static final long BYTE_3_MASK;
    private static final int BYTE_3_SHIFT;
    private static final int BYTE_4;
    private static final long BYTE_4_MASK;
    private static final int BYTE_4_SHIFT;
    private static final int BYTE_5;
    private static final long BYTE_5_MASK;
    private static final int BYTE_5_SHIFT;
    private static final int BYTE_6;
    private static final long BYTE_6_MASK;
    private static final int BYTE_6_SHIFT;
    private static final int BYTE_7;
    private static final long BYTE_7_MASK;
    private static final int BYTE_7_SHIFT;
    private static final int LEFTMOST_BIT_SHIFT;
    private static final byte LEFTMOST_BIT;
    private final java.math.BigInteger value;
    public static final org.apache.commons.compress.archivers.zip.ZipEightByteInteger ZERO;

    public void <init>(long)
    {
        long l0;
        java.math.BigInteger $r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(java.math.BigInteger)>($r1);

        return;
    }

    public void <init>(java.math.BigInteger)
    {
        java.math.BigInteger r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r1 := @parameter0: java.math.BigInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value> = r1;

        return;
    }

    public void <init>(byte[])
    {
        byte[] r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(byte[],int)>(r1, 0);

        return;
    }

    public void <init>(byte[], int)
    {
        byte[] r1;
        int i0;
        java.math.BigInteger $r2;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger getValue(byte[],int)>(r1, i0);

        r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value> = $r2;

        return;
    }

    public byte[] getBytes()
    {
        byte[] $r2;
        java.math.BigInteger $r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(java.math.BigInteger)>($r1);

        return $r2;
    }

    public long getLongValue()
    {
        java.math.BigInteger $r1;
        long $l0;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value>;

        $l0 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l0;
    }

    public java.math.BigInteger getValue()
    {
        java.math.BigInteger $r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value>;

        return $r1;
    }

    public static byte[] getBytes(long)
    {
        byte[] $r1;
        long l0;
        java.math.BigInteger $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        $r1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte[] getBytes(java.math.BigInteger)>($r0);

        return $r1;
    }

    public static byte[] getBytes(java.math.BigInteger)
    {
        byte[] r0;
        byte $b3, $b7, $b11, $b15, $b19, $b23, $b27, $b31, $b32, $b33, $b34;
        java.math.BigInteger r1;
        boolean $z0;
        long $l0, $l1, $l4, $l5, $l8, $l9, $l12, $l13, $l16, $l17, $l20, $l21, $l24, $l25, $l28, $l29;
        int $i2, $i6, $i10, $i14, $i18, $i22, $i26, $i30;

        r1 := @parameter0: java.math.BigInteger;

        r0 = newarray (byte)[8];

        $l0 = virtualinvoke r1.<java.math.BigInteger: long longValue()>();

        $l1 = $l0 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[0] = $b3;

        $l4 = $l0 & 65280L;

        $l5 = $l4 >> 8;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        r0[1] = $b7;

        $l8 = $l0 & 16711680L;

        $l9 = $l8 >> 16;

        $i10 = (int) $l9;

        $b11 = (byte) $i10;

        r0[2] = $b11;

        $l12 = $l0 & 4278190080L;

        $l13 = $l12 >> 24;

        $i14 = (int) $l13;

        $b15 = (byte) $i14;

        r0[3] = $b15;

        $l16 = $l0 & 1095216660480L;

        $l17 = $l16 >> 32;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        r0[4] = $b19;

        $l20 = $l0 & 280375465082880L;

        $l21 = $l20 >> 40;

        $i22 = (int) $l21;

        $b23 = (byte) $i22;

        r0[5] = $b23;

        $l24 = $l0 & 71776119061217280L;

        $l25 = $l24 >> 48;

        $i26 = (int) $l25;

        $b27 = (byte) $i26;

        r0[6] = $b27;

        $l28 = $l0 & 9151314442816847872L;

        $l29 = $l28 >> 56;

        $i30 = (int) $l29;

        $b31 = (byte) $i30;

        r0[7] = $b31;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(63);

        if $z0 == 0 goto label1;

        $b32 = r0[7];

        $b33 = $b32 | -128;

        $b34 = (byte) $b33;

        r0[7] = $b34;

     label1:
        return r0;
    }

    public static long getLongValue(byte[], int)
    {
        byte[] r0;
        int i0;
        java.math.BigInteger $r1;
        long $l1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger getValue(byte[],int)>(r0, i0);

        $l1 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l1;
    }

    public static java.math.BigInteger getValue(byte[], int)
    {
        byte[] r0;
        byte $b2, $b6, $b11, $b16, $b21, $b26, $b31, $b35, $b39, $b40;
        java.math.BigInteger $r1, $r2;
        long $l3, $l4, $l7, $l8, $l9, $l12, $l13, $l14, $l17, $l18, $l19, $l22, $l23, $l24, $l27, $l28, $l29, $l32, $l33, $l34, $l36, $l37, l41, l42, l43, l44, l45, l46, l47, l48;
        int i0, $i1, $i5, $i10, $i15, $i20, $i25, $i30, $i38, $i49, $i51;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 7;

        $b2 = r0[$i1];

        $l3 = (long) $b2;

        $l4 = $l3 << 56;

        l41 = $l4 & 9151314442816847872L;

        $i5 = i0 + 6;

        $b6 = r0[$i5];

        $l7 = (long) $b6;

        $l8 = $l7 << 48;

        $l9 = $l8 & 71776119061217280L;

        l42 = l41 + $l9;

        $i10 = i0 + 5;

        $b11 = r0[$i10];

        $l12 = (long) $b11;

        $l13 = $l12 << 40;

        $l14 = $l13 & 280375465082880L;

        l43 = l42 + $l14;

        $i15 = i0 + 4;

        $b16 = r0[$i15];

        $l17 = (long) $b16;

        $l18 = $l17 << 32;

        $l19 = $l18 & 1095216660480L;

        l44 = l43 + $l19;

        $i20 = i0 + 3;

        $b21 = r0[$i20];

        $l22 = (long) $b21;

        $l23 = $l22 << 24;

        $l24 = $l23 & 4278190080L;

        l45 = l44 + $l24;

        $i25 = i0 + 2;

        $b26 = r0[$i25];

        $l27 = (long) $b26;

        $l28 = $l27 << 16;

        $l29 = $l28 & 16711680L;

        l46 = l45 + $l29;

        $i30 = i0 + 1;

        $b31 = r0[$i30];

        $l32 = (long) $b31;

        $l33 = $l32 << 8;

        $l34 = $l33 & 65280L;

        l47 = l46 + $l34;

        $b35 = r0[i0];

        $l36 = (long) $b35;

        $l37 = $l36 & 255L;

        l48 = l47 + $l37;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l48);

        $i38 = i0 + 7;

        $b39 = r0[$i38];

        $b40 = $b39 & -128;

        $i49 = (int) $b40;

        $i51 = (int) -128;

        if $i49 != $i51 goto label1;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger setBit(int)>(63);

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    public static long getLongValue(byte[])
    {
        byte[] r0;
        long $l0;

        r0 := @parameter0: byte[];

        $l0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long getLongValue(byte[],int)>(r0, 0);

        return $l0;
    }

    public static java.math.BigInteger getValue(byte[])
    {
        byte[] r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger getValue(byte[],int)>(r0, 0);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        java.math.BigInteger $r3, $r4;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r1, $r2;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r1.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value>;

        $r2 = (org.apache.commons.compress.archivers.zip.ZipEightByteInteger) r0;

        $r4 = virtualinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger getValue()>();

        $z1 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        java.math.BigInteger $r1;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4;
        java.math.BigInteger $r3;
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger r2;
        java.lang.String $r5;

        r2 := @this: org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZipEightByteInteger value: ");

        $r3 = r2.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: java.math.BigInteger value>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger $r0;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: byte LEFTMOST_BIT> = -128;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int LEFTMOST_BIT_SHIFT> = 63;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_7_SHIFT> = 56;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long BYTE_7_MASK> = 9151314442816847872L;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_7> = 7;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_6_SHIFT> = 48;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long BYTE_6_MASK> = 71776119061217280L;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_6> = 6;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_5_SHIFT> = 40;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long BYTE_5_MASK> = 280375465082880L;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_5> = 5;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_4_SHIFT> = 32;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long BYTE_4_MASK> = 1095216660480L;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_4> = 4;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_3_SHIFT> = 24;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long BYTE_3_MASK> = 4278190080L;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_3> = 3;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_2_SHIFT> = 16;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_2_MASK> = 16711680;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_2> = 2;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_1_SHIFT> = 8;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_1_MASK> = 65280;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: int BYTE_1> = 1;

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: long serialVersionUID> = 1L;

        $r0 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipEightByteInteger: void <init>(long)>(0L);

        <org.apache.commons.compress.archivers.zip.ZipEightByteInteger: org.apache.commons.compress.archivers.zip.ZipEightByteInteger ZERO> = $r0;

        return;
    }
}
