public class org.json.XML extends java.lang.Object
{
    public static final java.lang.Character AMP;
    public static final java.lang.Character APOS;
    public static final java.lang.Character BANG;
    public static final java.lang.Character EQ;
    public static final java.lang.Character GT;
    public static final java.lang.Character LT;
    public static final java.lang.Character QUEST;
    public static final java.lang.Character QUOT;
    public static final java.lang.Character SLASH;

    public void <init>()
    {
        org.json.XML r0;

        r0 := @this: org.json.XML;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String escape(java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        if i2 >= $i0 goto label8;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 34: goto label5;
            case 38: goto label2;
            case 60: goto label3;
            case 62: goto label4;
            default: goto label6;
        };

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label7;

     label3:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label7;

     label4:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label7;

     label5:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label7;

     label6:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static boolean parse(org.json.XMLTokener, org.json.JSONObject, java.lang.String) throws org.json.JSONException
    {
        org.json.JSONException $r9, $r18, $r21, $r25, $r26, $r31, $r38, $r43, $r46, $r48;
        java.lang.Character $r2, $r3, $r4, $r7, $r8, $r10, $r20, $r23, $r30, $r44, $r45;
        java.lang.StringBuilder $r15, $r16, $r33, $r34, $r35, $r36, $r40, $r41, $r55, $r56, $r58;
        java.lang.String r5, $r17, r28, $r37, $r42, $r49, r52, r54;
        org.json.JSONObject r11, $r57;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2, $i5, i7, $i8, $i9, $i10, $i11, $i13;
        char $c3, $c4, $c6;
        java.lang.Object $r1, $r12, $r13, $r19, $r22, $r24, $r27, $r29, $r47, $r50, r51, $r53;
        org.json.XMLTokener r0;

        r0 := @parameter0: org.json.XMLTokener;

        r11 := @parameter1: org.json.JSONObject;

        r28 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r2 = <org.json.XML: java.lang.Character BANG>;

        if $r1 != $r2 goto label10;

        $c3 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $i8 = (int) $c3;

        if $i8 != 45 goto label02;

        $c6 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $i9 = (int) $c6;

        if $i9 != 45 goto label01;

        virtualinvoke r0.<org.json.XMLTokener: boolean skipPast(java.lang.String)>("-->");

        return 0;

     label01:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        goto label05;

     label02:
        $i10 = (int) $c3;

        if $i10 != 91 goto label05;

        $r47 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $z6 = virtualinvoke $r47.<java.lang.Object: boolean equals(java.lang.Object)>("CDATA");

        if $z6 == 0 goto label04;

        $c4 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $i11 = (int) $c4;

        if $i11 != 91 goto label04;

        $r49 = virtualinvoke r0.<org.json.XMLTokener: java.lang.String nextCDATA()>();

        $i5 = virtualinvoke $r49.<java.lang.String: int length()>();

        if $i5 <= 0 goto label03;

        virtualinvoke r11.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>("content", $r49);

     label03:
        return 0;

     label04:
        $r48 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Expected \'CDATA[\'");

        throw $r48;

     label05:
        i7 = 1;

     label06:
        $r50 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextMeta()>();

        if $r50 != null goto label07;

        $r46 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Missing \'>\' after \'<!\'.");

        throw $r46;

     label07:
        $r44 = <org.json.XML: java.lang.Character LT>;

        if $r50 != $r44 goto label08;

        i7 = i7 + 1;

        goto label09;

     label08:
        $r45 = <org.json.XML: java.lang.Character GT>;

        if $r50 != $r45 goto label09;

        $i13 = (int) -1;

        i7 = i7 + $i13;

     label09:
        if i7 > 0 goto label06;

        return 0;

     label10:
        $r3 = <org.json.XML: java.lang.Character QUEST>;

        if $r1 != $r3 goto label11;

        virtualinvoke r0.<org.json.XMLTokener: boolean skipPast(java.lang.String)>("?>");

        return 0;

     label11:
        $r4 = <org.json.XML: java.lang.Character SLASH>;

        if $r1 != $r4 goto label15;

        $r27 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        if r28 != null goto label12;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched close tag");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r42);

        throw $r43;

     label12:
        $z5 = virtualinvoke $r27.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z5 != 0 goto label13;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r37);

        throw $r38;

     label13:
        $r29 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r30 = <org.json.XML: java.lang.Character GT>;

        if $r29 == $r30 goto label14;

        $r31 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped close tag");

        throw $r31;

     label14:
        return 1;

     label15:
        $z0 = $r1 instanceof java.lang.Character;

        if $z0 == 0 goto label16;

        $r26 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped tag");

        throw $r26;

     label16:
        r5 = (java.lang.String) $r1;

        r51 = null;

        $r57 = new org.json.JSONObject;

        specialinvoke $r57.<org.json.JSONObject: void <init>()>();

     label17:
        if r51 != null goto label18;

        r51 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

     label18:
        $z1 = r51 instanceof java.lang.String;

        if $z1 == 0 goto label21;

        r52 = (java.lang.String) r51;

        $r22 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        r51 = $r22;

        $r23 = <org.json.XML: java.lang.Character EQ>;

        if $r22 != $r23 goto label20;

        $r24 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $z4 = $r24 instanceof java.lang.String;

        if $z4 != 0 goto label19;

        $r25 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Missing value");

        throw $r25;

     label19:
        virtualinvoke $r57.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>(r52, $r24);

        r51 = null;

        goto label17;

     label20:
        virtualinvoke $r57.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>(r52, "");

        goto label17;

     label21:
        $r7 = <org.json.XML: java.lang.Character SLASH>;

        if r51 != $r7 goto label23;

        $r19 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r20 = <org.json.XML: java.lang.Character GT>;

        if $r19 == $r20 goto label22;

        $r21 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped tag");

        throw $r21;

     label22:
        virtualinvoke r11.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>(r5, $r57);

        return 0;

     label23:
        $r8 = <org.json.XML: java.lang.Character GT>;

        if r51 != $r8 goto label31;

     label24:
        $r53 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextContent()>();

        if $r53 != null goto label26;

        if r5 == null goto label25;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unclosed tag ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r17);

        throw $r18;

     label25:
        return 0;

     label26:
        $z2 = $r53 instanceof java.lang.String;

        if $z2 == 0 goto label27;

        r54 = (java.lang.String) $r53;

        $i2 = virtualinvoke r54.<java.lang.String: int length()>();

        if $i2 <= 0 goto label24;

        virtualinvoke $r57.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>("content", r54);

        goto label24;

     label27:
        $r10 = <org.json.XML: java.lang.Character LT>;

        if $r53 != $r10 goto label24;

        $z3 = staticinvoke <org.json.XML: boolean parse(org.json.XMLTokener,org.json.JSONObject,java.lang.String)>(r0, $r57, r5);

        if $z3 == 0 goto label24;

        $i0 = virtualinvoke $r57.<org.json.JSONObject: int length()>();

        if $i0 != 0 goto label28;

        virtualinvoke r11.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>(r5, "");

        goto label30;

     label28:
        $i1 = virtualinvoke $r57.<org.json.JSONObject: int length()>();

        if $i1 != 1 goto label29;

        $r12 = virtualinvoke $r57.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>("content");

        if $r12 == null goto label29;

        $r13 = virtualinvoke $r57.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>("content");

        virtualinvoke r11.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>(r5, $r13);

        goto label30;

     label29:
        virtualinvoke r11.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>(r5, $r57);

     label30:
        return 0;

     label31:
        $r9 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped tag");

        throw $r9;
    }

    public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject $r0;
        java.lang.String r2;
        org.json.XMLTokener $r1;
        boolean $z0, $z1;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.json.JSONObject;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        $r1 = new org.json.XMLTokener;

        specialinvoke $r1.<org.json.XMLTokener: void <init>(java.lang.String)>(r2);

     label1:
        $z0 = virtualinvoke $r1.<org.json.XMLTokener: boolean more()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke $r1.<org.json.XMLTokener: boolean skipPast(java.lang.String)>("<");

        if $z1 == 0 goto label2;

        staticinvoke <org.json.XML: boolean parse(org.json.XMLTokener,org.json.JSONObject,java.lang.String)>($r1, $r0, null);

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.String toString(java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String toString(java.lang.Object, java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r2, r3, $r20, $r22, $r24, $r26, $r28, $r30, $r31, $r32, $r34, $r35, r37, $r41, $r42, $r43;
        java.util.Iterator $r23;
        java.lang.Object r1, $r21, $r25, $r27, $r29, $r33;
        org.json.JSONArray r38, r39, r40;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $z0 = r1 instanceof org.json.JSONObject;

        if $z0 == 0 goto label13;

        if r3 == null goto label01;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label01:
        $r36 = (org.json.JSONObject) r1;

        $r23 = virtualinvoke $r36.<org.json.JSONObject: java.util.Iterator keys()>();

     label02:
        $z7 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label11;

        $r25 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        $r27 = virtualinvoke $r36.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r26);

        $z2 = $r27 instanceof java.lang.String;

        if $z2 == 0 goto label03;

        r37 = (java.lang.String) $r27;

        goto label03;

     label03:
        $z3 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("content");

        if $z3 == 0 goto label07;

        $z6 = $r27 instanceof org.json.JSONArray;

        if $z6 == 0 goto label06;

        r38 = (org.json.JSONArray) $r27;

        $i3 = virtualinvoke r38.<org.json.JSONArray: int length()>();

        i4 = 0;

     label04:
        if i4 >= $i3 goto label02;

        if i4 <= 0 goto label05;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label05:
        $r33 = virtualinvoke r38.<org.json.JSONArray: java.lang.Object get(int)>(i4);

        $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>();

        $r35 = staticinvoke <org.json.XML: java.lang.String escape(java.lang.String)>($r34);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        i4 = i4 + 1;

        goto label04;

     label06:
        $r31 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>();

        $r32 = staticinvoke <org.json.XML: java.lang.String escape(java.lang.String)>($r31);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        goto label02;

     label07:
        $z4 = $r27 instanceof org.json.JSONArray;

        if $z4 == 0 goto label09;

        r39 = (org.json.JSONArray) $r27;

        $i2 = virtualinvoke r39.<org.json.JSONArray: int length()>();

        i5 = 0;

     label08:
        if i5 >= $i2 goto label02;

        $r29 = virtualinvoke r39.<org.json.JSONArray: java.lang.Object get(int)>(i5);

        $r30 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r29, $r26);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        i5 = i5 + 1;

        goto label08;

     label09:
        $z5 = virtualinvoke $r27.<java.lang.Object: boolean equals(java.lang.Object)>("");

        if $z5 == 0 goto label10;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/>");

        goto label02;

     label10:
        $r28 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r27, $r26);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        goto label02;

     label11:
        if r3 == null goto label12;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label12:
        $r24 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r24;

     label13:
        $z1 = r1 instanceof org.json.JSONArray;

        if $z1 == 0 goto label18;

        r40 = (org.json.JSONArray) r1;

        $i1 = virtualinvoke r40.<org.json.JSONArray: int length()>();

        i6 = 0;

     label14:
        if i6 >= $i1 goto label17;

        $r21 = virtualinvoke r40.<org.json.JSONArray: java.lang.Object opt(int)>(i6);

        if r3 != null goto label15;

        $r41 = "array";

        goto label16;

     label15:
        $r41 = r3;

     label16:
        $r22 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r21, $r41);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        i6 = i6 + 1;

        goto label14;

     label17:
        $r20 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r20;

     label18:
        if r1 != null goto label19;

        $r42 = "null";

        goto label20;

     label19:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r42 = staticinvoke <org.json.XML: java.lang.String escape(java.lang.String)>($r2);

     label20:
        if r3 != null goto label21;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r43 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label23;

     label21:
        $i0 = virtualinvoke $r42.<java.lang.String: int length()>();

        if $i0 != 0 goto label22;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>");

        $r43 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label23;

     label22:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r43 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label23:
        return $r43;
    }

    static void <clinit>()
    {
        java.lang.Character $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(38);

        <org.json.XML: java.lang.Character AMP> = $r0;

        $r1 = new java.lang.Character;

        specialinvoke $r1.<java.lang.Character: void <init>(char)>(39);

        <org.json.XML: java.lang.Character APOS> = $r1;

        $r2 = new java.lang.Character;

        specialinvoke $r2.<java.lang.Character: void <init>(char)>(33);

        <org.json.XML: java.lang.Character BANG> = $r2;

        $r3 = new java.lang.Character;

        specialinvoke $r3.<java.lang.Character: void <init>(char)>(61);

        <org.json.XML: java.lang.Character EQ> = $r3;

        $r4 = new java.lang.Character;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>(62);

        <org.json.XML: java.lang.Character GT> = $r4;

        $r5 = new java.lang.Character;

        specialinvoke $r5.<java.lang.Character: void <init>(char)>(60);

        <org.json.XML: java.lang.Character LT> = $r5;

        $r6 = new java.lang.Character;

        specialinvoke $r6.<java.lang.Character: void <init>(char)>(63);

        <org.json.XML: java.lang.Character QUEST> = $r6;

        $r7 = new java.lang.Character;

        specialinvoke $r7.<java.lang.Character: void <init>(char)>(34);

        <org.json.XML: java.lang.Character QUOT> = $r7;

        $r8 = new java.lang.Character;

        specialinvoke $r8.<java.lang.Character: void <init>(char)>(47);

        <org.json.XML: java.lang.Character SLASH> = $r8;

        return;
    }
}
