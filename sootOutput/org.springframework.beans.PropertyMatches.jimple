final class org.springframework.beans.PropertyMatches extends java.lang.Object
{
    public static final int DEFAULT_MAX_DISTANCE;
    private final java.lang.String propertyName;
    private java.lang.String[] possibleMatches;

    public static org.springframework.beans.PropertyMatches forProperty(java.lang.String, java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.String r0;
        org.springframework.beans.PropertyMatches $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.beans.PropertyMatches: org.springframework.beans.PropertyMatches forProperty(java.lang.String,java.lang.Class,int)>(r0, r1, 2);

        return $r2;
    }

    public static org.springframework.beans.PropertyMatches forProperty(java.lang.String, java.lang.Class, int)
    {
        org.springframework.beans.PropertyMatches $r0;
        int i0;
        java.lang.Class r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $r0 = new org.springframework.beans.PropertyMatches;

        specialinvoke $r0.<org.springframework.beans.PropertyMatches: void <init>(java.lang.String,java.lang.Class,int)>(r1, r2, i0);

        return $r0;
    }

    private void <init>(java.lang.String, java.lang.Class, int)
    {
        org.springframework.beans.PropertyMatches r0;
        java.beans.PropertyDescriptor[] $r3;
        int i0;
        java.lang.Class r2;
        java.lang.String[] $r4;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.PropertyMatches;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.PropertyMatches: java.lang.String propertyName> = r1;

        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)>(r2);

        $r4 = specialinvoke r0.<org.springframework.beans.PropertyMatches: java.lang.String[] calculateMatches(java.beans.PropertyDescriptor[],int)>($r3, i0);

        r0.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches> = $r4;

        return;
    }

    public java.lang.String[] getPossibleMatches()
    {
        java.lang.String[] $r1;
        org.springframework.beans.PropertyMatches r0;

        r0 := @this: org.springframework.beans.PropertyMatches;

        $r1 = r0.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches>;

        return $r1;
    }

    public java.lang.String buildErrorMessage()
    {
        java.lang.String[] $r3, $r4, $r6, $r7, $r9;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r2, $r5, $r8;
        boolean $z0;
        org.springframework.beans.PropertyMatches r1;
        java.lang.StringBuilder $r0;

        r1 := @this: org.springframework.beans.PropertyMatches;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bean property \'");

        $r2 = r1.<org.springframework.beans.PropertyMatches: java.lang.String propertyName>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not writable or has an invalid setter method. ");

        $r3 = r1.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches>;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r3);

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Does the parameter type of the setter match the return type of the getter?");

        goto label6;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did you mean ");

        i4 = 0;

        goto label5;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r4 = r1.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches>;

        $r5 = $r4[i4];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = r1.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches>;

        $i0 = lengthof $r6;

        $i1 = $i0 - 2;

        if i4 >= $i1 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', ");

        goto label4;

     label3:
        $r7 = r1.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches>;

        $i2 = lengthof $r7;

        $i3 = $i2 - 2;

        if i4 != $i3 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', or ");

     label4:
        i4 = i4 + 1;

     label5:
        $r9 = r1.<org.springframework.beans.PropertyMatches: java.lang.String[] possibleMatches>;

        $i5 = lengthof $r9;

        if i4 < $i5 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'?");

     label6:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private java.lang.String[] calculateMatches(java.beans.PropertyDescriptor[], int)
    {
        org.springframework.beans.PropertyMatches r5;
        java.beans.PropertyDescriptor[] r1;
        java.lang.String[] $r7;
        java.util.ArrayList $r0;
        java.beans.PropertyDescriptor r2;
        int i0, $i1, i2, i3;
        java.lang.String $r4, $r6;
        java.lang.reflect.Method $r3;

        r5 := @this: org.springframework.beans.PropertyMatches;

        r1 := @parameter0: java.beans.PropertyDescriptor[];

        i2 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i3 = 0;

        goto label3;

     label1:
        r2 = r1[i3];

        $r3 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r6 = r5.<org.springframework.beans.PropertyMatches: java.lang.String propertyName>;

        $i1 = specialinvoke r5.<org.springframework.beans.PropertyMatches: int calculateStringDistance(java.lang.String,java.lang.String)>($r6, $r4);

        if $i1 > i2 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r0);

        return $r7;
    }

    private int calculateStringDistance(java.lang.String, java.lang.String)
    {
        int[][] r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, i33, $i34, $i35, $i36;
        java.lang.String r0, r1;
        org.springframework.beans.PropertyMatches r10;
        char $c10, $c12;

        r10 := @this: org.springframework.beans.PropertyMatches;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        $i29 = virtualinvoke r1.<java.lang.String: int length()>();

        return $i29;

     label01:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label02;

        $i28 = virtualinvoke r0.<java.lang.String: int length()>();

        return $i28;

     label02:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 + 1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = $i4 + 1;

        r2 = newmultiarray (int)[$i3][$i5];

        i30 = 0;

        goto label04;

     label03:
        $r3 = r2[i30];

        $r3[0] = i30;

        i30 = i30 + 1;

     label04:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i30 <= $i6 goto label03;

        i31 = 0;

        goto label06;

     label05:
        $r4 = r2[0];

        $r4[i31] = i31;

        i31 = i31 + 1;

     label06:
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        if i31 <= $i7 goto label05;

        i32 = 1;

        goto label12;

     label07:
        $i9 = i32 - 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        i33 = 1;

        goto label11;

     label08:
        $i11 = i33 - 1;

        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i11);

        $i35 = (int) $c10;

        $i36 = (int) $c12;

        if $i35 != $i36 goto label09;

        z0 = 0;

        goto label10;

     label09:
        z0 = 1;

     label10:
        $r7 = r2[i32];

        $i13 = i32 - 1;

        $r5 = r2[$i13];

        $i14 = $r5[i33];

        $i18 = $i14 + 1;

        $r6 = r2[i32];

        $i15 = i33 - 1;

        $i16 = $r6[$i15];

        $i17 = $i16 + 1;

        $i19 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i17);

        $i20 = i32 - 1;

        $r8 = r2[$i20];

        $i21 = i33 - 1;

        $i22 = $r8[$i21];

        $i23 = $i22 + z0;

        $i24 = staticinvoke <java.lang.Math: int min(int,int)>($i19, $i23);

        $r7[i33] = $i24;

        i33 = i33 + 1;

     label11:
        $i34 = virtualinvoke r1.<java.lang.String: int length()>();

        if i33 <= $i34 goto label08;

        i32 = i32 + 1;

     label12:
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if i32 <= $i8 goto label07;

        $i25 = virtualinvoke r0.<java.lang.String: int length()>();

        $r9 = r2[$i25];

        $i26 = virtualinvoke r1.<java.lang.String: int length()>();

        $i27 = $r9[$i26];

        return $i27;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.PropertyMatches: int DEFAULT_MAX_DISTANCE> = 2;

        return;
    }
}
