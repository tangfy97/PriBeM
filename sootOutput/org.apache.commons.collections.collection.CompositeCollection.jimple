public class org.apache.commons.collections.collection.CompositeCollection extends java.lang.Object implements java.util.Collection
{
    protected org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator;
    protected java.util.Collection[] all;

    public void <init>()
    {
        java.util.Collection[] $r1;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.util.Collection)[0];

        r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: void <init>()>();

        virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: void addComposited(java.util.Collection)>(r1);

        return;
    }

    public void <init>(java.util.Collection[])
    {
        java.util.Collection[] r1;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r1 := @parameter0: java.util.Collection[];

        specialinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: void <init>()>();

        virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: void addComposited(java.util.Collection[])>(r1);

        return;
    }

    public int size()
    {
        java.util.Collection $r3;
        java.util.Collection[] $r1, $r2;
        int $i0, $i1, i2, i3, $i5;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        i2 = 0;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r1;

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label2;

        $r2 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r3 = $r2[i3];

        $i1 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        i2 = i2 + $i1;

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label2:
        return i2;
    }

    public boolean isEmpty()
    {
        java.util.Collection $r3;
        java.util.Collection[] $r1, $r2;
        int $i0, i1, $i3;
        org.apache.commons.collections.collection.CompositeCollection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r3 = $r2[i1];

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label3:
        return 1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collection $r4;
        java.util.Collection[] $r1, $r2;
        int $i0, i1, $i3;
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.lang.Object r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r4 = $r2[i1];

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label3:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r6, $r7;
        java.util.Collection $r5;
        java.util.Collection[] $r1, $r3, $r4;
        int $i0, $i1, i2;
        org.apache.commons.collections.collection.CompositeCollection r0;
        org.apache.commons.collections.iterators.IteratorChain $r2;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r7 = <org.apache.commons.collections.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        return $r7;

     label1:
        $r2 = new org.apache.commons.collections.iterators.IteratorChain;

        specialinvoke $r2.<org.apache.commons.collections.iterators.IteratorChain: void <init>()>();

        i2 = 0;

     label2:
        $r3 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label3;

        $r4 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r5 = $r4[i2];

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        virtualinvoke $r2.<org.apache.commons.collections.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r2;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] r1;
        java.util.Iterator $r2;
        int $i0, i1;
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        i1 = 0;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r1, $r5, r10;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.util.Collection[] $r6, $r11;
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.lang.Class $r2, $r3;
        java.lang.Object $r4, $r9;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r1 := @parameter0: java.lang.Object[];

        $i0 = virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: int size()>();

        $i1 = lengthof r1;

        if $i1 < $i0 goto label1;

        r10 = r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, $i0);

        $r5 = (java.lang.Object[]) $r4;

        r10 = (java.lang.Object[]) $r5;

     label2:
        i4 = 0;

        i5 = 0;

     label3:
        $r11 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i6 = lengthof $r11;

        if i5 >= $i6 goto label6;

        $r6 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r7 = $r6[i5];

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $i3 = i4;

        i4 = i4 + 1;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10[$i3] = $r9;

        goto label4;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $i2 = lengthof r10;

        if $i2 <= $i0 goto label7;

        r10[$i0] = null;

     label7:
        return r10;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r5;
        java.util.Collection[] $r3;
        org.apache.commons.collections.collection.CompositeCollection$CollectionMutator $r1, $r4;
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator>;

        if $r1 != null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("add() is not supported on CompositeCollection without a CollectionMutator strategy");

        throw $r5;

     label1:
        $r4 = r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator>;

        $r3 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.collections.collection.CompositeCollection$CollectionMutator: boolean add(org.apache.commons.collections.collection.CompositeCollection,java.util.Collection[],java.lang.Object)>(r0, $r3, r2);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r5;
        java.util.Collection[] $r3;
        org.apache.commons.collections.collection.CompositeCollection$CollectionMutator $r1, $r4;
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator>;

        if $r1 != null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("remove() is not supported on CompositeCollection without a CollectionMutator strategy");

        throw $r5;

     label1:
        $r4 = r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator>;

        $r3 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.collections.collection.CompositeCollection$CollectionMutator: boolean remove(org.apache.commons.collections.collection.CompositeCollection,java.util.Collection[],java.lang.Object)>(r0, $r3, r2);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.commons.collections.collection.CompositeCollection r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r2 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.commons.collections.collection.CompositeCollection: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public boolean addAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r5;
        java.util.Collection r2;
        java.util.Collection[] $r3;
        org.apache.commons.collections.collection.CompositeCollection$CollectionMutator $r1, $r4;
        org.apache.commons.collections.collection.CompositeCollection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator>;

        if $r1 != null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("addAll() is not supported on CompositeCollection without a CollectionMutator strategy");

        throw $r5;

     label1:
        $r4 = r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator>;

        $r3 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.collections.collection.CompositeCollection$CollectionMutator: boolean addAll(org.apache.commons.collections.collection.CompositeCollection,java.util.Collection[],java.util.Collection)>(r0, $r3, r2);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collection r0, $r4;
        int $i0, $i1, i2, $i4;
        java.util.Collection[] $r2, $r3;
        org.apache.commons.collections.collection.CompositeCollection r1;
        boolean $z0, z1, $z2;

        r1 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        z1 = 0;

        $r2 = r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i1 = lengthof $r2;

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label6;

        $r3 = r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r4 = $r3[i2];

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean removeAll(java.util.Collection)>(r0);

        if $z0 != 0 goto label3;

        if z1 == 0 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z1 = $z2;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label2;

     label6:
        return z1;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collection r3, $r4;
        java.util.Collection[] $r1, $r2;
        int $i0, i1, $i3;
        org.apache.commons.collections.collection.CompositeCollection r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r3 := @parameter0: java.util.Collection;

        z1 = 0;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label5;

        $r2 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r4 = $r2[i1];

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean retainAll(java.util.Collection)>(r3);

        if $z0 != 0 goto label2;

        if z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z1 = $z2;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label5:
        return z1;
    }

    public void clear()
    {
        java.util.Collection $r3;
        java.util.Collection[] $r1, $r2;
        int $i0, i1;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r3 = $r2[i1];

        interfaceinvoke $r3.<java.util.Collection: void clear()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setMutator(org.apache.commons.collections.collection.CompositeCollection$CollectionMutator)
    {
        org.apache.commons.collections.collection.CompositeCollection$CollectionMutator r1;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r1 := @parameter0: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator;

        r0.<org.apache.commons.collections.collection.CompositeCollection: org.apache.commons.collections.collection.CompositeCollection$CollectionMutator mutator> = r1;

        return;
    }

    public void addComposited(java.util.Collection[])
    {
        java.lang.Object[] $r7;
        java.util.ArrayList $r0;
        java.util.List $r3, $r5;
        java.util.Collection[] $r2, r4, $r6, $r8, $r9;
        int $i0;
        org.apache.commons.collections.collection.CompositeCollection r1;

        r1 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r4 := @parameter0: java.util.Collection[];

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r5);

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r6 = newarray (java.util.Collection)[$i0];

        $r7 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.util.Collection[]) $r7;

        $r9 = (java.util.Collection[]) $r8;

        r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all> = $r9;

        return;
    }

    public void addComposited(java.util.Collection)
    {
        java.util.Collection[] $r1;
        org.apache.commons.collections.collection.CompositeCollection r0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = newarray (java.util.Collection)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: void addComposited(java.util.Collection[])>($r1);

        return;
    }

    public void addComposited(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r2, r3;
        java.util.Collection[] $r1;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r2 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        $r1 = newarray (java.util.Collection)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        virtualinvoke r0.<org.apache.commons.collections.collection.CompositeCollection: void addComposited(java.util.Collection[])>($r1);

        return;
    }

    public void removeComposited(java.util.Collection)
    {
        java.lang.Object[] $r7;
        java.util.Collection r5;
        java.util.ArrayList $r0;
        java.util.List $r4;
        java.util.Collection[] $r2, $r3, $r6, $r8, $r9;
        int $i0, $i1;
        org.apache.commons.collections.collection.CompositeCollection r1;

        r1 := @this: org.apache.commons.collections.collection.CompositeCollection;

        r5 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $i0 = lengthof $r2;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        virtualinvoke $r0.<java.util.ArrayList: boolean remove(java.lang.Object)>(r5);

        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r6 = newarray (java.util.Collection)[$i1];

        $r7 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.util.Collection[]) $r7;

        $r9 = (java.util.Collection[]) $r8;

        r1.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all> = $r9;

        return;
    }

    public java.util.Collection toCollection()
    {
        org.apache.commons.collections.collection.CompositeCollection r1;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.commons.collections.collection.CompositeCollection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        return $r0;
    }

    public java.util.Collection getCollections()
    {
        java.util.List $r2, $r3;
        java.util.Collection[] $r1;
        org.apache.commons.collections.collection.CompositeCollection r0;

        r0 := @this: org.apache.commons.collections.collection.CompositeCollection;

        $r1 = r0.<org.apache.commons.collections.collection.CompositeCollection: java.util.Collection[] all>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = staticinvoke <org.apache.commons.collections.list.UnmodifiableList: java.util.List decorate(java.util.List)>($r2);

        return $r3;
    }
}
