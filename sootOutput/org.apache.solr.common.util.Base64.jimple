public class org.apache.solr.common.util.Base64 extends java.lang.Object
{
    private static final char[] intToBase64;
    private static final byte[] base64ToInt;

    public void <init>()
    {
        org.apache.solr.common.util.Base64 r0;

        r0 := @this: org.apache.solr.common.util.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String byteArrayToBase64(byte[], int, int)
    {
        byte[] r2;
        byte $b8, $b11, $b23, $b24, $b26;
        short s25, s27, $s40, s45, s48, s49, $s50, $s51, $s52, $s59, $s62;
        java.lang.StringBuffer $r4;
        java.lang.String $r3;
        char[] r1;
        int i0, i1, $i2, i3, $i4, $i5, i6, i7, $i9, $i12, $i13, $i14, $i15, $i17, $i18, $i20, $i21, $i28, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, i42, i43, i44, i46, i47, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i61, $i63, $i64, $i65;
        char $c10, $c16, $c19, $c22, $c29, $c34, $c39, $c41;

        r2 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = i0 / 3;

        $i2 = 3 * i1;

        i3 = i0 - $i2;

        $i4 = i0 + 2;

        $i5 = $i4 / 3;

        i6 = 4 * $i5;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(i6);

        r1 = <org.apache.solr.common.util.Base64: char[] intToBase64>;

        i42 = i7;

        i43 = 0;

     label1:
        if i43 >= i1 goto label2;

        i44 = i42 + 1;

        $b23 = r2[i42];

        $s50 = (short) $b23;

        s45 = $s50 & 255;

        i46 = i44 + 1;

        $b24 = r2[i44];

        $s51 = (short) $b24;

        s25 = $s51 & 255;

        i42 = i46 + 1;

        $b26 = r2[i46];

        $s52 = (short) $b26;

        s27 = $s52 & 255;

        $i53 = (int) s45;

        $i28 = $i53 >> 2;

        $c29 = r1[$i28];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c29);

        $i54 = (int) s45;

        $i30 = $i54 << 4;

        $i32 = $i30 & 63;

        $i55 = (int) s25;

        $i31 = $i55 >> 4;

        $i33 = $i32 | $i31;

        $c34 = r1[$i33];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c34);

        $i56 = (int) s25;

        $i35 = $i56 << 2;

        $i37 = $i35 & 63;

        $i57 = (int) s27;

        $i36 = $i57 >> 6;

        $i38 = $i37 | $i36;

        $c39 = r1[$i38];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c39);

        $s40 = s27 & 63;

        $i58 = (int) $s40;

        $c41 = r1[$i58];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c41);

        i43 = i43 + 1;

        goto label1;

     label2:
        if i3 == 0 goto label4;

        i47 = i42 + 1;

        $b8 = r2[i42];

        $s59 = (short) $b8;

        s48 = $s59 & 255;

        $i60 = (int) s48;

        $i9 = $i60 >> 2;

        $c10 = r1[$i9];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

        if i3 != 1 goto label3;

        $i61 = (int) s48;

        $i20 = $i61 << 4;

        $i21 = $i20 & 63;

        $c22 = r1[$i21];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c22);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("==");

        goto label4;

     label3:
        $b11 = r2[i47];

        $s62 = (short) $b11;

        s49 = $s62 & 255;

        $i63 = (int) s48;

        $i12 = $i63 << 4;

        $i14 = $i12 & 63;

        $i64 = (int) s49;

        $i13 = $i64 >> 4;

        $i15 = $i14 | $i13;

        $c16 = r1[$i15];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16);

        $i65 = (int) s49;

        $i17 = $i65 << 2;

        $i18 = $i17 & 63;

        $c19 = r1[$i18];

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c19);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

     label4:
        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static byte[] base64ToByteArray(java.lang.String)
    {
        byte[] r0, $r3;
        byte $b10, $b16, $b28, $b32, $b35;
        int $i0, i1, $i2, $i4, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i18, $i20, $i22, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i33, $i34, $i36, $i38, i40, i41, $i42, $i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, $i55, $i57, $i58;
        java.lang.String r1;
        char $c3, $c5, $c11, $c17, $c19, $c21, $c23, $c37, $c39;
        java.lang.IllegalArgumentException $r4;

        r1 := @parameter0: java.lang.String;

        r0 = <org.apache.solr.common.util.Base64: byte[] base64ToInt>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = $i0 / 4;

        $i2 = 4 * i1;

        if $i2 == $i0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String length must be a multiple of four.");

        throw $r4;

     label1:
        i40 = 0;

        i41 = i1;

        if $i0 == 0 goto label3;

        $i36 = $i0 - 1;

        $c37 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i36);

        $i55 = (int) $c37;

        if $i55 != 61 goto label2;

        i40 = 1;

        $i57 = (int) -1;

        i41 = i1 + $i57;

     label2:
        $i38 = $i0 - 2;

        $c39 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i38);

        $i58 = (int) $c39;

        if $i58 != 61 goto label3;

        i40 = i40 + 1;

     label3:
        $i42 = 3 * i1;

        $i43 = $i42 - i40;

        $r3 = newarray (byte)[$i43];

        i44 = 0;

        i45 = 0;

        i46 = 0;

     label4:
        if i46 >= i41 goto label5;

        i47 = i44 + 1;

        $c17 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i44);

        $i18 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c17, r0);

        i48 = i47 + 1;

        $c19 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i47);

        $i20 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c19, r0);

        i49 = i48 + 1;

        $c21 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i48);

        $i22 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c21, r0);

        i44 = i49 + 1;

        $c23 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i49);

        $i24 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c23, r0);

        i50 = i45 + 1;

        $i26 = $i18 << 2;

        $i25 = $i20 >> 4;

        $i27 = $i26 | $i25;

        $b28 = (byte) $i27;

        $r3[i45] = $b28;

        i51 = i50 + 1;

        $i30 = $i20 << 4;

        $i29 = $i22 >> 2;

        $i31 = $i30 | $i29;

        $b32 = (byte) $i31;

        $r3[i50] = $b32;

        i45 = i51 + 1;

        $i33 = $i22 << 6;

        $i34 = $i33 | $i24;

        $b35 = (byte) $i34;

        $r3[i51] = $b35;

        i46 = i46 + 1;

        goto label4;

     label5:
        if i40 == 0 goto label6;

        i52 = i44 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i44);

        $i4 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c3, r0);

        i53 = i52 + 1;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i52);

        $i6 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c5, r0);

        i54 = i45 + 1;

        $i8 = $i4 << 2;

        $i7 = $i6 >> 4;

        $i9 = $i8 | $i7;

        $b10 = (byte) $i9;

        $r3[i45] = $b10;

        if i40 != 1 goto label6;

        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i53);

        $i12 = staticinvoke <org.apache.solr.common.util.Base64: int base64toInt(char,byte[])>($c11, r0);

        $i14 = $i6 << 4;

        $i13 = $i12 >> 2;

        $i15 = $i14 | $i13;

        $b16 = (byte) $i15;

        $r3[i54] = $b16;

     label6:
        return $r3;
    }

    private static int base64toInt(char, byte[])
    {
        byte[] r0;
        char c0;
        java.lang.IllegalArgumentException $r7;
        byte b1;
        int $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5;

        c0 := @parameter0: char;

        r0 := @parameter1: byte[];

        $i2 = (int) c0;

        b1 = r0[$i2];

        $i3 = (int) b1;

        if $i3 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label1:
        $i4 = (int) b1;

        return $i4;
    }

    static void <clinit>()
    {
        char[] $r0;
        byte[] $r1;

        $r0 = newarray (char)[64];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 97;

        $r0[27] = 98;

        $r0[28] = 99;

        $r0[29] = 100;

        $r0[30] = 101;

        $r0[31] = 102;

        $r0[32] = 103;

        $r0[33] = 104;

        $r0[34] = 105;

        $r0[35] = 106;

        $r0[36] = 107;

        $r0[37] = 108;

        $r0[38] = 109;

        $r0[39] = 110;

        $r0[40] = 111;

        $r0[41] = 112;

        $r0[42] = 113;

        $r0[43] = 114;

        $r0[44] = 115;

        $r0[45] = 116;

        $r0[46] = 117;

        $r0[47] = 118;

        $r0[48] = 119;

        $r0[49] = 120;

        $r0[50] = 121;

        $r0[51] = 122;

        $r0[52] = 48;

        $r0[53] = 49;

        $r0[54] = 50;

        $r0[55] = 51;

        $r0[56] = 52;

        $r0[57] = 53;

        $r0[58] = 54;

        $r0[59] = 55;

        $r0[60] = 56;

        $r0[61] = 57;

        $r0[62] = 43;

        $r0[63] = 47;

        <org.apache.solr.common.util.Base64: char[] intToBase64> = $r0;

        $r1 = newarray (byte)[123];

        $r1[0] = -1;

        $r1[1] = -1;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r1[7] = -1;

        $r1[8] = -1;

        $r1[9] = -1;

        $r1[10] = -1;

        $r1[11] = -1;

        $r1[12] = -1;

        $r1[13] = -1;

        $r1[14] = -1;

        $r1[15] = -1;

        $r1[16] = -1;

        $r1[17] = -1;

        $r1[18] = -1;

        $r1[19] = -1;

        $r1[20] = -1;

        $r1[21] = -1;

        $r1[22] = -1;

        $r1[23] = -1;

        $r1[24] = -1;

        $r1[25] = -1;

        $r1[26] = -1;

        $r1[27] = -1;

        $r1[28] = -1;

        $r1[29] = -1;

        $r1[30] = -1;

        $r1[31] = -1;

        $r1[32] = -1;

        $r1[33] = -1;

        $r1[34] = -1;

        $r1[35] = -1;

        $r1[36] = -1;

        $r1[37] = -1;

        $r1[38] = -1;

        $r1[39] = -1;

        $r1[40] = -1;

        $r1[41] = -1;

        $r1[42] = -1;

        $r1[43] = 62;

        $r1[44] = -1;

        $r1[45] = -1;

        $r1[46] = -1;

        $r1[47] = 63;

        $r1[48] = 52;

        $r1[49] = 53;

        $r1[50] = 54;

        $r1[51] = 55;

        $r1[52] = 56;

        $r1[53] = 57;

        $r1[54] = 58;

        $r1[55] = 59;

        $r1[56] = 60;

        $r1[57] = 61;

        $r1[58] = -1;

        $r1[59] = -1;

        $r1[60] = -1;

        $r1[61] = -1;

        $r1[62] = -1;

        $r1[63] = -1;

        $r1[64] = -1;

        $r1[65] = 0;

        $r1[66] = 1;

        $r1[67] = 2;

        $r1[68] = 3;

        $r1[69] = 4;

        $r1[70] = 5;

        $r1[71] = 6;

        $r1[72] = 7;

        $r1[73] = 8;

        $r1[74] = 9;

        $r1[75] = 10;

        $r1[76] = 11;

        $r1[77] = 12;

        $r1[78] = 13;

        $r1[79] = 14;

        $r1[80] = 15;

        $r1[81] = 16;

        $r1[82] = 17;

        $r1[83] = 18;

        $r1[84] = 19;

        $r1[85] = 20;

        $r1[86] = 21;

        $r1[87] = 22;

        $r1[88] = 23;

        $r1[89] = 24;

        $r1[90] = 25;

        $r1[91] = -1;

        $r1[92] = -1;

        $r1[93] = -1;

        $r1[94] = -1;

        $r1[95] = -1;

        $r1[96] = -1;

        $r1[97] = 26;

        $r1[98] = 27;

        $r1[99] = 28;

        $r1[100] = 29;

        $r1[101] = 30;

        $r1[102] = 31;

        $r1[103] = 32;

        $r1[104] = 33;

        $r1[105] = 34;

        $r1[106] = 35;

        $r1[107] = 36;

        $r1[108] = 37;

        $r1[109] = 38;

        $r1[110] = 39;

        $r1[111] = 40;

        $r1[112] = 41;

        $r1[113] = 42;

        $r1[114] = 43;

        $r1[115] = 44;

        $r1[116] = 45;

        $r1[117] = 46;

        $r1[118] = 47;

        $r1[119] = 48;

        $r1[120] = 49;

        $r1[121] = 50;

        $r1[122] = 51;

        <org.apache.solr.common.util.Base64: byte[] base64ToInt> = $r1;

        return;
    }
}
