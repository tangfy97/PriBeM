public class org.apache.batik.transcoder.svg2svg.OutputManager extends java.lang.Object
{
    protected org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter;
    protected java.io.Writer writer;
    protected int level;
    protected java.lang.StringBuffer margin;
    protected int line;
    protected int column;
    protected java.util.List xmlSpace;
    protected boolean canIndent;
    protected java.util.List startingLines;
    protected boolean lineAttributes;

    public void <init>(org.apache.batik.transcoder.svg2svg.PrettyPrinter, java.io.Writer)
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter r6;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.util.List $r4;
        java.lang.StringBuffer $r1;
        java.io.Writer r7;
        java.lang.Boolean $r3;
        java.util.LinkedList $r2, $r5;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r6 := @parameter0: org.apache.batik.transcoder.svg2svg.PrettyPrinter;

        r7 := @parameter1: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin> = $r1;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int line> = 1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace> = $r2;

        $r4 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent> = 1;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List startingLines> = $r5;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean lineAttributes> = 0;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter> = r6;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer> = r7;

        return;
    }

    public void printCharacter(char) throws java.io.IOException
    {
        int $i1, $i2, $i3, $i4;
        java.io.Writer $r1;
        char c0;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 != 10 goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        goto label2;

     label1:
        $i1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i2 = $i1 + 1;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column> = $i2;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $i4 = (int) c0;

        virtualinvoke $r1.<java.io.Writer: void write(int)>($i4);

     label2:
        return;
    }

    public void printNewline() throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1;
        char $c1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        int $i0, $i2, $i3, i4, $i5;
        java.io.Writer $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $r2 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: java.lang.String getNewline()>();

        i4 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c1;

        virtualinvoke $r3.<java.io.Writer: void write(int)>($i5);

        i4 = i4 + 1;

     label2:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i4 < $i0 goto label1;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column> = 0;

        $i2 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int line>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int line> = $i3;

        return;
    }

    public void printString(java.lang.String) throws java.io.IOException
    {
        int $i0, i2;
        char $c1;
        java.lang.String r0;
        org.apache.batik.transcoder.svg2svg.OutputManager r1;

        r1 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        goto label2;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r1.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c1);

        i2 = i2 + 1;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 < $i0 goto label1;

        return;
    }

    public void printCharacters(char[]) throws java.io.IOException
    {
        int $i0, i2;
        char[] r0;
        char $c1;
        org.apache.batik.transcoder.svg2svg.OutputManager r1;

        r1 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: char[];

        i2 = 0;

        goto label2;

     label1:
        $c1 = r0[i2];

        virtualinvoke r1.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c1);

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r0;

        if i2 < $i0 goto label1;

        return;
    }

    public void printSpaces(char[], boolean) throws java.io.IOException
    {
        char[] r2;
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        boolean $z0, z1;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        z1 := @parameter1: boolean;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label1;

        if z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

     label2:
        return;
    }

    public void printTopSpaces(char[]) throws java.io.IOException
    {
        int $i0, i1;
        char[] r2;
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int newlines(char[])>(r2);

        i1 = 0;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

     label4:
        return;
    }

    public void printComment(char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1, $r3, $r6;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.lang.StringBuffer $r4, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r5, $r8, $r10;
        boolean $z0, $z1;
        char[] r2;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label5;

        $z1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r9 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r10);

     label1:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<!--");

        $i1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i0 = lengthof r2;

        $i2 = $i1 + $i0;

        $i3 = $i2 + 3;

        $r3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i4 = virtualinvoke $r3.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        if $i3 >= $i4 goto label2;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        goto label3;

     label2:
        $r4 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean formatText(char[],java.lang.String,boolean)>(r2, $r5, 0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

     label3:
        $i5 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i6 = $i5 + 3;

        $r6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i7 = virtualinvoke $r6.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        if $i6 <= $i7 goto label4;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r7 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r8);

     label4:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("-->");

        goto label6;

     label5:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<!--");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("-->");

     label6:
        return;
    }

    public void printXMLDecl(char[], char[], char[], char[], char, char[], char[], char[], char[], char, char[], char[], char[], char[], char, char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        boolean $z0;
        char c0, c1, c2;
        char[] r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        r3 := @parameter2: char[];

        r4 := @parameter3: char[];

        c0 := @parameter4: char;

        r5 := @parameter5: char[];

        r11 := @parameter6: char[];

        r12 := @parameter7: char[];

        r6 := @parameter8: char[];

        c2 := @parameter9: char;

        r13 := @parameter10: char[];

        r8 := @parameter11: char[];

        r9 := @parameter12: char[];

        r7 := @parameter13: char[];

        c1 := @parameter14: char;

        r10 := @parameter15: char[];

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<?xml");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r1, 0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("version");

        if r2 == null goto label01;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r2, 1);

     label01:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(61);

        if r3 == null goto label02;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r3, 1);

     label02:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r4);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c0);

        if r5 == null goto label10;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r5, 0);

        if r6 == null goto label07;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("encoding");

        if r11 == null goto label03;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r11, 1);

     label03:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(61);

        if r12 == null goto label04;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r12, 1);

     label04:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c2);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r6);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c2);

        if r13 == null goto label07;

        if r7 != null goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r13, $z0);

     label07:
        if r7 == null goto label10;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("standalone");

        if r8 == null goto label08;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r8, 1);

     label08:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(61);

        if r9 == null goto label09;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r9, 1);

     label09:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c1);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r7);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c1);

        if r10 == null goto label10;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r10, 1);

     label10:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("?>");

        return;
    }

    public void printPI(char[], char[], char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.lang.StringBuffer $r5;
        char[] r2, r3, r4;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        r3 := @parameter1: char[];

        r4 := @parameter2: char[];

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r5 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r6);

     label1:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<?");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r3, 0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r4);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("?>");

        return;
    }

    public void printDoctypeStart(char[], char[], char[], java.lang.String, char[], char[], char, char[], char[], char, char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1, $r11, $r12;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        int $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.String r5;
        boolean $z0, $z1;
        char c0, c1;
        char[] r2, r3, r4, r6, r7, r8, r9, r10;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        r3 := @parameter1: char[];

        r4 := @parameter2: char[];

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: char[];

        r7 := @parameter5: char[];

        c0 := @parameter6: char;

        r8 := @parameter7: char[];

        r9 := @parameter8: char[];

        c1 := @parameter9: char;

        r10 := @parameter10: char[];

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<!DOCTYPE");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r3);

        if r4 == null goto label8;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>(r5);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r7);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c0);

        if r8 == null goto label8;

        if r9 == null goto label8;

        $i3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i2 = lengthof r9;

        $i4 = $i3 + $i2;

        $i5 = $i4 + 3;

        $r11 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i6 = virtualinvoke $r11.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        if $i5 <= $i6 goto label3;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        i8 = 0;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        i8 = i8 + 1;

     label2:
        $r12 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i7 = virtualinvoke $r12.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getTabulationWidth()>();

        if i8 < $i7 goto label1;

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

     label4:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c1);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r9);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c1);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        goto label8;

     label5:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<!DOCTYPE");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r2, 0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r3);

        if r4 == null goto label8;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r4, 0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>(r5);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r6, 0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c0);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r7);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c0);

        if r8 == null goto label8;

        if r9 != null goto label6;

        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r8, $z1);

        if r9 == null goto label8;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c1);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r9);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(c1);

        if r10 == null goto label8;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r10, 1);

     label8:
        return;
    }

    public void printDoctypeEnd(char[]) throws java.io.IOException
    {
        char[] r0;
        org.apache.batik.transcoder.svg2svg.OutputManager r1;

        r1 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: char[];

        if r0 == null goto label1;

        virtualinvoke r1.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r0, 1);

     label1:
        virtualinvoke r1.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(62);

        return;
    }

    public void printParameterEntityReference(char[]) throws java.io.IOException
    {
        char[] r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r1 := @parameter0: char[];

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(37);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r1);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(59);

        return;
    }

    public void printEntityReference(char[], boolean) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.util.List $r3;
        java.lang.StringBuffer $r6;
        char[] r2;
        java.lang.Boolean $r5;
        java.lang.Object $r4;
        java.lang.String $r7;
        boolean $z0, z1;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        z1 := @parameter1: boolean;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r4 == $r5 goto label1;

        if z1 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r7);

     label1:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(38);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(59);

        return;
    }

    public void printCharacterEntityReference(char[], boolean, boolean) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1, $r6;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.lang.StringBuffer $r7, $r9;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.Boolean $r5;
        java.lang.String $r8, $r10;
        boolean $z0, z1, z2;
        java.util.List $r3;
        char[] r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r4 == $r5 goto label3;

        if z1 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r9 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r10);

        goto label3;

     label1:
        if z2 == 0 goto label3;

        $i1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i0 = lengthof r2;

        $i2 = $i1 + $i0;

        i3 = $i2 + 3;

        $r6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i4 = virtualinvoke $r6.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        if i3 <= $i4 goto label2;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r7 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r8);

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

     label3:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("&#");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(59);

        return;
    }

    public void printElementStart(char[], java.util.List, char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r6, $r18, $r26, $r34;
        java.lang.Integer $r4;
        java.lang.StringBuffer $r19, $r22, $r32;
        java.lang.String $r12, $r15, $r23, $r25, $r27, $r30, $r33, $r38, $r42;
        char[] r7, $r11, $r13, $r14, r17, $r24, $r37, $r41, $r45, $r46, $r47;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.List $r1, $r2, $r5, r8, $r16, $r28, $r31;
        org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo r35, r39, r43;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i15, $i16, $i17, $i18, i19, i20;
        java.lang.Boolean $r36, $r40, $r44;
        java.util.Iterator $r9, $r20;
        char $c1, $c2, $c8, $c9, $c13, $c14;
        java.lang.Object $r3, $r10, $r21, $r29;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r7 := @parameter0: char[];

        r8 := @parameter1: java.util.List;

        r17 := @parameter2: char[];

        $r2 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, $r3);

        $r5 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List startingLines>;

        $r4 = new java.lang.Integer;

        $i0 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int line>;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i0);

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(0, $r4);

        $r6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r6.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label01;

        $z8 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent>;

        if $z8 == 0 goto label01;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r32 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r33);

     label01:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(60);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r7);

        $r34 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z9 = virtualinvoke $r34.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z9 == 0 goto label15;

        $r20 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

        $z3 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r29 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo) $r29;

        $z6 = virtualinvoke r35.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: boolean isAttribute(java.lang.String)>("xml:space");

        if $z6 == 0 goto label04;

        $r31 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r30 = r35.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        $z7 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z7 == 0 goto label02;

        $r36 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label03;

     label02:
        $r36 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label03:
        interfaceinvoke $r31.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r36);

     label04:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        $r37 = r35.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] name>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>($r37);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(61);

        $c13 = r35.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char delimiter>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c13);

        $r38 = r35.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r38);

        $c14 = r35.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char delimiter>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c14);

        goto label14;

     label05:
        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo) $r21;

        $z4 = virtualinvoke r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: boolean isAttribute(java.lang.String)>("xml:space");

        if $z4 == 0 goto label08;

        $r28 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r27 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        $z5 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z5 == 0 goto label06;

        $r40 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label07;

     label06:
        $r40 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label07:
        interfaceinvoke $r28.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r40);

     label08:
        $r41 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] name>;

        $i15 = lengthof $r41;

        $r42 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        $i16 = virtualinvoke $r42.<java.lang.String: int length()>();

        $i17 = $i15 + $i16;

        $i18 = $i17 + 4;

        $z10 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean lineAttributes>;

        if $z10 != 0 goto label09;

        $i10 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i11 = $i18 + $i10;

        $r26 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i12 = virtualinvoke $r26.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        if $i11 <= $i12 goto label12;

     label09:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r22 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r23);

        i19 = 0;

        goto label11;

     label10:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

        i19 = i19 + 1;

     label11:
        $i6 = lengthof r7;

        $i7 = $i6 + 2;

        if i19 < $i7 goto label10;

        goto label13;

     label12:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

     label13:
        $r24 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] name>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>($r24);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(61);

        $c8 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char delimiter>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c8);

        $r25 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r25);

        $c9 = r39.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char delimiter>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c9);

     label14:
        $z11 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z11 != 0 goto label05;

        goto label23;

     label15:
        $r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

        goto label22;

     label16:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r43 = (org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo) $r10;

        $z1 = virtualinvoke r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: boolean isAttribute(java.lang.String)>("xml:space");

        if $z1 == 0 goto label19;

        $r16 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r15 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z2 == 0 goto label17;

        $r44 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label18;

     label17:
        $r44 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label18:
        interfaceinvoke $r16.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r44);

     label19:
        $r45 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] space>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r45, 0);

        $r46 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] name>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>($r46);

        $r47 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] space1>;

        if $r47 == null goto label20;

        $r14 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] space1>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r14, 1);

     label20:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(61);

        $r11 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] space2>;

        if $r11 == null goto label21;

        $r13 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char[] space2>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r13, 1);

     label21:
        $c1 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char delimiter>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c1);

        $r12 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: java.lang.String value>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r12);

        $c2 = r43.<org.apache.batik.transcoder.svg2svg.OutputManager$AttributeInfo: char delimiter>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>($c2);

     label22:
        $z12 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label16;

     label23:
        if r17 == null goto label24;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r17, 1);

     label24:
        $i3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int level>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int level> = $i4;

        i20 = 0;

        goto label26;

     label25:
        $r19 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i20 = i20 + 1;

     label26:
        $r18 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i5 = virtualinvoke $r18.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getTabulationWidth()>();

        if i20 < $i5 goto label25;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent> = 1;

        return;
    }

    public void printElementEnd(char[], char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1, $r6, $r16;
        java.lang.Integer $r13;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.lang.StringBuffer $r2, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Boolean $r10;
        java.lang.String $r15;
        boolean $z0;
        java.util.List $r4, $r5, $r8, $r11;
        char[] r3, r7;
        java.lang.Object $r9, $r12;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r3 := @parameter0: char[];

        r7 := @parameter1: char[];

        i10 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(0);

        i10 = i10 + 1;

     label2:
        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getTabulationWidth()>();

        if i10 < $i0 goto label1;

        $i1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int level>;

        $i2 = $i1 - 1;

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int level> = $i2;

        if r3 == null goto label6;

        $r6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r6.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 == 0 goto label4;

        $r8 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r9 == $r10 goto label4;

        $i3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int line>;

        $r11 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List startingLines>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (java.lang.Integer) $r12;

        $i4 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        if $i3 != $i4 goto label3;

        $i6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i5 = lengthof r3;

        $i7 = $i6 + $i5;

        $i8 = $i7 + 3;

        $r16 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i9 = virtualinvoke $r16.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        if $i8 < $i9 goto label4;

     label3:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r14 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r15);

     label4:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("</");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r3);

        if r7 == null goto label5;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r7, 1);

     label5:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(62);

        goto label7;

     label6:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("/>");

     label7:
        $r4 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List startingLines>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(0);

        $r5 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>(0);

        return;
    }

    public boolean printCharacterData(char[], boolean, boolean) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        java.lang.StringBuffer $r6, $r8;
        int $i0, $i1, i2;
        java.lang.Boolean $r5;
        java.lang.String $r7, $r9;
        boolean $z0, $z1, z2, z3, $z4;
        java.util.List $r3;
        char[] r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        z2 := @parameter1: boolean;

        z3 := @parameter2: boolean;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: boolean getFormat()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        return 0;

     label1:
        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent> = 1;

        $z1 = virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean isWhiteSpace(char[])>(r2);

        if $z1 == 0 goto label4;

        $i0 = virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: int newlines(char[])>(r2);

        i2 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        i2 = i2 + 1;

     label3:
        $i1 = $i0 - 1;

        if i2 < $i1 goto label2;

        return 1;

     label4:
        $r3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.util.List xmlSpace>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r4 != $r5 goto label5;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r2);

        r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean canIndent> = 0;

        return 0;

     label5:
        if z2 == 0 goto label6;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        $r8 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r9);

     label6:
        $r6 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.lang.StringBuffer margin>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $z4 = virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: boolean formatText(char[],java.lang.String,boolean)>(r2, $r7, z3);

        return $z4;
    }

    public void printCDATASection(char[]) throws java.io.IOException
    {
        char[] r1;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r1 := @parameter0: char[];

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("<![CDATA[");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacters(char[])>(r1);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>("]]>");

        return;
    }

    public void printNotation(char[], char[], char[], java.lang.String, char[], char[], char, char[], char[], char, char[]) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        int $i2, $i3, $i4, $i5;
        java.lang.String r6;
        char c0, c1;
        java.io.Writer $r1, $r4, $r7, $r9, $r11, $r12, $r15, $r17, $r18, $r19;
        char[] r2, r3, r5, r8, r10, r13, r14, r16;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        r3 := @parameter1: char[];

        r5 := @parameter2: char[];

        r6 := @parameter3: java.lang.String;

        r8 := @parameter4: char[];

        r10 := @parameter5: char[];

        c0 := @parameter6: char;

        r13 := @parameter7: char[];

        r16 := @parameter8: char[];

        c1 := @parameter9: char;

        r14 := @parameter10: char[];

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("<!NOTATION");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r2, 0);

        $r4 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(char[])>(r3);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r5, 0);

        $r7 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(r6);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r8, 0);

        $r9 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $i2 = (int) c0;

        virtualinvoke $r9.<java.io.Writer: void write(int)>($i2);

        $r11 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r11.<java.io.Writer: void write(char[])>(r10);

        $r12 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $i3 = (int) c0;

        virtualinvoke $r12.<java.io.Writer: void write(int)>($i3);

        if r13 == null goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r13, 0);

        if r16 == null goto label1;

        $r17 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $i4 = (int) c1;

        virtualinvoke $r17.<java.io.Writer: void write(int)>($i4);

        $r18 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r18.<java.io.Writer: void write(char[])>(r16);

        $r19 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $i5 = (int) c1;

        virtualinvoke $r19.<java.io.Writer: void write(int)>($i5);

     label1:
        if r14 == null goto label2;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r14, 1);

     label2:
        $r15 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r15.<java.io.Writer: void write(int)>(62);

        return;
    }

    public void printAttlistStart(char[], char[]) throws java.io.IOException
    {
        java.io.Writer $r1, $r4;
        char[] r2, r3;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: char[];

        r3 := @parameter1: char[];

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("<!ATTLIST");

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r2, 0);

        $r4 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(char[])>(r3);

        return;
    }

    public void printAttlistEnd(char[]) throws java.io.IOException
    {
        java.io.Writer $r2;
        char[] r0;
        org.apache.batik.transcoder.svg2svg.OutputManager r1;

        r1 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: char[];

        if r0 == null goto label1;

        virtualinvoke r1.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r0, 0);

     label1:
        $r2 = r1.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(int)>(62);

        return;
    }

    public void printAttName(char[], char[], char[]) throws java.io.IOException
    {
        java.io.Writer $r3;
        char[] r1, r2, r4;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        r4 := @parameter2: char[];

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r1, 0);

        $r3 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(char[])>(r2);

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>(r4, 0);

        return;
    }

    public void printEnumeration(java.util.List) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo r20, r21;
        org.apache.batik.transcoder.svg2svg.OutputManager r0;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.List r2;
        java.io.Writer $r1, $r7, $r9, $r13, $r17;
        char[] $r5, $r6, $r8, $r11, $r12, $r14, $r15, $r16, $r18, $r19;
        java.lang.Object $r4, $r10;

        r0 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r2 := @parameter0: java.util.List;

        $r1 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(40);

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo) $r4;

        $r5 = r20.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space1>;

        if $r5 == null goto label1;

        $r19 = r20.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space1>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r19, 1);

     label1:
        $r7 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $r6 = r20.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] name>;

        virtualinvoke $r7.<java.io.Writer: void write(char[])>($r6);

        $r8 = r20.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space2>;

        if $r8 == null goto label4;

        $r18 = r20.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space2>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r18, 1);

        goto label4;

     label2:
        $r9 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r9.<java.io.Writer: void write(int)>(124);

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo) $r10;

        $r11 = r21.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space1>;

        if $r11 == null goto label3;

        $r16 = r21.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space1>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r16, 1);

     label3:
        $r13 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        $r12 = r21.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] name>;

        virtualinvoke $r13.<java.io.Writer: void write(char[])>($r12);

        $r14 = r21.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space2>;

        if $r14 == null goto label4;

        $r15 = r21.<org.apache.batik.transcoder.svg2svg.OutputManager$NameInfo: char[] space2>;

        virtualinvoke r0.<org.apache.batik.transcoder.svg2svg.OutputManager: void printSpaces(char[],boolean)>($r15, 1);

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r17 = r0.<org.apache.batik.transcoder.svg2svg.OutputManager: java.io.Writer writer>;

        virtualinvoke $r17.<java.io.Writer: void write(int)>(41);

        return;
    }

    protected int newlines(char[])
    {
        int i1, i2, $i3, $i4;
        char[] r0;
        char $c0;
        org.apache.batik.transcoder.svg2svg.OutputManager r1;

        r1 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: char[];

        i1 = 0;

        i2 = 0;

        goto label3;

     label1:
        $c0 = r0[i2];

        $i4 = (int) $c0;

        if $i4 != 10 goto label2;

        i1 = i1 + 1;

     label2:
        i2 = i2 + 1;

     label3:
        $i3 = lengthof r0;

        if i2 < $i3 goto label1;

        return i1;
    }

    protected boolean isWhiteSpace(char[])
    {
        int $i0, i2;
        char[] r0;
        char $c1;
        org.apache.batik.transcoder.svg2svg.OutputManager r1;
        boolean $z0;

        r1 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: char[];

        i2 = 0;

        goto label3;

     label1:
        $c1 = r0[i2];

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

     label3:
        $i0 = lengthof r0;

        if i2 < $i0 goto label1;

        return 1;
    }

    protected boolean formatText(char[], java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.batik.transcoder.svg2svg.PrettyPrinter $r3, $r5;
        org.apache.batik.transcoder.svg2svg.OutputManager r2;
        boolean z0, $z1, $z2, z3;
        java.lang.StringBuffer $r1;
        int $i0, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, i21, $i22;
        java.lang.String r4, $r6;
        char $c1, $c18, $c20;
        char[] r0;

        r2 := @this: org.apache.batik.transcoder.svg2svg.OutputManager;

        r0 := @parameter0: char[];

        r4 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i21 = 0;

        z3 = z0;

        goto label12;

     label01:
        $i0 = lengthof r0;

        if i21 < $i0 goto label02;

        goto label13;

     label02:
        $c1 = r0[i21];

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c1);

        if $z1 != 0 goto label03;

        goto label04;

     label03:
        z3 = 1;

        i21 = i21 + 1;

        goto label01;

     label04:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        goto label05;

     label05:
        $i2 = lengthof r0;

        if i21 >= $i2 goto label07;

        $c18 = r0[i21];

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c18);

        if $z2 == 0 goto label06;

        goto label07;

     label06:
        $i19 = i21;

        i21 = i21 + 1;

        $c20 = r0[$i19];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c20);

        goto label05;

     label07:
        $i3 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        if $i3 != 0 goto label08;

        return z3;

     label08:
        if z3 == 0 goto label11;

        $i4 = r2.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i5 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        i6 = $i4 + $i5;

        $r3 = r2.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i7 = virtualinvoke $r3.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        $i8 = $i7 - 1;

        if i6 < $i8 goto label10;

        $i11 = virtualinvoke r4.<java.lang.String: int length()>();

        $i12 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        $i13 = $i11 + $i12;

        $r5 = r2.<org.apache.batik.transcoder.svg2svg.OutputManager: org.apache.batik.transcoder.svg2svg.PrettyPrinter prettyPrinter>;

        $i14 = virtualinvoke $r5.<org.apache.batik.transcoder.svg2svg.PrettyPrinter: int getDocumentWidth()>();

        $i15 = $i14 - 1;

        if $i13 < $i15 goto label09;

        $i16 = virtualinvoke r4.<java.lang.String: int length()>();

        $i17 = r2.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        if $i16 >= $i17 goto label10;

     label09:
        virtualinvoke r2.<org.apache.batik.transcoder.svg2svg.OutputManager: void printNewline()>();

        virtualinvoke r2.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>(r4);

        goto label11;

     label10:
        $i9 = r2.<org.apache.batik.transcoder.svg2svg.OutputManager: int column>;

        $i10 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i9 <= $i10 goto label11;

        virtualinvoke r2.<org.apache.batik.transcoder.svg2svg.OutputManager: void printCharacter(char)>(32);

     label11:
        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.batik.transcoder.svg2svg.OutputManager: void printString(java.lang.String)>($r6);

        z3 = 0;

     label12:
        $i22 = lengthof r0;

        if i21 < $i22 goto label01;

     label13:
        return z3;
    }
}
