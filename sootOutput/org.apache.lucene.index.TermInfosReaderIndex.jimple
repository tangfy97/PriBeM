class org.apache.lucene.index.TermInfosReaderIndex extends java.lang.Object
{
    private static final int MAX_PAGE_BITS;
    private org.apache.lucene.index.Term[] fields;
    private int totalIndexInterval;
    private java.util.Comparator comparator;
    private final org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput;
    private final org.apache.lucene.util.packed.PackedInts$Reader indexToDataOffset;
    private final int indexSize;
    private final int skipInterval;

    void <init>(org.apache.lucene.index.SegmentTermEnum, int, long, int) throws java.io.IOException
    {
        org.apache.lucene.index.Term $r15, $r23;
        org.apache.lucene.index.Term[] $r7, $r8, $r12;
        org.apache.lucene.util.packed.PackedInts$Mutable $r10;
        boolean $z0, $z1;
        org.apache.lucene.util.packed.GrowableWriter $r21;
        org.apache.lucene.index.TermInfosReaderIndex r0;
        long $l1, l8, $l9, $l10, l11, $l16, $l20, $l21, $l22;
        org.apache.lucene.util.PagedBytes $r20;
        java.util.ArrayList $r22;
        org.apache.lucene.index.TermInfo $r17;
        int i0, $i2, i3, $i4, $i5, $i6, $i7, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i23, i24, i25, i26, i27, $i29;
        java.lang.String $r14, $r16, $r18, r19;
        org.apache.lucene.util.PagedBytes$PagedBytesDataOutput $r4;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput $r9;
        double $d0, $d1;
        org.apache.lucene.index.SegmentTermEnum r2;
        java.lang.Object $r13;
        java.util.Comparator $r1;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        r2 := @parameter0: org.apache.lucene.index.SegmentTermEnum;

        i3 := @parameter1: int;

        l8 := @parameter2: long;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.lucene.util.BytesRef: java.util.Comparator getUTF8SortedAsUTF16Comparator()>();

        r0.<org.apache.lucene.index.TermInfosReaderIndex: java.util.Comparator comparator> = $r1;

        r0.<org.apache.lucene.index.TermInfosReaderIndex: int totalIndexInterval> = i0;

        $l1 = r2.<org.apache.lucene.index.SegmentTermEnum: long size>;

        $i2 = (int) $l1;

        $i4 = $i2 - 1;

        $i5 = $i4 / i3;

        $i6 = 1 + $i5;

        r0.<org.apache.lucene.index.TermInfosReaderIndex: int indexSize> = $i6;

        $i7 = r2.<org.apache.lucene.index.SegmentTermEnum: int skipInterval>;

        r0.<org.apache.lucene.index.TermInfosReaderIndex: int skipInterval> = $i7;

        $d0 = (double) l8;

        $d1 = $d0 * 1.5;

        $l10 = (long) $d1;

        $l9 = (long) i3;

        l11 = $l10 / $l9;

        $r20 = new org.apache.lucene.util.PagedBytes;

        $i12 = staticinvoke <org.apache.lucene.index.TermInfosReaderIndex: int estimatePageBits(long)>(l11);

        specialinvoke $r20.<org.apache.lucene.util.PagedBytes: void <init>(int)>($i12);

        $r4 = virtualinvoke $r20.<org.apache.lucene.util.PagedBytes: org.apache.lucene.util.PagedBytes$PagedBytesDataOutput getDataOutput()>();

        $r21 = new org.apache.lucene.util.packed.GrowableWriter;

        $i13 = r0.<org.apache.lucene.index.TermInfosReaderIndex: int indexSize>;

        specialinvoke $r21.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,boolean)>(4, $i13, 0);

        r19 = null;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        $i29 = (int) -1;

        i24 = $i29;

        i25 = 0;

     label1:
        $z0 = virtualinvoke r2.<org.apache.lucene.index.SegmentTermEnum: boolean next()>();

        if $z0 == 0 goto label7;

        $r15 = virtualinvoke r2.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.Term term()>();

        $r16 = $r15.<org.apache.lucene.index.Term: java.lang.String field>;

        if r19 == $r16 goto label2;

        r19 = $r15.<org.apache.lucene.index.Term: java.lang.String field>;

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>(r19);

        i24 = i24 + 1;

     label2:
        $r17 = virtualinvoke r2.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo()>();

        $l16 = virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: long getPosition()>();

        virtualinvoke $r21.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>(i25, $l16);

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeVInt(int)>(i24);

        $r18 = virtualinvoke $r15.<org.apache.lucene.index.Term: java.lang.String text()>();

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeString(java.lang.String)>($r18);

        $i17 = $r17.<org.apache.lucene.index.TermInfo: int docFreq>;

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeVInt(int)>($i17);

        $i19 = $r17.<org.apache.lucene.index.TermInfo: int docFreq>;

        $i18 = r0.<org.apache.lucene.index.TermInfosReaderIndex: int skipInterval>;

        if $i19 < $i18 goto label3;

        $i23 = $r17.<org.apache.lucene.index.TermInfo: int skipOffset>;

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeVInt(int)>($i23);

     label3:
        $l20 = $r17.<org.apache.lucene.index.TermInfo: long freqPointer>;

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeVLong(long)>($l20);

        $l21 = $r17.<org.apache.lucene.index.TermInfo: long proxPointer>;

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeVLong(long)>($l21);

        $l22 = r2.<org.apache.lucene.index.SegmentTermEnum: long indexPointer>;

        virtualinvoke $r4.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void writeVLong(long)>($l22);

        i26 = 1;

     label4:
        if i26 >= i3 goto label6;

        $z1 = virtualinvoke r2.<org.apache.lucene.index.SegmentTermEnum: boolean next()>();

        if $z1 != 0 goto label5;

        goto label6;

     label5:
        i26 = i26 + 1;

        goto label4;

     label6:
        i25 = i25 + 1;

        goto label1;

     label7:
        $i14 = interfaceinvoke $r22.<java.util.List: int size()>();

        $r7 = newarray (org.apache.lucene.index.Term)[$i14];

        r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.index.Term[] fields> = $r7;

        i27 = 0;

     label8:
        $r8 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.index.Term[] fields>;

        $i15 = lengthof $r8;

        if i27 >= $i15 goto label9;

        $r12 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.index.Term[] fields>;

        $r23 = new org.apache.lucene.index.Term;

        $r13 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i27);

        $r14 = (java.lang.String) $r13;

        specialinvoke $r23.<org.apache.lucene.index.Term: void <init>(java.lang.String)>($r14);

        $r12[i27] = $r23;

        i27 = i27 + 1;

        goto label8;

     label9:
        virtualinvoke $r20.<org.apache.lucene.util.PagedBytes: org.apache.lucene.util.PagedBytes$Reader freeze(boolean)>(1);

        $r9 = virtualinvoke $r20.<org.apache.lucene.util.PagedBytes: org.apache.lucene.util.PagedBytes$PagedBytesDataInput getDataInput()>();

        r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput> = $r9;

        $r10 = virtualinvoke $r21.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable getMutable()>();

        r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.packed.PackedInts$Reader indexToDataOffset> = $r10;

        return;
    }

    private static int estimatePageBits(long)
    {
        int $i1, $i2, $i3, $i4;
        long l0;

        l0 := @parameter0: long;

        $i1 = staticinvoke <org.apache.lucene.util.BitUtil: int nlz(long)>(l0);

        $i2 = 64 - $i1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, 18);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 4);

        return $i4;
    }

    void seekEnum(org.apache.lucene.index.SegmentTermEnum, int) throws java.io.IOException
    {
        org.apache.lucene.index.Term r6, $r8;
        org.apache.lucene.index.TermInfosReaderIndex r0;
        long $l1, $l6, $l7, $l8, $l10, $l11, $l12, $l13;
        org.apache.lucene.index.TermInfo $r9;
        int i0, $i2, $i3, $i4, $i5, $i9, $i14;
        org.apache.lucene.index.Term[] $r5;
        java.lang.String $r7;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput $r1, r3;
        org.apache.lucene.index.SegmentTermEnum r10;
        org.apache.lucene.util.packed.PackedInts$Reader $r4;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        r10 := @parameter0: org.apache.lucene.index.SegmentTermEnum;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: java.lang.Object clone()>();

        r3 = (org.apache.lucene.util.PagedBytes$PagedBytesDataInput) $r2;

        $r4 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.packed.PackedInts$Reader indexToDataOffset>;

        $l1 = interfaceinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i0);

        virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: void setPosition(long)>($l1);

        $i2 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: int readVInt()>();

        $r5 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.index.Term[] fields>;

        r6 = $r5[$i2];

        $r7 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: java.lang.String readString()>();

        $r8 = virtualinvoke r6.<org.apache.lucene.index.Term: org.apache.lucene.index.Term createTerm(java.lang.String)>($r7);

        $r9 = new org.apache.lucene.index.TermInfo;

        specialinvoke $r9.<org.apache.lucene.index.TermInfo: void <init>()>();

        $i3 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: int readVInt()>();

        $r9.<org.apache.lucene.index.TermInfo: int docFreq> = $i3;

        $i5 = $r9.<org.apache.lucene.index.TermInfo: int docFreq>;

        $i4 = r0.<org.apache.lucene.index.TermInfosReaderIndex: int skipInterval>;

        if $i5 < $i4 goto label1;

        $i14 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: int readVInt()>();

        $r9.<org.apache.lucene.index.TermInfo: int skipOffset> = $i14;

        goto label2;

     label1:
        $r9.<org.apache.lucene.index.TermInfo: int skipOffset> = 0;

     label2:
        $l6 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: long readVLong()>();

        $r9.<org.apache.lucene.index.TermInfo: long freqPointer> = $l6;

        $l7 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: long readVLong()>();

        $r9.<org.apache.lucene.index.TermInfo: long proxPointer> = $l7;

        $l8 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: long readVLong()>();

        $l11 = (long) i0;

        $i9 = r0.<org.apache.lucene.index.TermInfosReaderIndex: int totalIndexInterval>;

        $l10 = (long) $i9;

        $l12 = $l11 * $l10;

        $l13 = $l12 - 1L;

        virtualinvoke r10.<org.apache.lucene.index.SegmentTermEnum: void seek(long,long,org.apache.lucene.index.Term,org.apache.lucene.index.TermInfo)>($l8, $l13, $r8, $r9);

        return;
    }

    int getIndexOffset(org.apache.lucene.index.Term, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.util.BytesRef $r4, r6;
        org.apache.lucene.index.Term r5;
        org.apache.lucene.index.TermInfosReaderIndex r0;
        int $i0, $i1, i2, $i3, i4, i5;
        java.lang.Object $r2;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput $r1, r3;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        r5 := @parameter0: org.apache.lucene.index.Term;

        r6 := @parameter1: org.apache.lucene.util.BytesRef;

        i4 = 0;

        $i0 = r0.<org.apache.lucene.index.TermInfosReaderIndex: int indexSize>;

        i5 = $i0 - 1;

        $r1 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: java.lang.Object clone()>();

        r3 = (org.apache.lucene.util.PagedBytes$PagedBytesDataInput) $r2;

        $r4 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r4.<org.apache.lucene.util.BytesRef: void <init>()>();

     label1:
        if i5 < i4 goto label5;

        $i1 = i4 + i5;

        i2 = $i1 >>> 1;

        $i3 = specialinvoke r0.<org.apache.lucene.index.TermInfosReaderIndex: int compareTo(org.apache.lucene.index.Term,org.apache.lucene.util.BytesRef,int,org.apache.lucene.util.PagedBytes$PagedBytesDataInput,org.apache.lucene.util.BytesRef)>(r5, r6, i2, r3, $r4);

        if $i3 >= 0 goto label2;

        i5 = i2 - 1;

        goto label4;

     label2:
        if $i3 <= 0 goto label3;

        i4 = i2 + 1;

        goto label4;

     label3:
        return i2;

     label4:
        goto label1;

     label5:
        return i5;
    }

    org.apache.lucene.index.Term getTerm(int) throws java.io.IOException
    {
        org.apache.lucene.index.Term r6, $r8;
        org.apache.lucene.index.TermInfosReaderIndex r0;
        long $l1;
        org.apache.lucene.util.packed.PackedInts$Reader $r4;
        int i0, $i2;
        java.lang.Object $r2;
        org.apache.lucene.index.Term[] $r5;
        java.lang.String $r7;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput $r1, r3;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: java.lang.Object clone()>();

        r3 = (org.apache.lucene.util.PagedBytes$PagedBytesDataInput) $r2;

        $r4 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.packed.PackedInts$Reader indexToDataOffset>;

        $l1 = interfaceinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i0);

        virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: void setPosition(long)>($l1);

        $i2 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: int readVInt()>();

        $r5 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.index.Term[] fields>;

        r6 = $r5[$i2];

        $r7 = virtualinvoke r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: java.lang.String readString()>();

        $r8 = virtualinvoke r6.<org.apache.lucene.index.Term: org.apache.lucene.index.Term createTerm(java.lang.String)>($r7);

        return $r8;
    }

    int length()
    {
        int $i0;
        org.apache.lucene.index.TermInfosReaderIndex r0;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        $i0 = r0.<org.apache.lucene.index.TermInfosReaderIndex: int indexSize>;

        return $i0;
    }

    int compareTo(org.apache.lucene.index.Term, org.apache.lucene.util.BytesRef, int) throws java.io.IOException
    {
        org.apache.lucene.util.BytesRef r2, $r5;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.index.TermInfosReaderIndex r0;
        int i0, $i1;
        java.lang.Object $r4;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput $r3, $r6;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        r1 := @parameter0: org.apache.lucene.index.Term;

        r2 := @parameter1: org.apache.lucene.util.BytesRef;

        i0 := @parameter2: int;

        $r3 = r0.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: java.lang.Object clone()>();

        $r6 = (org.apache.lucene.util.PagedBytes$PagedBytesDataInput) $r4;

        $r5 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r5.<org.apache.lucene.util.BytesRef: void <init>()>();

        $i1 = specialinvoke r0.<org.apache.lucene.index.TermInfosReaderIndex: int compareTo(org.apache.lucene.index.Term,org.apache.lucene.util.BytesRef,int,org.apache.lucene.util.PagedBytes$PagedBytesDataInput,org.apache.lucene.util.BytesRef)>(r1, r2, i0, $r6, $r5);

        return $i1;
    }

    private int compareTo(org.apache.lucene.index.Term, org.apache.lucene.util.BytesRef, int, org.apache.lucene.util.PagedBytes$PagedBytesDataInput, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        byte[] $r4;
        org.apache.lucene.util.BytesRef r3, r5;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.index.TermInfosReaderIndex r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Comparator $r6;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput r2;

        r0 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        r1 := @parameter0: org.apache.lucene.index.Term;

        r5 := @parameter1: org.apache.lucene.util.BytesRef;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.lucene.util.PagedBytes$PagedBytesDataInput;

        r3 := @parameter4: org.apache.lucene.util.BytesRef;

        $i1 = specialinvoke r0.<org.apache.lucene.index.TermInfosReaderIndex: int compareField(org.apache.lucene.index.Term,int,org.apache.lucene.util.PagedBytes$PagedBytesDataInput)>(r1, i0, r2);

        if $i1 != 0 goto label1;

        $i2 = virtualinvoke r2.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: int readVInt()>();

        r3.<org.apache.lucene.util.BytesRef: int length> = $i2;

        $i3 = r3.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke r3.<org.apache.lucene.util.BytesRef: void grow(int)>($i3);

        $r4 = r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i4 = r3.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke r2.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: void readBytes(byte[],int,int)>($r4, 0, $i4);

        $r6 = r0.<org.apache.lucene.index.TermInfosReaderIndex: java.util.Comparator comparator>;

        $i5 = interfaceinvoke $r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r3);

        return $i5;

     label1:
        return $i1;
    }

    private int compareField(org.apache.lucene.index.Term, int, org.apache.lucene.util.PagedBytes$PagedBytesDataInput) throws java.io.IOException
    {
        org.apache.lucene.index.Term r3, $r6;
        org.apache.lucene.index.TermInfosReaderIndex r1;
        long $l1;
        org.apache.lucene.util.packed.PackedInts$Reader $r2;
        int i0, $i2, $i3;
        java.lang.String $r4, $r7;
        org.apache.lucene.index.Term[] $r5;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput r0;

        r1 := @this: org.apache.lucene.index.TermInfosReaderIndex;

        r3 := @parameter0: org.apache.lucene.index.Term;

        i0 := @parameter1: int;

        r0 := @parameter2: org.apache.lucene.util.PagedBytes$PagedBytesDataInput;

        $r2 = r1.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.util.packed.PackedInts$Reader indexToDataOffset>;

        $l1 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i0);

        virtualinvoke r0.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: void setPosition(long)>($l1);

        $r4 = r3.<org.apache.lucene.index.Term: java.lang.String field>;

        $r5 = r1.<org.apache.lucene.index.TermInfosReaderIndex: org.apache.lucene.index.Term[] fields>;

        $i2 = virtualinvoke r0.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: int readVInt()>();

        $r6 = $r5[$i2];

        $r7 = $r6.<org.apache.lucene.index.Term: java.lang.String field>;

        $i3 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r7);

        return $i3;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.index.TermInfosReaderIndex: int MAX_PAGE_BITS> = 18;

        return;
    }
}
