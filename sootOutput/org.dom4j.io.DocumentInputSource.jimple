class org.dom4j.io.DocumentInputSource extends org.xml.sax.InputSource
{
    private org.dom4j.Document document;

    public void <init>()
    {
        org.dom4j.io.DocumentInputSource r0;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        specialinvoke r0.<org.xml.sax.InputSource: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.Document)
    {
        org.dom4j.io.DocumentInputSource r0;
        org.dom4j.Document r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        r1 := @parameter0: org.dom4j.Document;

        specialinvoke r0.<org.xml.sax.InputSource: void <init>()>();

        r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document> = r1;

        $r2 = interfaceinvoke r1.<org.dom4j.Document: java.lang.String getName()>();

        virtualinvoke r0.<org.dom4j.io.DocumentInputSource: void setSystemId(java.lang.String)>($r2);

        return;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.io.DocumentInputSource r0;
        org.dom4j.Document $r1;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        $r1 = r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document>;

        return $r1;
    }

    public void setDocument(org.dom4j.Document)
    {
        org.dom4j.io.DocumentInputSource r0;
        org.dom4j.Document r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        r1 := @parameter0: org.dom4j.Document;

        r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document> = r1;

        $r2 = interfaceinvoke r1.<org.dom4j.Document: java.lang.String getName()>();

        virtualinvoke r0.<org.dom4j.io.DocumentInputSource: void setSystemId(java.lang.String)>($r2);

        return;
    }

    public void setCharacterStream(java.io.Reader) throws java.lang.UnsupportedOperationException
    {
        java.lang.UnsupportedOperationException $r0;
        org.dom4j.io.DocumentInputSource r1;
        java.io.Reader r2;

        r1 := @this: org.dom4j.io.DocumentInputSource;

        r2 := @parameter0: java.io.Reader;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.io.Reader getCharacterStream()
    {
        org.dom4j.Document $r3;
        java.io.StringWriter $r0;
        org.dom4j.io.XMLWriter $r1;
        java.io.IOException $r6;
        org.dom4j.io.DocumentInputSource$1 $r7;
        java.io.StringReader $r4;
        org.dom4j.io.DocumentInputSource r2;
        java.lang.String $r5;

        r2 := @this: org.dom4j.io.DocumentInputSource;

     label1:
        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new org.dom4j.io.XMLWriter;

        specialinvoke $r1.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer)>($r0);

        $r3 = r2.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document>;

        virtualinvoke $r1.<org.dom4j.io.XMLWriter: void write(org.dom4j.Document)>($r3);

        virtualinvoke $r1.<org.dom4j.io.XMLWriter: void flush()>();

        $r4 = new java.io.StringReader;

        $r5 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>($r5);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.dom4j.io.DocumentInputSource$1;

        specialinvoke $r7.<org.dom4j.io.DocumentInputSource$1: void <init>(org.dom4j.io.DocumentInputSource,java.io.IOException)>(r2, $r6);

        return $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
