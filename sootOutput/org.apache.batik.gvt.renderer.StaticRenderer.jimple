public class org.apache.batik.gvt.renderer.StaticRenderer extends java.lang.Object implements org.apache.batik.gvt.renderer.ImageRenderer
{
    protected org.apache.batik.gvt.GraphicsNode rootGN;
    protected org.apache.batik.ext.awt.image.renderable.Filter rootFilter;
    protected org.apache.batik.ext.awt.image.rendered.CachableRed rootCR;
    protected java.lang.ref.SoftReference lastCR;
    protected java.lang.ref.SoftReference lastCache;
    protected boolean isDoubleBuffered;
    protected java.awt.image.WritableRaster currentBaseRaster;
    protected java.awt.image.WritableRaster currentRaster;
    protected java.awt.image.BufferedImage currentOffScreen;
    protected java.awt.image.WritableRaster workingBaseRaster;
    protected java.awt.image.WritableRaster workingRaster;
    protected java.awt.image.BufferedImage workingOffScreen;
    protected int offScreenWidth;
    protected int offScreenHeight;
    protected java.awt.RenderingHints renderingHints;
    protected java.awt.geom.AffineTransform usr2dev;
    protected static java.awt.RenderingHints defaultRenderingHints;

    public void <init>(java.awt.RenderingHints, java.awt.geom.AffineTransform)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.RenderingHints $r1, r2, $r3;
        java.awt.geom.AffineTransform $r4, r5;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r2 := @parameter0: java.awt.RenderingHints;

        r5 := @parameter1: java.awt.geom.AffineTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered> = 0;

        $r1 = new java.awt.RenderingHints;

        specialinvoke $r1.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints> = $r1;

        $r3 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints>;

        virtualinvoke $r3.<java.awt.RenderingHints: void add(java.awt.RenderingHints)>(r2);

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r5);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev> = $r4;

        return;
    }

    public void <init>()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.RenderingHints $r1, $r2, $r3;
        java.awt.geom.AffineTransform $r4;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered> = 0;

        $r1 = new java.awt.RenderingHints;

        specialinvoke $r1.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints> = $r1;

        $r3 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints>;

        $r2 = <org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints defaultRenderingHints>;

        virtualinvoke $r3.<java.awt.RenderingHints: void add(java.awt.RenderingHints)>($r2);

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev> = $r4;

        return;
    }

    public void dispose()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.gvt.GraphicsNode rootGN> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.renderable.Filter rootFilter> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCR> = null;

        return;
    }

    public void setTree(org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        org.apache.batik.gvt.GraphicsNode r1;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.gvt.GraphicsNode rootGN> = r1;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.renderable.Filter rootFilter> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = null;

        return;
    }

    public org.apache.batik.gvt.GraphicsNode getTree()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.gvt.GraphicsNode rootGN>;

        return $r1;
    }

    public void setRenderingHints(java.awt.RenderingHints)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.RenderingHints $r1, r2, $r3;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r2 := @parameter0: java.awt.RenderingHints;

        $r1 = new java.awt.RenderingHints;

        specialinvoke $r1.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints> = $r1;

        $r3 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints>;

        virtualinvoke $r3.<java.awt.RenderingHints: void add(java.awt.RenderingHints)>(r2);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.renderable.Filter rootFilter> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = null;

        return;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        java.awt.RenderingHints $r1;
        org.apache.batik.gvt.renderer.StaticRenderer r0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints>;

        return $r1;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.geom.AffineTransform r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev>;

        $z0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev> = $r4;

        goto label3;

     label2:
        $r3 = new java.awt.geom.AffineTransform;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r1);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev> = $r3;

     label3:
        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR> = null;

        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.gvt.renderer.StaticRenderer r0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev>;

        return $r1;
    }

    public boolean isDoubleBuffered()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $z0 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered>;

        return $z0;
    }

    public void setDoubleBuffered(boolean)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.image.BufferedImage $r1;
        java.awt.image.WritableRaster $r2, $r3;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered> = z0;

        if z0 == 0 goto label2;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = null;

        goto label3;

     label2:
        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen>;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = $r1;

        $r2 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster> = $r2;

        $r3 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster>;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = $r3;

     label3:
        return;
    }

    public void updateOffScreen(int, int)
    {
        int i0, i1;
        org.apache.batik.gvt.renderer.StaticRenderer r0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: int offScreenWidth> = i0;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: int offScreenHeight> = i1;

        return;
    }

    public java.awt.image.BufferedImage getOffScreen()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.image.BufferedImage $r2;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.gvt.GraphicsNode rootGN>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen>;

        return $r2;
    }

    public void clearOffScreen()
    {
        java.lang.Throwable $r10;
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.image.BufferedImage $r6;
        java.awt.AlphaComposite $r9;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1, $r3;
        java.awt.image.ColorModel $r4;
        java.awt.Graphics2D $r8;
        int $i0, $i1;
        java.awt.image.WritableRaster $r2, r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $z0 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.batik.gvt.renderer.StaticRenderer: void updateWorkingBuffers()>();

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        if $r2 != null goto label3;

     label2:
        return;

     label3:
        $r3 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $r4 = interfaceinvoke $r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r5 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        entermonitor r5;

     label4:
        $r6 = new java.awt.image.BufferedImage;

        $r7 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        $z1 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r4, $r7, $z1, null);

        $r8 = virtualinvoke $r6.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r9 = <java.awt.AlphaComposite: java.awt.AlphaComposite Clear>;

        virtualinvoke $r8.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r9);

        $i0 = virtualinvoke $r6.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke $r6.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r8.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke $r8.<java.awt.Graphics: void dispose()>();

        exitmonitor r5;

        goto label6;

     label5:
        $r10 := @caughtexception;

        exitmonitor r5;

        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void repaint(java.awt.Shape)
    {
        java.awt.Shape r0, $r4;
        java.awt.Rectangle $r5;
        org.apache.batik.gvt.renderer.StaticRenderer r2;
        org.apache.batik.ext.awt.geom.RectListManager $r1;
        java.awt.geom.AffineTransform $r3;

        r2 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r0 := @parameter0: java.awt.Shape;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new org.apache.batik.ext.awt.geom.RectListManager;

        specialinvoke $r1.<org.apache.batik.ext.awt.geom.RectListManager: void <init>()>();

        $r3 = r2.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev>;

        $r4 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r0);

        $r5 = interfaceinvoke $r4.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        virtualinvoke $r1.<org.apache.batik.ext.awt.geom.RectListManager: void add(java.awt.Rectangle)>($r5);

        virtualinvoke r2.<org.apache.batik.gvt.renderer.StaticRenderer: void repaint(org.apache.batik.ext.awt.geom.RectListManager)>($r1);

        return;
    }

    public void repaint(org.apache.batik.ext.awt.geom.RectListManager)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r1;
        org.apache.batik.ext.awt.geom.RectListManager r0;
        boolean $z0;
        java.awt.image.BufferedImage $r12, r17;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r2, $r6, r14;
        java.lang.Throwable $r13;
        java.awt.Rectangle $r7, $r9;
        org.apache.batik.ext.awt.image.rendered.PadRed $r15;
        org.apache.batik.ext.awt.image.PadMode $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.awt.image.WritableRaster $r3, r4, r5, $r8, $r10, $r11;

        r1 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r0 := @parameter0: org.apache.batik.ext.awt.geom.RectListManager;

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<org.apache.batik.gvt.renderer.StaticRenderer: void updateWorkingBuffers()>();

        $r2 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        if $r2 == null goto label2;

        $r3 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        if $r3 != null goto label3;

     label2:
        return;

     label3:
        r14 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        r4 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        r5 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster>;

        $r6 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $r7 = interfaceinvoke $r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r8 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster>;

        $r9 = virtualinvoke $r8.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $i1 = $r9.<java.awt.Rectangle: int x>;

        $i0 = $r7.<java.awt.Rectangle: int x>;

        if $i1 < $i0 goto label4;

        $i3 = $r9.<java.awt.Rectangle: int y>;

        $i2 = $r7.<java.awt.Rectangle: int y>;

        if $i3 < $i2 goto label4;

        $i5 = $r9.<java.awt.Rectangle: int x>;

        $i4 = $r9.<java.awt.Rectangle: int width>;

        $i9 = $i5 + $i4;

        $i7 = $r7.<java.awt.Rectangle: int x>;

        $i6 = $r7.<java.awt.Rectangle: int width>;

        $i8 = $i7 + $i6;

        if $i9 > $i8 goto label4;

        $i11 = $r9.<java.awt.Rectangle: int y>;

        $i10 = $r9.<java.awt.Rectangle: int height>;

        $i15 = $i11 + $i10;

        $i13 = $r7.<java.awt.Rectangle: int y>;

        $i12 = $r7.<java.awt.Rectangle: int height>;

        $i14 = $i13 + $i12;

        if $i15 <= $i14 goto label5;

     label4:
        $r15 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r16 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r15.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>(r14, $r9, $r16, null);

        r14 = $r15;

     label5:
        entermonitor r4;

     label6:
        interfaceinvoke r14.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r5);

        exitmonitor r4;

        goto label8;

     label7:
        $r13 := @caughtexception;

        exitmonitor r4;

        throw $r13;

     label8:
        $z0 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted()>();

        if $z0 != 0 goto label9;

        r17 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen>;

        $r10 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster>;

        r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster> = $r10;

        $r11 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster>;

        r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster> = $r11;

        $r12 = r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen>;

        r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen> = $r12;

        r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = r5;

        r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster> = r4;

        r1.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = r17;

     label9:
        return;

        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void flush()
    {
        java.awt.Rectangle $r5;
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.lang.Object $r3;
        java.lang.ref.SoftReference $r1, $r2;
        org.apache.batik.ext.awt.image.rendered.TileCacheRed r4;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache>;

        $r3 = virtualinvoke $r2.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r3 != null goto label2;

        return;

     label2:
        r4 = (org.apache.batik.ext.awt.image.rendered.TileCacheRed) $r3;

        $r5 = virtualinvoke r4.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle getBounds()>();

        virtualinvoke r4.<org.apache.batik.ext.awt.image.rendered.TileCacheRed: void flushCache(java.awt.Rectangle)>($r5);

        return;
    }

    public void flush(java.util.Collection)
    {
        java.awt.Shape r5, $r6;
        java.awt.Rectangle $r7;
        java.util.Iterator $r3;
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.util.Collection r2;
        java.awt.geom.AffineTransform $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform getTransform()>();

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.Shape) $r4;

        $r6 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r5);

        $r7 = interfaceinvoke $r6.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        virtualinvoke r0.<org.apache.batik.gvt.renderer.StaticRenderer: void flush(java.awt.Rectangle)>($r7);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void flush(java.awt.Rectangle)
    {
        java.awt.Rectangle r8, r9;
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.ref.SoftReference $r1, $r2;
        double $d0, $d1;
        java.awt.geom.AffineTransform $r6, $r7;
        float $f0, $f1;
        java.lang.Object $r3, $r5;
        org.apache.batik.ext.awt.image.rendered.TileCacheRed r4;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r8 := @parameter0: java.awt.Rectangle;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache>;

        $r3 = virtualinvoke $r2.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r3 != null goto label2;

        return;

     label2:
        r4 = (org.apache.batik.ext.awt.image.rendered.TileCacheRed) $r3;

        $r5 = virtualinvoke r8.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r9 = (java.awt.Rectangle) $r5;

        $i0 = r9.<java.awt.Rectangle: int x>;

        $r6 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev>;

        $d0 = virtualinvoke $r6.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i2 = $i0 - $i1;

        r9.<java.awt.Rectangle: int x> = $i2;

        $i3 = r9.<java.awt.Rectangle: int y>;

        $r7 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev>;

        $d1 = virtualinvoke $r7.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f1 = (float) $d1;

        $i4 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i5 = $i3 - $i4;

        r9.<java.awt.Rectangle: int y> = $i5;

        virtualinvoke r4.<org.apache.batik.ext.awt.image.rendered.TileCacheRed: void flushCache(java.awt.Rectangle)>(r9);

        return;
    }

    protected org.apache.batik.ext.awt.image.rendered.CachableRed setupCache(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r5, r9;
        java.lang.Object $r8, r10;
        java.lang.ref.SoftReference $r1, $r2, $r4, $r6, $r7, $r11;
        org.apache.batik.ext.awt.image.rendered.TileCacheRed $r3;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r9 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCR>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCR>;

        $r8 = virtualinvoke $r7.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if r9 == $r8 goto label2;

     label1:
        $r2 = new java.lang.ref.SoftReference;

        specialinvoke $r2.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r9);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCR> = $r2;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache> = null;

     label2:
        r10 = null;

        $r11 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache>;

        if $r11 == null goto label3;

        $r6 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache>;

        r10 = virtualinvoke $r6.<java.lang.ref.SoftReference: java.lang.Object get()>();

     label3:
        if r10 == null goto label4;

        $r5 = (org.apache.batik.ext.awt.image.rendered.CachableRed) r10;

        return $r5;

     label4:
        $r3 = new org.apache.batik.ext.awt.image.rendered.TileCacheRed;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.rendered.TileCacheRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r9);

        $r4 = new java.lang.ref.SoftReference;

        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r3);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.lang.ref.SoftReference lastCache> = $r4;

        return $r3;
    }

    protected org.apache.batik.ext.awt.image.rendered.CachableRed renderGNR()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.RenderingHints $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.awt.image.RenderedImage $r6;
        java.awt.geom.AffineTransform r1, $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r5;
        java.awt.image.renderable.RenderContext $r3;
        org.apache.batik.ext.awt.image.rendered.TranslateRed $r9;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r7, $r8, $r10;
        float $f0, $f1;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.geom.AffineTransform usr2dev>;

        $r2 = new java.awt.geom.AffineTransform;

        $d0 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getShearY()>();

        $d2 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, 0.0, 0.0);

        $r3 = new java.awt.image.renderable.RenderContext;

        $r4 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints renderingHints>;

        specialinvoke $r3.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r2, null, $r4);

        $r5 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.renderable.Filter rootFilter>;

        $r6 = interfaceinvoke $r5.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r3);

        if $r6 != null goto label1;

        return null;

     label1:
        $r7 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r6);

        $r8 = virtualinvoke r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed setupCache(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r7);

        $d4 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d4;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $d5 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f1 = (float) $d5;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $r9 = new org.apache.batik.ext.awt.image.rendered.TranslateRed;

        $i2 = interfaceinvoke $r8.<java.awt.image.RenderedImage: int getMinX()>();

        $i3 = $i2 + $i0;

        $i4 = interfaceinvoke $r8.<java.awt.image.RenderedImage: int getMinY()>();

        $i5 = $i4 + $i1;

        specialinvoke $r9.<org.apache.batik.ext.awt.image.rendered.TranslateRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,int,int)>($r8, $i3, $i5);

        $r10 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed convertTosRGB(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r9);

        return $r10;
    }

    protected void updateWorkingBuffers()
    {
        org.apache.batik.gvt.renderer.StaticRenderer r0;
        java.awt.Point $r24;
        java.awt.image.SampleModel $r5, $r23;
        boolean $z0, $z1;
        java.awt.image.BufferedImage $r9, $r16;
        org.apache.batik.gvt.GraphicsNode $r21;
        org.apache.batik.ext.awt.image.renderable.Filter $r1, $r22;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r2, $r3, $r4, $r10, $r14, $r26, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, $i26, $i27, $i28, $i29, i30, i31;
        java.awt.image.ColorModel $r11, $r15;
        java.awt.image.WritableRaster $r6, $r7, $r8, $r12, $r13, $r17, $r18, $r19, $r20, $r25;

        r0 := @this: org.apache.batik.gvt.renderer.StaticRenderer;

        $r1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.renderable.Filter rootFilter>;

        if $r1 != null goto label1;

        $r21 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.gvt.GraphicsNode rootGN>;

        $r22 = interfaceinvoke $r21.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.renderable.Filter rootFilter> = $r22;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR> = null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed renderGNR()>();

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR> = $r2;

        $r3 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        if $r3 != null goto label2;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster> = null;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = null;

        return;

     label2:
        $r4 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $r5 = interfaceinvoke $r4.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        i22 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: int offScreenWidth>;

        i23 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: int offScreenHeight>;

        $i0 = virtualinvoke $r5.<java.awt.image.SampleModel: int getWidth()>();

        $i1 = virtualinvoke $r5.<java.awt.image.SampleModel: int getHeight()>();

        $i2 = i22 + $i0;

        $i3 = $i2 - 1;

        $i4 = $i3 / $i0;

        $i5 = $i4 + 1;

        i24 = $i5 * $i0;

        $i6 = i23 + $i1;

        $i7 = $i6 - 1;

        $i8 = $i7 / $i1;

        $i9 = $i8 + 1;

        i25 = $i9 * $i1;

        $r6 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        if $r6 == null goto label3;

        $r19 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        $i20 = virtualinvoke $r19.<java.awt.image.Raster: int getWidth()>();

        if $i20 < i24 goto label3;

        $r20 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        $i21 = virtualinvoke $r20.<java.awt.image.Raster: int getHeight()>();

        if $i21 >= i25 goto label4;

     label3:
        $r23 = virtualinvoke $r5.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i24, i25);

        $r24 = new java.awt.Point;

        specialinvoke $r24.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r25 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r23, $r24);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster> = $r25;

     label4:
        $r26 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $i26 = interfaceinvoke $r26.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i27 = neg $i26;

        $r27 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $i28 = interfaceinvoke $r27.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        $i29 = neg $i28;

        if $i27 < 0 goto label5;

        i30 = $i27 / $i0;

        goto label6;

     label5:
        $i10 = $i27 - $i0;

        $i11 = $i10 + 1;

        i30 = $i11 / $i0;

     label6:
        if $i29 < 0 goto label7;

        i31 = $i29 / $i1;

        goto label8;

     label7:
        $i12 = $i29 - $i1;

        $i13 = $i12 + 1;

        i31 = $i13 / $i1;

     label8:
        $i14 = i30 * $i0;

        $i18 = $i14 - $i27;

        $i15 = i31 * $i1;

        $i19 = $i15 - $i29;

        $r7 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        $r8 = virtualinvoke $r7.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>(0, 0, i24, i25, $i18, $i19, null);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster> = $r8;

        $r9 = new java.awt.image.BufferedImage;

        $r10 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $r11 = interfaceinvoke $r10.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r12 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster>;

        $i17 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: int offScreenWidth>;

        $i16 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: int offScreenHeight>;

        $r13 = virtualinvoke $r12.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>(0, 0, $i17, $i16, 0, 0, null);

        $r14 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: org.apache.batik.ext.awt.image.rendered.CachableRed rootCR>;

        $r15 = interfaceinvoke $r14.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r15.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r9.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r11, $r13, $z0, null);

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen> = $r9;

        $z1 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: boolean isDoubleBuffered>;

        if $z1 != 0 goto label9;

        $r16 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage workingOffScreen>;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.BufferedImage currentOffScreen> = $r16;

        $r17 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingBaseRaster>;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentBaseRaster> = $r17;

        $r18 = r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster workingRaster>;

        r0.<org.apache.batik.gvt.renderer.StaticRenderer: java.awt.image.WritableRaster currentRaster> = $r18;

     label9:
        return;
    }

    static void <clinit>()
    {
        java.awt.RenderingHints$Key $r2, $r5;
        java.awt.RenderingHints $r0, $r3, $r6;
        java.lang.Object $r1, $r4;

        $r0 = new java.awt.RenderingHints;

        specialinvoke $r0.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        <org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints defaultRenderingHints> = $r0;

        $r3 = <org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints defaultRenderingHints>;

        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r1 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r6 = <org.apache.batik.gvt.renderer.StaticRenderer: java.awt.RenderingHints defaultRenderingHints>;

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r6.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        return;
    }
}
