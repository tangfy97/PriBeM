public class com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDistinct, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r3, $r10;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r7, $r14;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication r1;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r4, $r6, $r11, $r18;
        boolean $z0, $z1, $z2, $z3, z4;
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r2, $r13;
        java.util.Iterator $r9;
        com.hp.hpl.jena.query.SortCondition r17;
        java.util.List $r5, $r8, $r12, $r15;
        java.lang.Object $r16;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProject;

        if $z0 == 0 goto label4;

        r3 = (com.hp.hpl.jena.sparql.algebra.op.OpProject) r0;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = $r4 instanceof com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r7 = (com.hp.hpl.jena.sparql.algebra.op.OpOrder) $r6;

        z4 = 1;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r16 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.hp.hpl.jena.query.SortCondition) $r16;

        $z3 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication: boolean isValidSortCondition(com.hp.hpl.jena.query.SortCondition,java.util.List)>(r17, $r5);

        if $z3 != 0 goto label2;

        z4 = 0;

        goto label3;

     label2:
        goto label1;

     label3:
        if z4 == 0 goto label4;

        $r10 = new com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $r11 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r12 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.algebra.op.OpProject: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>($r11, $r12);

        $r13 = new com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.algebra.op.OpDistinct: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>($r10);

        $r14 = new com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r15 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>($r13, $r15);

        return $r14;

     label4:
        $r18 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDistinct,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r0);

        return $r18;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpReduced, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r3, $r10;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r7, $r14;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication r1;
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r2;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r4, $r6, $r11, $r13, $r18;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.Iterator $r9;
        com.hp.hpl.jena.query.SortCondition r17;
        java.util.List $r5, $r8, $r12, $r15;
        java.lang.Object $r16;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProject;

        if $z0 == 0 goto label4;

        r3 = (com.hp.hpl.jena.sparql.algebra.op.OpProject) r0;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = $r4 instanceof com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r7 = (com.hp.hpl.jena.sparql.algebra.op.OpOrder) $r6;

        z4 = 1;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r16 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.hp.hpl.jena.query.SortCondition) $r16;

        $z3 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication: boolean isValidSortCondition(com.hp.hpl.jena.query.SortCondition,java.util.List)>(r17, $r5);

        if $z3 != 0 goto label2;

        z4 = 0;

        goto label3;

     label2:
        goto label1;

     label3:
        if z4 == 0 goto label4;

        $r10 = new com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $r11 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r12 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.algebra.op.OpProject: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>($r11, $r12);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpReduced: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op)>($r10);

        $r14 = new com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r15 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>($r13, $r15);

        return $r14;

     label4:
        $r18 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpReduced,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r0);

        return $r18;
    }

    private boolean isValidSortCondition(com.hp.hpl.jena.query.SortCondition, java.util.List)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.query.SortCondition r0;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.core.Var r6, $r9;
        java.util.List r7;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication r10;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r2, $r8;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2, $z3;

        r10 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication;

        r0 := @parameter0: com.hp.hpl.jena.query.SortCondition;

        r7 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        $z3 = interfaceinvoke r7.<java.util.List: boolean contains(java.lang.Object)>($r9);

        return $z3;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: java.util.Set getVarsMentioned()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Var) $r5;

        $z2 = interfaceinvoke r7.<java.util.List: boolean contains(java.lang.Object)>(r6);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }
}
