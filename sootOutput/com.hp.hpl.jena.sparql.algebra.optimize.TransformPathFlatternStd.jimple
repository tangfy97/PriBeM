public class com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    static com.hp.hpl.jena.sparql.core.VarAlloc varAlloc;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.path.Path $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpPath r0;
        com.hp.hpl.jena.sparql.core.TriplePath $r1;
        com.hp.hpl.jena.graph.Node $r2, $r4;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd r6;
        com.hp.hpl.jena.sparql.algebra.Op $r5;

        r6 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.sparql.path.Path getPath()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r0, $r2, $r3, $r4);

        return $r5;
    }

    static com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.path.Path r3;
        com.hp.hpl.jena.sparql.algebra.op.OpPath r5;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform $r0;
        com.hp.hpl.jena.graph.Node r1, r2;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

        interfaceinvoke r3.<com.hp.hpl.jena.sparql.path.Path: void visit(com.hp.hpl.jena.sparql.path.PathVisitor)>($r0);

        $r4 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op getResult()>();

        if $r4 != null goto label2;

        if r5 != null goto label1;

        r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.op.OpPath make(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r1, r3, r2);

     label1:
        return r5;

     label2:
        return $r4;
    }

    static com.hp.hpl.jena.sparql.algebra.op.OpPath make(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.path.Path r2;
        com.hp.hpl.jena.sparql.algebra.op.OpPath $r4;
        com.hp.hpl.jena.sparql.core.TriplePath $r0;
        com.hp.hpl.jena.graph.Node r1, r3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.core.TriplePath;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $r4 = new com.hp.hpl.jena.sparql.algebra.op.OpPath;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpPath: void <init>(com.hp.hpl.jena.sparql.core.TriplePath)>($r0);

        return $r4;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r0;
    }

    static com.hp.hpl.jena.sparql.algebra.Op access$000(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }

    static com.hp.hpl.jena.sparql.algebra.Op access$100(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.core.VarAlloc $r0;

        $r0 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>("?Q");

        <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc> = $r0;

        return;
    }
}
