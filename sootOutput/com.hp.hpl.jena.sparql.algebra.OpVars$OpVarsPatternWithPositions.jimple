class com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    protected java.util.Set graphAcc;
    protected java.util.Set subjAcc;
    protected java.util.Set predAcc;
    protected java.util.Set objAcc;
    protected java.util.Set unknownAcc;
    final boolean visibleOnly;

    void <init>(java.util.Set, java.util.Set, java.util.Set, java.util.Set, java.util.Set, boolean)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set r1, r2, r3, r4, r5;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        r5 := @parameter4: java.util.Set;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set graphAcc> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set subjAcc> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set predAcc> = r3;

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set objAcc> = r4;

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set unknownAcc> = r5;

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: boolean visibleOnly> = z0;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void vars(com.hp.hpl.jena.sparql.core.BasicPattern)>($r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set $r2, $r5;
        com.hp.hpl.jena.sparql.core.TriplePath $r3, $r6;
        com.hp.hpl.jena.graph.Node $r4, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set subjAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r4);

        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set objAcc>;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r5, $r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        java.util.Set $r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set graphAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void vars(com.hp.hpl.jena.sparql.core.BasicPattern)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set $r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set graphAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set graphAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r0;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r2;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.algebra.Table $r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set unknownAcc>;

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVars()>();

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProject)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r2;
        java.util.Set $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        com.hp.hpl.jena.sparql.core.Var r5;
        java.util.List $r1;
        java.lang.Object $r4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $z0 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: boolean visibleOnly>;

        if $z0 == 0 goto label1;

        $r11 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set graphAcc>;

        specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void clear(java.util.Set,java.util.List)>($r11, $r1);

        $r12 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set subjAcc>;

        specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void clear(java.util.Set,java.util.List)>($r12, $r1);

        $r13 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set predAcc>;

        specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void clear(java.util.Set,java.util.List)>($r13, $r1);

        $r14 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set objAcc>;

        specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void clear(java.util.Set,java.util.List)>($r14, $r1);

     label1:
        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set graphAcc>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label3;

        $r7 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set subjAcc>;

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z2 != 0 goto label3;

        $r8 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set predAcc>;

        $z3 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z3 != 0 goto label3;

        $r9 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set objAcc>;

        $z4 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z4 != 0 goto label3;

        $r10 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set unknownAcc>;

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r10, r5);

     label3:
        goto label2;

     label4:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set unknownAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set unknownAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r3, $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Set $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set subjAcc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void addvars(java.util.Set,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r2, $r3);

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set objAcc>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void addvars(java.util.Set,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r4, $r5);

        return;
    }

    private void addvars(java.util.Set, com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r7;
        java.util.Set r5;
        com.hp.hpl.jena.graph.Node r4, $r6;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r7 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r5 := @parameter0: java.util.Set;

        r0 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r5, $r6);

        return;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Node) $r3;

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r5, r4);

        goto label2;

     label3:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProcedure)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r0;
        java.util.Collection $r3;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set unknownAcc>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Collection mentionedVars(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    private void vars(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r5;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.Set $r6, $r8, $r10;
        com.hp.hpl.jena.graph.Node $r7, $r9, $r11;
        com.hp.hpl.jena.graph.Triple r4;
        java.util.List $r1;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $r6 = r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set subjAcc>;

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r6, $r7);

        $r8 = r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set predAcc>;

        $r9 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r8, $r9);

        $r10 = r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: java.util.Set objAcc>;

        $r11 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r10, $r11);

        goto label1;

     label2:
        return;
    }

    private void clear(java.util.Set, java.util.List)
    {
        java.util.Iterator $r2, $r3;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions r7;
        java.util.Set r1;
        com.hp.hpl.jena.sparql.core.Var r8, r9;
        java.util.ArrayList $r0;
        java.util.List r6;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1, $z2;

        r7 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        r1 := @parameter0: java.util.Set;

        r6 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.sparql.core.Var) $r5;

        $z2 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r8);

        if $z2 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r9);

        goto label4;

     label5:
        return;
    }
}
