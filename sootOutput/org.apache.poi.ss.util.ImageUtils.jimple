public class org.apache.poi.ss.util.ImageUtils extends java.lang.Object
{
    private static final org.apache.poi.util.POILogger logger;
    public static final int PIXEL_DPI;

    public void <init>()
    {
        org.apache.poi.ss.util.ImageUtils r0;

        r0 := @this: org.apache.poi.ss.util.ImageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.Dimension getImageDimension(java.io.InputStream, int)
    {
        int[] $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        javax.imageio.ImageReader r5;
        java.util.Iterator $r3;
        java.awt.image.BufferedImage $r6;
        org.apache.poi.util.POILogger $r8, $r10;
        java.io.IOException $r9;
        javax.imageio.stream.ImageInputStream $r2;
        java.awt.Dimension $r0;
        java.lang.Object $r4;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r0 = new java.awt.Dimension;

        specialinvoke $r0.<java.awt.Dimension: void <init>()>();

        tableswitch(i0)
        {
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>(r1);

        $r3 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReaders(java.lang.Object)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.imageio.ImageReader) $r4;

        virtualinvoke r5.<javax.imageio.ImageReader: void setInput(java.lang.Object)>($r2);

        $r6 = virtualinvoke r5.<javax.imageio.ImageReader: java.awt.image.BufferedImage read(int)>(0);

        $r7 = staticinvoke <org.apache.poi.ss.util.ImageUtils: int[] getResolution(javax.imageio.ImageReader)>(r5);

        $i1 = $r7[0];

        if $i1 != 0 goto label2;

        $r7[0] = 96;

     label2:
        $i2 = $r7[1];

        if $i2 != 0 goto label3;

        $r7[1] = 96;

     label3:
        $i3 = virtualinvoke $r6.<java.awt.image.BufferedImage: int getWidth()>();

        $i5 = $i3 * 96;

        $i4 = $r7[0];

        $i6 = $i5 / $i4;

        $r0.<java.awt.Dimension: int width> = $i6;

        $i7 = virtualinvoke $r6.<java.awt.image.BufferedImage: int getHeight()>();

        $i9 = $i7 * 96;

        $i8 = $r7[1];

        $i10 = $i9 / $i8;

        $r0.<java.awt.Dimension: int height> = $i10;

        virtualinvoke r5.<javax.imageio.ImageReader: void dispose()>();

        interfaceinvoke $r2.<javax.imageio.stream.ImageInputStream: void close()>();

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        $r10 = <org.apache.poi.ss.util.ImageUtils: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r10.<org.apache.poi.util.POILogger: void log(int,java.lang.Throwable)>(5, $r9);

        goto label7;

     label6:
        $r8 = <org.apache.poi.ss.util.ImageUtils: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r8.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, "Only JPEG, PNG and DIB pictures can be automatically sized");

     label7:
        return $r0;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public static int[] getResolution(javax.imageio.ImageReader) throws java.io.IOException
    {
        javax.imageio.metadata.IIOMetadata $r1;
        int[] $r12;
        org.w3c.dom.Node $r2, $r5, $r8;
        int $i0, $i1, i2, i3;
        java.lang.String $r7, $r10;
        double $d0, $d1, $d2, $d3;
        javax.imageio.ImageReader r0;
        org.w3c.dom.NodeList $r4, $r11;
        org.w3c.dom.Element r3, $r6, $r9;
        float $f0, $f1;

        r0 := @parameter0: javax.imageio.ImageReader;

        i2 = 96;

        i3 = 96;

        $r1 = virtualinvoke r0.<javax.imageio.ImageReader: javax.imageio.metadata.IIOMetadata getImageMetadata(int)>(0);

        $r2 = virtualinvoke $r1.<javax.imageio.metadata.IIOMetadata: org.w3c.dom.Node getAsTree(java.lang.String)>("javax_imageio_1.0");

        r3 = (org.w3c.dom.Element) $r2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("HorizontalPixelSize");

        if $r4 == null goto label1;

        $i1 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 != 1 goto label1;

        $r8 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r9 = (org.w3c.dom.Element) $r8;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r10);

        $d2 = (double) $f1;

        $d3 = 25.4 / $d2;

        i2 = (int) $d3;

     label1:
        $r11 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("VerticalPixelSize");

        if $r11 == null goto label2;

        $i0 = interfaceinvoke $r11.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 1 goto label2;

        $r5 = interfaceinvoke $r11.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r6 = (org.w3c.dom.Element) $r5;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r7);

        $d0 = (double) $f0;

        $d1 = 25.4 / $d0;

        i3 = (int) $d1;

     label2:
        $r12 = newarray (int)[2];

        $r12[0] = i2;

        $r12[1] = i3;

        return $r12;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        <org.apache.poi.ss.util.ImageUtils: int PIXEL_DPI> = 96;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/ss/util/ImageUtils;");

        <org.apache.poi.ss.util.ImageUtils: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
