public class com.hp.hpl.jena.rdf.model.impl.RDFListImpl extends com.hp.hpl.jena.rdf.model.impl.ResourceImpl implements com.hp.hpl.jena.rdf.model.RDFList
{
    public static com.hp.hpl.jena.enhanced.Implementation factory;
    protected static boolean s_checkValid;
    private static final org.slf4j.Logger log;
    protected java.lang.String m_errorMsg;
    protected com.hp.hpl.jena.rdf.model.RDFList m_tail;
    protected com.hp.hpl.jena.rdf.model.Property m_listFirst;
    protected com.hp.hpl.jena.rdf.model.Property m_listRest;
    protected com.hp.hpl.jena.rdf.model.Resource m_listNil;
    protected com.hp.hpl.jena.rdf.model.Resource m_listType;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.rdf.model.Property $r3, $r4;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.rdf.model.Resource $r5, $r6;
        com.hp.hpl.jena.enhanced.EnhGraph r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String m_errorMsg> = null;

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList m_tail> = null;

        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property m_listFirst> = $r3;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property m_listRest> = $r4;

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource m_listNil> = $r5;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource List>;

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource m_listType> = $r6;

        return;
    }

    public com.hp.hpl.jena.rdf.model.Resource listType()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource m_listType>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Resource listNil()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource m_listNil>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Property listFirst()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property m_listFirst>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Property listRest()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property m_listRest>;

        return $r1;
    }

    public java.lang.Class listAbstractionClass()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        return class "Lcom/hp/hpl/jena/rdf/model/RDFList;";
    }

    public int size()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        int i0;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        i0 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        i0 = i0 + 1;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        goto label2;

     label3:
        return i0;
    }

    public com.hp.hpl.jena.rdf.model.RDFNode getHead()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3;
        com.hp.hpl.jena.rdf.model.Property $r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Tried to get the head of an empty list");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.RDFNode setHead(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3, r5;
        com.hp.hpl.jena.rdf.model.Property $r1, $r4;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Tried to set the head of an empty list");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Statement remove()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, r5);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.RDFList getTail()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r6;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        com.hp.hpl.jena.rdf.model.Property $r1;
        java.lang.Class $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Tried to get the tail of an empty list");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.Class listAbstractionClass()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>($r4);

        $r6 = (com.hp.hpl.jena.rdf.model.RDFList) $r5;

        return $r6;
    }

    public com.hp.hpl.jena.rdf.model.RDFList setTail(com.hp.hpl.jena.rdf.model.RDFList)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList r1, $r6;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        com.hp.hpl.jena.rdf.model.Property $r2;
        java.lang.Class $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFList;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Tried to set the tail of an empty list");

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        $r3 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource setTailAux(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1, $r2);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.Class listAbstractionClass()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>($r4);

        $r6 = (com.hp.hpl.jena.rdf.model.RDFList) $r5;

        return $r6;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean equals(java.lang.Object)>($r1);

        return $z1;
    }

    public com.hp.hpl.jena.rdf.model.RDFList cons(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r1, $r4;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        java.lang.Class $r3;
        com.hp.hpl.jena.rdf.model.RDFList $r5;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource newListCell(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Resource)>(r1, r0);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.Class listAbstractionClass()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>($r3);

        $r5 = (com.hp.hpl.jena.rdf.model.RDFList) $r4;

        return $r5;
    }

    public void add(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1;
        com.hp.hpl.jena.rdf.model.EmptyListUpdateException $r6;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r4;
        com.hp.hpl.jena.rdf.model.Property $r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = new com.hp.hpl.jena.rdf.model.EmptyListUpdateException;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.model.EmptyListUpdateException: void <init>(java.lang.String)>("Attempt to add() to the empty list (rdf:nil)");

        throw $r6;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList findElement(boolean,int)>(1, 0);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource newListCell(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Resource)>(r2, $r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource setTailAux(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>($r1, $r4, $r5);

        return;
    }

    public com.hp.hpl.jena.rdf.model.RDFList 'with'(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1, $r6;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r4;
        com.hp.hpl.jena.rdf.model.Property $r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList cons(com.hp.hpl.jena.rdf.model.RDFNode)>(r2);

        return $r6;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList findElement(boolean,int)>(1, 0);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource newListCell(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Resource)>(r2, $r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource setTailAux(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>($r1, $r4, $r5);

        return r0;
    }

    public com.hp.hpl.jena.rdf.model.RDFNode get(int)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r2;
        int i0;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        i0 := @parameter0: int;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Tried to get an element from the empty list");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList findElement(boolean,int)>(0, i0);

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFNode getHead()>();

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.RDFNode replace(int, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r2, $r3;
        int i0;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Tried to replace a value in the empty list");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList findElement(boolean,int)>(0, i0);

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFNode setHead(com.hp.hpl.jena.rdf.model.RDFNode)>(r2);

        return $r3;
    }

    public boolean contains(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r1;
        int $i0;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: int indexOf(com.hp.hpl.jena.rdf.model.RDFNode,int)>(r1, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        int $i0;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFNode r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: int indexOf(com.hp.hpl.jena.rdf.model.RDFNode,int)>(r1, 0);

        return $i0;
    }

    public int indexOf(com.hp.hpl.jena.rdf.model.RDFNode, int)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1;
        com.hp.hpl.jena.rdf.model.Property $r2, $r3;
        int i0, i1, $i2, $i4;
        boolean $z0, $z1, z2;
        com.hp.hpl.jena.rdf.model.RDFNode r5;
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.rdf.model.Resource $r4, $r7, r8;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        i0 := @parameter1: int;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList findElement(boolean,int)>(0, i0);

        r8 = $r1;

        i1 = i0;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        z2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, r5);

     label2:
        if z2 != 0 goto label3;

        $z1 = interfaceinvoke r8.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        $r6 = interfaceinvoke r8.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r3);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        r8 = $r7;

        i1 = i1 + 1;

        z2 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, r5);

        goto label2;

     label3:
        if z2 == 0 goto label4;

        $i2 = i1;

        goto label5;

     label4:
        $i4 = (int) -1;

        $i2 = $i4;

     label5:
        return $i2;
    }

    public com.hp.hpl.jena.rdf.model.RDFList append(java.util.Iterator)
    {
        java.util.Iterator r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r2, $r3;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: java.util.Iterator;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList copy(java.util.Iterator)>(r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList append(com.hp.hpl.jena.rdf.model.RDFList)>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.RDFList append(com.hp.hpl.jena.rdf.model.RDFList)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r2, r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.RDFList;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return r3;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList copy(java.util.Iterator)>($r1);

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFList: void concatenate(com.hp.hpl.jena.rdf.model.RDFList)>(r3);

        return $r2;
    }

    public void concatenate(com.hp.hpl.jena.rdf.model.RDFList)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1, r2;
        com.hp.hpl.jena.rdf.model.EmptyListUpdateException $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFList;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r3 = new com.hp.hpl.jena.rdf.model.EmptyListUpdateException;

        specialinvoke $r3.<com.hp.hpl.jena.rdf.model.EmptyListUpdateException: void <init>(java.lang.String)>("Tried to concatenate onto the empty list");

        throw $r3;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList findElement(boolean,int)>(1, 0);

        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFList setTail(com.hp.hpl.jena.rdf.model.RDFList)>(r2);

        return;
    }

    public void concatenate(java.util.Iterator)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r2;
        java.util.Iterator r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: java.util.Iterator;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList copy(java.util.Iterator)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void concatenate(com.hp.hpl.jena.rdf.model.RDFList)>($r2);

        return;
    }

    public com.hp.hpl.jena.rdf.model.RDFList copy()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList copy(java.util.Iterator)>($r1);

        return $r2;
    }

    public void apply(com.hp.hpl.jena.rdf.model.RDFList$ApplyFn)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.rdf.model.RDFList$ApplyFn r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFList$ApplyFn;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.hp.hpl.jena.rdf.model.RDFNode) $r3;

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.RDFList$ApplyFn: void apply(com.hp.hpl.jena.rdf.model.RDFNode)>($r4);

        goto label2;

     label3:
        return;
    }

    public java.lang.Object reduce(com.hp.hpl.jena.rdf.model.RDFList$ReduceFn, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r1;
        com.hp.hpl.jena.rdf.model.RDFList$ReduceFn r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        java.lang.Object r0, $r4, r6;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.RDFList$ReduceFn;

        r0 := @parameter1: java.lang.Object;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        r6 = r0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.rdf.model.RDFNode) $r4;

        r6 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.RDFList$ReduceFn: java.lang.Object reduce(com.hp.hpl.jena.rdf.model.RDFNode,java.lang.Object)>($r5, r6);

        goto label2;

     label3:
        return r6;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1, $r3;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.util.iterator.Map1 r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.util.iterator.Map1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>(r2);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.RDFList removeHead()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkNotNil(java.lang.String)>("Attempted to delete the head of a nil list");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.RDFList getTail()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource removeProperties()>();

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.RDFList remove(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1, r2;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r3, r4, r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        r4 = null;

        r5 = r0;

     label2:
        if 1 == 0 goto label7;

        $z1 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: boolean isEmpty()>();

        if $z1 != 0 goto label7;

        $r1 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFNode getHead()>();

        $z2 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label6;

        $r3 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFList getTail()>();

        if r4 == null goto label3;

        interfaceinvoke r4.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFList setTail(com.hp.hpl.jena.rdf.model.RDFList)>($r3);

     label3:
        interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.Resource removeProperties()>();

        if r4 != null goto label4;

        $r6 = $r3;

        goto label5;

     label4:
        $r6 = r0;

     label5:
        return $r6;

     label6:
        r4 = r5;

        r5 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFList getTail()>();

        goto label2;

     label7:
        return r0;
    }

    public void removeAll()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void removeList()>();

        return;
    }

    public void removeList()
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        java.util.Set $r1;
        java.lang.Object $r3;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.util.Set collectStatements()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.hp.hpl.jena.rdf.model.Statement) $r3;

        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Statement remove()>();

        goto label1;

     label2:
        return;
    }

    public java.util.Set collectStatements()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r1;
        com.hp.hpl.jena.rdf.model.RDFList $r3, r5;
        java.util.HashSet $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r5 = r1;

     label1:
        $r2 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label2;

     label3:
        $r3 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFList getTail()>();

        r5 = $r3;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator $r0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator;

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator: void <init>(com.hp.hpl.jena.rdf.model.impl.RDFListImpl,com.hp.hpl.jena.rdf.model.RDFList)>(r1, r1);

        return $r0;
    }

    public java.util.List asJavaList()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r1;
        java.lang.Object $r3;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public boolean sameListAs(com.hp.hpl.jena.rdf.model.RDFList)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList r1;
        com.hp.hpl.jena.rdf.model.Property $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.rdf.model.RDFNode $r6, $r8;
        com.hp.hpl.jena.rdf.model.Statement $r5, $r7, $r9, $r10;
        com.hp.hpl.jena.rdf.model.Resource $r4, r11, r12;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFList;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label1:
        r11 = r0;

        r12 = r1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

     label2:
        $z5 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r4);

        if $z5 != 0 goto label5;

        $z3 = interfaceinvoke r12.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label5;

        $r5 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r2);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r7 = interfaceinvoke r12.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r2);

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        if $r6 == null goto label3;

        $z4 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z4 != 0 goto label4;

     label3:
        return 0;

     label4:
        $r9 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r3);

        r11 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r10 = interfaceinvoke r12.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r3);

        r12 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        goto label2;

     label5:
        $z1 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label6;

        $z2 = interfaceinvoke r12.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label6;

        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        return $z6;
    }

    public boolean getStrict()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $z0 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid>;

        return $z0;
    }

    public void setStrict(boolean)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        z0 := @parameter0: boolean;

        <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid> = z0;

        return;
    }

    public boolean isValid()
    {
        com.hp.hpl.jena.rdf.model.InvalidListException $r2;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String m_errorMsg> = null;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValid()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.InvalidListException: java.lang.String getMessage()>();

        r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String m_errorMsg> = $r3;

     label4:
        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String m_errorMsg>;

        if $r1 != null goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;

        catch com.hp.hpl.jena.rdf.model.InvalidListException from label1 to label2 with label3;
    }

    public java.lang.String getValidityErrorMessage()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String m_errorMsg>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Resource newListCell(com.hp.hpl.jena.rdf.model.RDFNode, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r4;
        com.hp.hpl.jena.rdf.model.Property $r3, $r5;
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r2, r6;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, r4);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, r6);

        return $r2;
    }

    protected void checkValid()
    {
        com.hp.hpl.jena.rdf.model.Property $r2, $r3;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValidProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, null);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void checkValidProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, null);

     label1:
        return;
    }

    private void checkValidProperty(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r4, $r34, $r36;
        com.hp.hpl.jena.rdf.model.Property r2;
        com.hp.hpl.jena.rdf.model.InvalidListException $r5, $r15;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r16, $r17, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r28, $r30, $r32, $r37, $r39, $r41, $r43, $r45, $r47;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        int i0;
        java.lang.String $r8, $r11, $r13, $r18, $r21, $r27, $r31, $r33, $r42, $r48, $r49;
        org.slf4j.Logger $r14, $r29, $r38, $r44;
        com.hp.hpl.jena.rdf.model.Model $r1, $r35;
        java.lang.Object $r40, $r46;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        i0 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r0, r2, r3);

     label01:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        i0 = i0 + 1;

        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        goto label01;

     label02:
        if i0 != 0 goto label09;

        $r14 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label06;

        $r29 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed validity check on ");

        $r31 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String toString()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r33);

        $r34 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label03:
        $z2 = interfaceinvoke $r34.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r44 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: org.slf4j.Logger log>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  this => ");

        $r46 = interfaceinvoke $r34.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void debug(java.lang.String)>($r48);

        goto label03;

     label04:
        $r35 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r36 = interfaceinvoke $r35.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, null, r0);

     label05:
        $z3 = interfaceinvoke $r36.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r38 = <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: org.slf4j.Logger log>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  => this ");

        $r40 = interfaceinvoke $r36.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String)>($r42);

        goto label05;

     label06:
        $r15 = new com.hp.hpl.jena.rdf.model.InvalidListException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("List node ");

        $r18 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid: it should have property ");

        $r21 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        if r3 != null goto label07;

        $r49 = "";

        goto label08;

     label07:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with value ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r49 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<com.hp.hpl.jena.rdf.model.InvalidListException: void <init>(java.lang.String)>($r27);

        throw $r15;

     label09:
        if i0 <= 1 goto label10;

        $r5 = new com.hp.hpl.jena.rdf.model.InvalidListException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("List node ");

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid: it has more than one value for ");

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.rdf.model.InvalidListException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label10:
        return;
    }

    protected void checkNotNil(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.EmptyListException $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r2 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = new com.hp.hpl.jena.rdf.model.EmptyListException;

        specialinvoke $r1.<com.hp.hpl.jena.rdf.model.EmptyListException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    protected com.hp.hpl.jena.rdf.model.RDFList findElement(boolean, int)
    {
        com.hp.hpl.jena.rdf.model.ListIndexException $r17;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r5;
        com.hp.hpl.jena.rdf.model.Property $r1;
        com.hp.hpl.jena.rdf.model.InvalidListException $r18;
        int i0, i1, $i3;
        java.lang.String $r12;
        boolean z0, $z1, $z2, $z3, $z4, z5, $z6;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.rdf.model.Statement $r13;
        com.hp.hpl.jena.rdf.model.Resource $r2, $r14, r15;
        java.lang.Class $r3;
        java.lang.StringBuilder $r9, $r10, $r11, $r16;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        r15 = r0;

        i1 = i0;

        if z0 == 0 goto label01;

        $z3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r1, $r2);

        if $z3 != 0 goto label02;

     label01:
        if z0 != 0 goto label03;

        if i0 != 0 goto label03;

     label02:
        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        z5 = $z4;

     label05:
        if z5 != 0 goto label10;

        $z1 = interfaceinvoke r15.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label10;

        $r13 = interfaceinvoke r15.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        r15 = $r14;

        if z0 == 0 goto label06;

        $z2 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r1, $r2);

        if $z2 != 0 goto label07;

     label06:
        if z0 != 0 goto label08;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 != 0 goto label08;

     label07:
        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        z5 = $z6;

        goto label05;

     label10:
        if z5 != 0 goto label12;

        if z0 != 0 goto label11;

        $r17 = new com.hp.hpl.jena.rdf.model.ListIndexException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to access element ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is beyond the length of the list");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.hp.hpl.jena.rdf.model.ListIndexException: void <init>(java.lang.String)>($r12);

        throw $r17;

     label11:
        $r18 = new com.hp.hpl.jena.rdf.model.InvalidListException;

        specialinvoke $r18.<com.hp.hpl.jena.rdf.model.InvalidListException: void <init>(java.lang.String)>("Could not find last element of list (suggests list is not valid)");

        throw $r18;

     label12:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.Class listAbstractionClass()>();

        $r4 = interfaceinvoke r15.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>($r3);

        $r5 = (com.hp.hpl.jena.rdf.model.RDFList) $r4;

        return $r5;
    }

    protected com.hp.hpl.jena.rdf.model.RDFList copy(java.util.Iterator)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl r0;
        com.hp.hpl.jena.rdf.model.RDFList $r8;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2;
        boolean $z0, $z1;
        java.util.Iterator r4;
        com.hp.hpl.jena.rdf.model.RDFNode $r7, $r13;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r9, $r11, r14, r15;
        com.hp.hpl.jena.rdf.model.Model $r5, $r10;
        java.lang.Class $r6;
        java.lang.Object $r12;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        r4 := @parameter0: java.util.Iterator;

        r14 = null;

        r15 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listFirst()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property listRest()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listType()>();

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.hp.hpl.jena.rdf.model.RDFNode) $r12;

        interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r1, $r13);

        if r14 == null goto label2;

        interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, $r11);

        goto label3;

     label2:
        r15 = $r11;

     label3:
        r14 = $r11;

        goto label1;

     label4:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource listNil()>();

        interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, $r9);

        goto label6;

     label5:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        r15 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFList createList()>();

     label6:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.lang.Class listAbstractionClass()>();

        $r7 = interfaceinvoke r15.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>($r6);

        $r8 = (com.hp.hpl.jena.rdf.model.RDFList) $r7;

        return $r8;
    }

    protected static com.hp.hpl.jena.rdf.model.Resource setTailAux(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r0, $r3, r4;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter2: com.hp.hpl.jena.rdf.model.Property;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Statement remove()>();

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r4);

        return $r3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1 $r0;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1;

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1: void <init>()>();

        <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.enhanced.Implementation factory> = $r0;

        <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: boolean s_checkValid> = 0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/impl/RDFListImpl;");

        <com.hp.hpl.jena.rdf.model.impl.RDFListImpl: org.slf4j.Logger log> = $r1;

        return;
    }
}
