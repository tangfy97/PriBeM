class org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair extends java.lang.Object
{
    final org.waveprotocol.wave.model.wave.ParticipantId creator;
    final org.waveprotocol.wave.model.wave.undo.AggregateOperation op;

    void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r1;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "op must be non-null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "creator must be non-null");

        r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.undo.AggregateOperation op> = r1;

        r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator> = r2;

        return;
    }
}
