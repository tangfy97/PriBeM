public class org.waveprotocol.box.server.persistence.memory.MemoryStore extends java.lang.Object implements org.waveprotocol.box.server.persistence.SignerInfoStore, org.waveprotocol.box.server.persistence.AccountStore
{
    private final org.waveprotocol.wave.crypto.CertPathStore certPathStore;
    private final java.util.Map accountStore;

    public void <init>()
    {
        org.waveprotocol.wave.crypto.DefaultCertPathStore $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.crypto.DefaultCertPathStore;

        specialinvoke $r1.<org.waveprotocol.wave.crypto.DefaultCertPathStore: void <init>()>();

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: java.util.Map accountStore> = $r2;

        return;
    }

    public void initializeSignerInfoStore() throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        return;
    }

    public org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[]) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] r1;
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;
        org.waveprotocol.wave.crypto.CertPathStore $r2;
        org.waveprotocol.wave.crypto.SignerInfo $r3;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.crypto.CertPathStore: org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[])>(r1);

        return $r3;
    }

    public void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r1;
        org.waveprotocol.wave.crypto.CertPathStore $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        interfaceinvoke $r2.<org.waveprotocol.wave.crypto.CertPathStore: void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r1);

        return;
    }

    public void initializeAccountStore()
    {
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        return;
    }

    public org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;
        java.util.Map $r2;
        org.waveprotocol.box.server.account.AccountData $r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: java.util.Map accountStore>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.box.server.account.AccountData) $r3;

        return $r4;
    }

    public void putAccount(org.waveprotocol.box.server.account.AccountData)
    {
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;
        java.util.Map $r2;
        org.waveprotocol.box.server.account.AccountData r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        r1 := @parameter0: org.waveprotocol.box.server.account.AccountData;

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: java.util.Map accountStore>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.wave.model.wave.ParticipantId getId()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public void removeAccount(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.box.server.persistence.memory.MemoryStore r0;
        java.util.Map $r2;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryStore: java.util.Map accountStore>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }
}
