class minalloy.IsomorphicSolutionBuilder$Permutations extends java.lang.Object
{
    final int[] atoms;
    final int[][] permutations;

    void <init>(kodkod.util.ints.IntSet)
    {
        int[][] $r6, $r8, $r14;
        kodkod.util.ints.IntIterator $r3;
        int[] $r2, $r4, $r5, $r7, $r10, $r11, r13, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0, $z1;
        kodkod.util.ints.IntSet r1;
        minalloy.IsomorphicSolutionBuilder$Permutations r0;
        java.lang.Object $r9, $r12, $r15;

        r0 := @this: minalloy.IsomorphicSolutionBuilder$Permutations;

        r1 := @parameter0: kodkod.util.ints.IntSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<kodkod.util.ints.IntSet: int size()>();

        $r2 = newarray (int)[$i0];

        r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms> = $r2;

        $r3 = interfaceinvoke r1.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        i6 = 0;

        goto label2;

     label1:
        $r4 = r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $i1 = i6;

        i6 = i6 + 1;

        $i2 = interfaceinvoke $r3.<kodkod.util.ints.IntIterator: int next()>();

        $r4[$i1] = $i2;

     label2:
        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $i3 = lengthof $r5;

        $i4 = staticinvoke <minalloy.IsomorphicSolutionBuilder$Permutations: int factorial(int)>($i3);

        $r6 = newarray (int[])[$i4];

        r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[][] permutations> = $r6;

        $r8 = r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[][] permutations>;

        $r7 = r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $r9 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (int[]) $r9;

        $r8[0] = $r10;

        $r11 = r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();

        r13 = (int[]) $r12;

        i7 = 1;

     label3:
        $z1 = staticinvoke <minalloy.IsomorphicSolutionBuilder$Permutations: boolean nextPermutation(int[])>(r13);

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        $r14 = r0.<minalloy.IsomorphicSolutionBuilder$Permutations: int[][] permutations>;

        $i5 = i7;

        i7 = i7 + 1;

        $r15 = virtualinvoke r13.<java.lang.Object: java.lang.Object clone()>();

        $r16 = (int[]) $r15;

        $r14[$i5] = $r16;

        goto label3;

     label5:
        return;
    }

    public static int factorial(int)
    {
        int i0, i1, i2;

        i0 := @parameter0: int;

        i1 = 1;

        i2 = 2;

        goto label2;

     label1:
        i1 = i1 * i2;

        i2 = i2 + 1;

     label2:
        if i2 <= i0 goto label1;

        return i1;
    }

    public static boolean nextPermutation(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, $i17, $i19, $i21, $i23;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        i10 = $i0 - 2;

        goto label2;

     label1:
        $i17 = (int) -1;

        i10 = i10 + $i17;

     label2:
        if i10 < 0 goto label3;

        $i9 = r0[i10];

        $i7 = i10 + 1;

        $i8 = r0[$i7];

        if $i9 >= $i8 goto label1;

     label3:
        $i19 = (int) -1;

        if i10 != $i19 goto label4;

        return 0;

     label4:
        $i1 = lengthof r0;

        i11 = $i1 - 1;

        goto label6;

     label5:
        $i21 = (int) -1;

        i11 = i11 + $i21;

     label6:
        $i3 = r0[i11];

        $i2 = r0[i10];

        if $i3 <= $i2 goto label5;

        i12 = r0[i10];

        $i4 = r0[i11];

        r0[i10] = $i4;

        r0[i11] = i12;

        i13 = i10 + 1;

        $i5 = lengthof r0;

        i14 = $i5 - 1;

        goto label8;

     label7:
        i15 = r0[i13];

        $i6 = r0[i14];

        r0[i13] = $i6;

        r0[i14] = i15;

        i13 = i13 + 1;

        $i23 = (int) -1;

        i14 = i14 + $i23;

     label8:
        if i13 < i14 goto label7;

        return 1;
    }
}
