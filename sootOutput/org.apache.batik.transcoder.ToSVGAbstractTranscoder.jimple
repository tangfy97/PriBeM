public abstract class org.apache.batik.transcoder.ToSVGAbstractTranscoder extends org.apache.batik.transcoder.AbstractTranscoder implements org.apache.batik.util.SVGConstants
{
    public static float PIXEL_TO_MILLIMETERS;
    public static float PIXEL_PER_INCH;
    public static final int TRANSCODER_ERROR_BASE;
    public static final int ERROR_NULL_INPUT;
    public static final int ERROR_INCOMPATIBLE_INPUT_TYPE;
    public static final int ERROR_INCOMPATIBLE_OUTPUT_TYPE;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_WIDTH;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_HEIGHT;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_INPUT_WIDTH;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_INPUT_HEIGHT;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_XOFFSET;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_YOFFSET;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_ESCAPED;
    protected org.apache.batik.svggen.SVGGraphics2D svgGenerator;

    public void <init>()
    {
        org.apache.batik.transcoder.ToSVGAbstractTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.ToSVGAbstractTranscoder;

        specialinvoke r0.<org.apache.batik.transcoder.AbstractTranscoder: void <init>()>();

        return;
    }

    protected org.w3c.dom.Document createDocument(org.apache.batik.transcoder.TranscoderOutput)
    {
        org.w3c.dom.Document $r1, r4;
        org.apache.batik.transcoder.ToSVGAbstractTranscoder r3;
        org.apache.batik.transcoder.TranscoderOutput r0;
        org.w3c.dom.DOMImplementation $r2;

        r3 := @this: org.apache.batik.transcoder.ToSVGAbstractTranscoder;

        r0 := @parameter0: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: org.w3c.dom.Document getDocument()>();

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        r4 = interfaceinvoke $r2.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>("http://www.w3.org/2000/svg", "svg", null);

        goto label2;

     label1:
        r4 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: org.w3c.dom.Document getDocument()>();

     label2:
        return r4;
    }

    public org.apache.batik.svggen.SVGGraphics2D getGraphics2D()
    {
        org.apache.batik.svggen.SVGGraphics2D $r1;
        org.apache.batik.transcoder.ToSVGAbstractTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.ToSVGAbstractTranscoder;

        $r1 = r0.<org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.svggen.SVGGraphics2D svgGenerator>;

        return $r1;
    }

    protected void writeSVGToOutput(org.apache.batik.svggen.SVGGraphics2D, org.w3c.dom.Element, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.net.URL $r10;
        org.w3c.dom.Document $r1;
        org.apache.batik.transcoder.TranscodingHints$Key $r4, $r17;
        boolean $z0, z1;
        org.apache.batik.transcoder.TranscodingHints $r5, $r18;
        org.apache.batik.transcoder.ToSVGAbstractTranscoder r3;
        java.io.Writer $r7;
        org.xml.sax.XMLFilter $r2;
        org.apache.batik.transcoder.ErrorHandler $r22, $r27, $r30;
        java.net.URLConnection $r11;
        java.io.OutputStreamWriter $r15, $r16;
        java.lang.Boolean $r20;
        java.lang.String $r8;
        org.apache.batik.svggen.SVGGraphics2D r13;
        java.io.OutputStream $r6, $r12;
        java.net.MalformedURLException $r28;
        org.apache.batik.transcoder.TranscoderOutput r0;
        java.io.IOException $r23, $r25;
        org.w3c.dom.Element r14;
        org.apache.batik.transcoder.TranscoderException $r9, $r21, $r24, $r26, $r29;
        java.lang.Object $r19;

        r3 := @this: org.apache.batik.transcoder.ToSVGAbstractTranscoder;

        r13 := @parameter0: org.apache.batik.svggen.SVGGraphics2D;

        r14 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: org.w3c.dom.Document getDocument()>();

        if $r1 == null goto label01;

        return;

     label01:
        $r2 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: org.xml.sax.XMLFilter getXMLFilter()>();

        if $r2 == null goto label02;

        $r22 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.ErrorHandler handler>;

        $r21 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r21.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>("65282");

        interfaceinvoke $r22.<org.apache.batik.transcoder.ErrorHandler: void fatalError(org.apache.batik.transcoder.TranscoderException)>($r21);

     label02:
        z1 = 0;

        $r5 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r4 = <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_ESCAPED>;

        $z0 = virtualinvoke $r5.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label03;

        $r18 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r17 = <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_ESCAPED>;

        $r19 = virtualinvoke $r18.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r17);

        $r20 = (java.lang.Boolean) $r19;

        z1 = virtualinvoke $r20.<java.lang.Boolean: boolean booleanValue()>();

     label03:
        $r6 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: java.io.OutputStream getOutputStream()>();

        if $r6 == null goto label04;

        $r16 = new java.io.OutputStreamWriter;

        specialinvoke $r16.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6);

        virtualinvoke r13.<org.apache.batik.svggen.SVGGraphics2D: void stream(org.w3c.dom.Element,java.io.Writer,boolean,boolean)>(r14, $r16, 0, z1);

        return;

     label04:
        $r7 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: java.io.Writer getWriter()>();

        if $r7 == null goto label05;

        virtualinvoke r13.<org.apache.batik.svggen.SVGGraphics2D: void stream(org.w3c.dom.Element,java.io.Writer,boolean,boolean)>(r14, $r7, 0, z1);

        return;

     label05:
        $r8 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: java.lang.String getURI()>();

        if $r8 == null goto label09;

     label06:
        $r10 = new java.net.URL;

        specialinvoke $r10.<java.net.URL: void <init>(java.lang.String)>($r8);

        $r11 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection()>();

        $r12 = virtualinvoke $r11.<java.net.URLConnection: java.io.OutputStream getOutputStream()>();

        $r15 = new java.io.OutputStreamWriter;

        specialinvoke $r15.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r12);

        virtualinvoke r13.<org.apache.batik.svggen.SVGGraphics2D: void stream(org.w3c.dom.Element,java.io.Writer,boolean,boolean)>(r14, $r15, 0, z1);

        return;

     label07:
        $r28 := @caughtexception;

        $r30 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.ErrorHandler handler>;

        $r29 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r29.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r28);

        interfaceinvoke $r30.<org.apache.batik.transcoder.ErrorHandler: void fatalError(org.apache.batik.transcoder.TranscoderException)>($r29);

        goto label09;

     label08:
        $r25 := @caughtexception;

        $r27 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.ErrorHandler handler>;

        $r26 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r26.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r25);

        interfaceinvoke $r27.<org.apache.batik.transcoder.ErrorHandler: void fatalError(org.apache.batik.transcoder.TranscoderException)>($r26);

     label09:
        goto label11;

     label10:
        $r23 := @caughtexception;

        $r24 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r24.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r23);

        throw $r24;

     label11:
        $r9 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r9.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>("65282");

        throw $r9;

        catch java.net.MalformedURLException from label06 to label07 with label07;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label02 to label09 with label10;
    }

    static void <clinit>()
    {
        org.apache.batik.transcoder.keys.FloatKey $r2, $r3;
        int $i0, $i1;
        float $f0, $f1, $f2;
        org.apache.batik.transcoder.keys.IntegerKey $r4, $r5, $r6, $r7;
        java.awt.Toolkit $r0, $r1;
        org.apache.batik.transcoder.keys.BooleanKey $r8;

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: int ERROR_INCOMPATIBLE_OUTPUT_TYPE> = 65282;

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: int ERROR_INCOMPATIBLE_INPUT_TYPE> = 65281;

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: int ERROR_NULL_INPUT> = 65280;

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: int TRANSCODER_ERROR_BASE> = 65280;

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $i0 = virtualinvoke $r0.<java.awt.Toolkit: int getScreenResolution()>();

        $f0 = (float) $i0;

        $f1 = 25.4F / $f0;

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: float PIXEL_TO_MILLIMETERS> = $f1;

        $r1 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $i1 = virtualinvoke $r1.<java.awt.Toolkit: int getScreenResolution()>();

        $f2 = (float) $i1;

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: float PIXEL_PER_INCH> = $f2;

        $r2 = new org.apache.batik.transcoder.keys.FloatKey;

        specialinvoke $r2.<org.apache.batik.transcoder.keys.FloatKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_WIDTH> = $r2;

        $r3 = new org.apache.batik.transcoder.keys.FloatKey;

        specialinvoke $r3.<org.apache.batik.transcoder.keys.FloatKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_HEIGHT> = $r3;

        $r4 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r4.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INPUT_WIDTH> = $r4;

        $r5 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r5.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INPUT_HEIGHT> = $r5;

        $r6 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r6.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_XOFFSET> = $r6;

        $r7 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r7.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_YOFFSET> = $r7;

        $r8 = new org.apache.batik.transcoder.keys.BooleanKey;

        specialinvoke $r8.<org.apache.batik.transcoder.keys.BooleanKey: void <init>()>();

        <org.apache.batik.transcoder.ToSVGAbstractTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_ESCAPED> = $r8;

        return;
    }
}
