class com.jidesoft.utils.SwingWorker$2 extends java.util.concurrent.FutureTask
{
    final com.jidesoft.utils.SwingWorker this$0;

    void <init>(com.jidesoft.utils.SwingWorker, java.util.concurrent.Callable)
    {
        com.jidesoft.utils.SwingWorker r1;
        java.util.concurrent.Callable r2;
        com.jidesoft.utils.SwingWorker$2 r0;

        r0 := @this: com.jidesoft.utils.SwingWorker$2;

        r1 := @parameter0: com.jidesoft.utils.SwingWorker;

        r2 := @parameter1: java.util.concurrent.Callable;

        r0.<com.jidesoft.utils.SwingWorker$2: com.jidesoft.utils.SwingWorker this$0> = r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r2);

        return;
    }

    protected void done()
    {
        com.jidesoft.utils.SwingWorker $r1, $r3;
        com.jidesoft.utils.SwingWorker$StateValue $r2;
        com.jidesoft.utils.SwingWorker$2 r0;

        r0 := @this: com.jidesoft.utils.SwingWorker$2;

        $r1 = r0.<com.jidesoft.utils.SwingWorker$2: com.jidesoft.utils.SwingWorker this$0>;

        staticinvoke <com.jidesoft.utils.SwingWorker: void access$200(com.jidesoft.utils.SwingWorker)>($r1);

        $r3 = r0.<com.jidesoft.utils.SwingWorker$2: com.jidesoft.utils.SwingWorker this$0>;

        $r2 = <com.jidesoft.utils.SwingWorker$StateValue: com.jidesoft.utils.SwingWorker$StateValue DONE>;

        staticinvoke <com.jidesoft.utils.SwingWorker: void access$100(com.jidesoft.utils.SwingWorker,com.jidesoft.utils.SwingWorker$StateValue)>($r3, $r2);

        return;
    }
}
