public class org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{
    public static final java.lang.String TAG_ID;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r4;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r3;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r5;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r6;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        if $z2 == 0 goto label3;

     label1:
        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r4 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey MULTI_TERM_REWRITE_METHOD>;

        $r5 = virtualinvoke $r3.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r4);

        $r6 = (org.apache.lucene.search.MultiTermQuery$RewriteMethod) $r5;

        if $r6 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler");

        throw $r2;

     label2:
        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void setTag(java.lang.String,java.lang.Object)>("MultiTermRewriteMethodConfiguration", $r6);

     label3:
        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List)
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor: java.lang.String TAG_ID> = "MultiTermRewriteMethodConfiguration";

        return;
    }
}
