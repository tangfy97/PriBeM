class org.springframework.remoting.rmi.RmiInvocationWrapper extends java.lang.Object implements org.springframework.remoting.rmi.RmiInvocationHandler
{
    private final java.lang.Object wrappedObject;
    private final org.springframework.remoting.rmi.RmiBasedExporter rmiExporter;

    public void <init>(java.lang.Object, org.springframework.remoting.rmi.RmiBasedExporter)
    {
        java.lang.Object r1;
        org.springframework.remoting.rmi.RmiBasedExporter r2;
        org.springframework.remoting.rmi.RmiInvocationWrapper r0;

        r0 := @this: org.springframework.remoting.rmi.RmiInvocationWrapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.remoting.rmi.RmiBasedExporter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Object to wrap is required");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "RMI exporter is required");

        r0.<org.springframework.remoting.rmi.RmiInvocationWrapper: java.lang.Object wrappedObject> = r1;

        r0.<org.springframework.remoting.rmi.RmiInvocationWrapper: org.springframework.remoting.rmi.RmiBasedExporter rmiExporter> = r2;

        return;
    }

    public java.lang.String getTargetInterfaceName()
    {
        java.lang.Class $r2;
        java.lang.String $r3;
        org.springframework.remoting.rmi.RmiBasedExporter $r1;
        org.springframework.remoting.rmi.RmiInvocationWrapper r0;

        r0 := @this: org.springframework.remoting.rmi.RmiInvocationWrapper;

        $r1 = r0.<org.springframework.remoting.rmi.RmiInvocationWrapper: org.springframework.remoting.rmi.RmiBasedExporter rmiExporter>;

        $r2 = virtualinvoke $r1.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Class getServiceInterface()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation) throws java.rmi.RemoteException, java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.springframework.remoting.support.RemoteInvocation r1;
        java.lang.Object $r2, $r4;
        org.springframework.remoting.rmi.RmiBasedExporter $r3;
        org.springframework.remoting.rmi.RmiInvocationWrapper r0;

        r0 := @this: org.springframework.remoting.rmi.RmiInvocationWrapper;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocation;

        $r3 = r0.<org.springframework.remoting.rmi.RmiInvocationWrapper: org.springframework.remoting.rmi.RmiBasedExporter rmiExporter>;

        $r2 = r0.<org.springframework.remoting.rmi.RmiInvocationWrapper: java.lang.Object wrappedObject>;

        $r4 = virtualinvoke $r3.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation,java.lang.Object)>(r1, $r2);

        return $r4;
    }
}
