public class org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener extends java.awt.event.ComponentAdapter implements org.apache.batik.swing.gvt.JGVTComponentListener
{
    float prevScale;
    float prevTransX;
    float prevTransY;
    private final org.apache.batik.swing.svg.AbstractJSVGComponent this$0;

    protected void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener;

        r1 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<java.awt.event.ComponentAdapter: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0> = r1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevScale> = 0.0F;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransX> = 0.0F;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransY> = 0.0F;

        return;
    }

    public void componentResized(java.awt.event.ComponentEvent)
    {
        org.apache.batik.util.RunnableQueue $r8;
        org.apache.batik.swing.svg.AbstractJSVGComponent$4 $r9;
        java.awt.event.ComponentEvent r10;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r2, $r4, $r6;
        org.apache.batik.bridge.UpdateManager $r3, $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener;

        r10 := @parameter0: java.awt.event.ComponentEvent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $z0 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r3 = $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        $z1 = virtualinvoke $r5.<org.apache.batik.bridge.UpdateManager: boolean isRunning()>();

        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r7 = $r6.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        $r8 = virtualinvoke $r7.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue getUpdateRunnableQueue()>();

        $r9 = new org.apache.batik.swing.svg.AbstractJSVGComponent$4;

        specialinvoke $r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$4: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener)>(r0);

        virtualinvoke $r8.<org.apache.batik.util.RunnableQueue: void invokeLater(java.lang.Runnable)>($r9);

     label1:
        return;
    }

    public void componentTransformChanged(java.awt.event.ComponentEvent)
    {
        byte $b0, $b1, $b2;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3, $r4, $r6, $r8;
        double $d0, $d1, $d2, $d3;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.batik.util.RunnableQueue $r10;
        org.apache.batik.swing.svg.AbstractJSVGComponent$5 $r11;
        java.awt.geom.AffineTransform $r2;
        java.awt.event.ComponentEvent r12;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener r0;
        float f0, f1, f2, $f3, $f4, $f5;
        org.apache.batik.bridge.UpdateManager $r5, $r7, $r9;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener;

        r12 := @parameter0: java.awt.event.ComponentEvent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = virtualinvoke $r1.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform getRenderingTransform()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f0 = (float) $d1;

        $d2 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        f1 = (float) $d2;

        $d3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        f2 = (float) $d3;

        $f3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevScale>;

        $b0 = f0 cmpl $f3;

        if $b0 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $f4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransX>;

        $b1 = f1 cmpl $f4;

        if $b1 != 0 goto label3;

        $f5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransY>;

        $b2 = f2 cmpl $f5;

        if $b2 == 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $z1 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument>;

        if $z1 == 0 goto label6;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r5 == null goto label6;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r7 = $r6.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        $z2 = virtualinvoke $r7.<org.apache.batik.bridge.UpdateManager: boolean isRunning()>();

        if $z2 == 0 goto label6;

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r9 = $r8.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue getUpdateRunnableQueue()>();

        $r11 = new org.apache.batik.swing.svg.AbstractJSVGComponent$5;

        specialinvoke $r11.<org.apache.batik.swing.svg.AbstractJSVGComponent$5: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener,boolean,boolean)>(r0, z0, $z4);

        virtualinvoke $r10.<org.apache.batik.util.RunnableQueue: void invokeLater(java.lang.Runnable)>($r11);

     label6:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevScale> = f0;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransX> = f1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransY> = f2;

        return;
    }

    public void updateMatrix(java.awt.geom.AffineTransform)
    {
        java.awt.geom.AffineTransform r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener r0;
        float $f0, $f1, $f2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $d0 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f0 = (float) $d1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevScale> = $f0;

        $d2 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f1 = (float) $d2;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransX> = $f1;

        $d3 = virtualinvoke r1.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f2 = (float) $d3;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: float prevTransY> = $f2;

        return;
    }

    static org.apache.batik.swing.svg.AbstractJSVGComponent access$100(org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener r0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        return $r1;
    }
}
