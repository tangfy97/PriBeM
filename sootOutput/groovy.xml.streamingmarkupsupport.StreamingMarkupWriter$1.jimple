class groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 extends java.io.Writer
{
    private final groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0;

    void <init>(groovy.xml.streamingmarkupsupport.StreamingMarkupWriter)
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        r1 := @parameter0: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0> = r1;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter $r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        virtualinvoke $r1.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: void close()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter $r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        virtualinvoke $r1.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: void flush()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        int i0;
        java.io.Writer $r3, $r5, $r7;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter $r1, $r2, $r4, $r6;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        i0 := @parameter0: int;

        if i0 != 60 goto label1;

        $r6 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        $r7 = $r6.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>("&lt;");

        goto label4;

     label1:
        if i0 != 62 goto label2;

        $r4 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        $r5 = $r4.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>("&gt;");

        goto label4;

     label2:
        if i0 != 38 goto label3;

        $r2 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        $r3 = $r2.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("&amp;");

        goto label4;

     label3:
        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        virtualinvoke $r1.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: void write(int)>(i0);

     label4:
        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        char $c2;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        int $i0, $i1, i3, i4, $i6, $i7;
        char[] r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        r1 := @parameter0: char[];

        i3 := @parameter1: int;

        i4 := @parameter2: int;

     label1:
        $i0 = i4;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        if $i0 <= 0 goto label2;

        $i1 = i3;

        i3 = i3 + 1;

        $c2 = r1[$i1];

        $i7 = (int) $c2;

        virtualinvoke r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: void write(int)>($i7);

        goto label1;

     label2:
        return;
    }

    public void setWritingAttribute(boolean)
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter $r1;
        boolean z0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        z0 := @parameter0: boolean;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        $r1.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean writingAttribute> = z0;

        return;
    }

    public java.io.Writer excaped()
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        java.io.Writer $r2;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter $r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        $r2 = staticinvoke <groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer access$000(groovy.xml.streamingmarkupsupport.StreamingMarkupWriter)>($r1);

        return $r2;
    }

    public java.io.Writer unescaped()
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 r0;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter $r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter this$0>;

        return $r1;
    }
}
