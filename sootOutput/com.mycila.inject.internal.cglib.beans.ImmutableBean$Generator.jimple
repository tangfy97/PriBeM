public class com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private java.lang.Object bean;
    private java.lang.Class target;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        $r1 = <com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    public void setBean(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r0;
        java.lang.Object r1;
        java.lang.Class $r2;

        r0 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        r1 := @parameter0: java.lang.Object;

        r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Object bean> = r1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Class target> = $r2;

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Class target>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public java.lang.Object create()
    {
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r0;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Class target>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: void setNamePrefix(java.lang.String)>($r2);

        $r3 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r2);

        return $r3;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor)
    {
        java.beans.PropertyDescriptor[] $r9;
        com.mycila.inject.internal.asm.Type $r2, $r15;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r7, $r14, $r18;
        java.lang.reflect.Method[] $r10, $r11;
        com.mycila.inject.internal.cglib.core.MethodInfo $r13, $r17;
        int $i0, $i1, i2, i3;
        java.lang.String $r5;
        com.mycila.inject.internal.asm.ClassVisitor r4;
        java.lang.reflect.Method $r12, $r16;
        com.mycila.inject.internal.cglib.core.Signature $r6;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r3;
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r0;
        java.lang.Class $r1, $r8;

        r0 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        r4 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Class target>;

        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r1);

        $r3 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r4);

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.String getClassName()>();

        virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r5, $r2, null, "<generated>");

        virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(18, "CGLIB$RWBean", $r2, null);

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.beans.ImmutableBean: com.mycila.inject.internal.cglib.core.Signature access$000()>();

        $r7 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r6, null);

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke_constructor()>();

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r2);

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$RWBean");

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r8 = r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Class target>;

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>($r8);

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)>($r9, 1, 0);

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)>($r9, 0, 1);

        i2 = 0;

     label1:
        $i0 = lengthof $r10;

        if i2 >= $i0 goto label2;

        $r16 = $r10[i2];

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r16);

        $r18 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>($r3, $r17, 1);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$RWBean");

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r17);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = 0;

     label3:
        $i1 = lengthof $r11;

        if i3 >= $i1 goto label4;

        $r12 = $r11[i3];

        $r13 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r12);

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>($r3, $r13, 1);

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.beans.ImmutableBean: com.mycila.inject.internal.asm.Type access$100()>();

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void throw_exception(com.mycila.inject.internal.asm.Type,java.lang.String)>($r15, "Bean is immutable");

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        i3 = i3 + 1;

        goto label3;

     label4:
        virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        java.lang.Object[] $r2;
        java.lang.Class[] $r1;
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r3;
        java.lang.Class r0;
        java.lang.Object $r4, $r5;

        r3 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.beans.ImmutableBean: java.lang.Class[] access$200()>();

        $r2 = newarray (java.lang.Object)[1];

        $r4 = r3.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Object bean>;

        $r2[0] = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])>(r0, $r1, $r2);

        return $r5;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator r0;
        java.lang.Object r1, $r3;
        java.lang.Class $r2;

        r0 := @this: com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: java.lang.Object firstInstance(java.lang.Class)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r3;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.beans.ImmutableBean: java.lang.Class class$net$sf$cglib$beans$ImmutableBean>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.beans.ImmutableBean: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.ImmutableBean");

        <com.mycila.inject.internal.cglib.beans.ImmutableBean: java.lang.Class class$net$sf$cglib$beans$ImmutableBean> = $r3;

        goto label2;

     label1:
        $r3 = <com.mycila.inject.internal.cglib.beans.ImmutableBean: java.lang.Class class$net$sf$cglib$beans$ImmutableBean>;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.beans.ImmutableBean$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        return;
    }
}
