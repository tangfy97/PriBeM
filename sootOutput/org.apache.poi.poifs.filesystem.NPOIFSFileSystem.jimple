public class org.apache.poi.poifs.filesystem.NPOIFSFileSystem extends org.apache.poi.poifs.filesystem.BlockStore implements org.apache.poi.poifs.dev.POIFSViewable, java.io.Closeable
{
    private org.apache.poi.poifs.filesystem.NPOIFSMiniStore _mini_store;
    private org.apache.poi.poifs.property.NPropertyTable _property_table;
    private java.util.List _xbat_blocks;
    private java.util.List _bat_blocks;
    private org.apache.poi.poifs.storage.HeaderBlock _header;
    private org.apache.poi.poifs.filesystem.DirectoryNode _root;
    private org.apache.poi.poifs.nio.DataSource _data;
    private org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize;

    public static java.io.InputStream createNonClosingInputStream(java.io.InputStream)
    {
        org.apache.poi.util.CloseIgnoringInputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.apache.poi.util.CloseIgnoringInputStream;

        specialinvoke $r0.<org.apache.poi.util.CloseIgnoringInputStream: void <init>(java.io.InputStream)>(r1);

        return $r0;
    }

    private void <init>(boolean)
    {
        byte[] $r15;
        java.util.ArrayList $r9, $r11, $r12;
        org.apache.poi.poifs.nio.ByteArrayBackedDataSource $r13;
        org.apache.poi.poifs.filesystem.NPOIFSMiniStore $r6;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int $i0, $i1;
        org.apache.poi.poifs.property.NPropertyTable $r4, $r7;
        org.apache.poi.poifs.storage.HeaderBlock $r2, $r5, $r10;
        boolean z0;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1, $r3, $r14;
        org.apache.poi.poifs.property.RootProperty $r8;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.BlockStore: void <init>()>();

        $r1 = <org.apache.poi.poifs.common.POIFSConstants: org.apache.poi.poifs.common.POIFSBigBlockSize SMALLER_BIG_BLOCK_SIZE_DETAILS>;

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize> = $r1;

        $r2 = new org.apache.poi.poifs.storage.HeaderBlock;

        $r3 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        specialinvoke $r2.<org.apache.poi.poifs.storage.HeaderBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>($r3);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header> = $r2;

        $r4 = new org.apache.poi.poifs.property.NPropertyTable;

        $r5 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        specialinvoke $r4.<org.apache.poi.poifs.property.NPropertyTable: void <init>(org.apache.poi.poifs.storage.HeaderBlock)>($r5);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table> = $r4;

        $r6 = new org.apache.poi.poifs.filesystem.NPOIFSMiniStore;

        $r7 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        $r8 = virtualinvoke $r7.<org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.poifs.property.RootProperty getRoot()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        specialinvoke $r6.<org.apache.poi.poifs.filesystem.NPOIFSMiniStore: void <init>(org.apache.poi.poifs.filesystem.NPOIFSFileSystem,org.apache.poi.poifs.property.RootProperty,java.util.List,org.apache.poi.poifs.storage.HeaderBlock)>(r0, $r8, $r9, $r10);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.NPOIFSMiniStore _mini_store> = $r6;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks> = $r12;

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode _root> = null;

        if z0 == 0 goto label1;

        $r13 = new org.apache.poi.poifs.nio.ByteArrayBackedDataSource;

        $r14 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i0 = virtualinvoke $r14.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $i1 = $i0 * 3;

        $r15 = newarray (byte)[$i1];

        specialinvoke $r13.<org.apache.poi.poifs.nio.ByteArrayBackedDataSource: void <init>(byte[])>($r15);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data> = $r13;

     label1:
        return;
    }

    public void <init>()
    {
        org.apache.poi.poifs.storage.BATBlock $r5;
        java.util.List $r6;
        int[] $r2;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r4;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int $i1, $i3, $i5;
        org.apache.poi.poifs.property.NPropertyTable $r7;
        org.apache.poi.poifs.storage.HeaderBlock $r1, $r3;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(boolean)>(1);

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        virtualinvoke $r1.<org.apache.poi.poifs.storage.HeaderBlock: void setBATCount(int)>(1);

        $r3 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        virtualinvoke $r3.<org.apache.poi.poifs.storage.HeaderBlock: void setBATArray(int[])>($r2);

        $r4 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $r5 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock createEmptyBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize,boolean)>($r4, 0);

        virtualinvoke $r5.<org.apache.poi.poifs.storage.BATBlock: void setOurBlockIndex(int)>(0);

        $r6 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i1 = (int) -3;

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void setNextBlock(int,int)>(0, $i1);

        $i3 = (int) -2;

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void setNextBlock(int,int)>(1, $i3);

        $r7 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        $i5 = (int) -2;

        virtualinvoke $r7.<org.apache.poi.poifs.property.NPropertyTable: void setStartBlock(int)>($i5);

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        java.io.File r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(java.io.File,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        boolean z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(java.nio.channels.FileChannel,java.io.File,boolean,boolean)>(null, r1, z0, 1);

        return;
    }

    public void <init>(java.nio.channels.FileChannel) throws java.io.IOException
    {
        java.nio.channels.FileChannel r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: java.nio.channels.FileChannel;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(java.nio.channels.FileChannel,java.io.File,boolean,boolean)>(r1, null, 0, 0);

        return;
    }

    private void <init>(java.nio.channels.FileChannel, java.io.File, boolean, boolean) throws java.io.IOException
    {
        java.io.IOException $r7;
        java.lang.RuntimeException $r6;
        java.io.File r1;
        java.nio.ByteBuffer $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        org.apache.poi.poifs.nio.FileBackedDataSource $r2, $r5;
        org.apache.poi.poifs.storage.HeaderBlock $r4;
        java.nio.channels.FileChannel r8;
        boolean z0, z1;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r8 := @parameter0: java.nio.channels.FileChannel;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(boolean)>(0);

     label1:
        if r1 == null goto label2;

        $r5 = new org.apache.poi.poifs.nio.FileBackedDataSource;

        specialinvoke $r5.<org.apache.poi.poifs.nio.FileBackedDataSource: void <init>(java.io.File,boolean)>(r1, z0);

        r8 = virtualinvoke $r5.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel getChannel()>();

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data> = $r5;

        goto label3;

     label2:
        $r2 = new org.apache.poi.poifs.nio.FileBackedDataSource;

        specialinvoke $r2.<org.apache.poi.poifs.nio.FileBackedDataSource: void <init>(java.nio.channels.FileChannel,boolean)>(r8, z0);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data> = $r2;

     label3:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(512);

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>(r8, $r3);

        $r4 = new org.apache.poi.poifs.storage.HeaderBlock;

        specialinvoke $r4.<org.apache.poi.poifs.storage.HeaderBlock: void <init>(java.nio.ByteBuffer)>($r3);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header> = $r4;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void readCoreContents()>();

     label4:
        goto label9;

     label5:
        $r7 := @caughtexception;

        if z1 == 0 goto label6;

        virtualinvoke r8.<java.nio.channels.FileChannel: void close()>();

     label6:
        throw $r7;

     label7:
        $r6 := @caughtexception;

        if z1 == 0 goto label8;

        virtualinvoke r8.<java.nio.channels.FileChannel: void close()>();

     label8:
        throw $r6;

     label9:
        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch java.lang.RuntimeException from label1 to label4 with label7;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable $r11;
        byte[] $r9;
        long $l1;
        java.nio.ByteBuffer $r3, $r7;
        org.apache.poi.poifs.nio.ByteArrayBackedDataSource $r15;
        byte $b2;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int $i0, $i3, $i4, $i5, $i6;
        org.apache.poi.poifs.storage.HeaderBlock $r5, $r6, $r13;
        boolean z0;
        java.nio.channels.ReadableByteChannel $r2, r12;
        java.lang.IllegalArgumentException $r14;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(boolean)>(0);

        r12 = null;

        z0 = 0;

     label1:
        $r2 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r1);

        r12 = $r2;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(512);

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>($r2, $r3);

        $r13 = new org.apache.poi.poifs.storage.HeaderBlock;

        specialinvoke $r13.<org.apache.poi.poifs.storage.HeaderBlock: void <init>(java.nio.ByteBuffer)>($r3);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header> = $r13;

        $r5 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i0 = virtualinvoke $r5.<org.apache.poi.poifs.storage.HeaderBlock: int getBATCount()>();

        staticinvoke <org.apache.poi.poifs.storage.BlockAllocationTableReader: void sanityCheckBlockCount(int)>($i0);

        $r6 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $l1 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: long calculateMaximumSize(org.apache.poi.poifs.storage.HeaderBlock)>($r6);

        $b2 = $l1 cmp 2147483647L;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable read a >2gb file via an InputStream");

        throw $r14;

     label2:
        $i3 = (int) $l1;

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r3);

        $i4 = virtualinvoke $r3.<java.nio.ByteBuffer: int capacity()>();

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>($r2, $r7);

        z0 = 1;

        $r15 = new org.apache.poi.poifs.nio.ByteArrayBackedDataSource;

        $r9 = virtualinvoke $r7.<java.nio.ByteBuffer: byte[] array()>();

        $i5 = virtualinvoke $r7.<java.nio.ByteBuffer: int position()>();

        specialinvoke $r15.<org.apache.poi.poifs.nio.ByteArrayBackedDataSource: void <init>(byte[],int)>($r9, $i5);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data> = $r15;

     label3:
        if $r2 == null goto label4;

        interfaceinvoke $r2.<java.nio.channels.ReadableByteChannel: void close()>();

     label4:
        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void closeInputStream(java.io.InputStream,boolean)>(r1, 1);

        goto label8;

     label5:
        $r11 := @caughtexception;

     label6:
        if r12 == null goto label7;

        interfaceinvoke r12.<java.nio.channels.ReadableByteChannel: void close()>();

     label7:
        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void closeInputStream(java.io.InputStream,boolean)>(r1, z0);

        throw $r11;

     label8:
        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void readCoreContents()>();

        return;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void closeInputStream(java.io.InputStream, boolean)
    {
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r3;
        java.io.IOException $r1;
        java.lang.RuntimeException $r2;
        java.io.InputStream r0;
        boolean z0;

        r3 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r0 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

     label1:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        if z0 == 0 goto label4;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

     label4:
        virtualinvoke $r1.<java.io.IOException: void printStackTrace()>();

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static boolean hasPOIFSHeader(java.io.InputStream) throws java.io.IOException
    {
        byte[] r1;
        org.apache.poi.util.LongField $r2;
        java.io.PushbackInputStream r3;
        long $l0;
        byte $b1;
        java.io.InputStream r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>(8);

        r1 = newarray (byte)[8];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, r1);

        $r2 = new org.apache.poi.util.LongField;

        specialinvoke $r2.<org.apache.poi.util.LongField: void <init>(int,byte[])>(0, r1);

        $z0 = r0 instanceof java.io.PushbackInputStream;

        if $z0 == 0 goto label1;

        r3 = (java.io.PushbackInputStream) r0;

        virtualinvoke r3.<java.io.PushbackInputStream: void unread(byte[])>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label2:
        $l0 = virtualinvoke $r2.<org.apache.poi.util.LongField: long get()>();

        $b1 = $l0 cmp -2226271756974174256L;

        if $b1 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private void readCoreContents() throws java.io.IOException
    {
        java.nio.ByteBuffer $r20, $r23;
        int[] $r5, $r8;
        org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector $r3;
        java.util.List $r27;
        org.apache.poi.poifs.storage.BATBlock $r22, $r25;
        java.util.ArrayList $r30;
        org.apache.poi.poifs.filesystem.NPOIFSMiniStore $r31;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, $i18, $i20;
        org.apache.poi.poifs.property.NPropertyTable $r15, $r29;
        org.apache.poi.poifs.storage.HeaderBlock $r1, $r4, $r6, $r7, $r9, $r10, $r12, $r17, $r18, $r19;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r2, $r21, $r24, $r26, $r28;
        org.apache.poi.poifs.property.RootProperty $r16;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize> = $r2;

        $r3 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector getChainLoopDetector()>();

        $r4 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.storage.HeaderBlock: int[] getBATArray()>();

        i8 = lengthof $r5;

        i9 = 0;

     label1:
        if i9 >= i8 goto label2;

        i10 = $r5[i9];

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void readBAT(int,org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector)>(i10, $r3);

        i9 = i9 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i0 = virtualinvoke $r6.<org.apache.poi.poifs.storage.HeaderBlock: int getBATCount()>();

        $r7 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r8 = virtualinvoke $r7.<org.apache.poi.poifs.storage.HeaderBlock: int[] getBATArray()>();

        $i1 = lengthof $r8;

        i11 = $i0 - $i1;

        $r9 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        i12 = virtualinvoke $r9.<org.apache.poi.poifs.storage.HeaderBlock: int getXBATIndex()>();

        i13 = 0;

     label3:
        $r10 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i2 = virtualinvoke $r10.<org.apache.poi.poifs.storage.HeaderBlock: int getXBATCount()>();

        if i13 >= $i2 goto label7;

        virtualinvoke $r3.<org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector: void claim(int)>(i12);

        $r23 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>(i12);

        $r24 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $r25 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock createBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize,java.nio.ByteBuffer)>($r24, $r23);

        virtualinvoke $r25.<org.apache.poi.poifs.storage.BATBlock: void setOurBlockIndex(int)>(i12);

        $r26 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i4 = virtualinvoke $r26.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        i12 = virtualinvoke $r25.<org.apache.poi.poifs.storage.BATBlock: int getValueAt(int)>($i4);

        $r27 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r28 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i5 = virtualinvoke $r28.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i11, $i5);

        i14 = 0;

     label4:
        if i14 >= $i6 goto label6;

        $i7 = virtualinvoke $r25.<org.apache.poi.poifs.storage.BATBlock: int getValueAt(int)>(i14);

        $i18 = (int) -1;

        if $i7 == $i18 goto label6;

        $i20 = (int) -2;

        if $i7 != $i20 goto label5;

        goto label6;

     label5:
        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void readBAT(int,org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector)>($i7, $r3);

        i14 = i14 + 1;

        goto label4;

     label6:
        i11 = i11 - $i6;

        i13 = i13 + 1;

        goto label3;

     label7:
        $r29 = new org.apache.poi.poifs.property.NPropertyTable;

        $r12 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        specialinvoke $r29.<org.apache.poi.poifs.property.NPropertyTable: void <init>(org.apache.poi.poifs.storage.HeaderBlock,org.apache.poi.poifs.filesystem.NPOIFSFileSystem)>($r12, r0);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table> = $r29;

        $r30 = new java.util.ArrayList;

        specialinvoke $r30.<java.util.ArrayList: void <init>()>();

        $r31 = new org.apache.poi.poifs.filesystem.NPOIFSMiniStore;

        $r15 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        $r16 = virtualinvoke $r15.<org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.poifs.property.RootProperty getRoot()>();

        $r17 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        specialinvoke $r31.<org.apache.poi.poifs.filesystem.NPOIFSMiniStore: void <init>(org.apache.poi.poifs.filesystem.NPOIFSFileSystem,org.apache.poi.poifs.property.RootProperty,java.util.List,org.apache.poi.poifs.storage.HeaderBlock)>(r0, $r16, $r30, $r17);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.NPOIFSMiniStore _mini_store> = $r31;

        $r18 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        i15 = virtualinvoke $r18.<org.apache.poi.poifs.storage.HeaderBlock: int getSBATStart()>();

        i16 = 0;

     label8:
        $r19 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i3 = virtualinvoke $r19.<org.apache.poi.poifs.storage.HeaderBlock: int getSBATCount()>();

        if i16 >= $i3 goto label9;

        virtualinvoke $r3.<org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector: void claim(int)>(i15);

        $r20 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>(i15);

        $r21 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $r22 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock createBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize,java.nio.ByteBuffer)>($r21, $r20);

        virtualinvoke $r22.<org.apache.poi.poifs.storage.BATBlock: void setOurBlockIndex(int)>(i15);

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r22);

        i15 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: int getNextBlock(int)>(i15);

        i16 = i16 + 1;

        goto label8;

     label9:
        return;
    }

    private void readBAT(int, org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector) throws java.io.IOException
    {
        java.util.List $r5;
        org.apache.poi.poifs.storage.BATBlock $r4;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r1;
        int i0;
        org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector r0;
        java.nio.ByteBuffer $r2;

        r1 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector;

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector: void claim(int)>(i0);

        $r2 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>(i0);

        $r3 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $r4 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock createBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize,java.nio.ByteBuffer)>($r3, $r2);

        virtualinvoke $r4.<org.apache.poi.poifs.storage.BATBlock: void setOurBlockIndex(int)>(i0);

        $r5 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    private org.apache.poi.poifs.storage.BATBlock createBAT(int, boolean) throws java.io.IOException
    {
        org.apache.poi.poifs.storage.BATBlock $r2;
        long $l4;
        java.nio.ByteBuffer $r4;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1, $r3, $r5;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0, $i1, $i2, $i3, $i5;
        org.apache.poi.poifs.nio.DataSource $r6;
        boolean z0, $z1;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock createEmptyBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize,boolean)>($r1, $z1);

        virtualinvoke $r2.<org.apache.poi.poifs.storage.BATBlock: void setOurBlockIndex(int)>(i0);

        $r3 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i1 = virtualinvoke $r3.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        $i2 = 1 + i0;

        $r5 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i3 = virtualinvoke $r5.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $i5 = $i2 * $i3;

        $r6 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        $l4 = (long) $i5;

        virtualinvoke $r6.<org.apache.poi.poifs.nio.DataSource: void write(java.nio.ByteBuffer,long)>($r4, $l4);

        return $r2;
    }

    protected java.nio.ByteBuffer getBlockAt(int) throws java.io.IOException
    {
        java.lang.IndexOutOfBoundsException $r5, $r6;
        long l2, $l4, l5;
        java.nio.ByteBuffer $r4;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0, $i1, $i3, $i6;
        java.lang.String $r12;
        org.apache.poi.poifs.nio.DataSource $r3;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1, $r2;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        l2 = (long) $i1;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i3 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $l4 = (long) $i3;

        l5 = l2 * $l4;

     label1:
        $r3 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i6 = virtualinvoke $r2.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.poifs.nio.DataSource: java.nio.ByteBuffer read(int,long)>($i6, l5);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IndexOutOfBoundsException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Block ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found - ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r6;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    protected java.nio.ByteBuffer createBlockIfNeeded(int) throws java.io.IOException
    {
        java.lang.IndexOutOfBoundsException $r2;
        long l4;
        java.nio.ByteBuffer $r1, $r4, $r6;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0, $i1, $i2, $i3, $i5;
        org.apache.poi.poifs.nio.DataSource $r5;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>(i0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $i1 = i0 + 1;

        $r3 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i2 = virtualinvoke $r3.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $i3 = $i1 * $i2;

        l4 = (long) $i3;

        $i5 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: int getBigBlockSize()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i5);

        $r5 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        virtualinvoke $r5.<org.apache.poi.poifs.nio.DataSource: void write(java.nio.ByteBuffer,long)>($r4, l4);

        $r6 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>(i0);

        return $r6;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    protected org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex getBATBlockAndIndex(int)
    {
        org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex $r3;
        java.util.List $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0;
        org.apache.poi.poifs.storage.HeaderBlock $r2;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        $r3 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex getBATBlockAndIndex(int,org.apache.poi.poifs.storage.HeaderBlock,java.util.List)>(i0, $r2, $r1);

        return $r3;
    }

    protected int getNextBlock(int)
    {
        org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex $r1;
        org.apache.poi.poifs.storage.BATBlock $r2;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex getBATBlockAndIndex(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex: org.apache.poi.poifs.storage.BATBlock getBlock()>();

        $i1 = virtualinvoke $r1.<org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex: int getIndex()>();

        $i2 = virtualinvoke $r2.<org.apache.poi.poifs.storage.BATBlock: int getValueAt(int)>($i1);

        return $i2;
    }

    protected void setNextBlock(int, int)
    {
        org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex $r1;
        org.apache.poi.poifs.storage.BATBlock $r2;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0, $i1, i2;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex getBATBlockAndIndex(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex: org.apache.poi.poifs.storage.BATBlock getBlock()>();

        $i1 = virtualinvoke $r1.<org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex: int getIndex()>();

        virtualinvoke $r2.<org.apache.poi.poifs.storage.BATBlock: void setValueAt(int,int)>($i1, i2);

        return;
    }

    protected int getFreeBlock() throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int[] $r9, r32;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r2, $r5, $r11, $r13, $r17, $r18, $r19, $r23, $r24;
        org.apache.poi.poifs.storage.BATBlock $r4, $r16, $r22, r29, r30, r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, $i24, $i26, $i28, $i30;
        org.apache.poi.poifs.storage.HeaderBlock $r6, $r7, $r8, $r10, $r12, $r25, $r26;
        java.util.Iterator $r3, $r14;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1, $r15, $r21;
        java.lang.Object $r20, $r27, $r28;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i0 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        i20 = 0;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r28 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.poi.poifs.storage.BATBlock) $r28;

        $z3 = virtualinvoke r29.<org.apache.poi.poifs.storage.BATBlock: boolean hasFreeSectors()>();

        if $z3 == 0 goto label04;

        i21 = 0;

     label02:
        if i21 >= $i0 goto label04;

        $i18 = virtualinvoke r29.<org.apache.poi.poifs.storage.BATBlock: int getValueAt(int)>(i21);

        $i24 = (int) -1;

        if $i18 != $i24 goto label03;

        $i19 = i20 + i21;

        return $i19;

     label03:
        i21 = i21 + 1;

        goto label02;

     label04:
        i20 = i20 + $i0;

        goto label01;

     label05:
        $r4 = specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.BATBlock createBAT(int,boolean)>(i20, 1);

        $i26 = (int) -3;

        virtualinvoke $r4.<org.apache.poi.poifs.storage.BATBlock: void setValueAt(int,int)>(0, $i26);

        $r5 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r6 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i1 = virtualinvoke $r6.<org.apache.poi.poifs.storage.HeaderBlock: int getBATCount()>();

        if $i1 < 109 goto label15;

        r30 = null;

        $r13 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r27 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.apache.poi.poifs.storage.BATBlock) $r27;

        $z2 = virtualinvoke r31.<org.apache.poi.poifs.storage.BATBlock: boolean hasFreeSectors()>();

        if $z2 == 0 goto label07;

        r30 = r31;

        goto label08;

     label07:
        goto label06;

     label08:
        if r30 != null goto label11;

        $i12 = i20 + 1;

        $r16 = specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.BATBlock createBAT(int,boolean)>($i12, 0);

        virtualinvoke $r16.<org.apache.poi.poifs.storage.BATBlock: void setValueAt(int,int)>(0, i20);

        $i28 = (int) -4;

        virtualinvoke $r4.<org.apache.poi.poifs.storage.BATBlock: void setValueAt(int,int)>(1, $i28);

        i20 = i20 + 1;

        $r17 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        $i13 = interfaceinvoke $r17.<java.util.List: int size()>();

        if $i13 != 0 goto label09;

        $r26 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        virtualinvoke $r26.<org.apache.poi.poifs.storage.HeaderBlock: void setXBATStart(int)>(i20);

        goto label10;

     label09:
        $r19 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        $r18 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        $i14 = interfaceinvoke $r18.<java.util.List: int size()>();

        $i15 = $i14 - 1;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>($i15);

        $r22 = (org.apache.poi.poifs.storage.BATBlock) $r20;

        $r21 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i16 = virtualinvoke $r21.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        virtualinvoke $r22.<org.apache.poi.poifs.storage.BATBlock: void setValueAt(int,int)>($i16, i20);

     label10:
        $r23 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r25 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r24 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        $i17 = interfaceinvoke $r24.<java.util.List: int size()>();

        virtualinvoke $r25.<org.apache.poi.poifs.storage.HeaderBlock: void setXBATCount(int)>($i17);

        goto label14;

     label11:
        i22 = 0;

     label12:
        $r15 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i10 = virtualinvoke $r15.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        if i22 >= $i10 goto label14;

        $i11 = virtualinvoke r30.<org.apache.poi.poifs.storage.BATBlock: int getValueAt(int)>(i22);

        $i30 = (int) -1;

        if $i11 != $i30 goto label13;

        virtualinvoke r30.<org.apache.poi.poifs.storage.BATBlock: void setValueAt(int,int)>(i22, i20);

        goto label14;

     label13:
        i22 = i22 + 1;

        goto label12;

     label14:
        goto label16;

     label15:
        $r7 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i2 = virtualinvoke $r7.<org.apache.poi.poifs.storage.HeaderBlock: int getBATCount()>();

        $i3 = $i2 + 1;

        r32 = newarray (int)[$i3];

        $r8 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r9 = virtualinvoke $r8.<org.apache.poi.poifs.storage.HeaderBlock: int[] getBATArray()>();

        $i4 = lengthof r32;

        $i5 = $i4 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r32, 0, $i5);

        $i6 = lengthof r32;

        $i7 = $i6 - 1;

        r32[$i7] = i20;

        $r10 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        virtualinvoke $r10.<org.apache.poi.poifs.storage.HeaderBlock: void setBATArray(int[])>(r32);

     label16:
        $r12 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $r11 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        $i8 = interfaceinvoke $r11.<java.util.List: int size()>();

        virtualinvoke $r12.<org.apache.poi.poifs.storage.HeaderBlock: void setBATCount(int)>($i8);

        $i9 = i20 + 1;

        return $i9;
    }

    protected long size() throws java.io.IOException
    {
        long $l0;
        org.apache.poi.poifs.nio.DataSource $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        $l0 = virtualinvoke $r1.<org.apache.poi.poifs.nio.DataSource: long size()>();

        return $l0;
    }

    protected org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector getChainLoopDetector() throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r1;
        long $l0;
        org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector $r0;
        org.apache.poi.poifs.nio.DataSource $r2;

        r1 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r0 = new org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector;

        $r2 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        $l0 = virtualinvoke $r2.<org.apache.poi.poifs.nio.DataSource: long size()>();

        specialinvoke $r0.<org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector: void <init>(org.apache.poi.poifs.filesystem.BlockStore,long)>(r1, $l0);

        return $r0;
    }

    org.apache.poi.poifs.property.NPropertyTable _get_property_table()
    {
        org.apache.poi.poifs.property.NPropertyTable $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        return $r1;
    }

    public org.apache.poi.poifs.filesystem.NPOIFSMiniStore getMiniStore()
    {
        org.apache.poi.poifs.filesystem.NPOIFSMiniStore $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.NPOIFSMiniStore _mini_store>;

        return $r1;
    }

    void addDocument(org.apache.poi.poifs.filesystem.NPOIFSDocument)
    {
        org.apache.poi.poifs.filesystem.NPOIFSDocument r1;
        org.apache.poi.poifs.property.DocumentProperty $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        org.apache.poi.poifs.property.NPropertyTable $r2;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.NPOIFSDocument;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        $r3 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSDocument: org.apache.poi.poifs.property.DocumentProperty getDocumentProperty()>();

        virtualinvoke $r2.<org.apache.poi.poifs.property.NPropertyTable: void addProperty(org.apache.poi.poifs.property.Property)>($r3);

        return;
    }

    void addDirectory(org.apache.poi.poifs.property.DirectoryProperty)
    {
        org.apache.poi.poifs.property.NPropertyTable $r2;
        org.apache.poi.poifs.property.DirectoryProperty r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: org.apache.poi.poifs.property.DirectoryProperty;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        virtualinvoke $r2.<org.apache.poi.poifs.property.NPropertyTable: void addProperty(org.apache.poi.poifs.property.Property)>(r1);

        return;
    }

    public org.apache.poi.poifs.filesystem.DocumentEntry createDocument(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        java.lang.String r2;
        org.apache.poi.poifs.filesystem.DocumentEntry $r4;
        java.io.InputStream r3;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r3 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r4 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentEntry createDocument(java.lang.String,java.io.InputStream)>(r2, r3);

        return $r4;
    }

    public org.apache.poi.poifs.filesystem.DocumentEntry createDocument(java.lang.String, int, org.apache.poi.poifs.filesystem.POIFSWriterListener) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.poifs.filesystem.POIFSWriterListener r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        int i0;
        java.lang.String r2;
        org.apache.poi.poifs.filesystem.DocumentEntry $r4;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r3 := @parameter2: org.apache.poi.poifs.filesystem.POIFSWriterListener;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r4 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentEntry createDocument(java.lang.String,int,org.apache.poi.poifs.filesystem.POIFSWriterListener)>(r2, i0, r3);

        return $r4;
    }

    public org.apache.poi.poifs.filesystem.DirectoryEntry createDirectory(java.lang.String) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.poifs.filesystem.DirectoryEntry $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        java.lang.String r2;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r3 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DirectoryEntry createDirectory(java.lang.String)>(r2);

        return $r3;
    }

    public void writeFilesystem() throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r2, $r5;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        org.apache.poi.poifs.nio.FileBackedDataSource $r4;
        org.apache.poi.poifs.nio.DataSource $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        $z0 = $r1 instanceof org.apache.poi.poifs.nio.FileBackedDataSource;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("POIFS opened from an inputstream, so writeFilesystem() may not be called. Use writeFilesystem(OutputStream) instead");

        throw $r2;

     label2:
        $r3 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        $r4 = (org.apache.poi.poifs.nio.FileBackedDataSource) $r3;

        $z1 = virtualinvoke $r4.<org.apache.poi.poifs.nio.FileBackedDataSource: boolean isWriteable()>();

        if $z1 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("POIFS opened in read only mode, so writeFilesystem() may not be called. Open the FileSystem in read-write mode first");

        throw $r5;

     label3:
        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void syncWithDataSource()>();

        return;
    }

    public void writeFilesystem(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.poi.poifs.nio.DataSource $r2;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void syncWithDataSource()>();

        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        virtualinvoke $r2.<org.apache.poi.poifs.nio.DataSource: void copyTo(java.io.OutputStream)>(r1);

        return;
    }

    private void syncWithDataSource() throws java.io.IOException
    {
        org.apache.poi.poifs.storage.BATBlock r17, r18;
        java.nio.ByteBuffer $r7, $r14, $r16;
        org.apache.poi.poifs.filesystem.NPOIFSMiniStore $r12;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r1;
        int $i0, $i1, $i2, $i4;
        org.apache.poi.poifs.property.NPropertyTable $r3, $r4;
        org.apache.poi.poifs.storage.HeaderBlock $r2, $r6;
        boolean $z0, $z1;
        java.util.Iterator $r9, $r11;
        org.apache.poi.poifs.storage.HeaderBlockWriter $r20;
        java.util.List $r8, $r10;
        java.lang.Object $r13, $r15;
        org.apache.poi.poifs.filesystem.NPOIFSStream $r19;

        r1 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r19 = new org.apache.poi.poifs.filesystem.NPOIFSStream;

        $r2 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        $i0 = virtualinvoke $r2.<org.apache.poi.poifs.storage.HeaderBlock: int getPropertyStart()>();

        specialinvoke $r19.<org.apache.poi.poifs.filesystem.NPOIFSStream: void <init>(org.apache.poi.poifs.filesystem.BlockStore,int)>(r1, $i0);

        $r3 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        virtualinvoke $r3.<org.apache.poi.poifs.property.NPropertyTable: void preWrite()>();

        $r4 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        virtualinvoke $r4.<org.apache.poi.poifs.property.NPropertyTable: void write(org.apache.poi.poifs.filesystem.NPOIFSStream)>($r19);

        $r20 = new org.apache.poi.poifs.storage.HeaderBlockWriter;

        $r6 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.storage.HeaderBlock _header>;

        specialinvoke $r20.<org.apache.poi.poifs.storage.HeaderBlockWriter: void <init>(org.apache.poi.poifs.storage.HeaderBlock)>($r6);

        $i4 = (int) -1;

        $r7 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>($i4);

        virtualinvoke $r20.<org.apache.poi.poifs.storage.HeaderBlockWriter: void writeBlock(java.nio.ByteBuffer)>($r7);

        $r8 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _bat_blocks>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.poi.poifs.storage.BATBlock) $r15;

        $i2 = virtualinvoke r17.<org.apache.poi.poifs.storage.BATBlock: int getOurBlockIndex()>();

        $r16 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>($i2);

        staticinvoke <org.apache.poi.poifs.storage.BlockAllocationTableWriter: void writeBlock(org.apache.poi.poifs.storage.BATBlock,java.nio.ByteBuffer)>(r17, $r16);

        goto label1;

     label2:
        $r10 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.util.List _xbat_blocks>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.poi.poifs.storage.BATBlock) $r13;

        $i1 = virtualinvoke r18.<org.apache.poi.poifs.storage.BATBlock: int getOurBlockIndex()>();

        $r14 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: java.nio.ByteBuffer getBlockAt(int)>($i1);

        staticinvoke <org.apache.poi.poifs.storage.BlockAllocationTableWriter: void writeBlock(org.apache.poi.poifs.storage.BATBlock,java.nio.ByteBuffer)>(r18, $r14);

        goto label3;

     label4:
        $r12 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.NPOIFSMiniStore _mini_store>;

        virtualinvoke $r12.<org.apache.poi.poifs.filesystem.NPOIFSMiniStore: void syncWithDataSource()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.poi.poifs.nio.DataSource $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.nio.DataSource _data>;

        virtualinvoke $r1.<org.apache.poi.poifs.nio.DataSource: void close()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.io.PrintStream $r6;
        java.lang.Throwable $r7, $r8, $r9;
        java.io.FileOutputStream $r3;
        java.lang.String[] r0;
        java.io.FileInputStream $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem $r5;
        int $i0;
        java.lang.String $r2, $r4;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 2 goto label01;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("two arguments required: input filename and output filename");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label01:
        $r1 = new java.io.FileInputStream;

        $r2 = r0[0];

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.lang.String)>($r2);

     label02:
        $r3 = new java.io.FileOutputStream;

        $r4 = r0[1];

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.lang.String)>($r4);

     label03:
        $r5 = new org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        specialinvoke $r5.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(java.io.InputStream)>($r1);

     label04:
        virtualinvoke $r5.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void writeFilesystem(java.io.OutputStream)>($r3);

     label05:
        virtualinvoke $r5.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void close()>();

        goto label08;

     label06:
        $r9 := @caughtexception;

     label07:
        virtualinvoke $r5.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void close()>();

        throw $r9;

     label08:
        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

        throw $r8;

     label11:
        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

        goto label14;

     label12:
        $r7 := @caughtexception;

     label13:
        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

        throw $r7;

     label14:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public org.apache.poi.poifs.filesystem.DirectoryNode getRoot()
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1, $r2, $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        org.apache.poi.poifs.property.NPropertyTable $r4;
        org.apache.poi.poifs.property.RootProperty $r5;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode _root>;

        if $r1 != null goto label1;

        $r3 = new org.apache.poi.poifs.filesystem.DirectoryNode;

        $r4 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.poifs.property.RootProperty getRoot()>();

        specialinvoke $r3.<org.apache.poi.poifs.filesystem.DirectoryNode: void <init>(org.apache.poi.poifs.property.DirectoryProperty,org.apache.poi.poifs.filesystem.NPOIFSFileSystem,org.apache.poi.poifs.filesystem.DirectoryNode)>($r5, r0, null);

        r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode _root> = $r3;

     label1:
        $r2 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode _root>;

        return $r2;
    }

    public org.apache.poi.poifs.filesystem.DocumentInputStream createDocumentInputStream(java.lang.String) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        java.lang.String r2;
        org.apache.poi.poifs.filesystem.DocumentInputStream $r3;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r3 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentInputStream createDocumentInputStream(java.lang.String)>(r2);

        return $r3;
    }

    void remove(org.apache.poi.poifs.filesystem.EntryNode) throws java.io.IOException
    {
        org.apache.poi.poifs.property.Property $r3, $r5;
        org.apache.poi.poifs.filesystem.NPOIFSDocument $r4;
        org.apache.poi.poifs.property.DocumentProperty $r6;
        org.apache.poi.poifs.filesystem.EntryNode r0;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r1;
        org.apache.poi.poifs.property.NPropertyTable $r2;
        boolean $z0;

        r1 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.EntryNode;

        $z0 = r0 instanceof org.apache.poi.poifs.filesystem.DocumentEntry;

        if $z0 == 0 goto label1;

        $r4 = new org.apache.poi.poifs.filesystem.NPOIFSDocument;

        $r5 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.EntryNode: org.apache.poi.poifs.property.Property getProperty()>();

        $r6 = (org.apache.poi.poifs.property.DocumentProperty) $r5;

        specialinvoke $r4.<org.apache.poi.poifs.filesystem.NPOIFSDocument: void <init>(org.apache.poi.poifs.property.DocumentProperty,org.apache.poi.poifs.filesystem.NPOIFSFileSystem)>($r6, r1);

        virtualinvoke $r4.<org.apache.poi.poifs.filesystem.NPOIFSDocument: void free()>();

     label1:
        $r2 = r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.property.NPropertyTable _property_table>;

        $r3 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.EntryNode: org.apache.poi.poifs.property.Property getProperty()>();

        virtualinvoke $r2.<org.apache.poi.poifs.property.NPropertyTable: void removeProperty(org.apache.poi.poifs.property.Property)>($r3);

        return;
    }

    public java.lang.Object[] getViewableArray()
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r2;
        java.lang.Object[] $r1, $r3;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $z0 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: boolean preferArray()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r3 = interfaceinvoke $r2.<org.apache.poi.poifs.dev.POIFSViewable: java.lang.Object[] getViewableArray()>();

        return $r3;

     label1:
        $r1 = newarray (java.lang.Object)[0];

        return $r1;
    }

    public java.util.Iterator getViewableIterator()
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r3;
        java.util.List $r1;
        java.util.Iterator $r2, $r4;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $z0 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: boolean preferArray()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r4 = interfaceinvoke $r3.<org.apache.poi.poifs.dev.POIFSViewable: java.util.Iterator getViewableIterator()>();

        return $r4;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean preferArray()
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $z0 = interfaceinvoke $r1.<org.apache.poi.poifs.dev.POIFSViewable: boolean preferArray()>();

        return $z0;
    }

    public java.lang.String getShortDescription()
    {
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        return "POIFS FileSystem";
    }

    public int getBigBlockSize()
    {
        int $i0;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i0 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        return $i0;
    }

    public org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSizeDetails()
    {
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        return $r1;
    }

    protected int getBlockStoreBlockSize()
    {
        int $i0;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: int getBigBlockSize()>();

        return $i0;
    }
}
