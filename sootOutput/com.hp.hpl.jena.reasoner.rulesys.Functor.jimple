public class com.hp.hpl.jena.reasoner.rulesys.Functor extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.ClauseEntry
{
    protected java.lang.String name;
    protected com.hp.hpl.jena.graph.Node[] args;
    protected com.hp.hpl.jena.reasoner.rulesys.Builtin implementor;
    public static final com.hp.hpl.jena.util.iterator.Filter acceptFilter;
    protected static org.slf4j.Logger logger;

    public void <init>(java.lang.String, java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.graph.Node[] $r3, $r5;
        java.lang.Object[] $r4;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name> = r1;

        $r3 = newarray (com.hp.hpl.jena.graph.Node)[0];

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (com.hp.hpl.jena.graph.Node[]) $r4;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args> = $r5;

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.graph.Node[] r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name> = r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args> = r2;

        return;
    }

    public void <init>(java.lang.String, java.util.List, com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry)
    {
        com.hp.hpl.jena.graph.Node[] $r3, $r5;
        java.lang.Object[] $r4;
        java.util.List r2;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r7;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry r6;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r6 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name> = r1;

        $r3 = newarray (com.hp.hpl.jena.graph.Node)[0];

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (com.hp.hpl.jena.graph.Node[]) $r4;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args> = $r5;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementation(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor> = $r7;

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node[] getArgs()
    {
        com.hp.hpl.jena.graph.Node[] $r1;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        return $r1;
    }

    public int getArgLength()
    {
        int $i0;
        com.hp.hpl.jena.graph.Node[] $r1;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean isGround()
    {
        com.hp.hpl.jena.graph.Node[] $r1, $r2;
        com.hp.hpl.jena.graph.Node r3;
        int $i0, i1;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        i1 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label4;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        r3 = $r2[i1];

        $z0 = r3 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 != 0 goto label2;

        $z1 = r3 instanceof com.hp.hpl.jena.graph.Node_ANY;

        if $z1 == 0 goto label3;

     label2:
        return 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 1;
    }

    public boolean isGround(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.graph.Node[] $r1, $r2, $r5;
        com.hp.hpl.jena.graph.Node r3, $r6, $r7;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r4;
        int $i0, i1;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        i1 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        r3 = $r2[i1];

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r6 = $r5[i1];

        $r7 = interfaceinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r6);

        $z0 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean evalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r2;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r4;
        int $i0;
        java.lang.String $r10, $r14, $r16;
        boolean $z0;
        com.hp.hpl.jena.graph.Node[] $r5, $r6;
        org.slf4j.Logger $r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r13;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r1, $r3;
        java.lang.StringBuilder $r7, $r9, $r11, $r12, $r15;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r1 != null goto label1;

        $r8 = <com.hp.hpl.jena.reasoner.rulesys.Functor: org.slf4j.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking undefined functor ");

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r13 = interfaceinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r16);

        return 0;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor>;

        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getBoundArgs(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r4);

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r6;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Builtin: boolean bodyCall(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r5, $i0, r2);

        return $z0;
    }

    public boolean safeEvalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r3;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r5;
        int $i0;
        java.lang.String $r11, $r15, $r17;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Node[] $r6, $r7;
        org.slf4j.Logger $r9;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r14;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r1, $r2, $r4;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r16;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r1 != null goto label1;

        $r9 = <com.hp.hpl.jena.reasoner.rulesys.Functor: org.slf4j.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking undefined functor ");

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r14 = interfaceinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>($r17);

        return 0;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Builtin: boolean isSafe()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor>;

        $r5 = interfaceinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getBoundArgs(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r5);

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r7;

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Builtin: boolean bodyCall(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r6, $i0, r3);

        return $z1;

     label2:
        return 0;
    }

    public com.hp.hpl.jena.graph.Node[] getBoundArgs(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.graph.Node[] $r1, r2, $r3, $r5;
        com.hp.hpl.jena.graph.Node $r6, $r7;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r4;
        int $i0, $i1, i2;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r1;

        r2 = newarray (com.hp.hpl.jena.graph.Node)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r6 = $r5[i2];

        $r7 = interfaceinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r6);

        r2[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()
    {
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r1, $r2, $r5;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry $r4;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor>;

        if $r1 != null goto label1;

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry theRegistry>;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementation(java.lang.String)>($r3);

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor> = $r5;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor>;

        return $r2;
    }

    public void setImplementor(com.hp.hpl.jena.reasoner.rulesys.Builtin)
    {
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        com.hp.hpl.jena.reasoner.rulesys.Builtin r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Builtin;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin implementor> = r1;

        return;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node[] $r3, $r5, $r8;
        com.hp.hpl.jena.graph.Node $r6;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.reasoner.rulesys.Functor r1;
        java.lang.String $r2, $r4, $r7;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r0 = new java.lang.StringBuffer;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        i3 = 0;

     label1:
        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label3;

        $r5 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r6 = $r5[i3];

        $r7 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i1 = lengthof $r8;

        $i2 = $i1 - 1;

        if i3 >= $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static boolean isFunctor(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r2;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.Functor$FunctorDatatype: com.hp.hpl.jena.datatypes.RDFDatatype theFunctorDatatype>;

        if $r1 != $r2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r10, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r0;
        com.hp.hpl.jena.reasoner.rulesys.Functor r1, r2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z0 == 0 goto label4;

        r1 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r0;

        $r4 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r5 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i1 = lengthof $r5;

        $r6 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r6;

        if $i1 != $i0 goto label4;

        i3 = 0;

     label1:
        $r7 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i2 = lengthof $r7;

        if i3 >= $i2 goto label3;

        $r8 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r11 = $r8[i3];

        $r9 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r10 = $r9[i3];

        $z2 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>($r10);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.graph.Node[] $r2;
        int $i0, $i1, $i2, $i3;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i1 = lengthof $r2;

        $i2 = $i1 << 2;

        $i3 = $i0 ^ $i2;

        return $i3;
    }

    public boolean sameAs(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r10, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r0;
        com.hp.hpl.jena.reasoner.rulesys.Functor r1, r2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z0 == 0 goto label4;

        r1 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r0;

        $r4 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String name>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r5 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i1 = lengthof $r5;

        $r6 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i0 = lengthof $r6;

        if $i1 != $i0 goto label4;

        i3 = 0;

     label1:
        $r7 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $i2 = lengthof $r7;

        if i3 >= $i2 goto label3;

        $r8 = r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r11 = $r8[i3];

        $r9 = r1.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] args>;

        $r10 = $r9[i3];

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean sameNodeAs(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r11, $r10);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static com.hp.hpl.jena.graph.Node makeFunctorNode(java.lang.String, com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.graph.Node[] r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node[];

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node[])>(r1, r2);

        $r3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node makeFunctorNode(com.hp.hpl.jena.reasoner.rulesys.Functor)>($r0);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node makeFunctorNode(com.hp.hpl.jena.reasoner.rulesys.Functor)
    {
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r1 = <com.hp.hpl.jena.reasoner.rulesys.Functor$FunctorDatatype: com.hp.hpl.jena.datatypes.RDFDatatype theFunctorDatatype>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createUncachedLiteral(java.lang.Object,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, null, $r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.reasoner.rulesys.Functor$1 $r0;
        org.slf4j.Logger $r1;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.Functor$1;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Functor$1: void <init>()>();

        <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.util.iterator.Filter acceptFilter> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/Functor;");

        <com.hp.hpl.jena.reasoner.rulesys.Functor: org.slf4j.Logger logger> = $r1;

        return;
    }
}
