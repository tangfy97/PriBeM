public final class org.waveprotocol.wave.model.util.ConcurrentSet extends java.lang.Object implements java.lang.Iterable
{
    private final java.util.Set set;
    private final java.util.Set added;
    private final java.util.Set removed;
    private boolean locked;

    public void <init>()
    {
        java.util.HashSet $r1, $r2, $r3;
        org.waveprotocol.wave.model.util.ConcurrentSet r0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set added> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set removed> = $r3;

        r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked> = 0;

        return;
    }

    public static org.waveprotocol.wave.model.util.ConcurrentSet create()
    {
        org.waveprotocol.wave.model.util.ConcurrentSet $r0;

        $r0 = new org.waveprotocol.wave.model.util.ConcurrentSet;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.ConcurrentSet: void <init>()>();

        return $r0;
    }

    public void lock()
    {
        org.waveprotocol.wave.model.util.ConcurrentSet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentSet;

        $z0 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked>;

        if $z0 != 0 goto label1;

        r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked> = 1;

     label1:
        return;
    }

    public void unlock()
    {
        java.util.Set $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.util.ConcurrentSet r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentSet;

        $z0 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked>;

        if $z0 == 0 goto label2;

        r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked> = 0;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set removed>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        $r6 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set removed>;

        interfaceinvoke $r7.<java.util.Set: boolean removeAll(java.util.Collection)>($r6);

        $r8 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set removed>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set added>;

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set added>;

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        $r5 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set added>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

     label2:
        return;
    }

    public void add(java.lang.Object)
    {
        java.util.Set $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.util.ConcurrentSet r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set added>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set removed>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label3:
        return;
    }

    public void remove(java.lang.Object)
    {
        java.util.Set $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.util.ConcurrentSet r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: boolean locked>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        goto label3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set removed>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set added>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label3:
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.ConcurrentSet r0;
        java.util.Iterator $r2;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentSet;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Set set>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }
}
