public abstract class org.apache.jena.riot.out.NodeFormatterBase extends java.lang.Object implements org.apache.jena.riot.out.NodeFormatter
{

    public void <init>()
    {
        org.apache.jena.riot.out.NodeFormatterBase r0;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void format(org.apache.jena.atlas.io.AWriter, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter r7;
        com.hp.hpl.jena.graph.Node r0, $r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r2;
        org.apache.jena.riot.out.NodeFormatterBase r8;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r8 := @this: org.apache.jena.riot.out.NodeFormatterBase;

        r7 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        virtualinvoke r8.<org.apache.jena.riot.out.NodeFormatterBase: void formatBNode(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>(r7, r0);

        goto label6;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label2;

        virtualinvoke r8.<org.apache.jena.riot.out.NodeFormatterBase: void formatURI(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>(r7, r0);

        goto label6;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        virtualinvoke r8.<org.apache.jena.riot.out.NodeFormatterBase: void formatLiteral(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>(r7, r0);

        goto label6;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        virtualinvoke r8.<org.apache.jena.riot.out.NodeFormatterBase: void formatVar(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>(r7, r0);

        goto label6;

     label4:
        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z4 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label5;

        interfaceinvoke r7.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>("ANY");

        goto label6;

     label5:
        $r2 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknow node type: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label6:
        return;
    }

    public void formatURI(org.apache.jena.atlas.io.AWriter, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.out.NodeFormatterBase r0;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r3;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterBase;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        virtualinvoke r0.<org.apache.jena.riot.out.NodeFormatterBase: void formatURI(org.apache.jena.atlas.io.AWriter,java.lang.String)>(r1, $r3);

        return;
    }

    public void formatBNode(org.apache.jena.atlas.io.AWriter, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.out.NodeFormatterBase r0;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r3;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterBase;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        virtualinvoke r0.<org.apache.jena.riot.out.NodeFormatterBase: void formatBNode(org.apache.jena.atlas.io.AWriter,java.lang.String)>(r1, $r3);

        return;
    }

    public void formatLiteral(org.apache.jena.atlas.io.AWriter, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter r5;
        org.apache.jena.riot.out.NodeFormatterBase r4;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r4 := @this: org.apache.jena.riot.out.NodeFormatterBase;

        r5 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        if $r1 != null goto label3;

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r4.<org.apache.jena.riot.out.NodeFormatterBase: void formatLitString(org.apache.jena.atlas.io.AWriter,java.lang.String)>(r5, $r3);

        goto label4;

     label2:
        virtualinvoke r4.<org.apache.jena.riot.out.NodeFormatterBase: void formatLitLang(org.apache.jena.atlas.io.AWriter,java.lang.String,java.lang.String)>(r5, $r3, $r2);

        goto label4;

     label3:
        virtualinvoke r4.<org.apache.jena.riot.out.NodeFormatterBase: void formatLitDT(org.apache.jena.atlas.io.AWriter,java.lang.String,java.lang.String)>(r5, $r3, $r1);

     label4:
        return;
    }

    public void formatVar(org.apache.jena.atlas.io.AWriter, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.out.NodeFormatterBase r0;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r3;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterBase;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.jena.riot.out.NodeFormatterBase: void formatVar(org.apache.jena.atlas.io.AWriter,java.lang.String)>(r1, $r3);

        return;
    }
}
