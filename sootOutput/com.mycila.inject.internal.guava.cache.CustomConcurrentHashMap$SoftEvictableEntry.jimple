final class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry extends com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEntry implements com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry
{
    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry nextEvictable;
    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry previousEvictable;

    void <init>(java.lang.ref.ReferenceQueue, java.lang.Object, int, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        int i0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r4, $r5;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry r0;
        java.lang.ref.ReferenceQueue r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry;

        r1 := @parameter0: java.lang.ref.ReferenceQueue;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r3 := @parameter3: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEntry: void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r1, r2, i0, r3);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry nullEntry()>();

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry nextEvictable> = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry nullEntry()>();

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry previousEvictable> = $r5;

        return;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry nextEvictable>;

        return $r1;
    }

    public void setNextEvictable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry nextEvictable> = r1;

        return;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry previousEvictable>;

        return $r1;
    }

    public void setPreviousEvictable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SoftEvictableEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry previousEvictable> = r1;

        return;
    }
}
