class org.tukaani.xz.SimpleOutputStream extends org.tukaani.xz.FinishableOutputStream
{
    private static final int FILTER_BUF_SIZE;
    private org.tukaani.xz.FinishableOutputStream out;
    private final org.tukaani.xz.simple.SimpleFilter simpleFilter;
    private final byte[] filterBuf;
    private int pos;
    private int unfiltered;
    private java.io.IOException exception;
    private boolean finished;
    private final byte[] tempBuf;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$SimpleOutputStream;

    static int getMemoryUsage()
    {
        return 5;
    }

    void <init>(org.tukaani.xz.FinishableOutputStream, org.tukaani.xz.simple.SimpleFilter)
    {
        byte[] $r1, $r2;
        org.tukaani.xz.simple.SimpleFilter r4;
        org.tukaani.xz.FinishableOutputStream r3;
        org.tukaani.xz.SimpleOutputStream r0;
        java.lang.NullPointerException $r5;

        r0 := @this: org.tukaani.xz.SimpleOutputStream;

        r3 := @parameter0: org.tukaani.xz.FinishableOutputStream;

        r4 := @parameter1: org.tukaani.xz.simple.SimpleFilter;

        specialinvoke r0.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        $r1 = newarray (byte)[4096];

        r0.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf> = $r1;

        r0.<org.tukaani.xz.SimpleOutputStream: int pos> = 0;

        r0.<org.tukaani.xz.SimpleOutputStream: int unfiltered> = 0;

        r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception> = null;

        r0.<org.tukaani.xz.SimpleOutputStream: boolean finished> = 0;

        $r2 = newarray (byte)[1];

        r0.<org.tukaani.xz.SimpleOutputStream: byte[] tempBuf> = $r2;

        if r3 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out> = r3;

        r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.simple.SimpleFilter simpleFilter> = r4;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2;
        byte $b1;
        int i0;
        org.tukaani.xz.SimpleOutputStream r0;

        r0 := @this: org.tukaani.xz.SimpleOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SimpleOutputStream: byte[] tempBuf>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        $r2 = r0.<org.tukaani.xz.SimpleOutputStream: byte[] tempBuf>;

        virtualinvoke r0.<org.tukaani.xz.SimpleOutputStream: void write(byte[],int,int)>($r2, 0, 1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r0, $r3, $r4, $r6, $r8, $r9;
        java.lang.IndexOutOfBoundsException $r14;
        org.tukaani.xz.simple.SimpleFilter $r5;
        boolean $z0, $z1;
        org.tukaani.xz.XZIOException $r11;
        org.tukaani.xz.SimpleOutputStream r1;
        java.lang.AssertionError $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28;
        java.io.IOException $r2, $r12, $r13;
        org.tukaani.xz.FinishableOutputStream $r7;

        r1 := @this: org.tukaani.xz.SimpleOutputStream;

        r0 := @parameter0: byte[];

        i27 := @parameter1: int;

        i28 := @parameter2: int;

        if i27 < 0 goto label01;

        if i28 < 0 goto label01;

        $i0 = i27 + i28;

        if $i0 < 0 goto label01;

        $i2 = i27 + i28;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label02;

     label01:
        $r14 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r14.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r14;

     label02:
        $r2 = r1.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        if $r2 == null goto label03;

        $r12 = r1.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        throw $r12;

     label03:
        $z0 = r1.<org.tukaani.xz.SimpleOutputStream: boolean finished>;

        if $z0 == 0 goto label04;

        $r11 = new org.tukaani.xz.XZIOException;

        specialinvoke $r11.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r11;

     label04:
        if i28 <= 0 goto label11;

        $i4 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $i3 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        $i5 = $i4 + $i3;

        $i6 = 4096 - $i5;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i28, $i6);

        $r3 = r1.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf>;

        $i9 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $i8 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        $i10 = $i9 + $i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i27, $r3, $i10, $i7);

        i27 = i27 + $i7;

        i28 = i28 - $i7;

        $i11 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        $i12 = $i11 + $i7;

        r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered> = $i12;

        $r5 = r1.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.simple.SimpleFilter simpleFilter>;

        $r4 = r1.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf>;

        $i14 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $i13 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        $i15 = interfaceinvoke $r5.<org.tukaani.xz.simple.SimpleFilter: int code(byte[],int,int)>($r4, $i14, $i13);

        $z1 = <org.tukaani.xz.SimpleOutputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        $i26 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        if $i15 <= $i26 goto label05;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label05:
        $i16 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        $i17 = $i16 - $i15;

        r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered> = $i17;

     label06:
        $r7 = r1.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out>;

        $r6 = r1.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf>;

        $i18 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        virtualinvoke $r7.<org.tukaani.xz.FinishableOutputStream: void write(byte[],int,int)>($r6, $i18, $i15);

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        r1.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception> = $r13;

        throw $r13;

     label09:
        $i19 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $i20 = $i19 + $i15;

        r1.<org.tukaani.xz.SimpleOutputStream: int pos> = $i20;

        $i22 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $i21 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        $i23 = $i22 + $i21;

        if $i23 != 4096 goto label10;

        $r9 = r1.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf>;

        $i25 = r1.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $r8 = r1.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf>;

        $i24 = r1.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i25, $r8, 0, $i24);

        r1.<org.tukaani.xz.SimpleOutputStream: int pos> = 0;

     label10:
        goto label04;

     label11:
        return;

        catch java.io.IOException from label06 to label07 with label08;
    }

    private void writePending() throws java.io.IOException
    {
        byte[] $r2;
        java.io.IOException $r1, $r4, $r6;
        java.lang.AssertionError $r5;
        int $i0, $i1;
        org.tukaani.xz.FinishableOutputStream $r3;
        org.tukaani.xz.SimpleOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.SimpleOutputStream;

        $z0 = <org.tukaani.xz.SimpleOutputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.tukaani.xz.SimpleOutputStream: boolean finished>;

        if $z1 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r1 = r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        if $r1 == null goto label2;

        $r4 = r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        throw $r4;

     label2:
        $r3 = r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out>;

        $r2 = r0.<org.tukaani.xz.SimpleOutputStream: byte[] filterBuf>;

        $i1 = r0.<org.tukaani.xz.SimpleOutputStream: int pos>;

        $i0 = r0.<org.tukaani.xz.SimpleOutputStream: int unfiltered>;

        virtualinvoke $r3.<org.tukaani.xz.FinishableOutputStream: void write(byte[],int,int)>($r2, $i1, $i0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception> = $r6;

        throw $r6;

     label5:
        r0.<org.tukaani.xz.SimpleOutputStream: boolean finished> = 1;

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void flush() throws java.io.IOException
    {
        org.tukaani.xz.UnsupportedOptionsException $r0;
        org.tukaani.xz.SimpleOutputStream r1;

        r1 := @this: org.tukaani.xz.SimpleOutputStream;

        $r0 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r0.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Flushing is not supported");

        throw $r0;
    }

    public void finish() throws java.io.IOException
    {
        org.tukaani.xz.FinishableOutputStream $r1;
        java.io.IOException $r2;
        org.tukaani.xz.SimpleOutputStream r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.SimpleOutputStream;

        $z0 = r0.<org.tukaani.xz.SimpleOutputStream: boolean finished>;

        if $z0 != 0 goto label4;

        specialinvoke r0.<org.tukaani.xz.SimpleOutputStream: void writePending()>();

     label1:
        $r1 = r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r1.<org.tukaani.xz.FinishableOutputStream: void finish()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception> = $r2;

        throw $r2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        java.io.IOException $r2, $r3, $r4, $r5, $r7;
        org.tukaani.xz.FinishableOutputStream $r1, $r6;
        org.tukaani.xz.SimpleOutputStream r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.SimpleOutputStream;

        $r1 = r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out>;

        if $r1 == null goto label8;

        $z0 = r0.<org.tukaani.xz.SimpleOutputStream: boolean finished>;

        if $z0 != 0 goto label4;

     label1:
        specialinvoke r0.<org.tukaani.xz.SimpleOutputStream: void writePending()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r6.<org.tukaani.xz.FinishableOutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        if $r4 != null goto label7;

        r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception> = $r3;

     label7:
        r0.<org.tukaani.xz.SimpleOutputStream: org.tukaani.xz.FinishableOutputStream out> = null;

     label8:
        $r7 = r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        if $r7 == null goto label9;

        $r2 = r0.<org.tukaani.xz.SimpleOutputStream: java.io.IOException exception>;

        throw $r2;

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.tukaani.xz.SimpleOutputStream: int FILTER_BUF_SIZE> = 4096;

        $r0 = <org.tukaani.xz.SimpleOutputStream: java.lang.Class class$org$tukaani$xz$SimpleOutputStream>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.SimpleOutputStream: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.SimpleOutputStream");

        <org.tukaani.xz.SimpleOutputStream: java.lang.Class class$org$tukaani$xz$SimpleOutputStream> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.SimpleOutputStream: java.lang.Class class$org$tukaani$xz$SimpleOutputStream>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.SimpleOutputStream: boolean $assertionsDisabled> = $z1;

        return;
    }
}
