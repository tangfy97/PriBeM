public abstract class org.apache.http.pool.AbstractConnPool extends java.lang.Object implements org.apache.http.pool.ConnPool, org.apache.http.pool.ConnPoolControl
{
    private final java.util.concurrent.locks.Lock lock;
    private final org.apache.http.pool.ConnFactory connFactory;
    private final java.util.Map routeToPool;
    private final java.util.Set leased;
    private final java.util.LinkedList available;
    private final java.util.LinkedList pending;
    private final java.util.Map maxPerRoute;
    private volatile boolean isShutDown;
    private volatile int defaultMaxPerRoute;
    private volatile int maxTotal;

    public void <init>(org.apache.http.pool.ConnFactory, int, int)
    {
        org.apache.http.pool.AbstractConnPool r0;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.HashMap $r3, $r7;
        java.lang.IllegalArgumentException $r8, $r9, $r10;
        org.apache.http.pool.ConnFactory r1;
        java.util.HashSet $r4;
        int i0, i1;
        java.util.LinkedList $r5, $r6;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r1 := @parameter0: org.apache.http.pool.ConnFactory;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection factory may not null");

        throw $r10;

     label1:
        if i0 > 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max per route value may not be negative or zero");

        throw $r9;

     label2:
        if i1 > 0 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max total value may not be negative or zero");

        throw $r8;

     label3:
        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock> = $r2;

        r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.ConnFactory connFactory> = r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.pool.AbstractConnPool: java.util.Map routeToPool> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.pool.AbstractConnPool: java.util.Map maxPerRoute> = $r7;

        r0.<org.apache.http.pool.AbstractConnPool: int defaultMaxPerRoute> = i0;

        r0.<org.apache.http.pool.AbstractConnPool: int maxTotal> = i1;

        return;
    }

    protected abstract org.apache.http.pool.PoolEntry createEntry(java.lang.Object, java.lang.Object);

    public boolean isShutdown()
    {
        org.apache.http.pool.AbstractConnPool r0;
        boolean $z0;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        $z0 = r0.<org.apache.http.pool.AbstractConnPool: boolean isShutDown>;

        return $z0;
    }

    public void shutdown() throws java.io.IOException
    {
        java.lang.Throwable $r16;
        org.apache.http.pool.RouteSpecificPool r20;
        org.apache.http.pool.PoolEntry r18, r19;
        java.util.Map $r6, $r9;
        java.util.LinkedList $r2, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.Iterator $r3, $r5, $r8;
        java.util.Collection $r7;
        java.util.Set $r4, $r10;
        java.util.concurrent.locks.Lock $r1, $r12, $r17;
        java.lang.Object $r13, $r14, $r15;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        $z0 = r0.<org.apache.http.pool.AbstractConnPool: boolean isShutDown>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r0.<org.apache.http.pool.AbstractConnPool: boolean isShutDown> = 1;

        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label02:
        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r15 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.http.pool.PoolEntry) $r15;

        virtualinvoke r18.<org.apache.http.pool.PoolEntry: void close()>();

        goto label03;

     label04:
        $r4 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r14 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.http.pool.PoolEntry) $r14;

        virtualinvoke r19.<org.apache.http.pool.PoolEntry: void close()>();

        goto label05;

     label06:
        $r6 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Map routeToPool>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r13 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.http.pool.RouteSpecificPool) $r13;

        virtualinvoke r20.<org.apache.http.pool.RouteSpecificPool: void shutdown()>();

        goto label07;

     label08:
        $r9 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Map routeToPool>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        $r10 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        $r11 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        virtualinvoke $r11.<java.util.LinkedList: void clear()>();

     label09:
        $r12 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label12;

     label10:
        $r16 := @caughtexception;

     label11:
        $r17 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r17.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r16;

     label12:
        return;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)
    {
        org.apache.http.pool.AbstractConnPool r0;
        org.apache.http.pool.AbstractConnPool$1 $r4;
        org.apache.http.pool.RouteSpecificPool r6;
        java.util.Map $r2, $r5;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Map routeToPool>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.apache.http.pool.RouteSpecificPool) $r3;

        if r6 != null goto label1;

        $r4 = new org.apache.http.pool.AbstractConnPool$1;

        specialinvoke $r4.<org.apache.http.pool.AbstractConnPool$1: void <init>(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object)>(r0, r1, r1);

        r6 = $r4;

        $r5 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Map routeToPool>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public java.util.concurrent.Future lease(java.lang.Object, java.lang.Object, org.apache.http.concurrent.FutureCallback)
    {
        org.apache.http.pool.AbstractConnPool r1;
        java.lang.IllegalStateException $r6;
        org.apache.http.concurrent.FutureCallback r3;
        java.lang.IllegalArgumentException $r7;
        org.apache.http.pool.AbstractConnPool$2 $r2;
        java.util.concurrent.locks.Lock $r5;
        java.lang.Object r0, r4;
        boolean $z0;

        r1 := @this: org.apache.http.pool.AbstractConnPool;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.http.concurrent.FutureCallback;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null");

        throw $r7;

     label1:
        $z0 = r1.<org.apache.http.pool.AbstractConnPool: boolean isShutDown>;

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection pool shut down");

        throw $r6;

     label2:
        $r2 = new org.apache.http.pool.AbstractConnPool$2;

        $r5 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        specialinvoke $r2.<org.apache.http.pool.AbstractConnPool$2: void <init>(org.apache.http.pool.AbstractConnPool,java.util.concurrent.locks.Lock,org.apache.http.concurrent.FutureCallback,java.lang.Object,java.lang.Object)>(r1, $r5, r3, r0, r4);

        return $r2;
    }

    public java.util.concurrent.Future lease(java.lang.Object, java.lang.Object)
    {
        org.apache.http.pool.AbstractConnPool r0;
        java.util.concurrent.Future $r3;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.Future lease(java.lang.Object,java.lang.Object,org.apache.http.concurrent.FutureCallback)>(r1, r2, null);

        return $r3;
    }

    private org.apache.http.pool.PoolEntry getPoolEntryBlocking(java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.pool.PoolEntryFuture) throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        byte $b1, $b10;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.Set $r11, $r21, $r36;
        java.lang.Throwable $r26, $r28;
        org.apache.http.pool.RouteSpecificPool $r3, $r17;
        org.apache.http.pool.PoolEntry $r6, $r18, r31, r32, $r35;
        long l0, $l2, $l8, $l9, $l17, $l18, $l19;
        java.util.concurrent.locks.Lock $r1, $r22, $r27, $r37;
        java.lang.IllegalStateException $r39;
        java.util.Date r30, $r38;
        java.util.concurrent.TimeoutException $r40;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.http.pool.PoolEntryFuture r8;
        org.apache.http.pool.ConnFactory $r33;
        int $i3, $i4, $i5, $i6, $i7, $i11, $i12, $i13, $i14, $i15, $i16, i20, $i21, $i22, $i23;
        java.util.LinkedList $r7, $r9, $r10, $r12, $r13, $r14, $r19, $r20, $r29;
        java.util.concurrent.TimeUnit r25;
        java.lang.Object r2, r5, $r15, $r16, $r34;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        l0 := @parameter2: long;

        r25 := @parameter3: java.util.concurrent.TimeUnit;

        r8 := @parameter4: org.apache.http.pool.PoolEntryFuture;

        r30 = null;

        $b1 = l0 cmp 0L;

        $i22 = (int) $b1;

        if $i22 <= 0 goto label01;

        $r38 = new java.util.Date;

        $l17 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l18 = virtualinvoke r25.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $l19 = $l17 + $l18;

        specialinvoke $r38.<java.util.Date: void <init>(long)>($l19);

        r30 = $r38;

     label01:
        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label02:
        $r3 = specialinvoke r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)>(r2);

        r31 = null;

     label03:
        if r31 != null goto label21;

        $z0 = r0.<org.apache.http.pool.AbstractConnPool: boolean isShutDown>;

        if $z0 == 0 goto label04;

        $r39 = new java.lang.IllegalStateException;

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection pool shut down");

        throw $r39;

     label04:
        $r6 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry getFree(java.lang.Object)>(r5);

        r31 = $r6;

        if $r6 != null goto label05;

        goto label07;

     label05:
        $z1 = virtualinvoke $r6.<org.apache.http.pool.PoolEntry: boolean isClosed()>();

        if $z1 != 0 goto label06;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z2 = virtualinvoke $r6.<org.apache.http.pool.PoolEntry: boolean isExpired(long)>($l2);

        if $z2 == 0 goto label07;

     label06:
        virtualinvoke $r6.<org.apache.http.pool.PoolEntry: void close()>();

        $r7 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        virtualinvoke $r7.<java.util.LinkedList: boolean remove(java.lang.Object)>($r6);

        virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: void free(org.apache.http.pool.PoolEntry,boolean)>($r6, 0);

        goto label04;

     label07:
        if $r6 == null goto label09;

        $r20 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        virtualinvoke $r20.<java.util.LinkedList: boolean remove(java.lang.Object)>($r6);

        $r21 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label08:
        $r22 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r22.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label09:
        $i3 = specialinvoke r0.<org.apache.http.pool.AbstractConnPool: int getMax(java.lang.Object)>(r2);

        $i4 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: int getAllocatedCount()>();

        $i5 = $i4 + 1;

        $i6 = $i5 - $i3;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6);

        if $i7 <= 0 goto label12;

        i20 = 0;

     label10:
        if i20 >= $i7 goto label12;

        $r18 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry getLastUsed()>();

        if $r18 != null goto label11;

        goto label12;

     label11:
        virtualinvoke $r18.<org.apache.http.pool.PoolEntry: void close()>();

        $r19 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        virtualinvoke $r19.<java.util.LinkedList: boolean remove(java.lang.Object)>($r18);

        virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: boolean remove(org.apache.http.pool.PoolEntry)>($r18);

        i20 = i20 + 1;

        goto label10;

     label12:
        $i21 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: int getAllocatedCount()>();

        if $i21 >= $i3 goto label15;

        $r11 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        $i11 = interfaceinvoke $r11.<java.util.Set: int size()>();

        $i12 = r0.<org.apache.http.pool.AbstractConnPool: int maxTotal>;

        $i13 = $i12 - $i11;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i13, 0);

        if $i14 <= 0 goto label15;

        $r12 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $i15 = virtualinvoke $r12.<java.util.LinkedList: int size()>();

        $i16 = $i14 - 1;

        if $i15 <= $i16 goto label13;

        $r13 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $z4 = virtualinvoke $r13.<java.util.LinkedList: boolean isEmpty()>();

        if $z4 != 0 goto label13;

        $r14 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $r15 = virtualinvoke $r14.<java.util.LinkedList: java.lang.Object removeLast()>();

        r32 = (org.apache.http.pool.PoolEntry) $r15;

        virtualinvoke r32.<org.apache.http.pool.PoolEntry: void close()>();

        $r16 = virtualinvoke r32.<org.apache.http.pool.PoolEntry: java.lang.Object getRoute()>();

        $r17 = specialinvoke r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)>($r16);

        virtualinvoke $r17.<org.apache.http.pool.RouteSpecificPool: boolean remove(org.apache.http.pool.PoolEntry)>(r32);

     label13:
        $r33 = r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.ConnFactory connFactory>;

        $r34 = interfaceinvoke $r33.<org.apache.http.pool.ConnFactory: java.lang.Object create(java.lang.Object)>(r2);

        $r35 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry add(java.lang.Object)>($r34);

        $r36 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        interfaceinvoke $r36.<java.util.Set: boolean add(java.lang.Object)>($r35);

     label14:
        $r37 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r37.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r35;

     label15:
        virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: void queue(org.apache.http.pool.PoolEntryFuture)>(r8);

        $r9 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        virtualinvoke $r9.<java.util.LinkedList: boolean add(java.lang.Object)>(r8);

        $z3 = virtualinvoke r8.<org.apache.http.pool.PoolEntryFuture: boolean await(java.util.Date)>(r30);

     label16:
        virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: void unqueue(org.apache.http.pool.PoolEntryFuture)>(r8);

        $r10 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        virtualinvoke $r10.<java.util.LinkedList: boolean remove(java.lang.Object)>(r8);

        goto label19;

     label17:
        $r28 := @caughtexception;

     label18:
        virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: void unqueue(org.apache.http.pool.PoolEntryFuture)>(r8);

        $r29 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        virtualinvoke $r29.<java.util.LinkedList: boolean remove(java.lang.Object)>(r8);

        throw $r28;

     label19:
        if $z3 != 0 goto label20;

        if r30 == null goto label20;

        $l8 = virtualinvoke r30.<java.util.Date: long getTime()>();

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b10 = $l8 cmp $l9;

        $i23 = (int) $b10;

        if $i23 > 0 goto label20;

        goto label21;

     label20:
        goto label03;

     label21:
        $r40 = new java.util.concurrent.TimeoutException;

        specialinvoke $r40.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>("Timeout waiting for connection");

        throw $r40;

     label22:
        $r26 := @caughtexception;

     label23:
        $r27 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r27.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r26;

        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label02 to label08 with label22;
        catch java.lang.Throwable from label09 to label14 with label22;
        catch java.lang.Throwable from label15 to label23 with label22;
    }

    private void notifyPending(org.apache.http.pool.RouteSpecificPool)
    {
        org.apache.http.pool.RouteSpecificPool r0;
        org.apache.http.pool.AbstractConnPool r2;
        org.apache.http.pool.PoolEntryFuture $r1, r6;
        java.lang.Object $r4;
        java.util.LinkedList $r3, $r5;

        r2 := @this: org.apache.http.pool.AbstractConnPool;

        r0 := @parameter0: org.apache.http.pool.RouteSpecificPool;

        $r1 = virtualinvoke r0.<org.apache.http.pool.RouteSpecificPool: org.apache.http.pool.PoolEntryFuture nextPending()>();

        r6 = $r1;

        if $r1 == null goto label1;

        $r5 = r2.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        virtualinvoke $r5.<java.util.LinkedList: boolean remove(java.lang.Object)>($r1);

        goto label2;

     label1:
        $r3 = r2.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object poll()>();

        r6 = (org.apache.http.pool.PoolEntryFuture) $r4;

     label2:
        if r6 == null goto label3;

        virtualinvoke r6.<org.apache.http.pool.PoolEntryFuture: void wakeup()>();

     label3:
        return;
    }

    public void release(org.apache.http.pool.PoolEntry, boolean)
    {
        java.lang.Throwable $r7;
        org.apache.http.pool.AbstractConnPool r0;
        org.apache.http.pool.RouteSpecificPool $r5;
        org.apache.http.pool.PoolEntry r2;
        java.util.Set $r3;
        java.util.concurrent.locks.Lock $r1, $r8, $r9;
        java.lang.Object $r4;
        java.util.LinkedList $r6;
        boolean $z0, z1, $z2;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r2 := @parameter0: org.apache.http.pool.PoolEntry;

        z1 := @parameter1: boolean;

        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r3 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r2.<org.apache.http.pool.PoolEntry: java.lang.Object getRoute()>();

        $r5 = specialinvoke r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)>($r4);

        virtualinvoke $r5.<org.apache.http.pool.RouteSpecificPool: void free(org.apache.http.pool.PoolEntry,boolean)>(r2, z1);

        if z1 == 0 goto label2;

        $z2 = r0.<org.apache.http.pool.AbstractConnPool: boolean isShutDown>;

        if $z2 != 0 goto label2;

        $r6 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        virtualinvoke $r6.<java.util.LinkedList: void addFirst(java.lang.Object)>(r2);

        goto label3;

     label2:
        virtualinvoke r2.<org.apache.http.pool.PoolEntry: void close()>();

     label3:
        specialinvoke r0.<org.apache.http.pool.AbstractConnPool: void notifyPending(org.apache.http.pool.RouteSpecificPool)>($r5);

     label4:
        $r9 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        $r8 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int getMax(java.lang.Object)
    {
        org.apache.http.pool.AbstractConnPool r0;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Integer r4;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Map maxPerRoute>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label1;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i1;

     label1:
        $i0 = r0.<org.apache.http.pool.AbstractConnPool: int defaultMaxPerRoute>;

        return $i0;
    }

    public void setMaxTotal(int)
    {
        java.lang.Throwable $r4;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.concurrent.locks.Lock $r1, $r2, $r5;
        int i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max value may not be negative or zero");

        throw $r3;

     label1:
        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label2:
        r0.<org.apache.http.pool.AbstractConnPool: int maxTotal> = i0;

     label3:
        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getMaxTotal()
    {
        java.lang.Throwable $r3;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.concurrent.locks.Lock $r1, $r2, $r4;
        int i0;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        i0 = r0.<org.apache.http.pool.AbstractConnPool: int maxTotal>;

     label2:
        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setDefaultMaxPerRoute(int)
    {
        java.lang.Throwable $r4;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.concurrent.locks.Lock $r1, $r2, $r5;
        int i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max value may not be negative or zero");

        throw $r3;

     label1:
        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label2:
        r0.<org.apache.http.pool.AbstractConnPool: int defaultMaxPerRoute> = i0;

     label3:
        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getDefaultMaxPerRoute()
    {
        java.lang.Throwable $r3;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.concurrent.locks.Lock $r1, $r2, $r4;
        int i0;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        i0 = r0.<org.apache.http.pool.AbstractConnPool: int defaultMaxPerRoute>;

     label2:
        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setMaxPerRoute(java.lang.Object, int)
    {
        java.lang.Throwable $r8;
        org.apache.http.pool.AbstractConnPool r1;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.Integer $r4;
        java.util.concurrent.locks.Lock $r2, $r5, $r9;
        java.util.Map $r3;
        int i0;
        java.lang.Object r0;

        r1 := @this: org.apache.http.pool.AbstractConnPool;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null");

        throw $r7;

     label1:
        if i0 > 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max value may not be negative or zero");

        throw $r6;

     label2:
        $r2 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label3:
        $r3 = r1.<org.apache.http.pool.AbstractConnPool: java.util.Map maxPerRoute>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

     label4:
        $r5 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        $r9 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getMaxPerRoute(java.lang.Object)
    {
        java.lang.Throwable $r5;
        org.apache.http.pool.AbstractConnPool r1;
        java.lang.IllegalArgumentException $r4;
        java.util.concurrent.locks.Lock $r2, $r3, $r6;
        int $i0;
        java.lang.Object r0;

        r1 := @this: org.apache.http.pool.AbstractConnPool;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label2:
        $i0 = specialinvoke r1.<org.apache.http.pool.AbstractConnPool: int getMax(java.lang.Object)>(r0);

     label3:
        $r3 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $i0;

     label4:
        $r5 := @caughtexception;

     label5:
        $r6 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.http.pool.PoolStats getTotalStats()
    {
        java.lang.Throwable $r7;
        org.apache.http.pool.AbstractConnPool r0;
        java.util.Set $r3;
        java.util.concurrent.locks.Lock $r1, $r6, $r8;
        int $i0, $i1, $i2, $i3;
        java.util.LinkedList $r4, $r5;
        org.apache.http.pool.PoolStats $r2;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = new org.apache.http.pool.PoolStats;

        $r3 = r0.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r4 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        $i1 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        $r5 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $i2 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        $i3 = r0.<org.apache.http.pool.AbstractConnPool: int maxTotal>;

        specialinvoke $r2.<org.apache.http.pool.PoolStats: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

     label2:
        $r6 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r2;

     label3:
        $r7 := @caughtexception;

     label4:
        $r8 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.http.pool.PoolStats getStats(java.lang.Object)
    {
        java.lang.Throwable $r7;
        org.apache.http.pool.AbstractConnPool r1;
        org.apache.http.pool.RouteSpecificPool $r3;
        java.lang.IllegalArgumentException $r6;
        java.util.concurrent.locks.Lock $r2, $r5, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        org.apache.http.pool.PoolStats $r4;

        r1 := @this: org.apache.http.pool.AbstractConnPool;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label2:
        $r3 = specialinvoke r1.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)>(r0);

        $r4 = new org.apache.http.pool.PoolStats;

        $i0 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: int getLeasedCount()>();

        $i1 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: int getPendingCount()>();

        $i2 = virtualinvoke $r3.<org.apache.http.pool.RouteSpecificPool: int getAvailableCount()>();

        $i3 = specialinvoke r1.<org.apache.http.pool.AbstractConnPool: int getMax(java.lang.Object)>(r0);

        specialinvoke $r4.<org.apache.http.pool.PoolStats: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

     label3:
        $r5 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label4:
        $r7 := @caughtexception;

     label5:
        $r8 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void closeIdle(long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r11;
        org.apache.http.pool.RouteSpecificPool $r9;
        org.apache.http.pool.PoolEntry r7;
        long l0, $l1, $l3, $l4, $l6, l7;
        byte $b2, $b5;
        int $i8, $i9;
        java.util.LinkedList $r3;
        boolean $z0;
        org.apache.http.pool.AbstractConnPool r1;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r13;
        java.util.concurrent.TimeUnit r0;
        java.util.concurrent.locks.Lock $r2, $r5, $r12;
        java.lang.Object $r6, $r8;

        r1 := @this: org.apache.http.pool.AbstractConnPool;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        if r0 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time unit must not be null.");

        throw $r13;

     label1:
        $l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        l7 = $l1;

        $b2 = $l1 cmp 0L;

        $i8 = (int) $b2;

        if $i8 >= 0 goto label2;

        l7 = 0L;

     label2:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l3 - l7;

        $r2 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label3:
        $r3 = r1.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.http.pool.PoolEntry) $r6;

        $l4 = virtualinvoke r7.<org.apache.http.pool.PoolEntry: long getUpdated()>();

        $b5 = $l4 cmp $l6;

        $i9 = (int) $b5;

        if $i9 > 0 goto label5;

        virtualinvoke r7.<org.apache.http.pool.PoolEntry: void close()>();

        $r8 = virtualinvoke r7.<org.apache.http.pool.PoolEntry: java.lang.Object getRoute()>();

        $r9 = specialinvoke r1.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)>($r8);

        virtualinvoke $r9.<org.apache.http.pool.RouteSpecificPool: boolean remove(org.apache.http.pool.PoolEntry)>(r7);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        specialinvoke r1.<org.apache.http.pool.AbstractConnPool: void notifyPending(org.apache.http.pool.RouteSpecificPool)>($r9);

     label5:
        goto label4;

     label6:
        $r5 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label9;

     label7:
        $r11 := @caughtexception;

     label8:
        $r12 = r1.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r11;

     label9:
        return;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void closeExpired()
    {
        java.lang.Throwable $r9;
        org.apache.http.pool.AbstractConnPool r0;
        org.apache.http.pool.RouteSpecificPool $r8;
        org.apache.http.pool.PoolEntry r6;
        java.util.Iterator $r3;
        long $l0;
        java.util.concurrent.locks.Lock $r1, $r4, $r10;
        java.lang.Object $r5, $r7;
        java.util.LinkedList $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = r0.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.http.pool.PoolEntry) $r5;

        $z1 = virtualinvoke r6.<org.apache.http.pool.PoolEntry: boolean isExpired(long)>($l0);

        if $z1 == 0 goto label3;

        virtualinvoke r6.<org.apache.http.pool.PoolEntry: void close()>();

        $r7 = virtualinvoke r6.<org.apache.http.pool.PoolEntry: java.lang.Object getRoute()>();

        $r8 = specialinvoke r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object)>($r7);

        virtualinvoke $r8.<org.apache.http.pool.RouteSpecificPool: boolean remove(org.apache.http.pool.PoolEntry)>(r6);

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        specialinvoke r0.<org.apache.http.pool.AbstractConnPool: void notifyPending(org.apache.http.pool.RouteSpecificPool)>($r8);

     label3:
        goto label2;

     label4:
        $r4 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label7;

     label5:
        $r9 := @caughtexception;

     label6:
        $r10 = r0.<org.apache.http.pool.AbstractConnPool: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String toString()
    {
        org.apache.http.pool.AbstractConnPool r1;
        java.util.Set $r2;
        java.lang.StringBuilder $r0;
        java.lang.String $r5;
        java.util.LinkedList $r3, $r4;

        r1 := @this: org.apache.http.pool.AbstractConnPool;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[leased: ");

        $r2 = r1.<org.apache.http.pool.AbstractConnPool: java.util.Set leased>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][available: ");

        $r3 = r1.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList available>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][pending: ");

        $r4 = r1.<org.apache.http.pool.AbstractConnPool: java.util.LinkedList pending>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public volatile void release(java.lang.Object, boolean)
    {
        org.apache.http.pool.AbstractConnPool r0;
        org.apache.http.pool.PoolEntry $r2;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: org.apache.http.pool.AbstractConnPool;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (org.apache.http.pool.PoolEntry) r1;

        virtualinvoke r0.<org.apache.http.pool.AbstractConnPool: void release(org.apache.http.pool.PoolEntry,boolean)>($r2, z0);

        return;
    }

    static org.apache.http.pool.PoolEntry access$000(org.apache.http.pool.AbstractConnPool, java.lang.Object, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.pool.PoolEntryFuture) throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.TimeUnit r3;
        org.apache.http.pool.AbstractConnPool r0;
        org.apache.http.pool.PoolEntry $r5;
        org.apache.http.pool.PoolEntryFuture r4;
        java.lang.Object r1, r2;
        long l0;

        r0 := @parameter0: org.apache.http.pool.AbstractConnPool;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        l0 := @parameter3: long;

        r3 := @parameter4: java.util.concurrent.TimeUnit;

        r4 := @parameter5: org.apache.http.pool.PoolEntryFuture;

        $r5 = specialinvoke r0.<org.apache.http.pool.AbstractConnPool: org.apache.http.pool.PoolEntry getPoolEntryBlocking(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture)>(r1, r2, l0, r3, r4);

        return $r5;
    }
}
