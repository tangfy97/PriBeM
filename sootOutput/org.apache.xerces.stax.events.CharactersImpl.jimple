public final class org.apache.xerces.stax.events.CharactersImpl extends org.apache.xerces.stax.events.XMLEventImpl implements javax.xml.stream.events.Characters
{
    private final java.lang.String fData;

    public void <init>(java.lang.String, int, javax.xml.stream.Location)
    {
        javax.xml.stream.Location r1;
        int i0;
        java.lang.String r2, $r3;
        org.apache.xerces.stax.events.CharactersImpl r0;

        r0 := @this: org.apache.xerces.stax.events.CharactersImpl;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: javax.xml.stream.Location;

        specialinvoke r0.<org.apache.xerces.stax.events.XMLEventImpl: void <init>(int,javax.xml.stream.Location)>(i0, r1);

        if r2 == null goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = "";

     label2:
        r0.<org.apache.xerces.stax.events.CharactersImpl: java.lang.String fData> = $r3;

        return;
    }

    public java.lang.String getData()
    {
        java.lang.String $r1;
        org.apache.xerces.stax.events.CharactersImpl r0;

        r0 := @this: org.apache.xerces.stax.events.CharactersImpl;

        $r1 = r0.<org.apache.xerces.stax.events.CharactersImpl: java.lang.String fData>;

        return $r1;
    }

    public boolean isWhiteSpace()
    {
        char $c1;
        org.apache.xerces.stax.events.CharactersImpl r0;
        int i0, $i2, i3, $i4;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xerces.stax.events.CharactersImpl;

        $r1 = r0.<org.apache.xerces.stax.events.CharactersImpl: java.lang.String fData>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xerces.stax.events.CharactersImpl: java.lang.String fData>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        goto label2;

     label1:
        $i2 = 0;

     label2:
        i0 = $i2;

        if $i2 != 0 goto label3;

        return 0;

     label3:
        i3 = 0;

        goto label6;

     label4:
        $r2 = r0.<org.apache.xerces.stax.events.CharactersImpl: java.lang.String fData>;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isSpace(int)>($i4);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label4;

        return 1;
    }

    public boolean isCData()
    {
        int $i0;
        org.apache.xerces.stax.events.CharactersImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.stax.events.CharactersImpl;

        $i0 = virtualinvoke r0.<org.apache.xerces.stax.events.CharactersImpl: int getEventType()>();

        if 12 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isIgnorableWhiteSpace()
    {
        int $i0;
        org.apache.xerces.stax.events.CharactersImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.stax.events.CharactersImpl;

        $i0 = virtualinvoke r0.<org.apache.xerces.stax.events.CharactersImpl: int getEventType()>();

        if 6 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void writeAsEncodedUnicode(java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamException $r4;
        java.io.Writer r0;
        java.io.IOException $r3;
        java.lang.String $r2;
        org.apache.xerces.stax.events.CharactersImpl r1;

        r1 := @this: org.apache.xerces.stax.events.CharactersImpl;

        r0 := @parameter0: java.io.Writer;

     label1:
        $r2 = r1.<org.apache.xerces.stax.events.CharactersImpl: java.lang.String fData>;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r4.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
