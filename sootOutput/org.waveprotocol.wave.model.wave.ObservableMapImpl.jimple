public final class org.waveprotocol.wave.model.wave.ObservableMapImpl extends java.lang.Object implements org.waveprotocol.wave.model.util.SimpleMap, org.waveprotocol.wave.model.wave.ObservableMap
{
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final java.util.Map items;

    private void <init>()
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.HashMap $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items> = $r2;

        return;
    }

    public static org.waveprotocol.wave.model.wave.ObservableMapImpl create()
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl $r0;

        $r0 = new org.waveprotocol.wave.model.wave.ObservableMapImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: void <init>()>();

        return $r0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r2, $r5;
        java.lang.Object r1, $r3, r4;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != r4 goto label1;

        return $r3;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        if $r3 == null goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: void triggerOnItemRemoved(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: void triggerOnItemAdded(java.lang.Object,java.lang.Object)>(r1, r4);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: void triggerOnItemRemoved(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return $r3;
    }

    public void clear()
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.lang.Iterable copyKeys()
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>($r2);

        return $r3;
    }

    public final boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0, $r2;
        java.util.Map $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 == r1 goto label1;

        $z0 = r1 instanceof org.waveprotocol.wave.model.wave.ObservableMapImpl;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $r2 = (org.waveprotocol.wave.model.wave.ObservableMapImpl) r1;

        $r3 = $r2.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: java.util.Map items>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public void addListener(org.waveprotocol.wave.model.wave.ObservableMap$Listener)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableMap$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.ObservableMap$Listener)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableMap$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void triggerOnItemAdded(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3, r5, r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.ObservableMap$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.ObservableMap$Listener: void onEntryAdded(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    private void triggerOnItemRemoved(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3, r5, r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.ObservableMap$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.ObservableMap$Listener: void onEntryRemoved(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.ObservableMap$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: void removeListener(org.waveprotocol.wave.model.wave.ObservableMap$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.ObservableMapImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ObservableMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.ObservableMap$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.ObservableMapImpl: void addListener(org.waveprotocol.wave.model.wave.ObservableMap$Listener)>($r2);

        return;
    }
}
