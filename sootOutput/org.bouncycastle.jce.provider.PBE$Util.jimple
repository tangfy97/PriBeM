public class org.bouncycastle.jce.provider.PBE$Util extends java.lang.Object
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.PBE$Util r0;

        r0 := @this: org.bouncycastle.jce.provider.PBE$Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int, int)
    {
        java.lang.IllegalStateException $r13, $r21;
        org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator $r15, $r17, $r19;
        org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator $r14;
        org.bouncycastle.crypto.digests.SHA256Digest $r4;
        int i0, i1;
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator $r0;
        org.bouncycastle.crypto.digests.RIPEMD160Digest $r8;
        org.bouncycastle.crypto.digests.SHA1Digest $r10, $r18;
        org.bouncycastle.crypto.digests.MD5Digest $r12, $r20;
        org.bouncycastle.crypto.digests.MD2Digest $r2, $r16;
        org.bouncycastle.crypto.PBEParametersGenerator r22;
        org.bouncycastle.crypto.generators.PKCS12ParametersGenerator $r1, $r3, $r5, $r7, $r9, $r11;
        org.bouncycastle.crypto.digests.TigerDigest $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label05;

        lookupswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 5: goto label01;
            default: goto label04;
        };

     label01:
        $r15 = new org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r16 = new org.bouncycastle.crypto.digests.MD2Digest;

        specialinvoke $r16.<org.bouncycastle.crypto.digests.MD2Digest: void <init>()>();

        specialinvoke $r15.<org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r16);

        r22 = $r15;

        goto label15;

     label02:
        $r19 = new org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r20 = new org.bouncycastle.crypto.digests.MD5Digest;

        specialinvoke $r20.<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke $r19.<org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r20);

        r22 = $r19;

        goto label15;

     label03:
        $r17 = new org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r18 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r18.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r17.<org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r18);

        r22 = $r17;

        goto label15;

     label04:
        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("PKCS5 scheme 1 only supports MD2, MD5 and SHA1.");

        throw $r21;

     label05:
        if i0 != 1 goto label06;

        $r14 = new org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator;

        specialinvoke $r14.<org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>()>();

        r22 = $r14;

        goto label15;

     label06:
        if i0 != 2 goto label14;

        tableswitch(i1)
        {
            case 0: goto label08;
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label12;
            case 5: goto label07;
            default: goto label13;
        };

     label07:
        $r1 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r2 = new org.bouncycastle.crypto.digests.MD2Digest;

        specialinvoke $r2.<org.bouncycastle.crypto.digests.MD2Digest: void <init>()>();

        specialinvoke $r1.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r2);

        r22 = $r1;

        goto label15;

     label08:
        $r11 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r12 = new org.bouncycastle.crypto.digests.MD5Digest;

        specialinvoke $r12.<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke $r11.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r12);

        r22 = $r11;

        goto label15;

     label09:
        $r9 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r10 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r10.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r9.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r10);

        r22 = $r9;

        goto label15;

     label10:
        $r7 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r8 = new org.bouncycastle.crypto.digests.RIPEMD160Digest;

        specialinvoke $r8.<org.bouncycastle.crypto.digests.RIPEMD160Digest: void <init>()>();

        specialinvoke $r7.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r8);

        r22 = $r7;

        goto label15;

     label11:
        $r5 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r6 = new org.bouncycastle.crypto.digests.TigerDigest;

        specialinvoke $r6.<org.bouncycastle.crypto.digests.TigerDigest: void <init>()>();

        specialinvoke $r5.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r6);

        r22 = $r5;

        goto label15;

     label12:
        $r3 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r4 = new org.bouncycastle.crypto.digests.SHA256Digest;

        specialinvoke $r4.<org.bouncycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke $r3.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r4);

        r22 = $r3;

        goto label15;

     label13:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unknown digest scheme for PBE encryption.");

        throw $r13;

     label14:
        $r0 = new org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke $r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: void <init>()>();

        r22 = $r0;

     label15:
        return r22;
    }

    static org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey, java.security.spec.AlgorithmParameterSpec, java.lang.String)
    {
        byte[] $r5, $r7, $r10, r11;
        org.bouncycastle.crypto.params.ParametersWithIV $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        java.security.spec.AlgorithmParameterSpec r0;
        java.lang.String r6;
        org.bouncycastle.crypto.params.KeyParameter r13, r14;
        boolean $z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.CipherParameters $r9, r12;
        org.bouncycastle.crypto.PBEParametersGenerator $r4;
        javax.crypto.spec.PBEParameterSpec r2;
        java.lang.IllegalArgumentException $r1;
        org.bouncycastle.jce.provider.JCEPBEKey r3;

        r3 := @parameter0: org.bouncycastle.jce.provider.JCEPBEKey;

        r0 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r6 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $z0 = r0 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r1;

     label2:
        r2 = (javax.crypto.spec.PBEParameterSpec) r0;

        $i0 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getType()>();

        $i1 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getDigest()>();

        $r4 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        r11 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: byte[] getEncoded()>();

        $z1 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: boolean shouldTryWrongPKCS12()>();

        if $z1 == 0 goto label3;

        r11 = newarray (byte)[2];

     label3:
        $r5 = virtualinvoke r2.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i2 = virtualinvoke r2.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r4.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>(r11, $r5, $i2);

        $i3 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getIvSize()>();

        if $i3 == 0 goto label4;

        $i5 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getKeySize()>();

        $i6 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getIvSize()>();

        r12 = virtualinvoke $r4.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int)>($i5, $i6);

        goto label5;

     label4:
        $i4 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getKeySize()>();

        r12 = virtualinvoke $r4.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int)>($i4);

     label5:
        $z2 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("DES");

        if $z2 == 0 goto label7;

        $z3 = r12 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z3 == 0 goto label6;

        $r8 = (org.bouncycastle.crypto.params.ParametersWithIV) r12;

        $r9 = virtualinvoke $r8.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r13 = (org.bouncycastle.crypto.params.KeyParameter) $r9;

        $r10 = virtualinvoke r13.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.bouncycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r10);

        goto label7;

     label6:
        r14 = (org.bouncycastle.crypto.params.KeyParameter) r12;

        $r7 = virtualinvoke r14.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.bouncycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r7);

     label7:
        i7 = 0;

     label8:
        $i8 = lengthof r11;

        if i7 == $i8 goto label9;

        r11[i7] = 0;

        i7 = i7 + 1;

        goto label8;

     label9:
        return r12;
    }

    static org.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.bouncycastle.jce.provider.JCEPBEKey, java.security.spec.AlgorithmParameterSpec)
    {
        byte[] $r5, r7;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.security.spec.AlgorithmParameterSpec r0;
        boolean $z0, $z1;
        org.bouncycastle.crypto.CipherParameters $r6;
        org.bouncycastle.crypto.PBEParametersGenerator $r4;
        javax.crypto.spec.PBEParameterSpec r2;
        java.lang.IllegalArgumentException $r1;
        org.bouncycastle.jce.provider.JCEPBEKey r3;

        r3 := @parameter0: org.bouncycastle.jce.provider.JCEPBEKey;

        r0 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if r0 == null goto label1;

        $z0 = r0 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r1;

     label2:
        r2 = (javax.crypto.spec.PBEParameterSpec) r0;

        $i0 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getType()>();

        $i1 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getDigest()>();

        $r4 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        r7 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: byte[] getEncoded()>();

        $z1 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: boolean shouldTryWrongPKCS12()>();

        if $z1 == 0 goto label3;

        r7 = newarray (byte)[2];

     label3:
        $r5 = virtualinvoke r2.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i2 = virtualinvoke r2.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r4.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>(r7, $r5, $i2);

        $i3 = virtualinvoke r3.<org.bouncycastle.jce.provider.JCEPBEKey: int getKeySize()>();

        $r6 = virtualinvoke $r4.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i3);

        i4 = 0;

     label4:
        $i5 = lengthof r7;

        if i4 == $i5 goto label5;

        r7[i4] = 0;

        i4 = i4 + 1;

        goto label4;

     label5:
        return $r6;
    }

    static org.bouncycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec, int, int, int, int)
    {
        byte[] $r3, r5;
        org.bouncycastle.crypto.PBEParametersGenerator $r0;
        javax.crypto.spec.PBEKeySpec r1;
        int i0, i1, $i2, i3, i4, i5, $i6;
        char[] $r2, $r4;
        org.bouncycastle.crypto.CipherParameters r6;

        r1 := @parameter0: javax.crypto.spec.PBEKeySpec;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i3 := @parameter4: int;

        $r0 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>(i0, i1);

        if i0 != 2 goto label1;

        $r4 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        r5 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r4);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        r5 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r2);

     label2:
        $r3 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        $i2 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        virtualinvoke $r0.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>(r5, $r3, $i2);

        if i3 == 0 goto label3;

        r6 = virtualinvoke $r0.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int)>(i4, i3);

        goto label4;

     label3:
        r6 = virtualinvoke $r0.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int)>(i4);

     label4:
        i5 = 0;

     label5:
        $i6 = lengthof r5;

        if i5 == $i6 goto label6;

        r5[i5] = 0;

        i5 = i5 + 1;

        goto label5;

     label6:
        return r6;
    }

    static org.bouncycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec, int, int, int)
    {
        byte[] $r3, r6;
        org.bouncycastle.crypto.PBEParametersGenerator $r0;
        javax.crypto.spec.PBEKeySpec r1;
        int i0, i1, $i2, i3, i4, $i5;
        char[] $r2, $r5;
        org.bouncycastle.crypto.CipherParameters $r4;

        r1 := @parameter0: javax.crypto.spec.PBEKeySpec;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>(i0, i1);

        if i0 != 2 goto label1;

        $r5 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        r6 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r5);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        r6 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r2);

     label2:
        $r3 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        $i2 = virtualinvoke r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        virtualinvoke $r0.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>(r6, $r3, $i2);

        $r4 = virtualinvoke $r0.<org.bouncycastle.crypto.PBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)>(i3);

        i4 = 0;

     label3:
        $i5 = lengthof r6;

        if i4 == $i5 goto label4;

        r6[i4] = 0;

        i4 = i4 + 1;

        goto label3;

     label4:
        return $r4;
    }
}
