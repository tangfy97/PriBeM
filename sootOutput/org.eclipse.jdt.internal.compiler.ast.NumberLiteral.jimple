public abstract class org.eclipse.jdt.internal.compiler.ast.NumberLiteral extends org.eclipse.jdt.internal.compiler.ast.Literal
{
    char[] source;

    public void <init>(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.compiler.ast.NumberLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NumberLiteral;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.NumberLiteral: void <init>(int,int)>(i0, i1);

        r0.<org.eclipse.jdt.internal.compiler.ast.NumberLiteral: char[] source> = r1;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.NumberLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NumberLiteral;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Literal: void <init>(int,int)>(i0, i1);

        return;
    }

    public boolean isValidJavaStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.NumberLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NumberLiteral;

        return 0;
    }

    public char[] source()
    {
        char[] $r1;
        org.eclipse.jdt.internal.compiler.ast.NumberLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NumberLiteral;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.NumberLiteral: char[] source>;

        return $r1;
    }
}
