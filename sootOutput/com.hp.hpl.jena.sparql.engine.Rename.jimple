public class com.hp.hpl.jena.sparql.engine.Rename extends java.lang.Object
{
    private static final java.lang.String prefix;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.engine.Rename r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.Rename;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.core.Var chooseVarName(com.hp.hpl.jena.sparql.core.Var, java.util.Collection, java.lang.String)
    {
        java.util.Collection r8;
        com.hp.hpl.jena.sparql.core.Var r0, $r7, r9;
        java.lang.StringBuilder $r1, $r3, $r5;
        java.lang.String r2, $r4, $r6;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r8 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.lang.String;

        r9 = r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke r9.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r6);

        r9 = $r7;

        $z0 = interfaceinvoke r8.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        return $r7;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op renameNode(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameNode $r0;
        com.hp.hpl.jena.graph.Node r1, r2;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r4;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.engine.Rename$RenameNode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameNode: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op renameVar(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameNode $r0;
        com.hp.hpl.jena.sparql.core.Var r1, r2;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r4;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter2: com.hp.hpl.jena.sparql.core.Var;

        $r0 = new com.hp.hpl.jena.sparql.engine.Rename$RenameNode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameNode: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op renameVars(com.hp.hpl.jena.sparql.algebra.Op, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars $r0;
        java.util.Collection r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: java.util.Collection;

        $r0 = new com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: void <init>(java.util.Collection,java.lang.String)>(r1, "/");

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprList renameVars(com.hp.hpl.jena.sparql.expr.ExprList, java.util.Set)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars $r0;
        com.hp.hpl.jena.sparql.expr.ExprList r2, $r3;
        java.util.Set r1;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter1: java.util.Set;

        $r0 = new com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: void <init>(java.util.Collection,java.lang.String)>(r1, "/");

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.ExprList)>($r0, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr renameVars(com.hp.hpl.jena.sparql.expr.Expr, java.util.Set)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars $r0;
        com.hp.hpl.jena.sparql.expr.Expr r2, $r3;
        java.util.Set r1;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r1 := @parameter1: java.util.Set;

        $r0 = new com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: void <init>(java.util.Collection,java.lang.String)>(r1, "/");

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op reverseVarRename(com.hp.hpl.jena.sparql.algebra.Op, boolean)
    {
        com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r2;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: void <init>(java.lang.String,boolean)>("/", z0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.engine.Rename: java.lang.String prefix> = "/";

        return;
    }
}
