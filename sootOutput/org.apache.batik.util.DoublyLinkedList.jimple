public class org.apache.batik.util.DoublyLinkedList extends java.lang.Object
{
    private org.apache.batik.util.DoublyLinkedList$Node head;
    private int size;

    public void <init>()
    {
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = null;

        r0.<org.apache.batik.util.DoublyLinkedList: int size> = 0;

        return;
    }

    public synchronized int getSize()
    {
        int $i0;
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        $i0 = r0.<org.apache.batik.util.DoublyLinkedList: int size>;

        return $i0;
    }

    public synchronized void empty()
    {
        int $i0;
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node pop()>();

     label2:
        $i0 = r0.<org.apache.batik.util.DoublyLinkedList: int size>;

        if $i0 > 0 goto label1;

        return;
    }

    public org.apache.batik.util.DoublyLinkedList$Node getHead()
    {
        org.apache.batik.util.DoublyLinkedList$Node $r1;
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        $r1 = r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        return $r1;
    }

    public org.apache.batik.util.DoublyLinkedList$Node getTail()
    {
        org.apache.batik.util.DoublyLinkedList$Node $r1, $r2;
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        $r1 = r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        $r2 = virtualinvoke $r1.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getPrev()>();

        return $r2;
    }

    public void touch(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList$Node r0, $r2;
        org.apache.batik.util.DoublyLinkedList r1;

        r1 := @this: org.apache.batik.util.DoublyLinkedList;

        r0 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>($r2);

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = r0;

        return;
    }

    public void add(int, org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList r1;
        org.apache.batik.util.DoublyLinkedList$Node r0, $r2, $r3, r4;
        int $i0, i1, $i2, $i3, $i5;

        r1 := @this: org.apache.batik.util.DoublyLinkedList;

        i1 := @parameter0: int;

        r0 := @parameter1: org.apache.batik.util.DoublyLinkedList$Node;

        if r0 != null goto label1;

        return;

     label1:
        if i1 != 0 goto label2;

        $r3 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>($r3);

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = r0;

        goto label6;

     label2:
        $i0 = r1.<org.apache.batik.util.DoublyLinkedList: int size>;

        if i1 != $i0 goto label3;

        $r2 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>($r2);

        goto label6;

     label3:
        r4 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        goto label5;

     label4:
        r4 = virtualinvoke r4.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getNext()>();

        $i5 = (int) -1;

        i1 = i1 + $i5;

     label5:
        if i1 != 0 goto label4;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>(r4);

     label6:
        $i2 = r1.<org.apache.batik.util.DoublyLinkedList: int size>;

        $i3 = $i2 + 1;

        r1.<org.apache.batik.util.DoublyLinkedList: int size> = $i3;

        return;
    }

    public void add(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList r1;
        org.apache.batik.util.DoublyLinkedList$Node r0, $r2;
        int $i0, $i1;

        r1 := @this: org.apache.batik.util.DoublyLinkedList;

        r0 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>($r2);

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = r0;

        $i0 = r1.<org.apache.batik.util.DoublyLinkedList: int size>;

        $i1 = $i0 + 1;

        r1.<org.apache.batik.util.DoublyLinkedList: int size> = $i1;

        return;
    }

    public void remove(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList r1;
        org.apache.batik.util.DoublyLinkedList$Node r0, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;

        r1 := @this: org.apache.batik.util.DoublyLinkedList;

        r0 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        if r0 != $r2 goto label3;

        $r3 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getNext()>();

        $r5 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        if $r4 != $r5 goto label2;

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = null;

        goto label3;

     label2:
        $r6 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        $r7 = virtualinvoke $r6.<org.apache.batik.util.DoublyLinkedList$Node: org.apache.batik.util.DoublyLinkedList$Node getNext()>();

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = $r7;

     label3:
        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void unlink()>();

        $i0 = r1.<org.apache.batik.util.DoublyLinkedList: int size>;

        $i1 = $i0 - 1;

        r1.<org.apache.batik.util.DoublyLinkedList: int size> = $i1;

        return;
    }

    public org.apache.batik.util.DoublyLinkedList$Node pop()
    {
        org.apache.batik.util.DoublyLinkedList$Node $r1, r2;
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        $r1 = r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList: void remove(org.apache.batik.util.DoublyLinkedList$Node)>(r2);

        return r2;
    }

    public org.apache.batik.util.DoublyLinkedList$Node unpush()
    {
        org.apache.batik.util.DoublyLinkedList$Node $r1, $r2;
        org.apache.batik.util.DoublyLinkedList r0;

        r0 := @this: org.apache.batik.util.DoublyLinkedList;

        $r1 = r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node getTail()>();

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList: void remove(org.apache.batik.util.DoublyLinkedList$Node)>($r2);

        return $r2;
    }

    public void push(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList r1;
        org.apache.batik.util.DoublyLinkedList$Node r0, $r2, $r3;
        int $i0, $i1;

        r1 := @this: org.apache.batik.util.DoublyLinkedList;

        r0 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        $r2 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>($r2);

        $r3 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        if $r3 != null goto label1;

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = r0;

     label1:
        $i0 = r1.<org.apache.batik.util.DoublyLinkedList: int size>;

        $i1 = $i0 + 1;

        r1.<org.apache.batik.util.DoublyLinkedList: int size> = $i1;

        return;
    }

    public void unpop(org.apache.batik.util.DoublyLinkedList$Node)
    {
        org.apache.batik.util.DoublyLinkedList r1;
        org.apache.batik.util.DoublyLinkedList$Node r0, $r2;
        int $i0, $i1;

        r1 := @this: org.apache.batik.util.DoublyLinkedList;

        r0 := @parameter0: org.apache.batik.util.DoublyLinkedList$Node;

        $r2 = r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head>;

        virtualinvoke r0.<org.apache.batik.util.DoublyLinkedList$Node: void insertBefore(org.apache.batik.util.DoublyLinkedList$Node)>($r2);

        r1.<org.apache.batik.util.DoublyLinkedList: org.apache.batik.util.DoublyLinkedList$Node head> = r0;

        $i0 = r1.<org.apache.batik.util.DoublyLinkedList: int size>;

        $i1 = $i0 + 1;

        r1.<org.apache.batik.util.DoublyLinkedList: int size> = $i1;

        return;
    }
}
