public class org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl implements org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: void setLeaf(boolean)>(0);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: void allocate()>();

        return;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r5;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r0;
        java.util.List $r1, $r2, $r4;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.Object $r7;
        java.lang.String $r6, $r9;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return "<multiPhrase/>";

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<multiPhrase>");

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r7;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label3;

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n</multiPhrase>");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        int $i0;
        java.lang.String $r8, $r11, r17;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r13;
        boolean $z0;
        java.util.Iterator $r5;
        java.lang.CharSequence $r16;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r0;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r15;
        java.util.List $r1, $r2, $r4;
        java.lang.StringBuilder $r3, $r6, $r7, $r9, $r10, $r14;
        java.lang.Object $r12;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        r15 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r17 = "";

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r12;

        $r14 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = interfaceinvoke r13.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r15);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r16);

        r17 = ",";

        goto label3;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MTP[");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r0, r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode) $r1;

        return r2;
    }

    public java.lang.CharSequence getField()
    {
        java.util.List $r1;
        java.lang.CharSequence $r4;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r0;
        int $i0;
        java.lang.Object $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: java.lang.CharSequence getField()>();

        return $r4;
    }

    public void setField(java.lang.CharSequence)
    {
        java.util.Iterator $r2;
        java.lang.CharSequence r5;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r0;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode $r6;
        java.util.List $r1;
        java.lang.Object $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        r5 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r3;

        $z1 = r4 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z1 == 0 goto label2;

        $r6 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) r4;

        interfaceinvoke $r6.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: void setField(java.lang.CharSequence)>(r5);

     label2:
        goto label1;

     label3:
        return;
    }
}
