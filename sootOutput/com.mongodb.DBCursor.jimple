public class com.mongodb.DBCursor extends java.lang.Object implements java.util.Iterator, java.lang.Iterable
{
    private final com.mongodb.DBCollection _collection;
    private final com.mongodb.DBObject _query;
    private final com.mongodb.DBObject _keysWanted;
    private com.mongodb.DBObject _orderBy;
    private java.lang.String _hint;
    private boolean _explain;
    private int _numWanted;
    private int _batchSize;
    private int _skip;
    private boolean _snapshot;
    private int _options;
    private java.util.Iterator _it;
    private boolean _fake;
    private com.mongodb.DBCursor$CursorType _cursorType;
    private com.mongodb.DBObject _cur;
    private int _num;
    private final java.util.ArrayList _all;
    private final java.util.List _nums;

    public void <init>(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject)
    {
        com.mongodb.DBCollection r3;
        com.mongodb.BasicDBObject $r9;
        java.util.ArrayList $r7, $r8;
        com.mongodb.DBObject r4, r5, $r6;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        r3 := @parameter0: com.mongodb.DBCollection;

        r4 := @parameter1: com.mongodb.DBObject;

        r5 := @parameter2: com.mongodb.DBObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy> = null;

        r0.<com.mongodb.DBCursor: java.lang.String _hint> = null;

        r0.<com.mongodb.DBCursor: boolean _explain> = 0;

        r0.<com.mongodb.DBCursor: int _numWanted> = 0;

        r0.<com.mongodb.DBCursor: int _batchSize> = 0;

        r0.<com.mongodb.DBCursor: int _skip> = 0;

        r0.<com.mongodb.DBCursor: boolean _snapshot> = 0;

        r0.<com.mongodb.DBCursor: int _options> = 0;

        r0.<com.mongodb.DBCursor: java.util.Iterator _it> = null;

        r0.<com.mongodb.DBCursor: boolean _fake> = 0;

        r0.<com.mongodb.DBCursor: com.mongodb.DBCursor$CursorType _cursorType> = null;

        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur> = null;

        r0.<com.mongodb.DBCursor: int _num> = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.mongodb.DBCursor: java.util.ArrayList _all> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.mongodb.DBCursor: java.util.List _nums> = $r8;

        r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection> = r3;

        if r4 != null goto label1;

        $r9 = new com.mongodb.BasicDBObject;

        $r6 = $r9;

        specialinvoke $r9.<com.mongodb.BasicDBObject: void <init>()>();

        goto label2;

     label1:
        $r6 = r4;

     label2:
        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query> = $r6;

        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted> = r5;

        return;
    }

    public com.mongodb.DBCursor copy()
    {
        com.mongodb.DBCollection $r4;
        com.mongodb.DBObject $r2, $r3, $r5;
        com.mongodb.DBCursor $r0, r1;
        int $i0, $i1, $i2;
        java.lang.String $r6;

        r1 := @this: com.mongodb.DBCursor;

        $r0 = new com.mongodb.DBCursor;

        $r4 = r1.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r3 = r1.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        $r2 = r1.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        specialinvoke $r0.<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject)>($r4, $r3, $r2);

        $r5 = r1.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy>;

        $r0.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy> = $r5;

        $r6 = r1.<com.mongodb.DBCursor: java.lang.String _hint>;

        $r0.<com.mongodb.DBCursor: java.lang.String _hint> = $r6;

        $i0 = r1.<com.mongodb.DBCursor: int _numWanted>;

        $r0.<com.mongodb.DBCursor: int _numWanted> = $i0;

        $i1 = r1.<com.mongodb.DBCursor: int _skip>;

        $r0.<com.mongodb.DBCursor: int _skip> = $i1;

        $i2 = r1.<com.mongodb.DBCursor: int _options>;

        $r0.<com.mongodb.DBCursor: int _options> = $i2;

        return $r0;
    }

    public java.util.Iterator iterator()
    {
        com.mongodb.DBCursor r0, $r1;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = virtualinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBCursor copy()>();

        return $r1;
    }

    public com.mongodb.DBCursor sort(com.mongodb.DBObject)
    {
        java.lang.IllegalStateException $r3;
        java.util.Iterator $r1;
        com.mongodb.DBObject r2;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        r2 := @parameter0: com.mongodb.DBObject;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t sort after executing query");

        throw $r3;

     label1:
        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy> = r2;

        return r0;
    }

    public com.mongodb.DBCursor hint(com.mongodb.DBObject)
    {
        java.lang.IllegalStateException $r4;
        java.util.Iterator $r1;
        com.mongodb.DBObject r2;
        com.mongodb.DBCursor r0;
        java.lang.String $r3;

        r0 := @this: com.mongodb.DBCursor;

        r2 := @parameter0: com.mongodb.DBObject;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t hint after executing query");

        throw $r4;

     label1:
        if r2 != null goto label2;

        r0.<com.mongodb.DBCursor: java.lang.String _hint> = null;

        goto label3;

     label2:
        $r3 = staticinvoke <com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>(r2);

        r0.<com.mongodb.DBCursor: java.lang.String _hint> = $r3;

     label3:
        return r0;
    }

    public com.mongodb.DBCursor snapshot()
    {
        java.lang.IllegalStateException $r2;
        java.util.Iterator $r1;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t snapshot after executing the query");

        throw $r2;

     label1:
        r0.<com.mongodb.DBCursor: boolean _snapshot> = 1;

        return r0;
    }

    public com.mongodb.DBCursor hint(java.lang.String)
    {
        java.lang.IllegalStateException $r3;
        java.util.Iterator $r1;
        com.mongodb.DBCursor r0;
        java.lang.String r2;

        r0 := @this: com.mongodb.DBCursor;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t hint after executing query");

        throw $r3;

     label1:
        r0.<com.mongodb.DBCursor: java.lang.String _hint> = r2;

        return r0;
    }

    public com.mongodb.DBObject explain()
    {
        com.mongodb.DBObject $r2;
        com.mongodb.DBCursor r0, $r1;
        int $i0, $i1, $i3;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = virtualinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBCursor copy()>();

        $r1.<com.mongodb.DBCursor: boolean _explain> = 1;

        $i0 = $r1.<com.mongodb.DBCursor: int _numWanted>;

        $i3 = (int) -1;

        $i1 = $i0 * $i3;

        $r1.<com.mongodb.DBCursor: int _numWanted> = $i1;

        $r2 = virtualinvoke $r1.<com.mongodb.DBCursor: com.mongodb.DBObject next()>();

        return $r2;
    }

    public com.mongodb.DBCursor limit(int)
    {
        java.lang.IllegalStateException $r2;
        java.util.Iterator $r1;
        com.mongodb.DBCursor r0;
        int i0;

        r0 := @this: com.mongodb.DBCursor;

        i0 := @parameter0: int;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t set limit after executing query");

        throw $r2;

     label1:
        r0.<com.mongodb.DBCursor: int _numWanted> = i0;

        return r0;
    }

    public com.mongodb.DBCursor batchSize(int)
    {
        java.util.Iterator $r1, $r2, $r3;
        com.mongodb.DBCursor r0;
        int i0;
        com.mongodb.DBApiLayer$Result $r4;
        boolean $z0;

        r0 := @this: com.mongodb.DBCursor;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        i0 = 2;

     label1:
        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label2;

        $r2 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $z0 = $r2 instanceof com.mongodb.DBApiLayer$Result;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $r4 = (com.mongodb.DBApiLayer$Result) $r3;

        virtualinvoke $r4.<com.mongodb.DBApiLayer$Result: void setNumberToReturn(int)>(i0);

     label2:
        r0.<com.mongodb.DBCursor: int _batchSize> = i0;

        return r0;
    }

    public com.mongodb.DBCursor skip(int)
    {
        java.lang.IllegalStateException $r2;
        java.util.Iterator $r1;
        com.mongodb.DBCursor r0;
        int i0;

        r0 := @this: com.mongodb.DBCursor;

        i0 := @parameter0: int;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t set skip after executing query");

        throw $r2;

     label1:
        r0.<com.mongodb.DBCursor: int _skip> = i0;

        return r0;
    }

    public com.mongodb.DBCursor addOption(int)
    {
        com.mongodb.DBCursor r0;
        int i0, $i1, $i2;

        r0 := @this: com.mongodb.DBCursor;

        i0 := @parameter0: int;

        $i1 = r0.<com.mongodb.DBCursor: int _options>;

        $i2 = $i1 | i0;

        r0.<com.mongodb.DBCursor: int _options> = $i2;

        return r0;
    }

    private void _check() throws com.mongodb.MongoException
    {
        com.mongodb.DBObject $r5, $r7, $r8, r12, $r14;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.Boolean $r10, $r11;
        java.lang.String $r9;
        java.util.LinkedList $r3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r1, $r4, $r15, $r16;
        com.mongodb.DBCollection $r2, $r13;
        com.mongodb.BasicDBObject $r6;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        if $r2 == null goto label6;

        $r5 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        if $r5 == null goto label6;

        specialinvoke r0.<com.mongodb.DBCursor: void _lookForHints()>();

        r12 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        $z0 = virtualinvoke r0.<com.mongodb.DBCursor: boolean hasSpecialQueryFields()>();

        if $z0 == 0 goto label3;

        $r6 = new com.mongodb.BasicDBObject;

        specialinvoke $r6.<com.mongodb.BasicDBObject: void <init>()>();

        r12 = $r6;

        $r7 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)>($r6, "query", $r7, 1);

        $r8 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)>($r6, "orderby", $r8, 0);

        $r9 = r0.<com.mongodb.DBCursor: java.lang.String _hint>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)>($r6, "$hint", $r9);

        $z1 = r0.<com.mongodb.DBCursor: boolean _explain>;

        if $z1 == 0 goto label2;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r6.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("$explain", $r11);

     label2:
        $z2 = r0.<com.mongodb.DBCursor: boolean _snapshot>;

        if $z2 == 0 goto label3;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r6.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("$snapshot", $r10);

     label3:
        $i2 = r0.<com.mongodb.DBCursor: int _numWanted>;

        i3 = $i2;

        $i4 = r0.<com.mongodb.DBCursor: int _batchSize>;

        if $i4 <= 0 goto label5;

        $i0 = r0.<com.mongodb.DBCursor: int _numWanted>;

        if $i0 != 0 goto label4;

        i3 = r0.<com.mongodb.DBCursor: int _batchSize>;

        goto label5;

     label4:
        $i1 = r0.<com.mongodb.DBCursor: int _batchSize>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

     label5:
        $r13 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r14 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        $i5 = r0.<com.mongodb.DBCursor: int _skip>;

        $i6 = r0.<com.mongodb.DBCursor: int _options>;

        $r15 = virtualinvoke $r13.<com.mongodb.DBCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int)>(r12, $r14, $i5, i3, $i6);

        r0.<com.mongodb.DBCursor: java.util.Iterator _it> = $r15;

     label6:
        $r16 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        if $r16 != null goto label7;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

        r0.<com.mongodb.DBCursor: java.util.Iterator _it> = $r4;

        r0.<com.mongodb.DBCursor: boolean _fake> = 1;

     label7:
        return;
    }

    private void _lookForHints()
    {
        java.util.Iterator $r8;
        com.mongodb.DBCollection $r2, $r6;
        java.util.Set $r5, $r11;
        java.util.List $r3, $r7;
        com.mongodb.DBObject $r4, r10;
        com.mongodb.DBCursor r0;
        java.lang.Object $r9;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: java.lang.String _hint>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r3 = $r2.<com.mongodb.DBCollection: java.util.List _hintFields>;

        if $r3 != null goto label2;

        return;

     label2:
        $r4 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        $r5 = interfaceinvoke $r4.<com.mongodb.DBObject: java.util.Set keySet()>();

        $r6 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r7 = $r6.<com.mongodb.DBCollection: java.util.List _hintFields>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.mongodb.DBObject) $r9;

        $r11 = interfaceinvoke r10.<com.mongodb.DBObject: java.util.Set keySet()>();

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean containsAll(java.util.Collection)>($r11);

        if $z1 != 0 goto label4;

        goto label3;

     label4:
        virtualinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBCursor hint(com.mongodb.DBObject)>(r10);

        return;

     label5:
        return;
    }

    boolean hasSpecialQueryFields()
    {
        com.mongodb.DBObject $r1, $r3;
        com.mongodb.DBCursor r0;
        int $i0;
        java.util.Set $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy>;

        if $r1 == null goto label1;

        $r3 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _orderBy>;

        $r4 = interfaceinvoke $r3.<com.mongodb.DBObject: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.mongodb.DBCursor: java.lang.String _hint>;

        if $r2 == null goto label2;

        return 1;

     label2:
        $z0 = r0.<com.mongodb.DBCursor: boolean _explain>;

        return $z0;
    }

    void _addToQueryObject(com.mongodb.DBObject, java.lang.String, com.mongodb.DBObject, boolean)
    {
        com.mongodb.DBObject r0, r2;
        com.mongodb.DBCursor r1;
        int $i0;
        java.util.Set $r4;
        java.lang.String r3;
        boolean z0;

        r1 := @this: com.mongodb.DBCursor;

        r2 := @parameter0: com.mongodb.DBObject;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: com.mongodb.DBObject;

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        return;

     label1:
        if z0 != 0 goto label2;

        $r4 = interfaceinvoke r0.<com.mongodb.DBObject: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

        return;

     label2:
        virtualinvoke r1.<com.mongodb.DBCursor: void _addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)>(r2, r3, r0);

        return;
    }

    void _addToQueryObject(com.mongodb.DBObject, java.lang.String, java.lang.Object)
    {
        com.mongodb.DBObject r1;
        com.mongodb.DBCursor r3;
        java.lang.Object r0;
        java.lang.String r2;

        r3 := @this: com.mongodb.DBCursor;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r1.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>(r2, r0);

        return;
    }

    void _checkType(com.mongodb.DBCursor$CursorType)
    {
        com.mongodb.DBCursor r0;
        com.mongodb.DBCursor$CursorType $r1, r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.mongodb.DBCursor;

        r2 := @parameter0: com.mongodb.DBCursor$CursorType;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBCursor$CursorType _cursorType>;

        if $r1 != null goto label1;

        r0.<com.mongodb.DBCursor: com.mongodb.DBCursor$CursorType _cursorType> = r2;

        return;

     label1:
        $r3 = r0.<com.mongodb.DBCursor: com.mongodb.DBCursor$CursorType _cursorType>;

        if r2 != $r3 goto label2;

        return;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t switch cursor access methods");

        throw $r4;
    }

    private com.mongodb.DBObject _next() throws com.mongodb.MongoException
    {
        java.util.ArrayList $r7, $r11;
        com.mongodb.DBObject $r4, $r5, $r6, $r10, $r12, $r14;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r9;
        java.util.Iterator $r2;
        java.util.Set $r13;
        java.util.List $r8;
        com.mongodb.DBCursor r0;
        java.lang.Object $r3;
        com.mongodb.DBCursor$CursorType $r1, $r15, $r16, $r17;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBCursor$CursorType _cursorType>;

        if $r1 != null goto label1;

        $r15 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ITERATOR>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r15);

     label1:
        specialinvoke r0.<com.mongodb.DBCursor: void _check()>();

        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur> = null;

        $r2 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.mongodb.DBObject) $r3;

        r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur> = $r4;

        $i0 = r0.<com.mongodb.DBCursor: int _num>;

        $i1 = $i0 + 1;

        r0.<com.mongodb.DBCursor: int _num> = $i1;

        $r5 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        if $r5 == null goto label2;

        $r12 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        $r13 = interfaceinvoke $r12.<com.mongodb.DBObject: java.util.Set keySet()>();

        $i3 = interfaceinvoke $r13.<java.util.Set: int size()>();

        if $i3 <= 0 goto label2;

        $r14 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur>;

        interfaceinvoke $r14.<com.mongodb.DBObject: void markAsPartialObject()>();

     label2:
        $r16 = r0.<com.mongodb.DBCursor: com.mongodb.DBCursor$CursorType _cursorType>;

        $r17 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ARRAY>;

        if $r16 != $r17 goto label3;

        $r8 = r0.<com.mongodb.DBCursor: java.util.List _nums>;

        $r7 = r0.<com.mongodb.DBCursor: java.util.ArrayList _all>;

        $i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r11 = r0.<com.mongodb.DBCursor: java.util.ArrayList _all>;

        $r10 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label3:
        $r6 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur>;

        return $r6;
    }

    public int numGetMores()
    {
        java.util.Iterator $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        com.mongodb.DBCursor r0;
        int $i0;
        com.mongodb.DBApiLayer$Result $r4;
        boolean $z0, $z1;

        r0 := @this: com.mongodb.DBCursor;

        $z0 = r0.<com.mongodb.DBCursor: boolean _fake>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $z1 = $r1 instanceof com.mongodb.DBApiLayer$Result;

        if $z1 == 0 goto label2;

        $r3 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $r4 = (com.mongodb.DBApiLayer$Result) $r3;

        $i0 = virtualinvoke $r4.<com.mongodb.DBApiLayer$Result: int numGetMores()>();

        return $i0;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("_it not a real result");

        throw $r2;
    }

    public java.util.List getSizes()
    {
        java.util.Iterator $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.util.List $r5;
        com.mongodb.DBCursor r0;
        com.mongodb.DBApiLayer$Result $r4;
        java.util.LinkedList $r6;
        boolean $z0, $z1;

        r0 := @this: com.mongodb.DBCursor;

        $z0 = r0.<com.mongodb.DBCursor: boolean _fake>;

        if $z0 == 0 goto label1;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        return $r6;

     label1:
        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $z1 = $r1 instanceof com.mongodb.DBApiLayer$Result;

        if $z1 == 0 goto label2;

        $r3 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $r4 = (com.mongodb.DBApiLayer$Result) $r3;

        $r5 = virtualinvoke $r4.<com.mongodb.DBApiLayer$Result: java.util.List getSizes()>();

        return $r5;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("_it not a real result");

        throw $r2;
    }

    private boolean _hasNext() throws com.mongodb.MongoException
    {
        java.util.Iterator $r1;
        com.mongodb.DBCursor r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.mongodb.DBCursor;

        specialinvoke r0.<com.mongodb.DBCursor: void _check()>();

        $i0 = r0.<com.mongodb.DBCursor: int _numWanted>;

        if $i0 <= 0 goto label1;

        $i2 = r0.<com.mongodb.DBCursor: int _num>;

        $i1 = r0.<com.mongodb.DBCursor: int _numWanted>;

        if $i2 < $i1 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.mongodb.DBCursor: java.util.Iterator _it>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public int numSeen()
    {
        int $i0;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $i0 = r0.<com.mongodb.DBCursor: int _num>;

        return $i0;
    }

    public boolean hasNext()
    {
        com.mongodb.MongoInternalException $r3;
        com.mongodb.DBCursor r0;
        com.mongodb.MongoException $r2;
        com.mongodb.DBCursor$CursorType $r1;
        boolean $z0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ITERATOR>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r1);

     label1:
        $z0 = specialinvoke r0.<com.mongodb.DBCursor: boolean _hasNext()>();

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.mongodb.MongoInternalException;

        specialinvoke $r3.<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>("couldn\'t get next element", $r2);

        throw $r3;

        catch com.mongodb.MongoException from label1 to label2 with label3;
    }

    public com.mongodb.DBObject next()
    {
        com.mongodb.MongoInternalException $r4;
        com.mongodb.DBObject $r2;
        com.mongodb.DBCursor r0;
        com.mongodb.MongoException $r3;
        com.mongodb.DBCursor$CursorType $r1;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ITERATOR>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r1);

     label1:
        $r2 = specialinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBObject _next()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.mongodb.MongoInternalException;

        specialinvoke $r4.<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>("couldn\'t get next element", $r3);

        throw $r4;

        catch com.mongodb.MongoException from label1 to label2 with label3;
    }

    public com.mongodb.DBObject curr()
    {
        com.mongodb.DBCursor$CursorType $r1;
        com.mongodb.DBObject $r2;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ITERATOR>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r1);

        $r2 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _cur>;

        return $r2;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mongodb.DBCursor r1;

        r1 := @this: com.mongodb.DBCursor;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("can\'t remove from a cursor");

        throw $r0;
    }

    void _fill(int) throws com.mongodb.MongoException
    {
        com.mongodb.DBCursor r0;
        int i0, $i1;
        com.mongodb.DBCursor$CursorType $r1;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: com.mongodb.DBCursor;

        i0 := @parameter0: int;

        $r1 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ARRAY>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r1);

     label1:
        $r2 = r0.<com.mongodb.DBCursor: java.util.ArrayList _all>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 < $i1 goto label2;

        $z0 = specialinvoke r0.<com.mongodb.DBCursor: boolean _hasNext()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBObject _next()>();

        goto label1;

     label2:
        return;
    }

    public int length() throws com.mongodb.MongoException
    {
        com.mongodb.DBCursor r0;
        int $i0;
        com.mongodb.DBCursor$CursorType $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ARRAY>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r1);

        virtualinvoke r0.<com.mongodb.DBCursor: void _fill(int)>(2147483647);

        $r2 = r0.<com.mongodb.DBCursor: java.util.ArrayList _all>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.util.List toArray() throws com.mongodb.MongoException
    {
        java.util.List $r1;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = virtualinvoke r0.<com.mongodb.DBCursor: java.util.List toArray(int)>(2147483647);

        return $r1;
    }

    public java.util.List toArray(int) throws com.mongodb.MongoException
    {
        com.mongodb.DBCursor r0;
        int i0;
        com.mongodb.DBCursor$CursorType $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.mongodb.DBCursor;

        i0 := @parameter0: int;

        $r1 = <com.mongodb.DBCursor$CursorType: com.mongodb.DBCursor$CursorType ARRAY>;

        virtualinvoke r0.<com.mongodb.DBCursor: void _checkType(com.mongodb.DBCursor$CursorType)>($r1);

        virtualinvoke r0.<com.mongodb.DBCursor: void _fill(int)>(i0);

        $r2 = r0.<com.mongodb.DBCursor: java.util.ArrayList _all>;

        return $r2;
    }

    public int itcount()
    {
        int i0;
        com.mongodb.DBCursor r0;
        boolean $z0;

        r0 := @this: com.mongodb.DBCursor;

        i0 = 0;

     label1:
        $z0 = virtualinvoke r0.<com.mongodb.DBCursor: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBObject next()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public int count() throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection $r1, $r2, $r6;
        long $l0;
        java.lang.IllegalArgumentException $r7, $r8;
        com.mongodb.DBObject $r4, $r5;
        com.mongodb.DBCursor r0;
        int $i1;
        com.mongodb.DB $r3;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("why is _collection null");

        throw $r8;

     label1:
        $r2 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r3 = $r2.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        if $r3 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("why is _collection._db null");

        throw $r7;

     label2:
        $r6 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r5 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        $r4 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        $l0 = virtualinvoke $r6.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>($r5, $r4);

        $i1 = (int) $l0;

        return $i1;
    }

    public int size() throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection $r1, $r2, $r6;
        long $l2, $l3, $l4;
        java.lang.IllegalArgumentException $r7, $r8;
        com.mongodb.DBObject $r4, $r5;
        com.mongodb.DBCursor r0;
        int $i0, $i1, $i5;
        com.mongodb.DB $r3;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("why is _collection null");

        throw $r8;

     label1:
        $r2 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r3 = $r2.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        if $r3 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("why is _collection._db null");

        throw $r7;

     label2:
        $r6 = r0.<com.mongodb.DBCursor: com.mongodb.DBCollection _collection>;

        $r5 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        $r4 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        $i0 = r0.<com.mongodb.DBCursor: int _numWanted>;

        $l3 = (long) $i0;

        $i1 = r0.<com.mongodb.DBCursor: int _skip>;

        $l2 = (long) $i1;

        $l4 = virtualinvoke $r6.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long)>($r5, $r4, $l3, $l2);

        $i5 = (int) $l4;

        return $i5;
    }

    public com.mongodb.DBObject getKeysWanted()
    {
        com.mongodb.DBObject $r1;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _keysWanted>;

        return $r1;
    }

    public com.mongodb.DBObject getQuery()
    {
        com.mongodb.DBObject $r1;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = r0.<com.mongodb.DBCursor: com.mongodb.DBObject _query>;

        return $r1;
    }

    public volatile java.lang.Object next()
    {
        com.mongodb.DBObject $r1;
        com.mongodb.DBCursor r0;

        r0 := @this: com.mongodb.DBCursor;

        $r1 = virtualinvoke r0.<com.mongodb.DBCursor: com.mongodb.DBObject next()>();

        return $r1;
    }
}
