abstract class com.google.inject.internal.AbstractBindingProcessor extends com.google.inject.internal.AbstractProcessor
{
    private static final java.util.Set FORBIDDEN_TYPES;
    protected final com.google.inject.internal.ProcessedBindingData bindingData;

    void <init>(com.google.inject.internal.Errors, com.google.inject.internal.ProcessedBindingData)
    {
        com.google.inject.internal.Errors r1;
        com.google.inject.internal.ProcessedBindingData r2;
        com.google.inject.internal.AbstractBindingProcessor r0;

        r0 := @this: com.google.inject.internal.AbstractBindingProcessor;

        r1 := @parameter0: com.google.inject.internal.Errors;

        r2 := @parameter1: com.google.inject.internal.ProcessedBindingData;

        specialinvoke r0.<com.google.inject.internal.AbstractProcessor: void <init>(com.google.inject.internal.Errors)>(r1);

        r0.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.ProcessedBindingData bindingData> = r2;

        return;
    }

    protected com.google.inject.internal.UntargettedBindingImpl invalidBinding(com.google.inject.internal.InjectorImpl, com.google.inject.Key, java.lang.Object)
    {
        com.google.inject.internal.InjectorImpl r1;
        com.google.inject.internal.AbstractBindingProcessor r4;
        com.google.inject.Key r2;
        java.lang.Object r3;
        com.google.inject.internal.UntargettedBindingImpl $r0;

        r4 := @this: com.google.inject.internal.AbstractBindingProcessor;

        r1 := @parameter0: com.google.inject.internal.InjectorImpl;

        r2 := @parameter1: com.google.inject.Key;

        r3 := @parameter2: java.lang.Object;

        $r0 = new com.google.inject.internal.UntargettedBindingImpl;

        specialinvoke $r0.<com.google.inject.internal.UntargettedBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    protected void putBinding(com.google.inject.internal.BindingImpl)
    {
        java.lang.Throwable $r24;
        com.google.inject.Key $r1;
        com.google.inject.internal.State $r9, $r10, $r13, $r15, $r19;
        java.lang.String $r23;
        boolean $z0, $z1;
        java.util.Set $r4;
        com.google.inject.internal.Errors $r17, $r20, $r22, $r25;
        com.google.inject.internal.InjectorImpl $r6, $r8, $r12, $r14, $r18;
        com.google.inject.internal.BindingImpl r0, $r7, $r16;
        com.google.inject.internal.AbstractBindingProcessor r5;
        java.lang.Class $r3;
        java.lang.Object $r11, $r21, $r26;
        com.google.inject.TypeLiteral $r2;

        r5 := @this: com.google.inject.internal.AbstractBindingProcessor;

        r0 := @parameter0: com.google.inject.internal.BindingImpl;

        $r1 = virtualinvoke r0.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r2 = virtualinvoke $r1.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r3 = virtualinvoke $r2.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r4 = <com.google.inject.internal.AbstractBindingProcessor: java.util.Set FORBIDDEN_TYPES>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r22 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.Errors errors>;

        $r23 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r22.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotBindToGuiceType(java.lang.String)>($r23);

        return;

     label1:
        $r6 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.InjectorImpl injector>;

        $r7 = virtualinvoke $r6.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getExistingBinding(com.google.inject.Key)>($r1);

        if $r7 == null goto label7;

        $r14 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.InjectorImpl injector>;

        $r15 = $r14.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r16 = interfaceinvoke $r15.<com.google.inject.internal.State: com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key)>($r1);

        if $r16 == null goto label6;

     label2:
        $r18 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.InjectorImpl injector>;

        $r19 = $r18.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $z1 = specialinvoke r5.<com.google.inject.internal.AbstractBindingProcessor: boolean isOkayDuplicate(com.google.inject.internal.BindingImpl,com.google.inject.internal.BindingImpl,com.google.inject.internal.State)>($r7, r0, $r19);

        if $z1 != 0 goto label4;

        $r20 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.Errors errors>;

        $r21 = virtualinvoke $r7.<com.google.inject.internal.BindingImpl: java.lang.Object getSource()>();

        virtualinvoke $r20.<com.google.inject.internal.Errors: com.google.inject.internal.Errors bindingAlreadySet(com.google.inject.Key,java.lang.Object)>($r1, $r21);

     label3:
        return;

     label4:
        goto label7;

     label5:
        $r24 := @caughtexception;

        $r25 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.Errors errors>;

        $r26 = virtualinvoke $r7.<com.google.inject.internal.BindingImpl: java.lang.Object getSource()>();

        virtualinvoke $r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorCheckingDuplicateBinding(com.google.inject.Key,java.lang.Object,java.lang.Throwable)>($r1, $r26, $r24);

        return;

     label6:
        $r17 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.Errors errors>;

        virtualinvoke $r17.<com.google.inject.internal.Errors: com.google.inject.internal.Errors jitBindingAlreadySet(com.google.inject.Key)>($r1);

        return;

     label7:
        $r8 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.InjectorImpl injector>;

        $r9 = $r8.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r10 = interfaceinvoke $r9.<com.google.inject.internal.State: com.google.inject.internal.State parent()>();

        $r11 = virtualinvoke r0.<com.google.inject.internal.BindingImpl: java.lang.Object getSource()>();

        interfaceinvoke $r10.<com.google.inject.internal.State: void blacklist(com.google.inject.Key,java.lang.Object)>($r1, $r11);

        $r12 = r5.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.InjectorImpl injector>;

        $r13 = $r12.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        interfaceinvoke $r13.<com.google.inject.internal.State: void putBinding(com.google.inject.Key,com.google.inject.internal.BindingImpl)>($r1, r0);

        return;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    private boolean isOkayDuplicate(com.google.inject.internal.BindingImpl, com.google.inject.internal.BindingImpl, com.google.inject.internal.State)
    {
        com.google.inject.Key $r3;
        java.util.Map $r1;
        com.google.inject.internal.State r0;
        com.google.inject.spi.PrivateElements $r6;
        com.google.inject.internal.ExposedBindingImpl r5;
        boolean $z0, $z1, $z2;
        com.google.inject.Injector $r7;
        com.google.inject.internal.InjectorImpl r8, $r9;
        com.google.inject.internal.BindingImpl r2, r11, r12;
        com.google.inject.internal.AbstractBindingProcessor r10;
        java.lang.Object $r4;

        r10 := @this: com.google.inject.internal.AbstractBindingProcessor;

        r11 := @parameter0: com.google.inject.internal.BindingImpl;

        r2 := @parameter1: com.google.inject.internal.BindingImpl;

        r0 := @parameter2: com.google.inject.internal.State;

        $z0 = r11 instanceof com.google.inject.internal.ExposedBindingImpl;

        if $z0 == 0 goto label3;

        r5 = (com.google.inject.internal.ExposedBindingImpl) r11;

        $r6 = virtualinvoke r5.<com.google.inject.internal.ExposedBindingImpl: com.google.inject.spi.PrivateElements getPrivateElements()>();

        $r7 = interfaceinvoke $r6.<com.google.inject.spi.PrivateElements: com.google.inject.Injector getInjector()>();

        r8 = (com.google.inject.internal.InjectorImpl) $r7;

        $r9 = virtualinvoke r2.<com.google.inject.internal.BindingImpl: com.google.inject.internal.InjectorImpl getInjector()>();

        if r8 != $r9 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $r1 = interfaceinvoke r0.<com.google.inject.internal.State: java.util.Map getExplicitBindingsThisLevel()>();

        $r3 = virtualinvoke r2.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r12 = (com.google.inject.internal.BindingImpl) $r4;

        if r12 != null goto label4;

        return 0;

     label4:
        $z1 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        return $z1;
    }

    private void validateKey(java.lang.Object, com.google.inject.Key)
    {
        com.google.inject.internal.Errors $r5;
        com.google.inject.internal.AbstractBindingProcessor r4;
        com.google.inject.Key r0;
        java.lang.Class $r2;
        java.lang.Object r3;
        com.google.inject.TypeLiteral $r1;

        r4 := @this: com.google.inject.internal.AbstractBindingProcessor;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.google.inject.Key;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r5 = r4.<com.google.inject.internal.AbstractBindingProcessor: com.google.inject.internal.Errors errors>;

        staticinvoke <com.google.inject.internal.Annotations: void checkForMisplacedScopeAnnotations(java.lang.Class,java.lang.Object,com.google.inject.internal.Errors)>($r2, r3, $r5);

        return;
    }

    static void access$000(com.google.inject.internal.AbstractBindingProcessor, java.lang.Object, com.google.inject.Key)
    {
        com.google.inject.Key r2;
        java.lang.Object r1;
        com.google.inject.internal.AbstractBindingProcessor r0;

        r0 := @parameter0: com.google.inject.internal.AbstractBindingProcessor;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: com.google.inject.Key;

        specialinvoke r0.<com.google.inject.internal.AbstractBindingProcessor: void validateKey(java.lang.Object,com.google.inject.Key)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        com.google.inject.internal.util.$ImmutableSet $r1;

        $r0 = newarray (java.lang.Class)[10];

        $r0[0] = class "Lcom/google/inject/AbstractModule;";

        $r0[1] = class "Lcom/google/inject/Binder;";

        $r0[2] = class "Lcom/google/inject/Binding;";

        $r0[3] = class "Lcom/google/inject/Injector;";

        $r0[4] = class "Lcom/google/inject/Key;";

        $r0[5] = class "Lcom/google/inject/MembersInjector;";

        $r0[6] = class "Lcom/google/inject/Module;";

        $r0[7] = class "Lcom/google/inject/Provider;";

        $r0[8] = class "Lcom/google/inject/Scope;";

        $r0[9] = class "Lcom/google/inject/TypeLiteral;";

        $r1 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of(java.lang.Object[])>($r0);

        <com.google.inject.internal.AbstractBindingProcessor: java.util.Set FORBIDDEN_TYPES> = $r1;

        return;
    }
}
