public class org.waveprotocol.wave.federation.xmpp.XmppFederationHost extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationListener$Factory
{
    private static final java.util.logging.Logger LOG;
    private final org.waveprotocol.wave.federation.WaveletFederationProvider waveletProvider;
    private final org.waveprotocol.wave.federation.xmpp.XmppDisco disco;
    private final java.lang.String jid;
    private org.waveprotocol.wave.federation.xmpp.XmppManager manager;
    private final java.util.Map listeners;

    public void <init>(org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.wave.federation.xmpp.XmppDisco, java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$1 $r3;
        org.waveprotocol.wave.federation.WaveletFederationProvider r5;
        java.util.concurrent.ConcurrentMap $r4;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r6;
        java.lang.String r7;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r0;
        com.google.common.collect.MapMaker $r1, $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r5 := @parameter0: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r6 := @parameter1: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r7 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = null;

        $r1 = new com.google.common.collect.MapMaker;

        specialinvoke $r1.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker softValues()>();

        $r3 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHost$1;

        specialinvoke $r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$1: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost)>(r0);

        $r4 = virtualinvoke $r2.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r3);

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: java.util.Map listeners> = $r4;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.WaveletFederationProvider waveletProvider> = r5;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.xmpp.XmppDisco disco> = r6;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: java.lang.String jid> = r7;

        return;
    }

    public void setManager(org.waveprotocol.wave.federation.xmpp.XmppManager)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = r1;

        return;
    }

    private static org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion parseFromUnsafe(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        long $l0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder $r0, $r2, $r5;
        com.google.protobuf.ByteString $r4;
        java.lang.String r1, r3;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r6;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder newBuilder()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setVersion(long)>($l0);

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>(r3);

        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setHistoryHash(com.google.protobuf.ByteString)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion build()>();

        return $r6;
    }

    void processHistoryRequest(org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r26;
        org.waveprotocol.wave.model.id.WaveletName $r18;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2 $r19;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r32, $r34, $r36, $r38, $r41;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r3;
        java.lang.StringBuilder $r27, $r28, $r30;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r20;
        org.dom4j.Attribute $r4, $r5, $r6, $r7, $r8, $r15;
        long l0;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r16;
        org.xmpp.packet.JID $r21;
        java.lang.String $r9, $r10, $r12, $r13, $r17, $r22, $r24, $r29, $r31;
        org.waveprotocol.wave.federation.WaveletFederationProvider $r23;
        java.lang.NumberFormatException $r33;
        java.lang.IllegalArgumentException $r35, $r37;
        org.dom4j.Element $r1, $r2, $r25, r39, r40;
        org.xmpp.packet.IQ r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r11, $r14;

        r20 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r0 := @parameter0: org.xmpp.packet.IQ;

        r3 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r39 = null;

        r40 = null;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getElement()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("pubsub");

        if $r2 == null goto label01;

        $r25 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("items");

        r39 = $r25;

        if $r25 == null goto label01;

        r40 = interfaceinvoke $r25.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("delta-history");

     label01:
        if r39 == null goto label02;

        if r40 == null goto label02;

        $r4 = interfaceinvoke r40.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("start-version");

        if $r4 == null goto label02;

        $r5 = interfaceinvoke r40.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("start-version-hash");

        if $r5 == null goto label02;

        $r6 = interfaceinvoke r40.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("end-version");

        if $r6 == null goto label02;

        $r7 = interfaceinvoke r40.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("end-version-hash");

        if $r7 == null goto label02;

        $r8 = interfaceinvoke r40.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("wavelet-name");

        if $r8 != null goto label03;

     label02:
        $r41 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed history request");

        interfaceinvoke r3.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r41);

        return;

     label03:
        $r9 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("start-version");

        $r10 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("start-version-hash");

        $r11 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion parseFromUnsafe(java.lang.String,java.lang.String)>($r9, $r10);

     label04:
        goto label06;

     label05:
        $r37 := @caughtexception;

        $r38 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Invalid format of start version");

        interfaceinvoke r3.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r38);

        return;

     label06:
        $r12 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("end-version");

        $r13 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("end-version-hash");

        $r14 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion parseFromUnsafe(java.lang.String,java.lang.String)>($r12, $r13);

     label07:
        goto label09;

     label08:
        $r35 := @caughtexception;

        $r36 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Invalid format of end version");

        interfaceinvoke r3.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r36);

        return;

     label09:
        $r15 = interfaceinvoke r40.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("response-length-limit");

        if $r15 == null goto label13;

     label10:
        $r24 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("response-length-limit");

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r24);

     label11:
        goto label14;

     label12:
        $r33 := @caughtexception;

        $r34 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Invalid response length limit");

        interfaceinvoke r3.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r34);

        return;

     label13:
        l0 = 0L;

     label14:
        $r16 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r17 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r18 = virtualinvoke $r16.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: org.waveprotocol.wave.model.id.WaveletName uriToWaveletName(java.lang.String)>($r17);

     label15:
        goto label17;

     label16:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed wavelet name: ");

        $r29 = interfaceinvoke r40.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r31);

        interfaceinvoke r3.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r32);

        return;

     label17:
        $r19 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2;

        specialinvoke $r19.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$2: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.xmpp.packet.IQ)>(r20, r3, r0);

        $r21 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.JID getFrom()>();

        $r22 = virtualinvoke $r21.<org.xmpp.packet.JID: java.lang.String getDomain()>();

        $r23 = r20.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.WaveletFederationProvider waveletProvider>;

        interfaceinvoke $r23.<org.waveprotocol.wave.federation.WaveletFederationProvider: void requestHistory(org.waveprotocol.wave.model.id.WaveletName,java.lang.String,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,long,org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)>($r18, $r22, $r11, $r14, l0, $r19);

        return;

        catch java.lang.IllegalArgumentException from label03 to label04 with label05;
        catch java.lang.IllegalArgumentException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label10 to label11 with label12;
        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label14 to label15 with label16;
    }

    void processSubmitRequest(org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r7;
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r20;
        java.lang.String $r6, $r8, $r10, $r23, $r25;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3 $r13;
        org.waveprotocol.wave.model.id.WaveletName $r9;
        com.google.protobuf.InvalidProtocolBufferException $r18;
        org.waveprotocol.wave.federation.WaveletFederationProvider $r15;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r12;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r19, $r26, $r30;
        com.google.protobuf.ByteString $r11;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r4;
        org.dom4j.Element $r1, $r2, $r3, $r16, $r17, r27, r28, r29;
        java.lang.StringBuilder $r21, $r22, $r24;
        org.xmpp.packet.IQ r0;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r14;
        org.dom4j.Attribute $r5;

        r14 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r0 := @parameter0: org.xmpp.packet.IQ;

        r4 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r27 = null;

        r28 = null;

        r29 = null;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getElement()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("pubsub");

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("publish");

        if $r3 == null goto label1;

        $r16 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("item");

        r27 = $r16;

        if $r16 == null goto label1;

        $r17 = interfaceinvoke $r16.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("submit-request");

        r28 = $r17;

        if $r17 == null goto label1;

        r29 = interfaceinvoke $r17.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("delta");

     label1:
        if $r3 == null goto label2;

        if r27 == null goto label2;

        if r28 == null goto label2;

        if r29 == null goto label2;

        $r5 = interfaceinvoke r29.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("wavelet-name");

        if $r5 == null goto label2;

        $r6 = interfaceinvoke r29.<org.dom4j.Element: java.lang.String getText()>();

        if $r6 != null goto label3;

     label2:
        $r30 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed submit request");

        interfaceinvoke r4.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r30);

        return;

     label3:
        $r7 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r8 = interfaceinvoke r29.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: org.waveprotocol.wave.model.id.WaveletName uriToWaveletName(java.lang.String)>($r8);

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed wavelet name: ");

        $r23 = interfaceinvoke r29.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r25);

        interfaceinvoke r4.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r26);

        return;

     label6:
        $r10 = interfaceinvoke r29.<org.dom4j.Element: java.lang.String getText()>();

        $r11 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>($r10);

        $r12 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta parseFrom(com.google.protobuf.ByteString)>($r11);

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

        $r19 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed delta, not a valid protocol buffer");

        interfaceinvoke r4.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r19);

        return;

     label9:
        $r13 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3;

        specialinvoke $r13.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.xmpp.packet.IQ)>(r14, r4, r0);

        $r15 = r14.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.WaveletFederationProvider waveletProvider>;

        interfaceinvoke $r15.<org.waveprotocol.wave.federation.WaveletFederationProvider: void submitRequest(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)>($r9, $r12, $r13);

        return;

        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label3 to label4 with label5;
        catch com.google.protobuf.InvalidProtocolBufferException from label6 to label7 with label8;
    }

    void processGetSignerRequest(org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r13;
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r19;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r14;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$4 $r16;
        org.waveprotocol.wave.model.id.WaveletName $r15;
        org.waveprotocol.wave.federation.WaveletFederationProvider $r18;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r20, $r22, $r24, $r27;
        java.lang.IllegalArgumentException $r21, $r23;
        com.google.protobuf.ByteString $r9;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r17;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r26;
        org.dom4j.Element $r1, $r2, $r25;
        org.xmpp.packet.IQ r0;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r3;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r12;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r0 := @parameter0: org.xmpp.packet.IQ;

        r17 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("items");

        if $r2 == null goto label01;

        $r25 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("signer-request");

        goto label02;

     label01:
        $r25 = null;

     label02:
        if $r2 == null goto label03;

        if $r25 == null goto label03;

        $r4 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        if $r4 == null goto label03;

        $r5 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("signer-id");

        if $r5 == null goto label03;

        $r6 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("version");

        if $r6 == null goto label03;

        $r7 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("history-hash");

        if $r7 != null goto label04;

     label03:
        $r26 = r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        $r27 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed signer request");

        virtualinvoke $r26.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r0, $r27);

        return;

     label04:
        $r8 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("signer-id");

        $r9 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>($r8);

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        $r24 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed signer ID");

        interfaceinvoke r17.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r24);

        return;

     label07:
        $r10 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("version");

        $r11 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("history-hash");

        $r12 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion parseFromUnsafe(java.lang.String,java.lang.String)>($r10, $r11);

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

        $r22 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Invalid hashed version");

        interfaceinvoke r17.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r22);

        return;

     label10:
        $r13 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r14 = interfaceinvoke $r25.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r15 = virtualinvoke $r13.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: org.waveprotocol.wave.model.id.WaveletName uriToWaveletName(java.lang.String)>($r14);

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;

        $r20 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed wavelet name");

        interfaceinvoke r17.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r20);

        return;

     label13:
        $r16 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHost$4;

        specialinvoke $r16.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$4: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.xmpp.packet.IQ)>(r3, r17, r0);

        $r18 = r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.WaveletFederationProvider waveletProvider>;

        interfaceinvoke $r18.<org.waveprotocol.wave.federation.WaveletFederationProvider: void getDeltaSignerInfo(com.google.protobuf.ByteString,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)>($r9, $r15, $r12, $r16);

        return;

        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label10 to label11 with label12;
    }

    void processPostSignerRequest(org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r8;
        java.lang.String $r11, $r18;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$5 $r9;
        org.waveprotocol.wave.federation.WaveletFederationProvider $r12;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r19, $r22;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r4;
        org.dom4j.Element $r1, $r2, $r3, $r7, $r13, r20, r21;
        java.lang.StringBuilder $r15, $r16, $r17;
        org.xmpp.packet.IQ r0;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r10;
        org.dom4j.Attribute $r5, $r6;
        org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType $r14;

        r10 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r0 := @parameter0: org.xmpp.packet.IQ;

        r4 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r20 = null;

        r21 = null;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getElement()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("pubsub");

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("publish");

        if $r3 == null goto label1;

        $r13 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("item");

        r20 = $r13;

        if $r13 == null goto label1;

        r21 = interfaceinvoke $r13.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("signature");

     label1:
        if $r3 == null goto label2;

        if r20 == null goto label2;

        if r21 == null goto label2;

        $r5 = interfaceinvoke r21.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("domain");

        if $r5 == null goto label2;

        $r6 = interfaceinvoke r21.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("algorithm");

        if $r6 == null goto label2;

        $r7 = interfaceinvoke r21.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("certificate");

        if $r7 != null goto label3;

     label2:
        $r22 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Malformed post signer request");

        interfaceinvoke r4.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r22);

        return;

     label3:
        $r8 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo xmlToProtocolSignerInfo(org.dom4j.Element)>(r21);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not understand signer algorithm: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r18);

        interfaceinvoke r4.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r19);

        return;

     label6:
        $r9 = new org.waveprotocol.wave.federation.xmpp.XmppFederationHost$5;

        specialinvoke $r9.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$5: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.xmpp.packet.IQ)>(r10, r4, r0);

        $r11 = interfaceinvoke r21.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("domain");

        $r12 = r10.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.WaveletFederationProvider waveletProvider>;

        interfaceinvoke $r12.<org.waveprotocol.wave.federation.WaveletFederationProvider: void postSignerInfo(java.lang.String,org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo,org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)>($r11, $r8, $r9);

        return;

        catch org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType from label3 to label4 with label5;
    }

    public org.waveprotocol.wave.federation.WaveletFederationListener listenerForDomain(java.lang.String)
    {
        org.waveprotocol.wave.federation.WaveletFederationListener $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: java.util.Map listeners>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.federation.WaveletFederationListener) $r3;

        return $r4;
    }

    static org.waveprotocol.wave.federation.xmpp.XmppManager access$000(org.waveprotocol.wave.federation.xmpp.XmppFederationHost)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager $r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        return $r1;
    }

    static org.waveprotocol.wave.federation.xmpp.XmppDisco access$100(org.waveprotocol.wave.federation.xmpp.XmppFederationHost)
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        return $r1;
    }

    static java.lang.String access$200(org.waveprotocol.wave.federation.xmpp.XmppFederationHost)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost: java.lang.String jid>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/XmppFederationHost;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.XmppFederationHost: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
