public abstract class org.apache.commons.configuration.FileSystem extends java.lang.Object
{
    private static final java.lang.String FILE_SYSTEM;
    private static org.apache.commons.configuration.FileSystem fileSystem;
    private org.apache.commons.logging.Log log;
    private org.apache.commons.configuration.FileOptionsProvider optionsProvider;

    public void <init>()
    {
        org.apache.commons.configuration.FileSystem r0;

        r0 := @this: org.apache.commons.configuration.FileSystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.configuration.FileSystem: void setLogger(org.apache.commons.logging.Log)>(null);

        return;
    }

    public org.apache.commons.logging.Log getLogger()
    {
        org.apache.commons.configuration.FileSystem r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.configuration.FileSystem;

        $r1 = r0.<org.apache.commons.configuration.FileSystem: org.apache.commons.logging.Log log>;

        return $r1;
    }

    public void setLogger(org.apache.commons.logging.Log)
    {
        org.apache.commons.logging.impl.NoOpLog $r3;
        org.apache.commons.configuration.FileSystem r0;
        org.apache.commons.logging.Log r1, $r2;

        r0 := @this: org.apache.commons.configuration.FileSystem;

        r1 := @parameter0: org.apache.commons.logging.Log;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.commons.logging.impl.NoOpLog;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.commons.logging.impl.NoOpLog: void <init>()>();

     label2:
        r0.<org.apache.commons.configuration.FileSystem: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public static void setDefaultFileSystem(org.apache.commons.configuration.FileSystem) throws java.lang.NullPointerException
    {
        org.apache.commons.configuration.FileSystem r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: org.apache.commons.configuration.FileSystem;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("A FileSystem implementation is required");

        throw $r1;

     label1:
        <org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileSystem fileSystem> = r0;

        return;
    }

    public static void resetDefaultFileSystem()
    {
        org.apache.commons.configuration.DefaultFileSystem $r0;

        $r0 = new org.apache.commons.configuration.DefaultFileSystem;

        specialinvoke $r0.<org.apache.commons.configuration.DefaultFileSystem: void <init>()>();

        <org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileSystem fileSystem> = $r0;

        return;
    }

    public static org.apache.commons.configuration.FileSystem getDefaultFileSystem()
    {
        org.apache.commons.configuration.FileSystem $r0;

        $r0 = <org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileSystem fileSystem>;

        return $r0;
    }

    public void setFileOptionsProvider(org.apache.commons.configuration.FileOptionsProvider)
    {
        org.apache.commons.configuration.FileSystem r0;
        org.apache.commons.configuration.FileOptionsProvider r1;

        r0 := @this: org.apache.commons.configuration.FileSystem;

        r1 := @parameter0: org.apache.commons.configuration.FileOptionsProvider;

        r0.<org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileOptionsProvider optionsProvider> = r1;

        return;
    }

    public org.apache.commons.configuration.FileOptionsProvider getFileOptionsProvider()
    {
        org.apache.commons.configuration.FileSystem r0;
        org.apache.commons.configuration.FileOptionsProvider $r1;

        r0 := @this: org.apache.commons.configuration.FileSystem;

        $r1 = r0.<org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileOptionsProvider optionsProvider>;

        return $r1;
    }

    public abstract java.io.InputStream getInputStream(java.lang.String, java.lang.String) throws org.apache.commons.configuration.ConfigurationException;

    public abstract java.io.InputStream getInputStream(java.net.URL) throws org.apache.commons.configuration.ConfigurationException;

    public abstract java.io.OutputStream getOutputStream(java.net.URL) throws org.apache.commons.configuration.ConfigurationException;

    public abstract java.io.OutputStream getOutputStream(java.io.File) throws org.apache.commons.configuration.ConfigurationException;

    public abstract java.lang.String getPath(java.io.File, java.net.URL, java.lang.String, java.lang.String);

    public abstract java.lang.String getBasePath(java.lang.String);

    public abstract java.lang.String getFileName(java.lang.String);

    public abstract java.net.URL locateFromURL(java.lang.String, java.lang.String);

    public abstract java.net.URL getURL(java.lang.String, java.lang.String) throws java.net.MalformedURLException;

    static void <clinit>()
    {
        org.apache.commons.configuration.FileSystem $r6, $r26;
        java.lang.InstantiationException $r21;
        java.lang.String $r0, $r10, $r15, $r20, $r25;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r16;
        org.apache.commons.configuration.DefaultFileSystem $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.Class $r3, $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24;
        java.lang.ClassNotFoundException $r11;

        <org.apache.commons.configuration.FileSystem: java.lang.String FILE_SYSTEM> = "org.apache.commons.configuration.filesystem";

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.configuration.filesystem");

        if $r0 == null goto label6;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/commons/configuration/FileSystem;");

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r4 = class "Lorg/apache/commons/configuration/FileSystem;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (org.apache.commons.configuration.FileSystem) $r5;

        <org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileSystem fileSystem> = $r6;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label2:
        goto label6;

     label3:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r25, $r21);

        goto label6;

     label4:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r20, $r16);

        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r15, $r11);

     label6:
        $r26 = <org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileSystem fileSystem>;

        if $r26 != null goto label7;

        $r1 = new org.apache.commons.configuration.DefaultFileSystem;

        specialinvoke $r1.<org.apache.commons.configuration.DefaultFileSystem: void <init>()>();

        <org.apache.commons.configuration.FileSystem: org.apache.commons.configuration.FileSystem fileSystem> = $r1;

     label7:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
    }
}
