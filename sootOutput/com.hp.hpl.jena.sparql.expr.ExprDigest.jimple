public abstract class com.hp.hpl.jena.sparql.expr.ExprDigest extends com.hp.hpl.jena.sparql.expr.ExprFunction1
{
    private final java.lang.String digestName;
    private java.security.MessageDigest digestCache;
    com.hp.hpl.jena.sparql.expr.NodeValue lastSeen;
    com.hp.hpl.jena.sparql.expr.NodeValue lastCalc;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.ExprDigest r0;
        java.security.MessageDigest $r4;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        com.hp.hpl.jena.sparql.expr.Expr r1;
        java.security.NoSuchAlgorithmException $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String r2, r3, $r10;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprDigest;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction1: void <init>(com.hp.hpl.jena.sparql.expr.Expr,java.lang.String)>(r1, r2);

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastSeen> = null;

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastCalc> = null;

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.lang.String digestName> = r3;

     label1:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r3);

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.security.MessageDigest digestCache> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Digest not provided in this Java system: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private java.security.MessageDigest getDigest()
    {
        com.hp.hpl.jena.sparql.expr.ExprDigest r0;
        java.security.MessageDigest $r1, $r2, $r3, r6;
        java.lang.Object $r4;
        java.lang.CloneNotSupportedException $r5;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprDigest;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.security.MessageDigest digestCache>;

        if $r1 == null goto label4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.security.MessageDigest digestCache>;

        $r4 = virtualinvoke $r3.<java.security.MessageDigest: java.lang.Object clone()>();

        r6 = (java.security.MessageDigest) $r4;

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.security.MessageDigest digestCache> = null;

     label4:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.security.MessageDigest createDigest()>();

        return $r2;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    private java.security.MessageDigest createDigest()
    {
        com.hp.hpl.jena.sparql.expr.ExprDigest r0;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r4;
        java.security.MessageDigest $r2;
        java.lang.String $r1;
        java.lang.Exception $r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprDigest;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.lang.String digestName>;

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        byte[] $r8, $r9;
        com.hp.hpl.jena.sparql.expr.ExprDigest r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r1, r2, $r11, $r22, $r23;
        java.security.MessageDigest $r6;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r14, $r16, $r17;
        java.lang.String $r4, $r7, $r10, $r15, $r21;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r12;
        java.lang.Exception $r24;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r25;
        com.hp.hpl.jena.datatypes.RDFDatatype $r5, $r13;
        java.lang.StringBuilder $r18, $r19, $r20;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprDigest;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastSeen>;

        if $r1 == null goto label1;

        $r22 = r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastSeen>;

        $z3 = virtualinvoke $r22.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label1;

        $r23 = r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastCalc>;

        return $r23;

     label1:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label2;

        $r17 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label2:
        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r4 == null goto label3;

        $r15 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label3;

        $r16 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r16.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Can\'t make a digest of an RDF term with a language tag");

        throw $r16;

     label3:
        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r5 == null goto label4;

        $r12 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $r13 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z1 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label4;

        $r14 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a simple literal nor an XSD string");

        throw $r14;

     label4:
        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: java.security.MessageDigest getDigest()>();

        $r7 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r9 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r8);

        $r10 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHexLC(byte[])>($r9);

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r10);

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastSeen> = r2;

        r0.<com.hp.hpl.jena.sparql.expr.ExprDigest: com.hp.hpl.jena.sparql.expr.NodeValue lastCalc> = $r11;

     label5:
        return $r11;

     label6:
        $r24 := @caughtexception;

        $r25 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r25.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.Throwable)>($r24);

        throw $r25;

        catch java.lang.Exception from label4 to label5 with label6;
    }
}
