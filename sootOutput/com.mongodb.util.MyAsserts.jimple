public class com.mongodb.util.MyAsserts extends java.lang.Object
{
    private static java.util.regex.Pattern _whiteSpace;

    public void <init>()
    {
        com.mongodb.util.MyAsserts r0;

        r0 := @this: com.mongodb.util.MyAsserts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertTrue(boolean)
    {
        com.mongodb.util.MyAsserts$MyAssert $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new com.mongodb.util.MyAsserts$MyAssert;

        specialinvoke $r0.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>("false");

        throw $r0;

     label1:
        return;
    }

    public static void assertTrue(boolean, java.lang.String)
    {
        com.mongodb.util.MyAsserts$MyAssert $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        boolean z0;

        z0 := @parameter0: boolean;

        r3 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r0 = new com.mongodb.util.MyAsserts$MyAssert;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("false : ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        return;
    }

    public static void assertFalse(boolean)
    {
        com.mongodb.util.MyAsserts$MyAssert $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = new com.mongodb.util.MyAsserts$MyAssert;

        specialinvoke $r0.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>("true");

        throw $r0;

     label1:
        return;
    }

    public static void assertEquals(int, int)
    {
        com.mongodb.util.MyAsserts$MyAssert $r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        $r0 = new com.mongodb.util.MyAsserts$MyAssert;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r6);

        throw $r0;

     label1:
        return;
    }

    public static void assertEquals(long, long)
    {
        com.mongodb.util.MyAsserts$MyAssert $r0;
        long l0, l1;
        byte $b2;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 == 0 goto label1;

        $r0 = new com.mongodb.util.MyAsserts$MyAssert;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r6);

        throw $r0;

     label1:
        return;
    }

    public static void assertEquals(char, char)
    {
        com.mongodb.util.MyAsserts$MyAssert $r8;
        char c0, c1;
        int $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i2 = (int) c0;

        $i3 = (int) c1;

        if $i2 == $i3 goto label1;

        $r8 = new com.mongodb.util.MyAsserts$MyAssert;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        return;
    }

    public static void assertEquals(short, short)
    {
        com.mongodb.util.MyAsserts$MyAssert $r8;
        short s0, s1;
        int $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $i2 = (int) s0;

        $i3 = (int) s1;

        if $i2 == $i3 goto label1;

        $r8 = new com.mongodb.util.MyAsserts$MyAssert;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i4 = (int) s0;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i5 = (int) s1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        return;
    }

    public static void assertEquals(double, double, double)
    {
        com.mongodb.util.MyAsserts$MyAssert $r8;
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r6;
        double d0, d1, $d2, $d3, d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d4 := @parameter2: double;

        $d2 = d0 - d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b0 = $d3 cmpl d4;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $r8 = new com.mongodb.util.MyAsserts$MyAssert;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        staticinvoke <com.mongodb.util.MyAsserts: void _assertEquals(java.lang.Object,java.lang.Object)>(r0, $r2);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.mongodb.util.MyAsserts: void _assertEquals(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public static void _assertEquals(java.lang.Object, java.lang.Object)
    {
        com.mongodb.util.MyAsserts$MyAssert $r2, $r10;
        java.lang.Object r0, r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        return;

     label1:
        $r10 = new com.mongodb.util.MyAsserts$MyAssert;

        specialinvoke $r10.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>("left null, right not");

        throw $r10;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = new com.mongodb.util.MyAsserts$MyAssert;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] != [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    public static void assertEquals(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mongodb.util.MyAsserts$MyAssert $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        java.lang.String r0, r1, r9, $r11;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new com.mongodb.util.MyAsserts$MyAssert;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] != [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r11);

        throw $r2;
    }

    public static void assertNotEquals(java.lang.Object, java.lang.Object)
    {
        com.mongodb.util.MyAsserts$MyAssert $r2, $r10;
        java.lang.Object r0, r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 == null goto label1;

        return;

     label1:
        $r10 = new com.mongodb.util.MyAsserts$MyAssert;

        specialinvoke $r10.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>("left null, right null");

        throw $r10;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        return;

     label3:
        $r2 = new com.mongodb.util.MyAsserts$MyAssert;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] == [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    public static void assertClose(java.lang.String, java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r2 = "null";

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        staticinvoke <com.mongodb.util.MyAsserts: void assertClose(java.lang.String,java.lang.String)>(r0, $r2);

        return;
    }

    public static void assertClose(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.mongodb.util.MyAsserts: void assertClose(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "");

        return;
    }

    public static void assertClose(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mongodb.util.MyAsserts$MyAssert $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String r0, r1, r4, $r11;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $z0 = staticinvoke <com.mongodb.util.MyAsserts: boolean isClose(java.lang.String,java.lang.String)>(r0, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new com.mongodb.util.MyAsserts$MyAssert;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] != [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r11);

        throw $r2;
    }

    public static boolean isClose(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, r2, r3;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = staticinvoke <com.mongodb.util.MyAsserts: java.lang.String _simplify(java.lang.String)>(r2);

        $r1 = staticinvoke <com.mongodb.util.MyAsserts: java.lang.String _simplify(java.lang.String)>(r3);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    private static java.lang.String _simplify(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String $r0, $r3, r4;
        java.util.regex.Pattern $r1;

        r4 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $r1 = <com.mongodb.util.MyAsserts: java.util.regex.Pattern _whiteSpace>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        return $r3;
    }

    public static void assertNull(java.lang.Object)
    {
        com.mongodb.util.MyAsserts$MyAssert $r1;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new com.mongodb.util.MyAsserts$MyAssert;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not null [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static void assertNotNull(java.lang.Object)
    {
        com.mongodb.util.MyAsserts$MyAssert $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        return;

     label1:
        $r1 = new com.mongodb.util.MyAsserts$MyAssert;

        specialinvoke $r1.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>("null");

        throw $r1;
    }

    public static void assertLess(long, long)
    {
        com.mongodb.util.MyAsserts$MyAssert $r7;
        long l0, l1;
        byte $b2;
        int $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.String $r5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        return;

     label1:
        $r7 = new com.mongodb.util.MyAsserts$MyAssert;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is higher than ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r5);

        throw $r7;
    }

    public static void assertLess(double, double)
    {
        com.mongodb.util.MyAsserts$MyAssert $r7;
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.String $r5;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return;

     label1:
        $r7 = new com.mongodb.util.MyAsserts$MyAssert;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is higher than ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>($r5);

        throw $r7;
    }

    public static void assertEmptyString(java.lang.String)
    {
        com.mongodb.util.MyAsserts$MyAssert $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r1 = new com.mongodb.util.MyAsserts$MyAssert;

        specialinvoke $r1.<com.mongodb.util.MyAsserts$MyAssert: void <init>(java.lang.String)>(r0);

        throw $r1;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("\\s+", 40);

        <com.mongodb.util.MyAsserts: java.util.regex.Pattern _whiteSpace> = $r0;

        return;
    }
}
