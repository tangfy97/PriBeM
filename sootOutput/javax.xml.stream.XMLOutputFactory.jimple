public abstract class javax.xml.stream.XMLOutputFactory extends java.lang.Object
{
    public static final java.lang.String IS_REPAIRING_NAMESPACES;
    private static final java.lang.String PROPERTY_NAME;
    private static final java.lang.String DEFAULT_FACTORY;

    protected void <init>()
    {
        javax.xml.stream.XMLOutputFactory r0;

        r0 := @this: javax.xml.stream.XMLOutputFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.xml.stream.XMLOutputFactory newInstance() throws javax.xml.stream.FactoryConfigurationError
    {
        javax.xml.stream.XMLOutputFactory $r1;
        java.lang.Object $r0;
        java.lang.String $r5;
        java.lang.Exception $r4;
        javax.xml.stream.FactoryFinder$ConfigurationError $r2;
        javax.xml.stream.FactoryConfigurationError $r3;

     label1:
        $r0 = staticinvoke <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>("javax.xml.stream.XMLOutputFactory", "com.ctc.wstx.stax.WstxOutputFactory");

        $r1 = (javax.xml.stream.XMLOutputFactory) $r0;

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new javax.xml.stream.FactoryConfigurationError;

        $r4 = virtualinvoke $r2.<javax.xml.stream.FactoryFinder$ConfigurationError: java.lang.Exception getException()>();

        $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<javax.xml.stream.FactoryConfigurationError: void <init>(java.lang.Exception,java.lang.String)>($r4, $r5);

        throw $r3;

        catch javax.xml.stream.FactoryFinder$ConfigurationError from label1 to label2 with label2;
    }

    public static javax.xml.stream.XMLInputFactory newInstance(java.lang.String, java.lang.ClassLoader) throws javax.xml.stream.FactoryConfigurationError
    {
        javax.xml.stream.XMLInputFactory $r2;
        java.lang.Exception $r5;
        javax.xml.stream.FactoryConfigurationError $r4;
        java.lang.Object $r1;
        java.lang.String r0, $r6;
        java.lang.ClassLoader r7;
        javax.xml.stream.FactoryFinder$ConfigurationError $r3;

        r0 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.ClassLoader;

        if r7 != null goto label1;

        r7 = staticinvoke <javax.xml.stream.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        $r1 = staticinvoke <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.ClassLoader,java.lang.String)>(r0, r7, "com.ctc.wstx.stax.WstxInputFactory");

        $r2 = (javax.xml.stream.XMLInputFactory) $r1;

        return $r2;

     label2:
        $r3 := @caughtexception;

        $r4 = new javax.xml.stream.FactoryConfigurationError;

        $r5 = virtualinvoke $r3.<javax.xml.stream.FactoryFinder$ConfigurationError: java.lang.Exception getException()>();

        $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r4.<javax.xml.stream.FactoryConfigurationError: void <init>(java.lang.Exception,java.lang.String)>($r5, $r6);

        throw $r4;

        catch javax.xml.stream.FactoryFinder$ConfigurationError from label1 to label2 with label2;
    }

    public abstract javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLEventWriter createXMLEventWriter(javax.xml.transform.Result) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer) throws javax.xml.stream.XMLStreamException;

    public abstract void setProperty(java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException;

    public abstract java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException;

    public abstract boolean isPropertySupported(java.lang.String);

    public static void <clinit>()
    {
        <javax.xml.stream.XMLOutputFactory: java.lang.String DEFAULT_FACTORY> = "com.ctc.wstx.stax.WstxOutputFactory";

        <javax.xml.stream.XMLOutputFactory: java.lang.String PROPERTY_NAME> = "javax.xml.stream.XMLOutputFactory";

        <javax.xml.stream.XMLOutputFactory: java.lang.String IS_REPAIRING_NAMESPACES> = "javax.xml.stream.isRepairingNamespaces";

        return;
    }
}
