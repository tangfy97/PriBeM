public final class com.mycila.inject.internal.guava.collect.Maps extends java.lang.Object
{
    static final com.mycila.inject.internal.guava.base.Joiner$MapJoiner STANDARD_JOINER;

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Maps r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.HashMap newHashMap()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        return $r0;
    }

    public static java.util.HashMap newHashMapWithExpectedSize(int)
    {
        int i0, $i1;
        java.util.HashMap $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.HashMap;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: int capacity(int)>(i0);

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i1);

        return $r0;
    }

    static int capacity(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 3 goto label3;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $i3 = i0 + 1;

        return $i3;

     label3:
        if i0 >= 1073741824 goto label4;

        $i1 = i0 / 3;

        $i2 = i0 + $i1;

        return $i2;

     label4:
        return 2147483647;
    }

    public static java.util.HashMap newHashMap(java.util.Map)
    {
        java.util.HashMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static java.util.LinkedHashMap newLinkedHashMap()
    {
        java.util.LinkedHashMap $r0;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedHashMap newLinkedHashMap(java.util.Map)
    {
        java.util.LinkedHashMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static java.util.concurrent.ConcurrentMap newConcurrentMap()
    {
        com.mycila.inject.internal.guava.collect.MapMaker $r0;
        java.util.concurrent.ConcurrentMap $r1;

        $r0 = new com.mycila.inject.internal.guava.collect.MapMaker;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapMaker: void <init>()>();

        $r1 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        return $r1;
    }

    public static java.util.TreeMap newTreeMap()
    {
        java.util.TreeMap $r0;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        return $r0;
    }

    public static java.util.TreeMap newTreeMap(java.util.SortedMap)
    {
        java.util.TreeMap $r0;
        java.util.SortedMap r1;

        r1 := @parameter0: java.util.SortedMap;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.SortedMap)>(r1);

        return $r0;
    }

    public static java.util.TreeMap newTreeMap(java.util.Comparator)
    {
        java.util.TreeMap $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>(r1);

        return $r0;
    }

    public static java.util.EnumMap newEnumMap(java.lang.Class)
    {
        java.util.EnumMap $r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.EnumMap;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>($r3);

        return $r0;
    }

    public static java.util.EnumMap newEnumMap(java.util.Map)
    {
        java.util.EnumMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static java.util.IdentityHashMap newIdentityHashMap()
    {
        java.util.IdentityHashMap $r0;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.BiMap synchronizedBiMap(com.mycila.inject.internal.guava.collect.BiMap)
    {
        com.mycila.inject.internal.guava.collect.BiMap r0, $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: com.mycila.inject.internal.guava.collect.BiMap biMap(com.mycila.inject.internal.guava.collect.BiMap,java.lang.Object)>(r0, null);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.MapDifference difference(java.util.Map, java.util.Map)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r2;
        java.util.Map r0, r1;
        com.mycila.inject.internal.guava.collect.MapDifference $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Equivalences: com.mycila.inject.internal.guava.base.Equivalence equals()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: com.mycila.inject.internal.guava.collect.MapDifference difference(java.util.Map,java.util.Map,com.mycila.inject.internal.guava.base.Equivalence)>(r0, r1, $r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.MapDifference difference(java.util.Map, java.util.Map, com.mycila.inject.internal.guava.base.Equivalence)
    {
        com.mycila.inject.internal.guava.base.Equivalence r0;
        java.util.HashMap $r1, $r2, $r4, $r5;
        com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference $r14;
        java.util.Map r3, r6;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        com.mycila.inject.internal.guava.collect.MapDifference $r15;
        java.util.Map$Entry r10;
        java.util.Iterator $r8;
        java.util.Set $r7;
        java.lang.Object $r9, $r11, $r12, $r13;

        r6 := @parameter0: java.util.Map;

        r3 := @parameter1: java.util.Map;

        r0 := @parameter2: com.mycila.inject.internal.guava.base.Equivalence;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.HashMap newHashMap()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.HashMap newHashMap()>();

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.HashMap newHashMap()>();

        z4 = 1;

        $r7 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z2 == 0 goto label4;

        $r13 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11);

        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $z3 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        goto label3;

     label2:
        z4 = 0;

        $r14 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object)>($r12, $r13);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r14);

     label3:
        goto label5;

     label4:
        z4 = 0;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

     label5:
        goto label1;

     label6:
        if z4 == 0 goto label7;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        $r15 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: com.mycila.inject.internal.guava.collect.MapDifference mapDifference(boolean,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>($z5, $r1, $r2, $r4, $r5);

        return $r15;
    }

    private static com.mycila.inject.internal.guava.collect.MapDifference mapDifference(boolean, java.util.Map, java.util.Map, java.util.Map, java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.Maps$MapDifferenceImpl $r0;
        java.util.Map r1, $r2, r3, $r4, r5, $r6, r7, $r8;
        boolean z0;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r5 := @parameter3: java.util.Map;

        r7 := @parameter4: java.util.Map;

        $r0 = new com.mycila.inject.internal.guava.collect.Maps$MapDifferenceImpl;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r5);

        $r8 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r7);

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Maps$MapDifferenceImpl: void <init>(boolean,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(z0, $r2, $r4, $r6, $r8);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMap uniqueIndex(java.lang.Iterable, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r3;
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.base.Function r2;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: com.mycila.inject.internal.guava.collect.ImmutableMap uniqueIndex(java.util.Iterator,com.mycila.inject.internal.guava.base.Function)>($r1, r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMap uniqueIndex(java.lang.Object, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r4;
        java.lang.Object r0, $r1;
        com.mycila.inject.internal.guava.base.Function r3;
        java.lang.Iterable r2;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r2 = (java.lang.Iterable) $r1;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: com.mycila.inject.internal.guava.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.mycila.inject.internal.guava.base.Function)>(r2, r3);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMap uniqueIndex(java.util.Iterator, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMap$Builder $r1;
        java.util.Iterator r2;
        java.lang.Object $r4, $r5;
        com.mycila.inject.internal.guava.base.Function r0;
        boolean $z0;

        r2 := @parameter0: java.util.Iterator;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r0.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>($r4);

        virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r5, $r4);

        goto label1;

     label2:
        $r3 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMap fromProperties(java.util.Properties)
    {
        java.util.Properties r1;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMap$Builder $r0;
        java.util.Enumeration $r2;
        java.lang.Object $r4;
        java.lang.String r5, $r6;
        boolean $z0;

        r1 := @parameter0: java.util.Properties;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

        $r2 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r5);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(r5, $r6);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

        return $r3;
    }

    public static java.util.Map$Entry immutableEntry(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableEntry $r0;
        java.lang.Object r1, r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableEntry;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r0;
    }

    static java.util.Set unmodifiableEntrySet(java.util.Set)
    {
        com.mycila.inject.internal.guava.collect.Maps$UnmodifiableEntrySet $r0;
        java.util.Set r1, $r2;

        r1 := @parameter0: java.util.Set;

        $r0 = new com.mycila.inject.internal.guava.collect.Maps$UnmodifiableEntrySet;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Maps$UnmodifiableEntrySet: void <init>(java.util.Set)>($r2);

        return $r0;
    }

    static java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        com.mycila.inject.internal.guava.collect.Maps$1 $r1;

        r0 := @parameter0: java.util.Map$Entry;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.Maps$1;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Maps$1: void <init>(java.util.Map$Entry)>(r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.BiMap unmodifiableBiMap(com.mycila.inject.internal.guava.collect.BiMap)
    {
        com.mycila.inject.internal.guava.collect.BiMap r1;
        com.mycila.inject.internal.guava.collect.Maps$UnmodifiableBiMap $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        $r0 = new com.mycila.inject.internal.guava.collect.Maps$UnmodifiableBiMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Maps$UnmodifiableBiMap: void <init>(com.mycila.inject.internal.guava.collect.BiMap,com.mycila.inject.internal.guava.collect.BiMap)>(r1, null);

        return $r0;
    }

    public static java.util.Map transformValues(java.util.Map, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.Maps$2 $r1;
        java.util.Map r2, $r3;
        com.mycila.inject.internal.guava.base.Function r0;

        r2 := @parameter0: java.util.Map;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.Maps$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Maps$2: void <init>(com.mycila.inject.internal.guava.base.Function)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map transformEntries(java.util.Map,com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)>(r2, $r1);

        return $r3;
    }

    public static java.util.Map transformEntries(java.util.Map, com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)
    {
        com.mycila.inject.internal.guava.collect.Maps$EntryTransformer r2;
        com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Maps$EntryTransformer;

        $r0 = new com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Maps$TransformedEntriesMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)>(r1, r2);

        return $r0;
    }

    public static java.util.Map filterKeys(java.util.Map, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r0;
        com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap $r5;
        com.mycila.inject.internal.guava.collect.Maps$3 $r7;
        java.util.Map r2, $r4, $r6;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap $r8;
        boolean $z0;

        r2 := @parameter0: java.util.Map;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r7 = new com.mycila.inject.internal.guava.collect.Maps$3;

        specialinvoke $r7.<com.mycila.inject.internal.guava.collect.Maps$3: void <init>(com.mycila.inject.internal.guava.base.Predicate)>(r0);

        $z0 = r2 instanceof com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap;

        if $z0 == 0 goto label1;

        $r5 = (com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap) r2;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map filterFiltered(com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap,com.mycila.inject.internal.guava.base.Predicate)>($r5, $r7);

        goto label2;

     label1:
        $r8 = new com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap;

        $r6 = $r8;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.util.Map) $r3;

        specialinvoke $r8.<com.mycila.inject.internal.guava.collect.Maps$FilteredKeyMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.base.Predicate,com.mycila.inject.internal.guava.base.Predicate)>($r4, r0, $r7);

     label2:
        return $r6;
    }

    public static java.util.Map filterValues(java.util.Map, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r0;
        java.util.Map r2, $r3;
        com.mycila.inject.internal.guava.collect.Maps$4 $r1;

        r2 := @parameter0: java.util.Map;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.Maps$4;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Maps$4: void <init>(com.mycila.inject.internal.guava.base.Predicate)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map filterEntries(java.util.Map,com.mycila.inject.internal.guava.base.Predicate)>(r2, $r1);

        return $r3;
    }

    public static java.util.Map filterEntries(java.util.Map, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r0;
        com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap $r4;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r6;
        java.util.Map r1, $r3, $r5;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r1 instanceof com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap;

        if $z0 == 0 goto label1;

        $r4 = (com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap) r1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map filterFiltered(com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap,com.mycila.inject.internal.guava.base.Predicate)>($r4, r0);

        goto label2;

     label1:
        $r6 = new com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap;

        $r5 = $r6;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Map) $r2;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.base.Predicate)>($r3, r0);

     label2:
        return $r5;
    }

    private static java.util.Map filterFiltered(com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r1, $r2, $r3;
        com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap r0;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r4;
        java.util.Map $r5;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap;

        r1 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Predicates: com.mycila.inject.internal.guava.base.Predicate and(com.mycila.inject.internal.guava.base.Predicate,com.mycila.inject.internal.guava.base.Predicate)>($r2, r1);

        $r4 = new com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.base.Predicate)>($r5, $r3);

        return $r4;
    }

    static java.lang.Object safeGet(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, $r2;
        java.lang.ClassCastException $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    static boolean safeContainsKey(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.ClassCastException $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    static boolean containsEntryImpl(java.util.Collection, java.lang.Object)
    {
        java.util.Map$Entry $r2, $r3;
        java.util.Collection r1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) r0;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r2);

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        return $z1;
    }

    static boolean removeEntryImpl(java.util.Collection, java.lang.Object)
    {
        java.util.Map$Entry $r2, $r3;
        java.util.Collection r1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) r0;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r2);

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r3);

        return $z1;
    }

    static boolean equalsImpl(java.util.Map, java.lang.Object)
    {
        java.util.Map r0, r2;
        java.util.Set $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        r2 = (java.util.Map) r1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    static int hashCodeImpl(java.util.Map)
    {
        int $i0;
        java.util.Set $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: int hashCodeImpl(java.util.Set)>($r1);

        return $i0;
    }

    static java.lang.String toStringImpl(java.util.Map)
    {
        java.util.Map r0;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        com.mycila.inject.internal.guava.base.Joiner$MapJoiner $r3;
        java.lang.String $r5;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.lang.StringBuilder newStringBuilderForCollection(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r3 = <com.mycila.inject.internal.guava.collect.Maps: com.mycila.inject.internal.guava.base.Joiner$MapJoiner STANDARD_JOINER>;

        virtualinvoke $r3.<com.mycila.inject.internal.guava.base.Joiner$MapJoiner: java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map)>($r2, r0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void putAllImpl(java.util.Map, java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0, r5;
        java.lang.Object $r3, $r6, $r7;
        boolean $z0;

        r5 := @parameter0: java.util.Map;

        r0 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    static boolean containsKeyImpl(java.util.Map, java.lang.Object)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r5, r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r6 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static boolean containsValueImpl(java.util.Map, java.lang.Object)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r5, r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r6 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.base.Joiner $r0;
        com.mycila.inject.internal.guava.base.Joiner$MapJoiner $r1;

        $r0 = <com.mycila.inject.internal.guava.collect.Collections2: com.mycila.inject.internal.guava.base.Joiner STANDARD_JOINER>;

        $r1 = virtualinvoke $r0.<com.mycila.inject.internal.guava.base.Joiner: com.mycila.inject.internal.guava.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)>("=");

        <com.mycila.inject.internal.guava.collect.Maps: com.mycila.inject.internal.guava.base.Joiner$MapJoiner STANDARD_JOINER> = $r1;

        return;
    }
}
