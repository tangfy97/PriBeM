public class org.apache.batik.dom.AbstractDocument$IdSoftRef extends org.apache.batik.util.CleanerThread$SoftReferenceCleared
{
    java.lang.String id;
    java.util.List list;
    private final org.apache.batik.dom.AbstractDocument this$0;

    void <init>(org.apache.batik.dom.AbstractDocument, java.lang.Object, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument$IdSoftRef r0;
        java.lang.Object r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r3;

        r0 := @this: org.apache.batik.dom.AbstractDocument$IdSoftRef;

        r2 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.batik.util.CleanerThread$SoftReferenceCleared: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: org.apache.batik.dom.AbstractDocument this$0> = r2;

        r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.lang.String id> = r3;

        return;
    }

    void <init>(org.apache.batik.dom.AbstractDocument, java.lang.Object, java.lang.String, java.util.List)
    {
        java.util.List r4;
        org.apache.batik.dom.AbstractDocument$IdSoftRef r0;
        java.lang.Object r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r3;

        r0 := @this: org.apache.batik.dom.AbstractDocument$IdSoftRef;

        r2 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.List;

        specialinvoke r0.<org.apache.batik.util.CleanerThread$SoftReferenceCleared: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: org.apache.batik.dom.AbstractDocument this$0> = r2;

        r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.lang.String id> = r3;

        r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.util.List list> = r4;

        return;
    }

    public void setList(java.util.List)
    {
        java.util.List r1;
        org.apache.batik.dom.AbstractDocument$IdSoftRef r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$IdSoftRef;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.util.List list> = r1;

        return;
    }

    public void cleared()
    {
        java.lang.Throwable $r14;
        org.apache.batik.dom.AbstractDocument $r1, $r3, $r6, $r10;
        java.util.List $r5, $r13;
        org.apache.batik.dom.AbstractDocument$IdSoftRef r0;
        java.util.Map $r2, r4, $r8, $r12;
        java.lang.Object $r9;
        java.lang.String $r7, $r11;

        r0 := @this: org.apache.batik.dom.AbstractDocument$IdSoftRef;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: org.apache.batik.dom.AbstractDocument this$0>;

        $r2 = $r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: org.apache.batik.dom.AbstractDocument this$0>;

        r4 = $r3.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        entermonitor r4;

     label2:
        $r5 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.util.List list>;

        if $r5 == null goto label3;

        $r13 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.util.List list>;

        interfaceinvoke $r13.<java.util.List: boolean remove(java.lang.Object)>(r0);

        goto label4;

     label3:
        $r6 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: org.apache.batik.dom.AbstractDocument this$0>;

        $r8 = $r6.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r7 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.lang.String id>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        if $r9 == r0 goto label4;

        $r10 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: org.apache.batik.dom.AbstractDocument this$0>;

        $r12 = $r10.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r11 = r0.<org.apache.batik.dom.AbstractDocument$IdSoftRef: java.lang.String id>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r9);

     label4:
        exitmonitor r4;

        goto label6;

     label5:
        $r14 := @caughtexception;

        exitmonitor r4;

        throw $r14;

     label6:
        return;

        catch java.lang.Throwable from label2 to label5 with label5;
    }
}
