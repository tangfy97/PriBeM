public class org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry extends org.springframework.core.SimpleAliasRegistry implements org.springframework.beans.factory.support.BeanDefinitionRegistry
{
    private final java.util.Map beanDefinitionMap;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        specialinvoke r0.<org.springframework.core.SimpleAliasRegistry: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap> = $r1;

        return;
    }

    public void registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        java.util.Map $r3;
        org.springframework.beans.factory.config.BeanDefinition r1;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r2;
        java.lang.String r0;

        r2 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'beanName\' must not be empty");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "BeanDefinition must not be null");

        $r3 = r2.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public void removeBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r4;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r4 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        specialinvoke $r4.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label1:
        return;
    }

    public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r5;
        org.springframework.beans.factory.config.BeanDefinition r4;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.springframework.beans.factory.config.BeanDefinition) $r3;

        if r4 != null goto label1;

        $r5 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        specialinvoke $r5.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        return r4;
    }

    public boolean containsBeanDefinition(java.lang.String)
    {
        java.util.Map $r2;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String[] getBeanDefinitionNames()
    {
        java.util.Map $r1;
        java.util.Collection $r3;
        java.util.Set $r2;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;
        java.lang.String[] $r4;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        $r1 = r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = (java.util.Collection) $r2;

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r3);

        return $r4;
    }

    public int getBeanDefinitionCount()
    {
        int $i0;
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        $r1 = r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: java.util.Map beanDefinitionMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isBeanNameInUse(java.lang.String)
    {
        org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: boolean isAlias(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry: boolean containsBeanDefinition(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }
}
