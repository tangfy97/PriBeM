public abstract class org.apache.tika.parser.CryptoParser extends org.apache.tika.parser.DelegatingParser
{
    private static final long serialVersionUID;
    private final java.lang.String transformation;
    private final java.security.Provider provider;
    private final java.util.Set types;

    public void <init>(java.lang.String, java.security.Provider, java.util.Set)
    {
        java.util.Set r3;
        java.lang.String r1;
        org.apache.tika.parser.CryptoParser r0;
        java.security.Provider r2;

        r0 := @this: org.apache.tika.parser.CryptoParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.util.Set;

        specialinvoke r0.<org.apache.tika.parser.DelegatingParser: void <init>()>();

        r0.<org.apache.tika.parser.CryptoParser: java.lang.String transformation> = r1;

        r0.<org.apache.tika.parser.CryptoParser: java.security.Provider provider> = r2;

        r0.<org.apache.tika.parser.CryptoParser: java.util.Set types> = r3;

        return;
    }

    public void <init>(java.lang.String, java.util.Set)
    {
        java.util.Set r2;
        java.lang.String r1;
        org.apache.tika.parser.CryptoParser r0;

        r0 := @this: org.apache.tika.parser.CryptoParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        specialinvoke r0.<org.apache.tika.parser.CryptoParser: void <init>(java.lang.String,java.security.Provider,java.util.Set)>(r1, null, r2);

        return;
    }

    public java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)
    {
        java.util.Set $r1;
        org.apache.tika.parser.CryptoParser r0;
        org.apache.tika.parser.ParseContext r2;

        r0 := @this: org.apache.tika.parser.CryptoParser;

        r2 := @parameter0: org.apache.tika.parser.ParseContext;

        $r1 = r0.<org.apache.tika.parser.CryptoParser: java.util.Set types>;

        return $r1;
    }

    public void parse(java.io.InputStream, org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata, org.apache.tika.parser.ParseContext) throws java.io.IOException, org.xml.sax.SAXException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.CryptoParser r0;
        javax.crypto.Cipher r18;
        java.security.SecureRandom r8;
        javax.crypto.CipherInputStream $r19;
        org.apache.tika.metadata.Metadata r11;
        java.security.GeneralSecurityException $r16;
        org.apache.tika.exception.TikaException $r17;
        java.lang.String $r2, $r14;
        org.xml.sax.ContentHandler r10;
        java.security.AlgorithmParameters r6;
        java.security.Provider $r1, $r13;
        java.security.Key $r15;
        org.apache.tika.parser.ParseContext r3;
        java.lang.Object $r4, $r5, $r7;
        org.apache.tika.exception.EncryptedDocumentException $r12;
        java.io.InputStream r9;

        r0 := @this: org.apache.tika.parser.CryptoParser;

        r9 := @parameter0: java.io.InputStream;

        r10 := @parameter1: org.xml.sax.ContentHandler;

        r11 := @parameter2: org.apache.tika.metadata.Metadata;

        r3 := @parameter3: org.apache.tika.parser.ParseContext;

     label01:
        $r1 = r0.<org.apache.tika.parser.CryptoParser: java.security.Provider provider>;

        if $r1 == null goto label02;

        $r14 = r0.<org.apache.tika.parser.CryptoParser: java.lang.String transformation>;

        $r13 = r0.<org.apache.tika.parser.CryptoParser: java.security.Provider provider>;

        r18 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r14, $r13);

        goto label03;

     label02:
        $r2 = r0.<org.apache.tika.parser.CryptoParser: java.lang.String transformation>;

        r18 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2);

     label03:
        $r4 = virtualinvoke r3.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class)>(class "Ljava/security/Key;");

        $r15 = (java.security.Key) $r4;

        if $r15 != null goto label04;

        $r12 = new org.apache.tika.exception.EncryptedDocumentException;

        specialinvoke $r12.<org.apache.tika.exception.EncryptedDocumentException: void <init>(java.lang.String)>("No decryption key provided");

        throw $r12;

     label04:
        $r5 = virtualinvoke r3.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class)>(class "Ljava/security/AlgorithmParameters;");

        r6 = (java.security.AlgorithmParameters) $r5;

        $r7 = virtualinvoke r3.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class)>(class "Ljava/security/SecureRandom;");

        r8 = (java.security.SecureRandom) $r7;

        if r6 == null goto label05;

        if r8 == null goto label05;

        virtualinvoke r18.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(2, $r15, r6, r8);

        goto label08;

     label05:
        if r6 == null goto label06;

        virtualinvoke r18.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, $r15, r6);

        goto label08;

     label06:
        if r8 == null goto label07;

        virtualinvoke r18.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(2, $r15, r8);

        goto label08;

     label07:
        virtualinvoke r18.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r15);

     label08:
        $r19 = new javax.crypto.CipherInputStream;

        specialinvoke $r19.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>(r9, r18);

        specialinvoke r0.<org.apache.tika.parser.DelegatingParser: void parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)>($r19, r10, r11, r3);

     label09:
        goto label11;

     label10:
        $r16 := @caughtexception;

        $r17 = new org.apache.tika.exception.TikaException;

        specialinvoke $r17.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to decrypt document stream", $r16);

        throw $r17;

     label11:
        return;

        catch java.security.GeneralSecurityException from label01 to label09 with label10;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.CryptoParser: long serialVersionUID> = -3507995752666557731L;

        return;
    }
}
