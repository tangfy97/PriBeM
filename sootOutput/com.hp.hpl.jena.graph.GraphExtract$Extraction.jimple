public class com.hp.hpl.jena.graph.GraphExtract$Extraction extends java.lang.Object
{
    protected com.hp.hpl.jena.graph.Graph toUpdate;
    protected com.hp.hpl.jena.graph.Graph extractFrom;
    protected java.util.Set active;
    protected com.hp.hpl.jena.graph.TripleBoundary b;

    void <init>(com.hp.hpl.jena.graph.TripleBoundary, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        java.util.Set $r3;
        com.hp.hpl.jena.graph.TripleBoundary r4;
        com.hp.hpl.jena.graph.GraphExtract$Extraction r0;
        com.hp.hpl.jena.graph.Graph r1, r2;

        r0 := @this: com.hp.hpl.jena.graph.GraphExtract$Extraction;

        r4 := @parameter0: com.hp.hpl.jena.graph.TripleBoundary;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: com.hp.hpl.jena.graph.Graph toUpdate> = r1;

        r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: com.hp.hpl.jena.graph.Graph extractFrom> = r2;

        $r3 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: java.util.Set active> = $r3;

        r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: com.hp.hpl.jena.graph.TripleBoundary b> = r4;

        return;
    }

    public void extractInto(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r3, $r4, $r9;
        com.hp.hpl.jena.graph.Graph $r5, $r10;
        boolean $z0, $z1, $z2;
        java.util.Set $r2, $r11;
        com.hp.hpl.jena.graph.GraphExtract$Extraction r0;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.graph.TripleBoundary $r12;
        java.lang.Object $r7;

        r0 := @this: com.hp.hpl.jena.graph.GraphExtract$Extraction;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: java.util.Set active>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r5 = r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: com.hp.hpl.jena.graph.Graph extractFrom>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r4, $r3);

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r10 = r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: com.hp.hpl.jena.graph.Graph toUpdate>;

        interfaceinvoke $r10.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r8);

        $r11 = r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: java.util.Set active>;

        $z1 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z1 != 0 goto label2;

        $r12 = r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: com.hp.hpl.jena.graph.TripleBoundary b>;

        $z2 = interfaceinvoke $r12.<com.hp.hpl.jena.graph.TripleBoundary: boolean stopAt(com.hp.hpl.jena.graph.Triple)>(r8);

        if $z2 != 0 goto label2;

        virtualinvoke r0.<com.hp.hpl.jena.graph.GraphExtract$Extraction: void extractInto(com.hp.hpl.jena.graph.Node)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }
}
