public final class com.mycila.inject.internal.Reflect extends java.lang.Object
{
    private static final com.mycila.inject.internal.guava.base.Predicate METHOD_FILTER;
    private static final com.mycila.inject.internal.guava.base.Function TO_METHOD;
    private static final com.mycila.inject.internal.guava.base.Function TO_SIGNATURE;
    private static final java.util.List OBJECT_METHODS;
    private static final com.mycila.inject.internal.WeakCache METHOD_CACHE;

    public static java.util.List getParameterKeys(com.google.inject.TypeLiteral, java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation[][] $r1;
        com.google.inject.Key $r8;
        java.lang.'annotation'.Annotation[] $r6;
        java.util.ArrayList $r4;
        java.util.List $r3;
        int $i0, i1;
        java.lang.Object $r5;
        java.lang.reflect.Method r0;
        com.google.inject.TypeLiteral r2, $r7;

        r2 := @parameter0: com.google.inject.TypeLiteral;

        r0 := @parameter1: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r3 = virtualinvoke r2.<com.google.inject.TypeLiteral: java.util.List getParameterTypes(java.lang.reflect.Member)>(r0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (com.google.inject.TypeLiteral) $r5;

        $r6 = $r1[i1];

        $r8 = staticinvoke <com.mycila.inject.internal.Reflect: com.google.inject.Key buildKey(com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation[])>($r7, $r6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r4;
    }

    public static com.google.inject.Key buildKey(com.google.inject.TypeLiteral, java.lang.'annotation'.Annotation[])
    {
        com.google.inject.Key $r2, $r5;
        java.lang.'annotation'.Annotation[] r0;
        int i0, i1;
        java.lang.'annotation'.Annotation r3;
        java.lang.Class $r4;
        com.google.inject.TypeLiteral r1;
        boolean $z0;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        r0 := @parameter1: java.lang.'annotation'.Annotation[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r0[i1];

        $r4 = interfaceinvoke r3.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = staticinvoke <com.mycila.inject.MycilaGuice: boolean isBindingAnnotation(java.lang.Class)>($r4);

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation)>(r1, r3);

        return $r5;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral)>(r1);

        return $r2;
    }

    public static java.lang.Class getTargetClass(java.lang.Class)
    {
        java.lang.Class $r1, r3;
        java.lang.String $r0, $r2;
        boolean $z0, $z1;

        r3 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("$$");

        if $z0 == 0 goto label2;

     label1:
        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        r3 = $r1;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("$$");

        if $z1 != 0 goto label1;

        return $r1;

     label2:
        return r3;
    }

    public static java.lang.Class getTargetClass(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <com.mycila.inject.internal.Reflect: java.lang.Class getTargetClass(java.lang.Class)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.base.Predicate predicate(com.google.inject.matcher.Matcher)
    {
        com.google.inject.matcher.Matcher r1;
        com.mycila.inject.internal.Reflect$1 $r0;

        r1 := @parameter0: com.google.inject.matcher.Matcher;

        $r0 = new com.mycila.inject.internal.Reflect$1;

        specialinvoke $r0.<com.mycila.inject.internal.Reflect$1: void <init>(com.google.inject.matcher.Matcher)>(r1);

        return $r0;
    }

    public static com.google.inject.matcher.Matcher matcher(com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r1;
        com.mycila.inject.internal.Reflect$2 $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Predicate;

        $r0 = new com.mycila.inject.internal.Reflect$2;

        specialinvoke $r0.<com.mycila.inject.internal.Reflect$2: void <init>(com.mycila.inject.internal.guava.base.Predicate)>(r1);

        return $r0;
    }

    public static transient com.mycila.inject.internal.guava.base.Predicate withParameterTypes(java.lang.Class[])
    {
        java.lang.Class[] r1;
        com.mycila.inject.internal.Reflect$3 $r0;

        r1 := @parameter0: java.lang.Class[];

        $r0 = new com.mycila.inject.internal.Reflect$3;

        specialinvoke $r0.<com.mycila.inject.internal.Reflect$3: void <init>(java.lang.Class[])>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.base.Predicate named(java.lang.String)
    {
        java.lang.String r1;
        com.mycila.inject.internal.Reflect$4 $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.mycila.inject.internal.Reflect$4;

        specialinvoke $r0.<com.mycila.inject.internal.Reflect$4: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.base.Predicate annotatedBy(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.Reflect$5 $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.mycila.inject.internal.Reflect$5;

        specialinvoke $r0.<com.mycila.inject.internal.Reflect$5: void <init>(java.lang.Class)>(r1);

        return $r0;
    }

    public static java.lang.Iterable findMethods(java.lang.Class)
    {
        com.mycila.inject.internal.WeakCache $r1;
        java.lang.Class r0;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.base.Function $r3;
        java.lang.Iterable $r4, $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.WeakCache METHOD_CACHE>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.WeakCache: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.Iterable) $r2;

        $r3 = <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Function TO_METHOD>;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.mycila.inject.internal.guava.base.Function)>($r4, $r3);

        return $r5;
    }

    public static java.lang.Iterable findFields(java.lang.Class, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r3;
        java.lang.reflect.Field r2;
        java.lang.reflect.Field[] $r1;
        int i0, i1;
        java.lang.Class r4;
        java.util.LinkedList $r0;
        boolean $z0;

        r4 := @parameter0: java.lang.Class;

        r3 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

     label1:
        if r4 == null goto label5;

        if r4 == class "Ljava/lang/Object;" goto label5;

        $r1 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = interfaceinvoke r3.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return $r0;
    }

    private void <init>()
    {
        com.mycila.inject.internal.Reflect r0;

        r0 := @this: com.mycila.inject.internal.Reflect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean overrides(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.Package $r3, $r5;
        int $i0;
        java.lang.Class $r2, $r4;
        java.lang.reflect.Method r0, r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i0);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Package getPackage()>();

        $z3 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z3;
    }

    static java.util.List access$000()
    {
        java.util.List $r0;

        $r0 = <com.mycila.inject.internal.Reflect: java.util.List OBJECT_METHODS>;

        return $r0;
    }

    static com.mycila.inject.internal.guava.base.Predicate access$100()
    {
        com.mycila.inject.internal.guava.base.Predicate $r0;

        $r0 = <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate METHOD_FILTER>;

        return $r0;
    }

    static com.mycila.inject.internal.guava.base.Function access$200()
    {
        com.mycila.inject.internal.guava.base.Function $r0;

        $r0 = <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Function TO_SIGNATURE>;

        return $r0;
    }

    static com.mycila.inject.internal.WeakCache access$300()
    {
        com.mycila.inject.internal.WeakCache $r0;

        $r0 = <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.WeakCache METHOD_CACHE>;

        return $r0;
    }

    static boolean access$400(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method;

        $z0 = staticinvoke <com.mycila.inject.internal.Reflect: boolean overrides(java.lang.reflect.Method,java.lang.reflect.Method)>(r0, r1);

        return $z0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.WeakCache $r9;
        java.lang.reflect.Method[] $r4;
        java.lang.Iterable $r7;
        java.util.List $r5;
        com.mycila.inject.internal.Reflect$8 $r2;
        com.mycila.inject.internal.Reflect$7 $r1;
        com.mycila.inject.internal.Reflect$6 $r0;
        java.lang.Class $r3;
        com.mycila.inject.internal.guava.base.Function $r6;
        java.util.LinkedList $r8;
        com.mycila.inject.internal.Reflect$9 $r10;

        $r0 = new com.mycila.inject.internal.Reflect$6;

        specialinvoke $r0.<com.mycila.inject.internal.Reflect$6: void <init>()>();

        <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate METHOD_FILTER> = $r0;

        $r1 = new com.mycila.inject.internal.Reflect$7;

        specialinvoke $r1.<com.mycila.inject.internal.Reflect$7: void <init>()>();

        <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Function TO_METHOD> = $r1;

        $r2 = new com.mycila.inject.internal.Reflect$8;

        specialinvoke $r2.<com.mycila.inject.internal.Reflect$8: void <init>()>();

        <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Function TO_SIGNATURE> = $r2;

        $r3 = class "Ljava/lang/Object;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Function TO_SIGNATURE>;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.mycila.inject.internal.guava.base.Function)>($r5, $r6);

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.LinkedList newLinkedList(java.lang.Iterable)>($r7);

        <com.mycila.inject.internal.Reflect: java.util.List OBJECT_METHODS> = $r8;

        $r9 = new com.mycila.inject.internal.WeakCache;

        $r10 = new com.mycila.inject.internal.Reflect$9;

        specialinvoke $r10.<com.mycila.inject.internal.Reflect$9: void <init>()>();

        specialinvoke $r9.<com.mycila.inject.internal.WeakCache: void <init>(com.mycila.inject.internal.WeakCache$Provider)>($r10);

        <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.WeakCache METHOD_CACHE> = $r9;

        return;
    }
}
