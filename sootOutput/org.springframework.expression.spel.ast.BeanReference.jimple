public class org.springframework.expression.spel.ast.BeanReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private java.lang.String beanname;

    public void <init>(int, java.lang.String)
    {
        int i0;
        java.lang.String r2;
        org.springframework.expression.spel.ast.BeanReference r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.BeanReference;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[0];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        r0.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname> = r2;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r8, $r13;
        java.lang.Object[] $r9, $r14;
        org.springframework.expression.spel.ast.BeanReference r5;
        int $i0, $i1;
        java.lang.String $r6, $r10, $r15, $r17;
        org.springframework.expression.TypedValue $r3;
        org.springframework.expression.spel.SpelMessage $r11, $r16;
        org.springframework.expression.BeanResolver $r2;
        org.springframework.expression.AccessException $r12;
        org.springframework.expression.EvaluationContext $r1, $r4;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r7;

        r5 := @this: org.springframework.expression.spel.ast.BeanReference;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.BeanResolver getBeanResolver()>();

        if $r2 != null goto label1;

        $r8 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r5.<org.springframework.expression.spel.ast.BeanReference: int getStartPosition()>();

        $r11 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NO_BEAN_RESOLVER_REGISTERED>;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = r5.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname>;

        $r9[0] = $r10;

        specialinvoke $r8.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r11, $r9);

        throw $r8;

     label1:
        $r3 = new org.springframework.expression.TypedValue;

        $r4 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r6 = r5.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname>;

        $r7 = interfaceinvoke $r2.<org.springframework.expression.BeanResolver: java.lang.Object resolve(org.springframework.expression.EvaluationContext,java.lang.String)>($r4, $r6);

        specialinvoke $r3.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r7);

     label2:
        return $r3;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke r5.<org.springframework.expression.spel.ast.BeanReference: int getStartPosition()>();

        $r16 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_BEAN_RESOLUTION>;

        $r14 = newarray (java.lang.Object)[2];

        $r15 = r5.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname>;

        $r14[0] = $r15;

        $r17 = virtualinvoke $r12.<org.springframework.expression.AccessException: java.lang.String getMessage()>();

        $r14[1] = $r17;

        specialinvoke $r13.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r12, $r16, $r14);

        throw $r13;

        catch org.springframework.expression.AccessException from label1 to label2 with label3;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.BeanReference r1;
        int $i0, $i2;
        java.lang.StringBuilder $r3, $r5, $r8;
        java.lang.String $r2, $r4, $r6, $r7;

        r1 := @this: org.springframework.expression.spel.ast.BeanReference;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r2 = r1.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r7 = r1.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label2;

     label1:
        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = r1.<org.springframework.expression.spel.ast.BeanReference: java.lang.String beanname>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label2:
        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
