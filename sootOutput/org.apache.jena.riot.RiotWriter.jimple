public class org.apache.jena.riot.RiotWriter extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.riot.RiotWriter r0;

        r0 := @this: org.apache.jena.riot.RiotWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void writeNQuads(java.io.OutputStream, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.Lang $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r2 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NQUADS>;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.Lang)>(r0, r1, $r2);

        return;
    }

    public static void writeNQuads(java.io.OutputStream, java.util.Iterator)
    {
        java.io.OutputStream r0;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write(java.io.OutputStream,java.util.Iterator)>(r0, r1);

        return;
    }

    public static void writeTriples(java.io.OutputStream, com.hp.hpl.jena.graph.Graph)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.Lang $r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NTRIPLES>;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.Lang)>(r0, r1, $r2);

        return;
    }

    public static void writeTriples(java.io.OutputStream, java.util.Iterator)
    {
        java.io.OutputStream r0;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write(java.io.OutputStream,java.util.Iterator)>(r0, r1);

        return;
    }

    public static void writeRDFJSON(java.io.OutputStream, com.hp.hpl.jena.graph.Graph)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.Lang $r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang RDFJSON>;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.Lang)>(r0, r1, $r2);

        return;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createTurtle()
    {
        org.apache.jena.riot.writer.TurtleWriter $r0;

        $r0 = new org.apache.jena.riot.writer.TurtleWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.TurtleWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createTurtleStreaming()
    {
        org.apache.jena.riot.writer.TurtleWriterBlocks $r0;

        $r0 = new org.apache.jena.riot.writer.TurtleWriterBlocks;

        specialinvoke $r0.<org.apache.jena.riot.writer.TurtleWriterBlocks: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createTurtleFlat()
    {
        org.apache.jena.riot.writer.TurtleWriterFlat $r0;

        $r0 = new org.apache.jena.riot.writer.TurtleWriterFlat;

        specialinvoke $r0.<org.apache.jena.riot.writer.TurtleWriterFlat: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createNTriples()
    {
        org.apache.jena.riot.writer.NTriplesWriter $r0;

        $r0 = new org.apache.jena.riot.writer.NTriplesWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.NTriplesWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createNTriplesASCII()
    {
        org.apache.jena.riot.out.CharSpace $r1;
        org.apache.jena.riot.writer.NTriplesWriter $r0;

        $r0 = new org.apache.jena.riot.writer.NTriplesWriter;

        $r1 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace ASCII>;

        specialinvoke $r0.<org.apache.jena.riot.writer.NTriplesWriter: void <init>(org.apache.jena.riot.out.CharSpace)>($r1);

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createRDFXMLAbbrev()
    {
        org.apache.jena.riot.writer.RDFXMLAbbrevWriter $r0;

        $r0 = new org.apache.jena.riot.writer.RDFXMLAbbrevWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.RDFXMLAbbrevWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createRDFXMLPlain()
    {
        org.apache.jena.riot.writer.RDFXMLPlainWriter $r0;

        $r0 = new org.apache.jena.riot.writer.RDFXMLPlainWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.RDFXMLPlainWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createRDFJSON()
    {
        org.apache.jena.riot.writer.RDFJSONWriter $r0;

        $r0 = new org.apache.jena.riot.writer.RDFJSONWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.RDFJSONWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createTrig()
    {
        org.apache.jena.riot.writer.TriGWriter $r0;

        $r0 = new org.apache.jena.riot.writer.TriGWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.TriGWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createTrigStreaming()
    {
        org.apache.jena.riot.writer.TriGWriterBlocks $r0;

        $r0 = new org.apache.jena.riot.writer.TriGWriterBlocks;

        specialinvoke $r0.<org.apache.jena.riot.writer.TriGWriterBlocks: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createTrigFlat()
    {
        org.apache.jena.riot.writer.TriGWriterFlat $r0;

        $r0 = new org.apache.jena.riot.writer.TriGWriterFlat;

        specialinvoke $r0.<org.apache.jena.riot.writer.TriGWriterFlat: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createNQuads()
    {
        org.apache.jena.riot.writer.NQuadsWriter $r0;

        $r0 = new org.apache.jena.riot.writer.NQuadsWriter;

        specialinvoke $r0.<org.apache.jena.riot.writer.NQuadsWriter: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createNQuadsASCII()
    {
        org.apache.jena.riot.out.CharSpace $r1;
        org.apache.jena.riot.writer.NQuadsWriter $r0;

        $r0 = new org.apache.jena.riot.writer.NQuadsWriter;

        $r1 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace ASCII>;

        specialinvoke $r0.<org.apache.jena.riot.writer.NQuadsWriter: void <init>(org.apache.jena.riot.out.CharSpace)>($r1);

        return $r0;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createRDFNULL()
    {
        org.apache.jena.riot.RDFFormat $r0;
        org.apache.jena.riot.WriterDatasetRIOT $r2;
        org.apache.jena.riot.WriterDatasetRIOTFactory $r1;

        $r1 = <org.apache.jena.riot.writer.NullWriter: org.apache.jena.riot.WriterDatasetRIOTFactory factory>;

        $r0 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat RDFNULL>;

        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.WriterDatasetRIOTFactory: org.apache.jena.riot.WriterDatasetRIOT create(org.apache.jena.riot.RDFFormat)>($r0);

        return $r2;
    }
}
