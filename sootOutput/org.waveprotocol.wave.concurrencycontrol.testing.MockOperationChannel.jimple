public final class org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel
{
    private final java.util.Queue expectations;

    public void <init>()
    {
        java.util.LinkedList $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations> = $r1;

        return;
    }

    public transient void expectSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation[])
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method $r2;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] r3;
        java.util.Queue $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation[];

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = <org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method SEND>;

        $r1[0] = $r2;

        $r1[1] = r3;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void expectReceive(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r3;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        java.util.Queue $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = <org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method RECEIVE>;

        $r1[0] = $r2;

        $r1[1] = r3;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void expectPeek(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r3;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        java.util.Queue $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = <org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method PEEK>;

        $r1[0] = $r2;

        $r1[1] = r3;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void checkExpectationsSatisfied()
    {
        java.util.Queue $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("Unsatisfied expectations", $z0);

        return;
    }

    public void setListener(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener;

        return;
    }

    public transient void send(org.waveprotocol.wave.model.operation.wave.WaveletOperation[])
    {
        java.lang.Object[] r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] r6;
        java.lang.Object $r2, $r5, $r7;
        java.util.Queue $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        r6 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation[];

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object remove()>();

        r3 = (java.lang.Object[]) $r2;

        $r5 = r3[0];

        $r4 = <org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method SEND>;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r7 = r3[1];

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r6);

        return;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation receive()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r7;
        java.lang.Object[] r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method $r4;
        java.lang.Object $r2, $r5, $r6;
        java.util.Queue $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object remove()>();

        r3 = (java.lang.Object[]) $r2;

        $r5 = r3[0];

        $r4 = <org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method RECEIVE>;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r6 = r3[1];

        $r7 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r6;

        return $r7;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r7;
        java.lang.Object[] r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method $r4;
        java.lang.Object $r2, $r5, $r6;
        java.util.Queue $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel: java.util.Queue expectations>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object remove()>();

        r3 = (java.lang.Object[]) $r2;

        $r5 = r3[0];

        $r4 = <org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel$Method PEEK>;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r6 = r3[1];

        $r7 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r6;

        return $r7;
    }

    public java.util.List getReconnectVersions()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Reconnection not supported");

        throw $r0;
    }

    public java.lang.String getDebugString()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockOperationChannel;

        return "[Mock operation channel]";
    }
}
