class bsh.BlockNameSpace extends bsh.NameSpace
{

    public void <init>(bsh.NameSpace) throws bsh.EvalError
    {
        bsh.BlockNameSpace r0;
        java.lang.StringBuffer $r2, $r4, $r5;
        bsh.NameSpace r1;
        java.lang.String $r3, $r6;

        r0 := @this: bsh.BlockNameSpace;

        r1 := @parameter0: bsh.NameSpace;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r1.<bsh.NameSpace: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/BlockNameSpace");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<bsh.NameSpace: void <init>(bsh.NameSpace,java.lang.String)>(r1, $r6);

        return;
    }

    public void setVariable(java.lang.String, java.lang.Object, boolean, boolean) throws bsh.UtilEvalError
    {
        bsh.BlockNameSpace r0;
        bsh.NameSpace $r2;
        java.lang.Object r3;
        java.lang.String r1;
        boolean $z0, z1, z2;

        r0 := @this: bsh.BlockNameSpace;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $z0 = specialinvoke r0.<bsh.BlockNameSpace: boolean weHaveVar(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean,boolean)>(r1, r3, z1, 0);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<bsh.BlockNameSpace: bsh.NameSpace getParent()>();

        virtualinvoke $r2.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean,boolean)>(r1, r3, z1, z2);

     label2:
        return;
    }

    public void setBlockVariable(java.lang.String, java.lang.Object) throws bsh.UtilEvalError
    {
        bsh.BlockNameSpace r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: bsh.BlockNameSpace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean,boolean)>(r1, r2, 0, 0);

        return;
    }

    private boolean weHaveVar(java.lang.String)
    {
        bsh.BlockNameSpace r0;
        bsh.UtilEvalError $r3;
        java.lang.String r1;
        bsh.Variable $r2;
        boolean $z0;

        r0 := @this: bsh.BlockNameSpace;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = specialinvoke r0.<bsh.NameSpace: bsh.Variable getVariableImpl(java.lang.String,boolean)>(r1, 0);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch bsh.UtilEvalError from label1 to label3 with label4;
    }

    private bsh.NameSpace getNonBlockParent()
    {
        bsh.BlockNameSpace r0, $r2;
        bsh.NameSpace $r1, $r3;
        boolean $z0;

        r0 := @this: bsh.BlockNameSpace;

        $r1 = specialinvoke r0.<bsh.NameSpace: bsh.NameSpace getParent()>();

        $z0 = $r1 instanceof bsh.BlockNameSpace;

        if $z0 == 0 goto label1;

        $r2 = (bsh.BlockNameSpace) $r1;

        $r3 = specialinvoke $r2.<bsh.BlockNameSpace: bsh.NameSpace getNonBlockParent()>();

        return $r3;

     label1:
        return $r1;
    }

    bsh.This getThis(bsh.Interpreter)
    {
        bsh.BlockNameSpace r0;
        bsh.This $r3;
        bsh.Interpreter r2;
        bsh.NameSpace $r1;

        r0 := @this: bsh.BlockNameSpace;

        r2 := @parameter0: bsh.Interpreter;

        $r1 = specialinvoke r0.<bsh.BlockNameSpace: bsh.NameSpace getNonBlockParent()>();

        $r3 = virtualinvoke $r1.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r2);

        return $r3;
    }

    public bsh.This getSuper(bsh.Interpreter)
    {
        bsh.BlockNameSpace r0;
        bsh.This $r3;
        bsh.Interpreter r2;
        bsh.NameSpace $r1;

        r0 := @this: bsh.BlockNameSpace;

        r2 := @parameter0: bsh.Interpreter;

        $r1 = specialinvoke r0.<bsh.BlockNameSpace: bsh.NameSpace getNonBlockParent()>();

        $r3 = virtualinvoke $r1.<bsh.NameSpace: bsh.This getSuper(bsh.Interpreter)>(r2);

        return $r3;
    }

    public void importClass(java.lang.String)
    {
        bsh.BlockNameSpace r0;
        java.lang.String r2;
        bsh.NameSpace $r1;

        r0 := @this: bsh.BlockNameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<bsh.BlockNameSpace: bsh.NameSpace getParent()>();

        virtualinvoke $r1.<bsh.NameSpace: void importClass(java.lang.String)>(r2);

        return;
    }

    public void importPackage(java.lang.String)
    {
        bsh.BlockNameSpace r0;
        java.lang.String r2;
        bsh.NameSpace $r1;

        r0 := @this: bsh.BlockNameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<bsh.BlockNameSpace: bsh.NameSpace getParent()>();

        virtualinvoke $r1.<bsh.NameSpace: void importPackage(java.lang.String)>(r2);

        return;
    }

    public void setMethod(java.lang.String, bsh.BshMethod) throws bsh.UtilEvalError
    {
        bsh.BlockNameSpace r0;
        bsh.NameSpace $r1;
        java.lang.String r2;
        bsh.BshMethod r3;

        r0 := @this: bsh.BlockNameSpace;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: bsh.BshMethod;

        $r1 = virtualinvoke r0.<bsh.BlockNameSpace: bsh.NameSpace getParent()>();

        virtualinvoke $r1.<bsh.NameSpace: void setMethod(java.lang.String,bsh.BshMethod)>(r2, r3);

        return;
    }
}
