class com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX extends java.lang.Object implements com.hp.hpl.jena.query.ResultSet, org.apache.jena.atlas.lib.Closeable
{
    com.hp.hpl.jena.query.QuerySolution current;
    javax.xml.stream.XMLStreamReader parser;
    java.util.List variables;
    com.hp.hpl.jena.sparql.engine.binding.Binding binding;
    boolean inputGraphLabels;
    com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodes;
    boolean isResultSet;
    boolean ordered;
    boolean distinct;
    boolean finished;
    com.hp.hpl.jena.rdf.model.Model model;
    int row;
    boolean askResult;
    final com.hp.hpl.jena.sparql.resultset.XMLInputStAX this$0;

    void <init>(com.hp.hpl.jena.sparql.resultset.XMLInputStAX, javax.xml.stream.XMLStreamReader, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX r1;
        java.util.ArrayList $r2;
        javax.xml.stream.XMLStreamReader r5;
        com.hp.hpl.jena.rdf.model.Model r6;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r4;
        com.hp.hpl.jena.sparql.util.Symbol $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r1 := @parameter0: com.hp.hpl.jena.sparql.resultset.XMLInputStAX;

        r5 := @parameter1: javax.xml.stream.XMLStreamReader;

        r6 := @parameter2: com.hp.hpl.jena.rdf.model.Model;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.resultset.XMLInputStAX this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.query.QuerySolution current> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser> = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: java.util.List variables> = $r2;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = null;

        $r3 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol inputGraphBNodeLabels>;

        $z0 = staticinvoke <com.hp.hpl.jena.query.ARQ: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r3);

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean inputGraphLabels> = $z0;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.util.LabelToNodeMap createBNodeMap()>();

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodes> = $r4;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isResultSet> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean ordered> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean distinct> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean finished> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.rdf.model.Model model> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: int row> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean askResult> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser> = r5;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.rdf.model.Model model> = r6;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void init()>();

        return;
    }

    private void init()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        java.lang.String[] $r1, $r2;
        javax.xml.stream.XMLStreamReader $r3;
        javax.xml.stream.XMLStreamException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r4, $r8, $r10;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void skipTo(java.lang.String)>("head");

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void processHead()>();

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "results";

        $r1[1] = "boolean";

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "results";

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void skipTo(java.lang.String[],java.lang.String[])>($r1, $r2);

        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("results");

        if $z0 == 0 goto label2;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isResultSet> = 1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void processResults()>();

     label2:
        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("boolean");

        if $z1 == 0 goto label3;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isResultSet> = 0;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void processBoolean()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XMLStreamException: ");

        $r8 = virtualinvoke $r5.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>(r0, $r10, $r5);

     label5:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label3 with label4;
    }

    public boolean hasNext()
    {
        javax.xml.stream.XMLStreamException $r5;
        java.lang.String $r8, $r10;
        boolean $z0, $z1, z3, $z4, $z5;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r4;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1, $r2, $r3;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $z0 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isResultSet>;

        if $z0 != 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("Not an XML result set");

        throw $r4;

     label1:
        $z1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean finished>;

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        if $r1 != null goto label3;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding getOneSolution()>();

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = $r3;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XMLStreamException: ");

        $r8 = virtualinvoke $r5.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void staxError(java.lang.String,java.lang.Throwable)>($r10, $r5);

     label5:
        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        if $r2 == null goto label6;

        $z5 = 1;

        $z4 = 1;

        goto label7;

     label6:
        $z5 = 0;

        $z4 = 0;

     label7:
        z3 = $z4;

        if $z5 != 0 goto label8;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void close()>();

     label8:
        return z3;

        catch javax.xml.stream.XMLStreamException from label2 to label3 with label4;
    }

    public com.hp.hpl.jena.query.QuerySolution next()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.query.QuerySolution $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.query.QuerySolution nextSolution()>();

        return $r1;
    }

    public com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        int $i0, $i1;
        java.util.NoSuchElementException $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $z0 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean finished>;

        if $z0 == 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("End of XML Results");

        throw $r3;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("End of XML Results");

        throw $r2;

     label2:
        r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        $i0 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: int row>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: int row> = $i1;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = null;

        return r1;
    }

    public com.hp.hpl.jena.query.QuerySolution nextSolution()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.sparql.core.ResultBinding $r2;
        com.hp.hpl.jena.rdf.model.Model $r3;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $r2 = new com.hp.hpl.jena.sparql.core.ResultBinding;

        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.rdf.model.Model model>;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.ResultBinding: void <init>(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r3, $r1);

        return $r2;
    }

    public int getRowNumber()
    {
        int $i0;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $i0 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: int row>;

        return $i0;
    }

    public java.util.List getResultVars()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: java.util.List variables>;

        return $r1;
    }

    public boolean isOrdered()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $z0 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean ordered>;

        return $z0;
    }

    public boolean isDistinct()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $z0 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean distinct>;

        return $z0;
    }

    public com.hp.hpl.jena.rdf.model.Model getResourceModel()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        return null;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r3;
        java.lang.Class $r1;
        java.lang.String $r2;

        r3 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = class "Lcom/hp/hpl/jena/sparql/resultset/XMLInputStAX;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public void close()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean finished> = 1;

        return;
    }

    private void processBoolean() throws javax.xml.stream.XMLStreamException
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r3;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r2, $r7;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label1;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean askResult> = 1;

        return;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z1 == 0 goto label2;

        r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean askResult> = 0;

        return;

     label2:
        $r3 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown boolean value: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private void skipTo(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String[] $r1;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void skipTo(java.lang.String[],java.lang.String[])>($r1, null);

        return;
    }

    private void skipTo(java.lang.String[], java.lang.String[]) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String[] r2, r3;
        javax.xml.stream.XMLStreamReader $r1, $r10, $r11, $r13;
        int $i0;
        java.lang.String $r9, $r12, $r15, $r16, $r20, r21, r22;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r17, $r18, $r19;
        javax.xml.namespace.QName $r14;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r2 := @parameter0: java.lang.String[];

        r3 := @parameter1: java.lang.String[];

     label01:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r10 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $i0 = interfaceinvoke $r10.<javax.xml.stream.XMLStreamReader: int next()>();

        lookupswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label03;
            case 8: goto label02;
            default: goto label08;
        };

     label02:
        goto label09;

     label03:
        if r3 != null goto label04;

        goto label08;

     label04:
        $r11 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r12 = interfaceinvoke $r11.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        if $r12 == null goto label08;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean containsName(java.lang.String[],java.lang.String)>(r3, $r12);

        if $z1 == 0 goto label08;

        return;

     label05:
        if r2 != null goto label06;

        goto label08;

     label06:
        $r13 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r14 = interfaceinvoke $r13.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        $r15 = virtualinvoke $r14.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2005/sparql-results#");

        if $z2 != 0 goto label07;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipToHead: Unexpected tag: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void staxError(java.lang.String)>($r20);

     label07:
        $r16 = virtualinvoke $r14.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z3 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean containsName(java.lang.String[],java.lang.String)>(r2, $r16);

        if $z3 == 0 goto label08;

        return;

     label08:
        goto label01;

     label09:
        if 0 != 0 goto label12;

        r21 = "";

        if r2 == null goto label10;

        r21 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoin(java.lang.String,java.lang.String[])>(", ", r2);

     label10:
        r22 = "";

        if r3 == null goto label11;

        r22 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoin(java.lang.String,java.lang.String[])>(", ", r3);

     label11:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find start and stop of specified elements: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r9);

     label12:
        return;
    }

    private boolean containsName(java.lang.String[], java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r3;
        int $i0, i1;
        java.lang.String[] r0;
        java.lang.String r1, r2;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        r1 = r0[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void processHead() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader $r1, $r2, $r3, $r5, $r11;
        int $i0;
        java.lang.String $r4, $r6, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        java.util.List $r13;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $i0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>();

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 8: goto label2;
            default: goto label8;
        };

     label2:
        goto label9;

     label3:
        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r4, "head");

        if $z1 == 0 goto label8;

        goto label9;

     label4:
        $r5 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r6 = interfaceinvoke $r5.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z2 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "head");

        if $z2 == 0 goto label5;

        goto label8;

     label5:
        $z3 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "variable");

        if $z3 == 0 goto label6;

        $r11 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r12 = interfaceinvoke $r11.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        $r13 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: java.util.List variables>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label8;

     label6:
        $z4 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "link");

        if $z4 == 0 goto label7;

        goto label8;

     label7:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown XML element: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void staxError(java.lang.String)>($r10);

        goto label8;

     label8:
        goto label1;

     label9:
        return;
    }

    private void processResults()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        return;
    }

    private com.hp.hpl.jena.sparql.engine.binding.Binding getOneSolution() throws javax.xml.stream.XMLStreamException
    {
        com.hp.hpl.jena.graph.Node $r9, $r17, r29;
        javax.xml.stream.XMLStreamReader $r1, $r2, $r3, $r5, $r7, $r11, $r13, $r15, $r21, $r26;
        com.hp.hpl.jena.rdf.model.AnonId $r25;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r27;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.datatypes.TypeMapper $r20;
        int $i0;
        java.lang.String $r4, $r6, $r8, $r12, $r14, $r16, $r22, r28;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r19;
        com.hp.hpl.jena.sparql.core.Var $r10, $r18, $r24;
        com.hp.hpl.jena.datatypes.RDFDatatype r30;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r27 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        r28 = null;

     label01:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $i0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>();

        lookupswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label03;
            case 8: goto label02;
            default: goto label15;
        };

     label02:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void staxError(java.lang.String)>("End of document while processing solution");

        return null;

     label03:
        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r4, "result");

        if $z1 == 0 goto label04;

        return r27;

     label04:
        $z2 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r4, "results");

        if $z2 == 0 goto label15;

        return null;

     label05:
        $r5 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r6 = interfaceinvoke $r5.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z3 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "result");

        if $z3 == 0 goto label06;

        r27 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        goto label15;

     label06:
        $z4 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "binding");

        if $z4 == 0 goto label07;

        $r26 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        r28 = interfaceinvoke $r26.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        goto label15;

     label07:
        $z5 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "bnode");

        if $z5 == 0 goto label10;

        $r21 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r22 = interfaceinvoke $r21.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        $z9 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean inputGraphLabels>;

        if $z9 == 0 goto label08;

        $r25 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r25.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r22);

        r29 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r25);

        goto label09;

     label08:
        $r23 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodes>;

        r29 = virtualinvoke $r23.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node asNode(java.lang.String)>($r22);

     label09:
        $r24 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r28);

        staticinvoke <com.hp.hpl.jena.sparql.resultset.SPARQLResult: void addBinding(com.hp.hpl.jena.sparql.engine.binding.BindingMap,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r27, $r24, r29);

        goto label15;

     label10:
        $z6 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "literal");

        if $z6 == 0 goto label13;

        $r11 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r12 = interfaceinvoke $r11.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "datatype");

        $r13 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r14 = interfaceinvoke $r13.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "lang");

        $r15 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r16 = interfaceinvoke $r15.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        r30 = null;

        if $r12 == null goto label11;

        $r20 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        r30 = virtualinvoke $r20.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>($r12);

     label11:
        $r17 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r16, $r14, r30);

        if r28 != null goto label12;

        $r19 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r19.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("No name for variable");

        throw $r19;

     label12:
        $r18 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r28);

        staticinvoke <com.hp.hpl.jena.sparql.resultset.SPARQLResult: void addBinding(com.hp.hpl.jena.sparql.engine.binding.BindingMap,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r27, $r18, $r17);

        goto label15;

     label13:
        $z7 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "unbound");

        if $z7 == 0 goto label14;

        goto label15;

     label14:
        $z8 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: boolean isTag(java.lang.String,java.lang.String)>($r6, "uri");

        if $z8 == 0 goto label15;

        $r7 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r8 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        $r9 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r8);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r28);

        staticinvoke <com.hp.hpl.jena.sparql.resultset.SPARQLResult: void addBinding(com.hp.hpl.jena.sparql.engine.binding.BindingMap,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r27, $r10, $r9);

        goto label15;

     label15:
        goto label01;

     label16:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: void staxError(java.lang.String)>("getOneSolution: Hit end unexpectedly");

        return null;
    }

    private boolean isTag(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.String $r2, r3, r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: javax.xml.stream.XMLStreamReader parser>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2005/sparql-results#");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        return $z1;
    }

    private void staxError(java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r6;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StAX error: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r5);

        $r6 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>(r3);

        throw $r6;
    }

    private void staxError(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r7;
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Throwable;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StAX error: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>(r0, $r5, r6);

        $r7 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r6);

        throw $r7;
    }

    public volatile java.lang.Object next()
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX r0;
        com.hp.hpl.jena.query.QuerySolution $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputStAX$ResultSetStAX: com.hp.hpl.jena.query.QuerySolution next()>();

        return $r1;
    }
}
