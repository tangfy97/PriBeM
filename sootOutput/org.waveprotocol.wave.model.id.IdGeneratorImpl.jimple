public class org.waveprotocol.wave.model.id.IdGeneratorImpl extends java.lang.Object implements org.waveprotocol.wave.model.id.IdGenerator, org.waveprotocol.wave.model.id.IdConstants
{
    private final java.lang.String defaultDomain;
    private final org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed idSeed;
    protected int counter;
    private static final char[] WEB64_ALPHABET;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed r2;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: int counter> = 0;

        r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String defaultDomain> = r1;

        r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed idSeed> = r2;

        return;
    }

    public java.lang.String peekBlipId()
    {
        java.lang.String[] $r0;
        java.lang.String $r2, $r3;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r1;

        r1 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "b";

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String peekUniqueToken()>();

        $r0[1] = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String build(java.lang.String[])>($r0);

        return $r3;
    }

    public org.waveprotocol.wave.model.id.WaveId newWaveId()
    {
        org.waveprotocol.wave.model.id.WaveId $r3;
        java.lang.String $r1, $r2;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r1 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String defaultDomain>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String newId(java.lang.String)>("w");

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId of(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.id.WaveletId newConversationRootWaveletId()
    {
        org.waveprotocol.wave.model.id.WaveletId $r2;
        java.lang.String $r1;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r1 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String defaultDomain>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r1, "conv+root");

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveletId newConversationWaveletId()
    {
        org.waveprotocol.wave.model.id.WaveletId $r3;
        java.lang.String $r1, $r2;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r1 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String defaultDomain>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String newId(java.lang.String)>("conv");

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.id.WaveletId newUserDataWaveletId(java.lang.String)
    {
        java.lang.String[] $r3;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.lang.String r0, $r2, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r6;

        r6 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getDomain()>();

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "user";

        $r3[1] = r0;

        $r4 = staticinvoke <org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String build(java.lang.String[])>($r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r2, $r4);

        return $r5;
    }

    public java.lang.String newDataDocumentId()
    {
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r1, $r6;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String newUniqueToken()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("generated data document id \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a blip id");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r6);

     label1:
        return $r1;
    }

    public java.lang.String newBlipId()
    {
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r1, $r6;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String newId(java.lang.String)>("b");

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("generated blip id \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a blip id");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r6);

     label1:
        return $r1;
    }

    public java.lang.String newId(java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String r1, $r3, $r4, $r9, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r2;

        r2 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = r1;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String newUniqueToken()>();

        $r0[1] = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String build(java.lang.String[])>($r0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("b");

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("g");

        if $z2 == 0 goto label2;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>($r4);

        if $z1 != 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("generated blip id \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a blip id");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r9);

        goto label3;

     label2:
        $z3 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>($r4);

        if $z3 == 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("generated data document id \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a blip id");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r14);

     label3:
        return $r4;
    }

    public java.lang.String newUniqueToken()
    {
        java.lang.Throwable $r8;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r4, $r6;
        org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed $r2;
        java.lang.String $r3, $r5, $r7;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        entermonitor r0;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: int counter>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: int counter> = $i1;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r8;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed idSeed>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed: java.lang.String get()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String base64Encode(int)>($i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected static transient java.lang.String build(java.lang.String[])
    {
        java.lang.String[] r0;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String join(char,java.lang.String[])>(43, r0);

        return $r2;
    }

    protected static java.lang.String getDomain(java.lang.String)
    {
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String r0, $r1, $r7;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid address \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;
    }

    public static java.lang.String base64Encode(int)
    {
        boolean $z0;
        java.lang.StringBuilder $r0;
        java.lang.AssertionError $r3;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, i9, $i10, $i11, $i13, $i14, $i16, $i17, $i19;
        java.lang.String $r8;
        double $d0, $d1, $d2;
        char $c5, $c8, $c12, $c15, $c18, $c20;
        char[] $r1, $r2, $r4, $r5, $r6, $r7;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        if i0 != 0 goto label2;

        i9 = 1;

        goto label3;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i2 = 32 - $i1;

        $d0 = (double) $i2;

        $d1 = $d0 / 6.0;

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i9 = (int) $d2;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(i9);

        tableswitch(i9)
        {
            case 2: goto label8;
            case 3: goto label7;
            case 4: goto label6;
            case 5: goto label5;
            case 6: goto label4;
            default: goto label9;
        };

     label4:
        $r1 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET>;

        $i3 = i0 >> 30;

        $i4 = $i3 & 63;

        $c5 = $r1[$i4];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

     label5:
        $r2 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET>;

        $i6 = i0 >> 24;

        $i7 = $i6 & 63;

        $c8 = $r2[$i7];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

     label6:
        $r4 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET>;

        $i10 = i0 >> 18;

        $i11 = $i10 & 63;

        $c12 = $r4[$i11];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c12);

     label7:
        $r5 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET>;

        $i13 = i0 >> 12;

        $i14 = $i13 & 63;

        $c15 = $r5[$i14];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

     label8:
        $r6 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET>;

        $i16 = i0 >> 6;

        $i17 = $i16 & 63;

        $c18 = $r6[$i17];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c18);

     label9:
        $r7 = <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET>;

        $i19 = i0 & 63;

        $c20 = $r7[$i19];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c20);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String peekUniqueToken()
    {
        java.lang.Throwable $r8;
        int i0;
        java.lang.StringBuilder $r1, $r4, $r6;
        org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed $r2;
        java.lang.String $r3, $r5, $r7;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        entermonitor r0;

     label1:
        i0 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: int counter>;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r8;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed idSeed>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.id.IdGeneratorImpl$Seed: java.lang.String get()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String base64Encode(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String getDefaultDomain()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.id.IdGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.IdGeneratorImpl;

        $r1 = r0.<org.waveprotocol.wave.model.id.IdGeneratorImpl: java.lang.String defaultDomain>;

        return $r1;
    }

    static void <clinit>()
    {
        char[] $r2;
        java.lang.Class $r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/id/IdGeneratorImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.id.IdGeneratorImpl: boolean $assertionsDisabled> = $z1;

        $r1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <org.waveprotocol.wave.model.id.IdGeneratorImpl: char[] WEB64_ALPHABET> = $r2;

        return;
    }
}
