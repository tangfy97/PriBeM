public class org.apache.xmlbeans.impl.schema.StscJavaizer extends java.lang.Object
{
    private static final int MAX_ENUM_COUNT;
    private static final java.lang.String[] PREFIXES;
    static java.lang.String[] PROTECTED_PROPERTIES;
    static java.util.Set PROTECTED_PROPERTIES_SET;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$StscJavaizer;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.StscJavaizer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscJavaizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void javaizeAllTypes(boolean)
    {
        org.apache.xmlbeans.SchemaType[] $r2, $r4, $r6, $r11;
        java.util.ArrayList $r1;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        int i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r10, $r13;
        java.lang.String $r14, $r15;
        org.apache.xmlbeans.SchemaType r9;
        boolean z0;
        java.util.List $r3, $r5, $r7, $r12;
        java.lang.Object $r8;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] documentTypes()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r4 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] attributeTypes()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $r6 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] globalTypes()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        if z0 == 0 goto label1;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void assignGlobalJavaNames(java.util.Collection)>($r1);

     label1:
        i0 = 0;

     label2:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label6;

        $r8 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (org.apache.xmlbeans.SchemaType) $r8;

        if z0 == 0 goto label4;

        $r13 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r9;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void javaizeType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r13);

        $r14 = interfaceinvoke r9.<org.apache.xmlbeans.SchemaType: java.lang.String getFullJavaName()>();

        if $r14 == null goto label3;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void addClassname(java.lang.String,org.apache.xmlbeans.SchemaType)>($r15, r9);

     label3:
        goto label5;

     label4:
        $r10 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r9;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void skipJavaizingType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r10);

     label5:
        $r11 = interfaceinvoke r9.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void addAnonymousTypesFromRedefinition(org.apache.xmlbeans.SchemaType,java.util.List)>(r9, $r1);

        i0 = i0 + 1;

        goto label2;

     label6:
        return;
    }

    static void assignGlobalJavaNames(java.util.Collection)
    {
        java.util.HashSet $r0;
        org.apache.xmlbeans.impl.schema.StscState $r1;
        byte $b0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r5;
        java.lang.String $r7, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r3;
        java.util.Collection r2;
        java.lang.Object $r4;
        javax.xml.namespace.QName $r6, $r8;

        r2 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r4;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: javax.xml.namespace.QName findTopName(org.apache.xmlbeans.SchemaType)>(r5);

        $z1 = virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isDocumentType()>();

        if $z1 == 0 goto label2;

        $b0 = 2;

        goto label3;

     label2:
        $b0 = 1;

     label3:
        $r7 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String getJavaname(javax.xml.namespace.QName,int)>($r6, $b0);

        $z2 = virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isUnjavaized()>();

        if $z2 == 0 goto label4;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: javax.xml.namespace.QName findTopName(org.apache.xmlbeans.SchemaType)>(r5);

        $z3 = virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isDocumentType()>();

        $z4 = virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAttributeType()>();

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickFullJavaClassName(java.util.Set,javax.xml.namespace.QName,java.lang.String,boolean,boolean)>($r0, $r8, $r7, $z3, $z4);

        virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFullJavaName(java.lang.String)>($r9);

        $r10 = virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickFullJavaImplName(java.util.Set,java.lang.String)>($r0, $r10);

        virtualinvoke r5.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFullJavaImplName(java.lang.String)>($r11);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void setUserTypes(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.schema.StscState)>(r5, $r1);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void setExtensions(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.schema.StscState)>(r5, $r1);

     label4:
        goto label1;

     label5:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void verifyInterfaceNameCollisions(java.util.Set,org.apache.xmlbeans.impl.schema.StscState)>($r0, $r1);

        return;
    }

    private static void verifyInterfaceNameCollisions(java.util.Set, org.apache.xmlbeans.impl.schema.StscState)
    {
        org.apache.xmlbeans.InterfaceExtension[] $r2;
        org.apache.xmlbeans.impl.schema.StscState r0;
        boolean $z0, $z1, $z2;
        java.util.Set r6;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r19, $r20, $r21, $r22, $r24, $r25, $r28, $r29;
        int $i0, $i1, i2, i3;
        java.lang.String $r5, $r7, $r12, $r14, $r15, $r17, $r18, $r23, $r27, $r30;
        org.apache.xmlbeans.BindingConfig $r1;
        org.apache.xmlbeans.PrePostExtension[] $r3;
        org.apache.xmlbeans.PrePostExtension $r4;
        org.apache.xmlbeans.InterfaceExtension $r13, $r16, $r26;

        r6 := @parameter0: java.util.Set;

        r0 := @parameter1: org.apache.xmlbeans.impl.schema.StscState;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.BindingConfig getBindingConfig()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.BindingConfig: org.apache.xmlbeans.InterfaceExtension[] getInterfaceExtensions()>();

        i2 = 0;

     label2:
        $i0 = lengthof $r2;

        if i2 >= $i0 goto label5;

        $r13 = $r2[i2];

        $r14 = interfaceinvoke $r13.<org.apache.xmlbeans.InterfaceExtension: java.lang.String getInterface()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z1 == 0 goto label3;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("InterfaceExtension interface \'");

        $r26 = $r2[i2];

        $r27 = interfaceinvoke $r26.<org.apache.xmlbeans.InterfaceExtension: java.lang.String getInterface()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' creates a name collision with one of the generated interfaces or classes.");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r30, 0, null);

     label3:
        $r16 = $r2[i2];

        $r17 = interfaceinvoke $r16.<org.apache.xmlbeans.InterfaceExtension: java.lang.String getStaticHandler()>();

        if $r17 == null goto label4;

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r18);

        if $z2 == 0 goto label4;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("InterfaceExtension handler class \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' creates a name collision with one of the generated interfaces or classes.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r23, 0, null);

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r3 = virtualinvoke $r1.<org.apache.xmlbeans.BindingConfig: org.apache.xmlbeans.PrePostExtension[] getPrePostExtensions()>();

        i3 = 0;

     label6:
        $i1 = lengthof $r3;

        if i3 >= $i1 goto label8;

        $r4 = $r3[i3];

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.PrePostExtension: java.lang.String getStaticHandler()>();

        if $r5 == null goto label7;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label7;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PrePostExtension handler class \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' creates a name collision with one of the generated interfaces or classes.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r12, 0, null);

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        return;
    }

    private static void setUserTypes(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.schema.StscState)
    {
        org.apache.xmlbeans.UserType $r4;
        org.apache.xmlbeans.impl.schema.StscState r0;
        org.apache.xmlbeans.BindingConfig $r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r2;
        javax.xml.namespace.QName $r3;
        java.lang.String $r5, $r6;

        r2 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r0 := @parameter1: org.apache.xmlbeans.impl.schema.StscState;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.BindingConfig getBindingConfig()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r4 = virtualinvoke $r1.<org.apache.xmlbeans.BindingConfig: org.apache.xmlbeans.UserType lookupUserTypeForQName(javax.xml.namespace.QName)>($r3);

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.UserType: java.lang.String getJavaName()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUserTypeName(java.lang.String)>($r5);

        $r6 = interfaceinvoke $r4.<org.apache.xmlbeans.UserType: java.lang.String getStaticHandler()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUserTypeHandlerName(java.lang.String)>($r6);

     label1:
        return;
    }

    private static void setExtensions(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.schema.StscState)
    {
        org.apache.xmlbeans.impl.schema.StscState r2;
        org.apache.xmlbeans.BindingConfig $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.PrePostExtension $r5;
        java.lang.String $r1;
        org.apache.xmlbeans.InterfaceExtension[] $r4;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter1: org.apache.xmlbeans.impl.schema.StscState;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.BindingConfig getBindingConfig()>();

        if $r1 == null goto label1;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.BindingConfig: org.apache.xmlbeans.InterfaceExtension[] getInterfaceExtensions(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setInterfaceExtensions(org.apache.xmlbeans.InterfaceExtension[])>($r4);

        $r5 = virtualinvoke $r3.<org.apache.xmlbeans.BindingConfig: org.apache.xmlbeans.PrePostExtension getPrePostExtension(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPrePostExtension(org.apache.xmlbeans.PrePostExtension)>($r5);

     label1:
        return;
    }

    private static boolean isStringType(org.apache.xmlbeans.SchemaType)
    {
        int $i0, $i1;
        org.apache.xmlbeans.SchemaType r0, $r1;
        boolean $z0;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 == 1 goto label2;

     label1:
        return 0;

     label2:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i1 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i1 != 12 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    static java.lang.String pickConstantName(java.util.Set, java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, i1;
        java.lang.String r0, $r1, r10, r11;
        boolean $z0, $z1;
        java.util.Set r2;

        r2 := @parameter0: java.util.Set;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCaseUnderbar(java.lang.String)>(r0);

        r10 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r10 = "X";

     label1:
        $z0 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("INT_");

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("X_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        i1 = 1;

        r11 = r10;

     label3:
        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r11);

        if $z1 == 0 goto label4;

        i1 = i1 + 1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        r11 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label4:
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r11);

        return r11;
    }

    static void skipJavaizingType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, r2;
        org.apache.xmlbeans.SchemaType $r1;
        boolean $z0;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isJavaized()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r2 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r1;

        if r2 == null goto label2;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void skipJavaizingType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r2);

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void startJavaizing()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void secondPassProcessType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void finishJavaizing()>();

        return;
    }

    static void secondPassProcessType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        java.util.HashSet $r6;
        org.apache.xmlbeans.SchemaStringEnumEntry $r5;
        org.apache.xmlbeans.impl.schema.SchemaStringEnumEntryImpl $r9;
        org.apache.xmlbeans.impl.schema.StscState $r11;
        org.apache.xmlbeans.XmlAnySimpleType[] $r0;
        java.lang.StringBuffer $r12, $r13, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r19, r20;
        java.lang.String $r4, $r8, $r10, $r17;
        org.apache.xmlbeans.SchemaType $r2, $r14, $r18;
        boolean $z0;
        org.apache.xmlbeans.XmlAnySimpleType $r3, $r7;
        org.apache.xmlbeans.SchemaStringEnumEntry[] r1;

        r19 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean isStringType(org.apache.xmlbeans.SchemaType)>(r19);

        if $z0 == 0 goto label7;

        $r0 = virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r0 == null goto label7;

        $i0 = lengthof $r0;

        if $i0 <= 3668 goto label1;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SchemaType Enumeration found with too many enumeration values to create a Java enumeration. The base SchemaType \"");

        $r14 = virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" will be used instead");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.StscState: void warning(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r17, 1, null);

        $r18 = virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        r20 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r18;

        goto label7;

     label1:
        $i1 = lengthof $r0;

        r1 = newarray (org.apache.xmlbeans.SchemaStringEnumEntry)[$i1];

        $r2 = virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        if $r2 != r19 goto label4;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        i5 = 0;

     label2:
        $i3 = lengthof $r0;

        if i5 >= $i3 goto label3;

        $r7 = $r0[i5];

        $r8 = interfaceinvoke $r7.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r9 = new org.apache.xmlbeans.impl.schema.SchemaStringEnumEntryImpl;

        $i4 = i5 + 1;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickConstantName(java.util.Set,java.lang.String)>($r6, $r8);

        specialinvoke $r9.<org.apache.xmlbeans.impl.schema.SchemaStringEnumEntryImpl: void <init>(java.lang.String,int,java.lang.String)>($r8, $i4, $r10);

        r1[i5] = $r9;

        i5 = i5 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        i6 = 0;

     label5:
        $i2 = lengthof $r0;

        if i6 >= $i2 goto label6;

        $r3 = $r0[i6];

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r5 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaStringEnumEntry enumEntryForString(java.lang.String)>($r4);

        r1[i6] = $r5;

        i6 = i6 + 1;

        goto label5;

     label6:
        virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setStringEnumEntries(org.apache.xmlbeans.SchemaStringEnumEntry[])>(r1);

     label7:
        return;
    }

    static void javaizeType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.SchemaProperty[] $r5, $r6, $r8, $r9;
        java.lang.AssertionError $r12;
        java.util.HashSet $r7;
        org.apache.xmlbeans.SchemaProperty $r10;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, r2, $r15;
        java.lang.String $r11, $r16;
        org.apache.xmlbeans.SchemaType $r1, $r3, $r4, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, z7, z8, z9;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isJavaized()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        r2 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r1;

        if r2 == null goto label02;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void javaizeType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r2);

     label02:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        if $r3 == null goto label03;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        if $r13 == r2 goto label03;

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        $r15 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r14;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void javaizeType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r15);

     label03:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void startJavaizing()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setCompiled(boolean)>(1);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void secondPassProcessType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        $z4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z4 != 0 goto label13;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getElementProperties()>();

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getAttributeProperties()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getProperties()>();

        i2 = 0;

     label04:
        $i0 = lengthof $r8;

        if i2 >= $i0 goto label06;

        $r10 = $r8[i2];

        $r11 = interfaceinvoke $r10.<org.apache.xmlbeans.SchemaProperty: java.lang.String getJavaPropertyName()>();

        $z2 = <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $z3 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z3 == 0 goto label05;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label05:
        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r11);

        i2 = i2 + 1;

        goto label04;

     label06:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void avoidExtensionMethods(java.util.Set,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r7, r0);

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

     label07:
        $i1 = lengthof $r5;

        if $i1 <= 0 goto label08;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void assignJavaPropertyNames(java.util.Set,org.apache.xmlbeans.SchemaProperty[],org.apache.xmlbeans.SchemaType,boolean)>($r7, $r5, r2, z8);

     label08:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void assignJavaPropertyNames(java.util.Set,org.apache.xmlbeans.SchemaProperty[],org.apache.xmlbeans.SchemaType,boolean)>($r7, $r6, r2, z7);

        if z9 != 0 goto label09;

        goto label10;

     label09:
        z5 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        goto label07;

     label10:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty[] getProperties()>();

        $z1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean isPropertyModelOrderInsensitive(org.apache.xmlbeans.SchemaProperty[])>($r9);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void assignJavaTypeCodes(org.apache.xmlbeans.SchemaProperty[])>($r9);

        if $z1 != 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setOrderSensitive(boolean)>($z6);

     label13:
        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        if $r16 != null goto label14;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r4 == null goto label15;

     label14:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void assignJavaAnonymousTypeNames(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

     label15:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void finishJavaizing()>();

        return;
    }

    private static void avoidExtensionMethods(java.util.Set, org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        java.lang.String[] $r6, $r7;
        org.apache.xmlbeans.InterfaceExtension[] $r1;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        java.lang.String $r5, r8, $r10;
        boolean $z0;
        org.apache.xmlbeans.InterfaceExtension$MethodSignature[] $r3;
        java.util.Set r9;
        org.apache.xmlbeans.InterfaceExtension$MethodSignature $r4;
        org.apache.xmlbeans.InterfaceExtension r2;

        r9 := @parameter0: java.util.Set;

        r0 := @parameter1: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.InterfaceExtension[] getInterfaceExtensions()>();

        if $r1 == null goto label7;

        i4 = 0;

     label1:
        $i0 = lengthof $r1;

        if i4 >= $i0 goto label7;

        r2 = $r1[i4];

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.InterfaceExtension: org.apache.xmlbeans.InterfaceExtension$MethodSignature[] getMethods()>();

        i5 = 0;

     label2:
        $i1 = lengthof $r3;

        if i5 >= $i1 goto label6;

        $r4 = $r3[i5];

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.InterfaceExtension$MethodSignature: java.lang.String getName()>();

        i6 = 0;

     label3:
        $r6 = <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String[] PREFIXES>;

        $i2 = lengthof $r6;

        if i6 >= $i2 goto label5;

        $r7 = <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String[] PREFIXES>;

        r8 = $r7[i6];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>(r8);

        if $z0 == 0 goto label4;

        $i3 = virtualinvoke r8.<java.lang.String: int length()>();

        $r10 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i3);

        interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        i5 = i5 + 1;

        goto label2;

     label6:
        i4 = i4 + 1;

        goto label1;

     label7:
        return;
    }

    static void assignJavaAnonymousTypeNames(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.SchemaType[] $r2, r46, r47;
        org.apache.xmlbeans.SchemaType $r6, $r8, r48, r49;
        javax.xml.namespace.QName $r40, $r42;
        org.apache.xmlbeans.SchemaField $r7, $r39, $r41;
        java.lang.AssertionError $r33;
        java.util.ArrayList $r45;
        java.lang.StringBuffer $r9, $r11, $r12, $r14, $r16, $r18, $r19, $r20, $r21, $r22, $r24, $r28, $r29, $r30, $r34, $r35, $r37;
        java.lang.String $r4, $r5, $r10, $r13, $r15, $r17, $r23, $r25, $r26, $r27, $r31, $r32, $r36, $r38, $r43, $r44, r51, r52, $r53, $r54;
        org.apache.xmlbeans.impl.schema.StscState $r3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, r50;
        boolean $z0, $z1, $z2;
        java.util.HashSet $r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        r46 = $r2;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        i0 = lengthof $r2;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z0 == 0 goto label01;

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void addAnonymousTypesFromRedefinition(org.apache.xmlbeans.SchemaType,java.util.List)>(r1, $r45);

        $i3 = virtualinvoke $r45.<java.util.ArrayList: int size()>();

        if $i3 <= 0 goto label01;

        $i4 = virtualinvoke $r45.<java.util.ArrayList: int size()>();

        $i5 = i0 + $i4;

        r47 = newarray (org.apache.xmlbeans.SchemaType)[$i5];

        virtualinvoke $r45.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r47);

        $i6 = virtualinvoke $r45.<java.util.ArrayList: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r47, $i6, i0);

        r46 = r47;

     label01:
        r48 = r1;

     label02:
        if r48 == null goto label03;

        $r44 = interfaceinvoke r48.<org.apache.xmlbeans.SchemaType: java.lang.String getShortJavaName()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r44);

        r48 = interfaceinvoke r48.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        goto label02;

     label03:
        r49 = r1;

     label04:
        if r49 == null goto label05;

        $r43 = interfaceinvoke r49.<org.apache.xmlbeans.SchemaType: java.lang.String getShortJavaImplName()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r43);

        r49 = interfaceinvoke r49.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        goto label04;

     label05:
        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String getOutermostPackage(java.lang.String)>($r4);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i7 = 0;

     label06:
        $i1 = lengthof r46;

        if i7 >= $i1 goto label22;

        $r6 = r46[i7];

        r50 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r6;

        if r50 != null goto label07;

        goto label21;

     label07:
        $z1 = virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSkippedAnonymousType()>();

        if $z1 == 0 goto label08;

        goto label21;

     label08:
        r51 = null;

        $r7 = virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        if $r7 == null goto label09;

        $r39 = virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $r40 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        r51 = virtualinvoke $r40.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r41 = virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaField getContainerField()>();

        $r42 = interfaceinvoke $r41.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        r52 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String getJavaname(javax.xml.namespace.QName,int)>($r42, 1);

        goto label14;

     label09:
        $r8 = virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getOuterType()>();

        $i2 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        tableswitch($i2)
        {
            case 1: goto label12;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label12;
        };

     label10:
        r52 = "Member";

        goto label14;

     label11:
        r52 = "Item";

        goto label14;

     label12:
        $z2 = <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label13;

        $r33 = new java.lang.AssertionError;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Weird type ");

        $r36 = virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String toString()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>($r38);

        throw $r33;

     label13:
        r52 = "Base";

     label14:
        if i7 >= i0 goto label17;

        $r27 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickInnerJavaClassName(java.util.Set,java.lang.String,java.lang.String)>($r0, r51, r52);

        virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setShortJavaName(java.lang.String)>($r27);

        $r32 = r51;

        if r52 != null goto label15;

        $r53 = null;

        goto label16;

     label15:
        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Impl");

        $r53 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

     label16:
        $r31 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickInnerJavaImplName(java.util.Set,java.lang.String,java.lang.String)>($r0, $r32, $r53);

        virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setShortJavaImplName(java.lang.String)>($r31);

        goto label20;

     label17:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickInnerJavaClassName(java.util.Set,java.lang.String,java.lang.String)>($r0, r51, r52);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFullJavaName(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getFullJavaImplName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r26 = r51;

        if r52 != null goto label18;

        $r54 = null;

        goto label19;

     label18:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Impl");

        $r54 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

     label19:
        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickInnerJavaImplName(java.util.Set,java.lang.String,java.lang.String)>($r0, $r26, $r54);

        $r24 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r50.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setFullJavaImplName(java.lang.String)>($r25);

     label20:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: void setExtensions(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.schema.StscState)>(r50, $r3);

     label21:
        i7 = i7 + 1;

        goto label06;

     label22:
        return;
    }

    static void assignJavaPropertyNames(java.util.Set, org.apache.xmlbeans.SchemaProperty[], org.apache.xmlbeans.SchemaType, boolean)
    {
        org.apache.xmlbeans.SchemaProperty[] r1;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        byte $b5;
        org.apache.xmlbeans.SchemaProperty $r2, r6, $r17;
        java.math.BigInteger $r8, $r9, $r10, $r11, $r12;
        org.apache.xmlbeans.SchemaType r4, r19;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, z8, z10, $z11, z12, $z13, $z14, $z15, $z16;
        java.util.Set r13;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl r3;
        javax.xml.namespace.QName $r5, $r7, $r16;
        org.apache.xmlbeans.SchemaType$Ref $r20;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r14, $r15, r18;

        r13 := @parameter0: java.util.Set;

        r1 := @parameter1: org.apache.xmlbeans.SchemaProperty[];

        r4 := @parameter2: org.apache.xmlbeans.SchemaType;

        z1 := @parameter3: boolean;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        i4 = 0;

     label01:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label23;

        $r2 = r1[i4];

        r3 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r2;

        $z0 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: boolean isAttribute()>();

        if $z0 == 0 goto label02;

        $r16 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: javax.xml.namespace.QName getName()>();

        $r17 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getAttributeProperty(javax.xml.namespace.QName)>($r16);

        goto label03;

     label02:
        $r5 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: javax.xml.namespace.QName getName()>();

        $r17 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>($r5);

     label03:
        r6 = $r17;

        if $r17 == null goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        if $z6 == z1 goto label06;

        goto label22;

     label06:
        $r7 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: javax.xml.namespace.QName getName()>();

        if r6 != null goto label09;

        $r14 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z5 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: boolean isAttribute()>();

        if $z5 == 0 goto label07;

        $b5 = 4;

        goto label08;

     label07:
        $b5 = 3;

     label08:
        $r15 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String getJavaname(javax.xml.namespace.QName,int)>($r7, $b5);

        r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String pickJavaPropertyName(java.util.Set,java.lang.String,java.lang.String)>(r13, $r14, $r15);

        goto label10;

     label09:
        r18 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: java.lang.String getJavaPropertyName()>();

     label10:
        virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setJavaPropertyName(java.lang.String)>(r18);

        $r8 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.math.BigInteger getMaxOccurs()>();

        if $r8 == null goto label11;

        $r11 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.math.BigInteger getMaxOccurs()>();

        $r12 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i3 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i3 <= 0 goto label12;

     label11:
        $z16 = 1;

        $z15 = 1;

        goto label13;

     label12:
        $z16 = 0;

        $z15 = 0;

     label13:
        z8 = $z15;

        if $z16 != 0 goto label14;

        $r10 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.math.BigInteger getMaxOccurs()>();

        $i2 = virtualinvoke $r10.<java.math.BigInteger: int signum()>();

        if $i2 <= 0 goto label14;

        $z14 = 1;

        $z13 = 1;

        goto label15;

     label14:
        $z14 = 0;

        $z13 = 0;

     label15:
        z10 = $z13;

        if $z14 == 0 goto label16;

        $r9 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.math.BigInteger getMinOccurs()>();

        $i1 = virtualinvoke $r9.<java.math.BigInteger: int signum()>();

        if $i1 != 0 goto label16;

        $z11 = 1;

        goto label17;

     label16:
        $z11 = 0;

     label17:
        z12 = $z11;

        r19 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: org.apache.xmlbeans.SchemaType getType()>();

        if r6 == null goto label21;

        $z2 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: boolean extendsJavaArray()>();

        if $z2 == 0 goto label18;

        z10 = 0;

        z12 = 0;

        z8 = 1;

     label18:
        $z3 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: boolean extendsJavaSingleton()>();

        if $z3 == 0 goto label19;

        z10 = 1;

     label19:
        $z4 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: boolean extendsJavaOption()>();

        if $z4 == 0 goto label20;

        z12 = 1;

     label20:
        r19 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType javaBasedOnType()>();

     label21:
        $r20 = interfaceinvoke r19.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setExtendsJava(org.apache.xmlbeans.SchemaType$Ref,boolean,boolean,boolean)>($r20, z10, z12, z8);

     label22:
        i4 = i4 + 1;

        goto label01;

     label23:
        return;
    }

    static void assignJavaTypeCodes(org.apache.xmlbeans.SchemaProperty[])
    {
        org.apache.xmlbeans.SchemaProperty[] r0;
        org.apache.xmlbeans.SchemaProperty $r1;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl r2;
        org.apache.xmlbeans.SchemaType $r3;

        r0 := @parameter0: org.apache.xmlbeans.SchemaProperty[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $r1 = r0[i2];

        r2 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r1;

        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: org.apache.xmlbeans.SchemaType javaBasedOnType()>();

        $i1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: int javaTypeCodeForType(org.apache.xmlbeans.SchemaType)>($r3);

        virtualinvoke r2.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setJavaTypeCode(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    static int javaTypeCodeInCommon(org.apache.xmlbeans.SchemaType[])
    {
        org.apache.xmlbeans.SchemaType[] r0;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.xmlbeans.SchemaType $r1, $r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = r0[0];

        $i1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: int javaTypeCodeForType(org.apache.xmlbeans.SchemaType)>($r1);

        if $i1 != 19 goto label3;

        return $i1;

     label3:
        i4 = 1;

     label4:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label6;

        $r2 = r0[i4];

        $i3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: int javaTypeCodeForType(org.apache.xmlbeans.SchemaType)>($r2);

        if $i1 == $i3 goto label5;

        return 19;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return $i1;
    }

    static int javaTypeCodeForType(org.apache.xmlbeans.SchemaType)
    {
        java.lang.IllegalStateException $r6;
        org.apache.xmlbeans.SchemaType[] $r23;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.SchemaType $r2, $r3, $r9, $r12, $r19, $r22, r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.xml.namespace.QName $r13;
        java.lang.AssertionError $r16;
        org.apache.xmlbeans.XmlAnySimpleType[] $r4, $r5;
        java.lang.StringBuffer $r7, $r8, $r10, $r11, $r14, $r17, $r18, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1, $r15, $r21;

        r24 := @parameter0: org.apache.xmlbeans.SchemaType;

        $z0 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r0 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r24;

        $r1 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getUserTypeHandlerName()>();

        if $r1 == null goto label02;

        return 20;

     label02:
        $i0 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 2 goto label04;

        $r22 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getUnionCommonBaseType()>();

        if $r22 == null goto label03;

        $z4 = interfaceinvoke $r22.<org.apache.xmlbeans.SchemaType: boolean isURType()>();

        if $z4 != 0 goto label03;

        r24 = $r22;

        goto label04;

     label03:
        $r23 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        $i7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: int javaTypeCodeInCommon(org.apache.xmlbeans.SchemaType[])>($r23);

        return $i7;

     label04:
        $i1 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i1 != 3 goto label05;

        return 16;

     label05:
        $z1 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: boolean isURType()>();

        if $z1 == 0 goto label06;

        return 0;

     label06:
        $r2 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i2 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i2)
        {
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label11;
            case 7: goto label12;
            case 8: goto label13;
            case 9: goto label14;
            case 10: goto label15;
            case 11: goto label16;
            case 12: goto label23;
            case 13: goto label26;
            case 14: goto label27;
            case 15: goto label27;
            case 16: goto label27;
            case 17: goto label27;
            case 18: goto label27;
            case 19: goto label27;
            case 20: goto label27;
            case 21: goto label27;
            default: goto label28;
        };

     label07:
        return 10;

     label08:
        return 1;

     label09:
        return 11;

     label10:
        return 11;

     label11:
        return 10;

     label12:
        return 15;

     label13:
        return 0;

     label14:
        return 2;

     label15:
        return 3;

     label16:
        $i4 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        lookupswitch($i4)
        {
            case 8: goto label17;
            case 16: goto label18;
            case 32: goto label19;
            case 64: goto label20;
            case 1000000: goto label21;
            case 1000001: goto label22;
            default: goto label22;
        };

     label17:
        return 4;

     label18:
        return 5;

     label19:
        return 6;

     label20:
        return 7;

     label21:
        return 9;

     label22:
        return 8;

     label23:
        $r3 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseEnumType()>();

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean isStringType(org.apache.xmlbeans.SchemaType)>($r3);

        if $z2 == 0 goto label25;

        $r4 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r4 == null goto label24;

        $r5 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        $i3 = lengthof $r5;

        if $i3 <= 3668 goto label24;

        return 10;

     label24:
        return 18;

     label25:
        return 10;

     label26:
        return 13;

     label27:
        return 17;

     label28:
        $z3 = <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean $assertionsDisabled>;

        if $z3 != 0 goto label29;

        $r16 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unrecognized code ");

        $r19 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i6 = interfaceinvoke $r19.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r16;

     label29:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unrecognized code ");

        $r9 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i5 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of ");

        $r12 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $r13 = interfaceinvoke $r12.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r6;
    }

    static boolean isPropertyModelOrderInsensitive(org.apache.xmlbeans.SchemaProperty[])
    {
        org.apache.xmlbeans.SchemaProperty[] r0;
        org.apache.xmlbeans.SchemaProperty r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaProperty[];

        i5 = 0;

     label1:
        $i0 = lengthof r0;

        if i5 >= $i0 goto label6;

        r1 = r0[i5];

        $i1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        if $i1 != 1 goto label2;

        return 0;

     label2:
        $i2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i2 != 1 goto label3;

        return 0;

     label3:
        $i3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        if $i3 != 1 goto label4;

        return 0;

     label4:
        $i4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        if $i4 == 0 goto label5;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        if $r2 != null goto label5;

        return 0;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        return 1;
    }

    static boolean protectReservedGlobalClassNames(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("Document");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("Document");

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean protectReservedInnerClassNames(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Enum");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Factory");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static boolean protectReservedPropertyNames(java.lang.String)
    {
        java.util.Set $r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.xmlbeans.impl.schema.StscJavaizer: java.util.Set PROTECTED_PROPERTIES_SET>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("Array");

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Array");

        if $z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    static java.lang.String pickFullJavaClassName(java.util.Set, javax.xml.namespace.QName, java.lang.String, boolean, boolean)
    {
        org.apache.xmlbeans.impl.schema.StscState $r1;
        boolean $z0, z1, z2, z3, $z4;
        java.util.Set r7;
        javax.xml.namespace.QName r2;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r36, $r38;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r11, $r25, $r29, $r32, $r37, r39, $r40, $r41, r42, $r43;

        r7 := @parameter0: java.util.Set;

        r2 := @parameter1: javax.xml.namespace.QName;

        r0 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        if r0 == null goto label01;

        $i8 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        if $i8 < 0 goto label01;

        r39 = r0;

        z3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean protectReservedGlobalClassNames(java.lang.String)>(r0);

        goto label07;

     label01:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String getClassNameFromQName(javax.xml.namespace.QName)>(r2);

        r39 = $r4;

        $r5 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String getPackageOverride(java.lang.String)>($r3);

        if $r5 == null goto label02;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $i6 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(46);

        $i7 = $i6 + 1;

        $r37 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i7);

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

     label02:
        $r6 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String getJavaPrefix(java.lang.String)>($r3);

        if $r6 == null goto label03;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $i2 = virtualinvoke r39.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = $i2 + 1;

        $r29 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i4 = virtualinvoke r39.<java.lang.String: int lastIndexOf(int)>(46);

        $i5 = $i4 + 1;

        $r32 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int)>($i5);

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        r39 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        if r0 == null goto label04;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r39.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r25 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        r39 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        z3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean protectReservedGlobalClassNames(java.lang.String)>(r39);

        if r0 != null goto label07;

        if z1 == 0 goto label05;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Document");

        r39 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label06;

     label05:
        if z2 == 0 goto label06;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute");

        r39 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        $r40 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String getJavaSuffix(java.lang.String)>($r3);

        if $r40 == null goto label07;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        r39 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label07:
        $r41 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String getOutermostPackage(java.lang.String)>(r39);

        i9 = 1;

        if z3 == 0 goto label08;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        r42 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label09;

     label08:
        r42 = r39;

     label09:
        $r43 = virtualinvoke r42.<java.lang.String: java.lang.String toLowerCase()>();

        $z4 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>($r43);

        if $z4 != 0 goto label10;

        $z0 = virtualinvoke r42.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        if $z0 == 0 goto label11;

     label10:
        i9 = i9 + 1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i9);

        r42 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label09;

     label11:
        $r11 = virtualinvoke r42.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>($r11);

        return r42;
    }

    static java.lang.String getOutermostPackage(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "";

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        if $i0 >= 0 goto label2;

        return "";

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    static java.lang.String pickFullJavaImplName(java.util.Set, java.lang.String)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r9, $r10, $r11;
        int $i0, $i1, i2;
        java.lang.String r0, $r6, $r8, r12, r13, r14, $r15;
        boolean $z0;
        java.util.Set r7;

        r7 := @parameter0: java.util.Set;

        r0 := @parameter1: java.lang.String;

        r12 = r0;

        r13 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 < 0 goto label1;

        $i1 = $i0 + 1;

        r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".impl.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Impl");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        i2 = 1;

        r14 = $r6;

     label2:
        $r15 = virtualinvoke r14.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z0 == 0 goto label3;

        i2 = i2 + 1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label3:
        $r8 = virtualinvoke r14.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>($r8);

        return r14;
    }

    static java.lang.String pickJavaPropertyName(java.util.Set, java.lang.String, java.lang.String)
    {
        java.util.Set r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6;
        int i0;
        java.lang.String r7, r8, r9;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        if r8 != null goto label1;

        r8 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCamelCase(java.lang.String)>(r7);

     label1:
        $z0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean protectReservedPropertyNames(java.lang.String)>(r8);

        i0 = 1;

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label2:
        r9 = r8;

     label3:
        $z1 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z1 == 0 goto label4;

        i0 = i0 + 1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        r9 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label4:
        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r9);

        return r9;
    }

    static java.lang.String pickInnerJavaClassName(java.util.Set, java.lang.String, java.lang.String)
    {
        java.util.Set r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6;
        int i0;
        java.lang.String r7, r8, r9;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        if r8 != null goto label1;

        r8 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCamelCase(java.lang.String)>(r7);

     label1:
        $z0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean protectReservedInnerClassNames(java.lang.String)>(r8);

        i0 = 1;

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label2:
        r9 = r8;

     label3:
        $z1 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z1 == 0 goto label4;

        i0 = i0 + 1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        r9 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label4:
        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r9);

        return r9;
    }

    static java.lang.String pickInnerJavaImplName(java.util.Set, java.lang.String, java.lang.String)
    {
        java.util.Set r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0;
        java.lang.String r5, $r6, r9, r10;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        r5 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        if r9 != null goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCamelCase(java.lang.String)>(r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Impl");

        r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        r10 = r9;

        i0 = 1;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r10);

        if $z0 == 0 goto label3;

        i0 = i0 + 1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        r10 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label3:
        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r10);

        return r10;
    }

    static javax.xml.namespace.QName findTopName(org.apache.xmlbeans.SchemaType)
    {
        java.lang.IllegalStateException $r8, $r13;
        org.apache.xmlbeans.SchemaField $r2;
        java.lang.AssertionError $r5, $r6;
        org.apache.xmlbeans.SchemaParticle $r12, $r14;
        int $i0, $i1;
        org.apache.xmlbeans.SchemaType r0, $r4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.SchemaLocalAttribute[] $r10;
        org.apache.xmlbeans.SchemaAttributeModel $r7, $r9;
        javax.xml.namespace.QName $r1, $r3, $r11, $r15, $r16;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        if $r1 == null goto label1;

        $r16 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        return $r16;

     label1:
        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isDocumentType()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r12 == null goto label2;

        $r14 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $i1 = interfaceinvoke $r14.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i1 == 4 goto label3;

     label2:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>()>();

        throw $r13;

     label3:
        $r15 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getDocumentElementName()>();

        return $r15;

     label4:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isAttributeType()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        if $r7 == null goto label5;

        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute[] getAttributes()>();

        $i0 = lengthof $r10;

        if $i0 == 1 goto label6;

     label5:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label6:
        $r11 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getAttributeTypeAttributeName()>();

        return $r11;

     label7:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaField getContainerField()>();

        $z2 = <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label8;

        if $r2 != null goto label8;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label8:
        $z3 = <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean $assertionsDisabled>;

        if $z3 != 0 goto label9;

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r4 == null goto label9;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label9:
        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        return $r3;
    }

    static void addAnonymousTypesFromRedefinition(org.apache.xmlbeans.SchemaType, java.util.List)
    {
        org.apache.xmlbeans.SchemaType[] $r2;
        java.util.List r3, $r4;
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.SchemaType $r1, r5;
        boolean $z0, $z1;

        r5 := @parameter0: org.apache.xmlbeans.SchemaType;

        r3 := @parameter1: java.util.List;

     label1:
        $r0 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r5;

        $z0 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z0 == 0 goto label4;

        $i0 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaType: int getDerivationType()>();

        if $i0 == 2 goto label2;

        $z1 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z1 == 0 goto label4;

     label2:
        $r1 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        r5 = $r1;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $i1 = lengthof $r2;

        if $i1 <= 0 goto label3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

     label3:
        goto label1;

     label4:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1, $r2, $r4;
        java.util.HashSet $r3;
        java.util.List $r5;
        java.lang.Class $r0, $r6;
        boolean $z0, $z1;

        <org.apache.xmlbeans.impl.schema.StscJavaizer: int MAX_ENUM_COUNT> = 3668;

        $r0 = <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscJavaizer>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.StscJavaizer");

        <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscJavaizer> = $r6;

        goto label2;

     label1:
        $r6 = <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscJavaizer>;

     label2:
        $z0 = virtualinvoke $r6.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.StscJavaizer: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.String)[15];

        $r1[0] = "get";

        $r1[1] = "xget";

        $r1[2] = "isNil";

        $r1[3] = "isSet";

        $r1[4] = "sizeOf";

        $r1[5] = "set";

        $r1[6] = "xset";

        $r1[7] = "addNew";

        $r1[8] = "setNil";

        $r1[9] = "unset";

        $r1[10] = "insert";

        $r1[11] = "add";

        $r1[12] = "insertNew";

        $r1[13] = "addNew";

        $r1[14] = "remove";

        <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String[] PREFIXES> = $r1;

        $r2 = newarray (java.lang.String)[20];

        $r2[0] = "StringValue";

        $r2[1] = "BooleanValue";

        $r2[2] = "ByteValue";

        $r2[3] = "ShortValue";

        $r2[4] = "IntValue";

        $r2[5] = "LongValue";

        $r2[6] = "BigIntegerValue";

        $r2[7] = "BigDecimalValue";

        $r2[8] = "FloatValue";

        $r2[9] = "DoubleValue";

        $r2[10] = "ByteArrayValue";

        $r2[11] = "EnumValue";

        $r2[12] = "CalendarValue";

        $r2[13] = "DateValue";

        $r2[14] = "GDateValue";

        $r2[15] = "GDurationValue";

        $r2[16] = "QNameValue";

        $r2[17] = "ListValue";

        $r2[18] = "ObjectValue";

        $r2[19] = "Class";

        <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String[] PROTECTED_PROPERTIES> = $r2;

        $r3 = new java.util.HashSet;

        $r4 = <org.apache.xmlbeans.impl.schema.StscJavaizer: java.lang.String[] PROTECTED_PROPERTIES>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        <org.apache.xmlbeans.impl.schema.StscJavaizer: java.util.Set PROTECTED_PROPERTIES_SET> = $r3;

        return;
    }
}
