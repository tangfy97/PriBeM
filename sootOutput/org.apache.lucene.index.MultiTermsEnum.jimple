public final class org.apache.lucene.index.MultiTermsEnum extends org.apache.lucene.index.TermsEnum
{
    private final org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue;
    private final org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs;
    private final org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs;
    private final org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top;
    private final org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs;
    private final org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions;
    private org.apache.lucene.util.BytesRef lastSeek;
    private boolean lastSeekExact;
    private final org.apache.lucene.util.BytesRef lastSeekScratch;
    private int numTop;
    private int numSubs;
    private org.apache.lucene.util.BytesRef current;
    private java.util.Comparator termComp;
    static final boolean $assertionsDisabled;

    public int getMatchCount()
    {
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        return $i0;
    }

    public org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] getMatchArray()
    {
        org.apache.lucene.index.MultiTermsEnum r0;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        return $r1;
    }

    public void <init>(org.apache.lucene.index.ReaderSlice[])
    {
        org.apache.lucene.index.ReaderSlice $r10, $r15, $r20;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r9;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r2;
        org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] $r6, $r13, $r14;
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.lucene.index.ReaderSlice[] r3;
        org.apache.lucene.index.MultiDocsEnum$EnumWithSlice $r12, $r16;
        org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice $r17, $r21;
        org.apache.lucene.util.BytesRef $r1;
        org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] $r7, $r18, $r19;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r4, $r5, $r8, $r11;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        r3 := @parameter0: org.apache.lucene.index.ReaderSlice[];

        specialinvoke r0.<org.apache.lucene.index.TermsEnum: void <init>()>();

        $r1 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r1.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeekScratch> = $r1;

        $r2 = new org.apache.lucene.index.MultiTermsEnum$TermMergeQueue;

        $i0 = lengthof r3;

        specialinvoke $r2.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: void <init>(int)>($i0);

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue> = $r2;

        $i1 = lengthof r3;

        $r4 = newarray (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)[$i1];

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top> = $r4;

        $i2 = lengthof r3;

        $r5 = newarray (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)[$i2];

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs> = $r5;

        $i3 = lengthof r3;

        $r6 = newarray (org.apache.lucene.index.MultiDocsEnum$EnumWithSlice)[$i3];

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs> = $r6;

        $i4 = lengthof r3;

        $r7 = newarray (org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice)[$i4];

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions> = $r7;

        i7 = 0;

     label1:
        $i5 = lengthof r3;

        if i7 >= $i5 goto label2;

        $r11 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $r9 = new org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;

        $r10 = r3[i7];

        specialinvoke $r9.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: void <init>(int,org.apache.lucene.index.ReaderSlice)>(i7, $r10);

        $r11[i7] = $r9;

        $r13 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs>;

        $r12 = new org.apache.lucene.index.MultiDocsEnum$EnumWithSlice;

        specialinvoke $r12.<org.apache.lucene.index.MultiDocsEnum$EnumWithSlice: void <init>()>();

        $r13[i7] = $r12;

        $r14 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs>;

        $r16 = $r14[i7];

        $r15 = r3[i7];

        $r16.<org.apache.lucene.index.MultiDocsEnum$EnumWithSlice: org.apache.lucene.index.ReaderSlice slice> = $r15;

        $r18 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions>;

        $r17 = new org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice;

        specialinvoke $r17.<org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice: void <init>()>();

        $r18[i7] = $r17;

        $r19 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions>;

        $r21 = $r19[i7];

        $r20 = r3[i7];

        $r21.<org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice: org.apache.lucene.index.ReaderSlice slice> = $r20;

        i7 = i7 + 1;

        goto label1;

     label2:
        $i6 = lengthof r3;

        $r8 = newarray (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)[$i6];

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs> = $r8;

        return;
    }

    public org.apache.lucene.util.BytesRef term()
    {
        org.apache.lucene.index.MultiTermsEnum r0;
        org.apache.lucene.util.BytesRef $r1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current>;

        return $r1;
    }

    public java.util.Comparator getComparator()
    {
        org.apache.lucene.index.MultiTermsEnum r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        return $r1;
    }

    public org.apache.lucene.index.TermsEnum reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[]) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice r10;
        org.apache.lucene.index.TermsEnum $r4, $r7, $r11, $r24, $r30;
        org.apache.lucene.index.MultiTermsEnum r0;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.BytesRef $r31;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[] r2;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex r5;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21, $r22;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r9, $r13, $r28;
        java.lang.AssertionError $r27, $r29;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r1, $r3, $r12, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String $r23;
        java.util.Comparator $r6, $r8, $r14, $r20, $r26;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        r2 := @parameter0: org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[];

        $z0 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = lengthof r2;

        $r28 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $i4 = lengthof $r28;

        if $i5 <= $i4 goto label1;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label1:
        r0.<org.apache.lucene.index.MultiTermsEnum: int numSubs> = 0;

        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = 0;

        r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp> = null;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        virtualinvoke $r1.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: void clear()>();

        i6 = 0;

     label2:
        $i7 = lengthof r2;

        if i6 >= $i7 goto label7;

        r5 = r2[i6];

        $z1 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if r5 != null goto label3;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label3:
        $r6 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        if $r6 != null goto label4;

        $r25 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $r24 = r5.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: org.apache.lucene.index.TermsEnum termsEnum>;

        $r26 = virtualinvoke $r24.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp> = $r26;

        $r25.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.util.Comparator termComp> = $r26;

        goto label5;

     label4:
        $r7 = r5.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: org.apache.lucene.index.TermsEnum termsEnum>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        if $r8 == null goto label5;

        $r14 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        if $z2 != 0 goto label5;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sub-readers have different BytesRef.Comparators: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r20 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; cannot merge");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r15;

     label5:
        $r30 = r5.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: org.apache.lucene.index.TermsEnum termsEnum>;

        $r31 = virtualinvoke $r30.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r31 == null goto label6;

        $r9 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i1 = r5.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: int subIndex>;

        r10 = $r9[$i1];

        $r11 = r5.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: org.apache.lucene.index.TermsEnum termsEnum>;

        virtualinvoke r10.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: void reset(org.apache.lucene.index.TermsEnum,org.apache.lucene.util.BytesRef)>($r11, $r31);

        $r12 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        virtualinvoke $r12.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.lang.Object add(java.lang.Object)>(r10);

        $r13 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $i2 = r0.<org.apache.lucene.index.MultiTermsEnum: int numSubs>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.index.MultiTermsEnum: int numSubs> = $i3;

        $r13[$i2] = r10;

     label6:
        i6 = i6 + 1;

        goto label2;

     label7:
        $r3 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $i0 = virtualinvoke $r3.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: int size()>();

        if $i0 != 0 goto label8;

        $r4 = <org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum EMPTY>;

        return $r4;

     label8:
        return r0;
    }

    public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r4, $r9, $r12, $r14, $r17, $r21, $r25;
        org.apache.lucene.index.TermsEnum $r6, $r13, $r26;
        org.apache.lucene.index.MultiTermsEnum r0;
        boolean z0, $z1, $z2, z3, z4, $z5;
        org.apache.lucene.util.BytesRef $r2, r5, $r15, $r18, r22, $r27;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r3, $r7, $r8, $r10, $r11, $r16, $r20, $r24;
        java.lang.AssertionError $r19;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.util.Comparator $r23, $r28;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        r5 := @parameter0: org.apache.lucene.util.BytesRef;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        virtualinvoke $r1.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: void clear()>();

        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = 0;

        z3 = 0;

        $r2 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek>;

        if $r2 == null goto label01;

        $r28 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        $r27 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek>;

        $i4 = interfaceinvoke $r28.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r27, r5);

        if $i4 > 0 goto label01;

        z3 = 1;

     label01:
        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek> = null;

        r0.<org.apache.lucene.index.MultiTermsEnum: boolean lastSeekExact> = 1;

        i5 = 0;

     label02:
        $i6 = r0.<org.apache.lucene.index.MultiTermsEnum: int numSubs>;

        if i5 >= $i6 goto label11;

        if z3 == 0 goto label08;

        $r20 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r21 = $r20[i5];

        r22 = $r21.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        if r22 == null goto label06;

        $r23 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        $i3 = interfaceinvoke $r23.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r22);

        if $i3 != 0 goto label03;

        z4 = 1;

        goto label05;

     label03:
        if $i3 >= 0 goto label04;

        z4 = 0;

        goto label05;

     label04:
        $r24 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r25 = $r24[i5];

        $r26 = $r25.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        z4 = virtualinvoke $r26.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>(r5, z0);

     label05:
        goto label07;

     label06:
        z4 = 0;

     label07:
        goto label09;

     label08:
        $r3 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r4 = $r3[i5];

        $r6 = $r4.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        z4 = virtualinvoke $r6.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>(r5, z0);

     label09:
        if z4 == 0 goto label10;

        $r7 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $i1 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        $i2 = $i1 + 1;

        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = $i2;

        $r8 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r9 = $r8[i5];

        $r7[$i1] = $r9;

        $r10 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r14 = $r10[i5];

        $r11 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r12 = $r11[i5];

        $r13 = $r12.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r15 = virtualinvoke $r13.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        $r14.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current> = $r15;

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current> = $r15;

        $z1 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label10;

        $r16 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r17 = $r16[i5];

        $r18 = $r17.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        $z2 = virtualinvoke r5.<org.apache.lucene.util.BytesRef: boolean equals(java.lang.Object)>($r18);

        if $z2 != 0 goto label10;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label10:
        i5 = i5 + 1;

        goto label02;

     label11:
        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if $i0 <= 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        return $z5;
    }

    public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r9, $r14, $r17, $r19, $r22, $r25, $r30, $r33, $r35, $r38, $r42;
        org.apache.lucene.index.TermsEnum $r10, $r18, $r34, $r43;
        org.apache.lucene.index.MultiTermsEnum r0;
        boolean z0, $z1, z2;
        org.apache.lucene.util.BytesRef $r2, r3, $r20, $r26, $r36, r39, $r44, $r46, $r47;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r8, $r13, $r15, $r16, $r21, $r24, $r28, $r29, $r31, $r32, $r37, $r41;
        java.lang.AssertionError $r27;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r1, $r4, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        org.apache.lucene.index.TermsEnum$SeekStatus $r5, $r6, $r7, $r11, $r12, r48;
        java.util.Comparator $r40, $r45;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        r3 := @parameter0: org.apache.lucene.util.BytesRef;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        virtualinvoke $r1.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: void clear()>();

        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = 0;

        r0.<org.apache.lucene.index.MultiTermsEnum: boolean lastSeekExact> = 0;

        z2 = 0;

        $r2 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek>;

        if $r2 == null goto label01;

        $r45 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        $r44 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek>;

        $i5 = interfaceinvoke $r45.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r44, r3);

        if $i5 > 0 goto label01;

        z2 = 1;

     label01:
        $r46 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeekScratch>;

        virtualinvoke $r46.<org.apache.lucene.util.BytesRef: void copyBytes(org.apache.lucene.util.BytesRef)>(r3);

        $r47 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeekScratch>;

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek> = $r47;

        i6 = 0;

     label02:
        $i7 = r0.<org.apache.lucene.index.MultiTermsEnum: int numSubs>;

        if i6 >= $i7 goto label14;

        if z2 == 0 goto label08;

        $r37 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r38 = $r37[i6];

        r39 = $r38.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        if r39 == null goto label06;

        $r40 = r0.<org.apache.lucene.index.MultiTermsEnum: java.util.Comparator termComp>;

        $i4 = interfaceinvoke $r40.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, r39);

        if $i4 != 0 goto label03;

        r48 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus FOUND>;

        goto label05;

     label03:
        if $i4 >= 0 goto label04;

        r48 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus NOT_FOUND>;

        goto label05;

     label04:
        $r41 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r42 = $r41[i6];

        $r43 = $r42.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        r48 = virtualinvoke $r43.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef,boolean)>(r3, z0);

     label05:
        goto label07;

     label06:
        r48 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus END>;

     label07:
        goto label09;

     label08:
        $r8 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r9 = $r8[i6];

        $r10 = $r9.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        r48 = virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef,boolean)>(r3, z0);

     label09:
        $r11 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus FOUND>;

        if r48 != $r11 goto label10;

        $r28 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $i2 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = $i3;

        $r29 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r30 = $r29[i6];

        $r28[$i2] = $r30;

        $r31 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r35 = $r31[i6];

        $r32 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r33 = $r32[i6];

        $r34 = $r33.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r36 = virtualinvoke $r34.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        $r35.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current> = $r36;

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current> = $r36;

        goto label13;

     label10:
        $r12 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus NOT_FOUND>;

        if r48 != $r12 goto label12;

        $r15 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r19 = $r15[i6];

        $r16 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r17 = $r16[i6];

        $r18 = $r17.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r20 = virtualinvoke $r18.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        $r19.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current> = $r20;

        $z1 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        $r24 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r25 = $r24[i6];

        $r26 = $r25.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        if $r26 != null goto label11;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label11:
        $r23 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $r21 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r22 = $r21[i6];

        virtualinvoke $r23.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.lang.Object add(java.lang.Object)>($r22);

        goto label13;

     label12:
        $r13 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] currentSubs>;

        $r14 = $r13[i6];

        $r14.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current> = null;

     label13:
        i6 = i6 + 1;

        goto label02;

     label14:
        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if $i0 <= 0 goto label15;

        $r7 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus FOUND>;

        return $r7;

     label15:
        $r4 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $i1 = virtualinvoke $r4.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: int size()>();

        if $i1 <= 0 goto label16;

        specialinvoke r0.<org.apache.lucene.index.MultiTermsEnum: void pullTop()>();

        $r6 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus NOT_FOUND>;

        return $r6;

     label16:
        $r5 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus END>;

        return $r5;
    }

    public void seekExact(long)
    {
        org.apache.lucene.index.MultiTermsEnum r1;
        java.lang.UnsupportedOperationException $r0;
        long l0;

        r1 := @this: org.apache.lucene.index.MultiTermsEnum;

        l0 := @parameter0: long;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public long ord()
    {
        org.apache.lucene.index.MultiTermsEnum r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.apache.lucene.index.MultiTermsEnum;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private void pullTop()
    {
        java.lang.AssertionError $r11;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r2, $r6, $r8, $r15;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r4, $r13, $r16;
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef $r3, $r9, $r10;
        java.lang.Object $r5, $r14;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r1, $r7, $r12;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        $z0 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if $i0 == 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r12 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $i1 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        $i2 = $i1 + 1;

        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = $i2;

        $r13 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.lang.Object pop()>();

        $r15 = (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice) $r14;

        $r12[$i1] = $r15;

        $r16 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $i3 = virtualinvoke $r16.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: int size()>();

        if $i3 == 0 goto label2;

        $r4 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.lang.Object top()>();

        $r6 = (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice) $r5;

        $r10 = $r6.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        $r7 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r8 = $r7[0];

        $r9 = $r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        $z1 = virtualinvoke $r10.<org.apache.lucene.util.BytesRef: boolean bytesEquals(org.apache.lucene.util.BytesRef)>($r9);

        if $z1 != 0 goto label1;

        goto label2;

     label2:
        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r2 = $r1[0];

        $r3 = $r2.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current> = $r3;

        return;
    }

    private void pushTop() throws java.io.IOException
    {
        org.apache.lucene.util.BytesRef $r6, $r9;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r3, $r5, $r8, $r11;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r12;
        org.apache.lucene.index.TermsEnum $r4;
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0, i1;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r1, $r2, $r7, $r10;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if i1 >= $i0 goto label3;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r5 = $r1[i1];

        $r2 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r3 = $r2[i1];

        $r4 = $r3.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r6 = virtualinvoke $r4.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        $r5.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current> = $r6;

        $r7 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r8 = $r7[i1];

        $r9 = $r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        if $r9 == null goto label2;

        $r12 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $r10 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r11 = $r10[i1];

        virtualinvoke $r12.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.lang.Object add(java.lang.Object)>($r11);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<org.apache.lucene.index.MultiTermsEnum: int numTop> = 0;

        return;
    }

    public org.apache.lucene.util.BytesRef next() throws java.io.IOException
    {
        org.apache.lucene.util.BytesRef $r1, $r2;
        java.lang.AssertionError $r5;
        org.apache.lucene.index.TermsEnum$SeekStatus $r3, $r4;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue $r6;
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        $z0 = r0.<org.apache.lucene.index.MultiTermsEnum: boolean lastSeekExact>;

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current>;

        $r3 = virtualinvoke r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef)>($r2);

        $z1 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r4 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus FOUND>;

        if $r3 == $r4 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        r0.<org.apache.lucene.index.MultiTermsEnum: boolean lastSeekExact> = 0;

     label2:
        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef lastSeek> = null;

        specialinvoke r0.<org.apache.lucene.index.MultiTermsEnum: void pushTop()>();

        $r6 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue queue>;

        $i0 = virtualinvoke $r6.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: int size()>();

        if $i0 <= 0 goto label3;

        specialinvoke r0.<org.apache.lucene.index.MultiTermsEnum: void pullTop()>();

        goto label4;

     label3:
        r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current> = null;

     label4:
        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef current>;

        return $r1;
    }

    public int docFreq() throws java.io.IOException
    {
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r2;
        org.apache.lucene.index.TermsEnum $r3;
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0, $i1, i2, i3;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if i3 >= $i0 goto label2;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r2 = $r1[i3];

        $r3 = $r2.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: int docFreq()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public long totalTermFreq() throws java.io.IOException
    {
        long $l1, l3;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r2;
        byte $b2;
        org.apache.lucene.index.TermsEnum $r3;
        org.apache.lucene.index.MultiTermsEnum r0;
        int $i0, i4;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum;

        l3 = 0L;

        i4 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if i4 >= $i0 goto label3;

        $r1 = r0.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r2 = $r1[i4];

        $r3 = $r2.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $l1 = virtualinvoke $r3.<org.apache.lucene.index.TermsEnum: long totalTermFreq()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        return $l1;

     label2:
        l3 = l3 + $l1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return l3;
    }

    public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException
    {
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice r8;
        org.apache.lucene.index.TermsEnum $r11;
        org.apache.lucene.index.BitsSlice $r31, $r35;
        org.apache.lucene.index.MultiTermsEnum r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.index.MultiDocsEnum$EnumWithSlice $r16, $r18;
        java.lang.StringBuilder $r22, $r23, $r24, $r26, $r27, $r29;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r3, $r7, $r28, $r38;
        org.apache.lucene.index.MultiBits r40;
        java.lang.AssertionError $r13, $r21;
        org.apache.lucene.index.ReaderSlice $r19, $r32, $r33, $r36;
        org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] $r5, $r15, $r17;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12;
        java.lang.String $r30;
        org.apache.lucene.util.Bits r4, r41;
        org.apache.lucene.index.MultiDocsEnum $r1, $r6, $r37, r39;
        org.apache.lucene.index.DocsEnum[] $r9, $r14, $r20, $r25;
        org.apache.lucene.index.DocsEnum r0, $r10, $r12;
        org.apache.lucene.index.MultiBits$SubResult $r34;

        r2 := @this: org.apache.lucene.index.MultiTermsEnum;

        r4 := @parameter0: org.apache.lucene.util.Bits;

        r0 := @parameter1: org.apache.lucene.index.DocsEnum;

        i2 := @parameter2: int;

        if r0 == null goto label01;

        $z2 = r0 instanceof org.apache.lucene.index.MultiDocsEnum;

        if $z2 == 0 goto label01;

        r39 = (org.apache.lucene.index.MultiDocsEnum) r0;

        $z3 = virtualinvoke r39.<org.apache.lucene.index.MultiDocsEnum: boolean canReuse(org.apache.lucene.index.MultiTermsEnum)>(r2);

        if $z3 != 0 goto label02;

        $r37 = new org.apache.lucene.index.MultiDocsEnum;

        $r38 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i9 = lengthof $r38;

        specialinvoke $r37.<org.apache.lucene.index.MultiDocsEnum: void <init>(org.apache.lucene.index.MultiTermsEnum,int)>(r2, $i9);

        r39 = $r37;

        goto label02;

     label01:
        $r1 = new org.apache.lucene.index.MultiDocsEnum;

        $r3 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i0 = lengthof $r3;

        specialinvoke $r1.<org.apache.lucene.index.MultiDocsEnum: void <init>(org.apache.lucene.index.MultiTermsEnum,int)>(r2, $i0);

        r39 = $r1;

     label02:
        $z4 = r4 instanceof org.apache.lucene.index.MultiBits;

        if $z4 == 0 goto label03;

        r40 = (org.apache.lucene.index.MultiBits) r4;

        goto label04;

     label03:
        r40 = null;

     label04:
        i10 = 0;

        i11 = 0;

     label05:
        $i12 = r2.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if i11 >= $i12 goto label14;

        $r7 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        r8 = $r7[i11];

        if r40 == null goto label08;

        $r33 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r8);

        $r34 = virtualinvoke r40.<org.apache.lucene.index.MultiBits: org.apache.lucene.index.MultiBits$SubResult getMatchingSub(org.apache.lucene.index.ReaderSlice)>($r33);

        $z1 = $r34.<org.apache.lucene.index.MultiBits$SubResult: boolean matches>;

        if $z1 == 0 goto label06;

        r41 = $r34.<org.apache.lucene.index.MultiBits$SubResult: org.apache.lucene.util.Bits result>;

        goto label07;

     label06:
        $r35 = new org.apache.lucene.index.BitsSlice;

        $r36 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r8);

        specialinvoke $r35.<org.apache.lucene.index.BitsSlice: void <init>(org.apache.lucene.util.Bits,org.apache.lucene.index.ReaderSlice)>(r4, $r36);

        r41 = $r35;

     label07:
        goto label10;

     label08:
        if r4 == null goto label09;

        $r31 = new org.apache.lucene.index.BitsSlice;

        $r32 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r8);

        specialinvoke $r31.<org.apache.lucene.index.BitsSlice: void <init>(org.apache.lucene.util.Bits,org.apache.lucene.index.ReaderSlice)>(r4, $r32);

        r41 = $r31;

        goto label10;

     label09:
        r41 = null;

     label10:
        $z5 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z5 != 0 goto label11;

        $i5 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r20 = r39.<org.apache.lucene.index.MultiDocsEnum: org.apache.lucene.index.DocsEnum[] subDocsEnum>;

        $i4 = lengthof $r20;

        if $i5 < $i4 goto label11;

        $r21 = new java.lang.AssertionError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $i6 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r25 = r39.<org.apache.lucene.index.MultiDocsEnum: org.apache.lucene.index.DocsEnum[] subDocsEnum>;

        $i7 = lengthof $r25;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r28 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i8 = lengthof $r28;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r21;

     label11:
        $r11 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r9 = r39.<org.apache.lucene.index.MultiDocsEnum: org.apache.lucene.index.DocsEnum[] subDocsEnum>;

        $i1 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r10 = $r9[$i1];

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsEnum,int)>(r41, $r10, i2);

        if $r12 == null goto label12;

        $r14 = r39.<org.apache.lucene.index.MultiDocsEnum: org.apache.lucene.index.DocsEnum[] subDocsEnum>;

        $i3 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r14[$i3] = $r12;

        $r15 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs>;

        $r16 = $r15[i10];

        $r16.<org.apache.lucene.index.MultiDocsEnum$EnumWithSlice: org.apache.lucene.index.DocsEnum docsEnum> = $r12;

        $r17 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs>;

        $r18 = $r17[i10];

        $r19 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r8);

        $r18.<org.apache.lucene.index.MultiDocsEnum$EnumWithSlice: org.apache.lucene.index.ReaderSlice slice> = $r19;

        i10 = i10 + 1;

        goto label13;

     label12:
        $z0 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z0 != 0 goto label13;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("One of our subs cannot provide a docsenum");

        throw $r13;

     label13:
        i11 = i11 + 1;

        goto label05;

     label14:
        if i10 != 0 goto label15;

        return null;

     label15:
        $r5 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] subDocs>;

        $r6 = virtualinvoke r39.<org.apache.lucene.index.MultiDocsEnum: org.apache.lucene.index.MultiDocsEnum reset(org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[],int)>($r5, i10);

        return $r6;
    }

    public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException
    {
        org.apache.lucene.index.TermsEnum $r11, $r13;
        org.apache.lucene.index.BitsSlice $r32, $r40;
        org.apache.lucene.index.MultiTermsEnum r2;
        java.lang.StringBuilder $r23, $r24, $r25, $r27, $r28, $r30;
        java.lang.AssertionError $r22;
        java.lang.String $r31;
        org.apache.lucene.util.Bits r4, r48;
        org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice $r17, $r19;
        org.apache.lucene.index.DocsEnum $r14;
        org.apache.lucene.index.MultiBits$SubResult $r39;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice r8, $r34, $r37, $r42;
        org.apache.lucene.index.DocsAndPositionsEnum r0, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r3, $r7, $r29, $r33, $r36, $r41, $r45;
        org.apache.lucene.index.MultiBits r47;
        org.apache.lucene.index.ReaderSlice $r20, $r35, $r38, $r43;
        org.apache.lucene.index.MultiDocsAndPositionsEnum $r1, $r6, $r44, r46;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12;
        org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] $r5, $r16, $r18;
        org.apache.lucene.index.DocsAndPositionsEnum[] $r9, $r15, $r21, $r26;

        r2 := @this: org.apache.lucene.index.MultiTermsEnum;

        r4 := @parameter0: org.apache.lucene.util.Bits;

        r0 := @parameter1: org.apache.lucene.index.DocsAndPositionsEnum;

        i2 := @parameter2: int;

        if r0 == null goto label01;

        $z1 = r0 instanceof org.apache.lucene.index.MultiDocsAndPositionsEnum;

        if $z1 == 0 goto label01;

        r46 = (org.apache.lucene.index.MultiDocsAndPositionsEnum) r0;

        $z2 = virtualinvoke r46.<org.apache.lucene.index.MultiDocsAndPositionsEnum: boolean canReuse(org.apache.lucene.index.MultiTermsEnum)>(r2);

        if $z2 != 0 goto label02;

        $r44 = new org.apache.lucene.index.MultiDocsAndPositionsEnum;

        $r45 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i9 = lengthof $r45;

        specialinvoke $r44.<org.apache.lucene.index.MultiDocsAndPositionsEnum: void <init>(org.apache.lucene.index.MultiTermsEnum,int)>(r2, $i9);

        r46 = $r44;

        goto label02;

     label01:
        $r1 = new org.apache.lucene.index.MultiDocsAndPositionsEnum;

        $r3 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i0 = lengthof $r3;

        specialinvoke $r1.<org.apache.lucene.index.MultiDocsAndPositionsEnum: void <init>(org.apache.lucene.index.MultiTermsEnum,int)>(r2, $i0);

        r46 = $r1;

     label02:
        $z3 = r4 instanceof org.apache.lucene.index.MultiBits;

        if $z3 == 0 goto label03;

        r47 = (org.apache.lucene.index.MultiBits) r4;

        goto label04;

     label03:
        r47 = null;

     label04:
        i10 = 0;

        i11 = 0;

     label05:
        $i12 = r2.<org.apache.lucene.index.MultiTermsEnum: int numTop>;

        if i11 >= $i12 goto label14;

        $r7 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        r8 = $r7[i11];

        if r47 == null goto label08;

        $r36 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r37 = $r36[i11];

        $r38 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>($r37);

        $r39 = virtualinvoke r47.<org.apache.lucene.index.MultiBits: org.apache.lucene.index.MultiBits$SubResult getMatchingSub(org.apache.lucene.index.ReaderSlice)>($r38);

        $z0 = $r39.<org.apache.lucene.index.MultiBits$SubResult: boolean matches>;

        if $z0 == 0 goto label06;

        r48 = $r39.<org.apache.lucene.index.MultiBits$SubResult: org.apache.lucene.util.Bits result>;

        goto label07;

     label06:
        $r40 = new org.apache.lucene.index.BitsSlice;

        $r41 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r42 = $r41[i11];

        $r43 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>($r42);

        specialinvoke $r40.<org.apache.lucene.index.BitsSlice: void <init>(org.apache.lucene.util.Bits,org.apache.lucene.index.ReaderSlice)>(r4, $r43);

        r48 = $r40;

     label07:
        goto label10;

     label08:
        if r4 == null goto label09;

        $r32 = new org.apache.lucene.index.BitsSlice;

        $r33 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] top>;

        $r34 = $r33[i11];

        $r35 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>($r34);

        specialinvoke $r32.<org.apache.lucene.index.BitsSlice: void <init>(org.apache.lucene.util.Bits,org.apache.lucene.index.ReaderSlice)>(r4, $r35);

        r48 = $r32;

        goto label10;

     label09:
        r48 = null;

     label10:
        $z4 = <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled>;

        if $z4 != 0 goto label11;

        $i5 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r21 = r46.<org.apache.lucene.index.MultiDocsAndPositionsEnum: org.apache.lucene.index.DocsAndPositionsEnum[] subDocsAndPositionsEnum>;

        $i4 = lengthof $r21;

        if $i5 < $i4 goto label11;

        $r22 = new java.lang.AssertionError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $i6 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r26 = r46.<org.apache.lucene.index.MultiDocsAndPositionsEnum: org.apache.lucene.index.DocsAndPositionsEnum[] subDocsAndPositionsEnum>;

        $i7 = lengthof $r26;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r29 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $i8 = lengthof $r29;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r31);

        throw $r22;

     label11:
        $r11 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r9 = r46.<org.apache.lucene.index.MultiDocsAndPositionsEnum: org.apache.lucene.index.DocsAndPositionsEnum[] subDocsAndPositionsEnum>;

        $i1 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r10 = $r9[$i1];

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsAndPositionsEnum,int)>(r48, $r10, i2);

        if $r12 == null goto label12;

        $r15 = r46.<org.apache.lucene.index.MultiDocsAndPositionsEnum: org.apache.lucene.index.DocsAndPositionsEnum[] subDocsAndPositionsEnum>;

        $i3 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r15[$i3] = $r12;

        $r16 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions>;

        $r17 = $r16[i10];

        $r17.<org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositionsEnum> = $r12;

        $r18 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions>;

        $r19 = $r18[i10];

        $r20 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r8);

        $r19.<org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice: org.apache.lucene.index.ReaderSlice slice> = $r20;

        i10 = i10 + 1;

        goto label13;

     label12:
        $r13 = r8.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsEnum,int)>(r48, null, 0);

        if $r14 == null goto label13;

        return null;

     label13:
        i11 = i11 + 1;

        goto label05;

     label14:
        if i10 != 0 goto label15;

        return null;

     label15:
        $r5 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] subDocsAndPositions>;

        $r6 = virtualinvoke r46.<org.apache.lucene.index.MultiDocsAndPositionsEnum: org.apache.lucene.index.MultiDocsAndPositionsEnum reset(org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[],int)>($r5, i10);

        return $r6;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.MultiTermsEnum r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r3;

        r2 := @this: org.apache.lucene.index.MultiTermsEnum;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MultiTermsEnum(");

        $r3 = r2.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] subs>;

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MultiTermsEnum;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MultiTermsEnum: boolean $assertionsDisabled> = $z1;

        return;
    }
}
