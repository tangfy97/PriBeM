class org.springframework.util.xml.StaxEventXMLReader extends org.springframework.util.xml.AbstractStaxXMLReader
{
    private static final java.lang.String DEFAULT_XML_VERSION;
    private final javax.xml.stream.XMLEventReader reader;
    private final java.util.Map namespaces;
    private java.lang.String xmlVersion;
    private java.lang.String encoding;

    void <init>(javax.xml.stream.XMLEventReader)
    {
        javax.xml.stream.XMLEventReader r2;
        java.lang.IllegalStateException $r4, $r6;
        org.springframework.util.xml.StaxEventXMLReader r0;
        java.util.LinkedHashMap $r1;
        javax.xml.stream.events.XMLEvent $r3;
        javax.xml.stream.XMLStreamException $r5;
        java.lang.StringBuilder $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r2 := @parameter0: javax.xml.stream.XMLEventReader;

        specialinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.springframework.util.xml.StaxEventXMLReader: java.util.Map namespaces> = $r1;

        r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String xmlVersion> = "1.0";

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "\'reader\' must not be null");

     label1:
        $r3 = interfaceinvoke r2.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        if $r3 == null goto label3;

        $z0 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 != 0 goto label3;

        $z1 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z1 != 0 goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XMLEventReader not at start of document or element");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not read first element: ");

        $r8 = virtualinvoke $r5.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        r0.<org.springframework.util.xml.StaxEventXMLReader: javax.xml.stream.XMLEventReader reader> = r2;

        return;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label2;
    }

    protected void parseInternal() throws org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        javax.xml.stream.events.ProcessingInstruction $r9;
        javax.xml.stream.events.XMLEvent $r2;
        int i0, $i1, $i3;
        javax.xml.stream.events.EndElement $r10;
        javax.xml.stream.events.StartElement $r11;
        boolean $z0, $z1, z2, z3, $z4, z5, z6;
        javax.xml.stream.XMLEventReader $r1, $r12;
        javax.xml.stream.events.EntityDeclaration $r3;
        javax.xml.stream.events.NotationDeclaration $r4;
        javax.xml.stream.events.Comment $r7;
        javax.xml.stream.events.Characters $r8;
        javax.xml.stream.events.DTD $r5;
        javax.xml.stream.events.EntityReference $r6;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        z2 = 0;

        z6 = 0;

        z5 = 0;

        z3 = 0;

        i0 = 0;

        goto label14;

     label01:
        $r1 = r0.<org.springframework.util.xml.StaxEventXMLReader: javax.xml.stream.XMLEventReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $z0 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 != 0 goto label02;

        $z1 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isEndDocument()>();

        if $z1 != 0 goto label02;

        if z5 != 0 goto label02;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleStartDocument(javax.xml.stream.events.XMLEvent)>($r2);

        z2 = 1;

        z6 = 1;

        z5 = 1;

     label02:
        $i1 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label11;
            case 6: goto label07;
            case 7: goto label03;
            case 8: goto label08;
            case 9: goto label13;
            case 10: goto label14;
            case 11: goto label12;
            case 12: goto label07;
            case 13: goto label14;
            case 14: goto label09;
            case 15: goto label10;
            default: goto label14;
        };

     label03:
        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleStartDocument(javax.xml.stream.events.XMLEvent)>($r2);

        z2 = 1;

        z6 = 1;

        z5 = 1;

        goto label14;

     label04:
        i0 = i0 + 1;

        $r11 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleStartElement(javax.xml.stream.events.StartElement)>($r11);

        goto label14;

     label05:
        $i3 = (int) -1;

        i0 = i0 + $i3;

        if i0 < 0 goto label14;

        $r10 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleEndElement(javax.xml.stream.events.EndElement)>($r10);

        goto label14;

     label06:
        $r9 = (javax.xml.stream.events.ProcessingInstruction) $r2;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleProcessingInstruction(javax.xml.stream.events.ProcessingInstruction)>($r9);

        goto label14;

     label07:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleCharacters(javax.xml.stream.events.Characters)>($r8);

        goto label14;

     label08:
        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleEndDocument()>();

        z3 = 1;

        goto label14;

     label09:
        $r4 = (javax.xml.stream.events.NotationDeclaration) $r2;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleNotationDeclaration(javax.xml.stream.events.NotationDeclaration)>($r4);

        goto label14;

     label10:
        $r3 = (javax.xml.stream.events.EntityDeclaration) $r2;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleEntityDeclaration(javax.xml.stream.events.EntityDeclaration)>($r3);

        goto label14;

     label11:
        $r7 = (javax.xml.stream.events.Comment) $r2;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleComment(javax.xml.stream.events.Comment)>($r7);

        goto label14;

     label12:
        $r5 = (javax.xml.stream.events.DTD) $r2;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleDtd(javax.xml.stream.events.DTD)>($r5);

        goto label14;

     label13:
        $r6 = (javax.xml.stream.events.EntityReference) $r2;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleEntityReference(javax.xml.stream.events.EntityReference)>($r6);

     label14:
        $r12 = r0.<org.springframework.util.xml.StaxEventXMLReader: javax.xml.stream.XMLEventReader reader>;

        $z4 = interfaceinvoke $r12.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z4 == 0 goto label15;

        if i0 >= 0 goto label01;

     label15:
        if z6 == 0 goto label16;

        if z3 != 0 goto label16;

        specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void handleEndDocument()>();

     label16:
        return;
    }

    private void handleStartDocument(javax.xml.stream.events.XMLEvent) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r1;
        javax.xml.stream.events.XMLEvent r0;
        javax.xml.stream.events.StartDocument r8;
        javax.xml.stream.Location $r2;
        org.xml.sax.ContentHandler $r3, $r5, $r9;
        java.lang.String $r6, $r7;
        org.springframework.util.xml.StaxEventXMLReader$1 $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r0 := @parameter0: javax.xml.stream.events.XMLEvent;

        $z0 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 == 0 goto label2;

        r8 = (javax.xml.stream.events.StartDocument) r0;

        $r6 = interfaceinvoke r8.<javax.xml.stream.events.StartDocument: java.lang.String getVersion()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r6);

        if $z1 == 0 goto label1;

        r1.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String xmlVersion> = $r6;

     label1:
        $z2 = interfaceinvoke r8.<javax.xml.stream.events.StartDocument: boolean encodingSet()>();

        if $z2 == 0 goto label2;

        $r7 = interfaceinvoke r8.<javax.xml.stream.events.StartDocument: java.lang.String getCharacterEncodingScheme()>();

        r1.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String encoding> = $r7;

     label2:
        $r9 = virtualinvoke r1.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r9 == null goto label3;

        $r2 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        $r3 = virtualinvoke r1.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r4 = new org.springframework.util.xml.StaxEventXMLReader$1;

        specialinvoke $r4.<org.springframework.util.xml.StaxEventXMLReader$1: void <init>(org.springframework.util.xml.StaxEventXMLReader,javax.xml.stream.Location)>(r1, $r2);

        interfaceinvoke $r3.<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>($r4);

        $r5 = virtualinvoke r1.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startDocument()>();

     label3:
        return;
    }

    private void handleStartElement(javax.xml.stream.events.StartElement) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        javax.xml.stream.events.Attribute r22;
        org.xml.sax.Attributes $r6, $r20;
        org.xml.sax.ContentHandler $r1, $r4, $r16;
        javax.xml.stream.events.StartElement r2;
        java.lang.String $r5, $r9, $r10, $r14, $r15, $r17, $r18, $r19;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r7, $r11;
        javax.xml.stream.events.Namespace r21;
        java.lang.Object $r8, $r12;
        javax.xml.namespace.QName $r3, $r13;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r2 := @parameter0: javax.xml.stream.events.StartElement;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label6;

        $r3 = interfaceinvoke r2.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: boolean hasNamespacesFeature()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r2.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (javax.xml.stream.events.Namespace) $r8;

        $r9 = interfaceinvoke r21.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r10 = interfaceinvoke r21.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void startPrefixMapping(java.lang.String,java.lang.String)>($r9, $r10);

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r11 = interfaceinvoke r2.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

        goto label4;

     label3:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r22 = (javax.xml.stream.events.Attribute) $r12;

        $r13 = interfaceinvoke r22.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r14 = virtualinvoke $r13.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r15 = virtualinvoke $r13.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void startPrefixMapping(java.lang.String,java.lang.String)>($r14, $r15);

     label4:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        $r16 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r17 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r18 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r19 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        $r20 = specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.Attributes getAttributes(javax.xml.stream.events.StartElement)>(r2);

        interfaceinvoke $r16.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r17, $r18, $r19, $r20);

        goto label6;

     label5:
        $r4 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        $r6 = specialinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.Attributes getAttributes(javax.xml.stream.events.StartElement)>(r2);

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>("", "", $r5, $r6);

     label6:
        return;
    }

    private void handleCharacters(javax.xml.stream.events.Characters) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r3;
        org.xml.sax.ext.LexicalHandler $r5, $r6, $r8, $r9;
        int $i0, $i1;
        java.lang.String $r1;
        org.xml.sax.ContentHandler $r4, $r7, $r10, $r11;
        boolean $z0, $z1, $z2;
        javax.xml.stream.events.Characters r0;
        char[] $r2;

        r3 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r0 := @parameter0: javax.xml.stream.events.Characters;

        $r1 = interfaceinvoke r0.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r4 == null goto label1;

        $z2 = interfaceinvoke r0.<javax.xml.stream.events.Characters: boolean isIgnorableWhiteSpace()>();

        if $z2 == 0 goto label1;

        $r10 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $i1 = lengthof $r2;

        interfaceinvoke $r10.<org.xml.sax.ContentHandler: void ignorableWhitespace(char[],int,int)>($r2, 0, $i1);

        return;

     label1:
        $z0 = interfaceinvoke r0.<javax.xml.stream.events.Characters: boolean isCData()>();

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r8 == null goto label2;

        $r9 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r9.<org.xml.sax.ext.LexicalHandler: void startCDATA()>();

     label2:
        $r11 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r11 == null goto label3;

        $r7 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $i0 = lengthof $r2;

        interfaceinvoke $r7.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r2, 0, $i0);

     label3:
        $z1 = interfaceinvoke r0.<javax.xml.stream.events.Characters: boolean isCData()>();

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r5 == null goto label4;

        $r6 = virtualinvoke r3.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r6.<org.xml.sax.ext.LexicalHandler: void endCDATA()>();

     label4:
        return;
    }

    private void handleEndElement(javax.xml.stream.events.EndElement) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        javax.xml.stream.events.EndElement r2;
        org.xml.sax.ContentHandler $r1, $r4, $r6;
        java.lang.String $r5, $r7, $r8, $r9, $r13;
        boolean $z0, $z1;
        java.util.Iterator $r10;
        javax.xml.stream.events.Namespace r12;
        java.lang.Object $r11;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r2 := @parameter0: javax.xml.stream.events.EndElement;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label4;

        $r3 = interfaceinvoke r2.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: boolean hasNamespacesFeature()>();

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r7 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r7, $r8, $r9);

        $r10 = interfaceinvoke r2.<javax.xml.stream.events.EndElement: java.util.Iterator getNamespaces()>();

        goto label2;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (javax.xml.stream.events.Namespace) $r11;

        $r13 = interfaceinvoke r12.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: void endPrefixMapping(java.lang.String)>($r13);

     label2:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>("", "", $r5);

     label4:
        return;
    }

    private void handleEndDocument() throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        org.xml.sax.ContentHandler $r1, $r2;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void endDocument()>();

     label1:
        return;
    }

    private void handleNotationDeclaration(javax.xml.stream.events.NotationDeclaration) throws org.xml.sax.SAXException
    {
        org.xml.sax.DTDHandler $r1, $r2;
        org.springframework.util.xml.StaxEventXMLReader r0;
        java.lang.String $r4, $r5, $r6;
        javax.xml.stream.events.NotationDeclaration r3;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r3 := @parameter0: javax.xml.stream.events.NotationDeclaration;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.DTDHandler getDTDHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.DTDHandler getDTDHandler()>();

        $r4 = interfaceinvoke r3.<javax.xml.stream.events.NotationDeclaration: java.lang.String getName()>();

        $r5 = interfaceinvoke r3.<javax.xml.stream.events.NotationDeclaration: java.lang.String getPublicId()>();

        $r6 = interfaceinvoke r3.<javax.xml.stream.events.NotationDeclaration: java.lang.String getSystemId()>();

        interfaceinvoke $r2.<org.xml.sax.DTDHandler: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6);

     label1:
        return;
    }

    private void handleEntityDeclaration(javax.xml.stream.events.EntityDeclaration) throws org.xml.sax.SAXException
    {
        javax.xml.stream.events.EntityDeclaration r3;
        org.springframework.util.xml.StaxEventXMLReader r0;
        org.xml.sax.DTDHandler $r1, $r2;
        java.lang.String $r4, $r5, $r6, $r7;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r3 := @parameter0: javax.xml.stream.events.EntityDeclaration;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.DTDHandler getDTDHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.DTDHandler getDTDHandler()>();

        $r4 = interfaceinvoke r3.<javax.xml.stream.events.EntityDeclaration: java.lang.String getName()>();

        $r5 = interfaceinvoke r3.<javax.xml.stream.events.EntityDeclaration: java.lang.String getPublicId()>();

        $r6 = interfaceinvoke r3.<javax.xml.stream.events.EntityDeclaration: java.lang.String getSystemId()>();

        $r7 = interfaceinvoke r3.<javax.xml.stream.events.EntityDeclaration: java.lang.String getNotationName()>();

        interfaceinvoke $r2.<org.xml.sax.DTDHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, $r7);

     label1:
        return;
    }

    private void handleProcessingInstruction(javax.xml.stream.events.ProcessingInstruction) throws org.xml.sax.SAXException
    {
        javax.xml.stream.events.ProcessingInstruction r3;
        org.springframework.util.xml.StaxEventXMLReader r0;
        org.xml.sax.ContentHandler $r1, $r2;
        java.lang.String $r4, $r5;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r3 := @parameter0: javax.xml.stream.events.ProcessingInstruction;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r4 = interfaceinvoke r3.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getTarget()>();

        $r5 = interfaceinvoke r3.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getData()>();

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>($r4, $r5);

     label1:
        return;
    }

    private void handleComment(javax.xml.stream.events.Comment) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r1, $r5;
        javax.xml.stream.events.Comment r2;
        org.springframework.util.xml.StaxEventXMLReader r0;
        int $i0;
        char[] $r4;
        java.lang.String $r3;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r2 := @parameter0: javax.xml.stream.events.Comment;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r1 == null goto label1;

        $r3 = interfaceinvoke r2.<javax.xml.stream.events.Comment: java.lang.String getText()>();

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $r5 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $i0 = lengthof $r4;

        interfaceinvoke $r5.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r4, 0, $i0);

     label1:
        return;
    }

    private void handleDtd(javax.xml.stream.events.DTD) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        org.xml.sax.ext.LexicalHandler $r1, $r2, $r3, $r6;
        javax.xml.stream.Location $r5;
        java.lang.String $r7, $r8;
        javax.xml.stream.events.DTD r4;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r4 := @parameter0: javax.xml.stream.events.DTD;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r1 == null goto label1;

        $r5 = interfaceinvoke r4.<javax.xml.stream.events.DTD: javax.xml.stream.Location getLocation()>();

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r7 = interfaceinvoke $r5.<javax.xml.stream.Location: java.lang.String getPublicId()>();

        $r8 = interfaceinvoke $r5.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        interfaceinvoke $r6.<org.xml.sax.ext.LexicalHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)>(null, $r7, $r8);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endDTD()>();

     label2:
        return;
    }

    private void handleEntityReference(javax.xml.stream.events.EntityReference) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        org.xml.sax.ext.LexicalHandler $r1, $r2, $r3, $r6;
        java.lang.String $r5, $r7;
        javax.xml.stream.events.EntityReference r4;

        r0 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r4 := @parameter0: javax.xml.stream.events.EntityReference;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r1 == null goto label1;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r7 = interfaceinvoke r4.<javax.xml.stream.events.EntityReference: java.lang.String getName()>();

        interfaceinvoke $r6.<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>($r7);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.springframework.util.xml.StaxEventXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r5 = interfaceinvoke r4.<javax.xml.stream.events.EntityReference: java.lang.String getName()>();

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>($r5);

     label2:
        return;
    }

    private org.xml.sax.Attributes getAttributes(javax.xml.stream.events.StartElement)
    {
        org.springframework.util.xml.StaxEventXMLReader r7;
        javax.xml.stream.events.Attribute r16;
        javax.xml.stream.events.StartElement r1;
        java.lang.String $r5, $r6, $r8, $r9, $r12, $r13, r17, $r18, r19, r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.xml.sax.helpers.AttributesImpl $r0;
        java.util.Iterator $r2, $r10;
        javax.xml.stream.events.Namespace r20;
        java.lang.Object $r3, $r11;
        java.lang.StringBuilder $r14, $r15;
        javax.xml.namespace.QName $r4;

        r7 := @this: org.springframework.util.xml.StaxEventXMLReader;

        r1 := @parameter0: javax.xml.stream.events.StartElement;

        $r0 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r0.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        $r2 = interfaceinvoke r1.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

        goto label05;

     label01:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r16 = (javax.xml.stream.events.Attribute) $r3;

        $r4 = interfaceinvoke r16.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        r17 = $r5;

        if $r5 == null goto label02;

        $z0 = virtualinvoke r7.<org.springframework.util.xml.StaxEventXMLReader: boolean hasNamespacesFeature()>();

        if $z0 != 0 goto label03;

     label02:
        r17 = "";

     label03:
        $r18 = interfaceinvoke r16.<javax.xml.stream.events.Attribute: java.lang.String getDTDType()>();

        r19 = $r18;

        if $r18 != null goto label04;

        r19 = "CDATA";

     label04:
        $r6 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r8 = virtualinvoke r7.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r4);

        $r9 = interfaceinvoke r16.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        virtualinvoke $r0.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r17, $r6, $r8, r19, $r9);

     label05:
        $z3 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label01;

        $z1 = virtualinvoke r7.<org.springframework.util.xml.StaxEventXMLReader: boolean hasNamespacePrefixesFeature()>();

        if $z1 == 0 goto label10;

        $r10 = interfaceinvoke r1.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

        goto label09;

     label06:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r20 = (javax.xml.stream.events.Namespace) $r11;

        $r12 = interfaceinvoke r20.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r13 = interfaceinvoke r20.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r12);

        if $z2 == 0 goto label07;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("xmlns:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        r21 = "xmlns";

     label08:
        virtualinvoke $r0.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "", r21, "CDATA", $r13);

     label09:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label06;

     label10:
        return $r0;
    }

    static java.lang.String access$0(org.springframework.util.xml.StaxEventXMLReader)
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        java.lang.String $r1;

        r0 := @parameter0: org.springframework.util.xml.StaxEventXMLReader;

        $r1 = r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String xmlVersion>;

        return $r1;
    }

    static java.lang.String access$1(org.springframework.util.xml.StaxEventXMLReader)
    {
        org.springframework.util.xml.StaxEventXMLReader r0;
        java.lang.String $r1;

        r0 := @parameter0: org.springframework.util.xml.StaxEventXMLReader;

        $r1 = r0.<org.springframework.util.xml.StaxEventXMLReader: java.lang.String encoding>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.util.xml.StaxEventXMLReader: java.lang.String DEFAULT_XML_VERSION> = "1.0";

        return;
    }
}
