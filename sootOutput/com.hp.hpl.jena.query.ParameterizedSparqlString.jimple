public class com.hp.hpl.jena.query.ParameterizedSparqlString extends java.lang.Object implements com.hp.hpl.jena.shared.PrefixMapping
{
    private com.hp.hpl.jena.rdf.model.Model model;
    private java.lang.StringBuilder cmd;
    private java.lang.String baseUri;
    private java.util.Map params;
    private java.util.Map positionalParams;
    private com.hp.hpl.jena.shared.PrefixMapping prefixes;

    public void <init>(java.lang.String, com.hp.hpl.jena.query.QuerySolutionMap, java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.util.HashMap $r3, $r4;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.query.QuerySolutionMap r6;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.StringBuilder $r2, $r10;
        java.lang.String r5, r7, $r11;
        com.hp.hpl.jena.shared.PrefixMapping r8, $r9;
        boolean $z0;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r12;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: com.hp.hpl.jena.query.QuerySolutionMap;

        r7 := @parameter2: java.lang.String;

        r8 := @parameter3: com.hp.hpl.jena.shared.PrefixMapping;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model> = $r1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams> = $r4;

        if r5 == null goto label1;

        $r10 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParams(com.hp.hpl.jena.query.QuerySolutionMap)>(r6);

        if r7 == null goto label2;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label2;

        $r11 = r7;

        goto label3;

     label2:
        $r11 = null;

     label3:
        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri> = $r11;

        $r12 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r12.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes> = $r12;

        if r8 == null goto label4;

        $r9 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        interfaceinvoke $r9.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>(r8);

     label4:
        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.query.QuerySolutionMap, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r3;
        com.hp.hpl.jena.query.QuerySolutionMap r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.query.QuerySolutionMap;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, r2, r3, null);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.query.QuerySolutionMap, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.query.QuerySolutionMap r2;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.query.QuerySolutionMap;

        r3 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, r2, null, r3);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.query.QuerySolutionMap)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.query.QuerySolutionMap r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.query.QuerySolutionMap;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, r2, null, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, null, r2, r3);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, null, null, r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, null, r2, null);

        return;
    }

    public void <init>(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, null, null, null);

        return;
    }

    public void <init>(com.hp.hpl.jena.query.QuerySolutionMap, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.query.QuerySolutionMap r1;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.query.QuerySolutionMap;

        r2 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(null, r1, null, r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.query.QuerySolutionMap)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.query.QuerySolutionMap r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.query.QuerySolutionMap;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(null, r1, null, null);

        return;
    }

    public void <init>(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(null, null, null, r1);

        return;
    }

    public void <init>()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        specialinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>("", null, null, null);

        return;
    }

    public void setCommandText(java.lang.String)
    {
        java.lang.StringBuilder $r1, $r3;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd> = $r1;

        $r3 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        return;
    }

    public void append(java.lang.String)
    {
        java.lang.StringBuilder $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    public void append(char)
    {
        char c0;
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        c0 := @parameter0: char;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        return;
    }

    public void append(boolean)
    {
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        return;
    }

    public void append(double)
    {
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        double d0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        d0 := @parameter0: double;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        return;
    }

    public void append(float)
    {
        float f0;
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        f0 := @parameter0: float;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        return;
    }

    public void append(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        return;
    }

    public void append(long)
    {
        long l0;
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        l0 := @parameter0: long;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        return;
    }

    public void append(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.StringBuilder $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        return;
    }

    public void appendNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r0;
        java.lang.StringBuilder $r5;
        com.hp.hpl.jena.query.ParameterizedSparqlString r1;
        java.lang.String $r3, $r6;
        com.hp.hpl.jena.graph.Node r4;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r1 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r2 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>($r2);

        $r3 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri>;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void setBaseIRI(java.lang.String)>($r3);

        $r5 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r4, $r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return;
    }

    public void appendNode(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.rdf.model.RDFNode r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r2);

        return;
    }

    public void appendIri(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r2);

        return;
    }

    public void appendIri(org.apache.jena.iri.IRI)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r2;
        com.hp.hpl.jena.graph.Node $r3;
        org.apache.jena.iri.IRI r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: org.apache.jena.iri.IRI;

        $r2 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r2);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r3);

        return;
    }

    public void appendLiteral(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r1, null, null);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r2);

        return;
    }

    public void appendLiteral(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r3);

        return;
    }

    public void appendLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.graph.Node $r4;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String getURI()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r1, null, $r3);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r4);

        return;
    }

    public void appendLiteral(boolean)
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(boolean)>(z0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r2);

        return;
    }

    public void appendLiteral(int)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>(i0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r1);

        return;
    }

    public void appendLiteral(long)
    {
        long l0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        l0 := @parameter0: long;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(long)>(l0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.graph.Node)>($r1);

        return;
    }

    public void appendLiteral(float)
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        float f0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        f0 := @parameter0: float;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(float)>(f0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r2);

        return;
    }

    public void appendLiteral(double)
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r2;
        double d0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        d0 := @parameter0: double;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(double)>(d0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r2);

        return;
    }

    public void appendLiteral(java.util.Calendar)
    {
        java.util.Calendar r1;
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.util.Calendar;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(java.util.Calendar)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void appendNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r3);

        return;
    }

    public java.lang.String getCommandText()
    {
        java.lang.StringBuilder $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void setBaseUri(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri> = r1;

        return;
    }

    public java.lang.String getBaseUri()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri>;

        return $r1;
    }

    protected void validateParameterValue(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r3;
        com.hp.hpl.jena.sparql.ARQException $r2;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(">");

        if $z1 == 0 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("Value for the parameter contains a SPARQL injection risk");

        throw $r2;

     label1:
        return;
    }

    public void setParams(com.hp.hpl.jena.query.QuerySolutionMap)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.query.ParameterizedSparqlString r4;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.query.QuerySolutionMap r0;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r0 := @parameter0: com.hp.hpl.jena.query.QuerySolutionMap;

        if r0 == null goto label2;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Iterator varNames()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.query.QuerySolutionMap: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r3);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke r4.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r3, $r6);

        goto label1;

     label2:
        return;
    }

    public void setParam(int, com.hp.hpl.jena.graph.Node)
    {
        java.lang.IndexOutOfBoundsException $r6;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r1;
        java.lang.Integer $r3, $r5;
        java.util.Map $r2, $r4;
        int i0;

        r1 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label1:
        if r0 == null goto label2;

        virtualinvoke r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: void validateParameterValue(com.hp.hpl.jena.graph.Node)>(r0);

        $r4 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r0);

        goto label3;

     label2:
        $r2 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label3:
        return;
    }

    public void setParam(java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r1;
        java.lang.IllegalArgumentException $r4;
        java.util.Map $r2, $r3;
        java.lang.String r5;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r5 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("var cannot be null");

        throw $r4;

     label1:
        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("$");

        if $z1 == 0 goto label3;

     label2:
        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        if r0 == null goto label4;

        virtualinvoke r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: void validateParameterValue(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r0);

        goto label5;

     label4:
        $r2 = r1.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

     label5:
        return;
    }

    public void setParam(int, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r1;
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r2);

        return;
    }

    public void setParam(java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r3);

        return;
    }

    public void setIri(int, java.lang.String)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r2);

        return;
    }

    public void setIri(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r3);

        return;
    }

    public void setIri(int, org.apache.jena.iri.IRI)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r2;
        org.apache.jena.iri.IRI r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.jena.iri.IRI;

        $r2 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setIri(int,java.lang.String)>(i0, $r2);

        return;
    }

    public void setIri(java.lang.String, org.apache.jena.iri.IRI)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        org.apache.jena.iri.IRI r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.iri.IRI;

        $r3 = virtualinvoke r2.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setIri(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }

    public void setIri(int, java.net.URL)
    {
        java.net.URL r1;
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.URL;

        $r2 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setIri(int,java.lang.String)>(i0, $r2);

        return;
    }

    public void setIri(java.lang.String, java.net.URL)
    {
        java.net.URL r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.URL;

        $r3 = virtualinvoke r2.<java.net.URL: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setIri(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }

    public void setLiteral(int, com.hp.hpl.jena.rdf.model.Literal)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.rdf.model.Literal r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Literal;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r2);

        return;
    }

    public void setLiteral(java.lang.String, com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.rdf.model.Literal r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Literal;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r3);

        return;
    }

    public void setLiteral(int, java.lang.String)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r1, null, null);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r2);

        return;
    }

    public void setLiteral(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r2, null, null);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r3);

        return;
    }

    public void setLiteral(int, java.lang.String, java.lang.String)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r3);

        return;
    }

    public void setLiteral(java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2, r3;
        com.hp.hpl.jena.graph.Node $r4;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, null);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r4);

        return;
    }

    public void setLiteral(int, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        int i0;
        com.hp.hpl.jena.rdf.model.Model $r3;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r3 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r2);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.rdf.model.RDFNode)>(i0, $r4);

        return;
    }

    public void setLiteral(java.lang.String, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r3;
        com.hp.hpl.jena.rdf.model.Model $r4;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.rdf.model.Literal $r5;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r4 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, $r5);

        return;
    }

    public void setLiteral(int, boolean)
    {
        int i0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(boolean)>(z0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.rdf.model.RDFNode)>(i0, $r2);

        return;
    }

    public void setLiteral(java.lang.String, boolean)
    {
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.rdf.model.Literal $r3;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(boolean)>(z0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, $r3);

        return;
    }

    public void setLiteral(int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>(i1);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r1);

        return;
    }

    public void setLiteral(java.lang.String, int)
    {
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>(i0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r2);

        return;
    }

    public void setLiteral(int, long)
    {
        int i0;
        long l1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(long)>(l1);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r1);

        return;
    }

    public void setLiteral(java.lang.String, long)
    {
        long l0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(long)>(l0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r2);

        return;
    }

    public void setLiteral(int, float)
    {
        int i0;
        float f0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node floatToNode(float)>(f0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>(i0, $r1);

        return;
    }

    public void setLiteral(java.lang.String, float)
    {
        float f0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node floatToNode(float)>(f0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r1, $r2);

        return;
    }

    public void setLiteral(int, double)
    {
        int i0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r2;
        double d0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(double)>(d0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.rdf.model.RDFNode)>(i0, $r2);

        return;
    }

    public void setLiteral(java.lang.String, double)
    {
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.rdf.model.Literal $r3;
        double d0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(double)>(d0);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, $r3);

        return;
    }

    public void setLiteral(int, java.util.Calendar)
    {
        java.util.Calendar r1;
        int i0;
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.rdf.model.Literal $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Calendar;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(java.util.Calendar)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.rdf.model.RDFNode)>(i0, $r3);

        return;
    }

    public void setLiteral(java.lang.String, java.util.Calendar)
    {
        java.util.Calendar r2;
        com.hp.hpl.jena.rdf.model.Model $r3;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Calendar;

        $r3 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.rdf.model.Model model>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(java.util.Calendar)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, $r4);

        return;
    }

    public com.hp.hpl.jena.graph.Node getParam(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r4;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.graph.Node) $r3;

        return $r4;
    }

    public com.hp.hpl.jena.graph.Node getParam(int)
    {
        java.util.Map $r1;
        int i0;
        java.lang.Object $r3;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node $r4;
        java.lang.Integer $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (com.hp.hpl.jena.graph.Node) $r3;

        return $r4;
    }

    public java.util.Iterator getVars()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Map getVariableParameters()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Map getPositionalParameters()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Iterator getEligiblePositionalParameters()
    {
        java.util.Iterator $r6;
        com.hp.hpl.jena.query.ParameterizedSparqlString r2;
        java.lang.Integer $r7;
        java.util.ArrayList $r1;
        java.util.regex.Matcher $r5;
        int i0;
        java.lang.StringBuilder $r3;
        java.util.regex.Pattern $r0;
        java.lang.String $r4;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\?)[\\s;,.]");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        $r3 = r2.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

     label1:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r6 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r6;
    }

    public void clearParam(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void clearParam(int)
    {
        java.util.Map $r1;
        int i0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.Integer $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    public void clearParams()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return;
    }

    protected void validateSafeToInject(java.lang.String, java.lang.String, com.hp.hpl.jena.graph.Node) throws com.hp.hpl.jena.sparql.ARQException
    {
        java.util.regex.MatchResult $r20;
        com.hp.hpl.jena.query.ParameterizedSparqlString r11;
        com.hp.hpl.jena.graph.Node r21;
        java.util.regex.Matcher $r10, $r19;
        com.hp.hpl.jena.sparql.ARQException $r22, $r28;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r13, $r14, $r15, $r16, $r23, $r24, $r25, $r26, $r29, $r30, $r31, $r32;
        java.util.regex.Pattern $r8, $r18;
        int $i0, $i1;
        java.lang.String r2, $r7, r9, $r17, $r27, $r33;
        com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo $r12;

        r11 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r9 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r21 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"[?$]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"|\'[?$]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r7);

        $r10 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r9);

        $z0 = virtualinvoke $r10.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r21.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z3 == 0 goto label1;

        $r28 = new com.hp.hpl.jena.sparql.ARQException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command string is vunerable to injection attack, variable ?");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears surrounded directly by quotes and is bound to a literal which provides a SPARQL injection attack vector");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label1:
        $r12 = virtualinvoke r11.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo findDelimiters(java.lang.String)>(r9);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([?$]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")([^\\w]|$)");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r9);

     label2:
        $z4 = virtualinvoke $r19.<java.util.regex.Matcher: boolean find()>();

        if $z4 == 0 goto label4;

        $r20 = virtualinvoke $r19.<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>();

        $z1 = virtualinvoke r21.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label3;

        $i0 = interfaceinvoke $r20.<java.util.regex.MatchResult: int start(int)>(1);

        $i1 = interfaceinvoke $r20.<java.util.regex.MatchResult: int end(int)>(1);

        $z2 = virtualinvoke $r12.<com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo: boolean isInsideLiteral(int,int)>($i0, $i1);

        if $z2 == 0 goto label3;

        $r22 = new com.hp.hpl.jena.sparql.ARQException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command string is vunerable to injection attack, variable ?");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears inside of a literal and is bound to a literal which provides a SPARQL injection attack vector");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label3:
        goto label2;

     label4:
        return;
    }

    protected void validateSafeToInject(java.lang.String, int, int, com.hp.hpl.jena.graph.Node) throws com.hp.hpl.jena.sparql.ARQException
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo $r2;
        int i0, i1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r1, $r9;
        com.hp.hpl.jena.sparql.ARQException $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo findDelimiters(java.lang.String)>(r1);

        $z0 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo: boolean isInsideLiteral(int,int)>(i0, i0);

        if $z1 == 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.ARQException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command string is vunerable to injection attack, a positional paramter (index ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") appears inside of a literal and is bound to a literal which provides a SPARQL injection attack vector");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    protected final com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo findDelimiters(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo $r0;
        com.hp.hpl.jena.query.ParameterizedSparqlString r1;
        java.lang.String r2;

        r1 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r2 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo;

        specialinvoke $r0.<com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo: void <init>(com.hp.hpl.jena.query.ParameterizedSparqlString,com.hp.hpl.jena.query.ParameterizedSparqlString$1)>(r1, null);

        virtualinvoke $r0.<com.hp.hpl.jena.query.ParameterizedSparqlString$DelimiterInfo: void parseFrom(java.lang.String)>(r2);

        return $r0;
    }

    protected final java.lang.String stringForNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext r1;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2, r4;
        com.hp.hpl.jena.query.ParameterizedSparqlString r3;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1);

        r4 = $r2;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'");

        if $z1 == 0 goto label1;

        r4 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\'", "\\\'");

     label1:
        return r4;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node r52, r53;
        java.lang.Integer $r25;
        java.util.regex.Matcher $r9, $r43;
        java.util.Map $r5, $r13, $r24, $r35;
        java.util.Set $r6, $r14;
        java.lang.StringBuilder $r1, $r30, $r31, $r33, $r38, $r39, $r40, $r47, $r48, $r56, $r57, $r58, $r59;
        java.lang.String $r4, $r11, $r16, $r19, $r20, $r21, $r22, $r27, $r29, $r32, $r41, $r45, $r46, $r49, r50, r51, r54;
        java.util.regex.MatchResult $r23;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern $r8, $r42;
        com.hp.hpl.jena.shared.PrefixMapping $r3, $r12, $r18;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i12;
        java.util.Iterator $r7, $r15;
        java.lang.Object $r17, $r26, $r34, $r36;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        r50 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r3 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        specialinvoke $r55.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>($r3);

        $r4 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri>;

        virtualinvoke $r55.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void setBaseIRI(java.lang.String)>($r4);

        $r5 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r34 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.lang.String) $r34;

        $r35 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map params>;

        $r36 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r51);

        r52 = (com.hp.hpl.jena.graph.Node) $r36;

        if r52 != null goto label2;

        goto label1;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void validateSafeToInject(java.lang.String,java.lang.String,com.hp.hpl.jena.graph.Node)>(r50, r51, r52);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([?$]");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")([^\\w]|$)");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r50);

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r52, $r55);

        $r46 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r45);

        $r47 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$2");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        r50 = virtualinvoke $r43.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r49);

        goto label1;

     label3:
        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\?)[\\s;,.]");

        $i12 = (int) -1;

        i9 = $i12;

        i10 = 0;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r50);

     label4:
        $z1 = virtualinvoke $r9.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label6;

        i9 = i9 + 1;

        $r23 = virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>();

        $r24 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r26 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        r53 = (com.hp.hpl.jena.graph.Node) $r26;

        if r53 != null goto label5;

        goto label4;

     label5:
        $i0 = interfaceinvoke $r23.<java.util.regex.MatchResult: int start(int)>(1);

        $i1 = $i0 + i10;

        virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: void validateSafeToInject(java.lang.String,int,int,com.hp.hpl.jena.graph.Node)>(r50, i9, $i1, r53);

        $r27 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r53, $r55);

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $i2 = interfaceinvoke $r23.<java.util.regex.MatchResult: int start()>();

        $i3 = $i2 + i10;

        $r29 = virtualinvoke r50.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r30 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $i4 = interfaceinvoke $r23.<java.util.regex.MatchResult: int start()>();

        $i5 = $i4 + i10;

        $i6 = $i5 + 1;

        $r32 = virtualinvoke r50.<java.lang.String: java.lang.String substring(int)>($i6);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        r50 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = virtualinvoke $r27.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        i10 = i10 + $i8;

        goto label4;

     label6:
        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri>;

        if $r11 == null goto label7;

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BASE ");

        $r21 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri>;

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>($r21, null, null);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label7:
        $r12 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.shared.PrefixMapping: java.util.Map getNsPrefixMap()>();

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.lang.String) $r17;

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PREFIX ");

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r18 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r19 = interfaceinvoke $r18.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String getNsPrefixURI(java.lang.String)>(r54);

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>($r19, null, null);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label8;

     label9:
        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        $r16 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public com.hp.hpl.jena.query.Query asQuery() throws com.hp.hpl.jena.query.QueryException
    {
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String toString()>();

        $r2 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.update.UpdateRequest asUpdate()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String $r1;
        com.hp.hpl.jena.update.UpdateRequest $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String toString()>();

        $r2 = staticinvoke <com.hp.hpl.jena.update.UpdateFactory: com.hp.hpl.jena.update.UpdateRequest create(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.query.ParameterizedSparqlString copy()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0, $r1;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.query.ParameterizedSparqlString copy(boolean,boolean,boolean)>(1, 1, 1);

        return $r1;
    }

    public com.hp.hpl.jena.query.ParameterizedSparqlString copy(boolean)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0, $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.query.ParameterizedSparqlString copy(boolean,boolean,boolean)>(z0, 1, 1);

        return $r1;
    }

    public com.hp.hpl.jena.query.ParameterizedSparqlString copy(boolean, boolean, boolean)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0, $r14;
        com.hp.hpl.jena.graph.Node $r11, $r13;
        java.lang.Integer $r9;
        java.util.Map $r3;
        int $i0;
        java.lang.String $r15, $r16, r18;
        boolean z0, z1, z2, $z3, $z4;
        java.util.Map$Entry r7;
        java.util.Iterator $r2, $r5;
        java.util.Set $r4;
        java.lang.StringBuilder $r1;
        java.lang.Object $r6, $r8, $r10, $r12;
        com.hp.hpl.jena.shared.PrefixMapping $r17;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        z2 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r14 = new com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.StringBuilder cmd>;

        $r15 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label1;

        $r16 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.lang.String baseUri>;

        goto label2;

     label1:
        $r16 = null;

     label2:
        if z1 == 0 goto label3;

        $r17 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        goto label4;

     label3:
        $r17 = null;

     label4:
        specialinvoke $r14.<com.hp.hpl.jena.query.ParameterizedSparqlString: void <init>(java.lang.String,com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>($r15, null, $r16, $r17);

        if z2 == 0 goto label8;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Iterator getVars()>();

     label5:
        $z3 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r12 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r12;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.graph.Node getParam(java.lang.String)>(r18);

        virtualinvoke $r14.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(java.lang.String,com.hp.hpl.jena.graph.Node)>(r18, $r13);

        goto label5;

     label6:
        $r3 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: java.util.Map positionalParams>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.hp.hpl.jena.graph.Node) $r10;

        virtualinvoke $r14.<com.hp.hpl.jena.query.ParameterizedSparqlString: void setParam(int,com.hp.hpl.jena.graph.Node)>($i0, $r11);

        goto label7;

     label8:
        return $r14;
    }

    public com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.shared.PrefixMapping $r3, $r4;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.shared.PrefixMapping removeNsPrefix(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2, $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping removeNsPrefix(java.lang.String)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(java.util.Map)
    {
        java.util.Map r1;
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping $r2, $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(java.util.Map)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.shared.PrefixMapping withDefaultMappings(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping withDefaultMappings(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        return $r3;
    }

    public java.lang.String getNsPrefixURI(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String getNsPrefixURI(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String getNsURIPrefix(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String getNsURIPrefix(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Map getNsPrefixMap()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: java.util.Map getNsPrefixMap()>();

        return $r2;
    }

    public java.lang.String expandPrefix(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String expandPrefix(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String shortForm(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String shortForm(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String qnameFor(java.lang.String)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String qnameFor(java.lang.String)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.shared.PrefixMapping lock()
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1, $r2;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        $r1 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping lock()>();

        return $r2;
    }

    public boolean samePrefixMappingAs(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.ParameterizedSparqlString r0;
        com.hp.hpl.jena.shared.PrefixMapping r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.ParameterizedSparqlString;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = r0.<com.hp.hpl.jena.query.ParameterizedSparqlString: com.hp.hpl.jena.shared.PrefixMapping prefixes>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: boolean samePrefixMappingAs(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        return $z0;
    }
}
