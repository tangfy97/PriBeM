public class com.hp.hpl.jena.sparql.modify.UsingUpdateSink extends java.lang.Object implements com.hp.hpl.jena.sparql.modify.UpdateSink
{
    private final com.hp.hpl.jena.sparql.modify.UpdateSink sink;
    private final com.hp.hpl.jena.sparql.modify.UsingList usingList;

    public void <init>(com.hp.hpl.jena.sparql.modify.UpdateSink, com.hp.hpl.jena.sparql.modify.UsingList)
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink r1;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;
        com.hp.hpl.jena.sparql.modify.UsingList r2;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.UpdateSink;

        r2 := @parameter1: com.hp.hpl.jena.sparql.modify.UsingList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink> = r1;

        r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UsingList usingList> = r2;

        return;
    }

    public void send(com.hp.hpl.jena.update.Update)
    {
        com.hp.hpl.jena.update.UpdateException $r16;
        com.hp.hpl.jena.graph.Node $r7, r17, r18;
        int $i0, $i1;
        com.hp.hpl.jena.update.Update r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r10, $r13;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;
        com.hp.hpl.jena.sparql.modify.UsingList $r1, $r3, $r8, $r11;
        com.hp.hpl.jena.sparql.modify.UpdateSink $r19;
        java.util.List $r5, $r6, $r9, $r12;
        com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing r4;
        java.lang.Object $r14, $r15;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        r2 := @parameter0: com.hp.hpl.jena.update.Update;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UsingList usingList>;

        if null == $r1 goto label6;

        $r3 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UsingList usingList>;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.modify.UsingList: boolean usingIsPresent()>();

        if $z0 == 0 goto label6;

        $z1 = r2 instanceof com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing;

        if $z1 == 0 goto label6;

        r4 = (com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing) r2;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing: java.util.List getUsing()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing: java.util.List getUsingNamed()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 != 0 goto label1;

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing: com.hp.hpl.jena.graph.Node getWithIRI()>();

        if $r7 == null goto label2;

     label1:
        $r16 = new com.hp.hpl.jena.update.UpdateException;

        specialinvoke $r16.<com.hp.hpl.jena.update.UpdateException: void <init>(java.lang.String)>("SPARQL Update: Protocol using-graph-uri or using-named-graph-uri present where update request has USING, USING NAMED or WITH");

        throw $r16;

     label2:
        $r8 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UsingList usingList>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List getUsing()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.hp.hpl.jena.graph.Node) $r15;

        virtualinvoke r4.<com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing: void addUsing(com.hp.hpl.jena.graph.Node)>(r17);

        goto label3;

     label4:
        $r11 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UsingList usingList>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List getUsingNamed()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.hp.hpl.jena.graph.Node) $r14;

        virtualinvoke r4.<com.hp.hpl.jena.sparql.modify.request.UpdateWithUsing: void addUsingNamed(com.hp.hpl.jena.graph.Node)>(r18);

        goto label5;

     label6:
        $r19 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        interfaceinvoke $r19.<com.hp.hpl.jena.sparql.modify.UpdateSink: void send(java.lang.Object)>(r2);

        return;
    }

    public com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createInsertDataSink()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink $r2;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createInsertDataSink()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createDeleteDataSink()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink $r2;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink createDeleteDataSink()>();

        return $r2;
    }

    public void flush()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: void flush()>();

        return;
    }

    public void close()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: void close()>();

        return;
    }

    public com.hp.hpl.jena.sparql.core.Prologue getPrologue()
    {
        com.hp.hpl.jena.sparql.modify.UpdateSink $r1;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;
        com.hp.hpl.jena.sparql.core.Prologue $r2;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: com.hp.hpl.jena.sparql.modify.UpdateSink sink>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.modify.UpdateSink: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        return $r2;
    }

    public volatile void send(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.update.Update $r2;
        com.hp.hpl.jena.sparql.modify.UsingUpdateSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingUpdateSink;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.update.Update) r1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.UsingUpdateSink: void send(com.hp.hpl.jena.update.Update)>($r2);

        return;
    }
}
