public class ucar.nc2.dataset.transform.PolarStereographic extends ucar.nc2.dataset.transform.AbstractCoordTransBuilder
{

    public void <init>()
    {
        ucar.nc2.dataset.transform.PolarStereographic r0;

        r0 := @this: ucar.nc2.dataset.transform.PolarStereographic;

        specialinvoke r0.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: void <init>()>();

        return;
    }

    public java.lang.String getTransformName()
    {
        ucar.nc2.dataset.transform.PolarStereographic r0;

        r0 := @this: ucar.nc2.dataset.transform.PolarStereographic;

        return "polar_stereographic";
    }

    public ucar.nc2.dataset.TransformType getTransformType()
    {
        ucar.nc2.dataset.transform.PolarStereographic r1;
        ucar.nc2.dataset.TransformType $r0;

        r1 := @this: ucar.nc2.dataset.transform.PolarStereographic;

        $r0 = <ucar.nc2.dataset.TransformType: ucar.nc2.dataset.TransformType Projection>;

        return $r0;
    }

    public ucar.nc2.dataset.CoordinateTransform makeCoordinateTransform(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.unidata.geoloc.ProjectionImpl r7;
        byte $b0, $b1, $b2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.unidata.geoloc.projection.Stereographic $r3;
        ucar.nc2.Variable r1;
        ucar.unidata.geoloc.Earth $r4;
        java.lang.String $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, $d11, d12, $d13, d14, $d15, $d16, $d17, $d18, $d19, $d20;
        ucar.nc2.dataset.ProjectionCT $r8;
        java.lang.IllegalArgumentException $r6;
        ucar.unidata.geoloc.projection.proj4.StereographicAzimuthalProjection $r5;
        ucar.nc2.dataset.transform.PolarStereographic r0;
        ucar.nc2.dataset.NetcdfDataset r2;

        r0 := @this: ucar.nc2.dataset.transform.PolarStereographic;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: ucar.nc2.Variable;

        $d0 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "straight_vertical_longitude_from_pole", #NaN);

        d9 = $d0;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        d9 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "longitude_of_projection_origin", #NaN);

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d9);

        if $z1 == 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No longitude parameter");

        throw $r6;

     label2:
        $d1 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "latitude_of_projection_origin", 90.0);

        $d2 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "scale_factor_at_projection_origin", #NaN);

        d10 = $d2;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z2 == 0 goto label4;

        $d4 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "standard_parallel", #NaN);

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        if $z4 != 0 goto label3;

        $d5 = staticinvoke <java.lang.Math: double toRadians(double)>($d4);

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d8 = 1.0 + $d7;

        d10 = $d8 / 2.0;

        goto label4;

     label3:
        d10 = 1.0;

     label4:
        $d11 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "false_easting", 0.0);

        d12 = $d11;

        $d13 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "false_northing", 0.0);

        d14 = $d13;

        $b2 = $d11 cmpl 0.0;

        if $b2 != 0 goto label5;

        $b1 = $d13 cmpl 0.0;

        if $b1 == 0 goto label6;

     label5:
        $d3 = staticinvoke <ucar.nc2.dataset.transform.PolarStereographic: double getFalseEastingScaleFactor(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Variable)>(r2, r1);

        d12 = $d11 * $d3;

        d14 = $d13 * $d3;

     label6:
        $d15 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "earth_radius", $d15);

        $d16 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "semi_major_axis", #NaN);

        $d17 = $d16 * 0.001;

        $d18 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "semi_minor_axis", #NaN);

        $d19 = $d18 * 0.001;

        $d20 = virtualinvoke r0.<ucar.nc2.dataset.transform.PolarStereographic: double readAttributeDouble(ucar.nc2.Variable,java.lang.String,double)>(r1, "inverse_flattening", 0.0);

        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d17);

        if $z5 != 0 goto label8;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d19);

        if $z3 == 0 goto label7;

        $b0 = $d20 cmpl 0.0;

        if $b0 == 0 goto label8;

     label7:
        $r4 = new ucar.unidata.geoloc.Earth;

        specialinvoke $r4.<ucar.unidata.geoloc.Earth: void <init>(double,double,double)>($d17, $d19, $d20);

        $r5 = new ucar.unidata.geoloc.projection.proj4.StereographicAzimuthalProjection;

        specialinvoke $r5.<ucar.unidata.geoloc.projection.proj4.StereographicAzimuthalProjection: void <init>(double,double,double,double,double,double,ucar.unidata.geoloc.Earth)>($d1, d9, d10, 90.0, d12, d14, $r4);

        r7 = $r5;

        goto label9;

     label8:
        $r3 = new ucar.unidata.geoloc.projection.Stereographic;

        specialinvoke $r3.<ucar.unidata.geoloc.projection.Stereographic: void <init>(double,double,double,double,double)>($d1, d9, d10, d12, d14);

        r7 = $r3;

     label9:
        $r8 = new ucar.nc2.dataset.ProjectionCT;

        $r9 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        specialinvoke $r8.<ucar.nc2.dataset.ProjectionCT: void <init>(java.lang.String,java.lang.String,ucar.unidata.geoloc.ProjectionImpl)>($r9, "FGDC", r7);

        return $r8;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r1;
        java.lang.Object[] $r0;
        java.lang.Double $r2, $r3;
        java.lang.String[] r4;
        double $d0, $d1, $d2, $d3, d4;

        r4 := @parameter0: java.lang.String[];

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>(70.0);

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d3 = 1.0 + $d2;

        d4 = $d3 / 2.0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(70.0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        $r0[1] = $r3;

        virtualinvoke $r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("stdpar = %f has scale = %f %n", $r0);

        return;
    }
}
