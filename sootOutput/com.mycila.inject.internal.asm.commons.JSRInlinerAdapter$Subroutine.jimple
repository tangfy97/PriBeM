public class com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine extends java.lang.Object
{
    public final java.util.BitSet instructions;

    protected void <init>()
    {
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine r0;
        java.util.BitSet $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.BitSet;

        specialinvoke $r1.<java.util.BitSet: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions> = $r1;

        return;
    }

    public void addInstruction(int)
    {
        int i0;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine r0;
        java.util.BitSet $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(i0);

        return;
    }

    public boolean ownsInstruction(int)
    {
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine r0;
        int i0;
        java.util.BitSet $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>(i0);

        return $z0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine r2;
        java.lang.StringBuffer $r0, $r1, $r4;
        java.util.BitSet $r3;
        java.lang.String $r5;

        r2 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Subroutine: ");

        $r3 = r2.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
