public class com.hp.hpl.jena.sparql.core.BasicPattern extends java.lang.Object implements java.lang.Iterable
{
    private java.util.List triples;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>(java.util.List)>($r1);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern r0, r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $r2 = r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    private void <init>(java.util.List)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.List r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples> = r1;

        return;
    }

    public static com.hp.hpl.jena.sparql.core.BasicPattern wrap(java.util.List)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r0;
        java.util.List r1;

        r1 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.List $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAll(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern r0, r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r3 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $r2 = r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public void add(int, com.hp.hpl.jena.graph.Triple)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        int i0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        return;
    }

    public com.hp.hpl.jena.graph.Triple get(int)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        int i0;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Triple $r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        return $r3;
    }

    public java.util.Iterator iterator()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public int size()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public java.util.List getList()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        return $r1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r3, $r4;
        com.hp.hpl.jena.sparql.core.BasicPattern r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.core.BasicPattern;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.core.BasicPattern) r1;

        $r4 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $r3 = r2.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public boolean equiv(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0, r2;
        com.hp.hpl.jena.graph.Triple $r5, $r6;
        java.util.List $r1, $r3, $r4;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r7 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: com.hp.hpl.jena.graph.Triple get(int)>(i3);

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.BasicPattern: com.hp.hpl.jena.graph.Triple get(int)>(i3);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean tripleIso(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r5, $r6, r7);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;
        com.hp.hpl.jena.sparql.core.BasicPattern r3;
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        com.hp.hpl.jena.graph.Triple r8;
        java.util.List $r4;
        java.lang.Object $r7;
        java.lang.String $r6;
        com.hp.hpl.jena.shared.PrefixMapping $r1;
        boolean $z0, z1;

        r3 := @this: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        $r1 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapWrite>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        z1 = 1;

        $r4 = r3.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List triples>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        if z1 != 0 goto label2;

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void print(java.lang.String)>("\n");

        goto label3;

     label2:
        z1 = 0;

     label3:
        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void print(java.lang.String)>("(");

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterNode: void outputPlain(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r0, r8, $r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void print(java.lang.String)>(")");

        goto label1;

     label4:
        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void flush()>();

        $r6 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r6;
    }
}
