class com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1 extends com.mycila.inject.internal.cglib.core.CodeEmitter
{
    private com.mycila.inject.internal.cglib.core.Block handler;
    private final com.mycila.inject.internal.asm.Type[] val$exceptions;
    private final com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer this$0;

    void <init>(com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer, com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1 r0;
        com.mycila.inject.internal.cglib.core.Block $r4;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.asm.Type[] r3;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1;

        r2 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter2: com.mycila.inject.internal.asm.Type[];

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer this$0> = r2;

        r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.asm.Type[] val$exceptions> = r3;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.cglib.core.Block begin_block()>();

        r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.cglib.core.Block handler> = $r4;

        return;
    }

    public void visitMaxs(int, int)
    {
        com.mycila.inject.internal.cglib.core.Block $r1, $r3;
        com.mycila.inject.internal.asm.Type $r5;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1 r0;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer $r2;
        int i0, i1;
        com.mycila.inject.internal.asm.Type[] $r4;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.cglib.core.Block handler>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.Block: void end()>();

        $r3 = r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.cglib.core.Block handler>;

        $r4 = r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.asm.Type[] val$exceptions>;

        $r2 = r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer this$0>;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: com.mycila.inject.internal.asm.Type access$000(com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer)>($r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void wrap_undeclared_throwable(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type[],com.mycila.inject.internal.asm.Type)>(r0, $r3, $r4, $r5);

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void visitMaxs(int,int)>(i0, i1);

        return;
    }
}
