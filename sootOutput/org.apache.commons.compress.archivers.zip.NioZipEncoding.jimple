class org.apache.commons.compress.archivers.zip.NioZipEncoding extends java.lang.Object implements org.apache.commons.compress.archivers.zip.ZipEncoding
{
    private final java.nio.charset.Charset charset;

    public void <init>(java.nio.charset.Charset)
    {
        java.nio.charset.Charset r1;
        org.apache.commons.compress.archivers.zip.NioZipEncoding r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.NioZipEncoding;

        r1 := @parameter0: java.nio.charset.Charset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.NioZipEncoding: java.nio.charset.Charset charset> = r1;

        return;
    }

    public boolean canEncode(java.lang.String)
    {
        java.nio.charset.Charset $r1;
        java.nio.charset.CharsetEncoder $r2;
        java.nio.charset.CodingErrorAction $r3, $r4;
        java.lang.String r5;
        org.apache.commons.compress.archivers.zip.NioZipEncoding r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.NioZipEncoding;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.NioZipEncoding: java.nio.charset.Charset charset>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r3);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        $z0 = virtualinvoke $r2.<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>(r5);

        return $z0;
    }

    public java.nio.ByteBuffer encode(java.lang.String)
    {
        java.nio.ByteBuffer r8;
        java.nio.charset.CoderResult $r7;
        java.nio.charset.Charset $r1;
        java.nio.charset.CodingErrorAction $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, i15, $i16;
        java.lang.String r5;
        org.apache.commons.compress.archivers.zip.NioZipEncoding r0;
        boolean $z0, $z1, $z2, $z3;
        java.nio.CharBuffer $r6;
        char $c10;
        java.nio.charset.CharsetEncoder $r2;

        r0 := @this: org.apache.commons.compress.archivers.zip.NioZipEncoding;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.NioZipEncoding: java.nio.charset.Charset charset>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r3);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r5);

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        $i2 = $i1 + 1;

        $i3 = $i2 / 2;

        $i4 = $i0 + $i3;

        r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

     label1:
        $i5 = virtualinvoke $r6.<java.nio.CharBuffer: int remaining()>();

        if $i5 <= 0 goto label9;

        $r7 = virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r6, r8, 1);

        $z0 = virtualinvoke $r7.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r7.<java.nio.charset.CoderResult: boolean isMalformed()>();

        if $z1 == 0 goto label6;

     label2:
        $i7 = virtualinvoke $r7.<java.nio.charset.CoderResult: int length()>();

        $i8 = $i7 * 6;

        $i9 = virtualinvoke r8.<java.nio.ByteBuffer: int remaining()>();

        if $i8 <= $i9 goto label3;

        $i11 = virtualinvoke r8.<java.nio.ByteBuffer: int position()>();

        $i12 = virtualinvoke $r7.<java.nio.charset.CoderResult: int length()>();

        $i13 = $i12 * 6;

        $i14 = $i11 + $i13;

        r8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: java.nio.ByteBuffer growBuffer(java.nio.ByteBuffer,int)>(r8, $i14);

     label3:
        i15 = 0;

     label4:
        $i16 = virtualinvoke $r7.<java.nio.charset.CoderResult: int length()>();

        if i15 >= $i16 goto label5;

        $c10 = virtualinvoke $r6.<java.nio.CharBuffer: char get()>();

        staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: void appendSurrogate(java.nio.ByteBuffer,char)>(r8, $c10);

        i15 = i15 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        $z2 = virtualinvoke $r7.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z2 == 0 goto label7;

        r8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: java.nio.ByteBuffer growBuffer(java.nio.ByteBuffer,int)>(r8, 0);

        goto label8;

     label7:
        $z3 = virtualinvoke $r7.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z3 == 0 goto label8;

        virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r8);

        goto label9;

     label8:
        goto label1;

     label9:
        $i6 = virtualinvoke r8.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r8.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i6);

        virtualinvoke r8.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r8;
    }

    public java.lang.String decode(byte[]) throws java.io.IOException
    {
        byte[] r7;
        java.nio.CharBuffer $r9;
        java.nio.charset.CharsetDecoder $r2, $r4, $r6;
        java.nio.ByteBuffer $r8;
        java.nio.charset.Charset $r1;
        java.nio.charset.CodingErrorAction $r3, $r5;
        java.lang.String $r10;
        org.apache.commons.compress.archivers.zip.NioZipEncoding r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.NioZipEncoding;

        r7 := @parameter0: byte[];

        $r1 = r0.<org.apache.commons.compress.archivers.zip.NioZipEncoding: java.nio.charset.Charset charset>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r4 = virtualinvoke $r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r3);

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r6 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r5);

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r7);

        $r9 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r8);

        $r10 = virtualinvoke $r9.<java.nio.CharBuffer: java.lang.String toString()>();

        return $r10;
    }
}
