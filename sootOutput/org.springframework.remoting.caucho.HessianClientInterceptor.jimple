public class org.springframework.remoting.caucho.HessianClientInterceptor extends org.springframework.remoting.support.UrlBasedRemoteAccessor implements org.aopalliance.intercept.MethodInterceptor
{
    private com.caucho.hessian.client.HessianProxyFactory proxyFactory;
    private java.lang.Object hessianProxy;

    public void <init>()
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.support.UrlBasedRemoteAccessor: void <init>()>();

        $r1 = new com.caucho.hessian.client.HessianProxyFactory;

        specialinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void <init>()>();

        r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory> = $r1;

        return;
    }

    public void setProxyFactory(com.caucho.hessian.client.HessianProxyFactory)
    {
        com.caucho.hessian.client.HessianProxyFactory r1, $r2;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r1 := @parameter0: com.caucho.hessian.client.HessianProxyFactory;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new com.caucho.hessian.client.HessianProxyFactory;

        specialinvoke $r2.<com.caucho.hessian.client.HessianProxyFactory: void <init>()>();

     label2:
        r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory> = $r2;

        return;
    }

    public void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)
    {
        com.caucho.hessian.client.HessianProxyFactory $r2;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        com.caucho.hessian.io.SerializerFactory r1;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r1 := @parameter0: com.caucho.hessian.io.SerializerFactory;

        $r2 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r2.<com.caucho.hessian.client.HessianProxyFactory: void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)>(r1);

        return;
    }

    public void setSendCollectionType(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        com.caucho.hessian.io.SerializerFactory $r2;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        $r2 = virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: com.caucho.hessian.io.SerializerFactory getSerializerFactory()>();

        virtualinvoke $r2.<com.caucho.hessian.io.SerializerFactory: void setSendCollectionType(boolean)>(z0);

        return;
    }

    public void setOverloadEnabled(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setOverloadEnabled(boolean)>(z0);

        return;
    }

    public void setUsername(java.lang.String)
    {
        com.caucho.hessian.client.HessianProxyFactory $r2;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r2.<com.caucho.hessian.client.HessianProxyFactory: void setUser(java.lang.String)>(r1);

        return;
    }

    public void setPassword(java.lang.String)
    {
        com.caucho.hessian.client.HessianProxyFactory $r2;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r2.<com.caucho.hessian.client.HessianProxyFactory: void setPassword(java.lang.String)>(r1);

        return;
    }

    public void setDebug(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setDebug(boolean)>(z0);

        return;
    }

    public void setChunkedPost(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setChunkedPost(boolean)>(z0);

        return;
    }

    public void setReadTimeout(long)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        long l0;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        l0 := @parameter0: long;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setReadTimeout(long)>(l0);

        return;
    }

    public void setHessian2(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1, $r2;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setHessian2Request(boolean)>(z0);

        $r2 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r2.<com.caucho.hessian.client.HessianProxyFactory: void setHessian2Reply(boolean)>(z0);

        return;
    }

    public void setHessian2Request(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setHessian2Request(boolean)>(z0);

        return;
    }

    public void setHessian2Reply(boolean)
    {
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        virtualinvoke $r1.<com.caucho.hessian.client.HessianProxyFactory: void setHessian2Reply(boolean)>(z0);

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.caucho.HessianClientInterceptor r0;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.support.UrlBasedRemoteAccessor: void afterPropertiesSet()>();

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: void prepare()>();

        return;
    }

    public void prepare() throws org.springframework.remoting.RemoteLookupFailureException
    {
        java.net.MalformedURLException $r3;
        com.caucho.hessian.client.HessianProxyFactory $r1;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        org.springframework.remoting.RemoteLookupFailureException $r4;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

     label1:
        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: com.caucho.hessian.client.HessianProxyFactory proxyFactory>;

        $r2 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.Object createHessianProxy(com.caucho.hessian.client.HessianProxyFactory)>($r1);

        r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.Object hessianProxy> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.springframework.remoting.RemoteLookupFailureException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Service URL [");

        $r6 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.String getServiceUrl()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is invalid");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

     label4:
        return;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    protected java.lang.Object createHessianProxy(com.caucho.hessian.client.HessianProxyFactory) throws java.net.MalformedURLException
    {
        com.caucho.hessian.client.HessianProxyFactory r2;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        java.lang.Class $r1, $r3;
        java.lang.Object $r5;
        java.lang.String $r4;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r2 := @parameter0: com.caucho.hessian.client.HessianProxyFactory;

        $r1 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.Class getServiceInterface()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "\'serviceInterface\' is required");

        $r3 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.Class getServiceInterface()>();

        $r4 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.String getServiceUrl()>();

        $r5 = virtualinvoke r2.<com.caucho.hessian.client.HessianProxyFactory: java.lang.Object create(java.lang.Class,java.lang.String)>($r3, $r4);

        return $r5;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.IllegalStateException $r8;
        org.springframework.remoting.caucho.HessianClientInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r3;
        org.springframework.remoting.RemoteProxyFailureException $r11;
        java.lang.reflect.Method $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.InvocationTargetException $r17, $r24;
        java.lang.StringBuilder $r12, $r14, $r15;
        java.lang.ClassLoader $r2;
        java.lang.Throwable $r9, $r10, $r18, $r19, $r21, r25, $r26;
        java.lang.Object[] $r6;
        org.springframework.remoting.RemoteAccessException $r20, $r22, $r23;
        java.lang.String $r13, $r16;
        java.lang.reflect.UndeclaredThrowableException r27;
        java.lang.Object $r1, $r5, $r7;

        r0 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r3 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.Object hessianProxy>;

        if $r1 != null goto label01;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("HessianClientInterceptor is not properly initialized - invoke \'prepare\' before attempting any operations");

        throw $r8;

     label01:
        $r2 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.ClassLoader overrideThreadContextClassLoader()>();

     label02:
        $r4 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r5 = r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.Object hessianProxy>;

        $r6 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r6);

     label03:
        virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: void resetThreadContextClassLoader(java.lang.ClassLoader)>($r2);

        return $r7;

     label04:
        $r17 := @caughtexception;

        $r18 = virtualinvoke $r17.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        r25 = $r18;

        $z0 = $r18 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label05;

        $r24 = (java.lang.reflect.InvocationTargetException) $r18;

        r25 = virtualinvoke $r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label05:
        $z1 = r25 instanceof com.caucho.hessian.client.HessianConnectionException;

        if $z1 == 0 goto label06;

        $r23 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: org.springframework.remoting.RemoteAccessException convertHessianAccessException(java.lang.Throwable)>(r25);

        throw $r23;

     label06:
        $z2 = r25 instanceof com.caucho.hessian.HessianException;

        if $z2 != 0 goto label07;

        $z3 = r25 instanceof com.caucho.hessian.client.HessianRuntimeException;

        if $z3 == 0 goto label10;

     label07:
        $r19 = virtualinvoke r25.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r19 == null goto label08;

        $r26 = $r19;

        goto label09;

     label08:
        $r26 = r25;

     label09:
        $r20 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: org.springframework.remoting.RemoteAccessException convertHessianAccessException(java.lang.Throwable)>($r26);

        throw $r20;

     label10:
        $z4 = r25 instanceof java.lang.reflect.UndeclaredThrowableException;

        if $z4 == 0 goto label11;

        r27 = (java.lang.reflect.UndeclaredThrowableException) r25;

        $r21 = virtualinvoke r27.<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()>();

        $r22 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: org.springframework.remoting.RemoteAccessException convertHessianAccessException(java.lang.Throwable)>($r21);

        throw $r22;

     label11:
        throw r25;

     label12:
        $r10 := @caughtexception;

        $r11 = new org.springframework.remoting.RemoteProxyFailureException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to invoke Hessian proxy for remote service [");

        $r13 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.String getServiceUrl()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.springframework.remoting.RemoteProxyFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

     label13:
        $r9 := @caughtexception;

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianClientInterceptor: void resetThreadContextClassLoader(java.lang.ClassLoader)>($r2);

        throw $r9;

        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label13 with label13;
    }

    protected org.springframework.remoting.RemoteAccessException convertHessianAccessException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.springframework.remoting.RemoteAccessException $r8;
        org.springframework.remoting.caucho.HessianClientInterceptor r3;
        org.springframework.remoting.RemoteConnectFailureException $r1;
        java.lang.String $r4, $r7, $r10, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r5, $r6, $r9, $r11, $r12;

        r3 := @this: org.springframework.remoting.caucho.HessianClientInterceptor;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof com.caucho.hessian.client.HessianConnectionException;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.net.ConnectException;

        if $z1 == 0 goto label2;

     label1:
        $r1 = new org.springframework.remoting.RemoteConnectFailureException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot connect to Hessian remote service at [");

        $r4 = virtualinvoke r3.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.String getServiceUrl()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.springframework.remoting.RemoteConnectFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r0);

        return $r1;

     label2:
        $r8 = new org.springframework.remoting.RemoteAccessException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot access Hessian remote service at [");

        $r10 = virtualinvoke r3.<org.springframework.remoting.caucho.HessianClientInterceptor: java.lang.String getServiceUrl()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r0);

        return $r8;
    }
}
