final class org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1 extends org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1 r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1)>(null);

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State nextState(int, char) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState $r14;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State $r1, $r9, $r10;
        java.lang.AssertionError $r13;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState $r15;
        int i1, $i2;
        java.lang.String $r7;
        boolean $z0;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r17;
        char c0;
        java.lang.StringBuilder $r4, $r5, $r6, $r16;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1 r12;

        r12 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1;

        i1 := @parameter0: int;

        c0 := @parameter1: char;

        $z0 = <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 == 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 40: goto label3;
            case 41: goto label4;
            case 42: goto label4;
            case 63: goto label4;
            case 92: goto label2;
            default: goto label5;
        };

     label2:
        $r14 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        $r1 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State access$100()>();

        specialinvoke $r14.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r1);

        return $r14;

     label3:
        $r15 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        $r9 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State access$100()>();

        specialinvoke $r15.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r9);

        return $r15;

     label4:
        $r17 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at position 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r7);

        throw $r17;

     label5:
        $r10 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State access$100()>();

        return $r10;
    }

    void endOfInput()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1 r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/experimental/schema/RegularExpressionChecker;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1: boolean $assertionsDisabled> = $z1;

        return;
    }
}
