public class org.codehaus.jackson.format.DataFormatDetector extends java.lang.Object
{
    public static final int DEFAULT_MAX_INPUT_LOOKAHEAD;
    protected final org.codehaus.jackson.JsonFactory[] _detectors;
    protected final org.codehaus.jackson.format.MatchStrength _optimalMatch;
    protected final org.codehaus.jackson.format.MatchStrength _minimalMatch;
    protected final int _maxInputLookahead;

    public transient void <init>(org.codehaus.jackson.JsonFactory[])
    {
        org.codehaus.jackson.format.MatchStrength $r2, $r3;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r1 := @parameter0: org.codehaus.jackson.JsonFactory[];

        $r3 = <org.codehaus.jackson.format.MatchStrength: org.codehaus.jackson.format.MatchStrength SOLID_MATCH>;

        $r2 = <org.codehaus.jackson.format.MatchStrength: org.codehaus.jackson.format.MatchStrength WEAK_MATCH>;

        specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>(r1, $r3, $r2, 64);

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection r1;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] $r2, $r4;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r2 = newarray (org.codehaus.jackson.JsonFactory)[$i0];

        $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (org.codehaus.jackson.JsonFactory[]) $r3;

        specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[])>($r4);

        return;
    }

    public org.codehaus.jackson.format.DataFormatDetector withOptimalMatch(org.codehaus.jackson.format.MatchStrength)
    {
        org.codehaus.jackson.format.MatchStrength r0, $r2, $r4;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r1, $r3;
        org.codehaus.jackson.JsonFactory[] $r5;

        r1 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r0 := @parameter0: org.codehaus.jackson.format.MatchStrength;

        $r2 = r1.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        if r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.codehaus.jackson.format.DataFormatDetector;

        $r5 = r1.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $r4 = r1.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        $i0 = r1.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        specialinvoke $r3.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r5, r0, $r4, $i0);

        return $r3;
    }

    public org.codehaus.jackson.format.DataFormatDetector withMinimalMatch(org.codehaus.jackson.format.MatchStrength)
    {
        org.codehaus.jackson.format.MatchStrength r0, $r2, $r4;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r1, $r3;
        org.codehaus.jackson.JsonFactory[] $r5;

        r1 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r0 := @parameter0: org.codehaus.jackson.format.MatchStrength;

        $r2 = r1.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        if r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.codehaus.jackson.format.DataFormatDetector;

        $r5 = r1.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $r4 = r1.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        $i0 = r1.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        specialinvoke $r3.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r5, $r4, r0, $i0);

        return $r3;
    }

    public org.codehaus.jackson.format.DataFormatDetector withMaxInputLookahead(int)
    {
        org.codehaus.jackson.format.MatchStrength $r2, $r3;
        int i0, $i1;
        org.codehaus.jackson.format.DataFormatDetector r0, $r1;
        org.codehaus.jackson.JsonFactory[] $r4;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        i0 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        if i0 != $i1 goto label1;

        return r0;

     label1:
        $r1 = new org.codehaus.jackson.format.DataFormatDetector;

        $r4 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $r3 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        $r2 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        specialinvoke $r1.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r4, $r3, $r2, i0);

        return $r1;
    }

    private void <init>(org.codehaus.jackson.JsonFactory[], org.codehaus.jackson.format.MatchStrength, org.codehaus.jackson.format.MatchStrength, int)
    {
        org.codehaus.jackson.format.MatchStrength r2, r3;
        int i0;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r1 := @parameter0: org.codehaus.jackson.JsonFactory[];

        r2 := @parameter1: org.codehaus.jackson.format.MatchStrength;

        r3 := @parameter2: org.codehaus.jackson.format.MatchStrength;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors> = r1;

        r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch> = r2;

        r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch> = r3;

        r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead> = i0;

        return;
    }

    public org.codehaus.jackson.format.DataFormatMatcher findFormat(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r3;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.format.DataFormatMatcher $r4;
        org.codehaus.jackson.format.InputAccessor$Std $r1;
        java.io.InputStream r2;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r2 := @parameter0: java.io.InputStream;

        $r1 = new org.codehaus.jackson.format.InputAccessor$Std;

        $i0 = r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        $r3 = newarray (byte)[$i0];

        specialinvoke $r1.<org.codehaus.jackson.format.InputAccessor$Std: void <init>(java.io.InputStream,byte[])>(r2, $r3);

        $r4 = specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.DataFormatMatcher _findFormat(org.codehaus.jackson.format.InputAccessor$Std)>($r1);

        return $r4;
    }

    public org.codehaus.jackson.format.DataFormatMatcher findFormat(byte[]) throws java.io.IOException
    {
        byte[] r2;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.format.DataFormatMatcher $r3;
        org.codehaus.jackson.format.InputAccessor$Std $r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r2 := @parameter0: byte[];

        $r1 = new org.codehaus.jackson.format.InputAccessor$Std;

        specialinvoke $r1.<org.codehaus.jackson.format.InputAccessor$Std: void <init>(byte[])>(r2);

        $r3 = specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.DataFormatMatcher _findFormat(org.codehaus.jackson.format.InputAccessor$Std)>($r1);

        return $r3;
    }

    private org.codehaus.jackson.format.DataFormatMatcher _findFormat(org.codehaus.jackson.format.InputAccessor$Std) throws java.io.IOException
    {
        org.codehaus.jackson.format.DataFormatMatcher $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.codehaus.jackson.JsonFactory[] r1;
        org.codehaus.jackson.format.MatchStrength $r5, $r6, $r7, r9;
        org.codehaus.jackson.format.InputAccessor$Std r2;
        org.codehaus.jackson.JsonFactory r4, r8;
        org.codehaus.jackson.format.DataFormatDetector r0;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        r2 := @parameter0: org.codehaus.jackson.format.InputAccessor$Std;

        r8 = null;

        r9 = null;

        r1 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        i0 = lengthof r1;

        i7 = 0;

     label1:
        if i7 >= i0 goto label5;

        r4 = r1[i7];

        virtualinvoke r2.<org.codehaus.jackson.format.InputAccessor$Std: void reset()>();

        $r5 = virtualinvoke r4.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.format.MatchStrength hasFormat(org.codehaus.jackson.format.InputAccessor)>(r2);

        if $r5 == null goto label4;

        $i1 = virtualinvoke $r5.<org.codehaus.jackson.format.MatchStrength: int ordinal()>();

        $r6 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        $i2 = virtualinvoke $r6.<org.codehaus.jackson.format.MatchStrength: int ordinal()>();

        if $i1 >= $i2 goto label2;

        goto label4;

     label2:
        if r8 == null goto label3;

        $i5 = virtualinvoke r9.<org.codehaus.jackson.format.MatchStrength: int ordinal()>();

        $i6 = virtualinvoke $r5.<org.codehaus.jackson.format.MatchStrength: int ordinal()>();

        if $i5 < $i6 goto label3;

        goto label4;

     label3:
        r8 = r4;

        r9 = $r5;

        $i3 = virtualinvoke $r5.<org.codehaus.jackson.format.MatchStrength: int ordinal()>();

        $r7 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        $i4 = virtualinvoke $r7.<org.codehaus.jackson.format.MatchStrength: int ordinal()>();

        if $i3 < $i4 goto label4;

        goto label5;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        $r3 = virtualinvoke r2.<org.codehaus.jackson.format.InputAccessor$Std: org.codehaus.jackson.format.DataFormatMatcher createMatcher(org.codehaus.jackson.JsonFactory,org.codehaus.jackson.format.MatchStrength)>(r8, r9);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.format.DataFormatDetector: int DEFAULT_MAX_INPUT_LOOKAHEAD> = 64;

        return;
    }
}
