public final class org.joda.time.Years extends org.joda.time.base.BaseSingleFieldPeriod
{
    public static final org.joda.time.Years ZERO;
    public static final org.joda.time.Years ONE;
    public static final org.joda.time.Years TWO;
    public static final org.joda.time.Years THREE;
    public static final org.joda.time.Years MAX_VALUE;
    public static final org.joda.time.Years MIN_VALUE;
    private static final org.joda.time.format.PeriodFormatter PARSER;
    private static final long serialVersionUID;

    public static org.joda.time.Years years(int)
    {
        org.joda.time.Years $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case -2147483648: goto label6;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 2147483647: goto label5;
            default: goto label7;
        };

     label1:
        $r4 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        return $r4;

     label2:
        $r3 = <org.joda.time.Years: org.joda.time.Years ONE>;

        return $r3;

     label3:
        $r2 = <org.joda.time.Years: org.joda.time.Years TWO>;

        return $r2;

     label4:
        $r1 = <org.joda.time.Years: org.joda.time.Years THREE>;

        return $r1;

     label5:
        $r0 = <org.joda.time.Years: org.joda.time.Years MAX_VALUE>;

        return $r0;

     label6:
        $r5 = <org.joda.time.Years: org.joda.time.Years MIN_VALUE>;

        return $r5;

     label7:
        $r6 = new org.joda.time.Years;

        specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0);

        return $r6;
    }

    public static org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.Years $r3;
        org.joda.time.DurationFieldType $r2;
        int $i0;
        org.joda.time.ReadableInstant r0, r1;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>(r0, r1, $r2);

        $r3 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r3;
    }

    public static org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        long $l1, $l2;
        org.joda.time.Years $r2, $r3, $r9;
        int $i0, $i3;
        boolean $z0, $z1;
        org.joda.time.DurationField $r6;
        org.joda.time.Chronology $r4, $r5;
        org.joda.time.LocalDate $r7, $r8;
        org.joda.time.ReadablePartial r0, r1;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        r1 := @parameter1: org.joda.time.ReadablePartial;

        $z0 = r0 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.joda.time.LocalDate;

        if $z1 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r4);

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $r7 = (org.joda.time.LocalDate) r1;

        $l1 = virtualinvoke $r7.<org.joda.time.LocalDate: long getLocalMillis()>();

        $r8 = (org.joda.time.LocalDate) r0;

        $l2 = virtualinvoke $r8.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i3 = virtualinvoke $r6.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l2);

        $r9 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i3);

        return $r9;

     label1:
        $r2 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>(r0, r1, $r2);

        $r3 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r3;
    }

    public static org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)
    {
        org.joda.time.Years $r4, $r5;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.DateTime $r1, $r2;
        int $i0;
        org.joda.time.ReadableInterval r0;

        r0 := @parameter0: org.joda.time.ReadableInterval;

        if r0 != null goto label1;

        $r5 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        return $r5;

     label1:
        $r1 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>();

        $r2 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>();

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r1, $r2, $r3);

        $r4 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r4;
    }

    public static org.joda.time.Years parseYears(java.lang.String)
    {
        org.joda.time.Period $r2;
        org.joda.time.Years $r3, $r4;
        int $i0;
        java.lang.String r0;
        org.joda.time.format.PeriodFormatter $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        return $r4;

     label1:
        $r1 = <org.joda.time.Years: org.joda.time.format.PeriodFormatter PARSER>;

        $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0);

        $i0 = virtualinvoke $r2.<org.joda.time.Period: int getYears()>();

        $r3 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r3;
    }

    private void <init>(int)
    {
        int i0;
        org.joda.time.Years r0;

        r0 := @this: org.joda.time.Years;

        i0 := @parameter0: int;

        specialinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>(i0);

        return;
    }

    private java.lang.Object readResolve()
    {
        int $i0;
        org.joda.time.Years r0, $r1;

        r0 := @this: org.joda.time.Years;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r1;
    }

    public org.joda.time.DurationFieldType getFieldType()
    {
        org.joda.time.Years r1;
        org.joda.time.DurationFieldType $r0;

        r1 := @this: org.joda.time.Years;

        $r0 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        return $r0;
    }

    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.PeriodType $r0;
        org.joda.time.Years r1;

        r1 := @this: org.joda.time.Years;

        $r0 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>();

        return $r0;
    }

    public int getYears()
    {
        int $i0;
        org.joda.time.Years r0;

        r0 := @this: org.joda.time.Years;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        return $i0;
    }

    public org.joda.time.Years plus(int)
    {
        org.joda.time.Years r0, $r1;
        int i0, $i1, $i2;

        r0 := @this: org.joda.time.Years;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0);

        $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2);

        return $r1;
    }

    public org.joda.time.Years plus(org.joda.time.Years)
    {
        org.joda.time.Years r0, r1, $r2;
        int $i0;

        r1 := @this: org.joda.time.Years;

        r0 := @parameter0: org.joda.time.Years;

        if r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $r2 = virtualinvoke r1.<org.joda.time.Years: org.joda.time.Years plus(int)>($i0);

        return $r2;
    }

    public org.joda.time.Years minus(int)
    {
        org.joda.time.Years r0, $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.Years;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r1 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years plus(int)>($i1);

        return $r1;
    }

    public org.joda.time.Years minus(org.joda.time.Years)
    {
        org.joda.time.Years r0, r1, $r2;
        int $i0;

        r1 := @this: org.joda.time.Years;

        r0 := @parameter0: org.joda.time.Years;

        if r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $r2 = virtualinvoke r1.<org.joda.time.Years: org.joda.time.Years minus(int)>($i0);

        return $r2;
    }

    public org.joda.time.Years multipliedBy(int)
    {
        org.joda.time.Years r0, $r1;
        int $i0, i1, $i2;

        r0 := @this: org.joda.time.Years;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, i1);

        $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2);

        return $r1;
    }

    public org.joda.time.Years dividedBy(int)
    {
        org.joda.time.Years r0, $r1;
        int i0, $i1, $i2;

        r0 := @this: org.joda.time.Years;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i2 = $i1 / i0;

        $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2);

        return $r1;
    }

    public org.joda.time.Years negated()
    {
        org.joda.time.Years r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Years;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i1);

        return $r1;
    }

    public boolean isGreaterThan(org.joda.time.Years)
    {
        org.joda.time.Years r0, r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.Years;

        r0 := @parameter0: org.joda.time.Years;

        if r0 != null goto label3;

        $i2 = virtualinvoke r1.<org.joda.time.Years: int getValue()>();

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i0 = virtualinvoke r1.<org.joda.time.Years: int getValue()>();

        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        if $i0 <= $i1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public boolean isLessThan(org.joda.time.Years)
    {
        org.joda.time.Years r0, r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.Years;

        r0 := @parameter0: org.joda.time.Years;

        if r0 != null goto label3;

        $i2 = virtualinvoke r1.<org.joda.time.Years: int getValue()>();

        if $i2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i0 = virtualinvoke r1.<org.joda.time.Years: int getValue()>();

        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        if $i0 >= $i1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public java.lang.String toString()
    {
        org.joda.time.Years r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        int $i0;
        java.lang.String $r3, $r6;

        r2 := @this: org.joda.time.Years;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("P");

        $i0 = virtualinvoke r2.<org.joda.time.Years: int getValue()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Y");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.joda.time.format.PeriodFormatter $r6, $r8;
        org.joda.time.PeriodType $r7;
        org.joda.time.Years $r0, $r1, $r2, $r3, $r4, $r5;

        <org.joda.time.Years: long serialVersionUID> = 87525275727380868L;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(0);

        <org.joda.time.Years: org.joda.time.Years ZERO> = $r0;

        $r1 = new org.joda.time.Years;

        specialinvoke $r1.<org.joda.time.Years: void <init>(int)>(1);

        <org.joda.time.Years: org.joda.time.Years ONE> = $r1;

        $r2 = new org.joda.time.Years;

        specialinvoke $r2.<org.joda.time.Years: void <init>(int)>(2);

        <org.joda.time.Years: org.joda.time.Years TWO> = $r2;

        $r3 = new org.joda.time.Years;

        specialinvoke $r3.<org.joda.time.Years: void <init>(int)>(3);

        <org.joda.time.Years: org.joda.time.Years THREE> = $r3;

        $r4 = new org.joda.time.Years;

        specialinvoke $r4.<org.joda.time.Years: void <init>(int)>(2147483647);

        <org.joda.time.Years: org.joda.time.Years MAX_VALUE> = $r4;

        $r5 = new org.joda.time.Years;

        specialinvoke $r5.<org.joda.time.Years: void <init>(int)>(-2147483648);

        <org.joda.time.Years: org.joda.time.Years MIN_VALUE> = $r5;

        $r6 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $r7 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>();

        $r8 = virtualinvoke $r6.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r7);

        <org.joda.time.Years: org.joda.time.format.PeriodFormatter PARSER> = $r8;

        return;
    }
}
