public final class org.apache.lucene.util.packed.MonotonicBlockPackedReader extends java.lang.Object
{
    private final int blockShift;
    private final int blockMask;
    private final long valueCount;
    private final long[] minValues;
    private final float[] averages;
    private final org.apache.lucene.util.packed.PackedInts$Reader[] subReaders;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.IndexInput, int, int, long, boolean) throws java.io.IOException
    {
        byte $b8, $b13;
        boolean z0, $z1;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r3, $r8, $r11, $r15;
        org.apache.lucene.util.packed.PackedInts$Reader $r9, $r12;
        float $f0;
        org.apache.lucene.util.packed.PackedInts$NullReader $r20;
        org.apache.lucene.util.packed.MonotonicBlockPackedReader r0;
        long l1, $l4, $l5, $l6, $l7, $l10, $l11, $l12, $l14, $l17, $l18, $l19, $l20, $l21, $l22, $l25, $l26, $l27;
        float[] $r2, $r6;
        long[] $r1, $r5;
        int i0, $i2, $i3, $i9, $i15, $i16, i23, i24, $i28, i29, $i30;
        org.apache.lucene.store.IndexInput r4;
        org.apache.lucene.util.packed.PackedInts$Format $r7, $r10, $r13;
        java.io.IOException $r19;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedReader;

        r4 := @parameter0: org.apache.lucene.store.IndexInput;

        i24 := @parameter1: int;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.lucene.util.packed.AbstractBlockPackedWriter: void checkBlockSize(int)>(i0);

        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: long valueCount> = l1;

        $i2 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i0);

        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: int blockShift> = $i2;

        $i3 = i0 - 1;

        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: int blockMask> = $i3;

        $l4 = (long) i0;

        $l5 = l1 / $l4;

        $i9 = (int) $l5;

        $l6 = (long) i0;

        $l7 = l1 % $l6;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        $i28 = $i9 + $z1;

        $l11 = (long) $i28;

        $l10 = (long) i0;

        $l12 = $l11 * $l10;

        $b13 = $l12 cmp l1;

        $i30 = (int) $b13;

        if $i30 >= 0 goto label3;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valueCount is too large for this block size");

        throw $r18;

     label3:
        $r1 = newarray (long)[$i28];

        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: long[] minValues> = $r1;

        $r2 = newarray (float)[$i28];

        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: float[] averages> = $r2;

        $r3 = newarray (org.apache.lucene.util.packed.PackedInts$Reader)[$i28];

        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders> = $r3;

        i29 = 0;

     label4:
        if i29 >= $i28 goto label9;

        $r5 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: long[] minValues>;

        $l14 = virtualinvoke r4.<org.apache.lucene.store.IndexInput: long readVLong()>();

        $r5[i29] = $l14;

        $r6 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: float[] averages>;

        $i15 = virtualinvoke r4.<org.apache.lucene.store.IndexInput: int readInt()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i15);

        $r6[i29] = $f0;

        $i16 = virtualinvoke r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if $i16 <= 64 goto label5;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Corrupted");

        throw $r19;

     label5:
        if $i16 != 0 goto label6;

        $r15 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r20 = new org.apache.lucene.util.packed.PackedInts$NullReader;

        specialinvoke $r20.<org.apache.lucene.util.packed.PackedInts$NullReader: void <init>(int)>(i0);

        $r15[i29] = $r20;

        goto label8;

     label6:
        $l21 = (long) i0;

        $l18 = (long) i29;

        $l17 = (long) i0;

        $l19 = $l18 * $l17;

        $l20 = l1 - $l19;

        $l22 = staticinvoke <java.lang.Math: long min(long,long)>($l21, $l20);

        i23 = (int) $l22;

        if z0 == 0 goto label7;

        $l25 = virtualinvoke r4.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $r11 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r10 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r12 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r4, $r10, i24, i23, $i16);

        $r11[i29] = $r12;

        $r13 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $l26 = virtualinvoke $r13.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i24, i23, $i16);

        $l27 = $l25 + $l26;

        virtualinvoke r4.<org.apache.lucene.store.IndexInput: void seek(long)>($l27);

        goto label8;

     label7:
        $r8 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r7 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r9 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r4, $r7, i24, i23, $i16);

        $r8[i29] = $r9;

     label8:
        i29 = i29 + 1;

        goto label4;

     label9:
        return;
    }

    public long get(long)
    {
        long l0, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l13;
        float[] $r2;
        java.lang.AssertionError $r6;
        long[] $r1;
        byte $b12, $b14;
        int $i1, $i3, $i15, $i16, $i17, $i18;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r3;
        org.apache.lucene.util.packed.PackedInts$Reader $r4;
        float $f0, $f1, $f2;
        org.apache.lucene.util.packed.MonotonicBlockPackedReader r0;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedReader;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.packed.MonotonicBlockPackedReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b12 = l0 cmp 0L;

        $i17 = (int) $b12;

        if $i17 < 0 goto label1;

        $l13 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: long valueCount>;

        $b14 = l0 cmp $l13;

        $i18 = (int) $b14;

        if $i18 < 0 goto label2;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $i1 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: int blockShift>;

        $l2 = l0 >>> $i1;

        $i15 = (int) $l2;

        $i3 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: int blockMask>;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        $i16 = (int) $l5;

        $r1 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: long[] minValues>;

        $l7 = $r1[$i15];

        $f1 = (float) $i16;

        $r2 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: float[] averages>;

        $f0 = $r2[$i15];

        $f2 = $f1 * $f0;

        $l6 = (long) $f2;

        $l8 = $l7 + $l6;

        $r3 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r4 = $r3[$i15];

        $l9 = interfaceinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i16);

        $l10 = staticinvoke <org.apache.lucene.util.packed.BlockPackedReaderIterator: long zigZagDecode(long)>($l9);

        $l11 = $l8 + $l10;

        return $l11;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/MonotonicBlockPackedReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.MonotonicBlockPackedReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
