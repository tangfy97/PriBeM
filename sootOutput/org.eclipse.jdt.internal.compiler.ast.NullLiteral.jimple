public class org.eclipse.jdt.internal.compiler.ast.NullLiteral extends org.eclipse.jdt.internal.compiler.ast.MagicLiteral
{
    static final char[] source;

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[4];

        $r0[0] = 110;

        $r0[1] = 117;

        $r0[2] = 108;

        $r0[3] = 108;

        <org.eclipse.jdt.internal.compiler.ast.NullLiteral: char[] source> = $r0;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.MagicLiteral: void <init>(int,int)>(i0, i1);

        return;
    }

    public void computeConstant()
    {
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.NullLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        return;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        int i0, $i1, $i2;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void aconst_null()>();

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.NullLiteral: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i2);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.NullLiteral: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding literalType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r0 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        return $r0;
    }

    public int nullStatus(org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r1;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return 1;
    }

    public java.lang.Object reusableJSRTarget()
    {
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r0;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        $r0 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        return $r0;
    }

    public char[] source()
    {
        char[] $r0;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        $r0 = <org.eclipse.jdt.internal.compiler.ast.NullLiteral: char[] source>;

        return $r0;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.NullLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.NullLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
