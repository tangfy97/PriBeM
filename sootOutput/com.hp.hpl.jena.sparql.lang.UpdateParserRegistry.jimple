public class com.hp.hpl.jena.sparql.lang.UpdateParserRegistry extends java.lang.Object
{
    java.util.Map factories;
    static com.hp.hpl.jena.sparql.lang.UpdateParserRegistry registry;

    public static synchronized com.hp.hpl.jena.sparql.lang.UpdateParserRegistry get()
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0, $r1;

        $r0 = <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry registry>;

        if $r0 != null goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: void init()>();

     label1:
        $r1 = <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry registry>;

        return $r1;
    }

    private void <init>()
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry r0;
        java.util.HashMap $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: java.util.Map factories> = $r1;

        return;
    }

    private static synchronized void init()
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0;
        com.hp.hpl.jena.query.Syntax $r2, $r4;
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry$1 $r1;
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry$2 $r3;

        $r0 = new com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: void <init>()>();

        $r2 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL_11>;

        $r1 = new com.hp.hpl.jena.sparql.lang.UpdateParserRegistry$1;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry$1: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: void add(com.hp.hpl.jena.query.Syntax,com.hp.hpl.jena.sparql.lang.UpdateParserFactory)>($r2, $r1);

        $r4 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxARQ>;

        $r3 = new com.hp.hpl.jena.sparql.lang.UpdateParserRegistry$2;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry$2: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: void add(com.hp.hpl.jena.query.Syntax,com.hp.hpl.jena.sparql.lang.UpdateParserFactory)>($r4, $r3);

        <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry registry> = $r0;

        return;
    }

    public static com.hp.hpl.jena.sparql.lang.UpdateParserFactory findFactory(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0;
        com.hp.hpl.jena.query.Syntax r1;
        com.hp.hpl.jena.sparql.lang.UpdateParserFactory $r2;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry get()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserFactory getFactory(com.hp.hpl.jena.query.Syntax)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.lang.UpdateParser parser(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0;
        com.hp.hpl.jena.sparql.lang.UpdateParser $r2;
        com.hp.hpl.jena.query.Syntax r1;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry get()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParser createParser(com.hp.hpl.jena.query.Syntax)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.lang.UpdateParserFactory getFactory(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry r0;
        com.hp.hpl.jena.query.Syntax r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.lang.UpdateParserFactory $r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: java.util.Map factories>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.sparql.lang.UpdateParserFactory) $r3;

        return $r4;
    }

    public com.hp.hpl.jena.sparql.lang.UpdateParser createParser(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry r0;
        com.hp.hpl.jena.query.Syntax r1;
        com.hp.hpl.jena.sparql.lang.UpdateParser $r3;
        com.hp.hpl.jena.sparql.lang.UpdateParserFactory $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserFactory getFactory(com.hp.hpl.jena.query.Syntax)>(r1);

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.lang.UpdateParserFactory: com.hp.hpl.jena.sparql.lang.UpdateParser create(com.hp.hpl.jena.query.Syntax)>(r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public static void addFactory(com.hp.hpl.jena.query.Syntax, com.hp.hpl.jena.sparql.lang.UpdateParserFactory)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0;
        com.hp.hpl.jena.query.Syntax r1;
        com.hp.hpl.jena.sparql.lang.UpdateParserFactory r2;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        r2 := @parameter1: com.hp.hpl.jena.sparql.lang.UpdateParserFactory;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry get()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: void add(com.hp.hpl.jena.query.Syntax,com.hp.hpl.jena.sparql.lang.UpdateParserFactory)>(r1, r2);

        return;
    }

    public void add(com.hp.hpl.jena.query.Syntax, com.hp.hpl.jena.sparql.lang.UpdateParserFactory)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry r2;
        com.hp.hpl.jena.query.Syntax r1;
        java.util.Map $r3;
        com.hp.hpl.jena.sparql.lang.UpdateParserFactory r0;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        r0 := @parameter1: com.hp.hpl.jena.sparql.lang.UpdateParserFactory;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.lang.UpdateParserFactory: boolean accept(com.hp.hpl.jena.query.Syntax)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The given parser factory does not accept the specified syntax.");

        throw $r4;

     label1:
        $r3 = r2.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: java.util.Map factories>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

        return;
    }

    public static void removeFactory(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0;
        com.hp.hpl.jena.query.Syntax r1;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry get()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: void remove(com.hp.hpl.jena.query.Syntax)>(r1);

        return;
    }

    public void remove(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry r0;
        com.hp.hpl.jena.query.Syntax r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: java.util.Map factories>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public static boolean containsParserFactory(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry $r0;
        com.hp.hpl.jena.query.Syntax r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry get()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: boolean containsFactory(com.hp.hpl.jena.query.Syntax)>(r1);

        return $z0;
    }

    public boolean containsFactory(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.sparql.lang.UpdateParserRegistry r0;
        com.hp.hpl.jena.query.Syntax r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: java.util.Map factories>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.lang.UpdateParserRegistry: com.hp.hpl.jena.sparql.lang.UpdateParserRegistry registry> = null;

        return;
    }
}
