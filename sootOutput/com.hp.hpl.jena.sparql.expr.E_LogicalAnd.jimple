public class com.hp.hpl.jena.sparql.expr.E_LogicalAnd extends com.hp.hpl.jena.sparql.expr.ExprFunction2
{
    private static final java.lang.String functionName;
    private static final java.lang.String symbol;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_LogicalAnd r0;
        com.hp.hpl.jena.sparql.expr.Expr r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction2: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,java.lang.String,java.lang.String)>(r1, r2, "and", "&&");

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.sparql.expr.E_LogicalAnd r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r5;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r10, $r11, r12;
        com.hp.hpl.jena.sparql.function.FunctionEnv r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        r12 = null;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_LogicalAnd: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r2, r3);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean booleanEffectiveValue(com.hp.hpl.jena.sparql.expr.NodeValue)>($r4);

        if $z0 != 0 goto label03;

        $r9 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

     label02:
        return $r9;

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        r12 = $r11;

     label05:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_LogicalAnd: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r2, r3);

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean booleanEffectiveValue(com.hp.hpl.jena.sparql.expr.NodeValue)>($r6);

        if $z1 != 0 goto label07;

        $r8 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

     label06:
        return $r8;

     label07:
        if r12 == null goto label08;

        throw r12;

     label08:
        $r7 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

     label09:
        return $r7;

     label10:
        $r10 := @caughtexception;

        if r12 == null goto label11;

        throw r12;

     label11:
        throw $r10;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label01 to label02 with label04;
        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label05 to label06 with label10;
        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label07 to label09 with label10;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r13;
        com.hp.hpl.jena.sparql.expr.E_LogicalAnd r12;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r2, $r7;
        java.lang.String $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10;

        r12 := @this: com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z0 != 0 goto label1;

        $r7 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a boolean: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z1 != 0 goto label2;

        $r2 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a boolean: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean getBoolean()>();

        $z3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean getBoolean()>();

        if $z2 == 0 goto label3;

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        $r13 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeBoolean(boolean)>($z4);

        return $r13;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1, r2;
        com.hp.hpl.jena.sparql.expr.E_LogicalAnd $r0, r3;

        r3 := @this: com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_LogicalAnd: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_LogicalAnd: java.lang.String symbol> = "&&";

        <com.hp.hpl.jena.sparql.expr.E_LogicalAnd: java.lang.String functionName> = "and";

        return;
    }
}
