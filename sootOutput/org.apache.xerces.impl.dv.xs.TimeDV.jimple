public class org.apache.xerces.impl.dv.xs.TimeDV extends org.apache.xerces.impl.dv.xs.AbstractDateTimeDV
{

    public void <init>()
    {
        org.apache.xerces.impl.dv.xs.TimeDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.TimeDV;

        specialinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void <init>()>();

        return;
    }

    public java.lang.Object getActualValue(java.lang.String, org.apache.xerces.impl.dv.ValidationContext) throws org.apache.xerces.impl.dv.InvalidDatatypeValueException
    {
        org.apache.xerces.impl.dv.ValidationContext r6;
        org.apache.xerces.impl.dv.InvalidDatatypeValueException $r4;
        java.lang.Object[] $r5;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData $r2;
        java.lang.String r1;
        java.lang.Exception $r3;
        org.apache.xerces.impl.dv.xs.TimeDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.TimeDV;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.xerces.impl.dv.ValidationContext;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.TimeDV: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData parse(java.lang.String)>(r1);

        return $r2;

     label2:
        $r3 := @caughtexception;

        $r4 = new org.apache.xerces.impl.dv.InvalidDatatypeValueException;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r5[1] = "time";

        specialinvoke $r4.<org.apache.xerces.impl.dv.InvalidDatatypeValueException: void <init>(java.lang.String,java.lang.Object[])>("cvc-datatype-valid.1.2.1", $r5);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    protected org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData parse(java.lang.String) throws org.apache.xerces.impl.dv.xs.SchemaDateTimeException
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData $r0;
        int $i0, $i1, $i2;
        java.lang.String r1;
        org.apache.xerces.impl.dv.xs.TimeDV r2;

        r2 := @this: org.apache.xerces.impl.dv.xs.TimeDV;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        specialinvoke $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: void <init>(java.lang.String,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV)>(r1, r2);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = 2000;

        $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = 1;

        $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = 15;

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.TimeDV: void getTime(java.lang.String,int,int,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r1, 0, $i0, $r0);

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.TimeDV: void validateDateTime(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r0);

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.TimeDV: void saveUnnormalized(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r0);

        $i1 = $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i1 == 0 goto label1;

        $i2 = $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i2 == 90 goto label1;

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.TimeDV: void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r0);

        $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = 15;

     label1:
        $r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int position> = 2;

        return $r0;
    }

    protected java.lang.String dateToString(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        char $c3;
        org.apache.xerces.impl.dv.xs.TimeDV r1;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r3;
        double $d0;

        r1 := @this: org.apache.xerces.impl.dv.xs.TimeDV;

        r2 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(16);

        $i0 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.TimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i0, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i1 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.TimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $d0 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.TimeDV: void append(java.lang.StringBuffer,double)>($r4, $d0);

        $i2 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        $c3 = (char) $i2;

        $i4 = (int) $c3;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.TimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i4, 0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected javax.xml.datatype.XMLGregorianCalendar getXMLGregorianCalendar(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        javax.xml.datatype.DatatypeFactory $r2;
        org.apache.xerces.impl.dv.xs.TimeDV r1;
        java.math.BigDecimal $r3;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        double $d0, $d1;
        boolean $z0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        javax.xml.datatype.XMLGregorianCalendar $r4;

        r1 := @this: org.apache.xerces.impl.dv.xs.TimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $r2 = <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: javax.xml.datatype.DatatypeFactory datatypeFactory>;

        $i4 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormHour>;

        $i5 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormMinute>;

        $d0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double unNormSecond>;

        $i6 = (int) $d0;

        $d1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double unNormSecond>;

        $b0 = $d1 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.TimeDV: java.math.BigDecimal getFractionalSecondsAsBigDecimal(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r0);

        goto label2;

     label1:
        $r3 = null;

     label2:
        $z0 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: boolean hasTimeZone()>();

        if $z0 == 0 goto label3;

        $i1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        $i3 = $i1 * 60;

        $i2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        $i7 = $i3 + $i2;

        goto label4;

     label3:
        $i7 = -2147483648;

     label4:
        $r4 = virtualinvoke $r2.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)>(null, -2147483648, -2147483648, $i4, $i5, $i6, $r3, $i7);

        return $r4;
    }
}
