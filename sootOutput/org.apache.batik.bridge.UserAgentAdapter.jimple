public class org.apache.batik.bridge.UserAgentAdapter extends java.lang.Object implements org.apache.batik.bridge.UserAgent
{
    protected java.util.Set FEATURES;
    protected java.util.Set extensions;
    protected org.apache.batik.bridge.BridgeContext ctx;

    public void <init>()
    {
        java.util.HashSet $r1, $r2;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.UserAgentAdapter: java.util.Set FEATURES> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.UserAgentAdapter: java.util.Set extensions> = $r2;

        return;
    }

    public void setBridgeContext(org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0.<org.apache.batik.bridge.UserAgentAdapter: org.apache.batik.bridge.BridgeContext ctx> = r1;

        return;
    }

    public void addStdFeatures()
    {
        java.util.Set $r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        $r1 = r0.<org.apache.batik.bridge.UserAgentAdapter: java.util.Set FEATURES>;

        staticinvoke <org.apache.batik.util.SVGFeatureStrings: void addSupportedFeatureStrings(java.util.Set)>($r1);

        return;
    }

    public java.awt.geom.Dimension2D getViewportSize()
    {
        java.awt.Dimension $r0;
        org.apache.batik.bridge.UserAgentAdapter r1;

        r1 := @this: org.apache.batik.bridge.UserAgentAdapter;

        $r0 = new java.awt.Dimension;

        specialinvoke $r0.<java.awt.Dimension: void <init>(int,int)>(1, 1);

        return $r0;
    }

    public void displayMessage(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void displayError(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.bridge.UserAgentAdapter: void displayMessage(java.lang.String)>(r1);

        return;
    }

    public void displayError(java.lang.Exception)
    {
        java.lang.String $r2;
        org.apache.batik.bridge.UserAgentAdapter r0;
        java.lang.Exception r1;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.Exception;

        $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.batik.bridge.UserAgentAdapter: void displayError(java.lang.String)>($r2);

        return;
    }

    public void showAlert(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public java.lang.String showPrompt(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String showPrompt(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public boolean showConfirm(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public float getPixelUnitToMillimeter()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return 0.26458332F;
    }

    public float getPixelToMM()
    {
        float $f0;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.UserAgentAdapter: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public java.lang.String getDefaultFontFamily()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return "Arial, Helvetica, sans-serif";
    }

    public float getMediumFontSize()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.UserAgentAdapter: float getPixelUnitToMillimeter()>();

        $f1 = 72.0F * $f0;

        $f2 = 228.59999F / $f1;

        return $f2;
    }

    public float getLighterFontWeight(float)
    {
        float f0, $f1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        f0 := @parameter0: float;

        $f1 = staticinvoke <org.apache.batik.bridge.UserAgentAdapter: float getStandardLighterFontWeight(float)>(f0);

        return $f1;
    }

    public float getBolderFontWeight(float)
    {
        float f0, $f1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        f0 := @parameter0: float;

        $f1 = staticinvoke <org.apache.batik.bridge.UserAgentAdapter: float getStandardBolderFontWeight(float)>(f0);

        return $f1;
    }

    public java.lang.String getLanguages()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return "en";
    }

    public java.lang.String getMedia()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return "all";
    }

    public java.lang.String getAlternateStyleSheet()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return null;
    }

    public java.lang.String getUserStyleSheetURI()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return null;
    }

    public java.lang.String getXMLParserClassName()
    {
        java.lang.String $r0;
        org.apache.batik.bridge.UserAgentAdapter r1;

        r1 := @this: org.apache.batik.bridge.UserAgentAdapter;

        $r0 = staticinvoke <org.apache.batik.util.XMLResourceDescriptor: java.lang.String getXMLParserClassName()>();

        return $r0;
    }

    public boolean isXMLParserValidating()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return 0;
    }

    public org.apache.batik.gvt.event.EventDispatcher getEventDispatcher()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return null;
    }

    public void openLink(org.w3c.dom.svg.SVGAElement)
    {
        org.apache.batik.bridge.UserAgentAdapter r0;
        org.w3c.dom.svg.SVGAElement r1;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: org.w3c.dom.svg.SVGAElement;

        return;
    }

    public void setSVGCursor(java.awt.Cursor)
    {
        org.apache.batik.bridge.UserAgentAdapter r0;
        java.awt.Cursor r1;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.awt.Cursor;

        return;
    }

    public void setTextSelection(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.gvt.text.Mark r1, r2;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: org.apache.batik.gvt.text.Mark;

        r2 := @parameter1: org.apache.batik.gvt.text.Mark;

        return;
    }

    public void deselectAll()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return;
    }

    public void runThread(java.lang.Thread)
    {
        org.apache.batik.bridge.UserAgentAdapter r0;
        java.lang.Thread r1;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.Thread;

        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        return null;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        java.awt.geom.AffineTransform r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        return;
    }

    public java.awt.Point getClientAreaLocationOnScreen()
    {
        java.awt.Point $r0;
        org.apache.batik.bridge.UserAgentAdapter r1;

        r1 := @this: org.apache.batik.bridge.UserAgentAdapter;

        $r0 = new java.awt.Point;

        specialinvoke $r0.<java.awt.Point: void <init>()>();

        return $r0;
    }

    public boolean hasFeature(java.lang.String)
    {
        org.apache.batik.bridge.UserAgentAdapter r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.bridge.UserAgentAdapter: java.util.Set FEATURES>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean supportExtension(java.lang.String)
    {
        org.apache.batik.bridge.UserAgentAdapter r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.bridge.UserAgentAdapter: java.util.Set extensions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void registerExtension(org.apache.batik.bridge.BridgeExtension)
    {
        java.util.Iterator $r1;
        org.apache.batik.bridge.UserAgentAdapter r2;
        java.util.Set $r3;
        org.apache.batik.bridge.BridgeExtension r0;
        java.lang.Object $r4;
        boolean $z0;

        r2 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r0 := @parameter0: org.apache.batik.bridge.BridgeExtension;

        $r1 = interfaceinvoke r0.<org.apache.batik.bridge.BridgeExtension: java.util.Iterator getImplementedExtensions()>();

        goto label2;

     label1:
        $r3 = r2.<org.apache.batik.bridge.UserAgentAdapter: java.util.Set extensions>;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void handleElement(org.w3c.dom.Element, java.lang.Object)
    {
        java.lang.Object r2;
        org.w3c.dom.Element r1;
        org.apache.batik.bridge.UserAgentAdapter r0;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String, org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r2, r3;
        org.apache.batik.bridge.DefaultScriptSecurity $r0;
        org.apache.batik.bridge.UserAgentAdapter r4;
        java.lang.String r1;

        r4 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        r3 := @parameter2: org.apache.batik.util.ParsedURL;

        $r0 = new org.apache.batik.bridge.DefaultScriptSecurity;

        specialinvoke $r0.<org.apache.batik.bridge.DefaultScriptSecurity: void <init>(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r1, r2, r3);

        return $r0;
    }

    public void checkLoadScript(java.lang.String, org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.util.ParsedURL r2, r3;
        org.apache.batik.bridge.UserAgentAdapter r0;
        org.apache.batik.bridge.ScriptSecurity $r4;
        java.lang.String r1;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        r3 := @parameter2: org.apache.batik.util.ParsedURL;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.UserAgentAdapter: org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r1, r2, r3);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<org.apache.batik.bridge.ScriptSecurity: void checkLoadScript()>();

     label1:
        return;
    }

    public org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.bridge.RelaxedExternalResourceSecurity $r0;
        org.apache.batik.util.ParsedURL r1, r2;
        org.apache.batik.bridge.UserAgentAdapter r3;

        r3 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $r0 = new org.apache.batik.bridge.RelaxedExternalResourceSecurity;

        specialinvoke $r0.<org.apache.batik.bridge.RelaxedExternalResourceSecurity: void <init>(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r1, r2);

        return $r0;
    }

    public void checkLoadExternalResource(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.util.ParsedURL r1, r2;
        org.apache.batik.bridge.UserAgentAdapter r0;
        org.apache.batik.bridge.ExternalResourceSecurity $r3;

        r0 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.UserAgentAdapter: org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r1, r2);

        if $r3 == null goto label1;

        interfaceinvoke $r3.<org.apache.batik.bridge.ExternalResourceSecurity: void checkLoadExternalResource()>();

     label1:
        return;
    }

    public static float getStandardLighterFontWeight(float)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuffer $r1, $r2, $r3;
        int $i0, i1;
        float f0, $f1, $f2;
        java.lang.String $r4;

        f0 := @parameter0: float;

        $f1 = f0 + 50.0F;

        $f2 = $f1 / 100.0F;

        $i0 = (int) $f2;

        i1 = $i0 * 100;

        lookupswitch(i1)
        {
            case 100: goto label01;
            case 200: goto label02;
            case 300: goto label03;
            case 400: goto label04;
            case 500: goto label05;
            case 600: goto label06;
            case 700: goto label07;
            case 800: goto label08;
            case 900: goto label09;
            default: goto label10;
        };

     label01:
        return 100.0F;

     label02:
        return 100.0F;

     label03:
        return 200.0F;

     label04:
        return 300.0F;

     label05:
        return 400.0F;

     label06:
        return 400.0F;

     label07:
        return 400.0F;

     label08:
        return 400.0F;

     label09:
        return 400.0F;

     label10:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad Font Weight: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public static float getStandardBolderFontWeight(float)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuffer $r1, $r2, $r3;
        int $i0, i1;
        float f0, $f1, $f2;
        java.lang.String $r4;

        f0 := @parameter0: float;

        $f1 = f0 + 50.0F;

        $f2 = $f1 / 100.0F;

        $i0 = (int) $f2;

        i1 = $i0 * 100;

        lookupswitch(i1)
        {
            case 100: goto label01;
            case 200: goto label02;
            case 300: goto label03;
            case 400: goto label04;
            case 500: goto label05;
            case 600: goto label06;
            case 700: goto label07;
            case 800: goto label08;
            case 900: goto label09;
            default: goto label10;
        };

     label01:
        return 600.0F;

     label02:
        return 600.0F;

     label03:
        return 600.0F;

     label04:
        return 600.0F;

     label05:
        return 600.0F;

     label06:
        return 700.0F;

     label07:
        return 800.0F;

     label08:
        return 900.0F;

     label09:
        return 900.0F;

     label10:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad Font Weight: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public org.w3c.dom.svg.SVGDocument getBrokenLinkDocument(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Element r2;
        java.lang.Object[] $r3;
        org.apache.batik.bridge.UserAgentAdapter r1;
        org.apache.batik.bridge.BridgeException $r0;
        org.apache.batik.bridge.BridgeContext $r6;
        java.lang.String r4, r5;

        r1 := @this: org.apache.batik.bridge.UserAgentAdapter;

        r2 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r0 = new org.apache.batik.bridge.BridgeException;

        $r6 = r1.<org.apache.batik.bridge.UserAgentAdapter: org.apache.batik.bridge.BridgeContext ctx>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r4;

        $r3[1] = r5;

        specialinvoke $r0.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r6, r2, "uri.image.broken", $r3);

        throw $r0;
    }
}
