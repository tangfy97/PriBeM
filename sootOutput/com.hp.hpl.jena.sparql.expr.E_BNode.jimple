public class com.hp.hpl.jena.sparql.expr.E_BNode extends com.hp.hpl.jena.sparql.expr.ExprFunctionN
{
    private static final java.lang.String symbol;
    private static final com.hp.hpl.jena.sparql.util.Symbol keyMap;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.E_BNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_BNode;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_BNode: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(null);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_BNode r0;
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.expr.Expr[] $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_BNode;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r1 = newarray (com.hp.hpl.jena.sparql.expr.Expr)[1];

        $r1[0] = r2;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.Expr[])>("bnode", $r1);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r11, $r23;
        com.hp.hpl.jena.graph.Node $r10, $r22;
        com.hp.hpl.jena.sparql.expr.Expr r24;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r17;
        int $i0, $i1;
        java.lang.String $r9, $r21;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r12, $r16, r26;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Symbol $r6, $r15;
        java.util.IdentityHashMap $r13, r25;
        com.hp.hpl.jena.sparql.expr.E_BNode r0;
        com.hp.hpl.jena.sparql.util.Context $r5, $r14;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        java.lang.Object $r7, $r8;
        java.lang.StringBuilder $r18, $r19, $r20;
        com.hp.hpl.jena.sparql.function.FunctionEnv r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_BNode;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        r24 = null;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.E_BNode: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 != 1 goto label1;

        r24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_BNode: com.hp.hpl.jena.sparql.expr.Expr getArg(int)>(1);

     label1:
        if r24 != null goto label2;

        $r22 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        $r23 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r22);

        return $r23;

     label2:
        $r4 = interfaceinvoke r24.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r2, r3);

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z0 != 0 goto label3;

        $r17 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label3:
        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r6 = <com.hp.hpl.jena.sparql.expr.E_BNode: com.hp.hpl.jena.sparql.util.Symbol keyMap>;

        $r7 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r6);

        r25 = (java.util.IdentityHashMap) $r7;

        if r25 != null goto label4;

        $r13 = new java.util.IdentityHashMap;

        specialinvoke $r13.<java.util.IdentityHashMap: void <init>()>();

        r25 = $r13;

        $r14 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r15 = <com.hp.hpl.jena.sparql.expr.E_BNode: com.hp.hpl.jena.sparql.util.Symbol keyMap>;

        virtualinvoke $r14.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r15, $r13);

     label4:
        $r8 = virtualinvoke r25.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r16 = (com.hp.hpl.jena.sparql.util.LabelToNodeMap) $r8;

        r26 = $r16;

        if $r16 != null goto label5;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.util.LabelToNodeMap createBNodeMap()>();

        r26 = $r12;

        virtualinvoke r25.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r12);

     label5:
        $r9 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r10 = virtualinvoke r26.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node asNode(java.lang.String)>($r9);

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r10);

        return $r11;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r0;
        com.hp.hpl.jena.sparql.expr.E_BNode r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_BNode;

        r2 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r0;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.E_BNode $r1, $r3, r4;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        int $i0;

        r4 := @this: com.hp.hpl.jena.sparql.expr.E_BNode;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 != 0 goto label1;

        $r3 = new com.hp.hpl.jena.sparql.expr.E_BNode;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.E_BNode: void <init>()>();

        return $r3;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.expr.E_BNode;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.E_BNode: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r2);

        return $r1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.util.Symbol $r0;

        <com.hp.hpl.jena.sparql.expr.E_BNode: java.lang.String symbol> = "bnode";

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>("arq:internal:bNodeMappings");

        <com.hp.hpl.jena.sparql.expr.E_BNode: com.hp.hpl.jena.sparql.util.Symbol keyMap> = $r0;

        return;
    }
}
