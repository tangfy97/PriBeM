public class com.hp.hpl.jena.sparql.expr.E_Bound extends com.hp.hpl.jena.sparql.expr.ExprFunction1
{
    private static final java.lang.String symbol;
    boolean isBound;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.E_Bound r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Bound;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction1: void <init>(com.hp.hpl.jena.sparql.expr.Expr,java.lang.String)>(r1, "bound");

        r0.<com.hp.hpl.jena.sparql.expr.E_Bound: boolean isBound> = 0;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r6;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        com.hp.hpl.jena.sparql.expr.VariableNotBoundException $r5;
        com.hp.hpl.jena.sparql.expr.E_Bound r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Bound;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.E_Bound: com.hp.hpl.jena.sparql.expr.Expr expr>;

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        $r4 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        return $r6;

        catch com.hp.hpl.jena.sparql.expr.VariableNotBoundException from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r0, r2;
        com.hp.hpl.jena.sparql.expr.E_Bound r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_Bound;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r0;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.E_Bound $r0, r2;

        r2 := @this: com.hp.hpl.jena.sparql.expr.E_Bound;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_Bound;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_Bound: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r1);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_Bound: java.lang.String symbol> = "bound";

        return;
    }
}
