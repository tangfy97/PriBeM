public abstract class org.apache.batik.dom.svg.AbstractElement extends org.apache.batik.dom.AbstractElement implements org.apache.batik.dom.events.NodeEventTarget, org.apache.batik.css.engine.CSSNavigableNode, org.apache.batik.util.SVGConstants
{
    protected transient org.apache.batik.util.DoublyIndexedTable liveAttributeValues;

    protected void <init>()
    {
        org.apache.batik.util.DoublyIndexedTable $r1;
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void <init>()>();

        $r1 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r1.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues> = $r1;

        return;
    }

    protected void <init>(java.lang.String, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractDocument r2;
        org.apache.batik.util.DoublyIndexedTable $r1;
        java.lang.String r3;
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void <init>()>();

        $r1 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r1.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues> = $r1;

        r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = r2;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void setPrefix(java.lang.String)>(r3);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: void initializeAttributes()>();

        return;
    }

    public org.w3c.dom.Node getCSSParentNode()
    {
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getXblParentNode()>();

        return $r1;
    }

    public org.w3c.dom.Node getCSSPreviousSibling()
    {
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getXblPreviousSibling()>();

        return $r1;
    }

    public org.w3c.dom.Node getCSSNextSibling()
    {
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getXblNextSibling()>();

        return $r1;
    }

    public org.w3c.dom.Node getCSSFirstChild()
    {
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getXblFirstChild()>();

        return $r1;
    }

    public org.w3c.dom.Node getCSSLastChild()
    {
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getXblLastChild()>();

        return $r1;
    }

    public boolean isHiddenFromSelectors()
    {
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        return 0;
    }

    public void fireDOMAttrModifiedEvent(java.lang.String, org.w3c.dom.Attr, java.lang.String, java.lang.String, short)
    {
        org.w3c.dom.Attr r2, $r9, $r12;
        short s0;
        int $i1;
        java.lang.String r1, r3, r4, $r7, $r8, $r10, $r11, $r13;
        org.apache.batik.dom.svg.AbstractElement r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r6;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Attr;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        s0 := @parameter4: short;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void fireDOMAttrModifiedEvent(java.lang.String,org.w3c.dom.Attr,java.lang.String,java.lang.String,short)>(r1, r2, r3, r4, s0);

        $r5 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $z0 = $r6.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12>;

        if $z0 == 0 goto label6;

        $i1 = (int) s0;

        if $i1 == 2 goto label1;

        if s0 != 1 goto label6;

     label1:
        $r7 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r7 != null goto label4;

        $r11 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("id");

        if $z3 == 0 goto label4;

        $r12 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "id");

        if $r12 != null goto label2;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "id", r4);

        goto label3;

     label2:
        $r13 = interfaceinvoke $r12.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z4 != 0 goto label3;

        interfaceinvoke $r12.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>(r4);

     label3:
        goto label6;

     label4:
        $r8 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("xml:id");

        if $z1 == 0 goto label6;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>(null, "id");

        if $r9 != null goto label5;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "id", r4);

        goto label6;

     label5:
        $r10 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 != 0 goto label6;

        interfaceinvoke $r9.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>(r4);

     label6:
        return;
    }

    public org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(java.lang.String, java.lang.String)
    {
        java.lang.Object $r4;
        org.apache.batik.dom.svg.LiveAttributeValue $r5;
        java.lang.String r1, r2;
        org.apache.batik.util.DoublyIndexedTable $r3;
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = (org.apache.batik.dom.svg.LiveAttributeValue) $r4;

        return $r5;
    }

    public void putLiveAttributeValue(java.lang.String, java.lang.String, org.apache.batik.dom.svg.LiveAttributeValue)
    {
        org.apache.batik.dom.svg.LiveAttributeValue r3;
        java.lang.String r1, r2;
        org.apache.batik.util.DoublyIndexedTable $r4;
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.batik.dom.svg.LiveAttributeValue;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    protected org.apache.batik.dom.svg.AttributeInitializer getAttributeInitializer()
    {
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        return null;
    }

    protected void initializeAttributes()
    {
        org.apache.batik.dom.svg.AttributeInitializer $r1;
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.AttributeInitializer getAttributeInitializer()>();

        if $r1 == null goto label1;

        virtualinvoke $r1.<org.apache.batik.dom.svg.AttributeInitializer: void initializeAttributes(org.apache.batik.dom.svg.AbstractElement)>(r0);

     label1:
        return;
    }

    protected boolean resetAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.AttributeInitializer $r1;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.AttributeInitializer getAttributeInitializer()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AttributeInitializer: boolean resetAttribute(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String)>(r0, r2, r3, r4);

        return $z0;
    }

    protected org.w3c.dom.NamedNodeMap createAttributes()
    {
        org.apache.batik.dom.svg.AbstractElement r1;
        org.apache.batik.dom.svg.AbstractElement$ExtendedNamedNodeHashMap $r0;

        r1 := @this: org.apache.batik.dom.svg.AbstractElement;

        $r0 = new org.apache.batik.dom.svg.AbstractElement$ExtendedNamedNodeHashMap;

        specialinvoke $r0.<org.apache.batik.dom.svg.AbstractElement$ExtendedNamedNodeHashMap: void <init>(org.apache.batik.dom.svg.AbstractElement)>(r1);

        return $r0;
    }

    public void setUnspecifiedAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.AbstractElement$ExtendedNamedNodeHashMap $r6;
        org.w3c.dom.NamedNodeMap $r1, $r2, $r7;
        java.lang.String r3, r4, r5;
        org.apache.batik.dom.svg.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        $r7 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.w3c.dom.NamedNodeMap createAttributes()>();

        r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes> = $r7;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r6 = (org.apache.batik.dom.svg.AbstractElement$ExtendedNamedNodeHashMap) $r2;

        virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractElement$ExtendedNamedNodeHashMap: void setUnspecifiedAttribute(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r5);

        return;
    }

    protected void attrAdded(org.w3c.dom.Attr, java.lang.String)
    {
        org.apache.batik.dom.svg.LiveAttributeValue $r2;
        java.lang.String r3;
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Attr r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Attr;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(org.w3c.dom.Attr)>(r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<org.apache.batik.dom.svg.LiveAttributeValue: void attrAdded(org.w3c.dom.Attr,java.lang.String)>(r1, r3);

     label1:
        return;
    }

    protected void attrModified(org.w3c.dom.Attr, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.LiveAttributeValue $r2;
        java.lang.String r3, r4;
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Attr r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Attr;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(org.w3c.dom.Attr)>(r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<org.apache.batik.dom.svg.LiveAttributeValue: void attrModified(org.w3c.dom.Attr,java.lang.String,java.lang.String)>(r1, r3, r4);

     label1:
        return;
    }

    protected void attrRemoved(org.w3c.dom.Attr, java.lang.String)
    {
        org.apache.batik.dom.svg.LiveAttributeValue $r2;
        java.lang.String r3;
        org.apache.batik.dom.svg.AbstractElement r0;
        org.w3c.dom.Attr r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Attr;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(org.w3c.dom.Attr)>(r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<org.apache.batik.dom.svg.LiveAttributeValue: void attrRemoved(org.w3c.dom.Attr,java.lang.String)>(r1, r3);

     label1:
        return;
    }

    private org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(org.w3c.dom.Attr)
    {
        org.apache.batik.dom.svg.LiveAttributeValue $r3;
        java.lang.String $r1, $r4;
        org.w3c.dom.Attr r0;
        org.apache.batik.dom.svg.AbstractElement r2;

        r2 := @this: org.apache.batik.dom.svg.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Attr;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label1;

        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label2:
        $r3 = virtualinvoke r2.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(java.lang.String,java.lang.String)>($r1, $r4);

        return $r3;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        org.apache.batik.dom.svg.AbstractElement r0, $r3;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        $r3 = (org.apache.batik.dom.svg.AbstractElement) r1;

        virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractElement: void initializeAttributes()>();

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        org.apache.batik.dom.svg.AbstractElement r0, $r3;

        r0 := @this: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        $r3 = (org.apache.batik.dom.svg.AbstractElement) r1;

        virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractElement: void initializeAttributes()>();

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        return r1;
    }
}
