public class com.ctc.wstx.osgi.WstxBundleActivator extends java.lang.Object implements org.osgi.framework.BundleActivator
{
    static java.lang.Class class$org$codehaus$stax2$osgi$Stax2InputFactoryProvider;
    static java.lang.Class class$org$codehaus$stax2$osgi$Stax2OutputFactoryProvider;
    static java.lang.Class class$org$codehaus$stax2$osgi$Stax2ValidationSchemaFactoryProvider;

    public void <init>()
    {
        com.ctc.wstx.osgi.WstxBundleActivator r0;

        r0 := @this: com.ctc.wstx.osgi.WstxBundleActivator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void start(org.osgi.framework.BundleContext)
    {
        com.ctc.wstx.osgi.InputFactoryProviderImpl $r0;
        com.ctc.wstx.osgi.OutputFactoryProviderImpl $r5;
        int $i0, i1;
        java.lang.String $r3, $r7, $r12;
        java.util.Properties $r4, $r8, $r13;
        com.ctc.wstx.osgi.ValidationSchemaFactoryProviderImpl r10;
        org.osgi.framework.BundleContext r1;
        com.ctc.wstx.osgi.ValidationSchemaFactoryProviderImpl[] $r9;
        java.lang.Class $r2, $r6, $r11, $r15, $r16, $r17;
        com.ctc.wstx.osgi.WstxBundleActivator r14;

        r14 := @this: com.ctc.wstx.osgi.WstxBundleActivator;

        r1 := @parameter0: org.osgi.framework.BundleContext;

        $r0 = new com.ctc.wstx.osgi.InputFactoryProviderImpl;

        specialinvoke $r0.<com.ctc.wstx.osgi.InputFactoryProviderImpl: void <init>()>();

        $r2 = <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2InputFactoryProvider>;

        if $r2 != null goto label1;

        $r15 = staticinvoke <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$(java.lang.String)>("org.codehaus.stax2.osgi.Stax2InputFactoryProvider");

        <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2InputFactoryProvider> = $r15;

        goto label2;

     label1:
        $r15 = <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2InputFactoryProvider>;

     label2:
        $r3 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<com.ctc.wstx.osgi.InputFactoryProviderImpl: java.util.Properties getProperties()>();

        interfaceinvoke r1.<org.osgi.framework.BundleContext: org.osgi.framework.ServiceRegistration registerService(java.lang.String,java.lang.Object,java.util.Dictionary)>($r3, $r0, $r4);

        $r5 = new com.ctc.wstx.osgi.OutputFactoryProviderImpl;

        specialinvoke $r5.<com.ctc.wstx.osgi.OutputFactoryProviderImpl: void <init>()>();

        $r6 = <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2OutputFactoryProvider>;

        if $r6 != null goto label3;

        $r16 = staticinvoke <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$(java.lang.String)>("org.codehaus.stax2.osgi.Stax2OutputFactoryProvider");

        <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2OutputFactoryProvider> = $r16;

        goto label4;

     label3:
        $r16 = <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2OutputFactoryProvider>;

     label4:
        $r7 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<com.ctc.wstx.osgi.OutputFactoryProviderImpl: java.util.Properties getProperties()>();

        interfaceinvoke r1.<org.osgi.framework.BundleContext: org.osgi.framework.ServiceRegistration registerService(java.lang.String,java.lang.Object,java.util.Dictionary)>($r7, $r5, $r8);

        $r9 = staticinvoke <com.ctc.wstx.osgi.ValidationSchemaFactoryProviderImpl: com.ctc.wstx.osgi.ValidationSchemaFactoryProviderImpl[] createAll()>();

        i1 = 0;

        $i0 = lengthof $r9;

     label5:
        if i1 >= $i0 goto label8;

        r10 = $r9[i1];

        $r11 = <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2ValidationSchemaFactoryProvider>;

        if $r11 != null goto label6;

        $r17 = staticinvoke <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$(java.lang.String)>("org.codehaus.stax2.osgi.Stax2ValidationSchemaFactoryProvider");

        <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2ValidationSchemaFactoryProvider> = $r17;

        goto label7;

     label6:
        $r17 = <com.ctc.wstx.osgi.WstxBundleActivator: java.lang.Class class$org$codehaus$stax2$osgi$Stax2ValidationSchemaFactoryProvider>;

     label7:
        $r12 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke r10.<com.ctc.wstx.osgi.ValidationSchemaFactoryProviderImpl: java.util.Properties getProperties()>();

        interfaceinvoke r1.<org.osgi.framework.BundleContext: org.osgi.framework.ServiceRegistration registerService(java.lang.String,java.lang.Object,java.util.Dictionary)>($r12, r10, $r13);

        i1 = i1 + 1;

        goto label5;

     label8:
        return;
    }

    public void stop(org.osgi.framework.BundleContext)
    {
        com.ctc.wstx.osgi.WstxBundleActivator r0;
        org.osgi.framework.BundleContext r1;

        r0 := @this: com.ctc.wstx.osgi.WstxBundleActivator;

        r1 := @parameter0: org.osgi.framework.BundleContext;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
