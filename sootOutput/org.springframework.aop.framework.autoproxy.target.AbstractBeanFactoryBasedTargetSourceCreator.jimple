public abstract class org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator extends java.lang.Object implements org.springframework.aop.framework.autoproxy.TargetSourceCreator, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory;
    private final java.util.Map internalBeanFactories;

    public void <init>()
    {
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.HashMap $r3;

        r0 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: java.util.Map internalBeanFactories> = $r3;

        return;
    }

    public final void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        java.lang.IllegalStateException $r3;
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r1;
        org.springframework.beans.factory.BeanFactory r0;
        java.lang.StringBuilder $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r2;
        boolean $z0;

        r1 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $z0 = r0 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot do auto-TargetSource creation with a BeanFactory that doesn\'t implement ConfigurableBeanFactory: ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) r0;

        r1.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory> = $r2;

        return;
    }

    protected final org.springframework.beans.factory.BeanFactory getBeanFactory()
    {
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r0;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r1;

        r0 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        $r1 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        return $r1;
    }

    public final org.springframework.aop.TargetSource getTargetSource(java.lang.Class, java.lang.String)
    {
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r0;
        org.springframework.beans.factory.support.GenericBeanDefinition $r8;
        org.springframework.beans.factory.config.BeanDefinition $r7;
        java.lang.Class r1;
        org.apache.commons.logging.Log $r4, $r10;
        java.lang.StringBuilder $r9, $r11;
        java.lang.String r2, $r12;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r5;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r6;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource $r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource createBeanFactoryBasedTargetSource(java.lang.Class,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r10 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Configuring AbstractBeanFactoryBasedTargetSource: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label2:
        $r5 = virtualinvoke r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.beans.factory.support.DefaultListableBeanFactory getInternalBeanFactoryForBean(java.lang.String)>(r2);

        $r6 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        $r7 = interfaceinvoke $r6.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r2);

        $r8 = new org.springframework.beans.factory.support.GenericBeanDefinition;

        specialinvoke $r8.<org.springframework.beans.factory.support.GenericBeanDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition)>($r7);

        $z1 = virtualinvoke r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: boolean isPrototypeBased()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r8.<org.springframework.beans.factory.support.GenericBeanDefinition: void setScope(java.lang.String)>("prototype");

     label3:
        virtualinvoke $r5.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r2, $r8);

        virtualinvoke $r3.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void setTargetBeanName(java.lang.String)>(r2);

        virtualinvoke $r3.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>($r5);

        return $r3;
    }

    protected org.springframework.beans.factory.support.DefaultListableBeanFactory getInternalBeanFactoryForBean(java.lang.String)
    {
        java.lang.Throwable $r8;
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r0;
        java.util.Map $r1, $r3, $r7;
        java.lang.Object $r4;
        java.lang.String r2;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r6, r9;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r5;

        r0 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: java.util.Map internalBeanFactories>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: java.util.Map internalBeanFactories>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r9 = (org.springframework.beans.factory.support.DefaultListableBeanFactory) $r4;

        if r9 != null goto label2;

        $r5 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        $r6 = virtualinvoke r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: org.springframework.beans.factory.support.DefaultListableBeanFactory buildInternalBeanFactory(org.springframework.beans.factory.config.ConfigurableBeanFactory)>($r5);

        r9 = $r6;

        $r7 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: java.util.Map internalBeanFactories>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

     label2:
        exitmonitor $r1;

     label3:
        return r9;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected org.springframework.beans.factory.support.DefaultListableBeanFactory buildInternalBeanFactory(org.springframework.beans.factory.config.ConfigurableBeanFactory)
    {
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r5;
        java.util.Iterator $r3;
        java.util.List $r2;
        java.lang.Object $r4;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r0;
        org.springframework.beans.factory.config.ConfigurableBeanFactory r1;
        boolean $z0, $z1;

        r5 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        r1 := @parameter0: org.springframework.beans.factory.config.ConfigurableBeanFactory;

        $r0 = new org.springframework.beans.factory.support.DefaultListableBeanFactory;

        specialinvoke $r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void <init>(org.springframework.beans.factory.BeanFactory)>(r1);

        virtualinvoke $r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)>(r1);

        $r2 = virtualinvoke $r0.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.springframework.aop.framework.AopInfrastructureBean;

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return $r0;
    }

    public void destroy()
    {
        java.lang.Throwable $r7;
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r0;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        java.util.Map $r1, $r2;
        java.lang.Object $r5;
        org.springframework.beans.factory.support.DefaultListableBeanFactory r6;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        $r1 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: java.util.Map internalBeanFactories>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator: java.util.Map internalBeanFactories>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.springframework.beans.factory.support.DefaultListableBeanFactory) $r5;

        virtualinvoke r6.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void destroySingletons()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected boolean isPrototypeBased()
    {
        org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator r0;

        r0 := @this: org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator;

        return 1;
    }

    protected abstract org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource createBeanFactoryBasedTargetSource(java.lang.Class, java.lang.String);
}
