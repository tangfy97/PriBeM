public final class org.apache.lucene.analysis.core.TypeTokenFilter extends org.apache.lucene.analysis.util.FilteringTokenFilter
{
    private final java.util.Set stopTypes;
    private final org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute;
    private final boolean useWhiteList;

    public void <init>(boolean, org.apache.lucene.analysis.TokenStream, java.util.Set, boolean)
    {
        org.apache.lucene.analysis.core.TypeTokenFilter r0;
        org.apache.lucene.analysis.TokenStream r1;
        java.util.Set r4;
        org.apache.lucene.util.Attribute $r2;
        boolean z0, z1;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r3;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilter;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r4 := @parameter2: java.util.Set;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.util.FilteringTokenFilter: void <init>(boolean,org.apache.lucene.analysis.TokenStream)>(z0, r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TypeAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.TypeAttribute) $r2;

        r0.<org.apache.lucene.analysis.core.TypeTokenFilter: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute> = $r3;

        r0.<org.apache.lucene.analysis.core.TypeTokenFilter: java.util.Set stopTypes> = r4;

        r0.<org.apache.lucene.analysis.core.TypeTokenFilter: boolean useWhiteList> = z1;

        return;
    }

    public void <init>(boolean, org.apache.lucene.analysis.TokenStream, java.util.Set)
    {
        org.apache.lucene.analysis.core.TypeTokenFilter r0;
        org.apache.lucene.analysis.TokenStream r1;
        java.util.Set r2;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilter;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r2 := @parameter2: java.util.Set;

        specialinvoke r0.<org.apache.lucene.analysis.core.TypeTokenFilter: void <init>(boolean,org.apache.lucene.analysis.TokenStream,java.util.Set,boolean)>(z0, r1, r2, 0);

        return;
    }

    protected boolean accept()
    {
        org.apache.lucene.analysis.core.TypeTokenFilter r0;
        java.util.Set $r2;
        java.lang.String $r3;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.core.TypeTokenFilter;

        $z0 = r0.<org.apache.lucene.analysis.core.TypeTokenFilter: boolean useWhiteList>;

        $r2 = r0.<org.apache.lucene.analysis.core.TypeTokenFilter: java.util.Set stopTypes>;

        $r1 = r0.<org.apache.lucene.analysis.core.TypeTokenFilter: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute>;

        $r3 = interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.TypeAttribute: java.lang.String type()>();

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != $z1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
