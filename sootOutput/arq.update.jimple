public class arq.update extends arq.cmdline.CmdUpdate
{
    static final arq.cmdline.ArgDecl updateArg;
    static final arq.cmdline.ArgDecl dumpArg;
    java.util.List requestFiles;
    boolean dump;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.update $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.update;

        specialinvoke $r0.<arq.update: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.update: void mainRun()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        arq.update r0;
        arq.cmdline.ArgDecl $r2, $r3;
        java.lang.String[] r1;

        r0 := @this: arq.update;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdUpdate: void <init>(java.lang.String[])>(r1);

        r0.<arq.update: java.util.List requestFiles> = null;

        r0.<arq.update: boolean dump> = 0;

        $r2 = <arq.update: arq.cmdline.ArgDecl updateArg>;

        specialinvoke r0.<arq.cmdline.CmdUpdate: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r2, "--update=FILE", "Update commands to execute");

        $r3 = <arq.update: arq.cmdline.ArgDecl dumpArg>;

        specialinvoke r0.<arq.cmdline.CmdUpdate: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--dump", "Dump the resulting graph store");

        return;
    }

    protected void processModulesAndArgs()
    {
        java.util.List $r2;
        arq.update r0;
        arq.cmdline.ArgDecl $r1, $r3;
        boolean $z0;

        r0 := @this: arq.update;

        $r1 = <arq.update: arq.cmdline.ArgDecl updateArg>;

        $r2 = virtualinvoke r0.<arq.update: java.util.List getValues(arq.cmdline.ArgDecl)>($r1);

        r0.<arq.update: java.util.List requestFiles> = $r2;

        $r3 = <arq.update: arq.cmdline.ArgDecl dumpArg>;

        $z0 = virtualinvoke r0.<arq.update: boolean contains(arq.cmdline.ArgDecl)>($r3);

        r0.<arq.update: boolean dump> = $z0;

        specialinvoke r0.<arq.cmdline.CmdUpdate: void processModulesAndArgs()>();

        return;
    }

    protected java.lang.String getCommandName()
    {
        java.lang.String $r1;
        arq.update r0;

        r0 := @this: arq.update;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String getSummary()
    {
        arq.update r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: arq.update;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<arq.update: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --desc=assembler [--dump] --update=<request file>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void execUpdate(com.hp.hpl.jena.update.GraphStore)
    {
        java.lang.Throwable $r17, $r18;
        com.hp.hpl.jena.update.GraphStore r2;
        com.hp.hpl.jena.sparql.core.TransactionalNull $r23;
        arq.update r0;
        int $i0, $i1;
        java.lang.String $r11, r20, r21;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r9;
        org.apache.jena.riot.Lang $r8;
        java.util.Iterator $r5, $r7;
        com.hp.hpl.jena.sparql.core.Transactional r3, $r19;
        java.util.List $r1, $r4, $r6, $r15;
        com.hp.hpl.jena.query.ReadWrite $r12, $r14;
        arq.cmd.CmdException $r22;
        java.lang.Object $r10, $r13;

        r0 := @this: arq.update;

        r2 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        $r1 = r0.<arq.update: java.util.List requestFiles>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        $r15 = virtualinvoke r0.<arq.update: java.util.List getPositional()>();

        $i1 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i1 != 0 goto label01;

        $r22 = new arq.cmd.CmdException;

        specialinvoke $r22.<arq.cmd.CmdException: void <init>(java.lang.String)>("Nothing to do");

        throw $r22;

     label01:
        $z0 = r2 instanceof com.hp.hpl.jena.sparql.core.Transactional;

        if $z0 == 0 goto label02;

        $r19 = (com.hp.hpl.jena.sparql.core.Transactional) r2;

        goto label03;

     label02:
        $r23 = new com.hp.hpl.jena.sparql.core.TransactionalNull;

        $r19 = $r23;

        specialinvoke $r23.<com.hp.hpl.jena.sparql.core.TransactionalNull: void <init>()>();

     label03:
        r3 = $r19;

        $r4 = r0.<arq.update: java.util.List requestFiles>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r13 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r13;

     label05:
        $r14 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void begin(com.hp.hpl.jena.query.ReadWrite)>($r14);

        specialinvoke r0.<arq.update: void execOneFile(java.lang.String,com.hp.hpl.jena.update.GraphStore)>(r20, r2);

        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void commit()>();

     label06:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void end()>();

        goto label09;

     label07:
        $r18 := @caughtexception;

     label08:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void end()>();

        throw $r18;

     label09:
        goto label04;

     label10:
        $r6 = specialinvoke r0.<arq.cmdline.CmdUpdate: java.util.List getPositional()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r10 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r10;

        $r11 = virtualinvoke r0.<arq.update: java.lang.String indirect(java.lang.String)>(r21);

     label12:
        $r12 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void begin(com.hp.hpl.jena.query.ReadWrite)>($r12);

        specialinvoke r0.<arq.update: void execOne(java.lang.String,com.hp.hpl.jena.update.GraphStore)>($r11, r2);

        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void commit()>();

     label13:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void end()>();

        goto label16;

     label14:
        $r17 := @caughtexception;

     label15:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.Transactional: void end()>();

        throw $r17;

     label16:
        goto label11;

     label17:
        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r2);

        $z2 = r0.<arq.update: boolean dump>;

        if $z2 == 0 goto label18;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NQUADS>;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.Lang)>($r9, r2, $r8);

     label18:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private void execOneFile(java.lang.String, com.hp.hpl.jena.update.GraphStore)
    {
        com.hp.hpl.jena.query.Syntax $r2;
        com.hp.hpl.jena.update.GraphStore r4;
        arq.update r1;
        java.lang.String r0;
        com.hp.hpl.jena.update.UpdateProcessor $r5;
        com.hp.hpl.jena.update.UpdateRequest $r3;

        r1 := @this: arq.update;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: com.hp.hpl.jena.update.GraphStore;

        $r2 = r1.<arq.update: com.hp.hpl.jena.query.Syntax updateSyntax>;

        $r3 = staticinvoke <com.hp.hpl.jena.update.UpdateFactory: com.hp.hpl.jena.update.UpdateRequest read(java.lang.String,com.hp.hpl.jena.query.Syntax)>(r0, $r2);

        $r5 = staticinvoke <com.hp.hpl.jena.update.UpdateExecutionFactory: com.hp.hpl.jena.update.UpdateProcessor create(com.hp.hpl.jena.update.UpdateRequest,com.hp.hpl.jena.update.GraphStore)>($r3, r4);

        interfaceinvoke $r5.<com.hp.hpl.jena.update.UpdateProcessor: void execute()>();

        return;
    }

    private void execOne(java.lang.String, com.hp.hpl.jena.update.GraphStore)
    {
        com.hp.hpl.jena.query.Syntax $r2;
        com.hp.hpl.jena.update.GraphStore r4;
        arq.update r1;
        java.lang.String r0;
        com.hp.hpl.jena.update.UpdateProcessor $r5;
        com.hp.hpl.jena.update.UpdateRequest $r3;

        r1 := @this: arq.update;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: com.hp.hpl.jena.update.GraphStore;

        $r2 = r1.<arq.update: com.hp.hpl.jena.query.Syntax updateSyntax>;

        $r3 = staticinvoke <com.hp.hpl.jena.update.UpdateFactory: com.hp.hpl.jena.update.UpdateRequest create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(r0, $r2);

        $r5 = staticinvoke <com.hp.hpl.jena.update.UpdateExecutionFactory: com.hp.hpl.jena.update.UpdateProcessor create(com.hp.hpl.jena.update.UpdateRequest,com.hp.hpl.jena.update.GraphStore)>($r3, r4);

        interfaceinvoke $r5.<com.hp.hpl.jena.update.UpdateProcessor: void execute()>();

        return;
    }

    static void <clinit>()
    {
        arq.cmdline.ArgDecl $r0, $r2;
        java.lang.String[] $r1, $r3;

        $r0 = new arq.cmdline.ArgDecl;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "file";

        specialinvoke $r0.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "update", $r1);

        <arq.update: arq.cmdline.ArgDecl updateArg> = $r0;

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "dump", $r3);

        <arq.update: arq.cmdline.ArgDecl dumpArg> = $r2;

        return;
    }
}
