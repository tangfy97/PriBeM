class com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis extends java.lang.Object
{
    final com.mycila.inject.internal.guava.collect.ImmutableSet choices;
    final com.mycila.inject.internal.guava.collect.ImmutableList choicesList;
    final int dividend;
    final com.mycila.inject.internal.guava.collect.Sets$CartesianSet this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Sets$CartesianSet, java.util.Set, int)
    {
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet r1;
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis r0;
        int i0;
        java.util.Set r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r5;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Sets$CartesianSet;

        r2 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.Sets$CartesianSet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Collection)>(r2);

        r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices> = $r3;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableList asList()>();

        r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableList choicesList> = $r5;

        r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: int dividend> = i0;

        return;
    }

    int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: int size()>();

        return $i0;
    }

    java.lang.Object getForIndex(int)
    {
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableList choicesList>;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: int dividend>;

        $i2 = i0 / $i1;

        $i3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: int size()>();

        $i4 = $i2 % $i3;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>($i4);

        return $r2;
    }

    boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis r1, r2;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3, $r4;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis) r0;

        $r4 = r2.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $z1 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis r0;
        com.mycila.inject.internal.guava.collect.Sets$CartesianSet $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.Sets$CartesianSet this$0>;

        $i0 = $r1.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet: int size>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $i1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableSet: int size()>();

        $i2 = $i0 / $i1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Sets$CartesianSet$Axis: com.mycila.inject.internal.guava.collect.ImmutableSet choices>;

        $i3 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableSet: int hashCode()>();

        $i4 = $i2 * $i3;

        return $i4;
    }
}
