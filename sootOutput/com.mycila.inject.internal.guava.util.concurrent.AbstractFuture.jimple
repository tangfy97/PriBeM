public abstract class com.mycila.inject.internal.guava.util.concurrent.AbstractFuture extends java.lang.Object implements com.mycila.inject.internal.guava.util.concurrent.ListenableFuture
{
    private final com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync;
    private final com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList;

    public void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r2;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync;

        specialinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: void <init>()>();

        r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync> = $r1;

        $r2 = new com.mycila.inject.internal.guava.util.concurrent.ExecutionList;

        specialinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void <init>()>();

        r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList> = $r2;

        return;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.TimeUnit r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r2;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        long l0, $l1;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: java.lang.Object get(long)>($l1);

        return $r3;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: java.lang.Object get()>();

        return $r2;
    }

    public boolean isDone()
    {
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: boolean isDone()>();

        return $z0;
    }

    public boolean isCancelled()
    {
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: boolean isCancelled()>();

        return $z0;
    }

    public boolean cancel(boolean)
    {
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        boolean $z0, z1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        z1 := @parameter0: boolean;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: boolean cancel()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void done()>();

        if z1 == 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void interruptTask()>();

     label2:
        return 1;
    }

    protected void interruptTask()
    {
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        return;
    }

    public void addListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r3;
        java.util.concurrent.Executor r2;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        java.lang.Runnable r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList>;

        virtualinvoke $r3.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void add(java.lang.Runnable,java.util.concurrent.Executor)>(r1, r2);

        return;
    }

    protected boolean set(java.lang.Object)
    {
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r2;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: boolean set(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void done()>();

     label1:
        return $z0;
    }

    protected boolean setException(java.lang.Throwable)
    {
        java.lang.Throwable r1, $r4;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        java.lang.Error $r5;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Throwable) $r3;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: boolean setException(java.lang.Throwable)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void done()>();

     label1:
        $z1 = r1 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r5 = (java.lang.Error) r1;

        throw $r5;

     label2:
        return $z0;
    }

    protected final boolean cancel()
    {
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync sync>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture$Sync: boolean cancel()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void done()>();

     label1:
        return $z0;
    }

    protected void done()
    {
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r1;
        com.mycila.inject.internal.guava.util.concurrent.AbstractFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.AbstractFuture;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList>;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void execute()>();

        return;
    }
}
