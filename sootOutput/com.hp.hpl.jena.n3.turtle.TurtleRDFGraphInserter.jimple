public class com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter extends java.lang.Object implements com.hp.hpl.jena.n3.turtle.TurtleEventHandler
{
    com.hp.hpl.jena.graph.Graph graph;

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter: com.hp.hpl.jena.graph.Graph graph> = null;

        r0.<com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter: com.hp.hpl.jena.graph.Graph graph> = r1;

        return;
    }

    public void triple(int, int, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.graph.Triple r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r26, $r27;
        int i0, i1;
        java.lang.String $r12, $r20, $r28;
        com.hp.hpl.jena.graph.Graph $r29;
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r5, $r13, $r21;
        com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter r4;

        r4 := @this: com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        $z5 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 != 0 goto label1;

        $r21 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Subject is not a URI or blank node");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label1:
        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 != 0 goto label2;

        $r13 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Predicate is not a URI");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r20);

        throw $r13;

     label2:
        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 != 0 goto label3;

        $r5 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Object is not a URI, blank node or literal");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label3:
        $r29 = r4.<com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r29.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r0);

        return;
    }

    public void startFormula(int, int)
    {
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r0;
        com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter r8;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r8 := @this: com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Formula found");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public void endFormula(int, int)
    {
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r0;
        com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter r8;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r8 := @this: com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Formula found");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public void prefix(int, int, java.lang.String, java.lang.String)
    {
        int i0, i1;
        java.lang.String r3, r4;
        com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r3, r4);

        return;
    }
}
