public class arq.cmdline.ModAssembler extends arq.cmdline.ModBase
{
    public static final arq.cmdline.ArgDecl assemblerDescDecl;
    private java.lang.String assemblerFile;
    java.lang.Object thingDescribed;

    public void <init>()
    {
        arq.cmdline.ModAssembler r0;

        r0 := @this: arq.cmdline.ModAssembler;

        specialinvoke r0.<arq.cmdline.ModBase: void <init>()>();

        r0.<arq.cmdline.ModAssembler: java.lang.String assemblerFile> = null;

        r0.<arq.cmdline.ModAssembler: java.lang.Object thingDescribed> = null;

        staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: void init()>();

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.CmdArgModule r0;
        arq.cmdline.ArgDecl $r1, $r3;
        java.lang.String $r4;
        boolean $z0;
        arq.cmdline.ModAssembler r2;

        r2 := @this: arq.cmdline.ModAssembler;

        r0 := @parameter0: arq.cmdline.CmdArgModule;

        $r1 = <arq.cmdline.ModAssembler: arq.cmdline.ArgDecl assemblerDescDecl>;

        $z0 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <arq.cmdline.ModAssembler: arq.cmdline.ArgDecl assemblerDescDecl>;

        $r4 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.lang.String getValue(arq.cmdline.ArgDecl)>($r3);

        r2.<arq.cmdline.ModAssembler: java.lang.String assemblerFile> = $r4;

     label1:
        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r1;
        arq.cmdline.ModAssembler r2;

        r2 := @this: arq.cmdline.ModAssembler;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r1 = <arq.cmdline.ModAssembler: arq.cmdline.ArgDecl assemblerDescDecl>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r1, "--desc=", "Assembler description file");

        return;
    }

    public java.lang.String getAssemblerFile()
    {
        java.lang.String $r1;
        arq.cmdline.ModAssembler r0;

        r0 := @this: arq.cmdline.ModAssembler;

        $r1 = r0.<arq.cmdline.ModAssembler: java.lang.String assemblerFile>;

        return $r1;
    }

    public java.lang.Object create(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.shared.JenaException $r6;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.lang.Exception $r4;
        com.hp.hpl.jena.shared.NotFoundException $r7;
        arq.cmdline.ModAssembler r0;
        arq.cmd.CmdException $r5, $r8;
        java.lang.Object $r3;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r2, $r11, $r13;
        com.hp.hpl.jena.sparql.ARQException $r14;

        r0 := @this: arq.cmdline.ModAssembler;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

     label1:
        $r2 = r0.<arq.cmdline.ModAssembler: java.lang.String assemblerFile>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: java.lang.Object build(java.lang.String,com.hp.hpl.jena.rdf.model.Resource)>($r2, r1);

     label2:
        goto label7;

     label3:
        $r14 := @caughtexception;

        throw $r14;

     label4:
        $r7 := @caughtexception;

        $r8 = new arq.cmd.CmdException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found: ");

        $r11 = virtualinvoke $r7.<com.hp.hpl.jena.shared.NotFoundException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<arq.cmd.CmdException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label5:
        $r6 := @caughtexception;

        throw $r6;

     label6:
        $r4 := @caughtexception;

        $r5 = new arq.cmd.CmdException;

        specialinvoke $r5.<arq.cmd.CmdException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating", $r4);

        throw $r5;

     label7:
        return $r3;

        catch com.hp.hpl.jena.sparql.ARQException from label1 to label2 with label3;
        catch com.hp.hpl.jena.shared.NotFoundException from label1 to label2 with label4;
        catch com.hp.hpl.jena.shared.JenaException from label1 to label2 with label5;
        catch java.lang.Exception from label1 to label2 with label6;
    }

    static void <clinit>()
    {
        arq.cmdline.ArgDecl $r0;
        java.lang.String[] $r1;

        $r0 = new arq.cmdline.ArgDecl;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "dataset";

        specialinvoke $r0.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "desc", $r1);

        <arq.cmdline.ModAssembler: arq.cmdline.ArgDecl assemblerDescDecl> = $r0;

        return;
    }
}
