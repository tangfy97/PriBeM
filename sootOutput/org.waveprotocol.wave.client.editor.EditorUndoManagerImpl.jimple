public class org.waveprotocol.wave.client.editor.EditorUndoManagerImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.EditorUndoManager
{
    private final org.waveprotocol.wave.model.operation.SilentOperationSink sink;
    private final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper;
    private final java.util.Stack undoSelectionStack;
    private final java.util.Stack redoSelectionStack;
    private final org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager;
    private org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint;
    private static final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private static final org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION;
    private boolean bypass;

    public void <init>(org.waveprotocol.wave.model.undo.UndoManagerPlus, org.waveprotocol.wave.model.operation.SilentOperationSink, org.waveprotocol.wave.client.editor.selection.content.SelectionHelper)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r4;
        org.waveprotocol.wave.model.undo.UndoManagerPlus r3;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r5;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;
        java.util.Stack $r1, $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.undo.UndoManagerPlus;

        r4 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack> = $r1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack> = $r2;

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: boolean bypass> = 0;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "UndoManager must not be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "Op sink must not be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "Selection helper must not be null");

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = r4;

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager> = r3;

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper> = r5;

        return;
    }

    public void undoableOp(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r9, $r23;
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3, $r8, $r14, $r22;
        java.lang.StringBuilder $r7, $r10, $r12, $r21, $r24, $r27, $r28, $r30;
        java.lang.Object[] $r6, $r20;
        org.waveprotocol.wave.common.logging.Logger $r4, $r15;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;
        java.util.Stack $r5, $r11, $r29, $r35, $r38;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1, $r17, $r18, $r19, $r25, $r26, $r32, $r33, $r36;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r16;
        java.lang.String $r13, $r31;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r34, $r37;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: boolean bypass>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint>;

        if $r1 == null goto label6;

        $r14 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z2 = interfaceinvoke $r15.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z2 == 0 goto label4;

        $r22 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r23 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $r20 = newarray (java.lang.Object)[1];

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkpointing, selection known?");

        $r26 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint>;

        $r25 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        if $r26 == $r25 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" undo selection stack size: ");

        $r29 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack>;

        $i1 = virtualinvoke $r29.<java.util.Stack: int size()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20[0] = $r31;

        interfaceinvoke $r22.<org.waveprotocol.wave.common.logging.LoggerBundle: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r23, $r20);

     label4:
        $r32 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint>;

        $r33 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        if $r32 != $r33 goto label5;

        $r16 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint> = $r17;

        $r18 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint>;

        if $r18 != null goto label5;

        $r19 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint> = $r19;

     label5:
        $r34 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        interfaceinvoke $r34.<org.waveprotocol.wave.model.undo.UndoManagerPlus: void checkpoint()>();

        $r35 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack>;

        $r36 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint>;

        virtualinvoke $r35.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r36);

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint> = null;

     label6:
        $r37 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        interfaceinvoke $r37.<org.waveprotocol.wave.model.undo.UndoManagerPlus: void undoableOp(java.lang.Object)>(r2);

        $r38 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        $i2 = virtualinvoke $r38.<java.util.Stack: int size()>();

        if $i2 == 0 goto label8;

        $r3 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z1 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z1 == 0 goto label7;

        $r8 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r9 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("redoStack cleared ");

        $r11 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        $i0 = virtualinvoke $r11.<java.util.Stack: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r13;

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.LoggerBundle: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r9, $r6);

     label7:
        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        virtualinvoke $r5.<java.util.Stack: void clear()>();

     label8:
        return;
    }

    public void nonUndoableOp(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r2;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: boolean bypass>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.undo.UndoManagerPlus: void nonUndoableOp(java.lang.Object)>(r1);

        return;
    }

    public void maybeCheckpoint()
    {
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1, $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint>;

        if $r1 != null goto label1;

        $r2 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint> = $r2;

     label1:
        return;
    }

    public void maybeCheckpoint(int, int)
    {
        org.waveprotocol.wave.model.document.util.FocusedRange $r1;
        int i0, i1;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.waveprotocol.wave.model.document.util.FocusedRange;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>(i0, i1);

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange pendingCheckpoint> = $r1;

        return;
    }

    public void undo()
    {
        java.lang.Object[] $r5;
        org.waveprotocol.wave.common.logging.Logger $r4, $r24;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r8;
        org.waveprotocol.wave.model.document.operation.DocOp r15, r17;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;
        java.util.Stack $r10, $r21, $r22, $r25;
        org.waveprotocol.wave.model.document.util.FocusedRange $r19, $r20;
        int $i0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r18;
        java.lang.String $r12;
        boolean $z0;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r1;
        org.waveprotocol.wave.model.util.Pair $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3, $r7, $r23;
        java.lang.StringBuilder $r6, $r9, $r11;
        java.lang.Object $r13, $r14, $r16;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerPlus: org.waveprotocol.wave.model.util.Pair undoPlus()>();

        if $r2 == null goto label1;

        $r13 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        if $r13 != null goto label3;

     label1:
        $r3 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z0 == 0 goto label2;

        $r7 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot undo ");

        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack>;

        $i0 = virtualinvoke $r10.<java.util.Stack: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r12;

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r8, $r5);

     label2:
        return;

     label3:
        $r14 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        r15 = (org.waveprotocol.wave.model.document.operation.DocOp) $r14;

        $r16 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object second>;

        r17 = (org.waveprotocol.wave.model.document.operation.DocOp) $r16;

        $r18 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        if $r19 == null goto label4;

        $r25 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        virtualinvoke $r25.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r19);

        goto label5;

     label4:
        $r21 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        $r20 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        virtualinvoke $r21.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r20);

     label5:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: void bypassUndoStack(org.waveprotocol.wave.model.document.operation.DocOp)>(r15);

        $r22 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange restoreSelectionAfterUndoRedo(org.waveprotocol.wave.model.document.operation.DocOp,java.util.Stack)>(r17, $r22);

        $r23 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r24 = interfaceinvoke $r23.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r24.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Undoing!");

        return;
    }

    public void redo()
    {
        java.lang.Object[] $r5;
        org.waveprotocol.wave.common.logging.Logger $r4, $r24;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r8;
        org.waveprotocol.wave.model.document.operation.DocOp r15, r17;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;
        java.util.Stack $r10, $r21, $r22, $r25;
        org.waveprotocol.wave.model.document.util.FocusedRange $r19, $r20;
        int $i0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r18;
        java.lang.String $r12;
        boolean $z0;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r1;
        org.waveprotocol.wave.model.util.Pair $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3, $r7, $r23;
        java.lang.StringBuilder $r6, $r9, $r11;
        java.lang.Object $r13, $r14, $r16;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerPlus: org.waveprotocol.wave.model.util.Pair redoPlus()>();

        if $r2 == null goto label1;

        $r13 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        if $r13 != null goto label3;

     label1:
        $r3 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z0 == 0 goto label2;

        $r7 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot redo ");

        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        $i0 = virtualinvoke $r10.<java.util.Stack: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r12;

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r8, $r5);

     label2:
        return;

     label3:
        $r14 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        r15 = (org.waveprotocol.wave.model.document.operation.DocOp) $r14;

        $r16 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object second>;

        r17 = (org.waveprotocol.wave.model.document.operation.DocOp) $r16;

        $r18 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        if $r19 == null goto label4;

        $r25 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack>;

        virtualinvoke $r25.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r19);

        goto label5;

     label4:
        $r21 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack undoSelectionStack>;

        $r20 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        virtualinvoke $r21.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r20);

     label5:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: void bypassUndoStack(org.waveprotocol.wave.model.document.operation.DocOp)>(r15);

        $r22 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: java.util.Stack redoSelectionStack>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange restoreSelectionAfterUndoRedo(org.waveprotocol.wave.model.document.operation.DocOp,java.util.Stack)>(r17, $r22);

        $r23 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r24 = interfaceinvoke $r23.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r24.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Redoing!");

        return;
    }

    private void bypassUndoStack(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r2;
        java.lang.Throwable $r3;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: boolean bypass> = 1;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r1);

     label2:
        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: boolean bypass> = 0;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: boolean bypass> = 0;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private org.waveprotocol.wave.model.document.util.FocusedRange restoreSelectionAfterUndoRedo(org.waveprotocol.wave.model.document.operation.DocOp, java.util.Stack)
    {
        java.lang.Object[] $r6, $r9;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r7, $r10;
        org.waveprotocol.wave.model.document.operation.DocOp r3;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl r4;
        java.util.Stack r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r8, $r11;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2, r12;
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r5;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        r0 := @parameter1: java.util.Stack;

        $z0 = virtualinvoke r0.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r11 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r10 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "SelectionStack empty! This probably shouldn\'t be reached, but we can live with it.";

        interfaceinvoke $r11.<org.waveprotocol.wave.common.logging.LoggerBundle: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r10, $r9);

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.util.Stack: java.lang.Object pop()>();

        r12 = (org.waveprotocol.wave.model.document.util.FocusedRange) $r1;

        $r2 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION>;

        if r12 != $r2 goto label2;

        $r8 = <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r7 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "unknown selection";

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.LoggerBundle: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r7, $r6);

        return null;

     label2:
        if r3 == null goto label3;

        r12 = staticinvoke <org.waveprotocol.wave.client.editor.content.RangeHelper: org.waveprotocol.wave.model.document.util.FocusedRange applyModifier(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.util.FocusedRange)>(r3, r12);

     label3:
        $r5 = r4.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)>(r12);

        return r12;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.debug.logger.DomLogger $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r4;
        org.waveprotocol.wave.model.document.util.FocusedRange $r3;

        $r2 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r2.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("undo");

        $r4 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r2;

        <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r4;

        $r3 = new org.waveprotocol.wave.model.document.util.FocusedRange;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>(0, 0);

        <org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: org.waveprotocol.wave.model.document.util.FocusedRange UNKNOWN_SELECTION> = $r3;

        return;
    }
}
