public class org.waveprotocol.wave.client.editor.content.paragraph.LineRendering extends java.lang.Object
{
    public static final org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser DEFAULT_PARAGRAPHISER;
    public static final org.waveprotocol.wave.client.editor.content.Renderer DEFAULT_RENDERER;
    public static final org.waveprotocol.wave.client.editor.NodeEventHandler DEFAULT_PARAGRAPH_EVENT_HANDLER;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LineRendering r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.LineRendering;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerContainer(java.lang.String, org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser $r2;
        org.waveprotocol.wave.client.editor.content.Renderer $r3;
        org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer $r4;
        java.lang.String r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void registerLineContainerTagname(java.lang.String)>(r0);

        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser DEFAULT_PARAGRAPHISER>;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeMutationHandler)>(r0, $r2);

        $r3 = <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.content.Renderer DEFAULT_RENDERER>;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.Renderer)>(r0, $r3);

        $r4 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderers: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer SHALLOW_CLONE_RENDERER>;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerNiceHtmlRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer)>(r0, $r4);

        return;
    }

    public static void registerLines(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler $r5;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser $r4;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r2;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer DEFAULT_RENDERER>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: void registerParagraphRenderer(org.waveprotocol.wave.client.editor.ElementHandlerRegistry,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>(r0, $r1);

        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.NodeEventHandler DEFAULT_PARAGRAPH_EVENT_HANDLER>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>("l:p", $r2);

        $r3 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer DEFAULT_NICE_HTML_RENDERER>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerNiceHtmlRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer)>("l:p", $r3);

        $r4 = <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser DEFAULT_PARAGRAPHISER>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser$LineHandler getLineHandler()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderingMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>("line", $r5);

        return;
    }

    public static void registerParagraphRenderer(org.waveprotocol.wave.client.editor.ElementHandlerRegistry, org.waveprotocol.wave.client.editor.RenderingMutationHandler)
    {
        org.waveprotocol.wave.client.editor.RenderingMutationHandler r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.RenderingMutationHandler;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderingMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>("l:p", r1);

        return;
    }

    public static boolean isLineContainerElement(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, r0);

        return $z0;
    }

    public static boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean isNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode,java.lang.String)>(r0, "line");

        return $z0;
    }

    public static boolean isLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = "line";

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public static boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean isNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode,java.lang.String)>(r0, "l:p");

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser $r0;
        org.waveprotocol.wave.client.editor.content.paragraph.LineRendering$1 $r1;

        $r0 = new org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser DEFAULT_PARAGRAPHISER> = $r0;

        $r1 = new org.waveprotocol.wave.client.editor.content.paragraph.LineRendering$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.LineRendering$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.content.Renderer DEFAULT_RENDERER> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.LocalParagraphEventHandler: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: org.waveprotocol.wave.client.editor.NodeEventHandler DEFAULT_PARAGRAPH_EVENT_HANDLER> = $r2;

        return;
    }
}
