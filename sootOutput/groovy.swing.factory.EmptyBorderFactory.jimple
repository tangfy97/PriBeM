public class groovy.swing.factory.EmptyBorderFactory extends groovy.swing.factory.SwingBorderFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697196;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$RuntimeException;
    static java.lang.Class class$javax$swing$BorderFactory;
    static java.lang.Class class$java$lang$Integer;

    public void <init>()
    {
        groovy.swing.factory.EmptyBorderFactory r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void <init>()>();

        $r1 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.EmptyBorderFactory");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        java.lang.Integer $r46, $r47, $r48, $r49, $r66, $r76;
        java.util.Map r3;
        groovy.swing.factory.EmptyBorderFactory r61;
        java.lang.Throwable $r16, $r45, $r56;
        java.lang.Object[] $r4, $r10, $r12, $r17, $r21, $r25, $r29, $r34, $r40, $r42, $r51, $r53, $r59, $r64, $r67, $r70, $r78;
        groovy.lang.Reference $r57;
        int[] $r65;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        groovy.util.FactoryBuilderSupport r6;
        org.codehaus.groovy.runtime.GStringImpl $r11, $r41, $r52;
        groovy.swing.factory.EmptyBorderFactory$_newInstance_closure1 $r60;
        java.lang.String[] $r14, $r43, $r54;
        int $i0;
        java.lang.Boolean $r58, $r87, $r95, $r96, $r97, $r98;
        java.lang.Class $r0, r1, $r2, $r9, $r19, $r23, $r27, $r31, $r33, $r36, $r39, $r50, $r63, $r68, $r72, $r77, $r80, $r83, $r84, $r85, $r86, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r99, $r100, $r101, $r102;
        java.lang.Object $r5, $r7, r8, r13, $r15, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r35, $r37, $r38, $r44, $r55, $r62, $r69, $r71, $r73, $r74, $r75, $r79, $r81, $r82;

        r61 := @this: groovy.swing.factory.EmptyBorderFactory;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r13 := @parameter1: java.lang.Object;

        r8 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r83 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.EmptyBorderFactory");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0> = $r83;

        goto label02;

     label01:
        $r83 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r83;

        $r2 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r84 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r84;

        goto label04;

     label03:
        $r84 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "parent";

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r4);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r6, "context");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r5, r1, $r7, "applyBorderToParent");

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z0 != 0 goto label05;

        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        if $z15 == 0 goto label22;

        $z11 = r8 instanceof java.lang.Integer;

        if $z11 == 0 goto label11;

        $r77 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r77 != null goto label07;

        $r85 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r85;

        goto label08;

     label07:
        $r85 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label08:
        $r78 = newarray (java.lang.Object)[4];

        $r78[0] = r8;

        $r78[1] = r8;

        $r78[2] = r8;

        $r78[3] = r8;

        $r79 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r85, "createEmptyBorder", $r78);

        $r80 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r80 != null goto label09;

        $r86 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object> = $r86;

        goto label10;

     label09:
        $r86 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object>;

     label10:
        $r81 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r79, $r86);

        $r82 = (java.lang.Object) $r81;

        return $r82;

     label11:
        $z12 = r8 instanceof java.util.List;

        if $z12 == 0 goto label12;

        $r75 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r8, "size");

        $r76 = new java.lang.Integer;

        specialinvoke $r76.<java.lang.Integer: void <init>(int)>(4);

        $z14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r75, $r76);

        if $z14 == 0 goto label12;

        $r87 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label13;

     label12:
        $r87 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label13:
        $z16 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r87);

        if $z16 == 0 goto label19;

        $r58 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r57 = new groovy.lang.Reference;

        specialinvoke $r57.<groovy.lang.Reference: void <init>(java.lang.Object)>($r58);

        $r59 = newarray (java.lang.Object)[1];

        $r60 = new groovy.swing.factory.EmptyBorderFactory$_newInstance_closure1;

        specialinvoke $r60.<groovy.swing.factory.EmptyBorderFactory$_newInstance_closure1: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>(r61, r61, $r57);

        $r59[0] = $r60;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r8, "each", $r59);

        $r62 = virtualinvoke $r57.<groovy.lang.Reference: java.lang.Object get()>();

        $z13 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r62);

        if $z13 == 0 goto label18;

        $r63 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r63 != null goto label14;

        $r88 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r88;

        goto label15;

     label14:
        $r88 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label15:
        $r67 = newarray (java.lang.Object)[0];

        $r64 = newarray (java.lang.Object)[1];

        $r64[0] = r8;

        $r65 = newarray (int)[1];

        $r66 = new java.lang.Integer;

        specialinvoke $r66.<java.lang.Integer: void <init>(int)>(0);

        $r68 = <java.lang.Integer: java.lang.Class TYPE>;

        $r69 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r66, $r68);

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r69);

        $r65[0] = $i0;

        $r70 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object[] despreadList(java.lang.Object[],java.lang.Object[],int[])>($r67, $r64, $r65);

        $r71 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r88, "createEmptyBorder", $r70);

        $r72 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r72 != null goto label16;

        $r89 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object> = $r89;

        goto label17;

     label16:
        $r89 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object>;

     label17:
        $r73 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r71, $r89);

        $r74 = (java.lang.Object) $r73;

        return $r74;

     label18:
        goto label19;

     label19:
        $r50 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r50 != null goto label20;

        $r90 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r90;

        goto label21;

     label20:
        $r90 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label21:
        $r51 = newarray (java.lang.Object)[1];

        $r52 = new org.codehaus.groovy.runtime.GStringImpl;

        $r53 = newarray (java.lang.Object)[1];

        $r53[0] = r13;

        $r54 = newarray (java.lang.String)[2];

        $r54[0] = "";

        $r54[1] = " only accepts a single integer or an array of four integers as a value argument";

        specialinvoke $r52.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r53, $r54);

        $r51[0] = $r52;

        $r55 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r90, $r51);

        $r56 = (java.lang.Throwable) $r55;

        throw $r56;

     label22:
        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>(r8, null);

        if $z1 == 0 goto label50;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "top";

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r17);

        $r19 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

        if $r19 != null goto label23;

        $r91 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer> = $r91;

        goto label24;

     label23:
        $r91 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

     label24:
        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r18, $r91);

        $r49 = (java.lang.Integer) $r20;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "left";

        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r21);

        $r23 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

        if $r23 != null goto label25;

        $r92 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer> = $r92;

        goto label26;

     label25:
        $r92 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

     label26:
        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r22, $r92);

        $r48 = (java.lang.Integer) $r24;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "bottom";

        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r25);

        $r27 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

        if $r27 != null goto label27;

        $r93 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer> = $r93;

        goto label28;

     label27:
        $r93 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

     label28:
        $r28 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r26, $r93);

        $r47 = (java.lang.Integer) $r28;

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = "right";

        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r29);

        $r31 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

        if $r31 != null goto label29;

        $r94 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer> = $r94;

        goto label30;

     label29:
        $r94 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Integer>;

     label30:
        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r30, $r94);

        $r46 = (java.lang.Integer) $r32;

        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r49, null);

        if $z2 == 0 goto label32;

     label31:
        $r95 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label33;

     label32:
        $z3 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r49, null);

        if $z3 != 0 goto label31;

        $r95 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label33:
        $z4 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r95);

        if $z4 == 0 goto label35;

     label34:
        $r96 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label36;

     label35:
        $z5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r49, null);

        if $z5 != 0 goto label34;

        $r96 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label36:
        $z6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r96);

        if $z6 == 0 goto label38;

     label37:
        $r97 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label39;

     label38:
        $z7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r49, null);

        if $z7 != 0 goto label37;

        $r97 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label39:
        $z8 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r97);

        if $z8 == 0 goto label41;

     label40:
        $r98 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label42;

     label41:
        $z9 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z9 != 0 goto label40;

        $r98 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label42:
        $z10 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r98);

        if $z10 == 0 goto label45;

        $r39 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r39 != null goto label43;

        $r99 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r99;

        goto label44;

     label43:
        $r99 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label44:
        $r40 = newarray (java.lang.Object)[1];

        $r41 = new org.codehaus.groovy.runtime.GStringImpl;

        $r42 = newarray (java.lang.Object)[1];

        $r42[0] = r13;

        $r43 = newarray (java.lang.String)[2];

        $r43[0] = "When ";

        $r43[1] = " is called it must be call with top:, left:, bottom:, right:, and no other attributes";

        specialinvoke $r41.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r42, $r43);

        $r40[0] = $r41;

        $r44 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r99, $r40);

        $r45 = (java.lang.Throwable) $r44;

        throw $r45;

     label45:
        $r33 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r33 != null goto label46;

        $r100 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r100;

        goto label47;

     label46:
        $r100 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label47:
        $r34 = newarray (java.lang.Object)[4];

        $r34[0] = $r49;

        $r34[1] = $r48;

        $r34[2] = $r47;

        $r34[3] = $r46;

        $r35 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r100, "createEmptyBorder", $r34);

        $r36 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r36 != null goto label48;

        $r101 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object> = $r101;

        goto label49;

     label48:
        $r101 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$Object>;

     label49:
        $r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r35, $r101);

        $r38 = (java.lang.Object) $r37;

        return $r38;

     label50:
        $r9 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r9 != null goto label51;

        $r102 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r102;

        goto label52;

     label51:
        $r102 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label52:
        $r10 = newarray (java.lang.Object)[1];

        $r11 = new org.codehaus.groovy.runtime.GStringImpl;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r13;

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "";

        $r14[1] = " cannot be called with both an argulent value and attributes";

        specialinvoke $r11.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r12, $r14);

        $r10[0] = $r11;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r102, $r10);

        $r16 = (java.lang.Throwable) $r15;

        throw $r16;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.EmptyBorderFactory");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.EmptyBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697196L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.EmptyBorderFactory: java.lang.Long __timeStamp__239_neverHappen1239119697196> = $r5;

        return;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.EmptyBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.EmptyBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$3$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.EmptyBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.EmptyBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$3$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.EmptyBorderFactory r0;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.swing.factory.EmptyBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.EmptyBorderFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.EmptyBorderFactory r0;

        r0 := @this: groovy.swing.factory.EmptyBorderFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
