public class org.apache.pdfbox.pdmodel.edit.PDPageContentStream extends java.lang.Object implements java.io.Closeable
{
    private static final org.apache.commons.logging.Log LOG;
    private java.io.OutputStream output;
    private boolean inTextMode;
    private org.apache.pdfbox.pdmodel.PDResources resources;
    private org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace;
    private org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace;
    private float[] colorComponents;
    private java.text.NumberFormat formatDecimal;
    private static final java.lang.String ISO8859;
    private static final byte[] BEGIN_TEXT;
    private static final byte[] END_TEXT;
    private static final byte[] SET_FONT;
    private static final byte[] MOVE_TEXT_POSITION;
    private static final byte[] SET_TEXT_MATRIX;
    private static final byte[] SHOW_TEXT;
    private static final byte[] SAVE_GRAPHICS_STATE;
    private static final byte[] RESTORE_GRAPHICS_STATE;
    private static final byte[] CONCATENATE_MATRIX;
    private static final byte[] XOBJECT_DO;
    private static final byte[] RG_STROKING;
    private static final byte[] RG_NON_STROKING;
    private static final byte[] K_STROKING;
    private static final byte[] K_NON_STROKING;
    private static final byte[] G_STROKING;
    private static final byte[] G_NON_STROKING;
    private static final byte[] RECTANGLE;
    private static final byte[] FILL_NON_ZERO;
    private static final byte[] FILL_EVEN_ODD;
    private static final byte[] LINE_TO;
    private static final byte[] MOVE_TO;
    private static final byte[] CLOSE_STROKE;
    private static final byte[] STROKE;
    private static final byte[] LINE_WIDTH;
    private static final byte[] LINE_JOIN_STYLE;
    private static final byte[] LINE_CAP_STYLE;
    private static final byte[] LINE_DASH_PATTERN;
    private static final byte[] CLOSE_SUBPATH;
    private static final byte[] CLIP_PATH_NON_ZERO;
    private static final byte[] CLIP_PATH_EVEN_ODD;
    private static final byte[] NOP;
    private static final byte[] BEZIER_312;
    private static final byte[] BEZIER_32;
    private static final byte[] BEZIER_313;
    private static final byte[] BMC;
    private static final byte[] BDC;
    private static final byte[] EMC;
    private static final byte[] SET_STROKING_COLORSPACE;
    private static final byte[] SET_NON_STROKING_COLORSPACE;
    private static final byte[] SET_STROKING_COLOR_SIMPLE;
    private static final byte[] SET_STROKING_COLOR_COMPLEX;
    private static final byte[] SET_NON_STROKING_COLOR_SIMPLE;
    private static final byte[] SET_NON_STROKING_COLOR_COMPLEX;
    private static final byte[] OPENING_BRACKET;
    private static final byte[] CLOSING_BRACKET;
    private static final int SPACE;

    private static byte[] getISOBytes(java.lang.String)
    {
        byte[] $r1;
        java.lang.IllegalStateException $r3;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void <init>(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDPage) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        org.apache.pdfbox.pdmodel.PDPage r2;
        org.apache.pdfbox.pdmodel.PDDocument r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r2 := @parameter1: org.apache.pdfbox.pdmodel.PDPage;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,boolean,boolean)>(r1, r2, 0, 1);

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDPage, boolean, boolean) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.PDDocument r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        org.apache.pdfbox.pdmodel.PDPage r2;
        boolean z0, z1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r2 := @parameter1: org.apache.pdfbox.pdmodel.PDPage;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,boolean,boolean,boolean)>(r1, r2, z0, z1, 0);

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDPage, boolean, boolean, boolean) throws java.io.IOException
    {
        java.util.Locale $r4;
        boolean z0, z1, z2, $z3, z4, $z6, $z7;
        org.apache.pdfbox.pdmodel.PDDocument r9;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        org.apache.pdfbox.pdmodel.PDResources $r11, $r12, $r35, $r36;
        org.apache.pdfbox.cos.COSBase $r19, $r20;
        org.apache.pdfbox.pdmodel.PDPage r6;
        org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray $r1, $r2;
        org.apache.pdfbox.cos.COSArray $r18;
        float[] $r3;
        java.text.NumberFormat $r5, $r33, $r34;
        java.util.ArrayList $r13, $r24, $r26;
        org.apache.pdfbox.cos.COSStream $r17, $r28, $r29;
        java.io.OutputStream $r10, $r23, $r32;
        org.apache.pdfbox.cos.COSName $r14, $r25, $r27;
        org.apache.pdfbox.pdmodel.common.COSStreamArray $r21, r30;
        org.apache.pdfbox.pdmodel.common.PDStream $r7, $r8, $r16, $r22, $r31;
        org.apache.commons.logging.Log $r15;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r9 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r6 := @parameter1: org.apache.pdfbox.pdmodel.PDPage;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z4 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode> = 0;

        $r1 = new org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;

        specialinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace> = $r1;

        $r2 = new org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;

        specialinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace> = $r2;

        $r3 = newarray (float)[4];

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents> = $r3;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>($r4);

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.text.NumberFormat formatDecimal> = $r5;

        $r7 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDStream getContents()>();

        if $r7 == null goto label01;

        $z7 = 1;

        $z6 = 1;

        goto label02;

     label01:
        $z7 = 0;

        $z6 = 0;

     label02:
        z0 = $z6;

        if z1 == 0 goto label09;

        if $z7 == 0 goto label09;

        $r16 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r16.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>(r9);

        $r17 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        $z3 = $r17 instanceof org.apache.pdfbox.pdmodel.common.COSStreamArray;

        if $z3 == 0 goto label03;

        $r28 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        r30 = (org.apache.pdfbox.pdmodel.common.COSStreamArray) $r28;

        $r29 = virtualinvoke $r16.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        virtualinvoke r30.<org.apache.pdfbox.pdmodel.common.COSStreamArray: void appendStream(org.apache.pdfbox.cos.COSStream)>($r29);

        goto label04;

     label03:
        $r18 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r18.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        $r19 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        virtualinvoke $r18.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r19);

        $r20 = virtualinvoke $r16.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        virtualinvoke $r18.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r20);

        $r21 = new org.apache.pdfbox.pdmodel.common.COSStreamArray;

        specialinvoke $r21.<org.apache.pdfbox.pdmodel.common.COSStreamArray: void <init>(org.apache.pdfbox.cos.COSArray)>($r18);

        r30 = $r21;

     label04:
        if z2 == 0 goto label05;

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        $r27 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>;

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r27);

        virtualinvoke $r16.<org.apache.pdfbox.pdmodel.common.PDStream: void setFilters(java.util.List)>($r26);

     label05:
        if z4 == 0 goto label07;

        $r22 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r22.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>(r9);

        $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.OutputStream createOutputStream()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output> = $r23;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void saveGraphicsState()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void close()>();

        if z2 == 0 goto label06;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        $r25 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r25);

        virtualinvoke $r22.<org.apache.pdfbox.pdmodel.common.PDStream: void setFilters(java.util.List)>($r24);

     label06:
        virtualinvoke r30.<org.apache.pdfbox.pdmodel.common.COSStreamArray: void insertCOSStream(org.apache.pdfbox.pdmodel.common.PDStream)>($r22);

     label07:
        $r31 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r31.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.cos.COSStream)>(r30);

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.PDPage: void setContents(org.apache.pdfbox.pdmodel.common.PDStream)>($r31);

        $r32 = virtualinvoke $r16.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.OutputStream createOutputStream()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output> = $r32;

        if z4 == 0 goto label08;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void restoreGraphicsState()>();

     label08:
        goto label12;

     label09:
        if z0 == 0 goto label10;

        $r15 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("You are overwriting an existing content, you should use the append mode");

     label10:
        $r8 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r8.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>(r9);

        if z2 == 0 goto label11;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        virtualinvoke $r8.<org.apache.pdfbox.pdmodel.common.PDStream: void setFilters(java.util.List)>($r13);

     label11:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.PDPage: void setContents(org.apache.pdfbox.pdmodel.common.PDStream)>($r8);

        $r10 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.OutputStream createOutputStream()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output> = $r10;

     label12:
        $r33 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.text.NumberFormat formatDecimal>;

        virtualinvoke $r33.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(10);

        $r34 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.text.NumberFormat formatDecimal>;

        virtualinvoke $r34.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);

        $r35 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = $r35;

        $r36 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources>;

        if $r36 != null goto label13;

        $r11 = new org.apache.pdfbox.pdmodel.PDResources;

        specialinvoke $r11.<org.apache.pdfbox.pdmodel.PDResources: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = $r11;

        $r12 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources>;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.PDPage: void setResources(org.apache.pdfbox.pdmodel.PDResources)>($r12);

     label13:
        return;
    }

    public void beginText() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: Nested beginText() calls are not allowed.");

        throw $r2;

     label1:
        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEGIN_TEXT>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode> = 1;

        return;
    }

    public void endText() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: You must call beginText() before calling endText.");

        throw $r2;

     label1:
        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] END_TEXT>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode> = 0;

        return;
    }

    public void setFont(org.apache.pdfbox.pdmodel.font.PDFont, float) throws java.io.IOException
    {
        byte[] $r4;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0;
        java.lang.String $r3;
        org.apache.pdfbox.pdmodel.PDResources $r2;
        org.apache.pdfbox.pdmodel.font.PDFont r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.font.PDFont;

        f0 := @parameter1: float;

        $r2 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDResources: java.lang.String addFont(org.apache.pdfbox.pdmodel.font.PDFont)>(r1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>("/");

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>($r3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r4 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_FONT>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r4);

        return;
    }

    public void drawImage(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage, float, float) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        int $i0, $i1;
        float f0, f1, $f2, $f3;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: int getWidth()>();

        $f2 = (float) $i0;

        $i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: int getHeight()>();

        $f3 = (float) $i1;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void drawXObject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject,float,float,float,float)>(r1, f0, f1, $f2, $f3);

        return;
    }

    public void drawXObject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject, float, float, float, float) throws java.io.IOException
    {
        float f0, f1, f2, f3;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r1;
        java.awt.geom.AffineTransform $r0;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject r2;

        r1 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject;

        f2 := @parameter1: float;

        f3 := @parameter2: float;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(f0, 0.0F, 0.0F, f1, f2, f3);

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void drawXObject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject,java.awt.geom.AffineTransform)>(r2, $r0);

        return;
    }

    public void drawXObject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject, java.awt.geom.AffineTransform) throws java.io.IOException
    {
        byte[] $r5;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r6;
        org.apache.pdfbox.pdmodel.PDResources $r2;
        java.awt.geom.AffineTransform r4;
        java.lang.String $r3, r7;
        boolean $z0, $z1;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject;

        r4 := @parameter1: java.awt.geom.AffineTransform;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error: drawXObject is not allowed within a text block.");

        throw $r6;

     label1:
        $z1 = r1 instanceof org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;

        if $z1 == 0 goto label2;

        r7 = "Im";

        goto label3;

     label2:
        r7 = "Form";

     label3:
        $r2 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDResources: java.lang.String addXObject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject,java.lang.String)>(r1, r7);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void saveGraphicsState()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void concatenate2CTM(java.awt.geom.AffineTransform)>(r4);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>("/");

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>($r3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r5 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] XOBJECT_DO>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void restoreGraphicsState()>();

        return;
    }

    public void moveTextPositionByAmount(float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0, f1;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: must call beginText() before moveTextPositionByAmount");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] MOVE_TEXT_POSITION>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setTextMatrix(double, double, double, double, double, double) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        boolean $z0;
        double d0, d1, d2, d3, d4, d5;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: must call beginText() before setTextMatrix");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d4);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_TEXT_MATRIX>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setTextMatrix(java.awt.geom.AffineTransform) throws java.io.IOException
    {
        byte[] $r2;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r3;
        java.awt.geom.AffineTransform r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 != 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Error: must call beginText() before setTextMatrix");

        throw $r3;

     label1:
        specialinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendMatrix(java.awt.geom.AffineTransform)>(r1);

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_TEXT_MATRIX>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        return;
    }

    public void setTextScaling(double, double, double, double) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setTextMatrix(double,double,double,double,double,double)>(d0, 0.0, 0.0, d1, d2, d3);

        return;
    }

    public void setTextTranslation(double, double) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double d0, d1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setTextMatrix(double,double,double,double,double,double)>(1.0, 0.0, 0.0, 1.0, d0, d1);

        return;
    }

    public void setTextRotation(double, double, double) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double d0, $d1, $d2, d3, d4, $d5;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        d4 := @parameter2: double;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d5 = neg $d2;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setTextMatrix(double,double,double,double,double,double)>($d1, $d2, $d5, $d1, d3, d4);

        return;
    }

    public void concatenate2CTM(double, double, double, double, double, double) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double d0, d1, d2, d3, d4, d5;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d4);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CONCATENATE_MATRIX>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void concatenate2CTM(java.awt.geom.AffineTransform) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r2;
        java.awt.geom.AffineTransform r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendMatrix(java.awt.geom.AffineTransform)>(r1);

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CONCATENATE_MATRIX>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        return;
    }

    public void drawString(java.lang.String) throws java.io.IOException
    {
        byte[] $r4, $r5;
        java.io.ByteArrayOutputStream $r3;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r6;
        org.apache.pdfbox.cos.COSString $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 != 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error: must call beginText() before drawString");

        throw $r6;

     label1:
        $r1 = new org.apache.pdfbox.cos.COSString;

        specialinvoke $r1.<org.apache.pdfbox.cos.COSString: void <init>(java.lang.String)>(r2);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r1.<org.apache.pdfbox.cos.COSString: void writePDF(java.io.OutputStream)>($r3);

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r4);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r5 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SHOW_TEXT>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r5);

        return;
    }

    public void setStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r2;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace> = r1;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void writeColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r1);

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_STROKING_COLORSPACE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        return;
    }

    public void setNonStrokingColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r2;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace> = r1;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void writeColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r1);

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_NON_STROKING_COLORSPACE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        return;
    }

    private void writeColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) throws java.io.IOException
    {
        int i0;
        java.lang.String $r11, $r15, $r21;
        boolean $z0, $z1, $z2, $z3;
        org.apache.pdfbox.cos.COSName $r4, $r7, $r16, $r20, r22;
        java.io.OutputStream $r24;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r1;
        org.apache.pdfbox.pdmodel.PDResources $r2, $r18;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace r0;
        org.apache.pdfbox.cos.COSDictionary $r3, $r17, $r19, r23;
        org.apache.pdfbox.cos.COSBase $r5, $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r14;

        r1 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;

        $z0 = r0 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;

        if $z2 == 0 goto label2;

     label1:
        $r21 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>();

        r22 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r21);

        goto label6;

     label2:
        $r2 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary getCOSDictionary()>();

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>;

        $r5 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4);

        r23 = (org.apache.pdfbox.cos.COSDictionary) $r5;

        if r23 != null goto label3;

        $r17 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r17.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        r23 = $r17;

        $r18 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources>;

        $r19 = virtualinvoke $r18.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary getCOSDictionary()>();

        $r20 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>;

        virtualinvoke $r19.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r20, $r17);

     label3:
        $r6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        $r7 = virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getKeyForValue(java.lang.Object)>($r6);

        r22 = $r7;

        if $r7 != null goto label6;

        i0 = 0;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CS");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: boolean containsValue(java.lang.Object)>($r11);

        if $z3 == 0 goto label5;

        i0 = i0 + 1;

        goto label4;

     label5:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CS");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r15);

        r22 = $r16;

        virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r16, r0);

     label6:
        $r24 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output>;

        virtualinvoke r22.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r24);

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        return;
    }

    public void setStrokingColor(float[]) throws java.io.IOException
    {
        byte[] $r6, $r7;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r1;
        float[] r0;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r2, $r3, $r4, $r5;
        int $i0, i1;
        float $f0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r0 := @parameter0: float[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $f0 = r0[i1];

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>($f0);

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace>;

        $z0 = $r2 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDSeparation;

        if $z0 != 0 goto label3;

        $r3 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace>;

        $z1 = $r3 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDPattern;

        if $z1 != 0 goto label3;

        $r4 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace>;

        $z2 = $r4 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN;

        if $z2 != 0 goto label3;

        $r5 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace>;

        $z3 = $r5 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;

        if $z3 == 0 goto label4;

     label3:
        $r7 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_STROKING_COLOR_COMPLEX>;

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r7);

        goto label5;

     label4:
        $r6 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_STROKING_COLOR_SIMPLE>;

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r6);

     label5:
        return;
    }

    public void setStrokingColor(java.awt.Color) throws java.io.IOException
    {
        java.awt.Color r0;
        float[] $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.awt.color.ColorSpace $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r7;
        java.io.IOException $r2;
        float $f0, $f1, $f2, $f3, $f4;
        java.lang.StringBuilder $r3, $r4, $r5;

        r7 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r0 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<java.awt.Color: java.awt.color.ColorSpace getColorSpace()>();

        $i0 = virtualinvoke $r1.<java.awt.color.ColorSpace: int getType()>();

        if $i0 != 5 goto label1;

        $i3 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        $i4 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        $i5 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setStrokingColor(int,int,int)>($i3, $i4, $i5);

        goto label4;

     label1:
        $i1 = virtualinvoke $r1.<java.awt.color.ColorSpace: int getType()>();

        if $i1 != 6 goto label2;

        $r13 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        virtualinvoke r0.<java.awt.Color: float[] getColorComponents(float[])>($r13);

        $r14 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f4 = $r14[0];

        $d4 = (double) $f4;

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setStrokingColor(double)>($d4);

        goto label4;

     label2:
        $i2 = virtualinvoke $r1.<java.awt.color.ColorSpace: int getType()>();

        if $i2 != 9 goto label3;

        $r8 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        virtualinvoke r0.<java.awt.Color: float[] getColorComponents(float[])>($r8);

        $r9 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f0 = $r9[0];

        $d3 = (double) $f0;

        $r10 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f1 = $r10[1];

        $d2 = (double) $f1;

        $r11 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f2 = $r11[2];

        $d1 = (double) $f2;

        $r12 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f3 = $r12[3];

        $d0 = (double) $f3;

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setStrokingColor(double,double,double,double)>($d3, $d2, $d1, $d0);

        goto label4;

     label3:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown colorspace:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label4:
        return;
    }

    public void setNonStrokingColor(java.awt.Color) throws java.io.IOException
    {
        java.awt.Color r0;
        float[] $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.awt.color.ColorSpace $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r7;
        java.io.IOException $r2;
        float $f0, $f1, $f2, $f3, $f4;
        java.lang.StringBuilder $r3, $r4, $r5;

        r7 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r0 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<java.awt.Color: java.awt.color.ColorSpace getColorSpace()>();

        $i0 = virtualinvoke $r1.<java.awt.color.ColorSpace: int getType()>();

        if $i0 != 5 goto label1;

        $i3 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        $i4 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        $i5 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setNonStrokingColor(int,int,int)>($i3, $i4, $i5);

        goto label4;

     label1:
        $i1 = virtualinvoke $r1.<java.awt.color.ColorSpace: int getType()>();

        if $i1 != 6 goto label2;

        $r13 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        virtualinvoke r0.<java.awt.Color: float[] getColorComponents(float[])>($r13);

        $r14 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f4 = $r14[0];

        $d4 = (double) $f4;

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setNonStrokingColor(double)>($d4);

        goto label4;

     label2:
        $i2 = virtualinvoke $r1.<java.awt.color.ColorSpace: int getType()>();

        if $i2 != 9 goto label3;

        $r8 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        virtualinvoke r0.<java.awt.Color: float[] getColorComponents(float[])>($r8);

        $r9 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f0 = $r9[0];

        $d3 = (double) $f0;

        $r10 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f1 = $r10[1];

        $d2 = (double) $f1;

        $r11 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f2 = $r11[2];

        $d1 = (double) $f2;

        $r12 = r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: float[] colorComponents>;

        $f3 = $r12[3];

        $d0 = (double) $f3;

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void setNonStrokingColor(double,double,double,double)>($d3, $d2, $d1, $d0);

        goto label4;

     label3:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown colorspace:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label4:
        return;
    }

    public void setStrokingColor(int, int, int) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $d0 = (double) i0;

        $d1 = $d0 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d2 = (double) i1;

        $d3 = $d2 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d4 = (double) i2;

        $d5 = $d4 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RG_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setStrokingColor(int, int, int, int) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $d0 = (double) i0;

        $d1 = $d0 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d2 = (double) i1;

        $d3 = $d2 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d4 = (double) i2;

        $d5 = $d4 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d6 = (double) i3;

        $d7 = $d6 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d7);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] K_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setStrokingColor(double, double, double, double) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] K_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setStrokingColor(int) throws java.io.IOException
    {
        byte[] $r1;
        int i0;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double $d0, $d1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $d1 = $d0 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] G_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setStrokingColor(double) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r1;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] G_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setNonStrokingColor(float[]) throws java.io.IOException
    {
        byte[] $r6, $r7;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r1;
        float[] r0;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r2, $r3, $r4, $r5;
        int $i0, i1;
        float $f0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r0 := @parameter0: float[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $f0 = r0[i1];

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>($f0);

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace>;

        $z0 = $r2 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDSeparation;

        if $z0 != 0 goto label3;

        $r3 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace>;

        $z1 = $r3 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDPattern;

        if $z1 != 0 goto label3;

        $r4 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace>;

        $z2 = $r4 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN;

        if $z2 != 0 goto label3;

        $r5 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace>;

        $z3 = $r5 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;

        if $z3 == 0 goto label4;

     label3:
        $r7 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_NON_STROKING_COLOR_COMPLEX>;

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r7);

        goto label5;

     label4:
        $r6 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_NON_STROKING_COLOR_SIMPLE>;

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r6);

     label5:
        return;
    }

    public void setNonStrokingColor(int, int, int) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $d0 = (double) i0;

        $d1 = $d0 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d2 = (double) i1;

        $d3 = $d2 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d4 = (double) i2;

        $d5 = $d4 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RG_NON_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setNonStrokingColor(int, int, int, int) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $d0 = (double) i0;

        $d1 = $d0 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d2 = (double) i1;

        $d3 = $d2 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d4 = (double) i2;

        $d5 = $d4 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $d6 = (double) i3;

        $d7 = $d6 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d7);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] K_NON_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setNonStrokingColor(double, double, double, double) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] K_NON_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setNonStrokingColor(int) throws java.io.IOException
    {
        byte[] $r1;
        int i0;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        double $d0, $d1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $d1 = $d0 / 255.0;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>($d1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] G_NON_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setNonStrokingColor(double) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r1;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] G_NON_STROKING>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void addRect(float, float, float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        float f0, f1, f2, f3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: addRect is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RECTANGLE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void fillRect(float, float, float, float) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0, f1, f2, f3;
        java.io.IOException $r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: fillRect is not allowed within a text block.");

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void addRect(float,float,float,float)>(f0, f1, f2, f3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void fill(int)>(1);

        return;
    }

    public void addBezier312(float, float, float, float, float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        float f0, f1, f2, f3, f4, f5;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: addBezier312 is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f4);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEZIER_312>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void addBezier32(float, float, float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        float f0, f1, f2, f3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: addBezier32 is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEZIER_32>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void addBezier31(float, float, float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        float f0, f1, f2, f3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: addBezier31 is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEZIER_313>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void moveTo(float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0, f1;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: moveTo is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] MOVE_TO>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void lineTo(float, float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0, f1;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: lineTo is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_TO>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void addLine(float, float, float, float) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0, f1, f2, f3;
        java.io.IOException $r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: addLine is not allowed within a text block.");

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void moveTo(float,float)>(f0, f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void lineTo(float,float)>(f2, f3);

        return;
    }

    public void drawLine(float, float, float, float) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0, f1, f2, f3;
        java.io.IOException $r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: drawLine is not allowed within a text block.");

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void addLine(float,float,float,float)>(f0, f1, f2, f3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void stroke()>();

        return;
    }

    public void addPolygon(float[], float[]) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float[] r1, r2;
        java.io.IOException $r3, $r4;
        int $i0, $i1, $i2, i3;
        float $f0, $f1, $f2, $f3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Error: addPolygon is not allowed within a text block.");

        throw $r4;

     label1:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label2;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Error: some points are missing coordinate");

        throw $r3;

     label2:
        i3 = 0;

     label3:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label6;

        if i3 != 0 goto label4;

        $f3 = r1[i3];

        $f2 = r2[i3];

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void moveTo(float,float)>($f3, $f2);

        goto label5;

     label4:
        $f1 = r1[i3];

        $f0 = r2[i3];

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void lineTo(float,float)>($f1, $f0);

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void closeSubPath()>();

        return;
    }

    public void drawPolygon(float[], float[]) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float[] r1, r2;
        java.io.IOException $r3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Error: drawPolygon is not allowed within a text block.");

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void addPolygon(float[],float[])>(r1, r2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void stroke()>();

        return;
    }

    public void fillPolygon(float[], float[]) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float[] r1, r2;
        java.io.IOException $r3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Error: fillPolygon is not allowed within a text block.");

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void addPolygon(float[],float[])>(r1, r2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void fill(int)>(1);

        return;
    }

    public void stroke() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: stroke is not allowed within a text block.");

        throw $r2;

     label1:
        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] STROKE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void closeAndStroke() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: closeAndStroke is not allowed within a text block.");

        throw $r2;

     label1:
        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLOSE_STROKE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void fill(int) throws java.io.IOException
    {
        byte[] $r2, $r3;
        int i0;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Error: fill is not allowed within a text block.");

        throw $r4;

     label1:
        if i0 != 1 goto label2;

        $r3 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] FILL_NON_ZERO>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r3);

        goto label4;

     label2:
        if i0 != 0 goto label3;

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] FILL_EVEN_ODD>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        goto label4;

     label3:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: unknown value for winding rule");

        throw $r1;

     label4:
        return;
    }

    public void closeSubPath() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: closeSubPath is not allowed within a text block.");

        throw $r2;

     label1:
        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLOSE_SUBPATH>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void clipPath(int) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r1, $r6;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error: clipPath is not allowed within a text block.");

        throw $r6;

     label1:
        if i0 != 1 goto label2;

        $r4 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLIP_PATH_NON_ZERO>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r4);

        $r5 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] NOP>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r5);

        goto label4;

     label2:
        if i0 != 0 goto label3;

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLIP_PATH_EVEN_ODD>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        $r3 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] NOP>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r3);

        goto label4;

     label3:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: unknown value for winding rule");

        throw $r1;

     label4:
        return;
    }

    public void setLineWidth(float) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Error: setLineWidth is not allowed within a text block.");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_WIDTH>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void setLineJoinStyle(int) throws java.io.IOException
    {
        byte[] $r3;
        int i0;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r1, $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Error: setLineJoinStyle is not allowed within a text block.");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        if i0 > 2 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>($r2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r3 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_JOIN_STYLE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r3);

        goto label3;

     label2:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: unknown value for line join style");

        throw $r1;

     label3:
        return;
    }

    public void setLineCapStyle(int) throws java.io.IOException
    {
        byte[] $r3;
        int i0;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.io.IOException $r1, $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Error: setLineCapStyle is not allowed within a text block.");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        if i0 > 2 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>($r2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r3 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_CAP_STYLE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r3);

        goto label3;

     label2:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error: unknown value for line cap style");

        throw $r1;

     label3:
        return;
    }

    public void setLineDashPattern(float[], float) throws java.io.IOException
    {
        byte[] $r1, $r3, $r4;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float[] r2;
        java.io.IOException $r5;
        int i0, i1;
        float f0, f1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r2 := @parameter0: float[];

        f0 := @parameter1: float;

        $z0 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: boolean inTextMode>;

        if $z0 == 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Error: setLineDashPattern is not allowed within a text block.");

        throw $r5;

     label1:
        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] OPENING_BRACKET>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        f1 = r2[i1];

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLOSING_BRACKET>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r3);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(float)>(f0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r4 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_DASH_PATTERN>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r4);

        return;
    }

    public void beginMarkedContentSequence(org.apache.pdfbox.cos.COSName) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.cos.COSName;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendCOSName(org.apache.pdfbox.cos.COSName)>(r1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r2 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BMC>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        return;
    }

    public void beginMarkedContentSequence(org.apache.pdfbox.cos.COSName, org.apache.pdfbox.cos.COSName) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName r1, r2;
        byte[] $r3;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: org.apache.pdfbox.cos.COSName;

        r2 := @parameter1: org.apache.pdfbox.cos.COSName;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendCOSName(org.apache.pdfbox.cos.COSName)>(r1);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendCOSName(org.apache.pdfbox.cos.COSName)>(r2);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        $r3 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BDC>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r3);

        return;
    }

    public void endMarkedContentSequence() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] EMC>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void saveGraphicsState() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SAVE_GRAPHICS_STATE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void restoreGraphicsState() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $r1 = <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RESTORE_GRAPHICS_STATE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r1);

        return;
    }

    public void appendRawCommands(java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] $r2;
        java.lang.String r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(byte[])>($r2);

        return;
    }

    public void appendRawCommands(byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        byte[] r1;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    public void appendRawCommands(int) throws java.io.IOException
    {
        int i0;
        java.io.OutputStream $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    public void appendRawCommands(double) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        java.lang.String $r2;
        java.text.NumberFormat $r1;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.text.NumberFormat formatDecimal>;

        $r2 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>(d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>($r2);

        return;
    }

    public void appendRawCommands(float) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;
        float f0;
        java.lang.String $r2;
        java.text.NumberFormat $r1;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.text.NumberFormat formatDecimal>;

        $d0 = (double) f0;

        $r2 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>($d0);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(java.lang.String)>($r2);

        return;
    }

    public void appendCOSName(org.apache.pdfbox.cos.COSName) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName r0;
        java.io.OutputStream $r2;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r1;

        r1 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r0 := @parameter0: org.apache.pdfbox.cos.COSName;

        $r2 = r1.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output>;

        virtualinvoke r0.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2);

        return;
    }

    private void appendMatrix(java.awt.geom.AffineTransform) throws java.io.IOException
    {
        double[] r0;
        int i0, i1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r2;
        java.awt.geom.AffineTransform r1;
        double d0;

        r2 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        r0 = newarray (double)[6];

        virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r0);

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r0[i1];

        virtualinvoke r2.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(double)>(d0);

        virtualinvoke r2.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: void appendRawCommands(int)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.pdfbox.pdmodel.edit.PDPageContentStream r0;

        r0 := @this: org.apache.pdfbox.pdmodel.edit.PDPageContentStream;

        $r1 = r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.io.OutputStream output>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentNonStrokingColorSpace> = null;

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace currentStrokingColorSpace> = null;

        r0.<org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = null;

        return;
    }

    static void <clinit>()
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45;
        org.apache.commons.logging.Log $r0;

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: int SPACE> = 32;

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: java.lang.String ISO8859> = "ISO-8859-1";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/edit/PDPageContentStream;");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("BT\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEGIN_TEXT> = $r1;

        $r2 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("ET\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] END_TEXT> = $r2;

        $r3 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("Tf\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_FONT> = $r3;

        $r4 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("Td\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] MOVE_TEXT_POSITION> = $r4;

        $r5 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("Tm\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_TEXT_MATRIX> = $r5;

        $r6 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("Tj\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SHOW_TEXT> = $r6;

        $r7 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("q\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SAVE_GRAPHICS_STATE> = $r7;

        $r8 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("Q\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RESTORE_GRAPHICS_STATE> = $r8;

        $r9 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("cm\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CONCATENATE_MATRIX> = $r9;

        $r10 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("Do\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] XOBJECT_DO> = $r10;

        $r11 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("RG\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RG_STROKING> = $r11;

        $r12 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("rg\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RG_NON_STROKING> = $r12;

        $r13 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("K\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] K_STROKING> = $r13;

        $r14 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("k\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] K_NON_STROKING> = $r14;

        $r15 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("G\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] G_STROKING> = $r15;

        $r16 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("g\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] G_NON_STROKING> = $r16;

        $r17 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("re\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] RECTANGLE> = $r17;

        $r18 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("f\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] FILL_NON_ZERO> = $r18;

        $r19 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("f*\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] FILL_EVEN_ODD> = $r19;

        $r20 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("l\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_TO> = $r20;

        $r21 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("m\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] MOVE_TO> = $r21;

        $r22 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("s\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLOSE_STROKE> = $r22;

        $r23 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("S\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] STROKE> = $r23;

        $r24 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("w\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_WIDTH> = $r24;

        $r25 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("j\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_JOIN_STYLE> = $r25;

        $r26 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("J\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_CAP_STYLE> = $r26;

        $r27 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("d\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] LINE_DASH_PATTERN> = $r27;

        $r28 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("h\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLOSE_SUBPATH> = $r28;

        $r29 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("W\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLIP_PATH_NON_ZERO> = $r29;

        $r30 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("W*\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLIP_PATH_EVEN_ODD> = $r30;

        $r31 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("n\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] NOP> = $r31;

        $r32 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("c\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEZIER_312> = $r32;

        $r33 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("v\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEZIER_32> = $r33;

        $r34 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("y\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BEZIER_313> = $r34;

        $r35 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("BMC\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BMC> = $r35;

        $r36 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("BDC\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] BDC> = $r36;

        $r37 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("EMC\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] EMC> = $r37;

        $r38 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("CS\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_STROKING_COLORSPACE> = $r38;

        $r39 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("cs\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_NON_STROKING_COLORSPACE> = $r39;

        $r40 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("SC\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_STROKING_COLOR_SIMPLE> = $r40;

        $r41 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("SCN\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_STROKING_COLOR_COMPLEX> = $r41;

        $r42 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("sc\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_NON_STROKING_COLOR_SIMPLE> = $r42;

        $r43 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("scn\n");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] SET_NON_STROKING_COLOR_COMPLEX> = $r43;

        $r44 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("[");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] OPENING_BRACKET> = $r44;

        $r45 = staticinvoke <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] getISOBytes(java.lang.String)>("]");

        <org.apache.pdfbox.pdmodel.edit.PDPageContentStream: byte[] CLOSING_BRACKET> = $r45;

        return;
    }
}
