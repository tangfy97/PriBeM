final class com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 extends com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$PcdataImpl
{

    transient void <init>(java.lang.Class, javax.xml.namespace.QName[])
    {
        java.lang.Class r1;
        javax.xml.namespace.QName[] r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: javax.xml.namespace.QName[];

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$PcdataImpl: void <init>(java.lang.Class,javax.xml.namespace.QName[])>(r1, r2);

        return;
    }

    public java.awt.Image parse(java.lang.CharSequence) throws org.xml.sax.SAXException
    {
        java.lang.Throwable $r7;
        byte[] $r2;
        java.lang.CharSequence r0;
        java.awt.image.BufferedImage $r3;
        java.io.IOException $r5;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r4;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext $r6;
        java.io.ByteArrayInputStream $r1;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r8;
        boolean $z0;
        java.io.InputStream r9;

        r8 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r0 := @parameter0: java.lang.CharSequence;

     label1:
        $z0 = r0 instanceof com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        if $z0 == 0 goto label2;

        $r4 = (com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data) r0;

        r9 = virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: java.io.InputStream getInputStream()>();

        goto label3;

     label2:
        $r1 = new java.io.ByteArrayInputStream;

        $r2 = staticinvoke <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl: byte[] access$100(java.lang.CharSequence)>(r0);

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        r9 = $r1;

     label3:
        $r3 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r9);

     label4:
        virtualinvoke r9.<java.io.InputStream: void close()>();

     label5:
        return $r3;

     label6:
        $r7 := @caughtexception;

     label7:
        virtualinvoke r9.<java.io.InputStream: void close()>();

        throw $r7;

     label8:
        $r5 := @caughtexception;

        $r6 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext getInstance()>();

        virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void handleError(java.lang.Exception)>($r5);

        return null;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.io.IOException from label1 to label5 with label8;
        catch java.io.IOException from label6 to label8 with label8;
    }

    private java.awt.image.BufferedImage convertToBufferedImage(java.awt.Image) throws java.io.IOException
    {
        java.awt.Image r0;
        java.awt.image.BufferedImage $r4, $r6;
        java.io.IOException $r8;
        java.awt.MediaTracker $r1;
        java.awt.Graphics2D $r5;
        java.lang.InterruptedException $r7;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r3;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9$1 $r2;
        int $i0, $i1;
        java.lang.String $r9;
        boolean $z0;

        r3 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r0 := @parameter0: java.awt.Image;

        $z0 = r0 instanceof java.awt.image.BufferedImage;

        if $z0 == 0 goto label1;

        $r6 = (java.awt.image.BufferedImage) r0;

        return $r6;

     label1:
        $r1 = new java.awt.MediaTracker;

        $r2 = new com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9$1;

        specialinvoke $r2.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9$1: void <init>(com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9)>(r3);

        specialinvoke $r1.<java.awt.MediaTracker: void <init>(java.awt.Component)>($r2);

        virtualinvoke $r1.<java.awt.MediaTracker: void addImage(java.awt.Image,int)>(r0, 0);

     label2:
        virtualinvoke $r1.<java.awt.MediaTracker: void waitForAll()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r7.<java.lang.InterruptedException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        $r4 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i1 = virtualinvoke r0.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r5 = virtualinvoke $r4.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r5.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

        return $r4;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(java.awt.Image)
    {
        com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx $r0;
        java.lang.Object[] $r4;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r16;
        java.lang.String $r2, $r6, $r12, r22;
        boolean $z0, $z1;
        javax.xml.bind.ValidationEventLocator $r7;
        java.util.Iterator $r23;
        java.awt.Image r17;
        java.awt.image.BufferedImage $r18;
        java.io.IOException $r20;
        java.lang.RuntimeException $r8, $r21;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r19;
        javax.imageio.stream.ImageOutputStream $r15;
        com.sun.xml.bind.v2.runtime.XMLSerializer $r1;
        com.sun.xml.bind.v2.model.impl.Messages $r5;
        javax.imageio.ImageWriter r14;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.Object $r13;
        javax.xml.bind.helpers.ValidationEventImpl $r3;

        r16 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r17 := @parameter0: java.awt.Image;

        $r0 = new com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx;

        specialinvoke $r0.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void <init>()>();

        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.XMLSerializer getInstance()>();

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.XMLSerializer: java.lang.String getXMIMEContentType()>();

        r22 = $r2;

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("image/*");

        if $z0 == 0 goto label2;

     label1:
        r22 = "image/png";

     label2:
        $r23 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByMIMEType(java.lang.String)>(r22);

        $z1 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javax.imageio.ImageWriter) $r13;

        $r15 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageOutputStream createImageOutputStream(java.lang.Object)>($r0);

        virtualinvoke r14.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>($r15);

        $r18 = specialinvoke r16.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9: java.awt.image.BufferedImage convertToBufferedImage(java.awt.Image)>(r17);

        virtualinvoke r14.<javax.imageio.ImageWriter: void write(java.awt.image.RenderedImage)>($r18);

        interfaceinvoke $r15.<javax.imageio.stream.ImageOutputStream: void close()>();

        virtualinvoke r14.<javax.imageio.ImageWriter: void dispose()>();

        goto label4;

     label3:
        $r3 = new javax.xml.bind.helpers.ValidationEventImpl;

        $r5 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages NO_IMAGE_WRITER>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r22;

        $r6 = virtualinvoke $r5.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r4);

        $r7 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.XMLSerializer: javax.xml.bind.ValidationEventLocator getCurrentLocation(java.lang.String)>(null);

        specialinvoke $r3.<javax.xml.bind.helpers.ValidationEventImpl: void <init>(int,java.lang.String,javax.xml.bind.ValidationEventLocator)>(1, $r6, $r7);

        virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean handleEvent(javax.xml.bind.ValidationEvent)>($r3);

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no encoder for MIME type ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean handleError(java.lang.Exception)>($r20);

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label6:
        $r19 = new com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        specialinvoke $r19.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void <init>()>();

        virtualinvoke $r0.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void set(com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data,java.lang.String)>($r19, r22);

        return $r19;

        catch java.io.IOException from label2 to label4 with label5;
    }

    public volatile com.sun.xml.bind.v2.runtime.output.Pcdata print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.awt.Image $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r0;
        java.lang.Object r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.awt.Image) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(java.awt.Image)>($r2);

        return $r3;
    }

    public volatile java.lang.Object parse(java.lang.CharSequence) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        java.lang.CharSequence r1;
        java.awt.Image $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9: java.awt.Image parse(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.CharSequence print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.awt.Image $r2;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9 r0;
        java.lang.Object r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.awt.Image) r1;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$9: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data print(java.awt.Image)>($r2);

        return $r3;
    }
}
