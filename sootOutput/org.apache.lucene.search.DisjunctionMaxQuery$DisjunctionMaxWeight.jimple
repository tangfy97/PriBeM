public class org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight extends org.apache.lucene.search.Weight
{
    protected java.util.ArrayList weights;
    final org.apache.lucene.search.DisjunctionMaxQuery this$0;

    public void <init>(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.search.Query r6;
        java.util.Iterator $r4;
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight r0;
        org.apache.lucene.search.Weight $r9;
        java.util.ArrayList $r2, $r3, $r8;
        org.apache.lucene.search.DisjunctionMaxQuery r1;
        java.lang.Object $r5;
        boolean $z0;
        org.apache.lucene.search.IndexSearcher r7;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        r1 := @parameter0: org.apache.lucene.search.DisjunctionMaxQuery;

        r7 := @parameter1: org.apache.lucene.search.IndexSearcher;

        r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0> = r1;

        specialinvoke r0.<org.apache.lucene.search.Weight: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights> = $r2;

        $r3 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList access$000(org.apache.lucene.search.DisjunctionMaxQuery)>(r1);

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.search.Query) $r5;

        $r8 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $r9 = virtualinvoke r6.<org.apache.lucene.search.Query: org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher)>(r7);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.search.Query getQuery()
    {
        org.apache.lucene.search.DisjunctionMaxQuery $r1;
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight r0;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        return $r1;
    }

    public float getValueForNormalization() throws java.io.IOException
    {
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight r0;
        org.apache.lucene.search.Weight r7;
        java.util.ArrayList $r1;
        boolean $z0;
        java.util.Iterator $r2;
        org.apache.lucene.search.DisjunctionMaxQuery $r3, $r4, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, f11;
        java.lang.Object $r6;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        f10 = 0.0F;

        f11 = 0.0F;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.search.Weight) $r6;

        $f9 = virtualinvoke r7.<org.apache.lucene.search.Weight: float getValueForNormalization()>();

        f11 = f11 + $f9;

        f10 = staticinvoke <java.lang.Math: float max(float,float)>(f10, $f9);

        goto label1;

     label2:
        $r3 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f0 = virtualinvoke $r3.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $f1 = f11 - f10;

        $r4 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f2 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: float access$100(org.apache.lucene.search.DisjunctionMaxQuery)>($r4);

        $f3 = $f1 * $f2;

        $r5 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f4 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: float access$100(org.apache.lucene.search.DisjunctionMaxQuery)>($r5);

        $f5 = $f3 * $f4;

        $f6 = $f5 + f10;

        $f7 = $f6 * $f0;

        $f8 = $f7 * $f0;

        return $f8;
    }

    public void normalize(float, float)
    {
        java.util.Iterator $r3;
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight r0;
        org.apache.lucene.search.Weight r5;
        java.util.ArrayList $r2;
        org.apache.lucene.search.DisjunctionMaxQuery $r1;
        float $f0, f1, f2, f3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f0 = virtualinvoke $r1.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        f3 = f2 * $f0;

        $r2 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.search.Weight) $r4;

        virtualinvoke r5.<org.apache.lucene.search.Weight: void normalize(float,float)>(f1, f3);

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException
    {
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight r0;
        org.apache.lucene.search.Weight r8;
        org.apache.lucene.search.DisjunctionMaxScorer $r5;
        java.util.ArrayList $r1, $r3;
        int $i0, $i1, i2;
        org.apache.lucene.util.Bits r10;
        boolean $z0, z1, z2;
        org.apache.lucene.search.Scorer $r11;
        java.util.Iterator $r4;
        org.apache.lucene.search.Scorer[] r2;
        org.apache.lucene.search.DisjunctionMaxQuery $r6;
        float $f0;
        java.lang.Object $r7;
        org.apache.lucene.index.AtomicReaderContext r9;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        r9 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        r10 := @parameter3: org.apache.lucene.util.Bits;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        r2 = newarray (org.apache.lucene.search.Scorer)[$i0];

        i2 = 0;

        $r3 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.search.Weight) $r7;

        $r11 = virtualinvoke r8.<org.apache.lucene.search.Weight: org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext,boolean,boolean,org.apache.lucene.util.Bits)>(r9, 1, 0, r10);

        if $r11 == null goto label2;

        $i1 = i2;

        i2 = i2 + 1;

        r2[$i1] = $r11;

     label2:
        goto label1;

     label3:
        if i2 != 0 goto label4;

        return null;

     label4:
        $r5 = new org.apache.lucene.search.DisjunctionMaxScorer;

        $r6 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f0 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: float access$100(org.apache.lucene.search.DisjunctionMaxQuery)>($r6);

        specialinvoke $r5.<org.apache.lucene.search.DisjunctionMaxScorer: void <init>(org.apache.lucene.search.Weight,float,org.apache.lucene.search.Scorer[],int)>(r0, $f0, r2, i2);

        return $r5;
    }

    public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException
    {
        byte $b1;
        org.apache.lucene.search.ComplexExplanation $r3;
        boolean $z0, $z1;
        org.apache.lucene.search.Explanation $r16, $r21;
        org.apache.lucene.search.DisjunctionMaxQuery $r1, $r4, $r7, $r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight r0;
        org.apache.lucene.search.Weight r14, $r20;
        java.util.ArrayList $r2, $r10, $r18;
        int $i0, i2;
        java.lang.Boolean $r17;
        java.lang.String $r22;
        java.util.Iterator $r11;
        java.lang.Object $r13, $r19;
        org.apache.lucene.index.AtomicReaderContext r15;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        r15 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $r2 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList access$000(org.apache.lucene.search.DisjunctionMaxQuery)>($r1);

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label1;

        $r18 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $r19 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r20 = (org.apache.lucene.search.Weight) $r19;

        $r21 = virtualinvoke $r20.<org.apache.lucene.search.Weight: org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext,int)>(r15, i2);

        return $r21;

     label1:
        $r3 = new org.apache.lucene.search.ComplexExplanation;

        specialinvoke $r3.<org.apache.lucene.search.ComplexExplanation: void <init>()>();

        f8 = 0.0F;

        f9 = 0.0F;

        $r4 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f0 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: float access$100(org.apache.lucene.search.DisjunctionMaxQuery)>($r4);

        $b1 = $f0 cmpl 0.0F;

        if $b1 != 0 goto label2;

        $r22 = "max of:";

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max plus ");

        $r7 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f1 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: float access$100(org.apache.lucene.search.DisjunctionMaxQuery)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" times others of:");

        $r22 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke $r3.<org.apache.lucene.search.ComplexExplanation: void setDescription(java.lang.String)>($r22);

        $r10 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: java.util.ArrayList weights>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.search.Weight) $r13;

        $r16 = virtualinvoke r14.<org.apache.lucene.search.Weight: org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext,int)>(r15, i2);

        $z0 = virtualinvoke $r16.<org.apache.lucene.search.Explanation: boolean isMatch()>();

        if $z0 == 0 goto label5;

        $r17 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r3.<org.apache.lucene.search.ComplexExplanation: void setMatch(java.lang.Boolean)>($r17);

        virtualinvoke $r3.<org.apache.lucene.search.ComplexExplanation: void addDetail(org.apache.lucene.search.Explanation)>($r16);

        $f6 = virtualinvoke $r16.<org.apache.lucene.search.Explanation: float getValue()>();

        f9 = f9 + $f6;

        $f7 = virtualinvoke $r16.<org.apache.lucene.search.Explanation: float getValue()>();

        f8 = staticinvoke <java.lang.Math: float max(float,float)>(f8, $f7);

     label5:
        goto label4;

     label6:
        $f2 = f9 - f8;

        $r12 = r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: org.apache.lucene.search.DisjunctionMaxQuery this$0>;

        $f3 = staticinvoke <org.apache.lucene.search.DisjunctionMaxQuery: float access$100(org.apache.lucene.search.DisjunctionMaxQuery)>($r12);

        $f4 = $f2 * $f3;

        $f5 = f8 + $f4;

        virtualinvoke $r3.<org.apache.lucene.search.ComplexExplanation: void setValue(float)>($f5);

        return $r3;
    }
}
