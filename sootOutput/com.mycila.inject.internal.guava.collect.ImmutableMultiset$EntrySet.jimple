class com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet extends com.mycila.inject.internal.guava.collect.ImmutableSet
{
    final transient com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset;
    private static final long serialVersionUID;

    public void <init>(com.mycila.inject.internal.guava.collect.ImmutableMultiset)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSet: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset> = r1;

        return;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.UnmodifiableIterator entryIterator()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: int distinctElements()>();

        return $i0;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: boolean isPartialView()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multiset$Entry r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r2;
        int $i0, $i1, $i2;
        java.lang.Object r0, $r4;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multiset$Entry;

        if $z0 == 0 goto label4;

        r1 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) r0;

        $i0 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        if $i0 > 0 goto label1;

        return 0;

     label1:
        $r3 = r2.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset>;

        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i1 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: int count(java.lang.Object)>($r4);

        $i2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        if $i1 != $i2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    public java.lang.Object[] toArray()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        java.lang.Object[] r1, $r2;
        int $i0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r1, r4;
        java.util.Iterator $r5;
        com.mycila.inject.internal.guava.collect.Multiset$Entry r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        r4 := @parameter0: java.lang.Object[];

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: int size()>();

        $i1 = lengthof r4;

        if $i1 >= $i0 goto label1;

        r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>(r4, $i0);

        goto label2;

     label1:
        $i2 = lengthof r4;

        if $i2 <= $i0 goto label2;

        r4[$i0] = null;

     label2:
        r1 = r4;

        i4 = 0;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r2;

        $i3 = i4;

        i4 = i4 + 1;

        r1[$i3] = r3;

        goto label3;

     label4:
        return r4;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: int hashCode()>();

        return $i0;
    }

    java.lang.Object writeReplace()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet$EntrySetSerializedForm $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet$EntrySetSerializedForm;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableMultiset multiset>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet$EntrySetSerializedForm: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMultiset)>($r2);

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: long serialVersionUID> = 0L;

        return;
    }
}
