class org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1 extends java.lang.Object implements org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener
{
    final com.google.protobuf.RpcController val$controller;
    final com.google.protobuf.RpcCallback val$done;
    final org.waveprotocol.box.server.frontend.WaveClientRpcImpl this$0;

    void <init>(org.waveprotocol.box.server.frontend.WaveClientRpcImpl, com.google.protobuf.RpcController, com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl r1;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1 r0;
        com.google.protobuf.RpcController r2;
        com.google.protobuf.RpcCallback r3;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1;

        r1 := @parameter0: org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        r2 := @parameter1: com.google.protobuf.RpcController;

        r3 := @parameter2: com.google.protobuf.RpcCallback;

        r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1: org.waveprotocol.box.server.frontend.WaveClientRpcImpl this$0> = r1;

        r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1: com.google.protobuf.RpcController val$controller> = r2;

        r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1: com.google.protobuf.RpcCallback val$done> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onFailure(java.lang.String)
    {
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1 r6;
        com.google.protobuf.RpcController $r7;
        org.waveprotocol.wave.util.logging.Log $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.wave.util.logging.Log access$000()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openRequest failure: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r5);

        $r7 = r6.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1: com.google.protobuf.RpcController val$controller>;

        interfaceinvoke $r7.<com.google.protobuf.RpcController: void setFailed(java.lang.String)>(r3);

        return;
    }

    public void onUpdate(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot, java.util.List, org.waveprotocol.wave.model.version.HashedVersion, java.lang.Boolean, java.lang.String)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r29, r33;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r34;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot $r22;
        java.util.List r6;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r18;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1 r10;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r0;
        com.google.protobuf.RpcCallback $r35;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r21, $r23;
        org.waveprotocol.wave.model.version.HashedVersion r9, $r12, $r15, $r20, $r24, $r26, $r30;
        int $i0, $i1;
        java.lang.Boolean r1;
        java.lang.String r2, $r5, $r19;
        java.util.Iterator $r7;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r36;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot r8;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r4;
        java.lang.Object $r28, $r32;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r11, $r25, $r27, $r31;

        r10 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r8 := @parameter1: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot;

        r6 := @parameter2: java.util.List;

        r9 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        r1 := @parameter4: java.lang.Boolean;

        r2 := @parameter5: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder()>();

        if r1 == null goto label1;

        $z2 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setMarker(boolean)>($z2);

     label1:
        if r2 == null goto label2;

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setChannelId(java.lang.String)>(r2);

     label2:
        $r4 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveletName(org.waveprotocol.wave.model.id.WaveletName)>(r3);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setWaveletName(java.lang.String)>($r5);

        $r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r32 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r32;

        $r34 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta serialize(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r33);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder addAppliedDelta(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r34);

        goto label3;

     label4:
        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r28 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>($i1);

        $r29 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r28;

        $r30 = virtualinvoke $r29.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r31 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>($r30);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setResultingVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r31);

     label5:
        if r8 == null goto label6;

        $r12 = r8.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $z1 = virtualinvoke r9.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched commit versions, snapshot: ");

        $r15 = r8.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, $r19);

        $r21 = r8.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r20 = r8.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $r22 = staticinvoke <org.waveprotocol.box.server.common.SnapshotSerializer: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot serializeWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.version.HashedVersion)>($r21, $r20);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setSnapshot(org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot)>($r22);

        $r23 = r8.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r24 = interfaceinvoke $r23.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r25 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>($r24);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setResultingVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r25);

        $r26 = r8.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $r27 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>($r26);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setCommitNotice(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r27);

        goto label7;

     label6:
        if r9 == null goto label7;

        $r11 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r9);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setCommitNotice(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r11);

     label7:
        $r35 = r10.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1: com.google.protobuf.RpcCallback val$done>;

        $r36 = virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate build()>();

        interfaceinvoke $r35.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>($r36);

        return;
    }
}
