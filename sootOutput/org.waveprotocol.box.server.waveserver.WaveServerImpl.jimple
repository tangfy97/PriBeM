public class org.waveprotocol.box.server.waveserver.WaveServerImpl extends java.lang.Object implements org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.wave.federation.WaveletFederationListener$Factory
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final java.util.concurrent.Executor listenerExecutor;
    private final org.waveprotocol.box.server.waveserver.CertificateManager certificateManager;
    private final org.waveprotocol.wave.federation.WaveletFederationProvider federationRemote;
    private final org.waveprotocol.box.server.waveserver.WaveMap waveMap;
    private boolean initialized;

    public org.waveprotocol.wave.federation.WaveletFederationListener listenerForDomain(java.lang.String)
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl$1 $r0;
        java.lang.String r2;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r1;

        r1 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.box.server.waveserver.WaveServerImpl$1;

        specialinvoke $r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl$1: void <init>(org.waveprotocol.box.server.waveserver.WaveServerImpl,java.lang.String)>(r1, r2);

        return $r0;
    }

    public void submitRequest(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager $r8;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r4;
        byte $b1;
        org.waveprotocol.wave.util.logging.Log $r11, $r17, $r24, $r33, $r42;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        com.google.protobuf.InvalidProtocolBufferException $r40;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r2;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r6;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r15, $r21, $r30, $r39, $r46;
        com.google.protobuf.ByteString $r3;
        java.lang.StringBuilder $r10, $r12, $r13, $r16, $r18, $r19, $r23, $r25, $r26, $r27, $r28, $r32, $r34, $r35, $r36, $r37, $r41, $r43, $r44;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r9;
        long $l0;
        java.lang.String $r14, $r20, $r29, $r38, $r45;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        org.waveprotocol.wave.crypto.SignatureException $r31;
        com.google.protobuf.Message $r5;
        org.waveprotocol.wave.crypto.UnknownSignerException $r22;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r7;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        r9 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $z0 != 0 goto label1;

        $r17 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote tried to submit to non-local wavelet ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r20);

        $r21 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Non-local wavelet update");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r21);

        return;

     label1:
        $r3 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: com.google.protobuf.ByteString getDelta()>();

        $r4 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage parseProtocolWaveletDelta(com.google.protobuf.ByteString)>($r3);

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        r6 = (org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta) $r5;

     label2:
        goto label4;

     label3:
        $r40 := @caughtexception;

        $r42 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit request: Invalid delta protobuf. WaveletName: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r45, $r40);

        $r46 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Signed delta contains invalid delta");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r46);

        return;

     label4:
        $r7 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersion()>();

        $l0 = virtualinvoke $r7.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label5;

        $r11 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote user tried to submit delta at version 0 - disallowed. ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r14);

        $r15 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Remote users may not create wavelets.");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r15);

        return;

     label5:
        $r8 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        interfaceinvoke $r8.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.box.server.waveserver.ByteStringMessage verifyDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta)>(r2);

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: void submitDelta(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)>(r1, r6, r2, r9);

     label6:
        goto label9;

     label7:
        $r31 := @caughtexception;

        $r33 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit request: Delta failed verification. WaveletName: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" delta: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r38, $r31);

        $r39 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Remote verification failed");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r39);

        goto label9;

     label8:
        $r22 := @caughtexception;

        $r24 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit request: unknown signer.  WaveletName: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delta: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r29, $r22);

        $r30 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError internalServerError(java.lang.String)>("Unknown signer");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r30);

     label9:
        return;

        catch com.google.protobuf.InvalidProtocolBufferException from label1 to label2 with label3;
        catch org.waveprotocol.wave.crypto.SignatureException from label5 to label6 with label7;
        catch org.waveprotocol.wave.crypto.UnknownSignerException from label5 to label6 with label8;
    }

    public void requestHistory(org.waveprotocol.wave.model.id.WaveletName, java.lang.String, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, long, org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)
    {
        org.waveprotocol.box.server.waveserver.ByteStringMessage r25;
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener r2;
        org.waveprotocol.wave.util.logging.Log $r12, $r29;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r3;
        java.util.Collection $r8;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r37;
        com.google.protobuf.ByteString $r26;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r28, $r30, $r31, $r32, $r33, $r34, $r35;
        com.google.common.collect.ImmutableList$Builder $r9;
        long $l0, l1;
        com.google.common.collect.ImmutableList $r23;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r7;
        java.lang.String r18, $r22, $r36;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        java.util.Iterator $r10;
        java.lang.Object $r24;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r4, r6;
        org.waveprotocol.box.server.waveserver.WaveServerException $r27;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r18 := @parameter1: java.lang.String;

        r4 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r6 := @parameter3: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        l1 := @parameter4: long;

        r2 := @parameter5: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.LocalWaveletContainer loadLocalWavelet(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener)>(r1, r2);

        if $r3 == null goto label7;

     label1:
        $r5 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>(r4);

        $r7 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>(r6);

        $r8 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.LocalWaveletContainer: java.util.Collection requestHistory(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r5, $r7);

     label2:
        goto label4;

     label3:
        $r27 := @caughtexception;

        $r29 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error retrieving wavelet history: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>($r36);

        $r37 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Server error while retrieving wavelet history.");

        interfaceinvoke r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r37);

        return;

     label4:
        $r9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r10 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r24 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r24;

        $r26 = virtualinvoke r25.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.ByteString getByteString()>();

        virtualinvoke $r9.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r26);

        goto label5;

     label6:
        $r12 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found deltaHistory between ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", returning to requester domain ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r22);

        $r23 = virtualinvoke $r9.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $l0 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        interfaceinvoke r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onSuccess(java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,long)>($r23, r6, $l0);

     label7:
        return;

        catch org.waveprotocol.box.server.waveserver.WaveServerException from label1 to label2 with label3;
    }

    public void getDeltaSignerInfo(com.google.protobuf.ByteString, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager $r15;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r16;
        org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener r2;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        org.waveprotocol.wave.util.logging.Log $r8, $r18;
        java.lang.String $r13, $r21;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r14, $r22;
        com.google.protobuf.ByteString r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r17, $r19, $r20;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r4;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r6 := @parameter0: com.google.protobuf.ByteString;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r2 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.LocalWaveletContainer loadLocalWavelet(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener)>(r1, r2);

        if $r3 == null goto label4;

        $r5 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>(r4);

        $z0 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.LocalWaveletContainer: boolean isDeltaSigner(org.waveprotocol.wave.model.version.HashedVersion,com.google.protobuf.ByteString)>($r5, r6);

        if $z0 == 0 goto label3;

        $r15 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        $r16 = interfaceinvoke $r15.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo retrieveSignerInfo(com.google.protobuf.ByteString)>(r6);

        if $r16 != null goto label1;

        $r18 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No stored signer info for valid getDeltaSignerInfo on ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>($r21);

        $r22 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Unknown signer info");

        interfaceinvoke r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r22);

        goto label2;

     label1:
        interfaceinvoke r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onSuccess(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r16);

     label2:
        goto label4;

     label3:
        $r8 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDeltaSignerInfo was not authrorised for wavelet ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end version ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r13);

        $r14 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Not authorised to get signer info");

        interfaceinvoke r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r14);

     label4:
        return;
    }

    public void postSignerInfo(java.lang.String, org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo, org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r1;
        org.waveprotocol.wave.util.logging.Log $r11;
        java.lang.String $r7, $r9, $r14, r16;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r15;
        org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener r3;
        org.waveprotocol.wave.crypto.SignatureException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r12, $r13;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r16 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        r3 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.CertificateManager: void storeSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("verification failure from domain ");

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: java.lang.String getDomain()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incoming postSignerInfo: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r14, $r4);

        $r15 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r9);

        interfaceinvoke r3.<org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r15);

        return;

     label4:
        interfaceinvoke r3.<org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener: void onSuccess()>();

        return;

        catch org.waveprotocol.wave.crypto.SignatureException from label1 to label2 with label3;
    }

    public void initialize() throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Wave server already initialized");

        r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized> = 1;

        return;
    }

    public java.util.Collection getHistory(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveletContainer $r2;
        org.waveprotocol.box.server.waveserver.AccessControlException $r6;
        java.util.Collection $r5;
        org.waveprotocol.wave.model.version.HashedVersion r3, r4;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r4 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Wave server not yet initialized");

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $r2 != null goto label1;

        $r6 = new org.waveprotocol.box.server.waveserver.AccessControlException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client request for history made for non-existent wavelet: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.waveprotocol.box.server.waveserver.AccessControlException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r5 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletContainer: java.util.Collection requestTransformedHistory(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r3, r4);

        return $r5;
    }

    public org.waveprotocol.box.common.ExceptionalIterator getWaveIds()
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        org.waveprotocol.box.common.ExceptionalIterator $r2;
        boolean $z0;
        org.waveprotocol.box.server.waveserver.WaveMap $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Wave server not yet initialized");

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.common.ExceptionalIterator getWaveIds()>();

        return $r2;
    }

    public com.google.common.collect.ImmutableSet getWaveletIds(org.waveprotocol.wave.model.id.WaveId) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        com.google.common.collect.ImmutableSet $r3;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.box.server.waveserver.WaveMap $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Wave server not yet initialized");

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveMap: com.google.common.collect.ImmutableSet lookupWavelets(org.waveprotocol.wave.model.id.WaveId)>(r1);

        return $r3;
    }

    public org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveletContainer $r2;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        org.waveprotocol.wave.util.logging.Log $r5;
        java.lang.String $r8;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Wave server not yet initialized");

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $r2 != null goto label1;

        $r5 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("client requested snapshot for non-existent wavelet: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r8);

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletContainer: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot()>();

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.data.ReadableWaveletData getReadableWaveletData(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r2;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r3;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        $r3 = $r2.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        return $r3;
    }

    public void submitRequest(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta, org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager $r2;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r3;
        long $l1;
        org.waveprotocol.box.server.waveserver.WaveServerImpl$2 $r6;
        int $i0;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener r7;
        java.lang.String $r12;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r5;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r1;
        java.lang.StringBuilder $r8, $r9, $r11;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r10;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r7 := @parameter2: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Wave server not yet initialized");

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        if $i0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty delta at version ");

        $r10 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersion()>();

        $l1 = virtualinvoke $r10.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r7.<org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener: void onFailure(java.lang.String)>($r12);

        return;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        $r3 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage serializeMessage(com.google.protobuf.Message)>(r1);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta signDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage)>($r3);

        $r6 = new org.waveprotocol.box.server.waveserver.WaveServerImpl$2;

        specialinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveServerImpl$2: void <init>(org.waveprotocol.box.server.waveserver.WaveServerImpl,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>(r0, r7);

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: void submitDelta(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)>(r5, r1, $r4, $r6);

        return;
    }

    public boolean checkAccessPermission(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveletContainer $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Wave server not yet initialized");

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $r2 == null goto label1;

        $z1 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletContainer: boolean checkAccessPermission(org.waveprotocol.wave.model.wave.ParticipantId)>(r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void <init>(java.util.concurrent.Executor, org.waveprotocol.box.server.waveserver.CertificateManager, org.waveprotocol.wave.federation.WaveletFederationProvider, org.waveprotocol.box.server.waveserver.WaveMap)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager r2;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r13;
        org.waveprotocol.box.server.waveserver.SignatureHandler $r11;
        org.waveprotocol.wave.util.logging.Log $r6, $r15;
        java.lang.String $r10;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        com.google.common.collect.ImmutableSet $r8;
        org.waveprotocol.wave.federation.WaveletFederationProvider r3;
        java.util.concurrent.Executor r1;
        org.waveprotocol.wave.crypto.SignatureException $r14;
        java.lang.StringBuilder $r5, $r7, $r9;
        org.waveprotocol.wave.crypto.SignerInfo $r12;
        org.waveprotocol.box.server.waveserver.WaveMap r4;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.CertificateManager;

        r3 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r4 := @parameter3: org.waveprotocol.box.server.waveserver.WaveMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean initialized> = 0;

        r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: java.util.concurrent.Executor listenerExecutor> = r1;

        r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager> = r2;

        r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.federation.WaveletFederationProvider federationRemote> = r3;

        r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap> = r4;

        $r6 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wave Server configured to host local domains: ");

        $r8 = interfaceinvoke r2.<org.waveprotocol.box.server.waveserver.CertificateManager: com.google.common.collect.ImmutableSet getLocalDomains()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r10);

        $r11 = interfaceinvoke r2.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.box.server.waveserver.SignatureHandler getLocalSigner()>();

        $r12 = interfaceinvoke $r11.<org.waveprotocol.box.server.waveserver.SignatureHandler: org.waveprotocol.wave.crypto.SignerInfo getSignerInfo()>();

        if $r12 == null goto label4;

     label1:
        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo toProtoBuf()>();

        interfaceinvoke r2.<org.waveprotocol.box.server.waveserver.CertificateManager: void storeSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r13);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r15.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>("Failed to add our own signer info to the certificate store", $r14);

     label4:
        return;

        catch org.waveprotocol.wave.crypto.SignatureException from label1 to label2 with label3;
    }

    private org.waveprotocol.box.server.waveserver.LocalWaveletContainer loadLocalWavelet(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener)
    {
        org.waveprotocol.wave.util.logging.Log $r4, $r11, $r18;
        java.lang.String $r7, $r14, $r21;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r2;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r9, $r15, $r22;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r16;
        java.lang.StringBuilder $r3, $r5, $r6, $r10, $r12, $r13, $r17, $r19, $r20;
        org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener r8;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r8 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $z0 != 0 goto label1;

        $r11 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to get delta signer info for remote wavelet ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r14);

        $r15 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Wavelet not hosted here.");

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r15);

        return null;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r18 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to access wavelet ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r21, $r16);

        $r22 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError internalServerError(java.lang.String)>("Storage access failure");

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r22);

        return null;

     label4:
        if $r2 != null goto label5;

        $r4 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-existent wavelet ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r7);

        $r9 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Wavelet does not exist");

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$FederationListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r9);

     label5:
        return $r2;

        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label1 to label2 with label3;
    }

    private boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11;
        org.waveprotocol.wave.util.logging.Log $r6;
        java.lang.String $r4, $r12, $r13;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: java.util.Set getLocalDomains()>();

        $r3 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        $r6 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        if $z0 == 0 goto label1;

        $r13 = "";

        goto label2;

     label1:
        $r13 = "not";

     label2:
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" local");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r12);

        return $z0;
    }

    private java.util.Set getLocalDomains()
    {
        org.waveprotocol.box.server.waveserver.CertificateManager $r1;
        com.google.common.collect.ImmutableSet $r2;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.CertificateManager: com.google.common.collect.ImmutableSet getLocalDomains()>();

        return $r2;
    }

    private org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getOrCreateRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.lang.Object[] $r2;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r4;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0, $z1;
        org.waveprotocol.box.server.waveserver.WaveMap $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "%s is not remote", $r2);

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getOrCreateRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r4;
    }

    private org.waveprotocol.box.server.waveserver.LocalWaveletContainer getOrCreateLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r4;
        java.lang.Object[] $r2;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.box.server.waveserver.WaveMap $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s is not local", $r2);

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getOrCreateLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r4;
    }

    private org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.lang.Object[] $r2;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r4;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0, $z1;
        org.waveprotocol.box.server.waveserver.WaveMap $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "%s is not remote", $r2);

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r4;
    }

    private org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r4;
        java.lang.Object[] $r2;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.box.server.waveserver.WaveMap $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s is not local", $r2);

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r4;
    }

    private org.waveprotocol.box.server.waveserver.WaveletContainer getWavelet(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveletContainer $r4;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;
        org.waveprotocol.box.server.waveserver.WaveMap $r2, $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        $r4 = virtualinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

     label2:
        return $r4;
    }

    private void submitDelta(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta, org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl$3 $r7;
        org.waveprotocol.wave.model.wave.ParticipantId $r25, $r33;
        org.waveprotocol.wave.util.logging.Log $r10, $r29;
        org.waveprotocol.wave.model.id.WaveletName r2;
        com.google.protobuf.InvalidProtocolBufferException $r60;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r50, $r53, $r56, $r59, $r62, $r65, $r68, $r75;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r44, $r46, $r47, $r48, $r70, $r71, $r73;
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r69;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        long $l1, $l4, $l5, $l7;
        org.waveprotocol.box.server.persistence.PersistenceException $r54;
        org.waveprotocol.wave.model.version.HashedVersion $r42;
        java.lang.String $r6, $r14, $r22, $r24, $r41, $r45, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r72, $r74;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r1;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r51;
        org.waveprotocol.box.server.waveserver.InvalidHashException $r57;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r17, $r43;
        org.waveprotocol.box.server.waveserver.WaveServerException $r66;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r27;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r26;
        boolean $z0, $z1, $z2;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r23;
        java.util.List $r4;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r8;
        org.waveprotocol.wave.model.operation.OperationException $r63;
        int $i0, $i2, $i3, $i6;

        r1 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r3 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        r8 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        if $i0 <= 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "empty delta");

        $z0 = specialinvoke r1.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r2);

        if $z0 == 0 goto label16;

        $r10 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit to ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by ");

        $r14 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r17 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersion()>();

        $l1 = virtualinvoke $r17.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ops");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r22);

        $r23 = specialinvoke r1.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getOrCreateLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r2);

     label03:
        $r24 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r25 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>($r24);

        $z1 = interfaceinvoke $r23.<org.waveprotocol.box.server.waveserver.LocalWaveletContainer: boolean checkAccessPermission(org.waveprotocol.wave.model.wave.ParticipantId)>($r25);

        if $z1 != 0 goto label05;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a participant of ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r50 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r49);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r50);

     label04:
        return;

     label05:
        goto label08;

     label06:
        $r69 := @caughtexception;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid author address: ");

        $r72 = virtualinvoke $r69.<org.waveprotocol.wave.model.wave.InvalidParticipantAddress: java.lang.String getMessage()>();

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        $r75 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r74);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r75);

        return;

     label07:
        $r66 := @caughtexception;

        $r67 = virtualinvoke $r66.<org.waveprotocol.box.server.waveserver.WaveServerException: java.lang.String getMessage()>();

        $r68 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError internalServerError(java.lang.String)>($r67);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r68);

        return;

     label08:
        $r26 = interfaceinvoke $r23.<org.waveprotocol.box.server.waveserver.LocalWaveletContainer: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord submitRequest(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta)>(r2, r3);

        $r27 = virtualinvoke $r26.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta()>();

        $r29 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit result for ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by ");

        $r33 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" applied ");

        $i3 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ops at v: ");

        $l4 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" t: ");

        $l5 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getApplicationTimestamp()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r41);

        $i6 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $r42 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r43 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>($r42);

        $l7 = virtualinvoke $r27.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getApplicationTimestamp()>();

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onSuccess(int,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,long)>($i6, $r43, $l7);

     label09:
        goto label15;

     label10:
        $r63 := @caughtexception;

        $r64 = virtualinvoke $r63.<org.waveprotocol.wave.model.operation.OperationException: java.lang.String getMessage()>();

        $r65 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r64);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r65);

        goto label15;

     label11:
        $r60 := @caughtexception;

        $r61 = virtualinvoke $r60.<com.google.protobuf.InvalidProtocolBufferException: java.lang.String getMessage()>();

        $r62 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r61);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r62);

        goto label15;

     label12:
        $r57 := @caughtexception;

        $r58 = virtualinvoke $r57.<org.waveprotocol.box.server.waveserver.InvalidHashException: java.lang.String getMessage()>();

        $r59 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r58);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r59);

        goto label15;

     label13:
        $r54 := @caughtexception;

        $r55 = virtualinvoke $r54.<org.waveprotocol.box.server.persistence.PersistenceException: java.lang.String getMessage()>();

        $r56 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError internalServerError(java.lang.String)>($r55);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r56);

        goto label15;

     label14:
        $r51 := @caughtexception;

        $r52 = virtualinvoke $r51.<org.waveprotocol.box.server.waveserver.WaveletStateException: java.lang.String getMessage()>();

        $r53 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError internalServerError(java.lang.String)>($r52);

        interfaceinvoke r8.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r53);

     label15:
        goto label17;

     label16:
        $r4 = virtualinvoke r3.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: java.util.List getSignatureList()>();

        $r5 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r7 = new org.waveprotocol.box.server.waveserver.WaveServerImpl$3;

        specialinvoke $r7.<org.waveprotocol.box.server.waveserver.WaveServerImpl$3: void <init>(org.waveprotocol.box.server.waveserver.WaveServerImpl,org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)>(r1, r3, r2, r8);

        specialinvoke r1.<org.waveprotocol.box.server.waveserver.WaveServerImpl: void postAllSignerInfo(java.util.List,java.lang.String,org.waveprotocol.box.server.waveserver.WaveServerImpl$PostSignerInfoCallback)>($r4, $r6, $r7);

     label17:
        return;

        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label03 to label04 with label06;
        catch org.waveprotocol.box.server.waveserver.WaveServerException from label03 to label04 with label07;
        catch org.waveprotocol.wave.model.operation.OperationException from label08 to label09 with label10;
        catch com.google.protobuf.InvalidProtocolBufferException from label08 to label09 with label11;
        catch org.waveprotocol.box.server.waveserver.InvalidHashException from label08 to label09 with label12;
        catch org.waveprotocol.box.server.persistence.PersistenceException from label08 to label09 with label13;
        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label08 to label09 with label14;
    }

    private void postAllSignerInfo(java.util.List, java.lang.String, org.waveprotocol.box.server.waveserver.WaveServerImpl$PostSignerInfoCallback)
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl$PostSignerInfoCallback r12;
        org.waveprotocol.box.server.waveserver.CertificateManager $r7;
        org.waveprotocol.box.server.waveserver.WaveServerImpl$4 $r11;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        org.waveprotocol.wave.util.logging.Log $r15, $r20, $r26;
        boolean $z0;
        com.google.protobuf.ByteString $r8;
        java.util.List r0;
        java.lang.StringBuilder $r14, $r16, $r17, $r19, $r21, $r22, $r23, $r25, $r27, $r28;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r10, $r18, $r24, $r29;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.federation.WaveletFederationProvider $r13;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature r5;
        java.lang.Object $r4;

        r6 := @this: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r0 := @parameter0: java.util.List;

        r10 := @parameter1: java.lang.String;

        r12 := @parameter2: org.waveprotocol.box.server.waveserver.WaveServerImpl$PostSignerInfoCallback;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r26 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $i5 = interfaceinvoke r0.<java.util.List: int size()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures to broadcast, expecting exactly 1");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r29);

     label1:
        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i1);

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.federation.Proto$ProtocolSignature) $r4;

        $r7 = r6.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        $r8 = virtualinvoke r5.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $r9 = interfaceinvoke $r7.<org.waveprotocol.box.server.waveserver.CertificateManager: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo retrieveSignerInfo(com.google.protobuf.ByteString)>($r8);

        if $r9 != null goto label3;

        $r15 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find signer info for ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r18);

        $i2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i2 != 0 goto label4;

        $r20 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished signature broadcast with ");

        $i3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" successful, running callback");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r24);

        $i4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        interfaceinvoke r12.<org.waveprotocol.box.server.waveserver.WaveServerImpl$PostSignerInfoCallback: void done(int)>($i4);

        goto label4;

     label3:
        $r13 = r6.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.federation.WaveletFederationProvider federationRemote>;

        $r11 = new org.waveprotocol.box.server.waveserver.WaveServerImpl$4;

        specialinvoke $r11.<org.waveprotocol.box.server.waveserver.WaveServerImpl$4: void <init>(org.waveprotocol.box.server.waveserver.WaveServerImpl,org.waveprotocol.wave.federation.Proto$ProtocolSignature,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger,org.waveprotocol.box.server.waveserver.WaveServerImpl$PostSignerInfoCallback)>(r6, r5, r10, $r2, $r1, r12);

        interfaceinvoke $r13.<org.waveprotocol.wave.federation.WaveletFederationProvider: void postSignerInfo(java.lang.String,org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo,org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)>(r10, $r9, $r11);

     label4:
        goto label2;

     label5:
        return;
    }

    static boolean access$000(org.waveprotocol.box.server.waveserver.WaveServerImpl, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: boolean isLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $z0;
    }

    static org.waveprotocol.wave.util.logging.Log access$100()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static org.waveprotocol.box.server.waveserver.RemoteWaveletContainer access$200(org.waveprotocol.box.server.waveserver.WaveServerImpl, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r2;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getOrCreateRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.federation.WaveletFederationProvider access$300(org.waveprotocol.box.server.waveserver.WaveServerImpl)
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        org.waveprotocol.wave.federation.WaveletFederationProvider $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.federation.WaveletFederationProvider federationRemote>;

        return $r1;
    }

    static org.waveprotocol.box.server.waveserver.CertificateManager access$400(org.waveprotocol.box.server.waveserver.WaveServerImpl)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager $r1;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.CertificateManager certificateManager>;

        return $r1;
    }

    static java.util.concurrent.Executor access$500(org.waveprotocol.box.server.waveserver.WaveServerImpl)
    {
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: java.util.concurrent.Executor listenerExecutor>;

        return $r1;
    }

    static org.waveprotocol.box.server.waveserver.RemoteWaveletContainer access$600(org.waveprotocol.box.server.waveserver.WaveServerImpl, org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveServerImpl r0;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r2;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveServerImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveServerImpl;");

        <org.waveprotocol.box.server.waveserver.WaveServerImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
