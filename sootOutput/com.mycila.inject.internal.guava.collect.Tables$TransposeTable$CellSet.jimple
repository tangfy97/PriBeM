class com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet extends com.mycila.inject.internal.guava.collect.Collections2$TransformedCollection implements java.util.Set
{
    final com.mycila.inject.internal.guava.collect.Tables$TransposeTable this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Tables$TransposeTable)
    {
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable r1;
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet r0;
        com.mycila.inject.internal.guava.collect.Table $r2;
        java.util.Set $r3;
        com.mycila.inject.internal.guava.base.Function $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Tables$TransposeTable;

        r0.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransposeTable this$0> = r1;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable: com.mycila.inject.internal.guava.collect.Table original>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Tables$TransposeTable: com.mycila.inject.internal.guava.base.Function access$000()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Collections2$TransformedCollection: void <init>(java.util.Collection,com.mycila.inject.internal.guava.base.Function)>($r3, $r4);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet r1;
        int $i0, $i1;
        java.util.Set r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof java.util.Set;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.util.Set) r0;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet: boolean containsAll(java.util.Collection)>(r2);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: int hashCodeImpl(java.util.Set)>(r0);

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Table $r4;
        java.util.Set $r5;
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable $r3;
        com.mycila.inject.internal.guava.collect.Table$Cell r1, $r9;
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet r2;
        java.lang.Object r0, $r6, $r7, $r8;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Table$Cell;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Table$Cell) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransposeTable this$0>;

        $r4 = $r3.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable: com.mycila.inject.internal.guava.collect.Table original>;

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        $r6 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r7 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r8 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getValue()>();

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Tables: com.mycila.inject.internal.guava.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r7, $r8);

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        return $z1;

     label1:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Table $r4;
        java.util.Set $r5;
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable $r3;
        com.mycila.inject.internal.guava.collect.Table$Cell r1, $r9;
        com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet r2;
        java.lang.Object r0, $r6, $r7, $r8;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Table$Cell;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Table$Cell) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable$CellSet: com.mycila.inject.internal.guava.collect.Tables$TransposeTable this$0>;

        $r4 = $r3.<com.mycila.inject.internal.guava.collect.Tables$TransposeTable: com.mycila.inject.internal.guava.collect.Table original>;

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        $r6 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r7 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r8 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Table$Cell: java.lang.Object getValue()>();

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Tables: com.mycila.inject.internal.guava.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r7, $r8);

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>($r9);

        return $z1;

     label1:
        return 0;
    }
}
