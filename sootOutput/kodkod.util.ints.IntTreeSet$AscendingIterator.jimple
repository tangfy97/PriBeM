final class kodkod.util.ints.IntTreeSet$AscendingIterator extends java.lang.Object implements kodkod.util.ints.IntIterator
{
    private kodkod.util.ints.IntTreeSet$Range next;
    private final int endpoint;
    private int currentMax;
    private int cursor;
    private int lastReturned;
    private boolean canRemove;
    final kodkod.util.ints.IntTreeSet this$0;

    void <init>(kodkod.util.ints.IntTreeSet, int, int)
    {
        kodkod.util.ints.IntTreeSet$AscendingIterator r0;
        kodkod.util.ints.IntTreeSet$Range $r4, $r5, $r6, $r7, $r9, $r11;
        int i0, i1, $i2, $i3, $i4, $i6;
        kodkod.util.ints.IntTree $r2, $r8;
        kodkod.util.ints.IntTreeSet r1;
        kodkod.util.ints.IntTree$Node $r3, $r10;

        r0 := @this: kodkod.util.ints.IntTreeSet$AscendingIterator;

        r1 := @parameter0: kodkod.util.ints.IntTreeSet;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int endpoint> = i0;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int lastReturned> = -2147483648;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: boolean canRemove> = 0;

        $r2 = staticinvoke <kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree access$1(kodkod.util.ints.IntTreeSet)>(r1);

        $r3 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i1);

        $r4 = (kodkod.util.ints.IntTreeSet$Range) $r3;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next> = $r4;

        $r5 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        if $r5 != null goto label1;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor> = 0;

        $i6 = (int) -1;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int currentMax> = $i6;

        goto label2;

     label1:
        $r6 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        $i2 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>($r6);

        $i3 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i2, i1);

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor> = $i3;

        $r7 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        $i4 = $r7.<kodkod.util.ints.IntTreeSet$Range: int key>;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int currentMax> = $i4;

        $r8 = staticinvoke <kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree access$1(kodkod.util.ints.IntTreeSet)>(r1);

        $r9 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        $r10 = virtualinvoke $r8.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)>($r9);

        $r11 = (kodkod.util.ints.IntTreeSet$Range) $r10;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next> = $r11;

     label2:
        return;
    }

    public boolean hasNext()
    {
        kodkod.util.ints.IntTreeSet$AscendingIterator r0;
        kodkod.util.ints.IntTreeSet$Range $r1, $r2, $r3, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kodkod.util.ints.IntTree $r5;
        kodkod.util.ints.IntTreeSet $r4;
        kodkod.util.ints.IntTree$Node $r7;

        r0 := @this: kodkod.util.ints.IntTreeSet$AscendingIterator;

        $i1 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor>;

        $i0 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int currentMax>;

        if $i1 <= $i0 goto label2;

        $r1 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        $i5 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>($r2);

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor> = $i5;

        $r3 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        $i6 = $r3.<kodkod.util.ints.IntTreeSet$Range: int key>;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int currentMax> = $i6;

        $r4 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet this$0>;

        $r5 = staticinvoke <kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree access$1(kodkod.util.ints.IntTreeSet)>($r4);

        $r6 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next>;

        $r7 = virtualinvoke $r5.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)>($r6);

        $r8 = (kodkod.util.ints.IntTreeSet$Range) $r7;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next> = $r8;

     label2:
        $i2 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int lastReturned>;

        if $i2 >= 2147483647 goto label3;

        $i4 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor>;

        $i3 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int endpoint>;

        if $i4 > $i3 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int next()
    {
        kodkod.util.ints.IntTreeSet$AscendingIterator r0;
        int $i0, $i1;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.IntTreeSet$AscendingIterator;

        $z0 = virtualinvoke r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label1:
        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: boolean canRemove> = 1;

        $i0 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor>;

        $i1 = $i0 + 1;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor> = $i1;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int lastReturned> = $i0;

        return $i0;
    }

    public void remove()
    {
        kodkod.util.ints.IntTreeSet$AscendingIterator r0;
        kodkod.util.ints.IntTreeSet $r1, $r2;
        java.lang.IllegalStateException $r6;
        kodkod.util.ints.IntTreeSet$Range $r5;
        kodkod.util.ints.IntTree$Node $r4;
        int $i0, $i1;
        kodkod.util.ints.IntTree $r3;
        boolean $z0;

        r0 := @this: kodkod.util.ints.IntTreeSet$AscendingIterator;

        $z0 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: boolean canRemove>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet this$0>;

        $i0 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int lastReturned>;

        virtualinvoke $r1.<kodkod.util.ints.IntTreeSet: boolean remove(int)>($i0);

        $r2 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet this$0>;

        $r3 = staticinvoke <kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree access$1(kodkod.util.ints.IntTreeSet)>($r2);

        $i1 = r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: int cursor>;

        $r4 = virtualinvoke $r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>($i1);

        $r5 = (kodkod.util.ints.IntTreeSet$Range) $r4;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: kodkod.util.ints.IntTreeSet$Range next> = $r5;

        r0.<kodkod.util.ints.IntTreeSet$AscendingIterator: boolean canRemove> = 0;

        return;
    }
}
