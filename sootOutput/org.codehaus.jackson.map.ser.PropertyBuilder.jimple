public class org.codehaus.jackson.map.ser.PropertyBuilder extends java.lang.Object
{
    protected final org.codehaus.jackson.map.SerializationConfig _config;
    protected final org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc;
    protected final org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _outputProps;
    protected final org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    protected java.lang.Object _defaultBean;

    public void <init>(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r2;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r3, $r4;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.SerializationConfig r1, $r5;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config> = r1;

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc> = r2;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion getSerializationInclusion()>();

        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r3);

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _outputProps> = $r4;

        $r5 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r6;

        return;
    }

    public org.codehaus.jackson.map.util.Annotations getClassAnnotations()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.util.Annotations $r2;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r1 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        return $r2;
    }

    protected org.codehaus.jackson.map.ser.BeanPropertyWriter buildWriter(java.lang.String, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.introspect.AnnotatedMember, boolean)
    {
        java.lang.IllegalStateException $r17;
        org.codehaus.jackson.map.ser.PropertyBuilder r2;
        org.codehaus.jackson.map.util.Annotations $r36;
        int[] $r12;
        org.codehaus.jackson.map.TypeSerializer r5, r11;
        java.lang.reflect.Method r30;
        boolean $z0, z1, $z2, $z3, $z4, z5;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.JsonSerializer r10;
        org.codehaus.jackson.map.AnnotationIntrospector $r7, $r38;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r22, $r35;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r6, $r8;
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType r3, $r4, $r15, $r16, $r23, r32;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r34, r37;
        java.lang.Boolean $r39;
        java.lang.String r9, $r28;
        java.lang.reflect.Field r31;
        java.lang.Object $r13, r33;
        java.lang.Class $r14;
        org.codehaus.jackson.map.introspect.AnnotatedField $r29;

        r2 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r9 := @parameter0: java.lang.String;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        r10 := @parameter2: org.codehaus.jackson.map.JsonSerializer;

        r11 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r5 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        r0 := @parameter5: org.codehaus.jackson.map.introspect.AnnotatedMember;

        z1 := @parameter6: boolean;

        $z0 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedField;

        if $z0 == 0 goto label01;

        r30 = null;

        $r29 = (org.codehaus.jackson.map.introspect.AnnotatedField) r0;

        r31 = virtualinvoke $r29.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.reflect.Field getAnnotated()>();

        goto label02;

     label01:
        $r1 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) r0;

        r30 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        r31 = null;

     label02:
        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.type.JavaType findSerializationType(org.codehaus.jackson.map.introspect.Annotated,boolean,org.codehaus.jackson.type.JavaType)>(r0, z1, r3);

        r32 = $r4;

        if r5 == null goto label05;

        if $r4 != null goto label03;

        r32 = r3;

     label03:
        $r15 = virtualinvoke r32.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        if $r15 != null goto label04;

        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem trying to create BeanPropertyWriter for property \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (of type ");

        $r22 = r2.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r23 = virtualinvoke $r22.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.type.JavaType getType()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("); serialization type ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no content");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r17;

     label04:
        $r16 = virtualinvoke r32.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)>(r5);

        r32 = $r16;

        virtualinvoke $r16.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

     label05:
        r33 = null;

        z5 = 0;

        $r7 = r2.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r6 = r2.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _outputProps>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>(r0, $r6);

        if $r8 == null goto label11;

        $r12 = <org.codehaus.jackson.map.ser.PropertyBuilder$1: int[] $SwitchMap$org$codehaus$jackson$map$annotate$JsonSerialize$Inclusion>;

        $i0 = virtualinvoke $r8.<org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 1: goto label06;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label06:
        $r13 = virtualinvoke r2.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getDefaultValue(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Field)>(r9, r30, r31);

        r33 = $r13;

        if $r13 != null goto label07;

        z5 = 1;

        goto label11;

     label07:
        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = virtualinvoke $r14.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label11;

        r33 = staticinvoke <org.codehaus.jackson.map.util.Comparators: java.lang.Object getArrayComparator(java.lang.Object)>($r13);

        goto label11;

     label08:
        z5 = 1;

        r33 = virtualinvoke r2.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getEmptyValueChecker(java.lang.String,org.codehaus.jackson.type.JavaType)>(r9, r3);

        goto label11;

     label09:
        z5 = 1;

     label10:
        $z3 = virtualinvoke r3.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z3 == 0 goto label11;

        r33 = virtualinvoke r2.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getContainerValueChecker(java.lang.String,org.codehaus.jackson.type.JavaType)>(r9, r3);

     label11:
        $r34 = new org.codehaus.jackson.map.ser.BeanPropertyWriter;

        $r35 = r2.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r36 = virtualinvoke $r35.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        specialinvoke $r34.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void <init>(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.util.Annotations,java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.type.JavaType,java.lang.reflect.Method,java.lang.reflect.Field,boolean,java.lang.Object)>(r0, $r36, r9, r3, r10, r11, r32, r30, r31, z5, r33);

        r37 = $r34;

        $r38 = r2.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r39 = virtualinvoke $r38.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Boolean shouldUnwrapProperty(org.codehaus.jackson.map.introspect.AnnotatedMember)>(r0);

        if $r39 == null goto label12;

        $z2 = virtualinvoke $r39.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label12;

        r37 = virtualinvoke $r34.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter unwrappingWriter()>();

     label12:
        return r37;
    }

    protected org.codehaus.jackson.type.JavaType findSerializationType(org.codehaus.jackson.map.introspect.Annotated, boolean, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r5, $r6;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.SerializationConfig $r8, $r22;
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.type.JavaType r21, $r23, $r24;
        java.lang.String $r12, $r15, $r18, $r20;
        boolean $z0, $z1, z2, $z3;
        java.lang.IllegalArgumentException $r9;
        org.codehaus.jackson.map.AnnotationIntrospector $r2, $r4;
        java.lang.Class $r3, $r7;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r16, $r17, $r19;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        z2 := @parameter1: boolean;

        r21 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationType(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        if $r3 == null goto label04;

        $r7 = virtualinvoke r21.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z0 == 0 goto label01;

        r21 = virtualinvoke r21.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r3);

        goto label03;

     label01:
        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 != 0 goto label02;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal concrete-type annotation for method \'");

        $r12 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.Annotated: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': class ");

        $r15 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not a super-type of (declared) class ");

        $r18 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r9;

     label02:
        $r8 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        r21 = virtualinvoke $r8.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>(r21, $r3);

     label03:
        z2 = 1;

     label04:
        $r22 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r23 = staticinvoke <org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r22, r1, r21);

        if $r23 == r21 goto label05;

        z2 = 1;

        r21 = $r23;

     label05:
        if z2 != 0 goto label08;

        $r4 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        if $r5 == null goto label08;

        $r6 = <org.codehaus.jackson.map.annotate.JsonSerialize$Typing: org.codehaus.jackson.map.annotate.JsonSerialize$Typing STATIC>;

        if $r5 != $r6 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z2 = $z3;

     label08:
        if z2 == 0 goto label09;

        $r24 = r21;

        goto label10;

     label09:
        $r24 = null;

     label10:
        return $r24;
    }

    protected java.lang.Object getDefaultBean()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r5, $r8;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.SerializationConfig $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r9;
        java.lang.String $r14, $r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object $r1, $r2, $r6, $r7;
        java.lang.Class $r10;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;
        org.codehaus.jackson.map.SerializationConfig$Feature $r3;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r1 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean>;

        if $r1 != null goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r4 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.Object instantiateBean(boolean)>($z0);

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean> = $r6;

        $r7 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean>;

        if $r7 != null goto label1;

        $r8 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getAnnotated()>();

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r14 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no default constructor; can not instantiate default bean value to support \'properties=JsonSerialize.Inclusion.NON_DEFAULT\' annotation");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean>;

        return $r2;
    }

    protected java.lang.Object getDefaultValue(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Field)
    {
        java.lang.Object[] $r5;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        java.lang.reflect.Field r3;
        java.lang.Exception $r7;
        java.lang.Object $r1, $r4, $r6, $r9;
        java.lang.String r8;
        java.lang.reflect.Method r2;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r8 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getDefaultBean()>();

     label1:
        if r2 == null goto label3;

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r5);

     label2:
        return $r6;

     label3:
        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

     label4:
        return $r4;

     label5:
        $r7 := @caughtexception;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>($r7, r8, $r1);

        return $r9;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected java.lang.Object getContainerValueChecker(java.lang.String, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker $r6;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.ser.PropertyBuilder$EmptyArrayChecker $r7;
        org.codehaus.jackson.type.JavaType r3;
        java.lang.Class $r4, $r5;
        java.lang.String r8;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r8 := @parameter0: java.lang.String;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_EMPTY_JSON_ARRAYS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r3.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z1 == 0 goto label1;

        $r7 = new org.codehaus.jackson.map.ser.PropertyBuilder$EmptyArrayChecker;

        specialinvoke $r7.<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyArrayChecker: void <init>()>();

        return $r7;

     label1:
        $r4 = class "Ljava/util/Collection;";

        $r5 = virtualinvoke r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z2 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z2 == 0 goto label2;

        $r6 = new org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker;

        specialinvoke $r6.<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: void <init>()>();

        return $r6;

     label2:
        return null;
    }

    protected java.lang.Object getEmptyValueChecker(java.lang.String, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker $r4;
        org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker $r5;
        org.codehaus.jackson.map.ser.PropertyBuilder r8;
        org.codehaus.jackson.map.ser.PropertyBuilder$EmptyStringChecker $r7;
        org.codehaus.jackson.map.ser.PropertyBuilder$EmptyArrayChecker $r6;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1, $r2, $r3;
        java.lang.String r9;
        boolean $z0, $z1, $z2;

        r8 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r1 != class "Ljava/lang/String;" goto label1;

        $r7 = new org.codehaus.jackson.map.ser.PropertyBuilder$EmptyStringChecker;

        specialinvoke $r7.<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyStringChecker: void <init>()>();

        return $r7;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label2;

        $r6 = new org.codehaus.jackson.map.ser.PropertyBuilder$EmptyArrayChecker;

        specialinvoke $r6.<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyArrayChecker: void <init>()>();

        return $r6;

     label2:
        $r2 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z1 == 0 goto label3;

        $r5 = new org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker;

        specialinvoke $r5.<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyCollectionChecker: void <init>()>();

        return $r5;

     label3:
        $r3 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z2 == 0 goto label4;

        $r4 = new org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.PropertyBuilder$EmptyMapChecker: void <init>()>();

        return $r4;

     label4:
        return null;
    }

    protected java.lang.Object _throwWrapped(java.lang.Exception, java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r1, r17;
        java.lang.Error $r15;
        org.codehaus.jackson.map.ser.PropertyBuilder r16;
        java.lang.String r5, $r10, $r13;
        boolean $z0, $z1;
        java.lang.RuntimeException $r14;
        java.lang.IllegalArgumentException $r2;
        java.lang.Exception r0;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r11, $r12;
        java.lang.Object r8;
        java.lang.Class $r9;

        r16 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        r0 := @parameter0: java.lang.Exception;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.Object;

        r17 = r0;

     label1:
        $r1 = virtualinvoke r17.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r1 == null goto label2;

        r17 = virtualinvoke r17.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $z0 = r17 instanceof java.lang.Error;

        if $z0 == 0 goto label3;

        $r15 = (java.lang.Error) r17;

        throw $r15;

     label3:
        $z1 = r17 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label4;

        $r14 = (java.lang.RuntimeException) r17;

        throw $r14;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get property \'");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of default ");

        $r9 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instance");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r2;
    }
}
