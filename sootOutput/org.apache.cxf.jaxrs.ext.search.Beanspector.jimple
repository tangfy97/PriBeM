class org.apache.cxf.jaxrs.ext.search.Beanspector extends java.lang.Object
{
    private java.lang.Class tclass;
    private java.lang.Object tobj;
    private java.util.Map getters;
    private java.util.Map setters;

    public void <init>(java.lang.Class)
    {
        java.util.LinkedHashMap $r1, $r2;
        java.lang.Class r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r3 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters> = $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tclass is null");

        throw $r4;

     label1:
        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Class tclass> = r3;

        specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: void init()>();

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.util.LinkedHashMap $r1, $r2;
        java.lang.Object r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r3 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters> = $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tobj is null");

        throw $r4;

     label1:
        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj> = r3;

        specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: void init()>();

        return;
    }

    private void init()
    {
        java.lang.reflect.Method[] $r3;
        java.util.Map $r5, $r7, $r11, $r15, $r25, $r27;
        java.lang.reflect.Method $r13, $r17, r31;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r6, $r8;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;
        java.lang.Object[] $r21;
        java.util.HashSet $r4;
        int $i0, i1;
        java.lang.String $r22, $r23, $r24, $r26, $r28, r32;
        java.util.Iterator $r9;
        java.lang.Class[] $r18;
        java.lang.IllegalArgumentException $r20;
        java.lang.Class $r1, $r2, $r14, r19, $r30;
        java.lang.Object $r10, $r12, $r16, $r29;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Class tclass>;

        if $r1 != null goto label1;

        $r29 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj>;

        $r30 = virtualinvoke $r29.<java.lang.Object: java.lang.Class getClass()>();

        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Class tclass> = $r30;

     label1:
        $r2 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Class tclass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i0 = lengthof $r3;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        r31 = $r3[i1];

        $z2 = specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: boolean isGetter(java.lang.reflect.Method)>(r31);

        if $z2 == 0 goto label3;

        $r27 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r28 = specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.String getPropertyName(java.lang.reflect.Method)>(r31);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r31);

        goto label4;

     label3:
        $z3 = specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: boolean isSetter(java.lang.reflect.Method)>(r31);

        if $z3 == 0 goto label4;

        $r25 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r26 = specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.String getPropertyName(java.lang.reflect.Method)>(r31);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, r31);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r4 = new java.util.HashSet;

        $r5 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r6);

        $r7 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r4.<java.util.Set: boolean retainAll(java.util.Collection)>($r8);

        $r9 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.String) $r10;

        $r11 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        $r13 = (java.lang.reflect.Method) $r12;

        $r14 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r15 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        $r17 = (java.lang.reflect.Method) $r16;

        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r19 = $r18[0];

        $z1 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r19);

        if $z1 != 0 goto label7;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = newarray (java.lang.Object)[3];

        $r21[0] = r32;

        $r22 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r21[1] = $r22;

        $r23 = virtualinvoke r19.<java.lang.Class: java.lang.String getName()>();

        $r21[2] = $r23;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Accessor \'%s\' type mismatch, getter type is %s while setter type is %s", $r21);

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label7:
        goto label6;

     label8:
        return;
    }

    public java.lang.Object getBean()
    {
        java.lang.Object $r1;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj>;

        return $r1;
    }

    public java.util.Set getGettersNames()
    {
        java.util.Map $r1;
        java.util.Set $r2, $r3;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Set getSettersNames()
    {
        java.util.Map $r1;
        java.util.Set $r2, $r3;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.lang.Class getAccessorType(java.lang.String) throws java.lang.Exception
    {
        java.lang.Object[] $r5;
        java.util.Set $r7, $r9;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;
        java.beans.IntrospectionException $r11;
        java.util.Map $r2, $r6, $r8, $r12;
        java.lang.Object $r3, $r13;
        java.lang.Class $r4;
        java.lang.String r1, $r10;
        java.lang.reflect.Method r14;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (java.lang.reflect.Method) $r3;

        if r14 != null goto label1;

        $r12 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (java.lang.reflect.Method) $r13;

     label1:
        if r14 != null goto label2;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r1;

        $r6 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $r5[1] = $r7;

        $r8 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r5[2] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Accessor \'%s\' not found, known setters are: %s, known getters are: %s", $r5);

        $r11 = new java.beans.IntrospectionException;

        specialinvoke $r11.<java.beans.IntrospectionException: void <init>(java.lang.String)>($r10);

        throw $r11;

     label2:
        $r4 = virtualinvoke r14.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        return $r4;
    }

    public org.apache.cxf.jaxrs.ext.search.Beanspector swap(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.cxf.jaxrs.ext.search.Beanspector r1;

        r1 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newobject is null");

        throw $r2;

     label1:
        r1.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj> = r0;

        return r1;
    }

    public org.apache.cxf.jaxrs.ext.search.Beanspector instantiate() throws java.lang.Exception
    {
        java.lang.Class $r1;
        java.lang.Object $r2;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Class tclass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj> = $r2;

        return r0;
    }

    public org.apache.cxf.jaxrs.ext.search.Beanspector setValue(java.lang.String, java.lang.Object) throws java.lang.Throwable
    {
        java.lang.Object[] $r6;
        java.util.Set $r8;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;
        java.beans.IntrospectionException $r10;
        java.util.Map $r2, $r7;
        java.lang.Object $r3, r5;
        java.lang.String r1, $r9;
        java.lang.reflect.Method r4;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.reflect.Method) $r3;

        if r4 != null goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r1;

        $r7 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map setters>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Setter \'%s\' not found, known setters are: %s", $r6);

        $r10 = new java.beans.IntrospectionException;

        specialinvoke $r10.<java.beans.IntrospectionException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label1:
        virtualinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: org.apache.cxf.jaxrs.ext.search.Beanspector setValue(java.lang.reflect.Method,java.lang.Object)>(r4, r5);

        return r0;
    }

    public org.apache.cxf.jaxrs.ext.search.Beanspector setValue(java.util.Map) throws java.lang.Throwable
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.apache.cxf.jaxrs.ext.search.Beanspector r3;
        java.util.Map r0;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r3 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r3.<org.apache.cxf.jaxrs.ext.search.Beanspector: org.apache.cxf.jaxrs.ext.search.Beanspector setValue(java.lang.String,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return r3;
    }

    public org.apache.cxf.jaxrs.ext.search.Beanspector setValue(java.lang.reflect.Method, java.lang.Object) throws java.lang.Throwable
    {
        java.lang.Throwable $r21;
        java.lang.Object[] $r4, $r9;
        java.lang.String $r10, $r12, $r13, $r16, $r19;
        java.lang.reflect.Method r0;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r8, $r14;
        java.lang.Exception $r7;
        org.apache.cxf.jaxrs.ext.search.Beanspector r3;
        java.lang.reflect.InvocationTargetException $r20;
        java.lang.Class r2, $r11;
        java.lang.Object r5, $r6;
        java.lang.StringBuilder $r15, $r17, $r18;

        r3 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.lang.reflect.Method;

        r5 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r2 = $r1[0];

     label1:
        $r6 = r3.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r4);

     label2:
        return r3;

     label3:
        $r20 := @caughtexception;

        $r21 = virtualinvoke $r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        throw $r21;

     label4:
        $r8 := @caughtexception;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r9[0] = $r10;

        $r11 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r9[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("; setter parameter type: %s, set value type: %s", $r9);

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label5:
        $r7 := @caughtexception;

        throw $r7;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public java.lang.Object getValue(java.lang.String) throws java.lang.Throwable
    {
        java.util.Map $r2;
        java.lang.Object $r3, $r5;
        java.lang.String r1;
        java.lang.reflect.Method $r4;
        org.apache.cxf.jaxrs.ext.search.Beanspector r0;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.util.Map getters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        $r5 = virtualinvoke r0.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object getValue(java.lang.reflect.Method)>($r4);

        return $r5;
    }

    public java.lang.Object getValue(java.lang.reflect.Method) throws java.lang.Throwable
    {
        java.lang.Throwable $r7;
        java.lang.Object[] $r2;
        java.lang.Exception $r5;
        org.apache.cxf.jaxrs.ext.search.Beanspector r1;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Object $r3, $r4;
        java.lang.reflect.Method r0;

        r1 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.lang.reflect.Method;

     label1:
        $r3 = r1.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Object tobj>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r2);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        throw $r7;

     label4:
        $r5 := @caughtexception;

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private boolean isGetter(java.lang.reflect.Method)
    {
        java.lang.Class[] $r1;
        org.apache.cxf.jaxrs.ext.search.Beanspector r4;
        int $i0;
        java.lang.String $r2, $r3;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;

        r4 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private java.lang.String getPropertyName(java.lang.reflect.Method)
    {
        org.apache.cxf.jaxrs.ext.search.Beanspector r3;
        int $i0, $i1;
        java.lang.String $r1, $r2, r4;
        java.lang.reflect.Method r0;
        boolean $z0;

        r3 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(2, $i1);

        goto label2;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(3, $i0);

     label2:
        return r4;
    }

    private boolean isSetter(java.lang.reflect.Method)
    {
        java.lang.Class[] $r3;
        org.apache.cxf.jaxrs.ext.search.Beanspector r6;
        int $i0;
        java.lang.Class $r1, $r2;
        java.lang.String $r4, $r5;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3;

        r6 := @this: org.apache.cxf.jaxrs.ext.search.Beanspector;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r3;

        if $i0 != 1 goto label2;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z1 != 0 goto label1;

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }
}
