public class org.apache.tika.parser.pdf.PDFParserConfig extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private boolean enableAutoSpace;
    private boolean suppressDuplicateOverlappingText;
    private boolean extractAnnotationText;
    private boolean sortByPosition;
    private boolean useNonSequentialParser;
    private boolean extractAcroFormContent;
    private boolean extractInlineImages;
    private boolean extractUniqueInlineImagesOnly;
    private java.lang.Float averageCharTolerance;
    private java.lang.Float spacingTolerance;

    public void <init>()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        java.lang.Class $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace> = 1;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText> = 1;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition> = 0;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser> = 0;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent> = 1;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages> = 0;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly> = 1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("PDFParser.properties");

        specialinvoke r0.<org.apache.tika.parser.pdf.PDFParserConfig: void init(java.io.InputStream)>($r2);

        return;
    }

    public void <init>(java.io.InputStream)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace> = 1;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText> = 1;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition> = 0;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser> = 0;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent> = 1;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages> = 0;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly> = 1;

        specialinvoke r0.<org.apache.tika.parser.pdf.PDFParserConfig: void init(java.io.InputStream)>(r1);

        return;
    }

    private void init(java.io.InputStream)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.Throwable $r4;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.util.Properties $r1;
        org.apache.tika.parser.pdf.PDFParserConfig r2;
        java.io.IOException $r3, $r5, $r6, $r7;
        java.io.InputStream r0;

        r2 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label01;

        return;

     label01:
        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

     label02:
        virtualinvoke $r1.<java.util.Properties: void load(java.io.InputStream)>(r0);

     label03:
        if r0 == null goto label18;

     label04:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label05:
        goto label18;

     label06:
        $r7 := @caughtexception;

        goto label18;

     label07:
        $r6 := @caughtexception;

     label08:
        if r0 == null goto label18;

     label09:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label10:
        goto label18;

     label11:
        $r5 := @caughtexception;

        goto label18;

     label12:
        $r4 := @caughtexception;

     label13:
        if r0 == null goto label17;

     label14:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r3 := @caughtexception;

     label17:
        throw $r4;

     label18:
        $r8 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("enableAutoSpace");

        $z0 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getEnableAutoSpace()>();

        $z1 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r8, $z0);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setEnableAutoSpace(boolean)>($z1);

        $r9 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("suppressDuplicateOverlappingText");

        $z2 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getSuppressDuplicateOverlappingText()>();

        $z3 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r9, $z2);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setSuppressDuplicateOverlappingText(boolean)>($z3);

        $r10 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("extractAnnotationText");

        $z4 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getExtractAnnotationText()>();

        $z5 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r10, $z4);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setExtractAnnotationText(boolean)>($z5);

        $r11 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("sortByPosition");

        $z6 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getSortByPosition()>();

        $z7 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r11, $z6);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setSortByPosition(boolean)>($z7);

        $r12 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("useNonSequentialParser");

        $z8 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getUseNonSequentialParser()>();

        $z9 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r12, $z8);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setUseNonSequentialParser(boolean)>($z9);

        $r13 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("extractAcroFormContent");

        $z10 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getExtractAcroFormContent()>();

        $z11 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r13, $z10);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setExtractAcroFormContent(boolean)>($z11);

        $r14 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("extractInlineImages");

        $z12 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getExtractInlineImages()>();

        $z13 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r14, $z12);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setExtractInlineImages(boolean)>($z13);

        $r15 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("extractUniqueInlineImagesOnly");

        $z14 = virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getExtractUniqueInlineImagesOnly()>();

        $z15 = specialinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getProp(java.lang.String,boolean)>($r15, $z14);

        virtualinvoke r2.<org.apache.tika.parser.pdf.PDFParserConfig: void setExtractUniqueInlineImagesOnly(boolean)>($z15);

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void configure(org.apache.tika.parser.pdf.PDF2XHTML)
    {
        org.apache.tika.parser.pdf.PDF2XHTML r0;
        java.lang.Float $r2, $r3, $r4, $r5;
        org.apache.tika.parser.pdf.PDFParserConfig r1;
        float $f0, $f1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r0 := @parameter0: org.apache.tika.parser.pdf.PDF2XHTML;

        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setForceParsing(boolean)>(1);

        $z0 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getSortByPosition()>();

        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setSortByPosition(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getEnableAutoSpace()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setWordSeparator(java.lang.String)>(" ");

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setWordSeparator(java.lang.String)>("");

     label2:
        $r2 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float getAverageCharTolerance()>();

        if $r2 == null goto label3;

        $r5 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float getAverageCharTolerance()>();

        $f1 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setAverageCharTolerance(float)>($f1);

     label3:
        $r3 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float getSpacingTolerance()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float getSpacingTolerance()>();

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setSpacingTolerance(float)>($f0);

     label4:
        $z2 = virtualinvoke r1.<org.apache.tika.parser.pdf.PDFParserConfig: boolean getSuppressDuplicateOverlappingText()>();

        virtualinvoke r0.<org.apache.tika.parser.pdf.PDF2XHTML: void setSuppressDuplicateOverlappingText(boolean)>($z2);

        return;
    }

    public void setExtractAcroFormContent(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent> = z0;

        return;
    }

    public boolean getExtractAcroFormContent()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent>;

        return $z0;
    }

    public void setExtractInlineImages(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages> = z0;

        return;
    }

    public boolean getExtractInlineImages()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages>;

        return $z0;
    }

    public void setExtractUniqueInlineImagesOnly(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly> = z0;

        return;
    }

    public boolean getExtractUniqueInlineImagesOnly()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly>;

        return $z0;
    }

    public boolean getEnableAutoSpace()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace>;

        return $z0;
    }

    public void setEnableAutoSpace(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace> = z0;

        return;
    }

    public boolean getSuppressDuplicateOverlappingText()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean suppressDuplicateOverlappingText>;

        return $z0;
    }

    public void setSuppressDuplicateOverlappingText(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean suppressDuplicateOverlappingText> = z0;

        return;
    }

    public boolean getExtractAnnotationText()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText>;

        return $z0;
    }

    public void setExtractAnnotationText(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText> = z0;

        return;
    }

    public boolean getSortByPosition()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition>;

        return $z0;
    }

    public void setSortByPosition(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition> = z0;

        return;
    }

    public boolean getUseNonSequentialParser()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean $z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser>;

        return $z0;
    }

    public void setUseNonSequentialParser(boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        boolean z0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser> = z0;

        return;
    }

    public java.lang.Float getAverageCharTolerance()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        java.lang.Float $r1;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $r1 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        return $r1;
    }

    public void setAverageCharTolerance(java.lang.Float)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        java.lang.Float r1;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r1 := @parameter0: java.lang.Float;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance> = r1;

        return;
    }

    public java.lang.Float getSpacingTolerance()
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        java.lang.Float $r1;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $r1 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        return $r1;
    }

    public void setSpacingTolerance(java.lang.Float)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r0;
        java.lang.Float r1;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r1 := @parameter0: java.lang.Float;

        r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance> = r1;

        return;
    }

    private boolean getProp(java.lang.String, boolean)
    {
        org.apache.tika.parser.pdf.PDFParserConfig r5;
        java.util.Locale $r1, $r3;
        java.lang.String r0, $r2, $r4;
        boolean $z0, $z1, z2;

        r5 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r0 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        if r0 != null goto label1;

        return z2;

     label1:
        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 == 0 goto label3;

        return 0;

     label3:
        return z2;
    }

    public int hashCode()
    {
        java.lang.Float $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        short $s20, $s21, $s22, $s23, $s24, $s25, $s27, $s28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i26;
        org.apache.tika.parser.pdf.PDFParserConfig r0;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $r1 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        if $r1 != null goto label01;

        $i19 = 0;

        goto label02;

     label01:
        $r2 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        $i19 = virtualinvoke $r2.<java.lang.Float: int hashCode()>();

     label02:
        $i18 = 31 + $i19;

        $i0 = 31 * $i18;

        $z0 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace>;

        if $z0 == 0 goto label03;

        $s20 = 1231;

        goto label04;

     label03:
        $s20 = 1237;

     label04:
        $i17 = $i0 + $s20;

        $i1 = 31 * $i17;

        $z1 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent>;

        if $z1 == 0 goto label05;

        $s21 = 1231;

        goto label06;

     label05:
        $s21 = 1237;

     label06:
        $i16 = $i1 + $s21;

        $i2 = 31 * $i16;

        $z2 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText>;

        if $z2 == 0 goto label07;

        $s22 = 1231;

        goto label08;

     label07:
        $s22 = 1237;

     label08:
        $i15 = $i2 + $s22;

        $i3 = 31 * $i15;

        $z3 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages>;

        if $z3 == 0 goto label09;

        $s23 = 1231;

        goto label10;

     label09:
        $s23 = 1237;

     label10:
        $i14 = $i3 + $s23;

        $i4 = 31 * $i14;

        $z4 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly>;

        if $z4 == 0 goto label11;

        $s24 = 1231;

        goto label12;

     label11:
        $s24 = 1237;

     label12:
        $i13 = $i4 + $s24;

        $i5 = 31 * $i13;

        $z5 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition>;

        if $z5 == 0 goto label13;

        $s25 = 1231;

        goto label14;

     label13:
        $s25 = 1237;

     label14:
        $i12 = $i5 + $s25;

        $i6 = 31 * $i12;

        $r3 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        if $r3 != null goto label15;

        $i26 = 0;

        goto label16;

     label15:
        $r4 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        $i26 = virtualinvoke $r4.<java.lang.Float: int hashCode()>();

     label16:
        $i11 = $i6 + $i26;

        $i7 = 31 * $i11;

        $z6 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean suppressDuplicateOverlappingText>;

        if $z6 == 0 goto label17;

        $s27 = 1231;

        goto label18;

     label17:
        $s27 = 1237;

     label18:
        $i10 = $i7 + $s27;

        $i8 = 31 * $i10;

        $z7 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser>;

        if $z7 == 0 goto label19;

        $s28 = 1231;

        goto label20;

     label19:
        $s28 = 1237;

     label20:
        $i9 = $i8 + $s28;

        return $i9;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Float $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        org.apache.tika.parser.pdf.PDFParserConfig r0, r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r1 != null goto label02;

        return 0;

     label02:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label03;

        return 0;

     label03:
        r4 = (org.apache.tika.parser.pdf.PDFParserConfig) r1;

        $r5 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        if $r5 != null goto label04;

        $r12 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        if $r12 == null goto label05;

        return 0;

     label04:
        $r7 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        $r6 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        $z0 = virtualinvoke $r7.<java.lang.Float: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label05;

        return 0;

     label05:
        $z2 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace>;

        $z1 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace>;

        if $z2 == $z1 goto label06;

        return 0;

     label06:
        $z4 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent>;

        $z3 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent>;

        if $z4 == $z3 goto label07;

        return 0;

     label07:
        $z6 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText>;

        $z5 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText>;

        if $z6 == $z5 goto label08;

        return 0;

     label08:
        $z8 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages>;

        $z7 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages>;

        if $z8 == $z7 goto label09;

        return 0;

     label09:
        $z10 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly>;

        $z9 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly>;

        if $z10 == $z9 goto label10;

        return 0;

     label10:
        $z12 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition>;

        $z11 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition>;

        if $z12 == $z11 goto label11;

        return 0;

     label11:
        $r8 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        if $r8 != null goto label12;

        $r11 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        if $r11 == null goto label13;

        return 0;

     label12:
        $r10 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        $r9 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        $z13 = virtualinvoke $r10.<java.lang.Float: boolean equals(java.lang.Object)>($r9);

        if $z13 != 0 goto label13;

        return 0;

     label13:
        $z15 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean suppressDuplicateOverlappingText>;

        $z14 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean suppressDuplicateOverlappingText>;

        if $z15 == $z14 goto label14;

        return 0;

     label14:
        $z17 = r0.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser>;

        $z16 = r4.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser>;

        if $z17 == $z16 goto label15;

        return 0;

     label15:
        return 1;
    }

    public java.lang.String toString()
    {
        java.lang.Float $r19, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r23, $r24;
        java.lang.String $r25;
        org.apache.tika.parser.pdf.PDFParserConfig r2;

        r2 := @this: org.apache.tika.parser.pdf.PDFParserConfig;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PDFParserConfig [enableAutoSpace=");

        $z0 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean enableAutoSpace>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", suppressDuplicateOverlappingText=");

        $z1 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean suppressDuplicateOverlappingText>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", extractAnnotationText=");

        $z2 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAnnotationText>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sortByPosition=");

        $z3 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean sortByPosition>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", useNonSequentialParser=");

        $z4 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean useNonSequentialParser>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", extractAcroFormContent=");

        $z5 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractAcroFormContent>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", extractInlineImages=");

        $z6 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractInlineImages>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", extractUniqueInlineImagesOnly=");

        $z7 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: boolean extractUniqueInlineImagesOnly>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", averageCharTolerance=");

        $r19 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float averageCharTolerance>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", spacingTolerance=");

        $r22 = r2.<org.apache.tika.parser.pdf.PDFParserConfig: java.lang.Float spacingTolerance>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.pdf.PDFParserConfig: long serialVersionUID> = 6492570218190936986L;

        return;
    }
}
