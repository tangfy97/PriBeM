public class com.sun.istack.logging.Logger extends java.lang.Object
{
    private static final java.lang.String WS_LOGGING_SUBSYSTEM_NAME_ROOT;
    private static final java.lang.String ROOT_WS_PACKAGE;
    private static final java.util.logging.Level METHOD_CALL_LEVEL_VALUE;
    private final java.lang.String componentClassName;
    private final java.util.logging.Logger logger;

    protected void <init>(java.lang.String, java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r8;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6, r7;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName> = $r6;

        $r8 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r7);

        r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger> = $r8;

        return;
    }

    public static com.sun.istack.logging.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.String $r2, $r3;
        com.sun.istack.logging.Logger $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.sun.istack.logging.Logger;

        $r2 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getSystemLoggerName(java.lang.Class)>(r1);

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.sun.istack.logging.Logger: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r0;
    }

    public static com.sun.istack.logging.Logger getLogger(java.lang.String, java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.String r1, $r3;
        com.sun.istack.logging.Logger $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r0 = new com.sun.istack.logging.Logger;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.sun.istack.logging.Logger: void <init>(java.lang.String,java.lang.String)>(r1, $r3);

        return $r0;
    }

    static final java.lang.String getSystemLoggerName(java.lang.Class)
    {
        java.util.StringTokenizer $r15;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r3, $r4, $r6, $r9, $r10, r12, $r13;
        boolean $z0, $z1;
        java.lang.Package $r2;
        java.lang.Class r1;
        java.lang.StringBuilder $r8, r11, $r14, $r16;

        r1 := @parameter0: java.lang.Class;

        $r14 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Package getPackage()>();

        $r3 = virtualinvoke $r2.<java.lang.Package: java.lang.String getName()>();

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        r11 = $r14;

        $i0 = virtualinvoke $r14.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>("com.sun.xml.ws.");

        $i4 = (int) -1;

        if $i0 <= $i4 goto label2;

        $r4 = "com.sun.xml.ws.";

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, $i2, "");

        $r15 = new java.util.StringTokenizer;

        $r6 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r6, ".");

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("com.sun.metro");

        $r8 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r11 = $r8;

        $z0 = virtualinvoke $r15.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke $r15.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r12 = $r9;

        $r10 = "api";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label1;

        r12 = virtualinvoke $r15.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label1:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

     label2:
        $r13 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public void log(java.util.logging.Level, java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level r1;
        java.lang.String $r4, $r5, r6;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r6 := @parameter1: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r5 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>(r1, $r4, $r5, r6);

        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r7;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level r1;
        java.lang.String $r4, $r5, r6;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r5 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(r1, $r4, $r5, r6, r7);

        return;
    }

    public void finest(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void finest(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public void finer(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void finer(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public void fine(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void fine(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public void info(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void info(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public void config(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void config(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public void warning(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void warning(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public void severe(java.lang.String)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, r7);

        return;
    }

    public void severe(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1, $r4;
        java.lang.String $r5, $r6, r7;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r5, $r6, r7, r8);

        return;
    }

    public boolean isMethodCallLoggable()
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <com.sun.istack.logging.Logger: java.util.logging.Level METHOD_CALL_LEVEL_VALUE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isLoggable(java.util.logging.Level)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        return $z0;
    }

    public void setLevel(java.util.logging.Level)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level r1;

        r0 := @this: com.sun.istack.logging.Logger;

        r1 := @parameter0: java.util.logging.Level;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        virtualinvoke $r2.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(r1);

        return;
    }

    public void entering()
    {
        java.lang.String $r4, $r5;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <com.sun.istack.logging.Logger: java.util.logging.Level METHOD_CALL_LEVEL_VALUE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r5 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void entering(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }

    public transient void entering(java.lang.Object[])
    {
        java.lang.Object[] r6;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r6 := @parameter0: java.lang.Object[];

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <com.sun.istack.logging.Logger: java.util.logging.Level METHOD_CALL_LEVEL_VALUE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r5 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object[])>($r4, $r5, r6);

        return;
    }

    public void exiting()
    {
        java.lang.String $r4, $r5;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <com.sun.istack.logging.Logger: java.util.logging.Level METHOD_CALL_LEVEL_VALUE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r5 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }

    public void exiting(java.lang.Object)
    {
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r3;
        java.util.logging.Level $r1;
        java.lang.Object r6;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r6 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <com.sun.istack.logging.Logger: java.util.logging.Level METHOD_CALL_LEVEL_VALUE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r4 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r5 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        virtualinvoke $r3.<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String,java.lang.Object)>($r4, $r5, r6);

        return;
    }

    public java.lang.Throwable logSevereException(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable r3, r4;
        java.util.logging.Level $r1, $r6, $r11;
        java.lang.String $r7, $r8, $r9, $r12, $r13, $r14;
        boolean $z0;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r5, $r10;

        r0 := @this: com.sun.istack.logging.Logger;

        r3 := @parameter0: java.lang.Throwable;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        if r4 != null goto label1;

        $r10 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r12 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r13 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r14 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r11, $r12, $r13, $r14);

        goto label2;

     label1:
        virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

        $r5 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r7 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r8 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r9 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r7, $r8, $r9, r4);

     label2:
        return r3;
    }

    public java.lang.Throwable logSevereException(java.lang.Throwable, boolean)
    {
        java.lang.Throwable r3, $r9, $r15;
        java.util.logging.Level $r1, $r5, $r11;
        java.lang.String $r6, $r7, $r8, $r12, $r13, $r14;
        boolean $z0, z1;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r4, $r10;

        r0 := @this: com.sun.istack.logging.Logger;

        r3 := @parameter0: java.lang.Throwable;

        z1 := @parameter1: boolean;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $r9 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r9 == null goto label1;

        $r10 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r12 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r13 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r14 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r15 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        virtualinvoke $r10.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r12, $r13, $r14, $r15);

        goto label2;

     label1:
        $r4 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r6 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r7 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r8 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r7, $r8);

     label2:
        return r3;
    }

    public java.lang.Throwable logSevereException(java.lang.Throwable)
    {
        java.lang.Throwable r3, $r4, $r10;
        java.util.logging.Level $r1, $r6, $r12;
        java.lang.String $r7, $r8, $r9, $r13, $r14, $r15;
        boolean $z0;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r5, $r11;

        r0 := @this: com.sun.istack.logging.Logger;

        r3 := @parameter0: java.lang.Throwable;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r4 != null goto label1;

        $r11 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r12 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r13 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r14 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r15 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r12, $r13, $r14, $r15);

        goto label2;

     label1:
        $r5 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r7 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r8 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r9 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r10 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        virtualinvoke $r5.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r7, $r8, $r9, $r10);

     label2:
        return r3;
    }

    public java.lang.Throwable logException(java.lang.Throwable, java.lang.Throwable, java.util.logging.Level)
    {
        java.lang.Throwable r3, r4;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r5, $r9;
        java.util.logging.Level r1;
        java.lang.String $r6, $r7, $r8, $r10, $r11, $r12;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r3 := @parameter0: java.lang.Throwable;

        r4 := @parameter1: java.lang.Throwable;

        r1 := @parameter2: java.util.logging.Level;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label2;

        if r4 != null goto label1;

        $r9 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r10 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r11 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r12 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>(r1, $r10, $r11, $r12);

        goto label2;

     label1:
        virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

        $r5 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r6 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r7 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r8 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(r1, $r6, $r7, $r8, r4);

     label2:
        return r3;
    }

    public java.lang.Throwable logException(java.lang.Throwable, boolean, java.util.logging.Level)
    {
        java.lang.Throwable r3, $r8, $r13;
        java.util.logging.Level r1;
        java.lang.String $r5, $r6, $r7, $r10, $r11, $r12;
        boolean $z0, z1;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r4, $r9;

        r0 := @this: com.sun.istack.logging.Logger;

        r3 := @parameter0: java.lang.Throwable;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.util.logging.Level;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $r8 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r8 == null goto label1;

        $r9 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r10 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r11 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r12 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r13 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        virtualinvoke $r9.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(r1, $r10, $r11, $r12, $r13);

        goto label2;

     label1:
        $r4 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r5 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r6 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r7 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>(r1, $r5, $r6, $r7);

     label2:
        return r3;
    }

    public java.lang.Throwable logException(java.lang.Throwable, java.util.logging.Level)
    {
        java.lang.Throwable r3, $r4, $r9;
        com.sun.istack.logging.Logger r0;
        java.util.logging.Logger $r2, $r5, $r10;
        java.util.logging.Level r1;
        java.lang.String $r6, $r7, $r8, $r11, $r12, $r13;
        boolean $z0;

        r0 := @this: com.sun.istack.logging.Logger;

        r3 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.util.logging.Level;

        $r2 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r4 != null goto label1;

        $r10 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r11 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r12 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r13 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>(r1, $r11, $r12, $r13);

        goto label2;

     label1:
        $r5 = r0.<com.sun.istack.logging.Logger: java.util.logging.Logger logger>;

        $r6 = r0.<com.sun.istack.logging.Logger: java.lang.String componentClassName>;

        $r7 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getCallerMethodName()>();

        $r8 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        virtualinvoke $r5.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(r1, $r6, $r7, $r8, $r9);

     label2:
        return r3;
    }

    private static java.lang.String getCallerMethodName()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.sun.istack.logging.Logger: java.lang.String getStackMethodName(int)>(5);

        return $r0;
    }

    private static java.lang.String getStackMethodName(int)
    {
        java.lang.StackTraceElement[] $r1;
        java.lang.Thread $r0;
        int i0, $i1, $i2;
        java.lang.StackTraceElement $r2;
        java.lang.String r3;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i2 = lengthof $r1;

        $i1 = i0 + 1;

        if $i2 <= $i1 goto label1;

        $r2 = $r1[i0];

        r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        goto label2;

     label1:
        r3 = "UNKNOWN METHOD";

     label2:
        return r3;
    }

    static void <clinit>()
    {
        java.util.logging.Level $r0;

        <com.sun.istack.logging.Logger: java.lang.String ROOT_WS_PACKAGE> = "com.sun.xml.ws.";

        <com.sun.istack.logging.Logger: java.lang.String WS_LOGGING_SUBSYSTEM_NAME_ROOT> = "com.sun.metro";

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        <com.sun.istack.logging.Logger: java.util.logging.Level METHOD_CALL_LEVEL_VALUE> = $r0;

        return;
    }
}
