public class org.springframework.expression.spel.ast.OperatorNot extends org.springframework.expression.spel.ast.SpelNodeImpl
{

    public void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        int i0;
        org.springframework.expression.spel.ast.OperatorNot r0;
        org.springframework.expression.spel.ast.SpelNodeImpl r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.OperatorNot;

        i0 := @parameter0: int;

        r2 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r1[0] = r2;

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        return;
    }

    public org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r10, $r13;
        java.lang.Object[] $r11;
        org.springframework.expression.spel.support.BooleanTypedValue $r9;
        org.springframework.core.convert.TypeDescriptor $r6;
        int $i0;
        java.lang.Boolean $r8;
        org.springframework.expression.TypedValue $r4, $r5;
        boolean $z0, $z1, $z2;
        org.springframework.expression.spel.SpelMessage $r12;
        org.springframework.expression.spel.ast.OperatorNot r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r7;
        org.springframework.expression.spel.SpelNode $r14;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;

        r0 := @this: org.springframework.expression.spel.ast.OperatorNot;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

     label1:
        $r1 = r0.<org.springframework.expression.spel.ast.OperatorNot: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r1[0];

        $r4 = virtualinvoke $r3.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r5 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r10 = new org.springframework.expression.spel.SpelEvaluationException;

        $r12 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_CONVERSION_ERROR>;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "null";

        $r11[1] = "boolean";

        specialinvoke $r10.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label2:
        $r6 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r7 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(org.springframework.expression.TypedValue,org.springframework.core.convert.TypeDescriptor)>($r4, $r6);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $z2 = 0;

        goto label4;

     label3:
        $z2 = 1;

     label4:
        $r9 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z2);

     label5:
        return $r9;

     label6:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorNot: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $i0 = interfaceinvoke $r14.<org.springframework.expression.spel.SpelNode: int getStartPosition()>();

        virtualinvoke $r13.<org.springframework.expression.spel.SpelEvaluationException: void setPosition(int)>($i0);

        throw $r13;

        catch org.springframework.expression.spel.SpelEvaluationException from label1 to label5 with label6;
    }

    public java.lang.String toStringAST()
    {
        java.lang.StringBuilder $r0, $r1;
        org.springframework.expression.spel.ast.OperatorNot r2;
        java.lang.String $r4, $r5;
        org.springframework.expression.spel.SpelNode $r3;

        r2 := @this: org.springframework.expression.spel.ast.OperatorNot;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.OperatorNot: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r4 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public volatile org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.OperatorNot r0;
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.support.BooleanTypedValue $r2;

        r0 := @this: org.springframework.expression.spel.ast.OperatorNot;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorNot: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1);

        return $r2;
    }
}
