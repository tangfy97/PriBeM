public class org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher extends java.lang.Object implements org.springframework.jmx.export.notification.NotificationPublisher
{
    private final javax.management.modelmbean.ModelMBeanNotificationBroadcaster modelMBean;
    private final javax.management.ObjectName objectName;
    private final java.lang.Object managedResource;

    public void <init>(javax.management.modelmbean.ModelMBeanNotificationBroadcaster, javax.management.ObjectName, java.lang.Object)
    {
        javax.management.modelmbean.ModelMBeanNotificationBroadcaster r1;
        org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher r0;
        java.lang.Object r3;
        javax.management.ObjectName r2;

        r0 := @this: org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher;

        r1 := @parameter0: javax.management.modelmbean.ModelMBeanNotificationBroadcaster;

        r2 := @parameter1: javax.management.ObjectName;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'modelMBean\' must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "\'objectName\' must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "\'managedResource\' must not be null");

        r0.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: javax.management.modelmbean.ModelMBeanNotificationBroadcaster modelMBean> = r1;

        r0.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: javax.management.ObjectName objectName> = r2;

        r0.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: java.lang.Object managedResource> = r3;

        return;
    }

    public void sendNotification(javax.management.Notification)
    {
        org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher r1;
        javax.management.Notification r0;
        javax.management.modelmbean.ModelMBeanNotificationBroadcaster $r2, $r4;
        javax.management.MBeanException $r5;
        org.springframework.jmx.export.notification.UnableToSendNotificationException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        javax.management.AttributeChangeNotification $r3;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher;

        r0 := @parameter0: javax.management.Notification;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Notification must not be null");

        specialinvoke r1.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: void replaceNotificationSourceIfNecessary(javax.management.Notification)>(r0);

     label1:
        $z0 = r0 instanceof javax.management.AttributeChangeNotification;

        if $z0 == 0 goto label2;

        $r4 = r1.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: javax.management.modelmbean.ModelMBeanNotificationBroadcaster modelMBean>;

        $r3 = (javax.management.AttributeChangeNotification) r0;

        interfaceinvoke $r4.<javax.management.modelmbean.ModelMBeanNotificationBroadcaster: void sendAttributeChangeNotification(javax.management.AttributeChangeNotification)>($r3);

        goto label5;

     label2:
        $r2 = r1.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: javax.management.modelmbean.ModelMBeanNotificationBroadcaster modelMBean>;

        interfaceinvoke $r2.<javax.management.modelmbean.ModelMBeanNotificationBroadcaster: void sendNotification(javax.management.Notification)>(r0);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.springframework.jmx.export.notification.UnableToSendNotificationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to send notification [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.springframework.jmx.export.notification.UnableToSendNotificationException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r6;

     label5:
        return;

        catch javax.management.MBeanException from label1 to label3 with label4;
    }

    private void replaceNotificationSourceIfNecessary(javax.management.Notification)
    {
        org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher r2;
        java.lang.Object $r1, $r4, $r5;
        javax.management.ObjectName $r3;
        javax.management.Notification r0;
        boolean $z0;

        r2 := @this: org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher;

        r0 := @parameter0: javax.management.Notification;

        $r1 = virtualinvoke r0.<javax.management.Notification: java.lang.Object getSource()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke r0.<javax.management.Notification: java.lang.Object getSource()>();

        $r5 = r2.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: java.lang.Object managedResource>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

     label1:
        $r3 = r2.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: javax.management.ObjectName objectName>;

        virtualinvoke r0.<javax.management.Notification: void setSource(java.lang.Object)>($r3);

     label2:
        return;
    }
}
