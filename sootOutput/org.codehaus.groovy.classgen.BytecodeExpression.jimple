public abstract class org.codehaus.groovy.classgen.BytecodeExpression extends org.codehaus.groovy.ast.expr.Expression
{
    public static org.codehaus.groovy.classgen.BytecodeExpression NOP;

    public void <init>()
    {
        org.codehaus.groovy.classgen.BytecodeExpression r0;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        return;
    }

    public abstract void visit(org.codehaus.groovy.ast.GroovyCodeVisitor);

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.classgen.BytecodeExpression r0;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        return r0;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.classgen.BytecodeExpression$1 $r0;

        $r0 = new org.codehaus.groovy.classgen.BytecodeExpression$1;

        specialinvoke $r0.<org.codehaus.groovy.classgen.BytecodeExpression$1: void <init>()>();

        <org.codehaus.groovy.classgen.BytecodeExpression: org.codehaus.groovy.classgen.BytecodeExpression NOP> = $r0;

        return;
    }
}
