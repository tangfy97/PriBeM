public abstract class org.apache.batik.dom.AbstractProcessingInstruction extends org.apache.batik.dom.AbstractChildNode implements org.w3c.dom.ProcessingInstruction
{
    protected java.lang.String data;

    public void <init>()
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        specialinvoke r0.<org.apache.batik.dom.AbstractChildNode: void <init>()>();

        return;
    }

    public java.lang.String getNodeName()
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String getTarget()>();

        return $r1;
    }

    public short getNodeType()
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        return 7;
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String getData()>();

        return $r1;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractProcessingInstruction: void setData(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getData()
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        $r1 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        return $r1;
    }

    public void setData(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;
        java.lang.Object[] $r7;
        java.lang.Integer $r11;
        org.apache.batik.dom.AbstractParentNode $r6;
        short $s0;
        org.w3c.dom.Node $r4, $r5;
        org.w3c.dom.DOMException $r10;
        int $i1;
        java.lang.String r1, r2, $r3, $r9;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        r2 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r7 = newarray (java.lang.Object)[2];

        $r11 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractProcessingInstruction: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i1);

        $r7[0] = $r11;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String getNodeName()>();

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r7);

        throw $r10;

     label1:
        r1 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data> = r2;

        $r3 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void fireDOMCharacterDataModifiedEvent(java.lang.String,java.lang.String)>(r1, $r3);

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        $r6 = (org.apache.batik.dom.AbstractParentNode) $r5;

        virtualinvoke $r6.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

     label2:
        return;
    }

    public java.lang.String getTextContent()
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String getNodeValue()>();

        return $r1;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0, r4;
        org.w3c.dom.Node r1, $r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r5;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        $r3 = specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r4 = (org.apache.batik.dom.AbstractProcessingInstruction) $r3;

        $r5 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        r4.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data> = $r5;

        return r4;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0, r4;
        org.w3c.dom.Node r1, $r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r5;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        $r3 = specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r4 = (org.apache.batik.dom.AbstractProcessingInstruction) $r3;

        $r5 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        r4.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data> = $r5;

        return r4;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0, r3;
        org.w3c.dom.Node r1, $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r3 = (org.apache.batik.dom.AbstractProcessingInstruction) $r2;

        $r4 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        r3.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data> = $r4;

        return r3;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractProcessingInstruction r0, r3;
        org.w3c.dom.Node r1, $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractProcessingInstruction;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r3 = (org.apache.batik.dom.AbstractProcessingInstruction) $r2;

        $r4 = r0.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data>;

        r3.<org.apache.batik.dom.AbstractProcessingInstruction: java.lang.String data> = $r4;

        return r3;
    }

    public abstract java.lang.String getTarget();
}
