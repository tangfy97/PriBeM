public class org.eclipse.jetty.util.thread.QueuedThreadPool extends org.eclipse.jetty.util.component.AbstractLifeCycle implements org.eclipse.jetty.util.thread.ThreadPool$SizedThreadPool, java.util.concurrent.Executor, org.eclipse.jetty.util.component.Dumpable
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private final java.util.concurrent.atomic.AtomicInteger _threadsStarted;
    private final java.util.concurrent.atomic.AtomicInteger _threadsIdle;
    private final java.util.concurrent.atomic.AtomicLong _lastShrink;
    private final java.util.concurrent.ConcurrentLinkedQueue _threads;
    private final java.lang.Object _joinLock;
    private java.util.concurrent.BlockingQueue _jobs;
    private java.lang.String _name;
    private int _maxIdleTimeMs;
    private int _maxThreads;
    private int _minThreads;
    private int _maxQueued;
    private int _priority;
    private boolean _daemon;
    private int _maxStopTime;
    private boolean _detailedDump;
    private java.lang.Runnable _runnable;

    public void <init>()
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool$3 $r16;
        java.util.concurrent.atomic.AtomicLong $r13;
        java.util.concurrent.atomic.AtomicInteger $r11, $r12;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int $i0, $i2, $i4;
        java.lang.StringBuilder $r8, $r9, $r17;
        java.lang.Object $r15;
        java.lang.String $r10;
        java.util.concurrent.ConcurrentLinkedQueue $r14;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        $r11 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted> = $r11;

        $r12 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsIdle> = $r12;

        $r13 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r13.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicLong _lastShrink> = $r13;

        $r14 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r14.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Object _joinLock> = $r15;

        $i2 = (int) 60000;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxIdleTimeMs> = $i2;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads> = 254;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads> = 8;

        $i4 = (int) -1;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxQueued> = $i4;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _priority> = 5;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _daemon> = 0;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxStopTime> = 100;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _detailedDump> = 0;

        $r16 = new org.eclipse.jetty.util.thread.QueuedThreadPool$3;

        specialinvoke $r16.<org.eclipse.jetty.util.thread.QueuedThreadPool$3: void <init>(org.eclipse.jetty.util.thread.QueuedThreadPool)>(r0);

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Runnable _runnable> = $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("qtp");

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.String _name> = $r10;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        specialinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: void <init>()>();

        virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: void setMaxThreads(int)>(i0);

        return;
    }

    public void <init>(java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.BlockingQueue r1, $r2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r1 := @parameter0: java.util.concurrent.BlockingQueue;

        specialinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs> = r1;

        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: void clear()>();

        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        java.util.AbstractCollection $r5;
        java.util.concurrent.atomic.AtomicInteger $r1, $r3, $r6;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.eclipse.jetty.util.BlockingArrayQueue $r8;
        boolean $z0;
        java.util.concurrent.BlockingQueue $r2, $r4;
        java.util.concurrent.ArrayBlockingQueue $r7;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void doStart()>();

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        if $r2 != null goto label3;

        $i1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxQueued>;

        if $i1 <= 0 goto label1;

        $r7 = new java.util.concurrent.ArrayBlockingQueue;

        $r5 = $r7;

        $i4 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxQueued>;

        specialinvoke $r7.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>($i4);

        goto label2;

     label1:
        $r8 = new org.eclipse.jetty.util.BlockingArrayQueue;

        $r5 = $r8;

        $i3 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        $i2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        specialinvoke $r8.<org.eclipse.jetty.util.BlockingArrayQueue: void <init>(int,int)>($i3, $i2);

     label2:
        $r4 = (java.util.concurrent.BlockingQueue) $r5;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs> = $r4;

     label3:
        $r6 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        i5 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label4:
        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label5;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        if i5 >= $i0 goto label5;

        specialinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean startThread(int)>(i5);

        $r3 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        i5 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        goto label4;

     label5:
        return;
    }

    protected void doStop() throws java.lang.Exception
    {
        byte $b9, $b15;
        java.lang.Thread r16, r37;
        java.util.concurrent.BlockingQueue $r2, $r35;
        java.lang.StringBuilder $r9, $r10, $r19, $r20, $r27, $r28, $r42, $r43, $r44;
        java.lang.Throwable $r36;
        java.lang.Object[] $r12, $r22, $r30;
        long $l0, $l5, $l7, $l8, $l10, $l13, $l14;
        java.lang.StackTraceElement r24;
        java.lang.String $r11, $r21, $r29;
        java.util.concurrent.atomic.AtomicInteger $r1, $r4, $r5, $r38;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        org.eclipse.jetty.util.thread.QueuedThreadPool$1 $r41;
        boolean $z0, $z1, $z2;
        java.lang.StackTraceElement[] $r23;
        java.util.concurrent.ConcurrentLinkedQueue $r6, $r13, $r32;
        int $i1, $i2, $i3, i4, $i6, $i11, $i12, i16, $i17, $i18, i19, $i20, $i22, $i23;
        java.util.Iterator $r14, $r33;
        java.lang.Object $r15, $r34, $r39, $r40;
        org.eclipse.jetty.util.log.Logger $r8, $r18, $r26, $r31;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void doStop()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label01:
        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 <= 0 goto label02;

        $l10 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l14 = $l10 - $l0;

        $i11 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxStopTime>;

        $i12 = $i11 / 2;

        $l13 = (long) $i12;

        $b15 = $l14 cmp $l13;

        $i20 = (int) $b15;

        if $i20 >= 0 goto label02;

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        goto label01;

     label02:
        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: void clear()>();

        $r41 = new org.eclipse.jetty.util.thread.QueuedThreadPool$1;

        specialinvoke $r41.<org.eclipse.jetty.util.thread.QueuedThreadPool$1: void <init>(org.eclipse.jetty.util.thread.QueuedThreadPool)>(r0);

        $r4 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsIdle>;

        i16 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label03:
        $i17 = i16;

        $i22 = (int) -1;

        i16 = i16 + $i22;

        if $i17 <= 0 goto label04;

        $r35 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        interfaceinvoke $r35.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>($r41);

        goto label03;

     label04:
        staticinvoke <java.lang.Thread: void yield()>();

        $r5 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $i2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 <= 0 goto label06;

        $r32 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $r33 = virtualinvoke $r32.<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r33.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r34 = interfaceinvoke $r33.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.lang.Thread) $r34;

        virtualinvoke r37.<java.lang.Thread: void interrupt()>();

        goto label05;

     label06:
        $r38 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $i18 = virtualinvoke $r38.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i18 <= 0 goto label07;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l8 = $l5 - $l0;

        $i6 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxStopTime>;

        $l7 = (long) $i6;

        $b9 = $l8 cmp $l7;

        $i23 = (int) $b9;

        if $i23 >= 0 goto label07;

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        goto label06;

     label07:
        staticinvoke <java.lang.Thread: void yield()>();

        $r6 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $i3 = virtualinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue: int size()>();

        if $i3 <= 0 goto label12;

        $r8 = <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads could not be stopped");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = newarray (java.lang.Object)[0];

        interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>($r11, $r12);

        if $i3 == 1 goto label08;

        $r31 = <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        $z0 = interfaceinvoke $r31.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label12;

     label08:
        $r13 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.Thread) $r15;

        $r18 = <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t stop ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = newarray (java.lang.Object)[0];

        interfaceinvoke $r18.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>($r21, $r22);

        $r23 = virtualinvoke r16.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        i4 = lengthof $r23;

        i19 = 0;

     label10:
        if i19 >= i4 goto label11;

        r24 = $r23[i19];

        $r26 = <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = newarray (java.lang.Object)[0];

        interfaceinvoke $r26.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>($r29, $r30);

        i19 = i19 + 1;

        goto label10;

     label11:
        goto label09;

     label12:
        $r39 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        entermonitor $r39;

     label13:
        $r40 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        virtualinvoke $r40.<java.lang.Object: void notifyAll()>();

        exitmonitor $r39;

     label14:
        goto label17;

     label15:
        $r36 := @caughtexception;

        exitmonitor $r39;

     label16:
        throw $r36;

     label17:
        return;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void setDaemon(boolean)
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _daemon> = z0;

        return;
    }

    public void setMaxIdleTimeMs(int)
    {
        int i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxIdleTimeMs> = i0;

        return;
    }

    public void setMaxStopTimeMs(int)
    {
        int i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxStopTime> = i0;

        return;
    }

    public void setMaxThreads(int)
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads> = i0;

        $i2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        $i1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads>;

        if $i2 <= $i1 goto label1;

        $i3 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads>;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads> = $i3;

     label1:
        return;
    }

    public void setMinThreads(int)
    {
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads> = i0;

        $i2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        $i1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads>;

        if $i2 <= $i1 goto label1;

        $i4 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads> = $i4;

     label1:
        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        i5 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label2:
        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isStarted()>();

        if $z0 == 0 goto label3;

        $i3 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        if i5 >= $i3 goto label3;

        specialinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean startThread(int)>(i5);

        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        i5 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        goto label2;

     label3:
        return;
    }

    public void setName(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("started");

        throw $r2;

     label1:
        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.String _name> = r1;

        return;
    }

    public void setThreadsPriority(int)
    {
        int i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _priority> = i0;

        return;
    }

    public int getMaxQueued()
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxQueued>;

        return $i0;
    }

    public void setMaxQueued(int)
    {
        java.lang.IllegalStateException $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int i0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("started");

        throw $r1;

     label1:
        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxQueued> = i0;

        return;
    }

    public int getMaxIdleTimeMs()
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxIdleTimeMs>;

        return $i0;
    }

    public int getMaxStopTimeMs()
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxStopTime>;

        return $i0;
    }

    public int getMaxThreads()
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads>;

        return $i0;
    }

    public int getMinThreads()
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.String _name>;

        return $r1;
    }

    public int getThreadsPriority()
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _priority>;

        return $i0;
    }

    public boolean isDaemon()
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $z0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _daemon>;

        return $z0;
    }

    public boolean isDetailedDump()
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $z0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _detailedDump>;

        return $z0;
    }

    public void setDetailedDump(boolean)
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _detailedDump> = z0;

        return;
    }

    public boolean dispatch(java.lang.Runnable)
    {
        java.lang.Object[] $r1;
        java.util.concurrent.BlockingQueue $r4, $r5;
        java.lang.Runnable r2;
        java.util.concurrent.atomic.AtomicInteger $r6;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jetty.util.log.Logger $r3;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r2 := @parameter0: java.lang.Runnable;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        $i0 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: int size()>();

        $i1 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int getIdleThreads()>();

        $r5 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        $z1 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        if $i1 == 0 goto label1;

        if $i0 <= $i1 goto label2;

     label1:
        $r6 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i3 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads>;

        if $i2 >= $i3 goto label2;

        specialinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean startThread(int)>($i2);

     label2:
        return 1;

     label3:
        $r3 = <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r0;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Dispatched {} to stopped {}", $r1);

        return 0;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.RejectedExecutionException $r2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r1 := @parameter0: java.lang.Runnable;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean dispatch(java.lang.Runnable)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r2.<java.util.concurrent.RejectedExecutionException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public void join() throws java.lang.InterruptedException
    {
        java.lang.Throwable $r3;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        entermonitor $r1;

     label1:
        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        virtualinvoke $r2.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

     label6:
        $z1 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean isStopping()>();

        if $z1 == 0 goto label7;

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getThreads()
    {
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public int getIdleThreads()
    {
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsIdle>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public boolean isLowOnThreads()
    {
        java.util.concurrent.BlockingQueue $r2;
        java.util.concurrent.atomic.AtomicInteger $r1, $r3;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxThreads>;

        if $i0 != $i1 goto label1;

        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        $i2 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: int size()>();

        $r3 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsIdle>;

        $i3 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 < $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean startThread(int)
    {
        java.lang.Throwable $r12;
        long $l3;
        java.lang.Runnable $r2;
        java.util.concurrent.atomic.AtomicInteger $r1, $r11, $r13;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.Thread $r3;
        int i0, i1, $i2;
        java.lang.String $r5, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.util.concurrent.ConcurrentLinkedQueue $r10;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        i1 = i0 + 1;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, i1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Runnable _runnable>;

        $r3 = virtualinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Thread newThread(java.lang.Runnable)>($r2);

        $z1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _daemon>;

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>($z1);

        $i2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _priority>;

        virtualinvoke $r3.<java.lang.Thread: void setPriority(int)>($i2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.String _name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $l3 = virtualinvoke $r3.<java.lang.Thread: long getId()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.Thread: void setName(java.lang.String)>($r9);

        $r10 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        virtualinvoke $r10.<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>($r3);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

     label2:
        if 1 != 0 goto label6;

        $r11 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        goto label6;

     label3:
        $r12 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        $r13 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label5:
        throw $r12;

     label6:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Runnable r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r2;
        java.lang.Thread $r0;

        r2 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

        return $r0;
    }

    public java.lang.String dump()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = staticinvoke <org.eclipse.jetty.util.component.AggregateLifeCycle: java.lang.String dump(org.eclipse.jetty.util.component.Dumpable)>(r0);

        return $r1;
    }

    public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r1;
        java.lang.Thread r8;
        boolean $z0, $z1, z2, z3, $z4, z5, z6;
        org.eclipse.jetty.util.thread.QueuedThreadPool$2 $r22;
        java.lang.Thread$State $r16;
        java.io.Serializable $r26;
        java.lang.StackTraceElement[] $r9;
        java.util.Collection[] $r6;
        java.lang.StringBuilder $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20;
        java.util.concurrent.ConcurrentLinkedQueue $r2;
        long $l1;
        java.util.ArrayList $r0;
        int $i0, $i2, i3, i4;
        java.lang.StackTraceElement r23;
        java.lang.String r5, $r13, $r21, $r24, $r25, $r27;
        java.util.Iterator $r3;
        java.lang.Appendable r4;
        java.lang.Object $r7;

        r1 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r4 := @parameter0: java.lang.Appendable;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        $i0 = virtualinvoke r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: int getMaxThreads()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Thread) $r7;

        $r9 = virtualinvoke r8.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        z2 = 0;

        z6 = 0;

        z5 = 0;

        if $r9 == null goto label04;

        i3 = lengthof $r9;

        i4 = 0;

     label02:
        if i4 >= i3 goto label04;

        r23 = $r9[i4];

        $r24 = "idleJobPoll";

        $r25 = virtualinvoke r23.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z1 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z1 == 0 goto label03;

        z2 = 1;

        z6 = 1;

        z5 = 1;

        goto label04;

     label03:
        i4 = i4 + 1;

        goto label02;

     label04:
        z3 = z6;

        $z4 = r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: boolean _detailedDump>;

        if $z4 == 0 goto label05;

        $r22 = new org.eclipse.jetty.util.thread.QueuedThreadPool$2;

        specialinvoke $r22.<org.eclipse.jetty.util.thread.QueuedThreadPool$2: void <init>(org.eclipse.jetty.util.thread.QueuedThreadPool,java.lang.Thread,boolean,java.lang.StackTraceElement[])>(r1, r8, z5, $r9);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label10;

     label05:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $l1 = virtualinvoke r8.<java.lang.Thread: long getId()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = virtualinvoke r8.<java.lang.Thread: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke r8.<java.lang.Thread: java.lang.Thread$State getState()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $i2 = lengthof $r9;

        if $i2 <= 0 goto label06;

        $r26 = $r9[0];

        goto label07;

     label06:
        $r26 = "???";

     label07:
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        if z3 == 0 goto label08;

        $r27 = " IDLE";

        goto label09;

     label08:
        $r27 = "";

     label09:
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r21);

     label10:
        goto label01;

     label11:
        staticinvoke <org.eclipse.jetty.util.component.AggregateLifeCycle: void dumpObject(java.lang.Appendable,java.lang.Object)>(r4, r1);

        $r6 = newarray (java.util.Collection)[1];

        $r6[0] = $r0;

        staticinvoke <org.eclipse.jetty.util.component.AggregateLifeCycle: void dump(java.lang.Appendable,java.lang.String,java.util.Collection[])>(r4, r5, $r6);

        return;
    }

    public java.lang.String toString()
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String $r2, $r17;
        java.util.concurrent.BlockingQueue $r13, $r14;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r18;

        r1 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.String _name>;

        $r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $i0 = virtualinvoke r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: int getMinThreads()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<=");

        $i1 = virtualinvoke r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: int getIdleThreads()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<=");

        $i2 = virtualinvoke r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: int getThreads()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i3 = virtualinvoke r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: int getMaxThreads()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r13 = r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        if $r13 != null goto label1;

        $i6 = (int) -1;

        $i4 = $i6;

        goto label2;

     label1:
        $r14 = r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        $i4 = interfaceinvoke $r14.<java.util.concurrent.BlockingQueue: int size()>();

     label2:
        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    private java.lang.Runnable idleJobPoll() throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        int $i0;
        long $l1;
        java.util.concurrent.BlockingQueue $r2;
        java.lang.Object $r3;
        java.lang.Runnable $r4;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r2 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxIdleTimeMs>;

        $l1 = (long) $i0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>($l1, $r1);

        $r4 = (java.lang.Runnable) $r3;

        return $r4;
    }

    protected void runJob(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r1;

        r1 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        r0 := @parameter0: java.lang.Runnable;

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        return;
    }

    protected java.util.concurrent.BlockingQueue getQueue()
    {
        java.util.concurrent.BlockingQueue $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        return $r1;
    }

    public boolean stopThread(long)
    {
        java.util.Iterator $r2;
        long $l0, l1;
        byte $b2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.Thread r4;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentLinkedQueue $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        l1 := @parameter0: long;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r3;

        $l0 = virtualinvoke r4.<java.lang.Thread: long getId()>();

        $b2 = $l0 cmp l1;

        if $b2 != 0 goto label2;

        virtualinvoke r4.<java.lang.Thread: void stop()>();

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean interruptThread(long)
    {
        java.util.Iterator $r2;
        long $l0, l1;
        byte $b2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.Thread r4;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentLinkedQueue $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        l1 := @parameter0: long;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r3;

        $l0 = virtualinvoke r4.<java.lang.Thread: long getId()>();

        $b2 = $l0 cmp l1;

        if $b2 != 0 goto label2;

        virtualinvoke r4.<java.lang.Thread: void interrupt()>();

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.lang.String dumpThread(long)
    {
        long $l0, l1, $l3;
        byte $b2;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.lang.Thread r4;
        int i4, i5;
        java.lang.StackTraceElement r15;
        java.lang.String $r8, $r14, $r17;
        boolean $z0;
        java.util.Iterator $r2;
        java.lang.Thread$State $r11;
        java.lang.StackTraceElement[] $r13;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r12, $r16, $r18;
        java.util.concurrent.ConcurrentLinkedQueue $r1;

        r0 := @this: org.eclipse.jetty.util.thread.QueuedThreadPool;

        l1 := @parameter0: long;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r3;

        $l0 = virtualinvoke r4.<java.lang.Thread: long getId()>();

        $b2 = $l0 cmp l1;

        if $b2 != 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $l3 = virtualinvoke r4.<java.lang.Thread: long getId()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke r4.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke r4.<java.lang.Thread: java.lang.Thread$State getState()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r13 = virtualinvoke r4.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        i4 = lengthof $r13;

        i5 = 0;

     label2:
        if i5 >= i4 goto label3;

        r15 = $r13[i5];

        $r16 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  at ");

        $r17 = virtualinvoke r15.<java.lang.StackTraceElement: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label4:
        goto label1;

     label5:
        return null;
    }

    static java.util.concurrent.BlockingQueue access$000(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        java.util.concurrent.BlockingQueue $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.BlockingQueue _jobs>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$100(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsIdle>;

        return $r1;
    }

    static int access$200(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _maxIdleTimeMs>;

        return $i0;
    }

    static java.util.concurrent.atomic.AtomicInteger access$300(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicInteger _threadsStarted>;

        return $r1;
    }

    static int access$400(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        int $i0;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $i0 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: int _minThreads>;

        return $i0;
    }

    static java.util.concurrent.atomic.AtomicLong access$500(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.atomic.AtomicLong _lastShrink>;

        return $r1;
    }

    static java.lang.Runnable access$600(org.eclipse.jetty.util.thread.QueuedThreadPool) throws java.lang.InterruptedException
    {
        java.lang.Runnable $r1;
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = specialinvoke r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.lang.Runnable idleJobPoll()>();

        return $r1;
    }

    static org.eclipse.jetty.util.log.Logger access$700()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static java.util.concurrent.ConcurrentLinkedQueue access$800(org.eclipse.jetty.util.thread.QueuedThreadPool)
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool r0;
        java.util.concurrent.ConcurrentLinkedQueue $r1;

        r0 := @parameter0: org.eclipse.jetty.util.thread.QueuedThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: java.util.concurrent.ConcurrentLinkedQueue _threads>;

        return $r1;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/util/thread/QueuedThreadPool;");

        <org.eclipse.jetty.util.thread.QueuedThreadPool: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
