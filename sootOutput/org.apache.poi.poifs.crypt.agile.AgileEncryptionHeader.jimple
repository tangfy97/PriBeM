public class org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader extends org.apache.poi.poifs.crypt.EncryptionHeader
{
    private byte[] encryptedHmacKey;
    private byte[] encryptedHmacValue;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;
        com.microsoft.schemas.office.x2006.encryption.EncryptionDocument $r2;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: com.microsoft.schemas.office.x2006.encryption.EncryptionDocument parseDescriptor(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void <init>(com.microsoft.schemas.office.x2006.encryption.EncryptionDocument)>($r2);

        return;
    }

    protected void <init>(com.microsoft.schemas.office.x2006.encryption.EncryptionDocument)
    {
        com.microsoft.schemas.office.x2006.encryption.CTEncryption $r2, $r16;
        byte[] $r14, $r15, $r18, $r19;
        org.apache.poi.poifs.crypt.ChainingMode $r9, $r30;
        com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum $r10, $r24;
        java.lang.NullPointerException $r38;
        com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum $r4;
        org.apache.poi.poifs.crypt.CipherProvider $r7;
        java.lang.Exception $r39;
        java.lang.StringBuilder $r22, $r23, $r25, $r26, $r27, $r28, $r32, $r33, $r36;
        com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity $r17;
        long $l0, $l3;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String $r5, $r11, $r29, $r35, $r37;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;
        com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum $r8, $r34;
        org.apache.poi.poifs.crypt.HashAlgorithm $r12, $r13;
        com.microsoft.schemas.office.x2006.encryption.CTKeyData $r3;
        org.apache.poi.EncryptedDocumentException $r20, $r21, $r31, $r40;
        com.microsoft.schemas.office.x2006.encryption.EncryptionDocument r1;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r6;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        r1 := @parameter0: com.microsoft.schemas.office.x2006.encryption.EncryptionDocument;

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionHeader: void <init>()>();

     label01:
        $r2 = interfaceinvoke r1.<com.microsoft.schemas.office.x2006.encryption.EncryptionDocument: com.microsoft.schemas.office.x2006.encryption.CTEncryption getEncryption()>();

        $r3 = interfaceinvoke $r2.<com.microsoft.schemas.office.x2006.encryption.CTEncryption: com.microsoft.schemas.office.x2006.encryption.CTKeyData getKeyData()>();

        if $r3 != null goto label02;

        $r38 = new java.lang.NullPointerException;

        specialinvoke $r38.<java.lang.NullPointerException: void <init>(java.lang.String)>("keyData not set");

        throw $r38;

     label02:
        goto label04;

     label03:
        $r39 := @caughtexception;

        $r40 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r40.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("Unable to parse keyData");

        throw $r40;

     label04:
        $l0 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: long getKeyBits()>();

        $i1 = (int) $l0;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setKeySize(int)>($i1);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setFlags(int)>(0);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setSizeExtra(int)>(0);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setCspName(java.lang.String)>(null);

        $i2 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: int getBlockSize()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setBlockSize(int)>($i2);

        $l3 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: long getKeyBits()>();

        i9 = (int) $l3;

        $r4 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum getCipherAlgorithm()>();

        $r5 = virtualinvoke $r4.<com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm fromXmlId(java.lang.String,int)>($r5, i9);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setCipherAlgorithm(org.apache.poi.poifs.crypt.CipherAlgorithm)>($r6);

        $r7 = $r6.<org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherProvider provider>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setCipherProvider(org.apache.poi.poifs.crypt.CipherProvider)>($r7);

        $r8 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum getCipherChaining()>();

        $i4 = virtualinvoke $r8.<com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum: int intValue()>();

        lookupswitch($i4)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label07;
        };

     label05:
        $r30 = <org.apache.poi.poifs.crypt.ChainingMode: org.apache.poi.poifs.crypt.ChainingMode cbc>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>($r30);

        goto label08;

     label06:
        $r9 = <org.apache.poi.poifs.crypt.ChainingMode: org.apache.poi.poifs.crypt.ChainingMode cfb>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>($r9);

        goto label08;

     label07:
        $r31 = new org.apache.poi.EncryptedDocumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported chaining mode - ");

        $r34 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum getCipherChaining()>();

        $r35 = virtualinvoke $r34.<com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum: java.lang.String toString()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r37);

        throw $r31;

     label08:
        $i5 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: int getHashSize()>();

        $r10 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum getHashAlgorithm()>();

        $r11 = virtualinvoke $r10.<com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum: java.lang.String toString()>();

        $r12 = staticinvoke <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm fromEcmaId(java.lang.String)>($r11);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setHashAlgorithm(org.apache.poi.poifs.crypt.HashAlgorithm)>($r12);

        $r13 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithmEx()>();

        $i6 = $r13.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        if $i6 == $i5 goto label09;

        $r21 = new org.apache.poi.EncryptedDocumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported hash algorithm: ");

        $r24 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum getHashAlgorithm()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label09:
        $i7 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: int getSaltSize()>();

        $r14 = interfaceinvoke $r3.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: byte[] getSaltValue()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setKeySalt(byte[])>($r14);

        $r15 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        $i8 = lengthof $r15;

        if $i8 == $i7 goto label10;

        $r20 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r20.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("Invalid salt length");

        throw $r20;

     label10:
        $r16 = interfaceinvoke r1.<com.microsoft.schemas.office.x2006.encryption.EncryptionDocument: com.microsoft.schemas.office.x2006.encryption.CTEncryption getEncryption()>();

        $r17 = interfaceinvoke $r16.<com.microsoft.schemas.office.x2006.encryption.CTEncryption: com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity getDataIntegrity()>();

        $r18 = interfaceinvoke $r17.<com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity: byte[] getEncryptedHmacKey()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setEncryptedHmacKey(byte[])>($r18);

        $r19 = interfaceinvoke $r17.<com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity: byte[] getEncryptedHmacValue()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setEncryptedHmacValue(byte[])>($r19);

        return;

        catch java.lang.Exception from label01 to label02 with label03;
    }

    public void <init>(org.apache.poi.poifs.crypt.CipherAlgorithm, org.apache.poi.poifs.crypt.HashAlgorithm, int, int, org.apache.poi.poifs.crypt.ChainingMode)
    {
        org.apache.poi.poifs.crypt.ChainingMode r3;
        int i0, i1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;
        org.apache.poi.poifs.crypt.HashAlgorithm r2;
        org.apache.poi.poifs.crypt.CipherAlgorithm r1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        r1 := @parameter0: org.apache.poi.poifs.crypt.CipherAlgorithm;

        r2 := @parameter1: org.apache.poi.poifs.crypt.HashAlgorithm;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: org.apache.poi.poifs.crypt.ChainingMode;

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionHeader: void <init>()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setCipherAlgorithm(org.apache.poi.poifs.crypt.CipherAlgorithm)>(r1);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setHashAlgorithm(org.apache.poi.poifs.crypt.HashAlgorithm)>(r2);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setKeySize(int)>(i0);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setBlockSize(int)>(i1);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>(r3);

        return;
    }

    protected void setKeySalt(byte[])
    {
        byte[] r0;
        org.apache.poi.EncryptedDocumentException $r1;
        int $i0, $i1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r2;

        r2 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        $i1 = virtualinvoke r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        if $i0 == $i1 goto label2;

     label1:
        $r1 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r1.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("invalid verifier salt");

        throw $r1;

     label2:
        specialinvoke r2.<org.apache.poi.poifs.crypt.EncryptionHeader: void setKeySalt(byte[])>(r0);

        return;
    }

    public byte[] getEncryptedHmacKey()
    {
        byte[] $r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] encryptedHmacKey>;

        return $r1;
    }

    protected void setEncryptedHmacKey(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] encryptedHmacKey> = r1;

        return;
    }

    public byte[] getEncryptedHmacValue()
    {
        byte[] $r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] encryptedHmacValue>;

        return $r1;
    }

    protected void setEncryptedHmacValue(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] encryptedHmacValue> = r1;

        return;
    }
}
