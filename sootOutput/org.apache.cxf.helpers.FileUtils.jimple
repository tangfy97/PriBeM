public final class org.apache.cxf.helpers.FileUtils extends java.lang.Object
{
    private static final int RETRY_SLEEP_MILLIS;
    private static java.io.File defaultTempDir;

    private void <init>()
    {
        org.apache.cxf.helpers.FileUtils r0;

        r0 := @this: org.apache.cxf.helpers.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized java.io.File getDefaultTempDir()
    {
        java.lang.String $r3, $r6, $r7;
        boolean $z0, $z1;
        java.io.File $r0, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.lang.Class $r2;

        $r0 = <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir>;

        if $r0 == null goto label1;

        $r11 = <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir>;

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $r12 = <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir>;

        return $r12;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "Lorg/apache/cxf/helpers/FileUtils;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".TempDirectory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>($r6);

        if $r7 == null goto label2;

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r7);

        $z0 = virtualinvoke $r10.<java.io.File: boolean mkdirs()>();

        if $z0 == 0 goto label2;

        <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir> = $r10;

     label2:
        $r13 = <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir>;

        if $r13 != null goto label3;

        $r9 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File createTmpDir()>();

        <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir> = $r9;

     label3:
        $r8 = <org.apache.cxf.helpers.FileUtils: java.io.File defaultTempDir>;

        return $r8;
    }

    public static java.io.File createTmpDir()
    {
        org.apache.cxf.helpers.FileUtils$1 $r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Runtime $r16;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r11, $r12, $r13, $r18, $r19, $r20, $r23, $r24, $r26, $r27, $r28;
        int i0, i1;
        java.lang.String $r0, $r5, $r9, $r14, $r21, $r25, $r29;
        double $d0, $d1, $d2, $d3;
        java.lang.RuntimeException $r2, $r22;
        java.io.File $r1, $r10, $r17, r30;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = $d0 * 1000000.0;

        i0 = (int) $d1;

        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The directory ");

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist, please set java.io.tempdir");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to an existing directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label2:
        $z2 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z2 != 0 goto label3;

        $r22 = new java.lang.RuntimeException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The directory ");

        $r25 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is now writable, please set java.io.tempdir");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to an writable directory");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label3:
        $r10 = new java.io.File;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cxf-tmp-");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r0, $r14);

        r30 = $r10;

     label4:
        $z3 = virtualinvoke r30.<java.io.File: boolean mkdir()>();

        if $z3 != 0 goto label5;

        $d2 = staticinvoke <java.lang.Math: double random()>();

        $d3 = $d2 * 1000000.0;

        i1 = (int) $d3;

        $r17 = new java.io.File;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cxf-tmp-");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r0, $r21);

        r30 = $r17;

        goto label4;

     label5:
        $r15 = new org.apache.cxf.helpers.FileUtils$1;

        specialinvoke $r15.<org.apache.cxf.helpers.FileUtils$1: void <init>(java.io.File)>(r30);

        $r16 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r16.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r15);

        return r30;
    }

    public static void mkDir(java.io.File)
    {
        java.lang.String $r3, $r6, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r7, $r8, $r14;
        java.io.File r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r9, $r10, $r12;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("dir attribute is required");

        throw $r14;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create directory as a file already exists with that name: ");

        $r11 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $z2 = staticinvoke <org.apache.cxf.helpers.FileUtils: boolean doMkDirs(java.io.File)>(r0);

        if $z2 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" creation was not successful for an unknown reason");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r7;

     label3:
        return;
    }

    private static boolean doMkDirs(java.io.File)
    {
        java.lang.InterruptedException $r1;
        java.io.File r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label4;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

        $z1 = virtualinvoke r0.<java.io.File: boolean mkdirs()>();

     label2:
        return $z1;

     label3:
        $r1 := @caughtexception;

        $z2 = virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        return $z2;

     label4:
        return 1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void removeDir(java.io.File)
    {
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.cxf.helpers.FileUtils: void removeDir(java.io.File,boolean)>(r0, 0);

        return;
    }

    private static void removeDir(java.io.File, boolean)
    {
        java.lang.String[] $r1, r4;
        java.io.File r0, $r3;
        int i0, $i1;
        java.lang.String r2;
        boolean z0, $z1;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        r4 = $r1;

        if $r1 != null goto label1;

        r4 = newarray (java.lang.String)[0];

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r4;

        if i0 >= $i1 goto label5;

        r2 = r4[i0];

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r2);

        $z1 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        staticinvoke <org.apache.cxf.helpers.FileUtils: void removeDir(java.io.File,boolean)>($r3, z0);

        goto label4;

     label3:
        staticinvoke <org.apache.cxf.helpers.FileUtils: void delete(java.io.File,boolean)>($r3, z0);

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        staticinvoke <org.apache.cxf.helpers.FileUtils: void delete(java.io.File,boolean)>(r0, z0);

        return;
    }

    public static void delete(java.io.File)
    {
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.cxf.helpers.FileUtils: void delete(java.io.File,boolean)>(r0, 0);

        return;
    }

    public static void delete(java.io.File, boolean)
    {
        java.lang.InterruptedException $r1;
        java.io.File r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.io.File;

        z3 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label5;

        $z1 = staticinvoke <org.apache.cxf.helpers.FileUtils: boolean isWindows()>();

        if $z1 == 0 goto label1;

        staticinvoke <java.lang.System: void gc()>();

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label5;

        if z3 != 0 goto label5;

        virtualinvoke r0.<java.io.File: void deleteOnExit()>();

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static boolean isWindows()
    {
        java.util.Locale $r1;
        int $i0, $i2;
        java.lang.String $r0, $r2;
        boolean $z0;

        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("os.name");

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("windows");

        $i2 = (int) -1;

        if $i0 <= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.io.File createTempFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1;
        java.io.File $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static java.io.File createTempFile(java.lang.String, java.lang.String, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r7, $r8;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r5, r6;
        boolean z0;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: java.io.File;

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        $r7 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()>();

        goto label2;

     label1:
        $r7 = r0;

     label2:
        r1 = $r7;

        if r6 != null goto label3;

        r6 = ".tmp";

     label3:
        if r5 != null goto label4;

        r5 = "cxf";

        goto label5;

     label4:
        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 >= 3 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cxf");

        r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>(r5, r6, r1);

        if z0 == 0 goto label6;

        if r0 == null goto label6;

        virtualinvoke $r8.<java.io.File: void deleteOnExit()>();

     label6:
        return $r8;
    }

    public static java.lang.String getStringFromFile(java.io.File)
    {
        java.lang.Throwable $r3;
        java.io.FileInputStream $r0, r7;
        java.io.File r1;
        java.lang.Exception $r2, $r4, $r5, $r6;
        java.lang.String r8;

        r1 := @parameter0: java.io.File;

        r7 = null;

        r8 = null;

     label01:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r7 = $r0;

        r8 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.lang.String normalizeCRLF(java.io.InputStream)>($r0);

     label02:
        if $r0 == null goto label17;

     label03:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label04:
        goto label17;

     label05:
        $r6 := @caughtexception;

        goto label17;

     label06:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label07:
        if r7 == null goto label17;

     label08:
        virtualinvoke r7.<java.io.InputStream: void close()>();

     label09:
        goto label17;

     label10:
        $r4 := @caughtexception;

        goto label17;

     label11:
        $r3 := @caughtexception;

     label12:
        if r7 == null goto label16;

     label13:
        virtualinvoke r7.<java.io.InputStream: void close()>();

     label14:
        goto label16;

     label15:
        $r2 := @caughtexception;

     label16:
        throw $r3;

     label17:
        return r8;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Exception from label01 to label02 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static java.lang.String normalizeCRLF(java.io.InputStream)
    {
        java.lang.String[] $r7;
        int $i0, i1;
        java.lang.String $r4, $r5, $r6, r8, $r12, r14;
        java.io.InputStreamReader $r1;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r3, $r9, $r10, $r11;
        java.io.BufferedReader $r0;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

     label1:
        r14 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

     label2:
        if r14 == null goto label5;

        $r7 = virtualinvoke r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s");

        i1 = 0;

     label3:
        $i0 = lengthof $r7;

        if i1 >= $i0 goto label4;

        r8 = $r7[i1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label3;

     label4:
        r14 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label2;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

     label7:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.lang.String ignoreTokens(java.lang.String,java.lang.String,java.lang.String)>($r4, "<!--", "-->");

        $r6 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.lang.String ignoreTokens(java.lang.String,java.lang.String,java.lang.String)>($r5, "/*", "*/");

        return $r6;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    private static java.lang.String ignoreTokens(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String r0, r1, r2, $r4, $r6, r8;
        java.lang.StringBuilder $r5, $r7, $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r8 = r0;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r2);

        $i7 = (int) -1;

        if $i0 == $i7 goto label1;

        $i9 = (int) -1;

        if $i1 == $i9 goto label1;

        if $i0 >= $i1 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i2 = $i0 - 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        $i4 = $i1 + $i3;

        $i5 = $i4 + 1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r8;
    }

    public static java.util.List getFiles(java.io.File, java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.util.List getFiles(java.io.File,java.lang.String,java.io.File)>(r0, r1, null);

        return $r2;
    }

    public static java.util.List getFilesRecurse(java.io.File, java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.util.List getFilesRecurse(java.io.File,java.lang.String,java.io.File)>(r0, r1, null);

        return $r2;
    }

    public static java.util.List getFiles(java.io.File, java.lang.String, java.io.File)
    {
        java.util.List $r5;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        java.io.File r0, r3;
        java.util.ArrayList $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.File;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.util.List getFilesRecurse(java.io.File,java.util.regex.Pattern,java.io.File,boolean,java.util.List)>(r0, $r2, r3, 0, $r4);

        return $r5;
    }

    public static java.util.List getFilesRecurse(java.io.File, java.lang.String, java.io.File)
    {
        java.util.List $r5;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        java.io.File r0, r3;
        java.util.ArrayList $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.File;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.util.List getFilesRecurse(java.io.File,java.util.regex.Pattern,java.io.File,boolean,java.util.List)>(r0, $r2, r3, 1, $r4);

        return $r5;
    }

    private static java.util.List getFilesRecurse(java.io.File, java.util.regex.Pattern, java.io.File, boolean, java.util.List)
    {
        java.io.File r0, r3, r4;
        java.util.List r2;
        java.util.regex.Matcher $r7;
        int i0, i1;
        java.util.regex.Pattern r5;
        java.lang.String $r6;
        java.io.File[] $r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.io.File;

        r5 := @parameter1: java.util.regex.Pattern;

        r4 := @parameter2: java.io.File;

        z3 := @parameter3: boolean;

        r2 := @parameter4: java.util.List;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r3 = $r1[i1];

        $z0 = virtualinvoke r3.<java.io.File: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        $z1 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        if z3 == 0 goto label3;

        staticinvoke <org.apache.cxf.helpers.FileUtils: java.util.List getFilesRecurse(java.io.File,java.util.regex.Pattern,java.io.File,boolean,java.util.List)>(r3, r5, r4, z3, r2);

        goto label4;

     label3:
        $r6 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $r7 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

        $z2 = virtualinvoke $r7.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label4;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return r2;
    }

    public static java.util.List readLines(java.io.File) throws java.lang.Exception
    {
        java.lang.Throwable $r5;
        java.io.File r0;
        java.util.ArrayList $r3, $r4;
        java.io.BufferedReader $r1;
        java.io.FileReader $r2;
        java.lang.String r6;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        return $r4;

     label1:
        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.FileReader;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.io.File)>(r0);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label2:
        r6 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

     label3:
        if r6 == null goto label4;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        r6 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label3;

     label4:
        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

        throw $r5;

     label7:
        return $r3;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void access$000(java.io.File, boolean)
    {
        java.io.File r0;
        boolean z0;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        staticinvoke <org.apache.cxf.helpers.FileUtils: void removeDir(java.io.File,boolean)>(r0, z0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.helpers.FileUtils: int RETRY_SLEEP_MILLIS> = 10;

        return;
    }
}
