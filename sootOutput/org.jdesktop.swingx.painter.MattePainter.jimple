public class org.jdesktop.swingx.painter.MattePainter extends org.jdesktop.swingx.painter.AbstractAreaPainter
{

    public void <init>()
    {
        org.jdesktop.swingx.painter.MattePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.MattePainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>()>();

        return;
    }

    public void <init>(java.awt.Paint)
    {
        org.jdesktop.swingx.painter.MattePainter r0;
        java.awt.Paint r1;

        r0 := @this: org.jdesktop.swingx.painter.MattePainter;

        r1 := @parameter0: java.awt.Paint;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>(java.awt.Paint)>(r1);

        return;
    }

    public void <init>(java.awt.Paint, boolean)
    {
        org.jdesktop.swingx.painter.MattePainter r0;
        java.awt.Paint r1;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.painter.MattePainter;

        r1 := @parameter0: java.awt.Paint;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>(java.awt.Paint)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.painter.MattePainter: void setPaintStretched(boolean)>(z0);

        return;
    }

    protected void doPaint(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Insets $r2;
        java.awt.Graphics2D r3;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, i9, $i10, $i11;
        boolean $z0;
        java.awt.Shape $r5;
        org.jdesktop.swingx.painter.MattePainter r0;
        java.awt.Paint $r1, r6;
        java.lang.Object r4;

        r0 := @this: org.jdesktop.swingx.painter.MattePainter;

        r3 := @parameter0: java.awt.Graphics2D;

        r4 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i5 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.MattePainter: java.awt.Paint getFillPaint()>();

        r6 = $r1;

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.painter.MattePainter: java.awt.Insets getInsets()>();

        $i1 = $r2.<java.awt.Insets: int left>;

        $i3 = i0 - $i1;

        $i2 = $r2.<java.awt.Insets: int right>;

        i4 = $i3 - $i2;

        $i6 = $r2.<java.awt.Insets: int top>;

        $i8 = i5 - $i6;

        $i7 = $r2.<java.awt.Insets: int bottom>;

        i9 = $i8 - $i7;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.MattePainter: boolean isPaintStretched()>();

        if $z0 == 0 goto label1;

        r6 = virtualinvoke r0.<org.jdesktop.swingx.painter.MattePainter: java.awt.Paint calculateSnappedPaint(java.awt.Paint,int,int)>($r1, i4, i9);

     label1:
        $i11 = $r2.<java.awt.Insets: int left>;

        $i10 = $r2.<java.awt.Insets: int top>;

        virtualinvoke r3.<java.awt.Graphics2D: void translate(int,int)>($i11, $i10);

        virtualinvoke r3.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r6);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.painter.MattePainter: java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)>(r3, r4, i4, i9);

        virtualinvoke r3.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r5);

     label2:
        return;
    }

    protected java.awt.Shape provideShape(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Rectangle $r0;
        org.jdesktop.swingx.painter.MattePainter r1;
        java.awt.Graphics2D r2;
        int i0, i1;
        java.lang.Object r3;

        r1 := @this: org.jdesktop.swingx.painter.MattePainter;

        r2 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, i0, i1);

        return $r0;
    }
}
