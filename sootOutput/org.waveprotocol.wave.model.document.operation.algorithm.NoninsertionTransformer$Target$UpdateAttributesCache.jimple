final class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache extends org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache
{
    private final org.waveprotocol.wave.model.document.operation.AttributesUpdate update;
    final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target, org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1)>(null);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update> = r2;

        return;
    }

    void resolveRetain(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r7;
        int i0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r4);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r5);

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r6);

        interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        return;
    }

    void resolveDeleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r7, $r8;
        org.waveprotocol.wave.model.document.operation.Attributes r4, $r6;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate $r5;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.Attributes updateWith(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r5);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r2, r3, $r6);

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r7);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int access$304(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r8);

        return;
    }

    void resolveReplaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.Attributes r7, $r9, r10;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r6;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate $r8;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache;

        r7 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r10 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r5);

        $r8 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $r9 = interfaceinvoke r7.<org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.Attributes updateWith(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r8);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r9, r10);

        return;
    }

    void resolveUpdateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r7, $r13;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache r0;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r6, $r11, $r12;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r3, $r5, $r9, $r10, $r14, $r16, $r18, $r21, r26;
        java.util.HashMap $r2;
        java.lang.String[] $r20;
        java.util.HashSet $r8;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.String $r15, $r17, $r22, $r24, $r25, $r27;
        java.lang.Object $r23;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r4, $r19;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i3 >= $i0 goto label2;

        $r24 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i3);

        $r25 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r25);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>()>();

        r26 = $r4;

        i4 = 0;

     label3:
        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $i1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i4 >= $i1 goto label6;

        $r16 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i4);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r17);

        if $z0 == 0 goto label4;

        $r23 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r27 = (java.lang.String) $r23;

        goto label5;

     label4:
        $r18 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $r27 = interfaceinvoke $r18.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getOldValue(int)>(i4);

     label5:
        $r19 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        $r20 = newarray (java.lang.String)[3];

        $r20[0] = $r17;

        $r20[1] = $r27;

        $r21 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i4);

        $r20[2] = $r22;

        specialinvoke $r19.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>(java.lang.String[])>($r20);

        r26 = interfaceinvoke r26.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: org.waveprotocol.wave.model.document.operation.AttributesUpdate composeWith(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r19);

        i4 = i4 + 1;

        goto label3;

     label6:
        $r6 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r6);

        interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r26);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        i5 = 0;

     label7:
        $r9 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $i2 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i5 >= $i2 goto label8;

        $r14 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.AttributesUpdate update>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i5);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r15);

        i5 = i5 + 1;

        goto label7;

     label8:
        $r10 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: org.waveprotocol.wave.model.document.operation.AttributesUpdate exclude(java.util.Collection)>($r8);

        $r11 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r11);

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r12);

        interfaceinvoke $r13.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r10);

        return;
    }
}
