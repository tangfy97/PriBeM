public class org.apache.batik.parser.AWTTransformProducer extends java.lang.Object implements org.apache.batik.parser.TransformListHandler
{
    protected java.awt.geom.AffineTransform affineTransform;

    public void <init>()
    {
        org.apache.batik.parser.AWTTransformProducer r0;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.geom.AffineTransform createAffineTransform(java.io.Reader) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.TransformListParser $r0;
        java.io.Reader r2;
        org.apache.batik.parser.AWTTransformProducer $r1;
        java.awt.geom.AffineTransform $r3;

        r2 := @parameter0: java.io.Reader;

        $r0 = new org.apache.batik.parser.TransformListParser;

        specialinvoke $r0.<org.apache.batik.parser.TransformListParser: void <init>()>();

        $r1 = new org.apache.batik.parser.AWTTransformProducer;

        specialinvoke $r1.<org.apache.batik.parser.AWTTransformProducer: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.parser.TransformListParser: void setTransformListHandler(org.apache.batik.parser.TransformListHandler)>($r1);

        virtualinvoke $r0.<org.apache.batik.parser.AbstractParser: void parse(java.io.Reader)>(r2);

        $r3 = virtualinvoke $r1.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform getAffineTransform()>();

        return $r3;
    }

    public static java.awt.geom.AffineTransform createAffineTransform(java.lang.String) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.TransformListParser $r0;
        java.lang.String r2;
        org.apache.batik.parser.AWTTransformProducer $r1;
        java.awt.geom.AffineTransform $r3;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.batik.parser.TransformListParser;

        specialinvoke $r0.<org.apache.batik.parser.TransformListParser: void <init>()>();

        $r1 = new org.apache.batik.parser.AWTTransformProducer;

        specialinvoke $r1.<org.apache.batik.parser.AWTTransformProducer: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.parser.TransformListParser: void setTransformListHandler(org.apache.batik.parser.TransformListHandler)>($r1);

        virtualinvoke $r0.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r2);

        $r3 = virtualinvoke $r1.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform getAffineTransform()>();

        return $r3;
    }

    public java.awt.geom.AffineTransform getAffineTransform()
    {
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        $r1 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        return $r1;
    }

    public void startTransformList() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform> = $r1;

        return;
    }

    public void matrix(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1, $r2;
        float f0, f1, f2, f3, f4, f5;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        $r2 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(f0, f1, f2, f3, f4, f5);

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r1);

        return;
    }

    public void rotate(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1, $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double)>($d1);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        return;
    }

    public void rotate(float, float, float) throws org.apache.batik.parser.ParseException
    {
        java.awt.geom.AffineTransform $r0, $r2;
        org.apache.batik.parser.AWTTransformProducer r1;
        float f0, f1, f2;
        double $d0, $d1, $d2, $d3;

        r1 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d3 = (double) f1;

        $d2 = (double) f2;

        $r0 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($d1, $d3, $d2);

        $r2 = r1.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r0);

        return;
    }

    public void translate(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        java.awt.geom.AffineTransform $r0, $r2;
        org.apache.batik.parser.AWTTransformProducer r1;
        double $d0;

        r1 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $r0 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, 0.0);

        $r2 = r1.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r0);

        return;
    }

    public void translate(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        java.awt.geom.AffineTransform $r0, $r2;
        org.apache.batik.parser.AWTTransformProducer r1;
        double $d0, $d1;

        r1 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r0 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        $r2 = r1.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r0);

        return;
    }

    public void scale(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1, $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        $d1 = (double) f0;

        $d0 = (double) f0;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d1, $d0);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        return;
    }

    public void scale(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1, $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d1, $d0);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        return;
    }

    public void skewX(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getShearInstance(double,double)>($d2, 0.0);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        return;
    }

    public void skewY(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.AWTTransformProducer r0;
        java.awt.geom.AffineTransform $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform affineTransform>;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getShearInstance(double,double)>(0.0, $d2);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        return;
    }

    public void endTransformList() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.AWTTransformProducer r0;

        r0 := @this: org.apache.batik.parser.AWTTransformProducer;

        return;
    }
}
