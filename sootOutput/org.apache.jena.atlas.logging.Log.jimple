public class org.apache.jena.atlas.logging.Log extends java.lang.Object
{
    private static java.lang.String log4Jsetup;
    static java.lang.String defaultProperties;

    private void <init>()
    {
        org.apache.jena.atlas.logging.Log r0;

        r0 := @this: org.apache.jena.atlas.logging.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void info(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.String)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>(r2);

        return;
    }

    public static void info(java.lang.Object, java.lang.String)
    {
        org.slf4j.Logger $r2;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r3;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>($r1);

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>(r3);

        return;
    }

    public static void info(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        org.slf4j.Logger $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>(r2);

        return;
    }

    public static void info(java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r4;
        org.slf4j.Logger $r2;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r3;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>($r1);

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>(r3, r4);

        return;
    }

    public static void info(java.lang.Class, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.slf4j.Logger $r1;
        java.lang.Class r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>(r2, r3);

        return;
    }

    public static void debug(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.String)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>(r2);

        return;
    }

    public static void debug(java.lang.Object, java.lang.String)
    {
        org.slf4j.Logger $r2;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r3;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>($r1);

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>(r3);

        return;
    }

    public static void debug(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        org.slf4j.Logger $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>(r2);

        return;
    }

    public static void debug(java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r4;
        org.slf4j.Logger $r2;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r3;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>($r1);

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>(r3, r4);

        return;
    }

    public static void debug(java.lang.Class, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.slf4j.Logger $r1;
        java.lang.Class r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>(r2, r3);

        return;
    }

    public static void warn(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.String)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>(r2);

        return;
    }

    public static void warn(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>($r1, r2);

        return;
    }

    public static void warn(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        org.slf4j.Logger $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>(r2);

        return;
    }

    public static void warn(java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String,java.lang.Throwable)>($r1, r2, r3);

        return;
    }

    public static void warn(java.lang.Class, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.slf4j.Logger $r1;
        java.lang.Class r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>(r2, r3);

        return;
    }

    public static void fatal(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String)>($r1, r2);

        return;
    }

    public static void fatal(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        org.slf4j.Logger $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void error(java.lang.String)>(r2);

        return;
    }

    public static void fatal(java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String,java.lang.Throwable)>($r1, r2, r3);

        return;
    }

    public static void fatal(java.lang.Class, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.slf4j.Logger $r1;
        java.lang.Class r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.Class)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>(r2, r3);

        return;
    }

    public static void fatal(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.atlas.logging.Log: org.slf4j.Logger log(java.lang.String)>(r0);

        interfaceinvoke $r1.<org.slf4j.Logger: void error(java.lang.String)>(r2);

        return;
    }

    public static org.slf4j.Logger log(java.lang.Class)
    {
        java.lang.Class r0;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(r0);

        return $r1;
    }

    public static org.slf4j.Logger log(java.lang.String)
    {
        java.lang.String r0;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>(r0);

        return $r1;
    }

    public static void enable(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.jena.atlas.logging.Log: void enable(java.lang.String,java.lang.String)>(r0, "all");

        return;
    }

    public static void enable(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, $r1;
        java.lang.String $r2, r3;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void enable(java.lang.String,java.lang.String)>($r2, r3);

        return;
    }

    public static void enable(java.lang.String, java.lang.String)
    {
        java.util.logging.Level r3;
        org.apache.log4j.Level r2;
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        r3 = <java.util.logging.Level: java.util.logging.Level ALL>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("info");

        if $z0 == 0 goto label1;

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("debug");

        if $z1 == 0 goto label2;

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("warn");

        if $z2 == 0 goto label3;

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("error");

        if $z3 == 0 goto label4;

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

     label4:
        staticinvoke <org.apache.jena.atlas.logging.Log: void logLevel(java.lang.String,org.apache.log4j.Level,java.util.logging.Level)>(r1, r2, r3);

        return;
    }

    public static void logLevel(java.lang.String, org.apache.log4j.Level, java.util.logging.Level)
    {
        org.apache.log4j.Logger $r4;
        org.apache.log4j.Level r0;
        java.lang.String r2;
        java.util.logging.Logger $r3;
        java.util.logging.Level r1;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.log4j.Level;

        r1 := @parameter2: java.util.logging.Level;

        if r0 == null goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r2);

        virtualinvoke $r4.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0);

     label1:
        if r1 == null goto label2;

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r2);

        virtualinvoke $r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(r1);

     label2:
        return;
    }

    public static void enable(java.lang.Class)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.Class r0;
        java.lang.String $r3;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.Class)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        $r5 = <java.util.logging.Level: java.util.logging.Level ALL>;

        virtualinvoke $r4.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r5);

        return;
    }

    public static void disable(java.lang.String)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.String r0;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level OFF>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r0);

        $r4 = <java.util.logging.Level: java.util.logging.Level OFF>;

        virtualinvoke $r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r4);

        return;
    }

    public static void disable(java.lang.Class)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.Class r0;
        java.lang.String $r3;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.Class)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level OFF>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        $r5 = <java.util.logging.Level: java.util.logging.Level OFF>;

        virtualinvoke $r4.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r5);

        return;
    }

    public static void setWarn(java.lang.String)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.String r0;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r0);

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r4);

        return;
    }

    public static void setWarn(java.lang.Class)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.Class r0;
        java.lang.String $r3;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.Class)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        $r5 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r4.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r5);

        return;
    }

    public static void setError(java.lang.String)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.String r0;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r0);

        $r4 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r4);

        return;
    }

    public static void setError(java.lang.Class)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.Class r0;
        java.lang.String $r3;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.Class)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        $r5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r4.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r5);

        return;
    }

    public static void setInfo(java.lang.String)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.String r0;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r0);

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r4);

        return;
    }

    public static void setInfo(java.lang.Class)
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        java.lang.Class r0;
        java.lang.String $r3;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.Class)>(r0);

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        $r5 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r4.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r5);

        return;
    }

    public static boolean setLog4j()
    {
        java.io.File $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r0, $r5, $r6;
        boolean $z0, $z1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("log4j.configuration");

        if $r0 != null goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("log4j.properties");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log4j.properties");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("log4j.configuration", $r5);

     label1:
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("log4j.configuration");

        if $r6 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static void setLog4j(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void configure(java.lang.String)>(r0);

        goto label2;

     label1:
        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>(r0);

     label2:
        return;
    }

    public static void setCmdLogging()
    {
        java.lang.String $r0;

        $r0 = <org.apache.jena.atlas.logging.Log: java.lang.String log4Jsetup>;

        staticinvoke <org.apache.jena.atlas.logging.Log: void setCmdLogging(java.lang.String)>($r0);

        return;
    }

    public static void setCmdLogging(java.lang.String)
    {
        java.lang.String $r0, r1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.jena.atlas.logging.Log: boolean setLog4j()>();

        if $z0 != 0 goto label1;

        $r0 = <org.apache.jena.atlas.logging.Log: java.lang.String log4Jsetup>;

        staticinvoke <org.apache.jena.atlas.logging.Log: void resetLogging(java.lang.String)>($r0);

     label1:
        return;
    }

    public static void resetLogging(java.lang.String)
    {
        byte[] $r3;
        java.util.Properties $r0;
        java.io.ByteArrayInputStream $r1;
        java.io.IOException $r4;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        $r1 = new java.io.ByteArrayInputStream;

        $r3 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>(r2);

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

     label1:
        virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.util.Properties)>($r0);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("log4j.configuration", "set");

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void setJavaLogging()
    {
        staticinvoke <org.apache.jena.atlas.logging.Log: void setJavaLogging(java.lang.String)>("logging.properties");

        return;
    }

    public static void setJavaLogging(java.lang.String)
    {
        org.apache.jena.atlas.AtlasException $r4;
        java.util.logging.LogManager $r2;
        java.io.FileInputStream $r0;
        java.lang.String r1;
        java.lang.Exception $r3;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>($r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r4.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void setJavaLoggingDft()
    {
        byte[] $r2;
        org.apache.jena.atlas.AtlasException $r5;
        java.io.ByteArrayInputStream $r0;
        java.util.logging.LogManager $r3;
        java.lang.String $r1;
        java.lang.Exception $r4;

     label1:
        $r0 = new java.io.ByteArrayInputStream;

        $r1 = <org.apache.jena.atlas.logging.Log: java.lang.String defaultProperties>;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r3.<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>($r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r5.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r2;
        java.lang.String $r1, $r3;

        $r0 = newarray (java.lang.String)[19];

        $r0[0] = "## Plain output to stdout";

        $r0[1] = "log4j.appender.jena.plain=org.apache.log4j.ConsoleAppender";

        $r0[2] = "log4j.appender.jena.plain.target=System.out";

        $r0[3] = "log4j.appender.jena.plain.layout=org.apache.log4j.PatternLayout";

        $r0[4] = "log4j.appender.jena.plain.layout.ConversionPattern=%m%n";

        $r0[5] = "## Plain output with level, to stderr";

        $r0[6] = "log4j.appender.jena.plainlevel=org.apache.log4j.ConsoleAppender";

        $r0[7] = "log4j.appender.jena.plainlevel.target=System.err";

        $r0[8] = "log4j.appender.jena.plainlevel.layout=org.apache.log4j.PatternLayout";

        $r0[9] = "log4j.appender.jena.plainlevel.layout.ConversionPattern=%-5p %m%n";

        $r0[10] = "## Everything";

        $r0[11] = "log4j.rootLogger=INFO, jena.plainlevel";

        $r0[12] = "log4j.logger.com.hp.hpl.jena=WARN";

        $r0[13] = "log4j.logger.org.openjena=WARN";

        $r0[14] = "log4j.logger.org.apache.jena=WARN";

        $r0[15] = "log4j.logger.org.apache.jena.tdb.loader=INFO";

        $r0[16] = "## Parser output";

        $r0[17] = "log4j.additivity.org.apache.jena.riot=false";

        $r0[18] = "log4j.logger.org.apache.jena.riot=INFO, jena.plainlevel ";

        $r1 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoinNL(java.lang.String[])>($r0);

        <org.apache.jena.atlas.logging.Log: java.lang.String log4Jsetup> = $r1;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "handlers=org.openjena.atlas.logging.java.ConsoleHandlerStdout";

        $r2[1] = "org.openjena.atlas.logging.java.ConsoleHandlerStdout.level=INFO";

        $r2[2] = "java.util.logging.ConsoleHandler.formatter=atlas.logging.java.TextFormatter";

        $r3 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoinNL(java.lang.String[])>($r2);

        <org.apache.jena.atlas.logging.Log: java.lang.String defaultProperties> = $r3;

        return;
    }
}
