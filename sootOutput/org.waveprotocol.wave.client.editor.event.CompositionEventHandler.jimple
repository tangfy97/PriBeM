public class org.waveprotocol.wave.client.editor.event.CompositionEventHandler extends java.lang.Object
{
    private final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private final boolean modifiesDomAndFiresTextInputAfterComposition;
    private final org.waveprotocol.wave.client.scheduler.TimerService timer;
    private final org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener listener;
    final int compositionEndDelay;
    private boolean appComposing;
    boolean delayAfterTextInput;
    private boolean browserComposing;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.scheduler.TimerService, org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener, org.waveprotocol.wave.common.logging.LoggerBundle, boolean)
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$1 $r1;
        org.waveprotocol.wave.client.scheduler.TimerService r2;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener r3;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        org.waveprotocol.wave.common.logging.LoggerBundle r4;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        r2 := @parameter0: org.waveprotocol.wave.client.scheduler.TimerService;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener;

        r4 := @parameter2: org.waveprotocol.wave.common.logging.LoggerBundle;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: int compositionEndDelay> = 0;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: int compositionEndDelay> = 0;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing> = 0;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean delayAfterTextInput> = 0;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing> = 0;

        $r1 = new org.waveprotocol.wave.client.editor.event.CompositionEventHandler$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler$1: void <init>(org.waveprotocol.wave.client.editor.event.CompositionEventHandler)>(r0);

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask> = $r1;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.TimerService timer> = r2;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener listener> = r3;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger> = r4;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean modifiesDomAndFiresTextInputAfterComposition> = z0;

        return;
    }

    public boolean handleCompositionEvent(java.lang.Object, java.lang.String)
    {
        java.lang.AssertionError $r7;
        java.lang.Object r8;
        java.lang.String r0, $r1, $r2, $r4, $r5, $r6;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r3 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        r8 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        $r1 = "compositionstart";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        specialinvoke r3.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void compositionStart(java.lang.Object)>(r8);

        goto label6;

     label1:
        $r2 = "text";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r4 = "compositionupdate";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void compositionUpdate()>();

        goto label6;

     label3:
        $r5 = "compositionend";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

        specialinvoke r3.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void compositionEnd()>();

        goto label6;

     label4:
        $r6 = "textInput";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label5;

        specialinvoke r3.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void textInput()>();

        goto label6;

     label5:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("unreachable");

        throw $r7;

     label6:
        return 0;
    }

    public void handleOtherEvent()
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void checkAppComposing()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean modifiesDomAndFiresTextInputAfterComposition>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void flush()>();

        goto label2;

     label1:
        return;

     label2:
        return;
    }

    private void compositionStart(java.lang.Object)
    {
        org.waveprotocol.wave.common.logging.Logger $r10;
        java.lang.AssertionError $r11, $r12;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r4, $r6;
        org.waveprotocol.wave.client.scheduler.TimerService $r5, $r7;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r13, $r14;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.common.logging.LoggerBundle $r9;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        if $z0 == 0 goto label1;

        $r9 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("CEH: State was already \'composing\' during a compositionstart event!");

        return;

     label1:
        $z1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean delayAfterTextInput>;

        if $z1 == 0 goto label3;

        $z5 = <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled>;

        if $z5 != 0 goto label2;

        $z6 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing()>();

        if $z6 != 0 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void flush()>();

     label3:
        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean delayAfterTextInput> = 0;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing> = 1;

        $z7 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean modifiesDomAndFiresTextInputAfterComposition>;

        if $z7 == 0 goto label4;

        $r5 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.TimerService timer>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask>;

        $r13 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r4;

        $z4 = interfaceinvoke $r5.<org.waveprotocol.wave.client.scheduler.TimerService: boolean isScheduled(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r13);

        if $z4 == 0 goto label4;

        $r7 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.TimerService timer>;

        $r6 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask>;

        $r14 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r6;

        interfaceinvoke $r7.<org.waveprotocol.wave.client.scheduler.TimerService: void cancel(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r14);

        return;

     label4:
        $z2 = <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $z3 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing>;

        if $z3 == 0 goto label5;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label5:
        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing> = 1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener listener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener: void compositionStart(java.lang.Object)>(r1);

        return;
    }

    private void compositionUpdate()
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener $r1;
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void checkAppComposing()>();

        $z0 = <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing>;

        if $z1 == 1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener listener>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener: void compositionUpdate()>();

        return;
    }

    private void compositionEnd()
    {
        org.waveprotocol.wave.common.logging.Logger $r2, $r6, $r8;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1, $r5, $r7;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener $r3;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean delayAfterTextInput> = 0;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void checkAppComposing()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        if $z0 != 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("CEH: State was not \'composing\' during a compositionend event!");

        return;

     label1:
        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing> = 0;

        $z1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean modifiesDomAndFiresTextInputAfterComposition>;

        if $z1 == 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("ce schedule");

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void scheduleEndTask()>();

        goto label4;

     label2:
        $r1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("ce now");

        $z2 = <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $z3 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing>;

        if $z3 == 1 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing> = 0;

        $r3 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener listener>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener: void compositionEnd()>();

     label4:
        return;
    }

    private void textInput()
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void checkAppComposing()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean modifiesDomAndFiresTextInputAfterComposition>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing()>();

        if $z1 == 0 goto label1;

        $z2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        if $z2 != 0 goto label1;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean delayAfterTextInput> = 1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void scheduleEndTask()>();

     label1:
        return;
    }

    private boolean appComposing()
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void checkAppComposing()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing>;

        return $z0;
    }

    void checkAppComposing()
    {
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r2;
        org.waveprotocol.wave.client.scheduler.TimerService $r3;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r5;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $z0 = <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $z2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing>;

        $z1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        if $z1 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.TimerService timer>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask>;

        $r5 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r2;

        $z3 = interfaceinvoke $r3.<org.waveprotocol.wave.client.scheduler.TimerService: boolean isScheduled(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r5);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z2 == $z4 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("appComposing variable does not match inferred state");

        throw $r4;

     label4:
        return;
    }

    private void flush()
    {
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r1, $r3;
        org.waveprotocol.wave.client.scheduler.TimerService $r2;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r6;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $z0 = <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        if $z2 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("flush should not be called during native composition, because it is impossible to flush");

        throw $r5;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void checkAppComposing()>();

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.TimerService timer>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask>;

        $r6 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r1;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.TimerService: void cancel(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r6);

        $r3 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.scheduler.Scheduler$Task: void execute()>();

        goto label3;

     label2:
        return;

     label3:
        return;
    }

    private void scheduleEndTask()
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r2;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.TimerService timer>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.scheduler.Scheduler$Task endTask>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.TimerService: void scheduleDelayed(org.waveprotocol.wave.client.scheduler.Scheduler$Task,int)>($r1, 0);

        return;
    }

    static boolean access$000(org.waveprotocol.wave.client.editor.event.CompositionEventHandler)
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean browserComposing>;

        return $z0;
    }

    static boolean access$100(org.waveprotocol.wave.client.editor.event.CompositionEventHandler)
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing>;

        return $z0;
    }

    static boolean access$102(org.waveprotocol.wave.client.editor.event.CompositionEventHandler, boolean)
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean appComposing> = z0;

        return z0;
    }

    static org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener access$200(org.waveprotocol.wave.client.editor.event.CompositionEventHandler)
    {
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler r0;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener listener>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/event/CompositionEventHandler;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean $assertionsDisabled> = $z1;

        return;
    }
}
