final class org.waveprotocol.wave.model.experimental.schema.AttributesValidator extends java.lang.Object
{
    private final java.util.Set requiredAttributes;
    private final java.util.Map valueValidators;
    static final boolean $assertionsDisabled;

    void <init>(java.util.Set, java.util.Map)
    {
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator r0;
        java.lang.AssertionError $r4, $r11, $r12;
        java.util.Map r2;
        java.lang.String $r10;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set r1, $r3, $r6;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.AttributesValidator;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.waveprotocol.wave.model.experimental.schema.AttributesValidator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.waveprotocol.wave.model.experimental.schema.AttributesValidator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $z2 = <org.waveprotocol.wave.model.experimental.schema.AttributesValidator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $z3 = interfaceinvoke $r3.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        if $z3 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r4;

     label3:
        r0.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: java.util.Set requiredAttributes> = r1;

        r0.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: java.util.Map valueValidators> = r2;

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult validate(org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator r0;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$MissingRequiredAttribute $r18;
        org.waveprotocol.wave.model.experimental.schema.ValueValidator r12;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult $r6;
        java.util.Map $r10;
        java.lang.String r9, r14, r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r20;
        java.util.Iterator $r2, $r5;
        java.util.Set $r1, $r4;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$AttributeNotAllowed $r16;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$InvalidAttributeValue $r15;
        java.lang.Object $r7, $r8, $r11, $r13, $r17;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.AttributesValidator;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: java.util.Set requiredAttributes>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r17;

        $z3 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.operation.Attributes: boolean containsKey(java.lang.Object)>(r19);

        if $z3 != 0 goto label2;

        $r18 = new org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$MissingRequiredAttribute;

        specialinvoke $r18.<org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$MissingRequiredAttribute: void <init>(java.lang.String)>(r19);

        return $r18;

     label2:
        goto label1;

     label3:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r8;

        $r10 = r0.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: java.util.Map valueValidators>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r12 = (org.waveprotocol.wave.model.experimental.schema.ValueValidator) $r11;

        if r12 != null goto label5;

        $r16 = new org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$AttributeNotAllowed;

        specialinvoke $r16.<org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$AttributeNotAllowed: void <init>(java.lang.String)>(r9);

        return $r16;

     label5:
        $r13 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (java.lang.String) $r13;

        $z2 = virtualinvoke r12.<org.waveprotocol.wave.model.experimental.schema.ValueValidator: boolean validate(java.lang.String)>(r14);

        if $z2 != 0 goto label6;

        $r15 = new org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$InvalidAttributeValue;

        specialinvoke $r15.<org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$InvalidAttributeValue: void <init>(java.lang.String,java.lang.String)>(r9, r14);

        return $r15;

     label6:
        goto label4;

     label7:
        $r6 = <org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult: org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult VALID>;

        return $r6;
    }

    org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult validate(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator r3;
        org.waveprotocol.wave.model.experimental.schema.ValueValidator r6;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult $r1;
        java.util.Map $r4;
        int $i0, i1;
        java.lang.String $r2, $r7;
        boolean $z0, $z1;
        java.util.Set $r9;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$RemovingRequiredAttribute $r10;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$AttributeNotAllowed $r11;
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$InvalidAttributeValue $r8;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r0;

        r3 := @this: org.waveprotocol.wave.model.experimental.schema.AttributesValidator;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i1 >= $i0 goto label5;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i1);

        $r4 = r3.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: java.util.Map valueValidators>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r6 = (org.waveprotocol.wave.model.experimental.schema.ValueValidator) $r5;

        if r6 != null goto label2;

        $r11 = new org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$AttributeNotAllowed;

        specialinvoke $r11.<org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$AttributeNotAllowed: void <init>(java.lang.String)>($r2);

        return $r11;

     label2:
        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i1);

        if $r7 != null goto label3;

        $r9 = r3.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: java.util.Set requiredAttributes>;

        $z1 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z1 == 0 goto label4;

        $r10 = new org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$RemovingRequiredAttribute;

        specialinvoke $r10.<org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$RemovingRequiredAttribute: void <init>(java.lang.String)>($r2);

        return $r10;

     label3:
        $z0 = virtualinvoke r6.<org.waveprotocol.wave.model.experimental.schema.ValueValidator: boolean validate(java.lang.String)>($r7);

        if $z0 != 0 goto label4;

        $r8 = new org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$InvalidAttributeValue;

        specialinvoke $r8.<org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult$InvalidAttributeValue: void <init>(java.lang.String,java.lang.String)>($r2, $r7);

        return $r8;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r1 = <org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult: org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult VALID>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/experimental/schema/AttributesValidator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.experimental.schema.AttributesValidator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
