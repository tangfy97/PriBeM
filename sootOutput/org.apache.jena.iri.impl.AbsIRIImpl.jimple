public abstract class org.apache.jena.iri.impl.AbsIRIImpl extends org.apache.jena.iri.IRI implements org.apache.jena.iri.ViolationCodes, org.apache.jena.iri.IRIComponents
{
    private static final int defaultRelative;
    private long foundExceptionMask;
    long allErrors;
    private java.util.ArrayList foundExceptions;
    protected java.lang.String path;
    private static final char[] hex;
    static final java.util.Iterator nullIterator;
    protected static final int NO_EXCEPTIONS;
    protected static final int ALL_EXCEPTIONS;
    protected static final int NOT_RELATIVE_EXCEPTIONS;
    protected static final int PATH_INDEX;
    static long ToAsciiMask;
    private static final org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize child;
    private static final org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize parent;
    private static final org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize grandparent;

    static java.lang.String removeDotSegments(java.lang.String)
    {
        java.lang.StringBuffer $r6;
        int $i0, $i1, i2, i3, $i5;
        java.lang.String r0, $r2, $r3, $r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label01:
        if i2 >= $i0 goto label11;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        r5 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("./");

        if $z0 == 0 goto label02;

        i2 = i2 + 2;

        goto label01;

     label02:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("../");

        if $z1 == 0 goto label03;

        i2 = i2 + 3;

        goto label01;

     label03:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("/./");

        if $z2 == 0 goto label04;

        i2 = i2 + 2;

        goto label01;

     label04:
        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("/.");

        if $z3 == 0 goto label05;

        r5 = "/";

        i2 = i2 + 2;

     label05:
        $z4 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/../");

        if $z4 == 0 goto label06;

        i2 = i2 + 3;

        staticinvoke <org.apache.jena.iri.impl.AbsIRIImpl: void removeLastSeqment(java.lang.StringBuffer)>($r6);

        goto label01;

     label06:
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("/..");

        if $z5 == 0 goto label07;

        r5 = "/";

        i2 = i2 + 3;

        staticinvoke <org.apache.jena.iri.impl.AbsIRIImpl: void removeLastSeqment(java.lang.StringBuffer)>($r6);

     label07:
        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z6 == 0 goto label08;

        i2 = i2 + 1;

        goto label01;

     label08:
        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $z7 == 0 goto label09;

        i2 = i2 + 2;

        goto label01;

     label09:
        $i1 = virtualinvoke r5.<java.lang.String: int indexOf(int,int)>(47, 1);

        i3 = $i1;

        $i5 = (int) -1;

        if $i1 != $i5 goto label10;

        i3 = virtualinvoke r5.<java.lang.String: int length()>();

     label10:
        i2 = i2 + i3;

        $r4 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label01;

     label11:
        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static void removeLastSeqment(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        int i1, $i3, $i4;
        char $c0;

        r0 := @parameter0: java.lang.StringBuffer;

        i1 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

     label1:
        if i1 <= 0 goto label2;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        $c0 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i1);

        $i4 = (int) $c0;

        if $i4 != 47 goto label1;

        goto label2;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: void setLength(int)>(i1);

        return;
    }

    abstract long errors(int);

    abstract org.apache.jena.iri.impl.SchemeSpecificPart getSchemeSpec();

    abstract java.lang.Exception getIDNAException();

    boolean hasExceptionMask(long)
    {
        byte $b3;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long l0, $l1, $l2;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: long allErrors>;

        $l2 = $l1 & l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>()
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        specialinvoke r0.<org.apache.jena.iri.IRI: void <init>()>();

        return;
    }

    java.util.Iterator exceptionsMask(long)
    {
        org.apache.jena.iri.impl.AbsIRIImpl$1 $r3;
        java.util.Iterator $r2;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long l0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: void createExceptions(long)>(l0);

        $r1 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.ArrayList foundExceptions>;

        if $r1 != null goto label1;

        $r2 = <org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator nullIterator>;

        goto label2;

     label1:
        $r3 = new org.apache.jena.iri.impl.AbsIRIImpl$1;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.jena.iri.impl.AbsIRIImpl$1: void <init>(org.apache.jena.iri.impl.AbsIRIImpl,long)>(r0, l0);

     label2:
        return $r2;
    }

    private void createExceptions(long)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long $l0, $l1, $l2, $l3, $l5, $l6, $l8, $l9, $l11, $l12, $l13, $l14, l16, l17;
        java.util.ArrayList $r1, $r4, $r5;
        byte $b4, $b10, $b15;
        int[] $r2, $r6;
        int i7, i18, $i19, i20;
        org.apache.jena.iri.impl.ViolationImpl $r3;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        l16 := @parameter0: long;

        $l0 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: long foundExceptionMask>;

        $l1 = $l0 ^ -1L;

        l17 = l16 & $l1;

        $l2 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: long allErrors>;

        $l3 = $l2 & l17;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label6;

        $r1 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.ArrayList foundExceptions>;

        if $r1 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.ArrayList foundExceptions> = $r5;

     label1:
        i18 = 0;

     label2:
        $r6 = <org.apache.jena.iri.impl.Parser: int[] fields>;

        $i19 = lengthof $r6;

        if i18 >= $i19 goto label6;

        $r2 = <org.apache.jena.iri.impl.Parser: int[] fields>;

        i7 = $r2[i18];

        $l8 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(i7);

        $l9 = $l8 & l17;

        $b10 = $l9 cmp 0L;

        if $b10 == 0 goto label5;

        i20 = 0;

     label3:
        if i20 >= 64 goto label5;

        $l11 = 1L << i20;

        $l12 = $l11 & l17;

        $l13 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(i7);

        $l14 = $l12 & $l13;

        $b15 = $l14 cmp 0L;

        if $b15 == 0 goto label4;

        $r4 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.ArrayList foundExceptions>;

        $r3 = new org.apache.jena.iri.impl.ViolationImpl;

        specialinvoke $r3.<org.apache.jena.iri.impl.ViolationImpl: void <init>(org.apache.jena.iri.IRI,int,int)>(r0, i7, i20);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label4:
        i20 = i20 + 1;

        goto label3;

     label5:
        i18 = i18 + 1;

        goto label2;

     label6:
        $l5 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: long foundExceptionMask>;

        $l6 = $l5 | l17;

        r0.<org.apache.jena.iri.impl.AbsIRIImpl: long foundExceptionMask> = $l6;

        return;
    }

    public boolean isAbsolute()
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $z0 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(2);

        return $z0;
    }

    abstract boolean has(int);

    public boolean isRelative()
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $z0 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean hasViolation(boolean)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long $l0;
        org.apache.jena.iri.impl.SchemeSpecificPart $r1;
        boolean z0, $z1;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart getSchemeSpec()>();

        $l0 = virtualinvoke $r1.<org.apache.jena.iri.impl.SchemeSpecificPart: long getMask(boolean)>(z0);

        $z1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean hasExceptionMask(long)>($l0);

        return $z1;
    }

    public java.util.Iterator violations(boolean)
    {
        java.util.Iterator $r2;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long $l0;
        org.apache.jena.iri.impl.SchemeSpecificPart $r1;
        boolean z0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart getSchemeSpec()>();

        $l0 = virtualinvoke $r1.<org.apache.jena.iri.impl.SchemeSpecificPart: long getMask(boolean)>(z0);

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator exceptionsMask(long)>($l0);

        return $r2;
    }

    public java.net.URL toURL() throws java.net.MalformedURLException
    {
        java.lang.String $r2;
        java.net.URL $r0;
        org.apache.jena.iri.impl.AbsIRIImpl r1;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r0 = new java.net.URL;

        $r2 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String toASCIIString()>();

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public java.lang.String toASCIIString() throws java.net.MalformedURLException
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long $l0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $l0 = <org.apache.jena.iri.impl.AbsIRIImpl: long ToAsciiMask>;

        $z0 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean hasExceptionMask(long)>($l0);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String createASCIIString()>();

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String toString()>();

        return $r1;
    }

    private java.lang.String createASCIIString() throws java.net.MalformedURLException
    {
        org.apache.jena.iri.impl.AbsIRIImpl r1;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        java.lang.StringBuffer $r0;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(2);

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getScheme()>();

        $l4 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(2);

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void toAscii(java.lang.StringBuffer,java.lang.String,long)>($r0, $r8, $l4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label1:
        $z1 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(4);

        if $z1 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");

        $z3 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(6);

        if $z3 == 0 goto label2;

        $r7 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawUserinfo()>();

        $l3 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(6);

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void toAscii(java.lang.StringBuffer,java.lang.String,long)>($r0, $r7, $l3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

     label2:
        $r5 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawHost()>();

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void regNameToAscii(java.lang.StringBuffer,java.lang.String)>($r0, $r5);

        $z4 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(10);

        if $z4 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r6 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(10);

        $l2 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(6);

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void toAscii(java.lang.StringBuffer,java.lang.String,long)>($r0, $r6, $l2);

     label3:
        $r9 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawPath()>();

        $l5 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(11);

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void toAscii(java.lang.StringBuffer,java.lang.String,long)>($r0, $r9, $l5);

        $z5 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(13);

        if $z5 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);

        $r4 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawQuery()>();

        $l1 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(13);

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void toAscii(java.lang.StringBuffer,java.lang.String,long)>($r0, $r4, $l1);

     label4:
        $z2 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(15);

        if $z2 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        $r3 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawFragment()>();

        $l0 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(15);

        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void toAscii(java.lang.StringBuffer,java.lang.String,long)>($r0, $r3, $l0);

     label5:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private void regNameToAscii(java.lang.StringBuffer, java.lang.String) throws java.net.MalformedURLException
    {
        java.lang.CharSequence $r3;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        long $l0, $l1, $l2;
        byte $b3;
        java.lang.StringBuffer r1;
        java.lang.String r2;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.String;

        $l0 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: long errors(int)>(7);

        $l1 = <org.apache.jena.iri.impl.AbsIRIImpl: long ToAsciiMask>;

        $l2 = $l0 & $l1;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        return;

     label1:
        $r3 = staticinvoke <org.apache.jena.iri.impl.AbsIRIImpl: java.lang.CharSequence domainToAscii(java.lang.String)>(r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r3);

        return;
    }

    static java.lang.CharSequence domainToAscii(java.lang.String) throws org.apache.jena.iri.MalformedIDNException
    {
        org.apache.jena.iri.MalformedIDNException $r3;
        java.lang.String r0, $r1;
        java.lang.Exception $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.apache.jena.iri.impl.IDNP: java.lang.String toASCII(java.lang.String,int)>(r0, 3);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.jena.iri.MalformedIDNException;

        specialinvoke $r3.<org.apache.jena.iri.MalformedIDNException: void <init>(java.lang.Exception)>($r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void toAscii(java.lang.StringBuffer, java.lang.String, long)
    {
        byte[] $r11;
        org.apache.jena.iri.impl.AbsIRIImpl r9;
        byte $b3, $b7, $b11, $b12;
        java.io.UnsupportedEncodingException $r7;
        long l0, $l1, $l2;
        short $s8, $s24;
        java.lang.StringBuffer r4;
        int $i4, $i6, $i9, $i14, i16, $i17, i18, $i19, $i20, $i22, $i23, $i25, $i26;
        java.lang.String r0, $r5, $r10;
        char $c5, $c10, $c13, $c15;
        java.lang.RuntimeException $r12;
        char[] $r1, $r2, $r3, $r6;

        r9 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r4 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $l1 = <org.apache.jena.iri.impl.AbsIRIImpl: long ToAsciiMask>;

        $l2 = l0 & $l1;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label01;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        return;

     label01:
        i16 = 0;

     label02:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i16 >= $i4 goto label11;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i16);

        $i19 = (int) $c5;

        if $i19 > 127 goto label03;

        $r5 = "<>\" {}|\\^`";

        $i20 = (int) $c5;

        $i14 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>($i20);

        $i22 = (int) -1;

        if $i14 != $i22 goto label03;

        $i23 = (int) $c5;

        if $i23 >= 32 goto label09;

     label03:
        $i17 = i16 + 1;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i16, $i17);

        $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Impossible - utf-8 unsupported");

        throw $r12;

     label06:
        i18 = 0;

     label07:
        $i6 = lengthof $r11;

        if i18 >= $i6 goto label08;

        $r1 = newarray (char)[3];

        $r1[0] = 37;

        $r2 = <org.apache.jena.iri.impl.AbsIRIImpl: char[] hex>;

        $b7 = $r11[i18];

        $s24 = (short) $b7;

        $s8 = $s24 & 240;

        $i25 = (int) $s8;

        $i9 = $i25 >> 4;

        $c10 = $r2[$i9];

        $r1[1] = $c10;

        $r3 = <org.apache.jena.iri.impl.AbsIRIImpl: char[] hex>;

        $b11 = $r11[i18];

        $b12 = $b11 & 15;

        $i26 = (int) $b12;

        $c13 = $r3[$i26];

        $r1[2] = $c13;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r1);

        i18 = i18 + 1;

        goto label07;

     label08:
        goto label10;

     label09:
        $r6 = newarray (char)[1];

        $c15 = (char) $c5;

        $r6[0] = $c15;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

     label10:
        i16 = i16 + 1;

        goto label02;

     label11:
        return;

        catch java.io.UnsupportedEncodingException from label03 to label04 with label05;
    }

    private boolean relativizePaths(java.lang.String, java.lang.String[], int, java.lang.String)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r8;
        org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize $r3, $r5, $r7;
        java.lang.String[] r1;
        int i0;
        java.lang.String r0, r2, $r4, $r6;
        boolean $z0, $z1, $z2;

        r8 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = <org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize child>;

        $z0 = virtualinvoke $r3.<org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize: boolean check(java.lang.String,java.lang.String[],int,java.lang.String)>(r0, r1, i0, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r5 = <org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize parent>;

        $r4 = r1[0];

        $z1 = virtualinvoke $r5.<org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize: boolean check(java.lang.String,java.lang.String[],int,java.lang.String)>($r4, r1, i0, r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r7 = <org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize grandparent>;

        $r6 = r1[0];

        $z2 = virtualinvoke $r7.<org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize: boolean check(java.lang.String,java.lang.String[],int,java.lang.String)>($r6, r1, i0, r2);

        return $z2;
    }

    public org.apache.jena.iri.IRI relativize(java.lang.String, int)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl $r2;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        org.apache.jena.iri.impl.IRIImpl $r1;
        int i0;
        java.lang.String r3;
        org.apache.jena.iri.IRI $r4;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new org.apache.jena.iri.impl.IRIImpl;

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.IRIFactoryImpl getFactory()>();

        specialinvoke $r1.<org.apache.jena.iri.impl.IRIImpl: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl,java.lang.String)>($r2, r3);

        $r4 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.IRI relativize(org.apache.jena.iri.IRI,int)>($r1, i0);

        return $r4;
    }

    public org.apache.jena.iri.IRI relativize(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.iri.IRI $r2;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.IRI relativize(java.lang.String,int)>(r1, 61);

        return $r2;
    }

    public org.apache.jena.iri.IRI relativize(org.apache.jena.iri.IRI)
    {
        org.apache.jena.iri.IRI r1, $r2;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r1 := @parameter0: org.apache.jena.iri.IRI;

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.IRI relativize(org.apache.jena.iri.IRI,int)>(r1, 61);

        return $r2;
    }

    public org.apache.jena.iri.IRI relativize(org.apache.jena.iri.IRI, int)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl $r3;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        int i0;
        java.lang.String $r2;
        org.apache.jena.iri.IRI r1, $r4;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r1 := @parameter0: org.apache.jena.iri.IRI;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String relativize(org.apache.jena.iri.IRI,java.lang.String,int)>(r1, null, i0);

        if $r2 != null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.IRIFactoryImpl getFactory()>();

        $r4 = virtualinvoke $r3.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.IRI create(java.lang.String)>($r2);

     label2:
        return $r4;
    }

    private java.lang.String relativize(org.apache.jena.iri.IRI, java.lang.String, int)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0, $r2, $r29;
        org.apache.jena.iri.IRI r1;
        java.lang.StringBuilder $r6, $r8, $r14, $r15, $r18, $r22, $r23, $r24, $r26, $r28, $r31, $r32, $r33, $r37, $r38, $r43, $r44, $r47, $r49, $r50, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72;
        java.lang.String $r3, $r4, $r7, $r9, $r10, $r11, $r13, r16, $r19, $r21, $r25, $r30, $r34, $r36, $r39, $r42, $r45, $r48, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, r62, $r63, $r64;
        boolean $z0, $z1, $z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13, $z14, $z15;
        java.lang.String[] $r40;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r1 := @parameter0: org.apache.jena.iri.IRI;

        r16 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(4);

        if $z0 != 0 goto label01;

        return r16;

     label01:
        $r2 = (org.apache.jena.iri.impl.AbsIRIImpl) r1;

        $z1 = virtualinvoke $r2.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(4);

        if $z1 != 0 goto label02;

        return r16;

     label02:
        $r3 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getScheme()>();

        $r4 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getScheme()>();

        $z2 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(java.lang.String,java.lang.String)>($r3, $r4);

        if $z2 == 0 goto label03;

        $r56 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawHost()>();

        $r57 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawHost()>();

        $z9 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(java.lang.String,java.lang.String)>($r56, $r57);

        if $z9 == 0 goto label03;

        $r58 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawUserinfo()>();

        $r59 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawUserinfo()>();

        $z10 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(java.lang.String,java.lang.String)>($r58, $r59);

        if $z10 == 0 goto label03;

        $i8 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: int getPort()>();

        $i9 = virtualinvoke r1.<org.apache.jena.iri.IRI: int getPort()>();

        $z11 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(int,int)>($i8, $i9);

        if $z11 == 0 goto label03;

        $z15 = 1;

        $z14 = 1;

        goto label04;

     label03:
        $z15 = 0;

        $z14 = 0;

     label04:
        z3 = $z14;

        if $z15 == 0 goto label05;

        $r52 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawPath()>();

        $r53 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawPath()>();

        $z7 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(java.lang.String,java.lang.String)>($r52, $r53);

        if $z7 == 0 goto label05;

        $r54 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawQuery()>();

        $r55 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawQuery()>();

        $z8 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(java.lang.String,java.lang.String)>($r54, $r55);

        if $z8 == 0 goto label05;

        $z13 = 1;

        goto label06;

     label05:
        $z13 = 0;

     label06:
        z4 = $z13;

        $r60 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawFragment()>();

        if $r60 != null goto label07;

        $r61 = "";

        goto label08;

     label07:
        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r7 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawFragment()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r61 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        r62 = $r61;

        if z4 == 0 goto label09;

        $i7 = i0 & 1;

        if $i7 == 0 goto label09;

        return $r61;

     label09:
        $r9 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawPath()>();

        $r10 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawPath()>();

        $r11 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawQuery()>();

        if $r11 == null goto label10;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r48 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawQuery()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        r62 = $r51;

        $z6 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean equal(java.lang.String,java.lang.String)>($r9, $r10);

        if $z6 == 0 goto label10;

        $i6 = i0 & 8;

        if $i6 == 0 goto label10;

        return $r51;

     label10:
        if z3 == 0 goto label12;

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i3 <= 0 goto label13;

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i4 <= 0 goto label11;

        $r40 = newarray (java.lang.String)[1];

        $r40[0] = null;

        $z5 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean relativizePaths(java.lang.String,java.lang.String[],int,java.lang.String)>($r9, $r40, i0, $r10);

        if $z5 == 0 goto label11;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r42 = $r40[0];

        $r43 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r45;

     label11:
        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawPath()>();

        $r37 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r62 = $r39;

        if z3 == 0 goto label13;

        $i5 = i0 & 4;

        if $i5 == 0 goto label13;

        return $r39;

     label12:
        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawPath()>();

        $r14 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        r62 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        if $z2 == 0 goto label18;

        $i1 = i0 & 2;

        if $i1 == 0 goto label18;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");

        $r19 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawUserinfo()>();

        if $r19 != null goto label14;

        $r63 = "";

        goto label15;

     label14:
        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawUserinfo()>();

        $r22 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r63 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r25 = virtualinvoke r1.<org.apache.jena.iri.IRI: java.lang.String getRawHost()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $i2 = virtualinvoke r1.<org.apache.jena.iri.IRI: int getPort()>();

        $i11 = (int) -1;

        if $i2 != $i11 goto label16;

        $r64 = "";

        goto label17;

     label16:
        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r29 = (org.apache.jena.iri.impl.AbsIRIImpl) r1;

        $r30 = virtualinvoke $r29.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(10);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r64 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r34;

     label18:
        return r16;
    }

    private static java.lang.String maybeDotSlash(java.lang.String)
    {
        int $i0, $i1, $i3, $i5;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        if $i1 <= $i0 goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("./");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        return r0;
    }

    private static java.lang.String getLastSlash(java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 2;

        $i2 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int,int)>(47, $i1);

        $i3 = $i2 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        return $r1;
    }

    private boolean equal(java.lang.String, java.lang.String)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r2;
        java.lang.String r0, r1;
        boolean $z0;

        r2 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    private boolean equal(int, int)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator allViolations()
    {
        java.util.Iterator $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator exceptionsMask(long)>(-1L);

        return $r1;
    }

    public java.lang.String getRawUserinfo()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(6);

        return $r1;
    }

    public int getPort()
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        int $i0, $i2, $i4, $i6;
        java.lang.String $r1;
        java.lang.Exception $r2;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(10);

        if $r1 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if $i0 >= 0 goto label3;

     label2:
        $i4 = (int) -2;

        return $i4;

     label3:
        return $i0;

     label4:
        $r2 := @caughtexception;

        $i6 = (int) -2;

        return $i6;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public java.lang.String getRawQuery()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(13);

        return $r1;
    }

    public java.lang.String getRawFragment()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(15);

        return $r1;
    }

    public java.lang.String getRawHost()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(7);

        return $r1;
    }

    public java.lang.String getScheme()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(2);

        return $r1;
    }

    abstract java.lang.String get(int);

    public java.lang.String getRawPath()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String path>;

        return $r1;
    }

    public boolean isRootless()
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        char $c0;
        int $i1;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $z0 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: boolean has(int)>(4);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String path>;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r2 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String path>;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 47 goto label4;

        return 0;

     label4:
        return 1;
    }

    abstract java.lang.String pathRemoveDots();

    abstract boolean dotsOK();

    public java.lang.String getRawAuthority()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String get(int)>(4);

        return $r1;
    }

    public org.apache.jena.iri.IRI create(org.apache.jena.iri.IRI)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl $r2;
        org.apache.jena.iri.impl.ResolvedRelativeIRI $r0;
        org.apache.jena.iri.impl.AbsIRIImpl r1, $r5;
        org.apache.jena.iri.IRI r3, $r4;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r3 := @parameter0: org.apache.jena.iri.IRI;

        $r0 = new org.apache.jena.iri.impl.ResolvedRelativeIRI;

        $r2 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.IRIFactoryImpl getFactory()>();

        $r4 = virtualinvoke $r2.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.IRI create(org.apache.jena.iri.IRI)>(r3);

        $r5 = (org.apache.jena.iri.impl.AbsIRIImpl) $r4;

        specialinvoke $r0.<org.apache.jena.iri.impl.ResolvedRelativeIRI: void <init>(org.apache.jena.iri.impl.AbsIRIImpl,org.apache.jena.iri.impl.AbsIRIImpl)>(r1, $r5);

        return $r0;
    }

    public org.apache.jena.iri.IRI create(java.lang.String)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl $r2;
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        org.apache.jena.iri.impl.IRIImpl $r1;
        java.lang.String r3;
        org.apache.jena.iri.IRI $r4;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r3 := @parameter0: java.lang.String;

        $r1 = new org.apache.jena.iri.impl.IRIImpl;

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.IRIFactoryImpl getFactory()>();

        specialinvoke $r1.<org.apache.jena.iri.impl.IRIImpl: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl,java.lang.String)>($r2, r3);

        $r4 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.IRI create(org.apache.jena.iri.IRI)>($r1);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r1;
        java.lang.Object r0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.apache.jena.iri.IRI;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String toString()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String getAuthority()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getCooked(int)>(4);

        return $r1;
    }

    public java.lang.String getFragment()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getCooked(int)>(15);

        return $r1;
    }

    public java.lang.String getHost()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getCooked(int)>(7);

        return $r1;
    }

    public java.lang.String getPath()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getCooked(int)>(11);

        return $r1;
    }

    public java.lang.String getQuery()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getCooked(int)>(13);

        return $r1;
    }

    public java.lang.String getUserinfo()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.AbsIRIImpl r0;

        r0 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getCooked(int)>(6);

        return $r1;
    }

    private java.lang.String getCooked(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        org.apache.jena.iri.impl.AbsIRIImpl r1;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not yet implemented");

        throw $r0;
    }

    public org.apache.jena.iri.IRI normalize(boolean)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.jena.iri.impl.AbsIRIImpl r1;
        boolean z0;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not yet implemented");

        throw $r0;
    }

    public java.lang.String toDisplayString()
    {
        org.apache.jena.iri.impl.AbsIRIImpl r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r2 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u202a");

        $r3 = virtualinvoke r2.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u202c");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getASCIIHost() throws java.net.MalformedURLException
    {
        java.lang.StringBuffer $r0;
        org.apache.jena.iri.impl.AbsIRIImpl r1;
        java.lang.String $r2, $r3;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String getRawHost()>();

        if $r2 != null goto label1;

        return null;

     label1:
        specialinvoke r1.<org.apache.jena.iri.impl.AbsIRIImpl: void regNameToAscii(java.lang.StringBuffer,java.lang.String)>($r0, $r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public boolean ladderEquals(org.apache.jena.iri.IRI, int)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.jena.iri.impl.AbsIRIImpl r1;
        int i0;
        org.apache.jena.iri.IRI r2;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r2 := @parameter0: org.apache.jena.iri.IRI;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not yet implemented");

        throw $r0;
    }

    public int ladderEquals(org.apache.jena.iri.IRI)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.jena.iri.IRI r2;
        org.apache.jena.iri.impl.AbsIRIImpl r1;

        r1 := @this: org.apache.jena.iri.impl.AbsIRIImpl;

        r2 := @parameter0: org.apache.jena.iri.IRI;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not yet implemented");

        throw $r0;
    }

    static java.util.ArrayList access$000(org.apache.jena.iri.impl.AbsIRIImpl)
    {
        org.apache.jena.iri.impl.AbsIRIImpl r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.apache.jena.iri.impl.AbsIRIImpl;

        $r1 = r0.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.ArrayList foundExceptions>;

        return $r1;
    }

    static java.lang.String access$100(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.iri.impl.AbsIRIImpl: java.lang.String maybeDotSlash(java.lang.String)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.jena.iri.impl.AbsIRIImpl$2 $r5;
        java.util.Iterator $r3;
        org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize $r6, $r7;
        java.util.ArrayList $r2;
        int[] $r4;
        int $i0;
        char[] $r1;
        java.lang.String $r0;

        <org.apache.jena.iri.impl.AbsIRIImpl: int NOT_RELATIVE_EXCEPTIONS> = 3;

        <org.apache.jena.iri.impl.AbsIRIImpl: int ALL_EXCEPTIONS> = 2;

        <org.apache.jena.iri.impl.AbsIRIImpl: int NO_EXCEPTIONS> = 1;

        <org.apache.jena.iri.impl.AbsIRIImpl: int defaultRelative> = 61;

        $r0 = "0123456789ABCDEF";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.apache.jena.iri.impl.AbsIRIImpl: char[] hex> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        <org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator nullIterator> = $r3;

        $r4 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i0 = $r4[11];

        <org.apache.jena.iri.impl.AbsIRIImpl: int PATH_INDEX> = $i0;

        <org.apache.jena.iri.impl.AbsIRIImpl: long ToAsciiMask> = -1L;

        $r5 = new org.apache.jena.iri.impl.AbsIRIImpl$2;

        specialinvoke $r5.<org.apache.jena.iri.impl.AbsIRIImpl$2: void <init>(int,int,java.lang.String)>(8, 56, ".");

        <org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize child> = $r5;

        $r6 = new org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize;

        specialinvoke $r6.<org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize: void <init>(int,int,java.lang.String)>(16, 48, "..");

        <org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize parent> = $r6;

        $r7 = new org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize;

        specialinvoke $r7.<org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize: void <init>(int,int,java.lang.String)>(32, 32, "../..");

        <org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.AbsIRIImpl$PathRelativize grandparent> = $r7;

        return;
    }
}
