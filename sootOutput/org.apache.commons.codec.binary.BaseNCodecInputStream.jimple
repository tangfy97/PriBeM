public class org.apache.commons.codec.binary.BaseNCodecInputStream extends java.io.FilterInputStream
{
    private final boolean doEncode;
    private final org.apache.commons.codec.binary.BaseNCodec baseNCodec;
    private final byte[] singleByte;

    protected void <init>(java.io.InputStream, org.apache.commons.codec.binary.BaseNCodec, boolean)
    {
        org.apache.commons.codec.binary.BaseNCodec r3;
        byte[] $r2;
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.commons.codec.binary.BaseNCodec;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        $r2 = newarray (byte)[1];

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte> = $r2;

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode> = z0;

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec> = r3;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4, $r5;
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        byte $b0, $b1;
        int i2, $i3, $i4, $i5, $i7;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        i2 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($r1, 0, 1);

     label1:
        if i2 != 0 goto label2;

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        i2 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($r5, 0, 1);

        goto label1;

     label2:
        if i2 <= 0 goto label5;

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        $b0 = $r2[0];

        $i4 = (int) $b0;

        if $i4 >= 0 goto label3;

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        $b1 = $r4[0];

        $i5 = (int) $b1;

        $i3 = 256 + $i5;

        goto label4;

     label3:
        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        $i3 = $r3[0];

     label4:
        return $i3;

     label5:
        $i7 = (int) -1;

        return $i7;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0, $r8;
        java.lang.IndexOutOfBoundsException $r1, $r2;
        java.lang.NullPointerException $r9;
        short $s7;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        boolean $z0, $z1, $z2;
        org.apache.commons.codec.binary.BaseNCodec $r4, $r6, $r7, $r10;
        org.apache.commons.codec.binary.BaseNCodecInputStream r3;
        java.io.InputStream $r5;

        r3 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label01;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label01:
        if i0 < 0 goto label02;

        if i1 >= 0 goto label03;

     label02:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label03:
        $i2 = lengthof r0;

        if i0 > $i2 goto label04;

        $i4 = i0 + i1;

        $i3 = lengthof r0;

        if $i4 <= $i3 goto label05;

     label04:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label05:
        if i1 != 0 goto label06;

        return 0;

     label06:
        i6 = 0;

     label07:
        if i6 != 0 goto label12;

        $r4 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $z0 = virtualinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData()>();

        if $z0 != 0 goto label11;

        $z1 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>;

        if $z1 == 0 goto label08;

        $s7 = 4096;

        goto label09;

     label08:
        $s7 = 8192;

     label09:
        $r8 = newarray (byte)[$s7];

        $r5 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: java.io.InputStream in>;

        $i5 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>($r8);

        $z2 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>;

        if $z2 == 0 goto label10;

        $r7 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        virtualinvoke $r7.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int)>($r8, 0, $i5);

        goto label11;

     label10:
        $r6 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        virtualinvoke $r6.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int)>($r8, 0, $i5);

     label11:
        $r10 = r3.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        i6 = virtualinvoke $r10.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int)>(r0, i0, i1);

        goto label07;

     label12:
        return i6;
    }

    public boolean markSupported()
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        return 0;
    }
}
