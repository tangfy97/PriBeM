public class org.eclipse.jdt.internal.compiler.ast.TypeParameter extends org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration
{
    public org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding binding;
    public org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds;

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: void <init>()>();

        return;
    }

    public int getKind()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        return 6;
    }

    public void checkBounds(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1, $r6, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r2, $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r1 == null goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void checkBounds(org.eclipse.jdt.internal.compiler.lookup.Scope)>(r5);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        if $r2 == null goto label4;

        i1 = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        i0 = lengthof $r3;

        goto label3;

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        $r6 = $r4[i1];

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void checkBounds(org.eclipse.jdt.internal.compiler.lookup.Scope)>(r5);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

     label4:
        return;
    }

    private void internalResolve(org.eclipse.jdt.internal.compiler.lookup.Scope, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r2, $r4;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7;
        org.eclipse.jdt.internal.compiler.lookup.Binding $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;
        int $i0;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding $r1, $r6;
        boolean $z0, z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        z1 := @parameter1: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding binding>;

        if $r1 == null goto label2;

        $r4 = r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.Scope parent>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: char[] name>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.Binding getBinding(char[],int,org.eclipse.jdt.internal.compiler.lookup.InvocationSite,boolean)>($r3, 4, r0, 0);

        if $r5 == null goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding binding>;

        if $r6 == $r5 goto label2;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.Binding: boolean isValidBinding()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.Binding: int kind()>();

        if $i0 != 4100 goto label1;

        if z1 != 0 goto label2;

     label1:
        $r7 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void typeHiding(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.Binding)>(r0, $r5);

     label2:
        return;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $z0 = $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: boolean isStatic>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: void internalResolve(org.eclipse.jdt.internal.compiler.lookup.Scope,boolean)>(r1, $z0);

        return;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r1;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding enclosingSourceType()>();

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: boolean isStatic()>();

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: void internalResolve(org.eclipse.jdt.internal.compiler.lookup.Scope,boolean)>(r1, $z0);

        return;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r1;
        java.lang.StringBuffer r0;
        int $i0, i1, i2;
        char[] $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r4, $r5, $r6;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: char[] name>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r3 == null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r0);

     label1:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        if $r4 == null goto label4;

        i2 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" & ");

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        $r7 = $r6[i2];

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r0);

        i2 = i2 + 1;

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        $i0 = lengthof $r5;

        if i2 < $i0 goto label2;

     label4:
        return r0;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        int i0, i1;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r4, $r5, $r6;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label4;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r3 == null goto label1;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        if $r4 == null goto label4;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        i0 = lengthof $r5;

        i1 = 0;

        goto label3;

     label2:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        $r7 = $r6[i1];

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;
        int i0, i1;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r4, $r5, $r6;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        if $z0 == 0 goto label4;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r3 == null goto label1;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r0, r2);

     label1:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        if $r4 == null goto label4;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        i0 = lengthof $r5;

        i1 = 0;

        goto label3;

     label2:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds>;

        $r7 = $r6[i1];

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r0, r2);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
