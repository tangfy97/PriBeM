final class kodkod.engine.fol2sat.SymmetryBreaker extends java.lang.Object
{
    private final kodkod.instance.Bounds bounds;
    private final java.util.Set symmetries;
    private final int usize;

    void <init>(kodkod.instance.Bounds, kodkod.engine.config.Reporter)
    {
        kodkod.instance.Bounds r1;
        kodkod.engine.fol2sat.SymmetryBreaker r0;
        kodkod.engine.config.Reporter r3;
        int $i0;
        java.util.Set $r4, $r5;
        kodkod.instance.Universe $r2;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        r1 := @parameter0: kodkod.instance.Bounds;

        r3 := @parameter1: kodkod.engine.config.Reporter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds> = r1;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $i0 = virtualinvoke $r2.<kodkod.instance.Universe: int size()>();

        r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize> = $i0;

        interfaceinvoke r3.<kodkod.engine.config.Reporter: void detectingSymmetries(kodkod.instance.Bounds)>(r1);

        $r4 = staticinvoke <kodkod.engine.fol2sat.SymmetryDetector: java.util.Set partition(kodkod.instance.Bounds)>(r1);

        r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries> = $r4;

        $r5 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries>;

        interfaceinvoke r3.<kodkod.engine.config.Reporter: void detectedSymmetries(java.util.Set)>($r5);

        return;
    }

    java.util.Map breakMatrixSymmetries(java.util.Map, boolean)
    {
        java.lang.Object[] $r9, $r15;
        kodkod.ast.RelationPredicate$TotalOrdering[] $r8, $r10, r19;
        kodkod.ast.RelationPredicate$Acyclic[] $r14, $r16, r21;
        java.util.Map r0;
        int $i0, $i1, i2, i3, i4, i5;
        kodkod.ast.RelationPredicate$Name $r1, $r4;
        boolean z0;
        java.util.IdentityHashMap $r7;
        kodkod.ast.Formula $r13, $r18;
        java.util.Set r3, r6;
        kodkod.ast.RelationPredicate[] $r11, $r17;
        kodkod.ast.RelationPredicate$Acyclic r22;
        kodkod.engine.fol2sat.SymmetryBreaker r12;
        kodkod.ast.RelationPredicate$TotalOrdering r20;
        java.lang.Object $r2, $r5;

        r12 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        r0 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        $r1 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.util.Set) $r2;

        $r4 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name ACYCLIC>;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.util.Set) $r5;

        $r7 = new java.util.IdentityHashMap;

        specialinvoke $r7.<java.util.IdentityHashMap: void <init>()>();

        $i0 = interfaceinvoke r3.<java.util.Set: int size()>();

        $r8 = newarray (kodkod.ast.RelationPredicate$TotalOrdering)[$i0];

        $r9 = interfaceinvoke r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (kodkod.ast.RelationPredicate$TotalOrdering[]) $r9;

        $r11 = staticinvoke <kodkod.engine.fol2sat.SymmetryBreaker: kodkod.ast.RelationPredicate[] sort(kodkod.ast.RelationPredicate[])>($r10);

        r19 = (kodkod.ast.RelationPredicate$TotalOrdering[]) $r11;

        i2 = 0;

        i3 = lengthof r19;

        goto label3;

     label1:
        r20 = r19[i2];

        $r13 = specialinvoke r12.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.ast.Formula breakTotalOrder(kodkod.ast.RelationPredicate$TotalOrdering,boolean)>(r20, z0);

        if $r13 == null goto label2;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, $r13);

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i3 goto label1;

        $i1 = interfaceinvoke r6.<java.util.Set: int size()>();

        $r14 = newarray (kodkod.ast.RelationPredicate$Acyclic)[$i1];

        $r15 = interfaceinvoke r6.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (kodkod.ast.RelationPredicate$Acyclic[]) $r15;

        $r17 = staticinvoke <kodkod.engine.fol2sat.SymmetryBreaker: kodkod.ast.RelationPredicate[] sort(kodkod.ast.RelationPredicate[])>($r16);

        r21 = (kodkod.ast.RelationPredicate$Acyclic[]) $r17;

        i4 = 0;

        i5 = lengthof r21;

        goto label6;

     label4:
        r22 = r21[i4];

        $r18 = specialinvoke r12.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.ast.Formula breakAcyclic(kodkod.ast.RelationPredicate$Acyclic,boolean)>(r22, z0);

        if $r18 == null goto label5;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, $r18);

     label5:
        i4 = i4 + 1;

     label6:
        if i4 < i5 goto label4;

        return $r7;
    }

    final kodkod.engine.bool.BooleanValue generateSBP(kodkod.engine.fol2sat.LeafInterpreter, int)
    {
        kodkod.engine.bool.BooleanConstant $r2;
        kodkod.engine.bool.BooleanValue $r16, $r25, $r27, $r29, $r30;
        kodkod.engine.fol2sat.LeafInterpreter r4;
        kodkod.util.ints.IntIterator $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        kodkod.engine.bool.BooleanFactory $r5;
        java.util.Set $r1, $r10;
        kodkod.engine.fol2sat.SymmetryBreaker$RelationParts r18;
        java.util.List $r3;
        kodkod.engine.fol2sat.SymmetryBreaker r0;
        kodkod.ast.Relation r19;
        kodkod.engine.bool.Operator$Nary $r6;
        kodkod.engine.bool.BooleanAccumulator $r7;
        java.util.ArrayList $r8, $r9;
        kodkod.util.ints.IndexedEntry r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.util.Iterator $r11, $r15, $r22;
        kodkod.util.ints.IntSet r13, $r20;
        kodkod.engine.bool.BooleanMatrix $r21;
        java.lang.Object $r12, $r17, $r23, $r26, $r28;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        r4 := @parameter0: kodkod.engine.fol2sat.LeafInterpreter;

        i0 := @parameter1: int;

        $r1 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        if i0 != 0 goto label02;

     label01:
        $r2 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        return $r2;

     label02:
        $r3 = specialinvoke r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.List relParts()>();

        $r5 = virtualinvoke r4.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r6 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r7 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r6);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i0);

        $r10 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label13;

     label03:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (kodkod.util.ints.IntSet) $r12;

        $r14 = interfaceinvoke r13.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        i8 = interfaceinvoke $r14.<kodkod.util.ints.IntIterator: int next()>();

        goto label12;

     label04:
        $i1 = interfaceinvoke $r14.<kodkod.util.ints.IntIterator: int next()>();

        $r15 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label10;

     label05:
        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r18 = (kodkod.engine.fol2sat.SymmetryBreaker$RelationParts) $r17;

        r19 = r18.<kodkod.engine.fol2sat.SymmetryBreaker$RelationParts: kodkod.ast.Relation relation>;

        $r20 = r18.<kodkod.engine.fol2sat.SymmetryBreaker$RelationParts: kodkod.util.ints.IntSet representatives>;

        $i3 = interfaceinvoke r13.<kodkod.util.ints.IntSet: int min()>();

        $z2 = interfaceinvoke $r20.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z2 != 0 goto label06;

        goto label10;

     label06:
        $r21 = virtualinvoke r4.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.bool.BooleanMatrix interpret(kodkod.ast.Relation)>(r19);

        $r22 = virtualinvoke $r21.<kodkod.engine.bool.BooleanMatrix: java.util.Iterator iterator()>();

        goto label09;

     label07:
        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (kodkod.util.ints.IndexedEntry) $r23;

        $i4 = virtualinvoke r19.<kodkod.ast.Relation: int arity()>();

        $i5 = interfaceinvoke r24.<kodkod.util.ints.IndexedEntry: int index()>();

        $i6 = specialinvoke r0.<kodkod.engine.fol2sat.SymmetryBreaker: int permutation(int,int,int,int)>($i4, $i5, i8, $i1);

        $r25 = virtualinvoke $r21.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue get(int)>($i6);

        $i7 = interfaceinvoke r24.<kodkod.util.ints.IndexedEntry: int index()>();

        if $i6 == $i7 goto label09;

        $r26 = interfaceinvoke r24.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r27 = (kodkod.engine.bool.BooleanValue) $r26;

        $z3 = staticinvoke <kodkod.engine.fol2sat.SymmetryBreaker: boolean atSameIndex(java.util.List,kodkod.engine.bool.BooleanValue,java.util.List,kodkod.engine.bool.BooleanValue)>($r8, $r25, $r9, $r27);

        if $z3 == 0 goto label08;

        goto label09;

     label08:
        $r28 = interfaceinvoke r24.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r29 = (kodkod.engine.bool.BooleanValue) $r28;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r29);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r25);

     label09:
        $z4 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label07;

     label10:
        $z5 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i2 < i0 goto label05;

     label11:
        $r16 = staticinvoke <kodkod.engine.fol2sat.SymmetryBreaker: kodkod.engine.bool.BooleanValue leq(kodkod.engine.bool.BooleanFactory,java.util.List,java.util.List)>($r5, $r8, $r9);

        virtualinvoke $r7.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r16);

        interfaceinvoke $r8.<java.util.List: void clear()>();

        interfaceinvoke $r9.<java.util.List: void clear()>();

        i8 = $i1;

     label12:
        $z6 = interfaceinvoke $r14.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z6 != 0 goto label04;

     label13:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label03;

        $r30 = virtualinvoke $r5.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r7);

        return $r30;
    }

    private java.util.List relParts()
    {
        kodkod.util.ints.IntIterator $r14;
        kodkod.instance.Bounds $r2, $r4, $r8, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r3, $r5, $r15;
        kodkod.engine.fol2sat.SymmetryBreaker$RelationParts $r23;
        kodkod.engine.fol2sat.SymmetryBreaker r1;
        kodkod.ast.Relation r21;
        java.util.ArrayList $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        kodkod.instance.TupleSet $r9, $r12;
        java.util.Iterator $r6, $r16;
        kodkod.util.ints.IntSet $r10, $r13, r18;
        kodkod.engine.fol2sat.SymmetryBreaker$1 $r24;
        java.lang.Object $r7, $r17;

        r1 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        $r22 = new java.util.ArrayList;

        $r2 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r3 = virtualinvoke $r2.<kodkod.instance.Bounds: java.util.Set relations()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        specialinvoke $r22.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r5 = virtualinvoke $r4.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label01:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r21 = (kodkod.ast.Relation) $r7;

        $r8 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r9 = virtualinvoke $r8.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r21);

        $r10 = virtualinvoke $r9.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $i1 = interfaceinvoke $r10.<kodkod.util.ints.IntSet: int size()>();

        $r11 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r12 = virtualinvoke $r11.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r21);

        $i2 = virtualinvoke $r12.<kodkod.instance.TupleSet: int size()>();

        if $i1 != $i2 goto label02;

        goto label10;

     label02:
        $i3 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $r13 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i3);

        $r14 = interfaceinvoke $r10.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label09;

     label03:
        i8 = interfaceinvoke $r14.<kodkod.util.ints.IntIterator: int next()>();

        i9 = virtualinvoke r21.<kodkod.ast.Relation: int arity()>();

        goto label08;

     label04:
        $r15 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries>;

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

        goto label06;

     label05:
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (kodkod.util.ints.IntSet) $r17;

        $i4 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i5 = i8 % $i4;

        $z2 = interfaceinvoke r18.<kodkod.util.ints.IntSet: boolean contains(int)>($i5);

        if $z2 == 0 goto label06;

        $i6 = interfaceinvoke r18.<kodkod.util.ints.IntSet: int min()>();

        interfaceinvoke $r13.<kodkod.util.ints.IntSet: boolean add(int)>($i6);

        goto label07;

     label06:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label05;

     label07:
        $i11 = (int) -1;

        i9 = i9 + $i11;

        $i7 = r1.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        i8 = i8 / $i7;

     label08:
        if i9 > 0 goto label04;

     label09:
        $z0 = interfaceinvoke $r14.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

        $r23 = new kodkod.engine.fol2sat.SymmetryBreaker$RelationParts;

        specialinvoke $r23.<kodkod.engine.fol2sat.SymmetryBreaker$RelationParts: void <init>(kodkod.ast.Relation,kodkod.util.ints.IntSet)>(r21, $r13);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r23);

     label10:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label01;

        $r24 = new kodkod.engine.fol2sat.SymmetryBreaker$1;

        specialinvoke $r24.<kodkod.engine.fol2sat.SymmetryBreaker$1: void <init>(kodkod.engine.fol2sat.SymmetryBreaker)>(r1);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r22, $r24);

        return $r22;
    }

    private static final kodkod.engine.bool.BooleanValue leq(kodkod.engine.bool.BooleanFactory, java.util.List, java.util.List)
    {
        kodkod.engine.bool.Operator$Nary $r0;
        kodkod.engine.bool.BooleanValue $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, r17;
        kodkod.engine.bool.BooleanAccumulator $r1;
        int $i0, i1;
        kodkod.engine.bool.BooleanFactory r3;
        java.util.List r2, r5;
        java.lang.Object $r4, $r7, $r11, $r13;

        r3 := @parameter0: kodkod.engine.bool.BooleanFactory;

        r2 := @parameter1: java.util.List;

        r5 := @parameter2: java.util.List;

        $r0 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r1 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r0);

        r17 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        i1 = 0;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (kodkod.engine.bool.BooleanValue) $r4;

        $r7 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (kodkod.engine.bool.BooleanValue) $r7;

        $r9 = virtualinvoke r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r6, $r8);

        $r10 = virtualinvoke r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r17, $r9);

        virtualinvoke $r1.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r10);

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r12 = (kodkod.engine.bool.BooleanValue) $r11;

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r14 = (kodkod.engine.bool.BooleanValue) $r13;

        $r15 = virtualinvoke r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r12, $r14);

        r17 = virtualinvoke r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r17, $r15);

        i1 = i1 + 1;

     label2:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 < $i0 goto label1;

        $r16 = virtualinvoke r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r1);

        return $r16;
    }

    private final int permutation(int, int, int, int)
    {
        kodkod.engine.fol2sat.SymmetryBreaker r0;
        int $i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11, $i12, $i14;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i9 = 0;

        i10 = 1;

        goto label5;

     label1:
        $i0 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        i1 = i8 % $i0;

        if i1 != i2 goto label2;

        $i6 = i3 * i10;

        i9 = i9 + $i6;

        goto label4;

     label2:
        if i1 != i3 goto label3;

        $i5 = i2 * i10;

        i9 = i9 + $i5;

        goto label4;

     label3:
        $i4 = i1 * i10;

        i9 = i9 + $i4;

     label4:
        $i14 = (int) -1;

        i7 = i7 + $i14;

        $i11 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        i8 = i8 / $i11;

        $i12 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        i10 = i10 * $i12;

     label5:
        if i7 > 0 goto label1;

        return i9;
    }

    private static boolean atSameIndex(java.util.List, kodkod.engine.bool.BooleanValue, java.util.List, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r2, $r3, r6, $r7;
        java.util.List r0, r4;
        int i0, $i1;
        java.lang.Object $r1, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        r4 := @parameter2: java.util.List;

        r6 := @parameter3: kodkod.engine.bool.BooleanValue;

        i0 = 0;

        goto label3;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (kodkod.engine.bool.BooleanValue) $r1;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r7 = (kodkod.engine.bool.BooleanValue) $r5;

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        return 0;
    }

    private static final kodkod.ast.RelationPredicate[] sort(kodkod.ast.RelationPredicate[])
    {
        kodkod.ast.RelationPredicate[] r1;
        kodkod.engine.fol2sat.SymmetryBreaker$2 $r0;

        r1 := @parameter0: kodkod.ast.RelationPredicate[];

        $r0 = new kodkod.engine.fol2sat.SymmetryBreaker$2;

        specialinvoke $r0.<kodkod.engine.fol2sat.SymmetryBreaker$2: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r0);

        return r1;
    }

    private final kodkod.ast.Formula breakAcyclic(kodkod.ast.RelationPredicate$Acyclic, boolean)
    {
        kodkod.util.ints.IntIterator $r9;
        kodkod.instance.Bounds $r5, $r17, $r18, $r23, $r24;
        boolean $z0, $z1, z2, $z3;
        kodkod.engine.fol2sat.SymmetryBreaker r0;
        java.lang.StringBuilder $r11, $r14;
        kodkod.ast.Relation $r2, $r4, $r12, $r16;
        kodkod.util.ints.IntSet[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        java.lang.String $r13, $r15;
        kodkod.instance.Universe $r19, $r25;
        kodkod.instance.TupleFactory $r20, $r26;
        kodkod.instance.TupleSet $r6, $r21, $r27;
        kodkod.util.ints.IntSet $r7, $r8, $r10;
        kodkod.ast.Formula $r22, $r28;
        kodkod.ast.RelationPredicate$Acyclic r1;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        r1 := @parameter0: kodkod.ast.RelationPredicate$Acyclic;

        z2 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<kodkod.ast.RelationPredicate$Acyclic: kodkod.ast.Relation relation()>();

        $r3 = specialinvoke r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.util.ints.IntSet[] symmetricColumnPartitions(kodkod.ast.Relation)>($r2);

        if $r3 == null goto label5;

        $r4 = virtualinvoke r1.<kodkod.ast.RelationPredicate$Acyclic: kodkod.ast.Relation relation()>();

        $r5 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r6 = virtualinvoke $r5.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r4);

        $r7 = virtualinvoke $r6.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $i1 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i0 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i2 = $i1 * $i0;

        $r8 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i2);

        $r9 = interfaceinvoke $r7.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label3;

     label1:
        $i3 = interfaceinvoke $r9.<kodkod.util.ints.IntIterator: int next()>();

        $i4 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i9 = $i3 / $i4;

        $i5 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i7 = $i3 % $i5;

        $i6 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i8 = $i7 * $i6;

        i10 = $i9 + $i8;

        if $i3 == i10 goto label3;

        $z0 = interfaceinvoke $r7.<kodkod.util.ints.IntSet: boolean contains(int)>(i10);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $z1 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: boolean contains(int)>(i10);

        if $z1 != 0 goto label3;

        interfaceinvoke $r8.<kodkod.util.ints.IntSet: boolean add(int)>($i3);

     label3:
        $z3 = interfaceinvoke $r9.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        $r10 = $r3[0];

        $i11 = interfaceinvoke $r10.<kodkod.util.ints.IntSet: int min()>();

        specialinvoke r0.<kodkod.engine.fol2sat.SymmetryBreaker: void removePartition(int)>($i11);

        if z2 == 0 goto label4;

        $r24 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r23 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r25 = virtualinvoke $r23.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r26 = virtualinvoke $r25.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r27 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(int,kodkod.util.ints.IntSet)>(2, $r8);

        virtualinvoke $r24.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r4, $r27);

        $r28 = <kodkod.ast.Formula: kodkod.ast.Formula TRUE>;

        return $r28;

     label4:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("SYM_BREAK_CONST_");

        $r12 = virtualinvoke r1.<kodkod.ast.RelationPredicate$Acyclic: kodkod.ast.Relation relation()>();

        $r13 = virtualinvoke $r12.<kodkod.ast.Relation: java.lang.String name()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>($r15);

        $r18 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r17 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r19 = virtualinvoke $r17.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r20 = virtualinvoke $r19.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r21 = virtualinvoke $r20.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(int,kodkod.util.ints.IntSet)>(2, $r8);

        virtualinvoke $r18.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r16, $r21);

        $r22 = virtualinvoke $r4.<kodkod.ast.Relation: kodkod.ast.Formula in(kodkod.ast.Expression)>($r16);

        return $r22;

     label5:
        return null;
    }

    private final kodkod.ast.Formula breakTotalOrder(kodkod.ast.RelationPredicate$TotalOrdering, boolean)
    {
        java.lang.StringBuilder $r27, $r29, $r32, $r34, $r37, $r39, $r42, $r44;
        java.lang.String $r28, $r30, $r33, $r35, $r38, $r40, $r43, $r45;
        kodkod.instance.Tuple $r48, $r52, $r68, $r72;
        kodkod.util.ints.IntSet $r8, $r12, $r15, $r16, $r20, $r23;
        kodkod.ast.Formula $r62, $r63, $r64, $r65, $r66, $r81;
        kodkod.util.ints.IntIterator $r17;
        kodkod.instance.Bounds $r6, $r10, $r13, $r18, $r21, $r24, $r47, $r51, $r55, $r56, $r59, $r67, $r71, $r75, $r76, $r79;
        kodkod.ast.Formula[] $r61;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        kodkod.engine.fol2sat.SymmetryBreaker r5;
        kodkod.ast.RelationPredicate$TotalOrdering r0;
        kodkod.ast.Relation $r1, $r2, $r3, $r4, $r31, $r36, $r41, $r46, $r57, $r77;
        kodkod.util.ints.IntSet[] $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        kodkod.instance.Universe $r25;
        kodkod.instance.TupleFactory $r26;
        kodkod.instance.TupleSet $r7, $r11, $r14, $r19, $r22, $r50, $r54, $r58, $r60, $r70, $r74, $r78, $r80;
        kodkod.instance.Tuple[] $r49, $r53, $r69, $r73;

        r5 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        r0 := @parameter0: kodkod.ast.RelationPredicate$TotalOrdering;

        z5 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        $r2 = virtualinvoke r0.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        $r3 = virtualinvoke r0.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        $r4 = virtualinvoke r0.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation relation()>();

        $r6 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r7 = virtualinvoke $r6.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r3);

        $r8 = virtualinvoke $r7.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $r9 = specialinvoke r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.util.ints.IntSet[] symmetricColumnPartitions(kodkod.ast.Relation)>($r3);

        if $r9 == null goto label4;

        $r10 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r11 = virtualinvoke $r10.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r1);

        $r12 = virtualinvoke $r11.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $i0 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int min()>();

        $z0 = interfaceinvoke $r12.<kodkod.util.ints.IntSet: boolean contains(int)>($i0);

        if $z0 == 0 goto label4;

        $r13 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r14 = virtualinvoke $r13.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r2);

        $r15 = virtualinvoke $r14.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $i1 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int max()>();

        $z1 = interfaceinvoke $r15.<kodkod.util.ints.IntSet: boolean contains(int)>($i1);

        if $z1 == 0 goto label4;

        $i3 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i2 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i4 = $i3 * $i2;

        $r16 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i4);

        $i5 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int min()>();

        i17 = $i5;

        $i7 = $i5 + 1;

        $i6 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $r17 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>($i7, $i6);

        goto label2;

     label1:
        $i8 = interfaceinvoke $r17.<kodkod.util.ints.IntIterator: int next()>();

        $i9 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i10 = i17 * $i9;

        $i11 = $i10 + $i8;

        interfaceinvoke $r16.<kodkod.util.ints.IntSet: boolean add(int)>($i11);

        i17 = $i8;

     label2:
        $z2 = interfaceinvoke $r17.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        $r18 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r19 = virtualinvoke $r18.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>($r4);

        $r20 = virtualinvoke $r19.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $z3 = interfaceinvoke $r16.<kodkod.util.ints.IntSet: boolean containsAll(kodkod.util.ints.IntCollection)>($r20);

        if $z3 == 0 goto label4;

        $r21 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r22 = virtualinvoke $r21.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r4);

        $r23 = virtualinvoke $r22.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $z4 = interfaceinvoke $r23.<kodkod.util.ints.IntSet: boolean containsAll(kodkod.util.ints.IntCollection)>($r16);

        if $z4 == 0 goto label4;

        $i12 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int min()>();

        specialinvoke r5.<kodkod.engine.fol2sat.SymmetryBreaker: void removePartition(int)>($i12);

        $r24 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r25 = virtualinvoke $r24.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r26 = virtualinvoke $r25.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        if z5 == 0 goto label3;

        $r67 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $i15 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int min()>();

        $r68 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>(1, $i15);

        $r69 = newarray (kodkod.instance.Tuple)[0];

        $r70 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(kodkod.instance.Tuple,kodkod.instance.Tuple[])>($r68, $r69);

        virtualinvoke $r67.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r1, $r70);

        $r71 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $i16 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int max()>();

        $r72 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>(1, $i16);

        $r73 = newarray (kodkod.instance.Tuple)[0];

        $r74 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(kodkod.instance.Tuple,kodkod.instance.Tuple[])>($r72, $r73);

        virtualinvoke $r71.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r2, $r74);

        $r75 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r76 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r77 = virtualinvoke r0.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        $r78 = virtualinvoke $r76.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r77);

        virtualinvoke $r75.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r3, $r78);

        $r79 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r80 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(int,kodkod.util.ints.IntSet)>(2, $r16);

        virtualinvoke $r79.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r4, $r80);

        $r81 = <kodkod.ast.Formula: kodkod.ast.Formula TRUE>;

        return $r81;

     label3:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("SYM_BREAK_CONST_");

        $r28 = virtualinvoke $r1.<kodkod.ast.Relation: java.lang.String name()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>($r30);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("SYM_BREAK_CONST_");

        $r33 = virtualinvoke $r2.<kodkod.ast.Relation: java.lang.String name()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>($r35);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("SYM_BREAK_CONST_");

        $r38 = virtualinvoke $r3.<kodkod.ast.Relation: java.lang.String name()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>($r40);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("SYM_BREAK_CONST_");

        $r43 = virtualinvoke $r4.<kodkod.ast.Relation: java.lang.String name()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r46 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>($r45);

        $r47 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $i13 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int min()>();

        $r48 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>(1, $i13);

        $r49 = newarray (kodkod.instance.Tuple)[0];

        $r50 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(kodkod.instance.Tuple,kodkod.instance.Tuple[])>($r48, $r49);

        virtualinvoke $r47.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r31, $r50);

        $r51 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $i14 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int max()>();

        $r52 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>(1, $i14);

        $r53 = newarray (kodkod.instance.Tuple)[0];

        $r54 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(kodkod.instance.Tuple,kodkod.instance.Tuple[])>($r52, $r53);

        virtualinvoke $r51.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r36, $r54);

        $r55 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r56 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r57 = virtualinvoke r0.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        $r58 = virtualinvoke $r56.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r57);

        virtualinvoke $r55.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r41, $r58);

        $r59 = r5.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r60 = virtualinvoke $r26.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(int,kodkod.util.ints.IntSet)>(2, $r16);

        virtualinvoke $r59.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r46, $r60);

        $r61 = newarray (kodkod.ast.Formula)[4];

        $r62 = virtualinvoke $r1.<kodkod.ast.Relation: kodkod.ast.Formula eq(kodkod.ast.Expression)>($r31);

        $r61[0] = $r62;

        $r63 = virtualinvoke $r2.<kodkod.ast.Relation: kodkod.ast.Formula eq(kodkod.ast.Expression)>($r36);

        $r61[1] = $r63;

        $r64 = virtualinvoke $r3.<kodkod.ast.Relation: kodkod.ast.Formula eq(kodkod.ast.Expression)>($r41);

        $r61[2] = $r64;

        $r65 = virtualinvoke $r4.<kodkod.ast.Relation: kodkod.ast.Formula eq(kodkod.ast.Expression)>($r46);

        $r61[3] = $r65;

        $r66 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula[])>($r61);

        return $r66;

     label4:
        return null;
    }

    private final void removePartition(int)
    {
        java.util.Iterator $r2;
        kodkod.util.ints.IntSet $r4;
        java.util.Set $r1;
        kodkod.engine.fol2sat.SymmetryBreaker r0;
        int i0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kodkod.util.ints.IntSet) $r3;

        $z1 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: boolean contains(int)>(i0);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    private final kodkod.util.ints.IntSet[] symmetricColumnPartitions(kodkod.ast.Relation)
    {
        kodkod.util.ints.IntIterator $r10;
        kodkod.instance.Bounds $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r6;
        kodkod.engine.fol2sat.SymmetryBreaker r0;
        kodkod.ast.Relation r1;
        kodkod.util.ints.IntSet[] r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, $i14, $i16;
        kodkod.instance.TupleSet $r3;
        java.util.Iterator $r7;
        kodkod.util.ints.IntSet $r4, $r9, $r11, r12;
        java.lang.Object $r8;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: kodkod.instance.Bounds bounds>;

        $r3 = virtualinvoke $r2.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r1);

        $r4 = virtualinvoke $r3.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $z0 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        $i0 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        r5 = newarray (kodkod.util.ints.IntSet)[$i0];

        $i1 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        i9 = $i1 - 1;

        i10 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: int min()>();

        goto label07;

     label02:
        $r6 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: java.util.Set symmetries>;

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label04;

     label03:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kodkod.util.ints.IntSet) $r8;

        $i2 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i3 = i10 % $i2;

        $z2 = interfaceinvoke r12.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z2 == 0 goto label04;

        r5[i9] = r12;

        goto label05;

     label04:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label03;

     label05:
        $r9 = r5[i9];

        if $r9 != null goto label06;

        return null;

     label06:
        $i14 = (int) -1;

        i9 = i9 + $i14;

        $i4 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        i10 = i10 / $i4;

     label07:
        if i9 >= 0 goto label02;

        $r10 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label12;

     label08:
        $i5 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        i11 = $i5 - 1;

        i12 = interfaceinvoke $r10.<kodkod.util.ints.IntIterator: int next()>();

        goto label11;

     label09:
        $r11 = r5[i11];

        $i6 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        $i7 = i12 % $i6;

        $z4 = interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean contains(int)>($i7);

        if $z4 != 0 goto label10;

        return null;

     label10:
        $i16 = (int) -1;

        i11 = i11 + $i16;

        $i8 = r0.<kodkod.engine.fol2sat.SymmetryBreaker: int usize>;

        i12 = i12 / $i8;

     label11:
        if i11 >= 0 goto label09;

     label12:
        $z3 = interfaceinvoke $r10.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z3 != 0 goto label08;

        return r5;
    }
}
