public class org.springframework.web.multipart.commons.CommonsMultipartResolver extends org.springframework.web.multipart.commons.CommonsFileUploadSupport implements org.springframework.web.multipart.MultipartResolver, org.springframework.web.context.ServletContextAware
{
    private boolean resolveLazily;

    public void <init>()
    {
        org.springframework.web.multipart.commons.CommonsMultipartResolver r0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        specialinvoke r0.<org.springframework.web.multipart.commons.CommonsFileUploadSupport: void <init>()>();

        r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: boolean resolveLazily> = 0;

        return;
    }

    public void <init>(javax.servlet.ServletContext)
    {
        javax.servlet.ServletContext r1;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r1 := @parameter0: javax.servlet.ServletContext;

        specialinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: void <init>()>();

        virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: void setServletContext(javax.servlet.ServletContext)>(r1);

        return;
    }

    public void setResolveLazily(boolean)
    {
        org.springframework.web.multipart.commons.CommonsMultipartResolver r0;
        boolean z0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: boolean resolveLazily> = z0;

        return;
    }

    protected org.apache.commons.fileupload.FileUpload newFileUpload(org.apache.commons.fileupload.FileItemFactory)
    {
        org.apache.commons.fileupload.servlet.ServletFileUpload $r3;
        org.apache.commons.fileupload.FileItemFactory r1;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r2;
        org.apache.commons.fileupload.FileUpload $r4;

        r2 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r1 := @parameter0: org.apache.commons.fileupload.FileItemFactory;

        $r3 = new org.apache.commons.fileupload.servlet.ServletFileUpload;

        specialinvoke $r3.<org.apache.commons.fileupload.servlet.ServletFileUpload: void <init>(org.apache.commons.fileupload.FileItemFactory)>(r1);

        $r4 = (org.apache.commons.fileupload.FileUpload) $r3;

        return $r4;
    }

    public void setServletContext(javax.servlet.ServletContext)
    {
        org.apache.commons.fileupload.disk.DiskFileItemFactory $r1;
        javax.servlet.ServletContext r2;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r0;
        java.io.File $r3;
        boolean $z0;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r2 := @parameter0: javax.servlet.ServletContext;

        $z0 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: boolean isUploadTempDirSpecified()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.apache.commons.fileupload.disk.DiskFileItemFactory getFileItemFactory()>();

        $r3 = staticinvoke <org.springframework.web.util.WebUtils: java.io.File getTempDir(javax.servlet.ServletContext)>(r2);

        virtualinvoke $r1.<org.apache.commons.fileupload.disk.DiskFileItemFactory: void setRepository(java.io.File)>($r3);

     label1:
        return;
    }

    public boolean isMultipart(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r1;
        boolean $z0;

        r1 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.fileupload.servlet.ServletFileUpload: boolean isMultipartContent(javax.servlet.http.HttpServletRequest)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.springframework.web.multipart.MultipartHttpServletRequest resolveMultipart(javax.servlet.http.HttpServletRequest) throws org.springframework.web.multipart.MultipartException
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult $r2;
        org.springframework.web.multipart.commons.CommonsMultipartResolver$1 $r6;
        org.springframework.util.MultiValueMap $r4;
        org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest $r3;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r1;
        javax.servlet.http.HttpServletRequest r0;
        java.util.Map $r5;
        boolean $z0;

        r1 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        $z0 = r1.<org.springframework.web.multipart.commons.CommonsMultipartResolver: boolean resolveLazily>;

        if $z0 == 0 goto label1;

        $r6 = new org.springframework.web.multipart.commons.CommonsMultipartResolver$1;

        specialinvoke $r6.<org.springframework.web.multipart.commons.CommonsMultipartResolver$1: void <init>(org.springframework.web.multipart.commons.CommonsMultipartResolver,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletRequest)>(r1, r0, r0);

        return $r6;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult parseRequest(javax.servlet.http.HttpServletRequest)>(r0);

        $r3 = new org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

        $r4 = virtualinvoke $r2.<org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult: org.springframework.util.MultiValueMap getMultipartFiles()>();

        $r5 = virtualinvoke $r2.<org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult: java.util.Map getMultipartParameters()>();

        specialinvoke $r3.<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest,org.springframework.util.MultiValueMap,java.util.Map)>(r0, $r4, $r5);

        return $r3;
    }

    protected org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult parseRequest(javax.servlet.http.HttpServletRequest) throws org.springframework.web.multipart.MultipartException
    {
        org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult $r6;
        java.lang.Throwable $r7, $r9;
        org.springframework.web.multipart.MultipartException $r8;
        org.apache.commons.fileupload.servlet.ServletFileUpload $r4;
        long $l0;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r0;
        org.apache.commons.fileupload.FileUpload $r3;
        org.springframework.web.multipart.MaxUploadSizeExceededException $r10;
        javax.servlet.http.HttpServletRequest r1;
        java.util.List $r5;
        java.lang.String $r2;

        r0 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: java.lang.String determineEncoding(javax.servlet.http.HttpServletRequest)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.apache.commons.fileupload.FileUpload prepareFileUpload(java.lang.String)>($r2);

     label1:
        $r4 = (org.apache.commons.fileupload.servlet.ServletFileUpload) $r3;

        $r5 = virtualinvoke $r4.<org.apache.commons.fileupload.servlet.ServletFileUpload: java.util.List parseRequest(javax.servlet.http.HttpServletRequest)>(r1);

        $r6 = virtualinvoke r0.<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult parseFileItems(java.util.List,java.lang.String)>($r5, $r2);

     label2:
        return $r6;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.springframework.web.multipart.MaxUploadSizeExceededException;

        $l0 = virtualinvoke $r3.<org.apache.commons.fileupload.FileUpload: long getSizeMax()>();

        specialinvoke $r10.<org.springframework.web.multipart.MaxUploadSizeExceededException: void <init>(long,java.lang.Throwable)>($l0, $r9);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.springframework.web.multipart.MultipartException;

        specialinvoke $r8.<org.springframework.web.multipart.MultipartException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse multipart servlet request", $r7);

        throw $r8;

        catch org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException from label1 to label2 with label3;
        catch org.apache.commons.fileupload.FileUploadException from label1 to label2 with label4;
    }

    protected java.lang.String determineEncoding(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, r3;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r2;

        r2 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getCharacterEncoding()>();

        r3 = $r1;

        if $r1 != null goto label1;

        r3 = virtualinvoke r2.<org.springframework.web.multipart.commons.CommonsMultipartResolver: java.lang.String getDefaultEncoding()>();

     label1:
        return r3;
    }

    public void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)
    {
        java.lang.Throwable $r3;
        org.springframework.web.multipart.MultipartHttpServletRequest r0;
        org.springframework.util.MultiValueMap $r2;
        org.apache.commons.logging.Log $r4;
        org.springframework.web.multipart.commons.CommonsMultipartResolver r1;

        r1 := @this: org.springframework.web.multipart.commons.CommonsMultipartResolver;

        r0 := @parameter0: org.springframework.web.multipart.MultipartHttpServletRequest;

        if r0 == null goto label4;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.web.multipart.MultipartHttpServletRequest: org.springframework.util.MultiValueMap getMultiFileMap()>();

        virtualinvoke r1.<org.springframework.web.multipart.commons.CommonsMultipartResolver: void cleanupFileItems(org.springframework.util.MultiValueMap)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = r1.<org.springframework.web.multipart.commons.CommonsMultipartResolver: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Failed to perform multipart cleanup for servlet request", $r3);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
