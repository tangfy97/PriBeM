public class com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private java.util.Set defaultGraphs;
    private java.util.Set defaultGraphsReal;
    private java.util.Set namedGraphs;

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.Set $r2, $r4;
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect $r5;
        java.util.List $r1, $r3;
        com.hp.hpl.jena.sparql.algebra.Op r6, $r7;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasDatasetDescription()>();

        if $z0 != 0 goto label1;

        return r6;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getGraphURIs()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: java.util.Set convertToNodes(java.util.Collection)>($r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getNamedGraphURIs()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: java.util.Set convertToNodes(java.util.Collection)>($r3);

        $r5 = new com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        specialinvoke $r5.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: void <init>(java.util.Set,java.util.Set,boolean)>($r2, $r4, 0);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r5, r6);

        return $r7;
    }

    public void <init>(java.util.Set, java.util.Set, boolean)
    {
        java.util.HashSet $r3;
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r0;
        java.util.Set r1, r2, $r4, $r5;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphs> = r1;

        r0.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphsReal> = r1;

        r0.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs> = r2;

        if z0 == 0 goto label1;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphs> = $r3;

        $r4 = r0.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphs>;

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        $r5 = r0.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphs>;

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

     label1:
        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r1;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r2;
        com.hp.hpl.jena.sparql.ARQException $r0;

        r1 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r0 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("Unexpected use of BGP in for a dynamic dataset");

        throw $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r0;
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "Paths in dynamic datasets queries not supported yet");

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, r12;
        com.hp.hpl.jena.sparql.algebra.Op $r5, $r14, $r16, $r20, $r23, $r26, r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r4, $r7, $r9, $r18, $r21, $r24;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r13;
        com.hp.hpl.jena.sparql.expr.NodeValue $r15;
        com.hp.hpl.jena.sparql.algebra.op.OpNull $r6, $r17;
        int $i0;
        java.util.Iterator $r10;
        com.hp.hpl.jena.sparql.core.BasicPattern $r19, $r22, $r25;
        com.hp.hpl.jena.sparql.core.Var $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r3;
        java.lang.Object $r11;

        r3 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphGenerated(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label1;

        $r24 = r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphs>;

        $r25 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r26 = specialinvoke r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: com.hp.hpl.jena.sparql.algebra.Op patternOver(java.util.Set,com.hp.hpl.jena.sparql.core.BasicPattern)>($r24, $r25);

        return $r26;

     label1:
        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI>;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r21 = r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set defaultGraphsReal>;

        $r22 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r23 = specialinvoke r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: com.hp.hpl.jena.sparql.algebra.Op patternOver(java.util.Set,com.hp.hpl.jena.sparql.core.BasicPattern)>($r21, $r22);

        return $r23;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r1);

        if $z2 == 0 goto label3;

        $r18 = r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $r19 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r20 = specialinvoke r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: com.hp.hpl.jena.sparql.algebra.Op patternOver(java.util.Set,com.hp.hpl.jena.sparql.core.BasicPattern)>($r18, $r19);

        return $r20;

     label3:
        $z3 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label7;

        $r7 = r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $i0 = interfaceinvoke $r7.<java.util.Set: int size()>();

        if $i0 != 0 goto label4;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r17;

     label4:
        $r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r1);

        r27 = null;

        $r9 = r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.hp.hpl.jena.graph.Node) $r11;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r8, r12);

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, $r13);

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r12);

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>($r14, $r8, $r15);

        r27 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r27, $r16);

        goto label5;

     label6:
        return r27;

     label7:
        $r4 = r3.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $z4 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z4 != 0 goto label8;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r6;

     label8:
        $r5 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r0);

        return $r5;
    }

    private com.hp.hpl.jena.sparql.algebra.Op patternOver(java.util.Set, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpNull $r15;
        com.hp.hpl.jena.graph.Node r9, r18;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r16;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.algebra.Op r19;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r7, $r12;
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct $r4;
        com.hp.hpl.jena.sparql.core.BasicPattern r0, $r10;
        java.util.Set r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r11, $r14;
        com.hp.hpl.jena.graph.Triple r6;
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r17;
        java.lang.Object $r5, $r8, $r13;

        r17 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r1 := @parameter0: java.util.Set;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 != 0 goto label1;

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        return $r16;

     label1:
        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i1 != 0 goto label2;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r15;

     label2:
        $i2 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i2 != 1 goto label3;

        $r12 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.hp.hpl.jena.graph.Node) $r13;

        $r14 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>(r18, r0);

        return $r14;

     label3:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.op.OpSequence create()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        r19 = null;

        $r7 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Node) $r8;

        $r10 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        virtualinvoke $r10.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>(r6);

        $r11 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>(r9, $r10);

        r19 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r19, $r11);

        goto label5;

     label6:
        virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r19);

        goto label4;

     label7:
        $r4 = new com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpDistinct: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpNull $r5;
        com.hp.hpl.jena.graph.Node $r1, r12;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r10;
        com.hp.hpl.jena.sparql.algebra.Op $r4;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9;
        java.util.Set $r3, $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r0;
        com.hp.hpl.jena.sparql.core.Var $r7;
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r13;
        java.lang.Object $r11;
        com.hp.hpl.jena.sparql.algebra.Table $r6;

        r2 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r1);

        $r8 = r2.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.hp.hpl.jena.graph.Node) $r11;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r7, r12);

        interfaceinvoke $r6.<com.hp.hpl.jena.sparql.algebra.Table: void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r13);

        goto label1;

     label2:
        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable create(com.hp.hpl.jena.sparql.algebra.Table)>($r6);

        return $r10;

     label3:
        $r3 = r2.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z1 != 0 goto label4;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r5;

     label4:
        $r4 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)>(r0);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpNull $r7, $r17;
        com.hp.hpl.jena.graph.Node $r1, r12;
        com.hp.hpl.jena.sparql.algebra.table.Table1 $r13;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r14;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.Op r5, $r6, $r15, r19;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r18;
        java.util.Iterator $r10;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0, $r16;
        java.util.Set $r3, $r4, $r9;
        com.hp.hpl.jena.sparql.core.Var $r8;
        com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect r2;
        java.lang.Object $r11;

        r2 := @this: com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label1;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("<Cough/>");

     label1:
        $r3 = r2.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r17;

     label2:
        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label5;

        r19 = null;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r1);

        $r9 = r2.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.hp.hpl.jena.graph.Node) $r11;

        $r13 = new com.hp.hpl.jena.sparql.algebra.table.Table1;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.algebra.table.Table1: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r8, r12);

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable create(com.hp.hpl.jena.sparql.algebra.Table)>($r13);

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>($r14, r5);

        $r16 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        specialinvoke $r16.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>(r12, $r15);

        r19 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r19, $r16);

        goto label3;

     label4:
        return r19;

     label5:
        $r4 = r2.<com.hp.hpl.jena.tdb.migrate.TransformDynamicDataset_Imperfect: java.util.Set namedGraphs>;

        $z2 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z2 != 0 goto label6;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r7;

     label6:
        $r6 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r5);

        return $r6;
    }
}
