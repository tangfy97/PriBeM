final class org.apache.lucene.util.packed.Packed16ThreeBlocks extends org.apache.lucene.util.packed.PackedInts$MutableImpl
{
    final short[] blocks;
    public static final int MAX_SIZE;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        int i0, $i1;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void <init>(int,int)>(i0, 48);

        if i0 <= 715827882 goto label1;

        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("MAX_SIZE exceeded");

        throw $r2;

     label1:
        $i1 = i0 * 3;

        $r1 = newarray (short)[$i1];

        r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks> = $r1;

        return;
    }

    void <init>(int, org.apache.lucene.store.DataInput, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r2;
        long $l3, $l4, $l5, $l6, $l7;
        short $s8;
        int i0, $i1, i2, i9, i10, i11;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r3;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i2 := @parameter0: int;

        r2 := @parameter1: org.apache.lucene.store.DataInput;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: void <init>(int)>(i0);

        i9 = 0;

     label1:
        $i1 = 3 * i0;

        if i9 >= $i1 goto label2;

        $r3 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $s8 = virtualinvoke r2.<org.apache.lucene.store.DataInput: short readShort()>();

        $r3[i9] = $s8;

        i9 = i9 + 1;

        goto label1;

     label2:
        $r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $l3 = virtualinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i2, i0, 48);

        $l4 = (long) i0;

        $l5 = 3L * $l4;

        $l6 = $l5 * 2L;

        $l7 = $l3 - $l6;

        i10 = (int) $l7;

        i11 = 0;

     label3:
        if i11 >= i10 goto label4;

        virtualinvoke r2.<org.apache.lucene.store.DataInput: byte readByte()>();

        i11 = i11 + 1;

        goto label3;

     label4:
        return;
    }

    public long get(int)
    {
        long $l3, $l4, $l7, $l8, $l9, $l10, $l13, $l14, $l15, $l16;
        short $s2, $s6, $s12;
        int i0, i1, $i5, $i11;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r1, $r2, $r3;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i0 := @parameter0: int;

        i1 = i0 * 3;

        $r1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $s2 = $r1[i1];

        $l3 = (long) $s2;

        $l4 = $l3 & 65535L;

        $l10 = $l4 << 32;

        $r2 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i5 = i1 + 1;

        $s6 = $r2[$i5];

        $l7 = (long) $s6;

        $l8 = $l7 & 65535L;

        $l9 = $l8 << 16;

        $l15 = $l10 | $l9;

        $r3 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i11 = i1 + 2;

        $s12 = $r3[$i11];

        $l13 = (long) $s12;

        $l14 = $l13 & 65535L;

        $l16 = $l15 | $l14;

        return $l16;
    }

    public int get(int, long[], int, int)
    {
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        short[] $r2, $r3, $r4;
        long $l8, $l9, $l12, $l13, $l14, $l15, $l18, $l19, $l20, $l21;
        java.lang.AssertionError $r5, $r6, $r7;
        short $s7, $s11, $s17;
        long[] r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i10, $i16, $i22, $i23, $i24, $i25, i26, i27;
        java.lang.String $r12;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i26 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r7;

     label1:
        $z1 = <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i25 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: int valueCount>;

        if i0 < $i25 goto label3;

     label2:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label3:
        $z2 = <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i23 = i26 + i2;

        $i22 = lengthof r1;

        if $i23 <= $i22 goto label4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        i27 = i0 * 3;

        $i5 = i0 + $i4;

        $i24 = $i5 * 3;

     label5:
        if i27 >= $i24 goto label6;

        $i6 = i26;

        i26 = i26 + 1;

        $r2 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $s7 = $r2[i27];

        $l8 = (long) $s7;

        $l9 = $l8 & 65535L;

        $l15 = $l9 << 32;

        $r3 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i10 = i27 + 1;

        $s11 = $r3[$i10];

        $l12 = (long) $s11;

        $l13 = $l12 & 65535L;

        $l14 = $l13 << 16;

        $l20 = $l15 | $l14;

        $r4 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i16 = i27 + 2;

        $s17 = $r4[$i16];

        $l18 = (long) $s17;

        $l19 = $l18 & 65535L;

        $l21 = $l20 | $l19;

        r1[$i6] = $l21;

        i27 = i27 + 3;

        goto label5;

     label6:
        return $i4;
    }

    public void set(int, long)
    {
        long l2, $l3, $l6;
        short $s5, $s8, $s11;
        int i0, i1, $i4, $i7, $i9, $i10, $i12;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r1, $r2, $r3;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i0 := @parameter0: int;

        l2 := @parameter1: long;

        i1 = i0 * 3;

        $r1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $l3 = l2 >>> 32;

        $i4 = (int) $l3;

        $s5 = (short) $i4;

        $r1[i1] = $s5;

        $r2 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i9 = i1 + 1;

        $l6 = l2 >>> 16;

        $i7 = (int) $l6;

        $s8 = (short) $i7;

        $r2[$i9] = $s8;

        $r3 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i12 = i1 + 2;

        $i10 = (int) l2;

        $s11 = (short) $i10;

        $r3[$i12] = $s11;

        return;
    }

    public int set(int, long[], int, int)
    {
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        short[] $r2, $r3, $r4;
        long l6, $l7, $l10;
        java.lang.AssertionError $r5, $r6, $r7;
        short $s9, $s12, $s14;
        long[] r1;
        int i0, $i1, i2, $i3, $i4, i5, $i8, $i11, $i13, $i15, $i16, $i17, $i18, i19, i20, i21, i22;
        java.lang.String $r12;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r7;

     label1:
        $z1 = <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i18 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: int valueCount>;

        if i0 < $i18 goto label3;

     label2:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label3:
        $z2 = <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i16 = i5 + i2;

        $i15 = lengthof r1;

        if $i16 <= $i15 goto label4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        i19 = i5;

        i20 = i0 * 3;

        $i17 = i5 + $i4;

     label5:
        if i19 >= $i17 goto label6;

        l6 = r1[i19];

        $r2 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        i21 = i20 + 1;

        $l7 = l6 >>> 32;

        $i8 = (int) $l7;

        $s9 = (short) $i8;

        $r2[i20] = $s9;

        $r3 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        i22 = i21 + 1;

        $l10 = l6 >>> 16;

        $i11 = (int) $l10;

        $s12 = (short) $i11;

        $r3[i21] = $s12;

        $r4 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        i20 = i22 + 1;

        $i13 = (int) l6;

        $s14 = (short) $i13;

        $r4[i22] = $s14;

        i19 = i19 + 1;

        goto label5;

     label6:
        return $i4;
    }

    public void fill(int, int, long)
    {
        long l0, $l1, $l4;
        short s3, s6, s8;
        int $i2, $i5, $i7, i9, i10, i11, $i12, $i13, i14;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r1, $r2, $r3;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        i9 := @parameter0: int;

        i10 := @parameter1: int;

        l0 := @parameter2: long;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        s3 = (short) $i2;

        $l4 = l0 >>> 16;

        $i5 = (int) $l4;

        s6 = (short) $i5;

        $i7 = (int) l0;

        s8 = (short) $i7;

        i14 = i9 * 3;

        i11 = i10 * 3;

     label1:
        if i14 >= i11 goto label2;

        $r1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $r1[i14] = s3;

        $r2 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i12 = i14 + 1;

        $r2[$i12] = s6;

        $r3 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i13 = i14 + 2;

        $r3[$i13] = s8;

        i14 = i14 + 3;

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r1;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        $r1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        staticinvoke <java.util.Arrays: void fill(short[],short)>($r1, 0);

        return;
    }

    public long ramBytesUsed()
    {
        long $l4, $l5, $l6, $l7;
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r0;
        short[] $r1;

        r0 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        $i2 = $i0 + 8;

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = $i2 + $i1;

        $l4 = (long) $i3;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l4);

        $r1 = r0.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(short[])>($r1);

        $l7 = $l5 + $l6;

        return $l7;
    }

    public java.lang.String toString()
    {
        int $i0, $i1, $i2;
        java.lang.String $r3, $r13;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;
        java.lang.Class $r2;
        org.apache.lucene.util.packed.Packed16ThreeBlocks r1;
        short[] $r10;

        r1 := @this: org.apache.lucene.util.packed.Packed16ThreeBlocks;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(bitsPerValue=");

        $i0 = r1.<org.apache.lucene.util.packed.Packed16ThreeBlocks: int bitsPerValue>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $i1 = virtualinvoke r1.<org.apache.lucene.util.packed.Packed16ThreeBlocks: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", elements.length=");

        $r10 = r1.<org.apache.lucene.util.packed.Packed16ThreeBlocks: short[] blocks>;

        $i2 = lengthof $r10;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.packed.Packed16ThreeBlocks: int MAX_SIZE> = 715827882;

        $r0 = class "Lorg/apache/lucene/util/packed/Packed16ThreeBlocks;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.Packed16ThreeBlocks: boolean $assertionsDisabled> = $z1;

        return;
    }
}
