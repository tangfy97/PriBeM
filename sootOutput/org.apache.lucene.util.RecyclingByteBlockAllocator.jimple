public final class org.apache.lucene.util.RecyclingByteBlockAllocator extends org.apache.lucene.util.ByteBlockPool$Allocator
{
    private byte[][] freeByteBlocks;
    private final int maxBufferedBlocks;
    private int freeBlocks;
    private final org.apache.lucene.util.Counter bytesUsed;
    public static final int DEFAULT_BUFFERED_BLOCKS;
    static final boolean $assertionsDisabled;

    public void <init>(int, int, org.apache.lucene.util.Counter)
    {
        byte[][] $r1;
        org.apache.lucene.util.Counter r2;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.util.Counter;

        specialinvoke r0.<org.apache.lucene.util.ByteBlockPool$Allocator: void <init>(int)>(i0);

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks> = 0;

        $r1 = newarray (byte[])[i1];

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks> = $r1;

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int maxBufferedBlocks> = i1;

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed> = r2;

        return;
    }

    public void <init>(int, int)
    {
        org.apache.lucene.util.Counter $r1;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.apache.lucene.util.Counter: org.apache.lucene.util.Counter newCounter(boolean)>(0);

        specialinvoke r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: void <init>(int,int,org.apache.lucene.util.Counter)>(i0, i1, $r1);

        return;
    }

    public void <init>()
    {
        int $i1;
        org.apache.lucene.util.Counter $r1;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        $r1 = staticinvoke <org.apache.lucene.util.Counter: org.apache.lucene.util.Counter newCounter(boolean)>(0);

        $i1 = (int) 32768;

        specialinvoke r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: void <init>(int,int,org.apache.lucene.util.Counter)>($i1, 64, $r1);

        return;
    }

    public byte[] getByteBlock()
    {
        byte[] r2, $r5;
        long $l5;
        byte[][] $r1, $r3;
        org.apache.lucene.util.Counter $r4;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;
        int $i0, $i1, $i2, $i3, $i4, $i6;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        $i0 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        if $i0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $i4 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int blockSize>;

        $l5 = (long) $i4;

        virtualinvoke $r4.<org.apache.lucene.util.Counter: long addAndGet(long)>($l5);

        $i6 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int blockSize>;

        $r5 = newarray (byte)[$i6];

        return $r5;

     label1:
        $r1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks>;

        $i1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        $i2 = $i1 - 1;

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks> = $i2;

        r2 = $r1[$i2];

        $r3 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks>;

        $i3 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        $r3[$i3] = null;

        return r2;
    }

    public void recycleByteBlocks(byte[][], int, int)
    {
        byte[] $r7;
        byte $b16;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;
        boolean $z0;
        byte[][] $r1, r5, $r6, $r8, r9;
        org.apache.lucene.util.Counter $r2, $r3;
        long $l14, $l15;
        java.lang.AssertionError $r10;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, $i25;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        r5 := @parameter0: byte[][];

        i3 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int maxBufferedBlocks>;

        $i0 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        $i5 = $i1 - $i0;

        $i4 = i2 - i3;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i4);

        $i7 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        i8 = $i7 + $i6;

        $r1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks>;

        $i9 = lengthof $r1;

        if i8 < $i9 goto label1;

        $i19 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i20 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i8, $i19);

        r9 = newarray (byte[])[$i20];

        $r8 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks>;

        $i21 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r9, 0, $i21);

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks> = r9;

     label1:
        $i22 = i3 + $i6;

        i23 = i3;

     label2:
        if i23 >= $i22 goto label3;

        $r6 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks>;

        $i17 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        $i18 = $i17 + 1;

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks> = $i18;

        $r7 = r5[i23];

        $r6[$i17] = $r7;

        r5[i23] = null;

        i23 = i23 + 1;

        goto label2;

     label3:
        i24 = $i22;

     label4:
        if i24 >= i2 goto label5;

        r5[i24] = null;

        i24 = i24 + 1;

        goto label4;

     label5:
        $r2 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $i10 = i2 - $i22;

        $i12 = neg $i10;

        $i11 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int blockSize>;

        $i13 = $i12 * $i11;

        $l14 = (long) $i13;

        virtualinvoke $r2.<org.apache.lucene.util.Counter: long addAndGet(long)>($l14);

        $z0 = <org.apache.lucene.util.RecyclingByteBlockAllocator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r3 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $l15 = virtualinvoke $r3.<org.apache.lucene.util.Counter: long get()>();

        $b16 = $l15 cmp 0L;

        $i25 = (int) $b16;

        if $i25 >= 0 goto label6;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label6:
        return;
    }

    public int numBufferedBlocks()
    {
        int $i0;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        $i0 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        return $i0;
    }

    public long bytesUsed()
    {
        long $l0;
        org.apache.lucene.util.Counter $r1;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        $r1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.util.Counter: long get()>();

        return $l0;
    }

    public int maxBufferedBlocks()
    {
        int $i0;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        $i0 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int maxBufferedBlocks>;

        return $i0;
    }

    public int freeBlocks(int)
    {
        long $l6, $l7;
        java.lang.AssertionError $r11, $r12;
        byte $b8;
        org.apache.lucene.util.RecyclingByteBlockAllocator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i9, $i10, i11, i12, $i13, $i14;
        java.lang.String $r9;
        boolean $z0, $z1;
        byte[][] $r4;
        org.apache.lucene.util.Counter $r1, $r2;
        java.lang.StringBuilder $r7, $r8, $r10;

        r0 := @this: org.apache.lucene.util.RecyclingByteBlockAllocator;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.RecyclingByteBlockAllocator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r11 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("free blocks must be >= 0 but was: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r11;

     label1:
        $i1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        if i0 <= $i1 goto label2;

        i11 = 0;

        i12 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        goto label3;

     label2:
        $i2 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        i11 = $i2 - i0;

        i12 = i0;

     label3:
        $i13 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        if $i13 <= i11 goto label4;

        $r4 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: byte[][] freeByteBlocks>;

        $i9 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks>;

        $i10 = $i9 - 1;

        r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int freeBlocks> = $i10;

        $r4[$i10] = null;

        goto label3;

     label4:
        $r1 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $i4 = neg i12;

        $i3 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: int blockSize>;

        $i5 = $i4 * $i3;

        $l6 = (long) $i5;

        virtualinvoke $r1.<org.apache.lucene.util.Counter: long addAndGet(long)>($l6);

        $z1 = <org.apache.lucene.util.RecyclingByteBlockAllocator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $r2 = r0.<org.apache.lucene.util.RecyclingByteBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $l7 = virtualinvoke $r2.<org.apache.lucene.util.Counter: long get()>();

        $b8 = $l7 cmp 0L;

        $i14 = (int) $b8;

        if $i14 >= 0 goto label5;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label5:
        return i12;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.RecyclingByteBlockAllocator: int DEFAULT_BUFFERED_BLOCKS> = 64;

        $r0 = class "Lorg/apache/lucene/util/RecyclingByteBlockAllocator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.RecyclingByteBlockAllocator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
