public class org.eclipse.jetty.util.IPAddressMap extends java.util.HashMap
{
    private final java.util.HashMap _patterns;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.eclipse.jetty.util.IPAddressMap r0;

        r0 := @this: org.eclipse.jetty.util.IPAddressMap;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>(11);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jetty.util.IPAddressMap: java.util.HashMap _patterns> = $r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        java.util.HashMap $r1;
        org.eclipse.jetty.util.IPAddressMap r0;

        r0 := @this: org.eclipse.jetty.util.IPAddressMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>(i0);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jetty.util.IPAddressMap: java.util.HashMap _patterns> = $r1;

        return;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        org.eclipse.jetty.util.IPAddressMap r8;
        java.util.HashMap $r9, $r14;
        int $i0;
        java.lang.String r0, $r5, $r6, $r7;
        org.eclipse.jetty.util.IPAddressMap$IPAddrPattern $r13;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Object $r10, r11, $r12;

        r8 := @this: org.eclipse.jetty.util.IPAddressMap;

        r0 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid IP address pattern: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r9 = r8.<org.eclipse.jetty.util.IPAddressMap: java.util.HashMap _patterns>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        if $r10 != null goto label3;

        $r14 = r8.<org.eclipse.jetty.util.IPAddressMap: java.util.HashMap _patterns>;

        $r13 = new org.eclipse.jetty.util.IPAddressMap$IPAddrPattern;

        specialinvoke $r13.<org.eclipse.jetty.util.IPAddressMap$IPAddrPattern: void <init>(java.lang.String)>($r7);

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r13);

     label3:
        $r12 = specialinvoke r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r11);

        return $r12;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.eclipse.jetty.util.IPAddressMap r0;

        r0 := @this: org.eclipse.jetty.util.IPAddressMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;
    }

    public java.lang.Object match(java.lang.String)
    {
        java.util.Map$Entry $r2;
        org.eclipse.jetty.util.IPAddressMap r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.util.IPAddressMap;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.eclipse.jetty.util.IPAddressMap: java.util.Map$Entry getMatch(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

     label2:
        return $r3;
    }

    public java.util.Map$Entry getMatch(java.lang.String)
    {
        org.eclipse.jetty.util.IPAddressMap$IPAddrPattern $r9;
        java.util.Map$Entry r5;
        org.eclipse.jetty.util.IPAddressMap r1;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r6;
        java.lang.Object $r4, $r7, $r8;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.eclipse.jetty.util.IPAddressMap;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label3;

        $r2 = specialinvoke r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = r1.<org.eclipse.jetty.util.IPAddressMap: java.util.HashMap _patterns>;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (org.eclipse.jetty.util.IPAddressMap$IPAddrPattern) $r8;

        $z1 = virtualinvoke $r9.<org.eclipse.jetty.util.IPAddressMap$IPAddrPattern: boolean match(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.Object getLazyMatches(java.lang.String)
    {
        org.eclipse.jetty.util.IPAddressMap$IPAddrPattern $r9;
        java.util.Map$Entry r5;
        org.eclipse.jetty.util.IPAddressMap r1;
        java.util.Iterator $r3;
        java.util.Set $r2, $r10;
        java.util.HashMap $r6;
        java.util.List $r11;
        java.lang.Object $r4, $r7, $r8, r12;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.eclipse.jetty.util.IPAddressMap;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r10 = specialinvoke r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r11 = staticinvoke <org.eclipse.jetty.util.LazyList: java.util.List getList(java.lang.Object)>($r10);

        return $r11;

     label1:
        r12 = null;

        $r2 = specialinvoke r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = r1.<org.eclipse.jetty.util.IPAddressMap: java.util.HashMap _patterns>;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (org.eclipse.jetty.util.IPAddressMap$IPAddrPattern) $r8;

        $z1 = virtualinvoke $r9.<org.eclipse.jetty.util.IPAddressMap$IPAddrPattern: boolean match(java.lang.String)>(r0);

        if $z1 == 0 goto label3;

        r12 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(r12, r5);

     label3:
        goto label2;

     label4:
        return r12;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.eclipse.jetty.util.IPAddressMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.eclipse.jetty.util.IPAddressMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r1;

        $r4 = virtualinvoke r0.<org.eclipse.jetty.util.IPAddressMap: java.lang.Object put(java.lang.String,java.lang.Object)>($r3, r2);

        return $r4;
    }
}
