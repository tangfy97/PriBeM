public class org.springframework.instrument.classloading.ShadowingClassLoader extends org.springframework.core.DecoratingClassLoader
{
    public static final java.lang.String[] DEFAULT_EXCLUDED_PACKAGES;
    private final java.lang.ClassLoader enclosingClassLoader;
    private final java.util.List classFileTransformers;
    private final java.util.Map classCache;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[15];

        $r0[0] = "java.";

        $r0[1] = "javax.";

        $r0[2] = "sun.";

        $r0[3] = "oracle.";

        $r0[4] = "com.sun.";

        $r0[5] = "com.ibm.";

        $r0[6] = "COM.ibm.";

        $r0[7] = "org.w3c.";

        $r0[8] = "org.xml.";

        $r0[9] = "org.dom4j.";

        $r0[10] = "org.eclipse";

        $r0[11] = "org.aspectj.";

        $r0[12] = "net.sf.cglib.";

        $r0[13] = "org.apache.xerces.";

        $r0[14] = "org.apache.commons.logging.";

        <org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.String[] DEFAULT_EXCLUDED_PACKAGES> = $r0;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.util.HashMap $r2;
        java.lang.String[] $r4;
        org.springframework.instrument.classloading.ShadowingClassLoader r0;
        int i0, i1;
        java.lang.ClassLoader r3;
        java.lang.String r5;
        java.util.LinkedList $r1;

        r0 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r3 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<org.springframework.core.DecoratingClassLoader: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.List classFileTransformers> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.Map classCache> = $r2;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "Enclosing ClassLoader must not be null");

        r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.ClassLoader enclosingClassLoader> = r3;

        $r4 = <org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.String[] DEFAULT_EXCLUDED_PACKAGES>;

        i0 = lengthof $r4;

        i1 = 0;

        goto label2;

     label1:
        r5 = $r4[i1];

        virtualinvoke r0.<org.springframework.instrument.classloading.ShadowingClassLoader: void excludePackage(java.lang.String)>(r5);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        org.springframework.instrument.classloading.ShadowingClassLoader r1;
        java.lang.instrument.ClassFileTransformer r0;
        java.util.List $r2;

        r1 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Transformer must not be null");

        $r2 = r1.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.List classFileTransformers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void copyTransformers(org.springframework.instrument.classloading.ShadowingClassLoader)
    {
        java.util.List $r2, $r3;
        org.springframework.instrument.classloading.ShadowingClassLoader r0, r1;

        r1 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r0 := @parameter0: org.springframework.instrument.classloading.ShadowingClassLoader;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Other ClassLoader must not be null");

        $r3 = r1.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.List classFileTransformers>;

        $r2 = r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.List classFileTransformers>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.util.Map $r4;
        org.springframework.instrument.classloading.ShadowingClassLoader r0;
        java.lang.Class $r3, r6, $r7;
        java.lang.Object $r5;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        boolean $z0;

        r0 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.instrument.classloading.ShadowingClassLoader: boolean shouldShadow(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.Map classCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Class) $r5;

        if r6 == null goto label1;

        return r6;

     label1:
        $r7 = specialinvoke r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.Class doLoadClass(java.lang.String)>(r1);

        return $r7;

     label2:
        $r2 = r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.ClassLoader enclosingClassLoader>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        return $r3;
    }

    private boolean shouldShadow(java.lang.String)
    {
        org.springframework.instrument.classloading.ShadowingClassLoader r1;
        java.lang.Class $r2;
        java.lang.String r0, $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r0 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("ShadowingClassLoader");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<org.springframework.instrument.classloading.ShadowingClassLoader: boolean isEligibleForShadowing(java.lang.String)>(r0);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isEligibleForShadowing(java.lang.String)
    {
        org.springframework.instrument.classloading.ShadowingClassLoader r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.instrument.classloading.ShadowingClassLoader: boolean isExcluded(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    private java.lang.Class doLoadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        byte[] $r9, $r10;
        java.util.Map $r21;
        int $i0, $i1, $i3;
        java.lang.String r1, $r2, $r3, $r5, $r13, $r20;
        java.lang.Package $r12;
        java.io.IOException $r15;
        org.springframework.instrument.classloading.ShadowingClassLoader r6;
        java.lang.StringBuilder $r4, $r18, $r19, $r22, $r24;
        java.lang.Class $r11;
        java.lang.ClassNotFoundException $r23, $r25;
        java.lang.ClassLoader $r7;
        java.io.InputStream $r8;

        r6 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r22 = new java.lang.StringBuilder;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r1, ".", "/");

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r6.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.ClassLoader enclosingClassLoader>;

        $r8 = virtualinvoke $r7.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r5);

        if $r8 != null goto label1;

        $r23 = new java.lang.ClassNotFoundException;

        specialinvoke $r23.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r23;

     label1:
        $r9 = staticinvoke <org.springframework.util.FileCopyUtils: byte[] copyToByteArray(java.io.InputStream)>($r8);

        $r10 = specialinvoke r6.<org.springframework.instrument.classloading.ShadowingClassLoader: byte[] applyTransformers(java.lang.String,byte[])>(r1, $r9);

        $i0 = lengthof $r10;

        $r11 = virtualinvoke r6.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(r1, $r10, 0, $i0);

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.Package getPackage()>();

        if $r12 != null goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i1 == $i3 goto label2;

        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        virtualinvoke r6.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>($r13, null, null, null, null, null, null, null);

     label2:
        $r21 = r6.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.Map classCache>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11);

     label3:
        return $r11;

     label4:
        $r15 := @caughtexception;

        $r25 = new java.lang.ClassNotFoundException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot load resource for class [");

        $r18 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r15);

        throw $r25;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private byte[] applyTransformers(java.lang.String, byte[])
    {
        byte[] $r6, r9, $r11;
        java.lang.IllegalStateException $r8;
        java.lang.instrument.IllegalClassFormatException $r7;
        java.util.Iterator $r4;
        java.lang.instrument.ClassFileTransformer r10;
        java.util.List $r3;
        org.springframework.instrument.classloading.ShadowingClassLoader r2;
        java.lang.Object $r5;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r0 := @parameter0: java.lang.String;

        r9 := @parameter1: byte[];

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r0, ".", "/");

     label1:
        $r3 = r2.<org.springframework.instrument.classloading.ShadowingClassLoader: java.util.List classFileTransformers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.instrument.ClassFileTransformer) $r5;

        $r6 = interfaceinvoke r10.<java.lang.instrument.ClassFileTransformer: byte[] transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[])>(r2, $r1, null, null, r9);

        if $r6 == null goto label3;

        $r11 = $r6;

        goto label4;

     label3:
        $r11 = r9;

     label4:
        r9 = $r11;

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label6:
        return r9;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.instrument.IllegalClassFormatException from label1 to label6 with label7;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.net.URL $r3;
        org.springframework.instrument.classloading.ShadowingClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.ClassLoader enclosingClassLoader>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r3;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.springframework.instrument.classloading.ShadowingClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        java.io.InputStream $r3;

        r0 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.ClassLoader enclosingClassLoader>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        java.util.Enumeration $r3;
        org.springframework.instrument.classloading.ShadowingClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.springframework.instrument.classloading.ShadowingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.instrument.classloading.ShadowingClassLoader: java.lang.ClassLoader enclosingClassLoader>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        return $r3;
    }
}
