abstract class org.jsoup.helper.HttpConnection$Base extends java.lang.Object implements org.jsoup.Connection$Base
{
    java.net.URL url;
    org.jsoup.Connection$Method method;
    java.util.Map headers;
    java.util.Map cookies;

    private void <init>()
    {
        java.util.LinkedHashMap $r1, $r2;
        org.jsoup.helper.HttpConnection$Base r0;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies> = $r2;

        return;
    }

    public java.net.URL url()
    {
        org.jsoup.helper.HttpConnection$Base r0;
        java.net.URL $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 = r0.<org.jsoup.helper.HttpConnection$Base: java.net.URL url>;

        return $r1;
    }

    public org.jsoup.Connection$Base url(java.net.URL)
    {
        java.net.URL r0;
        org.jsoup.helper.HttpConnection$Base r1;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.net.URL;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "URL must not be null");

        r1.<org.jsoup.helper.HttpConnection$Base: java.net.URL url> = r0;

        return r1;
    }

    public org.jsoup.Connection$Method method()
    {
        org.jsoup.Connection$Method $r1;
        org.jsoup.helper.HttpConnection$Base r0;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 = r0.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method>;

        return $r1;
    }

    public org.jsoup.Connection$Base method(org.jsoup.Connection$Method)
    {
        org.jsoup.Connection$Method r0;
        org.jsoup.helper.HttpConnection$Base r1;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: org.jsoup.Connection$Method;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "Method must not be null");

        r1.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method> = r0;

        return r1;
    }

    public java.lang.String header(java.lang.String)
    {
        java.lang.String r0, $r2;
        org.jsoup.helper.HttpConnection$Base r1;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "Header name must not be null");

        $r2 = specialinvoke r1.<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>(r0);

        return $r2;
    }

    public org.jsoup.Connection$Base header(java.lang.String, java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Base r2;
        java.util.Map $r3;
        java.lang.String r0, r1;

        r2 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(r0, "Header name must not be empty");

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Header value must not be null");

        virtualinvoke r2.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>(r0);

        $r3 = r2.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return r2;
    }

    public boolean hasHeader(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Base r1;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(r0, "Header name must not be empty");

        $r2 = specialinvoke r1.<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>(r0);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.jsoup.Connection$Base removeHeader(java.lang.String)
    {
        java.util.Map$Entry $r2;
        org.jsoup.helper.HttpConnection$Base r1;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r0;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(r0, "Header name must not be empty");

        $r2 = specialinvoke r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>(r0);

        if $r2 == null goto label1;

        $r3 = r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r4 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

     label1:
        return r1;
    }

    public java.util.Map headers()
    {
        org.jsoup.helper.HttpConnection$Base r0;
        java.util.Map $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 = r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        return $r1;
    }

    private java.lang.String getHeaderCaseInsensitive(java.lang.String)
    {
        java.util.Map$Entry $r4;
        org.jsoup.helper.HttpConnection$Base r1;
        java.util.Map $r2, $r6;
        java.lang.Object $r3, $r5, $r8;
        java.lang.String r0, $r7, r9;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "Header name must not be null");

        $r2 = r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r9 = (java.lang.String) $r3;

        if r9 != null goto label1;

        $r6 = r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (java.lang.String) $r8;

     label1:
        if r9 != null goto label2;

        $r4 = specialinvoke r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>(r0);

        if $r4 == null goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r5;

     label2:
        return r9;
    }

    private java.util.Map$Entry scanHeaders(java.lang.String)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        org.jsoup.helper.HttpConnection$Base r2;
        java.util.Set $r4;
        java.util.Map $r3;
        java.lang.Object $r6, $r8;
        java.lang.String r0, $r1, $r9, $r10;
        boolean $z0, $z1;

        r2 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = r2.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        return r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.String cookie(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Base r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0, $r4;

        r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "Cookie name must not be null");

        $r2 = r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public org.jsoup.Connection$Base cookie(java.lang.String, java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Base r2;
        java.util.Map $r3;
        java.lang.String r0, r1;

        r2 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(r0, "Cookie name must not be empty");

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Cookie value must not be null");

        $r3 = r2.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return r2;
    }

    public boolean hasCookie(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Base r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>("Cookie name must not be empty");

        $r2 = r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public org.jsoup.Connection$Base removeCookie(java.lang.String)
    {
        java.lang.String r1;
        org.jsoup.helper.HttpConnection$Base r0;
        java.util.Map $r2;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>("Cookie name must not be empty");

        $r2 = r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return r0;
    }

    public java.util.Map cookies()
    {
        org.jsoup.helper.HttpConnection$Base r0;
        java.util.Map $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 = r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        return $r1;
    }

    void <init>(org.jsoup.helper.HttpConnection$1)
    {
        org.jsoup.helper.HttpConnection$1 r1;
        org.jsoup.helper.HttpConnection$Base r0;

        r0 := @this: org.jsoup.helper.HttpConnection$Base;

        r1 := @parameter0: org.jsoup.helper.HttpConnection$1;

        specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: void <init>()>();

        return;
    }
}
