final class org.waveprotocol.wave.model.util.EvaluableOffsetList$Node extends java.lang.Object implements org.waveprotocol.wave.model.util.EvaluableOffsetList$Container
{
    private java.lang.Object value;
    private java.lang.Object subtreeComputation;
    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent;
    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild;
    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild;
    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer;
    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer;
    private int offset;
    private int size;
    private int height;
    static final boolean $assertionsDisabled;

    private void <init>(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object value> = r1;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size> = i0;

        return;
    }

    public org.waveprotocol.wave.model.util.EvaluableOffsetList$Container getPreviousContainer()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer>;

        return $r1;
    }

    public org.waveprotocol.wave.model.util.EvaluableOffsetList$Container getNextContainer()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        return $r1;
    }

    public java.lang.Object getValue()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object value>;

        return $r1;
    }

    public void setValue(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: java.lang.Object;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object value> = r1;

        return;
    }

    public int offset()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1, r2, r3;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        i3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        r2 = r0;

        r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

     label1:
        if r3 == null goto label3;

        $r1 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        if $r1 != r2 goto label2;

        $i1 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i0 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i2 = $i1 + $i0;

        i3 = i3 + $i2;

     label2:
        r2 = r3;

        r3 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        goto label1;

     label3:
        return i3;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $i0 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        return $i0;
    }

    public org.waveprotocol.wave.model.util.EvaluableOffsetList$Container insertBefore(java.lang.Object, int)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node $r0, r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;

        r2 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void <init>(java.lang.Object,int)>(r1, i0);

        $r3 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer>;

        $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = $r3;

        $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = r2;

        $r4 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer>;

        $r4.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = $r0;

        r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = $r0;

        $r5 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        if $r5 != null goto label1;

        specialinvoke r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setLeftChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r0);

        goto label2;

     label1:
        $r6 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        $r7 = specialinvoke $r6.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node getLastInSubtree()>();

        specialinvoke $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setRightChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r0);

     label2:
        $i2 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i1 = $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i3 = $i2 + $i1;

        r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i3;

        $i4 = $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        specialinvoke r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void correctOffsets(int)>($i4);

        $r8 = $r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        specialinvoke $r8.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void rebalance()>();

        return $r0;
    }

    public void remove()
    {
        java.lang.AssertionError $r16;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r17, $r18;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r15 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        if $r15 != null goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer>;

        $r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = $r1;

        $r4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer>;

        $r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r4.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = $r3;

        $i0 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i1 = neg $i0;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void correctOffsets(int)>($i1);

        $r5 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        if $r5 != null goto label2;

        $r13 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void replaceWith(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r13);

        $r14 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        specialinvoke $r14.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void rebalance()>();

        goto label7;

     label2:
        $r6 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        $r7 = specialinvoke $r6.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node getFirstInSubtree()>();

        r8 = $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        i2 = $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        r17 = r8;

     label3:
        if r17 == r0 goto label4;

        $i5 = r17.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i6 = $i5 - i2;

        r17.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i6;

        r17 = r17.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        goto label3;

     label4:
        $r9 = $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        specialinvoke $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void replaceWith(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r9);

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void replaceWith(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r7);

        $r10 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        specialinvoke $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setLeftChildSafely(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r10);

        $r11 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        specialinvoke $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setRightChildSafely(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r11);

        $i3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i3;

        $i4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height> = $i4;

        $r12 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        virtualinvoke $r12.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void invalidate()>();

        if r8 == r0 goto label5;

        $r18 = r8;

        goto label6;

     label5:
        $r18 = $r7;

     label6:
        specialinvoke $r18.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void rebalance()>();

     label7:
        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = null;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = null;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent> = null;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild> = null;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild> = null;

        return;
    }

    public org.waveprotocol.wave.model.util.EvaluableOffsetList$Container split(int, java.lang.Object)
    {
        java.lang.AssertionError $r8, $r9;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1, $r3, $r4, $r5, $r6, $r7, r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        java.lang.Object r2;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i6 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        if i0 <= $i6 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $i1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i7 = $i1 - i0;

        $r1 = new org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void <init>(java.lang.Object,int)>(r2, $i7);

        $r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = $r3;

        $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = r0;

        $r4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        $r4.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = $r1;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = $r1;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size> = i0;

        $r5 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        if $r5 != null goto label3;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setRightChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r1);

        goto label6;

     label3:
        r10 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

     label4:
        $r6 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        if $r6 == null goto label5;

        $i4 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i5 = $i4 + $i7;

        r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i5;

        r10 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        goto label4;

     label5:
        $i2 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i3 = $i2 + $i7;

        r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i3;

        specialinvoke r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setLeftChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r1);

     label6:
        $r7 = $r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        specialinvoke $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void rebalance()>();

        return $r1;
    }

    public void increaseSize(int)
    {
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i3 = neg i0;

        if $i4 >= $i3 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size> = $i2;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void correctOffsets(int)>(i0);

        return;
    }

    public void invalidate()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation>;

        if $r1 == null goto label1;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation> = null;

        $r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void invalidate()>();

     label1:
        return;
    }

    private void rebalance()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void invalidate()>();

        r10 = r0;

     label1:
        $r1 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        if $r1 == null goto label8;

        i0 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        $r2 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r2);

        $r3 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r3);

        $i3 = $i1 + 2;

        if $i2 != $i3 goto label3;

        $r7 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        $r8 = $r7.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        $i9 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r8);

        $i10 = $i2 - 1;

        if $i9 == $i10 goto label2;

        $r9 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        specialinvoke $r9.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rotateRight()>();

     label2:
        r10 = specialinvoke r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rotateLeft()>();

        goto label6;

     label3:
        $i4 = $i2 + 2;

        if $i1 != $i4 goto label5;

        $r4 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        $r5 = $r4.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        $i7 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>($r5);

        $i8 = $i1 - 1;

        if $i7 == $i8 goto label4;

        $r6 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        specialinvoke $r6.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rotateLeft()>();

     label4:
        r10 = specialinvoke r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rotateRight()>();

        goto label6;

     label5:
        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i6 = $i5 + 1;

        r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height> = $i6;

     label6:
        $i11 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        if $i11 != i0 goto label7;

        goto label8;

     label7:
        r10 = r10.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        goto label1;

     label8:
        return;
    }

    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rotateLeft()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        r2 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void replaceWith(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setRightChildSafely(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r2);

        specialinvoke r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setLeftChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        $i0 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r2);

        $i1 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r3);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i3 = $i2 + 1;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height> = $i3;

        $i4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        $i6 = $i4 + 1;

        $i5 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        if $i6 <= $i5 goto label1;

        $i12 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        $i13 = $i12 + 1;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height> = $i13;

     label1:
        $i10 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i8 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i7 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i9 = $i8 + $i7;

        $i11 = $i10 + $i9;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i11;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation> = null;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation> = null;

        return r1;
    }

    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rotateRight()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        r2 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void replaceWith(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setLeftChildSafely(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r2);

        specialinvoke r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void setRightChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r0);

        $i0 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r2);

        $i1 = staticinvoke <org.waveprotocol.wave.model.util.EvaluableOffsetList: int access$000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)>(r3);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i3 = $i2 + 1;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height> = $i3;

        $i4 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        $i6 = $i4 + 1;

        $i5 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        if $i6 <= $i5 goto label1;

        $i12 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        $i13 = $i12 + 1;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height> = $i13;

     label1:
        $i10 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i8 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i7 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        $i9 = $i8 + $i7;

        $i11 = $i10 - $i9;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i11;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation> = null;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation> = null;

        return r1;
    }

    private void correctOffsets(int)
    {
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1, r2, r3;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        i0 := @parameter0: int;

        r2 = r0;

        r3 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

     label1:
        if r3 == null goto label3;

        $r1 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        if $r1 != r2 goto label2;

        $i1 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        $i2 = $i1 + i0;

        r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset> = $i2;

     label2:
        r2 = r3;

        r3 = r3.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        goto label1;

     label3:
        return;
    }

    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node getFirstInSubtree()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1, r2;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 = r0;

        r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

     label1:
        if r2 == null goto label2;

        r1 = r2;

        r2 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        goto label1;

     label2:
        return r1;
    }

    private org.waveprotocol.wave.model.util.EvaluableOffsetList$Node getLastInSubtree()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1, r2;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 = r0;

        r2 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

     label1:
        if r2 == null goto label2;

        r1 = r2;

        r2 = r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        goto label1;

     label2:
        return r1;
    }

    private void setLeftChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild> = r1;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent> = r0;

        return;
    }

    private void setRightChild(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild> = r1;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent> = r0;

        return;
    }

    private void setLeftChildSafely(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild> = r1;

        if r1 == null goto label1;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent> = r0;

     label1:
        return;
    }

    private void setRightChildSafely(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild> = r1;

        if r1 == null goto label1;

        r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent> = r0;

     label1:
        return;
    }

    private void replaceWith(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        java.lang.AssertionError $r8;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $z0 = <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        if $r7 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        if r0 == null goto label2;

        $r6 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent> = $r6;

     label2:
        $r2 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        $r3 = $r2.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        if $r3 != r1 goto label3;

        $r5 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        $r5.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild> = r0;

        goto label4;

     label3:
        $r4 = r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node parent>;

        $r4.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild> = r0;

     label4:
        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r7;
        java.lang.Object $r6;
        java.lang.String $r8;

        r1 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object getValue()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container split(int, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r2;
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container split(int,java.lang.Object)>(i0, r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container insertBefore(java.lang.Object, int)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r2;
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container insertBefore(java.lang.Object,int)>(r1, i0);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container getNextContainer()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container getPreviousContainer()>();

        return $r1;
    }

    void <init>(java.lang.Object, int, org.waveprotocol.wave.model.util.EvaluableOffsetList$1)
    {
        int i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$1 r2;

        r0 := @this: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.util.EvaluableOffsetList$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: void <init>(java.lang.Object,int)>(r1, i0);

        return;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$202(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node, org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node previousContainer> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$302(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node, org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter1: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$300(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node nextContainer>;

        return $r1;
    }

    static int access$400(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        int $i0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $i0 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int offset>;

        return $i0;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$500(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node leftChild>;

        return $r1;
    }

    static int access$600(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        int $i0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $i0 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int size>;

        return $i0;
    }

    static org.waveprotocol.wave.model.util.EvaluableOffsetList$Node access$700(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node rightChild>;

        return $r1;
    }

    static java.lang.Object access$900(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object value>;

        return $r1;
    }

    static java.lang.Object access$1000(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation>;

        return $r1;
    }

    static java.lang.Object access$1002(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node, java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        r1 := @parameter1: java.lang.Object;

        r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: java.lang.Object subtreeComputation> = r1;

        return r1;
    }

    static int access$1100(org.waveprotocol.wave.model.util.EvaluableOffsetList$Node)
    {
        int $i0;
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Node r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.EvaluableOffsetList$Node;

        $i0 = r0.<org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: int height>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/util/EvaluableOffsetList;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.util.EvaluableOffsetList$Node: boolean $assertionsDisabled> = $z1;

        return;
    }
}
