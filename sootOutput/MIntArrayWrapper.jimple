class MIntArrayWrapper extends java.lang.Object
{
    private int hashCode;
    private int[] theArray;
    private int length;

    void <init>(int[])
    {
        int[] r1;
        int $i0, $i1;
        MIntArrayWrapper r0;

        r0 := @this: MIntArrayWrapper;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<MIntArrayWrapper: int[] theArray> = r1;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(int[])>(r1);

        r0.<MIntArrayWrapper: int hashCode> = $i0;

        $i1 = lengthof r1;

        r0.<MIntArrayWrapper: int length> = $i1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r3, $r4;
        java.lang.Object r0;
        MIntArrayWrapper r1, $r2;
        boolean $z0, $z1;

        r1 := @this: MIntArrayWrapper;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof MIntArrayWrapper;

        if $z0 == 0 goto label1;

        $r4 = r1.<MIntArrayWrapper: int[] theArray>;

        $r2 = (MIntArrayWrapper) r0;

        $r3 = $r2.<MIntArrayWrapper: int[] theArray>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r4, $r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        MIntArrayWrapper r0;

        r0 := @this: MIntArrayWrapper;

        $i0 = r0.<MIntArrayWrapper: int hashCode>;

        return $i0;
    }

    public int size()
    {
        int $i0;
        MIntArrayWrapper r0;

        r0 := @this: MIntArrayWrapper;

        $i0 = r0.<MIntArrayWrapper: int length>;

        return $i0;
    }

    public int get(int)
    {
        int[] $r1;
        int i0, $i1;
        MIntArrayWrapper r0;

        r0 := @this: MIntArrayWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<MIntArrayWrapper: int[] theArray>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int[] getArray()
    {
        MIntArrayWrapper r0;
        int[] $r1;

        r0 := @this: MIntArrayWrapper;

        $r1 = r0.<MIntArrayWrapper: int[] theArray>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2;
        java.lang.String $r2;
        MIntArrayWrapper r1;

        r1 := @this: MIntArrayWrapper;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<MIntArrayWrapper: int get(int)>(i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i2 = i2 + 1;

     label2:
        $i0 = virtualinvoke r1.<MIntArrayWrapper: int size()>();

        if i2 < $i0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
