public class org.apache.batik.parser.PointsParser extends org.apache.batik.parser.NumberParser
{
    protected org.apache.batik.parser.PointsHandler pointsHandler;
    protected boolean eRead;

    public void <init>()
    {
        org.apache.batik.parser.DefaultPointsHandler $r1;
        org.apache.batik.parser.PointsParser r0;

        r0 := @this: org.apache.batik.parser.PointsParser;

        specialinvoke r0.<org.apache.batik.parser.NumberParser: void <init>()>();

        $r1 = <org.apache.batik.parser.DefaultPointsHandler: org.apache.batik.parser.DefaultPointsHandler INSTANCE>;

        r0.<org.apache.batik.parser.PointsParser: org.apache.batik.parser.PointsHandler pointsHandler> = $r1;

        return;
    }

    public void setPointsHandler(org.apache.batik.parser.PointsHandler)
    {
        org.apache.batik.parser.PointsHandler r1;
        org.apache.batik.parser.PointsParser r0;

        r0 := @this: org.apache.batik.parser.PointsParser;

        r1 := @parameter0: org.apache.batik.parser.PointsHandler;

        r0.<org.apache.batik.parser.PointsParser: org.apache.batik.parser.PointsHandler pointsHandler> = r1;

        return;
    }

    public org.apache.batik.parser.PointsHandler getPointsHandler()
    {
        org.apache.batik.parser.PointsHandler $r1;
        org.apache.batik.parser.PointsParser r0;

        r0 := @this: org.apache.batik.parser.PointsParser;

        $r1 = r0.<org.apache.batik.parser.PointsParser: org.apache.batik.parser.PointsHandler pointsHandler>;

        return $r1;
    }

    protected void doParse() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.parser.PointsParser r0;
        org.apache.batik.util.io.NormalizingReader $r2;
        org.apache.batik.parser.PointsHandler $r1, $r3, $r4;
        int $i0, $i1, $i3;
        float $f0, $f1;

        r0 := @this: org.apache.batik.parser.PointsParser;

        $r1 = r0.<org.apache.batik.parser.PointsParser: org.apache.batik.parser.PointsHandler pointsHandler>;

        interfaceinvoke $r1.<org.apache.batik.parser.PointsHandler: void startPoints()>();

        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        goto label1;

     label1:
        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        $i3 = (int) -1;

        if $i1 != $i3 goto label2;

        goto label3;

     label2:
        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        $r3 = r0.<org.apache.batik.parser.PointsParser: org.apache.batik.parser.PointsHandler pointsHandler>;

        interfaceinvoke $r3.<org.apache.batik.parser.PointsHandler: void point(float,float)>($f0, $f1);

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        goto label1;

     label3:
        $r4 = r0.<org.apache.batik.parser.PointsParser: org.apache.batik.parser.PointsHandler pointsHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.PointsHandler: void endPoints()>();

        return;
    }
}
