class org.apache.cxf.common.util.ASMHelper$1 extends java.lang.Object implements org.apache.cxf.common.util.ASMHelper$ASMType
{
    java.lang.Object tp;
    final java.lang.reflect.Method val$m;
    final java.lang.String val$type;
    final java.lang.Class val$cls;
    final java.lang.reflect.Method val$m2;
    final org.apache.cxf.common.util.ASMHelper this$0;

    void <init>(org.apache.cxf.common.util.ASMHelper, java.lang.reflect.Method, java.lang.String, java.lang.Class, java.lang.reflect.Method) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        java.lang.reflect.AccessibleObject $r7;
        java.lang.Object[] $r8;
        org.apache.cxf.common.util.ASMHelper$1 r0;
        org.apache.cxf.common.util.ASMHelper r1;
        java.lang.Class r4;
        java.lang.Object $r11;
        java.lang.String r3, $r9;
        java.lang.reflect.Method r2, r5, $r6, $r10;

        r0 := @this: org.apache.cxf.common.util.ASMHelper$1;

        r1 := @parameter0: org.apache.cxf.common.util.ASMHelper;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Class;

        r5 := @parameter4: java.lang.reflect.Method;

        r0.<org.apache.cxf.common.util.ASMHelper$1: org.apache.cxf.common.util.ASMHelper this$0> = r1;

        r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.reflect.Method val$m> = r2;

        r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.String val$type> = r3;

        r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.Class val$cls> = r4;

        r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.reflect.Method val$m2> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.reflect.Method val$m>;

        $r7 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r6);

        $r10 = (java.lang.reflect.Method) $r7;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.String val$type>;

        $r8[0] = $r9;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.Object tp> = $r11;

        return;
    }

    public java.lang.Object getValue()
    {
        java.lang.Object $r1;
        org.apache.cxf.common.util.ASMHelper$1 r0;

        r0 := @this: org.apache.cxf.common.util.ASMHelper$1;

        $r1 = r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.Object tp>;

        return $r1;
    }

    public java.lang.Class realType()
    {
        java.lang.Class $r1;
        org.apache.cxf.common.util.ASMHelper$1 r0;

        r0 := @this: org.apache.cxf.common.util.ASMHelper$1;

        $r1 = r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.Class val$cls>;

        return $r1;
    }

    public int getOpcode(int)
    {
        java.lang.reflect.AccessibleObject $r2;
        java.lang.Object[] $r3;
        org.apache.cxf.common.util.ASMHelper$1 r0;
        java.lang.RuntimeException $r10;
        java.lang.Integer $r6, $r8;
        java.lang.Exception $r9;
        int i0, $i1;
        java.lang.Object $r5, $r7;
        java.lang.reflect.Method $r1, $r4;

        r0 := @this: org.apache.cxf.common.util.ASMHelper$1;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.reflect.Method val$m2>;

        $r2 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r1);

        $r4 = (java.lang.reflect.Method) $r2;

        $r5 = r0.<org.apache.cxf.common.util.ASMHelper$1: java.lang.Object tp>;

        $r3 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r3);

        $r8 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

     label2:
        return $i1;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
