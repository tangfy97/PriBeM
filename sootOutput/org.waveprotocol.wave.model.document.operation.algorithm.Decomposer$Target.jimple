final class org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor
{
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp;
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp;

    private void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r1, $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.OperationNormalizer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor createNormalizer(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r1);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp> = $r2;

        $r3 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.OperationNormalizer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor createNormalizer(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r3);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp> = $r4;

        return;
    }

    public org.waveprotocol.wave.model.util.Pair finish()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r1;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r4;
        java.lang.Object $r3, $r5;
        org.waveprotocol.wave.model.util.Pair $r0;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        $r0 = new org.waveprotocol.wave.model.util.Pair;

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: java.lang.Object finish()>();

        $r4 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: java.lang.Object finish()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r5);

        return $r0;
    }

    public void retain(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r2;
        int i0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        return;
    }

    public void characters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r3;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void characters(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>($i0);

        return;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r4;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        return;
    }

    public void elementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void elementEnd()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        return;
    }

    public void deleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r3;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>($i0);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteCharacters(java.lang.String)>(r1);

        return;
    }

    public void deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r4;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        return;
    }

    public void deleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementEnd()>();

        return;
    }

    public void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r4;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        return;
    }

    public void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r3;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor insertionOp>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r2);

        return;
    }

    public void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r1;
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor noninsertionOp>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r1);

        return;
    }

    public volatile java.lang.Object finish()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.util.Pair $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: org.waveprotocol.wave.model.util.Pair finish()>();

        return $r1;
    }

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$1)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target r0;
        org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$1 r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.Decomposer$Target: void <init>()>();

        return;
    }
}
