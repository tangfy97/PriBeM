public class org.apache.batik.swing.svg.AbstractJSVGComponent extends org.apache.batik.swing.gvt.JGVTComponent
{
    public static final int AUTODETECT;
    public static final int ALWAYS_DYNAMIC;
    public static final int ALWAYS_STATIC;
    public static final int ALWAYS_INTERACTIVE;
    public static final java.lang.String SCRIPT_ALERT;
    public static final java.lang.String SCRIPT_PROMPT;
    public static final java.lang.String SCRIPT_CONFIRM;
    public static final java.lang.String BROKEN_LINK_TITLE;
    protected org.apache.batik.swing.svg.SVGDocumentLoader documentLoader;
    protected org.apache.batik.swing.svg.SVGDocumentLoader nextDocumentLoader;
    protected org.apache.batik.bridge.DocumentLoader loader;
    protected org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder;
    protected org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder;
    protected org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher;
    protected org.apache.batik.bridge.UpdateManager updateManager;
    protected org.apache.batik.bridge.UpdateManager nextUpdateManager;
    protected org.w3c.dom.svg.SVGDocument svgDocument;
    protected java.util.List svgDocumentLoaderListeners;
    protected java.util.List gvtTreeBuilderListeners;
    protected java.util.List svgLoadEventDispatcherListeners;
    protected java.util.List linkActivationListeners;
    protected java.util.List updateManagerListeners;
    protected org.apache.batik.bridge.UserAgent userAgent;
    protected org.apache.batik.swing.svg.SVGUserAgent svgUserAgent;
    protected org.apache.batik.bridge.BridgeContext bridgeContext;
    protected java.lang.String fragmentIdentifier;
    protected boolean isDynamicDocument;
    protected boolean isInteractiveDocument;
    protected boolean selfCallingDisableInteractions;
    protected boolean userSetDisableInteractions;
    protected int documentState;
    protected java.awt.Dimension prevComponentSize;
    protected java.lang.Runnable afterStopRunnable;
    protected org.apache.batik.swing.svg.SVGUpdateOverlay updateOverlay;
    protected boolean recenterOnResize;
    protected java.awt.geom.AffineTransform viewingTransform;
    protected int animationLimitingMode;
    protected float animationLimitingAmount;
    protected org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener jsvgComponentListener;
    protected static final java.util.Set FEATURES;

    public void <init>()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void <init>(org.apache.batik.swing.svg.SVGUserAgent,boolean,boolean)>(null, 0, 0);

        return;
    }

    public void <init>(org.apache.batik.swing.svg.SVGUserAgent, boolean, boolean)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.LinkedList $r1, $r2, $r3, $r4, $r5;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper $r8;
        org.apache.batik.swing.svg.SVGUserAgent r7;
        boolean z0, z1;
        org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener $r10, $r12, $r14;
        org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener $r11, $r13, $r15;
        org.apache.batik.bridge.UserAgent $r9;
        java.util.List $r17;
        org.apache.batik.swing.svg.SVGUpdateOverlay $r16, $r18;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener $r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r7 := @parameter0: org.apache.batik.swing.svg.SVGUserAgent;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<org.apache.batik.swing.gvt.JGVTComponent: void <init>(boolean,boolean)>(z0, z1);

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgDocumentLoaderListeners> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List gvtTreeBuilderListeners> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgLoadEventDispatcherListeners> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List linkActivationListeners> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List updateManagerListeners> = $r5;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean selfCallingDisableInteractions> = 0;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean userSetDisableInteractions> = 0;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.Runnable afterStopRunnable> = null;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean recenterOnResize> = 1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform viewingTransform> = null;

        $r6 = new org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener;

        specialinvoke $r6.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent)>(r0);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener jsvgComponentListener> = $r6;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent> = r7;

        $r8 = new org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $r9 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent createUserAgent()>();

        specialinvoke $r8.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void <init>(org.apache.batik.bridge.UserAgent)>($r9);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent userAgent> = $r8;

        $r10 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        $r11 = (org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener) $r10;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void addSVGDocumentLoaderListener(org.apache.batik.swing.svg.SVGDocumentLoaderListener)>($r11);

        $r12 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        $r13 = (org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener) $r12;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void addGVTTreeBuilderListener(org.apache.batik.swing.svg.GVTTreeBuilderListener)>($r13);

        $r14 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener listener>;

        $r15 = (org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener) $r14;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void addSVGLoadEventDispatcherListener(org.apache.batik.swing.svg.SVGLoadEventDispatcherListener)>($r15);

        $r16 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUpdateOverlay updateOverlay>;

        if $r16 == null goto label1;

        $r17 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.util.List getOverlays()>();

        $r18 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUpdateOverlay updateOverlay>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);

     label1:
        return;
    }

    public void dispose()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setSVGDocument(org.w3c.dom.svg.SVGDocument)>(null);

        return;
    }

    public void setDisableInteractions(boolean)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setDisableInteractions(boolean)>(z0);

        $z1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean selfCallingDisableInteractions>;

        if $z1 != 0 goto label1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean userSetDisableInteractions> = 1;

     label1:
        return;
    }

    public void clearUserSetDisableInteractions()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.w3c.dom.svg.SVGDocument $r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean userSetDisableInteractions> = 0;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void updateZoomAndPanEnable(org.w3c.dom.Document)>($r1);

        return;
    }

    public void updateZoomAndPanEnable(org.w3c.dom.Document)
    {
        java.lang.Throwable $r5;
        org.w3c.dom.Element $r2;
        org.w3c.dom.Document r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.w3c.dom.Document;

        $z0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean userSetDisableInteractions>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if r1 != null goto label02;

        return;

     label02:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "zoomAndPan");

        $r4 = "magnify";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean selfCallingDisableInteractions> = 1;

        if $z1 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setDisableInteractions(boolean)>($z2);

        goto label09;

     label05:
        goto label08;

     label06:
        $r5 := @caughtexception;

        goto label10;

     label07:
        throw $r5;

     label08:
        return;

     label09:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean selfCallingDisableInteractions> = 0;

        goto label05;

     label10:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean selfCallingDisableInteractions> = 0;

        goto label07;

        catch java.lang.Throwable from label02 to label06 with label06;
    }

    public boolean getRecenterOnResize()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean recenterOnResize>;

        return $z0;
    }

    public void setRecenterOnResize(boolean)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean recenterOnResize> = z0;

        return;
    }

    public boolean isDynamic()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument>;

        return $z0;
    }

    public boolean isInteractive()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument>;

        return $z0;
    }

    public void setDocumentState(int)
    {
        int i0;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        i0 := @parameter0: int;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: int documentState> = i0;

        return;
    }

    public org.apache.batik.bridge.UpdateManager getUpdateManager()
    {
        org.apache.batik.swing.svg.SVGLoadEventDispatcher $r1, $r5;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.bridge.UpdateManager $r2, $r3, $r4, $r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        $r6 = virtualinvoke $r5.<org.apache.batik.swing.svg.SVGLoadEventDispatcher: org.apache.batik.bridge.UpdateManager getUpdateManager()>();

        return $r6;

     label1:
        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager nextUpdateManager>;

        if $r2 == null goto label2;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager nextUpdateManager>;

        return $r4;

     label2:
        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        return $r3;
    }

    public void resumeProcessing()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.bridge.UpdateManager $r1, $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: void resume()>();

     label1:
        return;
    }

    public void suspendProcessing()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.bridge.UpdateManager $r1, $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: void suspend()>();

     label1:
        return;
    }

    public void stopProcessing()
    {
        org.apache.batik.swing.svg.GVTTreeBuilder $r2, $r9;
        org.apache.batik.swing.svg.SVGLoadEventDispatcher $r3, $r8;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.SVGDocumentLoader $r1, $r10;
        org.apache.batik.bridge.UpdateManager $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader nextDocumentLoader> = null;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder> = null;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader documentLoader>;

        if $r1 == null goto label1;

        $r10 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader documentLoader>;

        virtualinvoke $r10.<org.apache.batik.util.HaltingThread: void halt()>();

     label1:
        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder>;

        if $r2 == null goto label2;

        $r9 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder>;

        virtualinvoke $r9.<org.apache.batik.util.HaltingThread: void halt()>();

     label2:
        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        if $r3 == null goto label3;

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        virtualinvoke $r8.<org.apache.batik.util.HaltingThread: void halt()>();

     label3:
        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager nextUpdateManager>;

        if $r4 == null goto label4;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager nextUpdateManager>;

        virtualinvoke $r7.<org.apache.batik.bridge.UpdateManager: void interrupt()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager nextUpdateManager> = null;

     label4:
        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r5 == null goto label5;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        virtualinvoke $r6.<org.apache.batik.bridge.UpdateManager: void interrupt()>();

     label5:
        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void stopProcessing()>();

        return;
    }

    public void loadSVGDocument(java.lang.String)
    {
        org.apache.batik.util.ParsedURL $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$1 $r4;
        org.w3c.dom.svg.SVGDocument $r1, $r5;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String r3, r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r3 := @parameter0: java.lang.String;

        r6 = null;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        r6 = interfaceinvoke $r5.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

     label1:
        $r2 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r2.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>(r6, r3);

        $r4 = new org.apache.batik.swing.svg.AbstractJSVGComponent$1;

        specialinvoke $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent$1: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent,org.apache.batik.util.ParsedURL)>(r0, $r2);

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void stopThenRun(java.lang.Runnable)>($r4);

        return;
    }

    private void startDocumentLoader()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.SVGDocumentLoader $r1, $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader nextDocumentLoader>;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader documentLoader> = $r1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader nextDocumentLoader> = null;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader documentLoader>;

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        return;
    }

    public void setDocument(org.w3c.dom.Document)
    {
        org.w3c.dom.svg.SVGDocument $r4;
        org.w3c.dom.Document r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.w3c.dom.DOMImplementation $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r3 := @parameter0: org.w3c.dom.Document;

        if r3 == null goto label1;

        $r1 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        $z0 = $r1 instanceof org.apache.batik.dom.svg.SVGDOMImplementation;

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        r3 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: org.w3c.dom.Document deepCloneDocument(org.w3c.dom.Document,org.w3c.dom.DOMImplementation)>(r3, $r2);

     label1:
        $r4 = (org.w3c.dom.svg.SVGDocument) r3;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setSVGDocument(org.w3c.dom.svg.SVGDocument)>($r4);

        return;
    }

    public void setSVGDocument(org.w3c.dom.svg.SVGDocument)
    {
        org.w3c.dom.svg.SVGDocument r4;
        org.w3c.dom.Document $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$2 $r5;
        org.w3c.dom.DOMImplementation $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r4 := @parameter0: org.w3c.dom.svg.SVGDocument;

        if r4 == null goto label1;

        $r1 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        $z0 = $r1 instanceof org.apache.batik.dom.svg.SVGDOMImplementation;

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        $r3 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: org.w3c.dom.Document deepCloneDocument(org.w3c.dom.Document,org.w3c.dom.DOMImplementation)>(r4, $r2);

        r4 = (org.w3c.dom.svg.SVGDocument) $r3;

     label1:
        $r5 = new org.apache.batik.swing.svg.AbstractJSVGComponent$2;

        specialinvoke $r5.<org.apache.batik.swing.svg.AbstractJSVGComponent$2: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent,org.w3c.dom.svg.SVGDocument)>(r0, r4);

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void stopThenRun(java.lang.Runnable)>($r5);

        return;
    }

    protected void stopThenRun(java.lang.Runnable)
    {
        org.apache.batik.swing.gvt.GVTTreeRenderer $r5;
        java.lang.Runnable $r1, r2, r9;
        org.apache.batik.swing.svg.GVTTreeBuilder $r4;
        org.apache.batik.swing.svg.SVGLoadEventDispatcher $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.SVGDocumentLoader $r3;
        org.apache.batik.bridge.UpdateManager $r7, $r8;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.Runnable afterStopRunnable>;

        if $r1 == null goto label1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.Runnable afterStopRunnable> = r2;

        return;

     label1:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.Runnable afterStopRunnable> = r2;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void stopProcessing()>();

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader documentLoader>;

        if $r3 != null goto label2;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder>;

        if $r4 != null goto label2;

        $r5 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        if $r5 != null goto label2;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        if $r6 != null goto label2;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager nextUpdateManager>;

        if $r7 != null goto label2;

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r8 != null goto label2;

        r9 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.Runnable afterStopRunnable>;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.Runnable afterStopRunnable> = null;

        interfaceinvoke r9.<java.lang.Runnable: void run()>();

     label2:
        return;
    }

    protected void installSVGDocument(org.w3c.dom.svg.SVGDocument)
    {
        org.apache.batik.swing.svg.GVTTreeBuilder $r5, $r8, $r21, $r23;
        org.apache.batik.swing.svg.GVTTreeBuilderListener $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.batik.bridge.BridgeContext $r2, $r4, $r13, $r14, $r15, $r16, $r20, $r22;
        java.awt.geom.AffineTransform $r17, $r18;
        java.util.List $r24;
        org.apache.batik.swing.svg.SVGLoadEventDispatcher $r11;
        java.awt.Rectangle $r19;
        org.w3c.dom.svg.SVGDocument r1;
        org.apache.batik.swing.gvt.GVTTreeRenderer $r10;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.Iterator $r25;
        org.apache.batik.dom.svg.SVGOMDocument $r3;
        org.apache.batik.swing.svg.SVGDocumentLoader $r9;
        java.lang.Object $r6;
        org.apache.batik.bridge.UpdateManager $r12;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.w3c.dom.svg.SVGDocument;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument> = r1;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        if $r2 == null goto label01;

        $r20 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        virtualinvoke $r20.<org.apache.batik.bridge.BridgeContext: void dispose()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext> = null;

     label01:
        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void releaseRenderingReferences()>();

        if r1 != null goto label02;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument> = 0;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument> = 0;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean disableInteractions> = 1;

        $r17 = new java.awt.geom.AffineTransform;

        specialinvoke $r17.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform> = $r17;

        $r18 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>($r18, 0);

        $r19 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.Rectangle getRenderRect()>();

        $i4 = $r19.<java.awt.Rectangle: int x>;

        $i3 = $r19.<java.awt.Rectangle: int y>;

        $i2 = $r19.<java.awt.Rectangle: int width>;

        $i1 = $r19.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Component: void repaint(int,int,int,int)>($i4, $i3, $i2, $i1);

        return;

     label02:
        $r3 = (org.apache.batik.dom.svg.SVGOMDocument) r1;

        $r4 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext createBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)>($r3);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext> = $r4;

        $i0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: int documentState>;

        tableswitch($i0)
        {
            case 0: goto label06;
            case 1: goto label05;
            case 2: goto label03;
            case 3: goto label04;
            default: goto label10;
        };

     label03:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument> = 0;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument> = 0;

        goto label10;

     label04:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument> = 0;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument> = 1;

        goto label10;

     label05:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument> = 1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument> = 1;

        goto label10;

     label06:
        $r15 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $z2 = virtualinvoke $r15.<org.apache.batik.bridge.BridgeContext: boolean isDynamicDocument(org.w3c.dom.Document)>(r1);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument> = $z2;

        $z3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument>;

        if $z3 != 0 goto label07;

        $r16 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $z4 = virtualinvoke $r16.<org.apache.batik.bridge.BridgeContext: boolean isInteractiveDocument(org.w3c.dom.Document)>(r1);

        if $z4 == 0 goto label08;

     label07:
        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument> = $z5;

     label10:
        $z6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument>;

        if $z6 == 0 goto label12;

        $z1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument>;

        if $z1 == 0 goto label11;

        $r14 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        virtualinvoke $r14.<org.apache.batik.bridge.BridgeContext: void setDynamicState(int)>(2);

        goto label12;

     label11:
        $r13 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        virtualinvoke $r13.<org.apache.batik.bridge.BridgeContext: void setDynamicState(int)>(1);

     label12:
        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setBridgeContextAnimationLimitingMode()>();

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void updateZoomAndPanEnable(org.w3c.dom.Document)>(r1);

        $r21 = new org.apache.batik.swing.svg.GVTTreeBuilder;

        $r22 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        specialinvoke $r21.<org.apache.batik.swing.svg.GVTTreeBuilder: void <init>(org.w3c.dom.svg.SVGDocument,org.apache.batik.bridge.BridgeContext)>(r1, $r22);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder> = $r21;

        $r23 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder>;

        virtualinvoke $r23.<java.lang.Thread: void setPriority(int)>(1);

        $r24 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List gvtTreeBuilderListeners>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder>;

        $r6 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.batik.swing.svg.GVTTreeBuilderListener) $r6;

        virtualinvoke $r5.<org.apache.batik.swing.svg.GVTTreeBuilder: void addGVTTreeBuilderListener(org.apache.batik.swing.svg.GVTTreeBuilderListener)>($r7);

     label14:
        $z0 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label13;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void initializeEventHandling()>();

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder>;

        if $r8 != null goto label15;

        $r9 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGDocumentLoader documentLoader>;

        if $r9 != null goto label15;

        $r10 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.swing.gvt.GVTTreeRenderer gvtTreeRenderer>;

        if $r10 != null goto label15;

        $r11 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        if $r11 != null goto label15;

        $r12 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r12 != null goto label15;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void startGVTTreeBuilder()>();

     label15:
        return;
    }

    protected void startGVTTreeBuilder()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.GVTTreeBuilder $r1, $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder>;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder> = $r1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder nextGVTTreeBuilder> = null;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.GVTTreeBuilder gvtTreeBuilder>;

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        return;
    }

    public org.w3c.dom.svg.SVGDocument getSVGDocument()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.w3c.dom.svg.SVGDocument $r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        return $r1;
    }

    public java.awt.geom.Dimension2D getSVGDocumentSize()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.bridge.BridgeContext $r1;
        java.awt.geom.Dimension2D $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: java.awt.geom.Dimension2D getDocumentSize()>();

        return $r2;
    }

    public java.lang.String getFragmentIdentifier()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier>;

        return $r1;
    }

    public void setFragmentIdentifier(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier> = r1;

        $z0 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean computeRenderingTransform()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void scheduleGVTRendering()>();

     label1:
        return;
    }

    public void flushImageCache()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r1;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry $r0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r0 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry getRegistry()>();

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: void flushCache()>();

        return;
    }

    public void setGraphicsNode(org.apache.batik.gvt.GraphicsNode, boolean)
    {
        java.awt.geom.Dimension2D $r2;
        org.w3c.dom.svg.SVGDocument $r4;
        org.apache.batik.gvt.CanvasGraphicsNode $r10;
        int $i0, $i1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String $r7;
        double $d0, $d1;
        org.w3c.dom.svg.SVGSVGElement $r5;
        boolean z0;
        org.apache.batik.gvt.GraphicsNode r9;
        org.apache.batik.bridge.BridgeContext $r1;
        java.awt.geom.AffineTransform $r8, $r11, $r12, $r13;
        java.awt.Dimension $r3, $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener $r14, $r15, $r16;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r9 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: java.awt.geom.Dimension2D getDocumentSize()>();

        $r3 = new java.awt.Dimension;

        $d0 = virtualinvoke $r2.<java.awt.geom.Dimension2D: double getWidth()>();

        $i0 = (int) $d0;

        $d1 = virtualinvoke $r2.<java.awt.geom.Dimension2D: double getHeight()>();

        $i1 = (int) $d1;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>($i0, $i1);

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setMySize(java.awt.Dimension)>($r3);

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r6 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getSize()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.Dimension prevComponentSize> = $r6;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier>;

        $r8 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform calculateViewingTransform(java.lang.String,org.w3c.dom.svg.SVGSVGElement)>($r7, $r5);

        $r10 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.gvt.CanvasGraphicsNode getCanvasGraphicsNode(org.apache.batik.gvt.GraphicsNode)>(r9);

        virtualinvoke $r10.<org.apache.batik.gvt.CanvasGraphicsNode: void setViewingTransform(java.awt.geom.AffineTransform)>($r8);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform viewingTransform> = null;

        $r11 = new java.awt.geom.AffineTransform;

        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform> = $r11;

        $r12 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>($r12, 0);

        $r14 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener jsvgComponentListener>;

        $r13 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke $r14.<org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener: void updateMatrix(java.awt.geom.AffineTransform)>($r13);

        $r15 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener jsvgComponentListener>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void addJGVTComponentListener(org.apache.batik.swing.gvt.JGVTComponentListener)>($r15);

        $r16 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.AbstractJSVGComponent$JSVGComponentListener jsvgComponentListener>;

        virtualinvoke r0.<java.awt.Component: void addComponentListener(java.awt.event.ComponentListener)>($r16);

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setGraphicsNode(org.apache.batik.gvt.GraphicsNode,boolean)>(r9, z0);

        return;
    }

    protected org.apache.batik.bridge.BridgeContext createBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)
    {
        org.apache.batik.bridge.DocumentLoader $r1, $r4, $r7, $r9;
        org.apache.batik.bridge.BridgeContext $r3, r11;
        org.apache.batik.bridge.svg12.SVG12BridgeContext $r6;
        org.apache.batik.dom.svg.SVGOMDocument r2;
        org.apache.batik.bridge.UserAgent $r5, $r8, $r10;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: org.apache.batik.dom.svg.SVGOMDocument;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.DocumentLoader loader>;

        if $r1 != null goto label1;

        $r9 = new org.apache.batik.bridge.DocumentLoader;

        $r10 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent userAgent>;

        specialinvoke $r9.<org.apache.batik.bridge.DocumentLoader: void <init>(org.apache.batik.bridge.UserAgent)>($r10);

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.DocumentLoader loader> = $r9;

     label1:
        $z0 = virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        if $z0 == 0 goto label2;

        $r6 = new org.apache.batik.bridge.svg12.SVG12BridgeContext;

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent userAgent>;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.DocumentLoader loader>;

        specialinvoke $r6.<org.apache.batik.bridge.svg12.SVG12BridgeContext: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.DocumentLoader)>($r8, $r7);

        r11 = $r6;

        goto label3;

     label2:
        $r3 = new org.apache.batik.bridge.BridgeContext;

        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.DocumentLoader loader>;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.DocumentLoader)>($r5, $r4);

        r11 = $r3;

     label3:
        return r11;
    }

    protected void startSVGLoadEventDispatcher(org.apache.batik.gvt.GraphicsNode)
    {
        java.util.Iterator $r9;
        org.w3c.dom.svg.SVGDocument $r3, $r7;
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.bridge.BridgeContext $r4, $r6;
        java.util.List $r8;
        org.apache.batik.swing.svg.SVGLoadEventDispatcher $r5, $r10, $r13;
        org.apache.batik.swing.svg.SVGLoadEventDispatcherListener $r12;
        org.apache.batik.swing.svg.AbstractJSVGComponent r1;
        java.lang.Object $r11;
        org.apache.batik.bridge.UpdateManager $r0;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        $r0 = new org.apache.batik.bridge.UpdateManager;

        $r4 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        specialinvoke $r0.<org.apache.batik.bridge.UpdateManager: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.gvt.GraphicsNode,org.w3c.dom.Document)>($r4, r2, $r3);

        $r5 = new org.apache.batik.swing.svg.SVGLoadEventDispatcher;

        $r7 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        $r6 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        specialinvoke $r5.<org.apache.batik.swing.svg.SVGLoadEventDispatcher: void <init>(org.apache.batik.gvt.GraphicsNode,org.w3c.dom.svg.SVGDocument,org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.UpdateManager)>(r2, $r7, $r6, $r0);

        r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher> = $r5;

        $r8 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgLoadEventDispatcherListeners>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r10 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.apache.batik.swing.svg.SVGLoadEventDispatcherListener) $r11;

        virtualinvoke $r10.<org.apache.batik.swing.svg.SVGLoadEventDispatcher: void addSVGLoadEventDispatcherListener(org.apache.batik.swing.svg.SVGLoadEventDispatcherListener)>($r12);

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r13 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGLoadEventDispatcher svgLoadEventDispatcher>;

        virtualinvoke $r13.<java.lang.Thread: void start()>();

        return;
    }

    protected org.apache.batik.gvt.renderer.ImageRenderer createImageRenderer()
    {
        org.apache.batik.gvt.renderer.ImageRendererFactory $r1, $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;
        org.apache.batik.gvt.renderer.ImageRenderer $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isDynamicDocument>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRendererFactory rendererFactory>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.renderer.ImageRendererFactory: org.apache.batik.gvt.renderer.ImageRenderer createDynamicImageRenderer()>();

        return $r4;

     label1:
        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRendererFactory rendererFactory>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.renderer.ImageRendererFactory: org.apache.batik.gvt.renderer.ImageRenderer createStaticImageRenderer()>();

        return $r2;
    }

    public org.apache.batik.gvt.CanvasGraphicsNode getCanvasGraphicsNode()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.GraphicsNode $r1;
        org.apache.batik.gvt.CanvasGraphicsNode $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        $r2 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.gvt.CanvasGraphicsNode getCanvasGraphicsNode(org.apache.batik.gvt.GraphicsNode)>($r1);

        return $r2;
    }

    protected org.apache.batik.gvt.CanvasGraphicsNode getCanvasGraphicsNode(org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.GraphicsNode r5, r6;
        org.apache.batik.gvt.CanvasGraphicsNode $r3;
        org.apache.batik.gvt.CompositeGraphicsNode r0;
        java.util.List $r1;
        int $i0;
        org.apache.batik.swing.svg.AbstractJSVGComponent r4;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r4 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r5 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        $z0 = r5 instanceof org.apache.batik.gvt.CompositeGraphicsNode;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r0 = (org.apache.batik.gvt.CompositeGraphicsNode) r5;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (org.apache.batik.gvt.GraphicsNode) $r2;

        $z1 = r6 instanceof org.apache.batik.gvt.CanvasGraphicsNode;

        if $z1 != 0 goto label3;

        return null;

     label3:
        $r3 = (org.apache.batik.gvt.CanvasGraphicsNode) r6;

        return $r3;
    }

    public java.awt.geom.AffineTransform getViewingTransform()
    {
        java.lang.Throwable $r2;
        org.apache.batik.gvt.CanvasGraphicsNode $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.geom.AffineTransform r3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        entermonitor r0;

     label1:
        r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform viewingTransform>;

        if r3 != null goto label2;

        $r1 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.gvt.CanvasGraphicsNode getCanvasGraphicsNode()>();

        if $r1 == null goto label2;

        r3 = virtualinvoke $r1.<org.apache.batik.gvt.CanvasGraphicsNode: java.awt.geom.AffineTransform getViewingTransform()>();

     label2:
        exitmonitor r0;

        goto label4;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label4:
        return r3;

        catch java.lang.Throwable from label1 to label3 with label3;
    }

    public java.awt.geom.AffineTransform getViewBoxTransform()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.geom.AffineTransform $r1, $r2, $r3, $r4, r5;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform getRenderingTransform()>();

        if $r1 != null goto label1;

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        r5 = $r4;

        goto label2;

     label1:
        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r1);

        r5 = $r2;

     label2:
        $r3 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform getViewingTransform()>();

        if $r3 == null goto label3;

        virtualinvoke r5.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r3);

     label3:
        return r5;
    }

    protected boolean computeRenderingTransform()
    {
        org.w3c.dom.svg.SVGDocument $r1;
        org.apache.batik.gvt.GraphicsNode $r2;
        java.awt.geom.AffineTransform $r3, $r4, $r5, $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0, z1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        if $r2 != null goto label2;

     label1:
        return 0;

     label2:
        z1 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean updateRenderingTransform()>();

        $r3 = new java.awt.geom.AffineTransform;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform> = $r3;

        $r4 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        $r5 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform getRenderingTransform()>();

        $z0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        $r6 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform initialTransform>;

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>($r6, 0);

        z1 = 1;

     label3:
        return z1;
    }

    protected java.awt.geom.AffineTransform calculateViewingTransform(java.lang.String, org.w3c.dom.svg.SVGSVGElement)
    {
        org.apache.batik.bridge.BridgeContext $r4;
        java.awt.geom.AffineTransform $r5;
        java.awt.Dimension $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        float $f0, $f1;
        java.lang.String r2;
        org.w3c.dom.svg.SVGSVGElement r3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.w3c.dom.svg.SVGSVGElement;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getSize()>();

        $i0 = $r1.<java.awt.Dimension: int width>;

        if $i0 >= 1 goto label1;

        $r1.<java.awt.Dimension: int width> = 1;

     label1:
        $i1 = $r1.<java.awt.Dimension: int height>;

        if $i1 >= 1 goto label2;

        $r1.<java.awt.Dimension: int height> = 1;

     label2:
        $i2 = $r1.<java.awt.Dimension: int width>;

        $f1 = (float) $i2;

        $i3 = $r1.<java.awt.Dimension: int height>;

        $f0 = (float) $i3;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r5 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getViewTransform(java.lang.String,org.w3c.dom.Element,float,float,org.apache.batik.bridge.BridgeContext)>(r2, r3, $f1, $f0, $r4);

        return $r5;
    }

    protected boolean updateRenderingTransform()
    {
        byte $b6, $b7, $b8, $b9;
        org.w3c.dom.svg.SVGSVGElement $r4;
        org.apache.batik.util.RunnableQueue $r14;
        org.apache.batik.gvt.GraphicsNode $r2;
        org.apache.batik.bridge.BridgeException $r17;
        org.apache.batik.swing.svg.AbstractJSVGComponent$3 $r25;
        java.awt.geom.AffineTransform $r7, $r8, $r10, $r11, $r15, $r16;
        org.apache.batik.bridge.UserAgent $r18;
        java.lang.Throwable $r19;
        org.w3c.dom.svg.SVGDocument $r1, $r3;
        java.lang.String $r6;
        java.awt.geom.Point2D$Float $r24;
        java.awt.geom.Point2D r23;
        java.awt.geom.NoninvertibleTransformException $r20, $r21;
        boolean $z0, $z1, $z2;
        java.awt.Dimension $r5, r22;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        org.apache.batik.bridge.UpdateManager $r13;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        if $r1 == null goto label01;

        $r2 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        if $r2 != null goto label02;

     label01:
        return 0;

     label02:
        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r5 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getSize()>();

        r22 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.Dimension prevComponentSize>;

        if r22 != null goto label03;

        r22 = $r5;

     label03:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.Dimension prevComponentSize> = $r5;

        $i0 = $r5.<java.awt.Dimension: int width>;

        if $i0 >= 1 goto label04;

        $r5.<java.awt.Dimension: int width> = 1;

     label04:
        $i1 = $r5.<java.awt.Dimension: int height>;

        if $i1 >= 1 goto label05;

        $r5.<java.awt.Dimension: int height> = 1;

     label05:
        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier>;

        $r7 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform calculateViewingTransform(java.lang.String,org.w3c.dom.svg.SVGSVGElement)>($r6, $r4);

        $r8 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform getViewingTransform()>();

        $z0 = virtualinvoke $r7.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label09;

        $i11 = r22.<java.awt.Dimension: int width>;

        $i10 = $r5.<java.awt.Dimension: int width>;

        if $i11 != $i10 goto label06;

        $i13 = r22.<java.awt.Dimension: int height>;

        $i12 = $r5.<java.awt.Dimension: int height>;

        if $i13 == $i12 goto label07;

     label06:
        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        return $z2;

     label09:
        $z1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean recenterOnResize>;

        if $z1 != 0 goto label10;

        return 1;

     label10:
        $r24 = new java.awt.geom.Point2D$Float;

        $i2 = r22.<java.awt.Dimension: int width>;

        $f0 = (float) $i2;

        $f3 = $f0 / 2.0F;

        $i3 = r22.<java.awt.Dimension: int height>;

        $f1 = (float) $i3;

        $f2 = $f1 / 2.0F;

        specialinvoke $r24.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f3, $f2);

        r23 = $r24;

        $r10 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform getRenderingTransform()>();

        if $r10 == null goto label14;

     label11:
        $r16 = virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        r23 = virtualinvoke $r16.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r24, null);

     label12:
        goto label14;

     label13:
        $r21 := @caughtexception;

     label14:
        if $r8 == null goto label18;

     label15:
        $r15 = virtualinvoke $r8.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        r23 = virtualinvoke $r15.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r23, null);

     label16:
        goto label18;

     label17:
        $r20 := @caughtexception;

     label18:
        if $r7 == null goto label19;

        r23 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r23, null);

     label19:
        if $r10 == null goto label20;

        r23 = virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r23, null);

     label20:
        $i4 = $r5.<java.awt.Dimension: int width>;

        $f4 = (float) $i4;

        $f5 = $f4 / 2.0F;

        $d0 = (double) $f5;

        $d1 = virtualinvoke r23.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - $d1;

        $f10 = (float) $d2;

        $i5 = $r5.<java.awt.Dimension: int height>;

        $f6 = (float) $i5;

        $f7 = $f6 / 2.0F;

        $d3 = (double) $f7;

        $d4 = virtualinvoke r23.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 - $d4;

        $f11 = (float) $d5;

        $b6 = $f10 cmpg 0.0F;

        $i16 = (int) $b6;

        if $i16 >= 0 goto label21;

        $d14 = (double) $f10;

        $d15 = $d14 - 0.5;

        $i14 = (int) $d15;

        goto label22;

     label21:
        $d6 = (double) $f10;

        $d7 = $d6 + 0.5;

        $i14 = (int) $d7;

     label22:
        $f9 = (float) $i14;

        $b7 = $f11 cmpg 0.0F;

        $i17 = (int) $b7;

        if $i17 >= 0 goto label23;

        $d12 = (double) $f11;

        $d13 = $d12 - 0.5;

        $i15 = (int) $d13;

        goto label24;

     label23:
        $d8 = (double) $f11;

        $d9 = $d8 + 0.5;

        $i15 = (int) $d9;

     label24:
        $f8 = (float) $i15;

        $b8 = $f9 cmpl 0.0F;

        if $b8 != 0 goto label25;

        $b9 = $f8 cmpl 0.0F;

        if $b9 == 0 goto label26;

     label25:
        $d11 = (double) $f9;

        $d10 = (double) $f8;

        $r11 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d11, $d10);

        virtualinvoke $r10.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r11);

        virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform,boolean)>($r10, 0);

     label26:
        entermonitor r0;

     label27:
        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform viewingTransform> = $r7;

        exitmonitor r0;

        goto label29;

     label28:
        $r19 := @caughtexception;

        exitmonitor r0;

        throw $r19;

     label29:
        $r25 = new org.apache.batik.swing.svg.AbstractJSVGComponent$3;

        specialinvoke $r25.<org.apache.batik.swing.svg.AbstractJSVGComponent$3: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent,java.awt.geom.AffineTransform)>(r0, $r7);

        $r13 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager getUpdateManager()>();

        if $r13 == null goto label30;

        $r14 = virtualinvoke $r13.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue getUpdateRunnableQueue()>();

        virtualinvoke $r14.<org.apache.batik.util.RunnableQueue: void invokeLater(java.lang.Runnable)>($r25);

        goto label31;

     label30:
        interfaceinvoke $r25.<java.lang.Runnable: void run()>();

     label31:
        goto label33;

     label32:
        $r17 := @caughtexception;

        $r18 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r18.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r17);

     label33:
        return 1;

        catch java.awt.geom.NoninvertibleTransformException from label11 to label12 with label13;
        catch java.awt.geom.NoninvertibleTransformException from label15 to label16 with label17;
        catch java.lang.Throwable from label27 to label28 with label28;
        catch org.apache.batik.bridge.BridgeException from label02 to label31 with label32;
    }

    protected void renderGVTTree()
    {
        java.lang.Throwable $r14;
        java.awt.Rectangle $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.geom.NoninvertibleTransformException $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.awt.Shape r17;
        java.util.Iterator $r9;
        org.apache.batik.util.RunnableQueue $r7;
        org.apache.batik.gvt.GraphicsNode $r4;
        java.awt.geom.AffineTransform $r5, $r13, r16;
        org.apache.batik.swing.svg.AbstractJSVGComponent$1$UpdateRenderingRunnable $r11, $r12;
        java.lang.Object $r8, $r10;
        org.apache.batik.bridge.UpdateManager $r1, $r2, $r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean isInteractiveDocument>;

        if $z0 == 0 goto label01;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        if $r1 == null goto label01;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        $z1 = virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: boolean isRunning()>();

        if $z1 != 0 goto label02;

     label01:
        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void renderGVTTree()>();

        return;

     label02:
        $r3 = virtualinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.Rectangle getRenderRect()>();

        $r4 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot>;

        if $r4 == null goto label03;

        $i0 = $r3.<java.awt.Rectangle: int width>;

        if $i0 <= 0 goto label03;

        $i1 = $r3.<java.awt.Rectangle: int height>;

        if $i1 > 0 goto label04;

     label03:
        return;

     label04:
        r16 = null;

     label05:
        $r5 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        r16 = virtualinvoke $r5.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

     label08:
        if r16 != null goto label09;

        r17 = $r3;

        goto label10;

     label09:
        r17 = virtualinvoke r16.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r3);

     label10:
        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UpdateManager updateManager>;

        $r7 = virtualinvoke $r6.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue getUpdateRunnableQueue()>();

        $r8 = virtualinvoke $r7.<org.apache.batik.util.RunnableQueue: java.lang.Object getIteratorLock()>();

        entermonitor $r8;

     label11:
        $r9 = virtualinvoke $r7.<org.apache.batik.util.RunnableQueue: java.util.Iterator iterator()>();

        goto label13;

     label12:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r10 instanceof org.apache.batik.swing.svg.AbstractJSVGComponent$1$UpdateRenderingRunnable;

        if $z2 == 0 goto label13;

        $r11 = (org.apache.batik.swing.svg.AbstractJSVGComponent$1$UpdateRenderingRunnable) $r10;

        virtualinvoke $r11.<org.apache.batik.swing.svg.AbstractJSVGComponent$1$UpdateRenderingRunnable: void deactivate()>();

     label13:
        $z4 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label12;

        exitmonitor $r8;

        goto label15;

     label14:
        $r14 := @caughtexception;

        exitmonitor $r8;

        throw $r14;

     label15:
        $r12 = new org.apache.batik.swing.svg.AbstractJSVGComponent$1$UpdateRenderingRunnable;

        $r13 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        $z3 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering>;

        $i3 = $r3.<java.awt.Rectangle: int width>;

        $i2 = $r3.<java.awt.Rectangle: int height>;

        specialinvoke $r12.<org.apache.batik.swing.svg.AbstractJSVGComponent$1$UpdateRenderingRunnable: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent,java.awt.geom.AffineTransform,boolean,boolean,java.awt.Shape,int,int)>(r0, $r13, $z3, 1, r17, $i3, $i2);

        virtualinvoke $r7.<org.apache.batik.util.RunnableQueue: void invokeLater(java.lang.Runnable)>($r12);

        return;

        catch java.awt.geom.NoninvertibleTransformException from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label14 with label14;
    }

    protected void handleException(java.lang.Exception)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.bridge.UserAgent $r2;
        java.lang.Exception r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>(r1);

        return;
    }

    public void addSVGDocumentLoaderListener(org.apache.batik.swing.svg.SVGDocumentLoaderListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;
        org.apache.batik.swing.svg.SVGDocumentLoaderListener r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.SVGDocumentLoaderListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgDocumentLoaderListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeSVGDocumentLoaderListener(org.apache.batik.swing.svg.SVGDocumentLoaderListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;
        org.apache.batik.swing.svg.SVGDocumentLoaderListener r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.SVGDocumentLoaderListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgDocumentLoaderListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void addGVTTreeBuilderListener(org.apache.batik.swing.svg.GVTTreeBuilderListener)
    {
        org.apache.batik.swing.svg.GVTTreeBuilderListener r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.GVTTreeBuilderListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List gvtTreeBuilderListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeGVTTreeBuilderListener(org.apache.batik.swing.svg.GVTTreeBuilderListener)
    {
        org.apache.batik.swing.svg.GVTTreeBuilderListener r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.GVTTreeBuilderListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List gvtTreeBuilderListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void addSVGLoadEventDispatcherListener(org.apache.batik.swing.svg.SVGLoadEventDispatcherListener)
    {
        org.apache.batik.swing.svg.SVGLoadEventDispatcherListener r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.SVGLoadEventDispatcherListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgLoadEventDispatcherListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeSVGLoadEventDispatcherListener(org.apache.batik.swing.svg.SVGLoadEventDispatcherListener)
    {
        org.apache.batik.swing.svg.SVGLoadEventDispatcherListener r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.SVGLoadEventDispatcherListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List svgLoadEventDispatcherListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void addLinkActivationListener(org.apache.batik.swing.svg.LinkActivationListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.LinkActivationListener r1;
        java.util.List $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.LinkActivationListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List linkActivationListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeLinkActivationListener(org.apache.batik.swing.svg.LinkActivationListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.swing.svg.LinkActivationListener r1;
        java.util.List $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.swing.svg.LinkActivationListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List linkActivationListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void addUpdateManagerListener(org.apache.batik.bridge.UpdateManagerListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;
        org.apache.batik.bridge.UpdateManagerListener r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.bridge.UpdateManagerListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List updateManagerListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeUpdateManagerListener(org.apache.batik.bridge.UpdateManagerListener)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.util.List $r2;
        org.apache.batik.bridge.UpdateManagerListener r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: org.apache.batik.bridge.UpdateManagerListener;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List updateManagerListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void showAlert(java.lang.String)
    {
        java.lang.Object[] $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String r2, $r3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.batik.swing.svg.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("script.alert", $r1);

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(r0, $r3);

        return;
    }

    public java.lang.String showPrompt(java.lang.String)
    {
        java.lang.Object[] $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String r2, $r3, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.batik.swing.svg.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("script.prompt", $r1);

        $r4 = staticinvoke <javax.swing.JOptionPane: java.lang.String showInputDialog(java.awt.Component,java.lang.Object)>(r0, $r3);

        return $r4;
    }

    public java.lang.String showPrompt(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r1;
        int $i1;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.Object $r5;
        java.lang.String r2, $r3, r4, $r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.batik.swing.svg.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("script.prompt", $r1);

        $i1 = (int) -1;

        $r5 = staticinvoke <javax.swing.JOptionPane: java.lang.Object showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)>(r0, $r3, null, $i1, null, null, r4);

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    public boolean showConfirm(java.lang.String)
    {
        java.lang.Object[] $r1;
        int $i0;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.batik.swing.svg.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("script.confirm", $r1);

        $i0 = staticinvoke <javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(r0, $r3, "Confirm", 0);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setMySize(java.awt.Dimension)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.Dimension r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter0: java.awt.Dimension;

        virtualinvoke r0.<javax.swing.JComponent: void setPreferredSize(java.awt.Dimension)>(r1);

        virtualinvoke r0.<java.awt.Container: void invalidate()>();

        return;
    }

    public void setAnimationLimitingNone()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: int animationLimitingMode> = 0;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setBridgeContextAnimationLimitingMode()>();

     label1:
        return;
    }

    public void setAnimationLimitingCPU(float)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        float f0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        f0 := @parameter0: float;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: int animationLimitingMode> = 1;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: float animationLimitingAmount> = f0;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setBridgeContextAnimationLimitingMode()>();

     label1:
        return;
    }

    public void setAnimationLimitingFPS(float)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        float f0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        f0 := @parameter0: float;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: int animationLimitingMode> = 2;

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: float animationLimitingAmount> = f0;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void setBridgeContextAnimationLimitingMode()>();

     label1:
        return;
    }

    protected void setBridgeContextAnimationLimitingMode()
    {
        int $i0;
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        float $f0, $f1;
        org.apache.batik.bridge.BridgeContext $r1, $r2, $r3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $i0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: int animationLimitingMode>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingNone()>();

        goto label4;

     label2:
        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $f1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: float animationLimitingAmount>;

        virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingCPU(float)>($f1);

        goto label4;

     label3:
        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $f0 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: float animationLimitingAmount>;

        virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingFPS(float)>($f0);

     label4:
        return;
    }

    protected org.apache.batik.swing.gvt.AbstractJGVTComponent$Listener createListener()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener $r0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$SVGListener: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent)>(r1);

        return $r0;
    }

    protected org.apache.batik.bridge.UserAgent createUserAgent()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent $r0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent)>(r1);

        return $r0;
    }

    static void access$000(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent: void startDocumentLoader()>();

        return;
    }

    static org.apache.batik.gvt.GraphicsNode access$203(org.apache.batik.swing.svg.AbstractJSVGComponent, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.GraphicsNode r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.GraphicsNode gvtRoot> = r1;

        return r1;
    }

    static boolean access$301(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean eventsEnabled>;

        return $z0;
    }

    static void access$401(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void scheduleGVTRendering()>();

        return;
    }

    static java.awt.image.BufferedImage access$503(org.apache.batik.swing.svg.AbstractJSVGComponent, java.awt.image.BufferedImage)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.image.BufferedImage r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: java.awt.image.BufferedImage;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image> = r1;

        return r1;
    }

    static java.awt.image.BufferedImage access$603(org.apache.batik.swing.svg.AbstractJSVGComponent, java.awt.image.BufferedImage)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.image.BufferedImage r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: java.awt.image.BufferedImage;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image> = r1;

        return r1;
    }

    static void access$701(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void scheduleGVTRendering()>();

        return;
    }

    static java.awt.image.BufferedImage access$803(org.apache.batik.swing.svg.AbstractJSVGComponent, java.awt.image.BufferedImage)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.image.BufferedImage r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: java.awt.image.BufferedImage;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image> = r1;

        return r1;
    }

    static org.apache.batik.gvt.renderer.ImageRenderer access$901(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.renderer.ImageRenderer $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        return $r1;
    }

    static boolean access$1103(org.apache.batik.swing.svg.AbstractJSVGComponent, boolean)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean z0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        z0 := @parameter1: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean suspendInteractions> = z0;

        return z0;
    }

    static boolean access$1201(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering>;

        return $z0;
    }

    static java.awt.image.BufferedImage access$1303(org.apache.batik.swing.svg.AbstractJSVGComponent, java.awt.image.BufferedImage)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.image.BufferedImage r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: java.awt.image.BufferedImage;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image> = r1;

        return r1;
    }

    static java.awt.image.BufferedImage access$1403(org.apache.batik.swing.svg.AbstractJSVGComponent, java.awt.image.BufferedImage)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.image.BufferedImage r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: java.awt.image.BufferedImage;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.image.BufferedImage image> = r1;

        return r1;
    }

    static java.awt.geom.AffineTransform access$1503(org.apache.batik.swing.svg.AbstractJSVGComponent, java.awt.geom.AffineTransform)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.geom.AffineTransform r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        r1 := @parameter1: java.awt.geom.AffineTransform;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform paintingTransform> = r1;

        return r1;
    }

    static boolean access$1601(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $z0 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean doubleBufferedRendering>;

        return $z0;
    }

    static boolean access$1703(org.apache.batik.swing.svg.AbstractJSVGComponent, boolean)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        boolean z0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        z0 := @parameter1: boolean;

        r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: boolean suspendInteractions> = z0;

        return z0;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$1801(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$1901(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2001(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2101(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2201(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2301(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2401(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2501(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2601(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2701(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static org.apache.batik.gvt.event.AWTEventDispatcher access$2801(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: org.apache.batik.gvt.event.AWTEventDispatcher eventDispatcher>;

        return $r1;
    }

    static void access$2901(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void scheduleGVTRendering()>();

        return;
    }

    static java.awt.geom.AffineTransform access$3001(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        $r1 = r0.<org.apache.batik.swing.gvt.AbstractJGVTComponent: java.awt.geom.AffineTransform renderingTransform>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1;

        <org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String BROKEN_LINK_TITLE> = "broken.link.title";

        <org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String SCRIPT_CONFIRM> = "script.confirm";

        <org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String SCRIPT_PROMPT> = "script.prompt";

        <org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String SCRIPT_ALERT> = "script.alert";

        <org.apache.batik.swing.svg.AbstractJSVGComponent: int ALWAYS_INTERACTIVE> = 3;

        <org.apache.batik.swing.svg.AbstractJSVGComponent: int ALWAYS_STATIC> = 2;

        <org.apache.batik.swing.svg.AbstractJSVGComponent: int ALWAYS_DYNAMIC> = 1;

        <org.apache.batik.swing.svg.AbstractJSVGComponent: int AUTODETECT> = 0;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.Set FEATURES> = $r0;

        $r1 = <org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.Set FEATURES>;

        staticinvoke <org.apache.batik.util.SVGFeatureStrings: void addSupportedFeatureStrings(java.util.Set)>($r1);

        return;
    }
}
