final class org.apache.poi.ss.util.NormalisedDecimal extends java.lang.Object
{
    private static final int EXPONENT_OFFSET;
    private static final java.math.BigDecimal BD_2_POW_24;
    private static final int LOG_BASE_10_OF_2_TIMES_2_POW_20;
    private static final int C_2_POW_19;
    private static final int FRAC_HALF;
    private static final long MAX_REP_WHOLE_PART;
    private final int _relativeDecimalExponent;
    private final long _wholePart;
    private final int _fractionalPart;

    public static org.apache.poi.ss.util.NormalisedDecimal create(java.math.BigInteger, int)
    {
        java.lang.IllegalStateException $r11;
        org.apache.poi.ss.util.NormalisedDecimal $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10, $i12;
        org.apache.poi.ss.util.MutableFPNumber $r9;
        java.math.BigInteger r1;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r10;

        r1 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        if i0 > 49 goto label01;

        if i0 >= 46 goto label02;

     label01:
        $i1 = i0 * 315653;

        $i6 = 15204352 - $i1;

        $i7 = $i6 + 524288;

        $i2 = $i7 >> 20;

        i8 = neg $i2;

        goto label03;

     label02:
        i8 = 0;

     label03:
        $r9 = new org.apache.poi.ss.util.MutableFPNumber;

        specialinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: void <init>(java.math.BigInteger,int)>(r1, i0);

        if i8 == 0 goto label04;

        $i5 = neg i8;

        virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: void multiplyByPowerOfTen(int)>($i5);

     label04:
        $i3 = virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: int get64BitNormalisedExponent()>();

        tableswitch($i3)
        {
            case 44: goto label06;
            case 45: goto label06;
            case 46: goto label05;
            case 47: goto label07;
            case 48: goto label07;
            case 49: goto label08;
            case 50: goto label09;
            default: goto label10;
        };

     label05:
        $z1 = virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: boolean isAboveMinRep()>();

        if $z1 == 0 goto label06;

        goto label11;

     label06:
        virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: void multiplyByPowerOfTen(int)>(1);

        $i10 = (int) -1;

        i8 = i8 + $i10;

        goto label11;

     label07:
        goto label11;

     label08:
        $z0 = virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: boolean isBelowMaxRep()>();

        if $z0 == 0 goto label09;

        goto label11;

     label09:
        $i12 = (int) -1;

        virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: void multiplyByPowerOfTen(int)>($i12);

        i8 = i8 + 1;

        goto label11;

     label10:
        $r11 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad binary exp ");

        $i4 = virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: int get64BitNormalisedExponent()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label11:
        virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: void normalise64bit()>();

        $r8 = virtualinvoke $r9.<org.apache.poi.ss.util.MutableFPNumber: org.apache.poi.ss.util.NormalisedDecimal createNormalisedDecimal(int)>(i8);

        return $r8;
    }

    public org.apache.poi.ss.util.NormalisedDecimal roundUnits()
    {
        org.apache.poi.ss.util.NormalisedDecimal r0, $r3, $r4;
        long $l3, l5;
        byte $b1;
        int $i0, $i2, $i4, $i6;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        l5 = r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $i0 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart>;

        if $i0 < 8388608 goto label1;

        l5 = l5 + 1L;

     label1:
        $i4 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _relativeDecimalExponent>;

        $b1 = l5 cmp 1000000000000000L;

        $i6 = (int) $b1;

        if $i6 >= 0 goto label2;

        $r3 = new org.apache.poi.ss.util.NormalisedDecimal;

        specialinvoke $r3.<org.apache.poi.ss.util.NormalisedDecimal: void <init>(long,int,int)>(l5, 0, $i4);

        return $r3;

     label2:
        $r4 = new org.apache.poi.ss.util.NormalisedDecimal;

        $l3 = l5 / 10L;

        $i2 = $i4 + 1;

        specialinvoke $r4.<org.apache.poi.ss.util.NormalisedDecimal: void <init>(long,int,int)>($l3, 0, $i2);

        return $r4;
    }

    void <init>(long, int, int)
    {
        int i1, i2;
        org.apache.poi.ss.util.NormalisedDecimal r0;
        long l0;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart> = l0;

        r0.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart> = i1;

        r0.<org.apache.poi.ss.util.NormalisedDecimal: int _relativeDecimalExponent> = i2;

        return;
    }

    public org.apache.poi.ss.util.ExpandedDouble normaliseBaseTwo()
    {
        org.apache.poi.ss.util.ExpandedDouble $r3;
        org.apache.poi.ss.util.MutableFPNumber $r0;
        int $i0;
        org.apache.poi.ss.util.NormalisedDecimal r1;
        java.math.BigInteger $r2;

        r1 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $r0 = new org.apache.poi.ss.util.MutableFPNumber;

        $r2 = virtualinvoke r1.<org.apache.poi.ss.util.NormalisedDecimal: java.math.BigInteger composeFrac()>();

        specialinvoke $r0.<org.apache.poi.ss.util.MutableFPNumber: void <init>(java.math.BigInteger,int)>($r2, 39);

        $i0 = r1.<org.apache.poi.ss.util.NormalisedDecimal: int _relativeDecimalExponent>;

        virtualinvoke $r0.<org.apache.poi.ss.util.MutableFPNumber: void multiplyByPowerOfTen(int)>($i0);

        virtualinvoke $r0.<org.apache.poi.ss.util.MutableFPNumber: void normalise64bit()>();

        $r3 = virtualinvoke $r0.<org.apache.poi.ss.util.MutableFPNumber: org.apache.poi.ss.util.ExpandedDouble createExpandedDouble()>();

        return $r3;
    }

    java.math.BigInteger composeFrac()
    {
        byte[] $r2;
        org.apache.poi.ss.util.NormalisedDecimal r0;
        byte $b4, $b7, $b10, $b13, $b16, $b19, $b22, $b25, $b27, $b29, $b31;
        java.math.BigInteger $r1;
        long l0, $l2, $l5, $l8, $l11, $l14, $l17, $l20, $l23;
        int i1, $i3, $i6, $i9, $i12, $i15, $i18, $i21, $i24, $i26, $i28, $i30;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        l0 = r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        i1 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart>;

        $r1 = new java.math.BigInteger;

        $r2 = newarray (byte)[11];

        $l2 = l0 >> 56;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        $r2[0] = $b4;

        $l5 = l0 >> 48;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        $r2[1] = $b7;

        $l8 = l0 >> 40;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        $r2[2] = $b10;

        $l11 = l0 >> 32;

        $i12 = (int) $l11;

        $b13 = (byte) $i12;

        $r2[3] = $b13;

        $l14 = l0 >> 24;

        $i15 = (int) $l14;

        $b16 = (byte) $i15;

        $r2[4] = $b16;

        $l17 = l0 >> 16;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        $r2[5] = $b19;

        $l20 = l0 >> 8;

        $i21 = (int) $l20;

        $b22 = (byte) $i21;

        $r2[6] = $b22;

        $l23 = l0 >> 0;

        $i24 = (int) $l23;

        $b25 = (byte) $i24;

        $r2[7] = $b25;

        $i26 = i1 >> 16;

        $b27 = (byte) $i26;

        $r2[8] = $b27;

        $i28 = i1 >> 8;

        $b29 = (byte) $i28;

        $r2[9] = $b29;

        $i30 = i1 >> 0;

        $b31 = (byte) $i30;

        $r2[10] = $b31;

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r2);

        return $r1;
    }

    public java.lang.String getSignificantDecimalDigits()
    {
        org.apache.poi.ss.util.NormalisedDecimal r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $l0 = r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        return $r1;
    }

    public java.lang.String getSignificantDecimalDigitsLastDigitRounded()
    {
        int $i2, $i3;
        org.apache.poi.ss.util.NormalisedDecimal r0;
        long $l0, l1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $l0 = r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        l1 = $l0 + 5L;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(24);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $i2 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 1;

        virtualinvoke $r1.<java.lang.StringBuilder: void setCharAt(int,char)>($i3, 48);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public int getDecimalExponent()
    {
        int $i0, $i1;
        org.apache.poi.ss.util.NormalisedDecimal r0;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $i0 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _relativeDecimalExponent>;

        $i1 = $i0 + 14;

        return $i1;
    }

    public int compareNormalised(org.apache.poi.ss.util.NormalisedDecimal)
    {
        org.apache.poi.ss.util.NormalisedDecimal r0, r1;
        long $l3, $l4, $l6, $l7;
        byte $b5, $b8;
        int $i0, $i1, i2, $i9, $i10, $i11, $i12, $i13, $i15;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        r1 := @parameter0: org.apache.poi.ss.util.NormalisedDecimal;

        $i1 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _relativeDecimalExponent>;

        $i0 = r1.<org.apache.poi.ss.util.NormalisedDecimal: int _relativeDecimalExponent>;

        i2 = $i1 - $i0;

        if i2 == 0 goto label1;

        return i2;

     label1:
        $l4 = r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $l3 = r1.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $b5 = $l4 cmp $l3;

        $i12 = (int) $b5;

        if $i12 <= 0 goto label2;

        return 1;

     label2:
        $l7 = r0.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $l6 = r1.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $b8 = $l7 cmp $l6;

        $i13 = (int) $b8;

        if $i13 >= 0 goto label3;

        $i15 = (int) -1;

        return $i15;

     label3:
        $i10 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart>;

        $i9 = r1.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart>;

        $i11 = $i10 - $i9;

        return $i11;
    }

    public java.math.BigDecimal getFractionalPart()
    {
        java.math.BigDecimal $r0, $r2, $r3;
        int $i0;
        org.apache.poi.ss.util.NormalisedDecimal r1;

        r1 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $r0 = new java.math.BigDecimal;

        $i0 = r1.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart>;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>($i0);

        $r2 = <org.apache.poi.ss.util.NormalisedDecimal: java.math.BigDecimal BD_2_POW_24>;

        $r3 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal)>($r2);

        return $r3;
    }

    private java.lang.String getFractionalDigits()
    {
        java.math.BigDecimal $r1;
        int $i0;
        org.apache.poi.ss.util.NormalisedDecimal r0;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $i0 = r0.<org.apache.poi.ss.util.NormalisedDecimal: int _fractionalPart>;

        if $i0 != 0 goto label1;

        return "0";

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.ss.util.NormalisedDecimal: java.math.BigDecimal getFractionalPart()>();

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(2);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.apache.poi.ss.util.NormalisedDecimal r1;
        long $l0;
        char $c1;
        int $i2;
        java.lang.StringBuilder $r0;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r5, $r6, $r7;

        r1 := @this: org.apache.poi.ss.util.NormalisedDecimal;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $l0 = r1.<org.apache.poi.ss.util.NormalisedDecimal: long _wholePart>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r6 = specialinvoke r1.<org.apache.poi.ss.util.NormalisedDecimal: java.lang.String getFractionalDigits()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("E");

        $i2 = virtualinvoke r1.<org.apache.poi.ss.util.NormalisedDecimal: int getDecimalExponent()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r0;
        java.math.BigInteger $r1, $r2;

        <org.apache.poi.ss.util.NormalisedDecimal: long MAX_REP_WHOLE_PART> = 1000000000000000L;

        <org.apache.poi.ss.util.NormalisedDecimal: int FRAC_HALF> = 8388608;

        <org.apache.poi.ss.util.NormalisedDecimal: int C_2_POW_19> = 524288;

        <org.apache.poi.ss.util.NormalisedDecimal: int LOG_BASE_10_OF_2_TIMES_2_POW_20> = 315653;

        <org.apache.poi.ss.util.NormalisedDecimal: int EXPONENT_OFFSET> = 14;

        $r0 = new java.math.BigDecimal;

        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(24);

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r2);

        <org.apache.poi.ss.util.NormalisedDecimal: java.math.BigDecimal BD_2_POW_24> = $r0;

        return;
    }
}
