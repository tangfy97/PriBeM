public final class org.apache.poi.hdf.extractor.util.BTreeSet extends java.util.AbstractSet implements java.util.Set
{
    public org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode root;
    private java.util.Comparator comparator;
    int order;
    int size;

    public void <init>()
    {
        org.apache.poi.hdf.extractor.util.BTreeSet r0;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        specialinvoke r0.<org.apache.poi.hdf.extractor.util.BTreeSet: void <init>(int)>(6);

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.poi.hdf.extractor.util.BTreeSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.poi.hdf.extractor.util.BTreeSet: void <init>(int)>(6);

        virtualinvoke r0.<org.apache.poi.hdf.extractor.util.BTreeSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.poi.hdf.extractor.util.BTreeSet r0;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.poi.hdf.extractor.util.BTreeSet: void <init>(int,java.util.Comparator)>(i0, null);

        return;
    }

    public void <init>(int, java.util.Comparator)
    {
        int i0;
        org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode $r2;
        org.apache.poi.hdf.extractor.util.BTreeSet r0;
        java.util.Comparator r1;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: java.util.Comparator comparator> = null;

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: int size> = 0;

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: int order> = i0;

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: java.util.Comparator comparator> = r1;

        $r2 = new org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode;

        specialinvoke $r2.<org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode: void <init>(org.apache.poi.hdf.extractor.util.BTreeSet,org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode)>(r0, null);

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode root> = $r2;

        return;
    }

    public boolean add(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        int $i1;
        org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode $r2;
        java.lang.Object r0;
        org.apache.poi.hdf.extractor.util.BTreeSet r1;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r1 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.apache.poi.hdf.extractor.util.BTreeSet: org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode root>;

        $i1 = (int) -1;

        $z0 = virtualinvoke $r2.<org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode: boolean insert(java.lang.Object,int)>(r0, $i1);

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode $r2;
        java.lang.Object r1;
        org.apache.poi.hdf.extractor.util.BTreeSet r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.poi.hdf.extractor.util.BTreeSet: org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode root>;

        $z0 = virtualinvoke $r2.<org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode: boolean includes(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        int $i1;
        org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode $r2;
        java.lang.Object r0;
        org.apache.poi.hdf.extractor.util.BTreeSet r1;
        boolean $z0;

        r1 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = r1.<org.apache.poi.hdf.extractor.util.BTreeSet: org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode root>;

        $i1 = (int) -1;

        $z0 = virtualinvoke $r2.<org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode: boolean delete(java.lang.Object,int)>(r0, $i1);

        return $z0;
    }

    public int size()
    {
        int $i0;
        org.apache.poi.hdf.extractor.util.BTreeSet r0;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        $i0 = r0.<org.apache.poi.hdf.extractor.util.BTreeSet: int size>;

        return $i0;
    }

    public void clear()
    {
        org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode $r1;
        org.apache.poi.hdf.extractor.util.BTreeSet r0;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        $r1 = new org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode;

        specialinvoke $r1.<org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode: void <init>(org.apache.poi.hdf.extractor.util.BTreeSet,org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode)>(r0, null);

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: org.apache.poi.hdf.extractor.util.BTreeSet$BTreeNode root> = $r1;

        r0.<org.apache.poi.hdf.extractor.util.BTreeSet: int size> = 0;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.poi.hdf.extractor.util.BTreeSet r1;
        org.apache.poi.hdf.extractor.util.BTreeSet$BTIterator $r0;

        r1 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        $r0 = new org.apache.poi.hdf.extractor.util.BTreeSet$BTIterator;

        specialinvoke $r0.<org.apache.poi.hdf.extractor.util.BTreeSet$BTIterator: void <init>(org.apache.poi.hdf.extractor.util.BTreeSet)>(r1);

        return $r0;
    }

    int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r2, r3;
        java.lang.Comparable $r5;
        org.apache.poi.hdf.extractor.util.BTreeSet r0;
        java.util.Comparator $r1, $r4;

        r0 := @this: org.apache.poi.hdf.extractor.util.BTreeSet;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.poi.hdf.extractor.util.BTreeSet: java.util.Comparator comparator>;

        if $r1 != null goto label1;

        $r5 = (java.lang.Comparable) r2;

        $i0 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        goto label2;

     label1:
        $r4 = r0.<org.apache.poi.hdf.extractor.util.BTreeSet: java.util.Comparator comparator>;

        $i0 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, r3);

     label2:
        return $i0;
    }
}
