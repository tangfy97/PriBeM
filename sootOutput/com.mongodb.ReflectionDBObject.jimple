public abstract class com.mongodb.ReflectionDBObject extends java.lang.Object implements com.mongodb.DBObject
{
    com.mongodb.ReflectionDBObject$JavaWrapper _wrapper;
    java.lang.Object _id;
    private static final java.util.Map _wrappers;
    private static final java.util.Set IGNORE_FIELDS;

    public void <init>()
    {
        com.mongodb.ReflectionDBObject r0;

        r0 := @this: com.mongodb.ReflectionDBObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.Object $r3;
        java.lang.String r2;
        com.mongodb.ReflectionDBObject$JavaWrapper $r1;

        r0 := @this: com.mongodb.ReflectionDBObject;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper()>();

        $r3 = virtualinvoke $r1.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Object get(com.mongodb.ReflectionDBObject,java.lang.String)>(r0, r2);

        return $r3;
    }

    public java.util.Set keySet()
    {
        com.mongodb.ReflectionDBObject r0;
        java.util.Set $r2;
        com.mongodb.ReflectionDBObject$JavaWrapper $r1;

        r0 := @this: com.mongodb.ReflectionDBObject;

        $r1 = virtualinvoke r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper()>();

        $r2 = virtualinvoke $r1.<com.mongodb.ReflectionDBObject$JavaWrapper: java.util.Set keySet()>();

        return $r2;
    }

    public boolean containsKey(java.lang.String)
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.mongodb.ReflectionDBObject;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.mongodb.ReflectionDBObject: boolean containsField(java.lang.String)>(r1);

        return $z0;
    }

    public boolean containsField(java.lang.String)
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.String r2;
        com.mongodb.ReflectionDBObject$JavaWrapper $r1;
        boolean $z0;

        r0 := @this: com.mongodb.ReflectionDBObject;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper()>();

        $z0 = virtualinvoke $r1.<com.mongodb.ReflectionDBObject$JavaWrapper: boolean containsKey(java.lang.String)>(r2);

        return $z0;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.Object r3, $r4;
        java.lang.String r2;
        com.mongodb.ReflectionDBObject$JavaWrapper $r1;

        r0 := @this: com.mongodb.ReflectionDBObject;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper()>();

        $r4 = virtualinvoke $r1.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Object set(com.mongodb.ReflectionDBObject,java.lang.String,java.lang.Object)>(r0, r2, r3);

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        com.mongodb.ReflectionDBObject r5;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r5 := @this: com.mongodb.ReflectionDBObject;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<com.mongodb.ReflectionDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return;
    }

    public void putAll(org.bson.BSONObject)
    {
        java.util.Iterator $r2;
        com.mongodb.ReflectionDBObject r5;
        org.bson.BSONObject r0;
        java.util.Set $r1;
        java.lang.Object $r3, $r6;
        java.lang.String r4;
        boolean $z0;

        r5 := @this: com.mongodb.ReflectionDBObject;

        r0 := @parameter0: org.bson.BSONObject;

        $r1 = interfaceinvoke r0.<org.bson.BSONObject: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r6 = interfaceinvoke r0.<org.bson.BSONObject: java.lang.Object get(java.lang.String)>(r4);

        virtualinvoke r5.<com.mongodb.ReflectionDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>(r4, $r6);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get_id()
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.Object $r1;

        r0 := @this: com.mongodb.ReflectionDBObject;

        $r1 = r0.<com.mongodb.ReflectionDBObject: java.lang.Object _id>;

        return $r1;
    }

    public void set_id(java.lang.Object)
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.Object r1;

        r0 := @this: com.mongodb.ReflectionDBObject;

        r1 := @parameter0: java.lang.Object;

        r0.<com.mongodb.ReflectionDBObject: java.lang.Object _id> = r1;

        return;
    }

    public boolean isPartialObject()
    {
        com.mongodb.ReflectionDBObject r0;

        r0 := @this: com.mongodb.ReflectionDBObject;

        return 0;
    }

    public java.util.Map toMap()
    {
        java.util.Iterator $r3;
        com.mongodb.ReflectionDBObject r1;
        java.util.Set $r2;
        java.util.HashMap $r0;
        java.lang.Object $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: com.mongodb.ReflectionDBObject;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<com.mongodb.ReflectionDBObject: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r1.<com.mongodb.ReflectionDBObject: java.lang.Object get(java.lang.String)>($r8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

        goto label1;

     label2:
        return $r0;
    }

    public void markAsPartialObject()
    {
        com.mongodb.ReflectionDBObject r1;
        java.lang.RuntimeException $r0;

        r1 := @this: com.mongodb.ReflectionDBObject;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("ReflectionDBObjects can\'t be partial");

        throw $r0;
    }

    public java.lang.Object removeField(java.lang.String)
    {
        com.mongodb.ReflectionDBObject r1;
        java.lang.RuntimeException $r0;
        java.lang.String r2;

        r1 := @this: com.mongodb.ReflectionDBObject;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("can\'t remove from a ReflectionDBObject");

        throw $r0;
    }

    com.mongodb.ReflectionDBObject$JavaWrapper getWrapper()
    {
        com.mongodb.ReflectionDBObject r0;
        java.lang.Class $r2;
        com.mongodb.ReflectionDBObject$JavaWrapper $r1, $r3, $r4, $r5;

        r0 := @this: com.mongodb.ReflectionDBObject;

        $r1 = r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper>;

        if $r1 == null goto label1;

        $r5 = r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper>;

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>($r2);

        r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper> = $r3;

        $r4 = r0.<com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper>;

        return $r4;
    }

    public static com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        com.mongodb.ReflectionDBObject$JavaWrapper $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lcom/mongodb/ReflectionDBObject;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>(r0);

        return $r2;

     label1:
        return null;
    }

    public static com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)
    {
        java.util.Map $r1, $r4;
        java.lang.Class r0;
        java.lang.Object $r2;
        com.mongodb.ReflectionDBObject$JavaWrapper $r3, r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.mongodb.ReflectionDBObject: java.util.Map _wrappers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (com.mongodb.ReflectionDBObject$JavaWrapper) $r2;

        if r5 != null goto label1;

        $r3 = new com.mongodb.ReflectionDBObject$JavaWrapper;

        specialinvoke $r3.<com.mongodb.ReflectionDBObject$JavaWrapper: void <init>(java.lang.Class)>(r0);

        r5 = $r3;

        $r4 = <com.mongodb.ReflectionDBObject: java.util.Map _wrappers>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        return r5;
    }

    static java.util.Set access$000()
    {
        java.util.Set $r0;

        $r0 = <com.mongodb.ReflectionDBObject: java.util.Set IGNORE_FIELDS>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.HashSet $r2;
        java.util.Map $r1;
        java.util.Set $r3;
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);

        <com.mongodb.ReflectionDBObject: java.util.Map _wrappers> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        <com.mongodb.ReflectionDBObject: java.util.Set IGNORE_FIELDS> = $r2;

        $r3 = <com.mongodb.ReflectionDBObject: java.util.Set IGNORE_FIELDS>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("Int");

        return;
    }
}
