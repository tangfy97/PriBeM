public class org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet extends java.lang.Object implements org.waveprotocol.wave.model.document.indexed.RawAnnotationSet
{
    private final org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder;
    private final org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener;
    private final org.waveprotocol.wave.model.util.OffsetList ranges;
    private int currentLocation;
    private org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges;
    private org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values oldValues;
    private java.util.List notifications;
    private final org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser paintingTraverser;
    private final org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser skipTraverser;
    private final org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser deleteTraverser;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.indexed.AnnotationSetListener)
    {
        org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1 $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$2 $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$3 $r4;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r6;
        org.waveprotocol.wave.model.document.indexed.AnnotationSetListener r5;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r5 := @parameter0: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.OffsetPoint: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder()>();

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder> = $r1;

        $r2 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser paintingTraverser> = $r2;

        $r3 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$2;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$2: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser skipTraverser> = $r3;

        $r4 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$3;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$3: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>(r0);

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser deleteTraverser> = $r4;

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener> = r5;

        $r6 = new org.waveprotocol.wave.model.util.EvaluableOffsetList;

        specialinvoke $r6.<org.waveprotocol.wave.model.util.EvaluableOffsetList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges> = $r6;

        return;
    }

    public void begin()
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void reset()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: java.util.List notifications> = $r1;

        return;
    }

    public void finish()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Notification r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void reset()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: java.util.List notifications>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Notification) $r3;

        virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Notification: void exe()>();

        goto label1;

     label2:
        return;
    }

    private void reset()
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r1 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1)>(null);

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values access$200()>();

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values oldValues> = $r2;

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation> = 0;

        return;
    }

    public void skip(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r11;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser $r1;
        org.waveprotocol.wave.model.operation.OpCursorException $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $i3 = $i1 - $i2;

        if i0 <= $i3 goto label1;

        $r2 = new org.waveprotocol.wave.model.operation.OpCursorException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attempt to skip beyond end of document (cursor at ");

        $i6 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size is ");

        $i7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", distance is ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>($r11);

        throw $r2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser skipTraverser>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void traverse(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser,int)>($r1, i0);

        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $i5 = $i4 + i0;

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation> = $i5;

        return;
    }

    public void insert(int)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values $r6;
        org.waveprotocol.wave.model.document.indexed.OffsetPoint r4;
        org.waveprotocol.wave.model.util.OffsetList$Container $r5, r9;
        int $i0, $i1, i2, $i3, $i4, $i5;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser $r7;
        org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder $r1;
        org.waveprotocol.wave.model.util.OffsetList $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.lang.Object $r3, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i2 := @parameter0: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i0, $r1);

        r4 = (org.waveprotocol.wave.model.document.indexed.OffsetPoint) $r3;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: org.waveprotocol.wave.model.util.OffsetList$Container getContainer()>();

        r9 = $r5;

        $i1 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: int getOffset()>();

        if $i1 <= 0 goto label1;

        $i5 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: int getOffset()>();

        $r8 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        r9 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container split(int,java.lang.Object)>($i5, $r8);

     label1:
        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values oldValues>;

        interfaceinvoke r9.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container insertBefore(java.lang.Object,int)>($r6, i2);

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser paintingTraverser>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void traverse(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser,int)>($r7, i2);

        $i3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $i4 = $i3 + i2;

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation> = $i4;

        return;
    }

    public void delete(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r11;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser $r1;
        org.waveprotocol.wave.model.operation.OpCursorException $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $i3 = $i1 - $i2;

        if i0 <= $i3 goto label1;

        $r2 = new org.waveprotocol.wave.model.operation.OpCursorException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attempt to delete beyond end of document (cursor at ");

        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size is ");

        $i5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", deleteSize is ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>($r11);

        throw $r2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser deleteTraverser>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void traverse(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser,int)>($r1, i0);

        return;
    }

    public void startAnnotation(java.lang.String, java.lang.Object)
    {
        int $i0;
        java.lang.Object r5;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes $r3;
        org.waveprotocol.wave.model.util.Pair $r2;
        java.lang.Integer $r4;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void maybeNoteChange(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        $r2 = new org.waveprotocol.wave.model.util.Pair;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, r5);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void endAnnotation(java.lang.String)
    {
        java.lang.String r1;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes $r2, $r3;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void maybeNoteChange(java.lang.String)>(r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    private void maybeNoteChange(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Notification $r7;
        org.waveprotocol.wave.model.document.indexed.AnnotationSetListener $r1;
        org.waveprotocol.wave.model.util.Pair r6;
        java.lang.Integer $r10;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.util.List $r8;
        int $i0, $i1;
        java.lang.Object $r5, $r9, $r11;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes $r3, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (org.waveprotocol.wave.model.util.Pair) $r5;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: java.util.List notifications>;

        $r7 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Notification;

        $r9 = virtualinvoke r6.<org.waveprotocol.wave.model.util.Pair: java.lang.Object getFirst()>();

        $r10 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $r11 = virtualinvoke r6.<org.waveprotocol.wave.model.util.Pair: java.lang.Object getSecond()>();

        specialinvoke $r7.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Notification: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet,int,int,java.lang.String,java.lang.Object)>(r0, $i0, $i1, r2, $r11);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        return;
    }

    private org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values applyChanges(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values r2, $r4;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes $r1, $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r2 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r4 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes currentChanges>;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values,org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Changes)>(r2, $r3);

     label2:
        return $r4;
    }

    private void maybeMergeWithPrevious(org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values $r6;
        org.waveprotocol.wave.model.util.OffsetList $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r2;
        org.waveprotocol.wave.model.util.OffsetList$Container r0, $r1, $r4;
        int $i0;
        java.lang.Object $r5, $r7;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r0 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        $r3 = r2.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if $r1 == $r4 goto label1;

        $r5 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r6 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r5;

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.OffsetList$Container: void increaseSize(int)>($i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList$Container: void remove()>();

     label1:
        return;
    }

    private void traverse(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser, int)
    {
        org.waveprotocol.wave.model.document.indexed.OffsetPoint r4;
        org.waveprotocol.wave.model.util.OffsetList$Container $r6, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser r5;
        org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder $r1;
        org.waveprotocol.wave.model.util.OffsetList $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r5 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser;

        i6 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int currentLocation>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i0, $r1);

        r4 = (org.waveprotocol.wave.model.document.indexed.OffsetPoint) $r3;

        i7 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: int getOffset()>();

        r7 = virtualinvoke r4.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: org.waveprotocol.wave.model.util.OffsetList$Container getContainer()>();

     label1:
        if i6 <= 0 goto label5;

        $i1 = interfaceinvoke r7.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        $i2 = $i1 - i7;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i6, $i2);

        $r6 = interfaceinvoke r7.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        if i7 <= 0 goto label2;

        $i5 = i7 + $i3;

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser: void partialContainer(org.waveprotocol.wave.model.util.OffsetList$Container,int,int)>(r7, i7, $i5);

        goto label4;

     label2:
        $i4 = interfaceinvoke r7.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        if $i3 != $i4 goto label3;

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser: void wholeContainer(org.waveprotocol.wave.model.util.OffsetList$Container)>(r7);

        goto label4;

     label3:
        interfaceinvoke r5.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser: void partialContainer(org.waveprotocol.wave.model.util.OffsetList$Container,int,int)>(r7, 0, $i3);

     label4:
        i7 = 0;

        i6 = i6 - $i3;

        r7 = $r6;

        goto label1;

     label5:
        interfaceinvoke r5.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser: void finished(org.waveprotocol.wave.model.util.OffsetList$Container)>(r7);

        return;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.util.OffsetList $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.OffsetList: int size()>();

        return $i0;
    }

    public java.lang.Object getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values r7;
        org.waveprotocol.wave.model.util.OffsetList $r3;
        org.waveprotocol.wave.model.document.indexed.OffsetPoint $r5;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        int i0, $i1;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void checkKeyNotNull(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>(i0, $r2);

        $r5 = (org.waveprotocol.wave.model.document.indexed.OffsetPoint) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: java.lang.Object getValue()>();

        r7 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r6;

        if r7 != null goto label1;

        $r8 = null;

        goto label2;

     label1:
        $r8 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.lang.Object get(java.lang.String)>(r1);

     label2:
        return $r8;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.OffsetPoint r6;
        org.waveprotocol.wave.model.util.OffsetList$Container $r10, r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11;
        java.lang.String r1;
        boolean $z0;
        org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder $r3;
        org.waveprotocol.wave.model.util.OffsetList $r2, $r4, $r9;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.lang.Object $r5, $r7, r8;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i6, i7, $i0);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void checkKeyNotNull(java.lang.String)>(r1);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i6);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList: int size()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i7, $i2);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.OffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i1, $r3);

        r6 = (org.waveprotocol.wave.model.document.indexed.OffsetPoint) $r5;

        r11 = virtualinvoke r6.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: org.waveprotocol.wave.model.util.OffsetList$Container getContainer()>();

        i8 = virtualinvoke r6.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: int getOffset()>();

        i9 = $i1;

     label1:
        if i9 >= $i3 goto label4;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: java.lang.Object getValue(org.waveprotocol.wave.model.util.OffsetList$Container,java.lang.String)>(r11, r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: boolean eq(java.lang.Object,java.lang.Object)>($r7, r8);

        if $z0 != 0 goto label2;

        return i9;

     label2:
        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if r11 != $r10 goto label3;

        goto label4;

     label3:
        $i4 = interfaceinvoke r11.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        $i5 = $i4 - i8;

        i9 = i9 + $i5;

        r11 = interfaceinvoke r11.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        i8 = 0;

        goto label1;

     label4:
        $i11 = (int) -1;

        return $i11;
    }

    public int lastAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.OffsetPoint r6;
        org.waveprotocol.wave.model.util.OffsetList$Container $r7, $r10, $r12, $r13, $r15, r16;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, i9, $i10, $i12;
        java.lang.String r1;
        boolean $z0;
        org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder $r3;
        org.waveprotocol.wave.model.util.OffsetList $r2, $r4, $r11, $r14;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        java.lang.Object $r5, $r8, r9;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i5, i6, $i0);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void checkKeyNotNull(java.lang.String)>(r1);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i5);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList: int size()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i6, $i2);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.OffsetPoint$Finder finder>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.OffsetList: java.lang.Object performActionAt(int,org.waveprotocol.wave.model.util.OffsetList$LocationAction)>($i3, $r3);

        r6 = (org.waveprotocol.wave.model.document.indexed.OffsetPoint) $r5;

        $r7 = virtualinvoke r6.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: org.waveprotocol.wave.model.util.OffsetList$Container getContainer()>();

        r16 = $r7;

        $i4 = virtualinvoke r6.<org.waveprotocol.wave.model.document.indexed.OffsetPoint: int getOffset()>();

        i7 = $i4;

        if $i4 != 0 goto label3;

        $r13 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        r16 = $r13;

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if $r13 != $r15 goto label1;

        $i8 = 0;

        goto label2;

     label1:
        $i8 = interfaceinvoke $r13.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

     label2:
        i7 = $i8;

     label3:
        i9 = $i3;

     label4:
        if i9 <= $i1 goto label9;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: java.lang.Object getValue(org.waveprotocol.wave.model.util.OffsetList$Container,java.lang.String)>(r16, r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: boolean eq(java.lang.Object,java.lang.Object)>($r8, r9);

        if $z0 != 0 goto label5;

        return i9;

     label5:
        if r16 != null goto label6;

        goto label9;

     label6:
        i9 = i9 - i7;

        $r10 = interfaceinvoke r16.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        r16 = $r10;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if $r10 != $r12 goto label7;

        $i10 = 0;

        goto label8;

     label7:
        $i10 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

     label8:
        i7 = $i10;

        goto label4;

     label9:
        $i12 = (int) -1;

        return $i12;
    }

    public org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        int i0, i1;
        org.waveprotocol.wave.model.document.util.GenericAnnotationCursor $r1;
        java.lang.RuntimeException $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r2;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r0 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented");

        throw $r3;

     label1:
        $r1 = new org.waveprotocol.wave.model.document.util.GenericAnnotationCursor;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.GenericAnnotationCursor: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r2, i0, i1, r0);

        return $r1;
    }

    private java.lang.Object getValue(org.waveprotocol.wave.model.util.OffsetList$Container, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values $r7;
        org.waveprotocol.wave.model.util.OffsetList $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;
        org.waveprotocol.wave.model.util.OffsetList$Container r0, $r3;
        java.lang.Object $r4, $r5, $r8;
        java.lang.String r6;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r0 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        r6 := @parameter1: java.lang.String;

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if r0 != $r3 goto label1;

        $r8 = null;

        goto label3;

     label1:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        if $r4 != null goto label2;

        $r8 = null;

        goto label3;

     label2:
        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r7 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r5;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.lang.Object get(java.lang.String)>(r6);

     label3:
        return $r8;
    }

    private boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r2;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    protected void checkKeyNotNull(java.lang.String)
    {
        java.lang.String r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "key must not be null");

        return;
    }

    public void forEachAnnotationAt(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r2;
        int i0;
        java.lang.RuntimeException $r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public java.lang.Iterable annotationIntervals(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$4 $r4;
        java.lang.RuntimeException $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r2;
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable $r1;
        int i0, i1, $i2;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r0 != null goto label3;

        if i0 > 0 goto label1;

        $i2 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: int size()>();

        if i1 >= $i2 goto label2;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented");

        throw $r3;

     label2:
        $r4 = new org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$4;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$4: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>(r2);

        return $r4;

     label3:
        $r1 = new org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r2, i0, i1, r0);

        return $r1;
    }

    public java.lang.Iterable rangedAnnotations(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r2;
        int i0, i1;
        java.lang.RuntimeException $r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeysLive()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("knownKeysLive");

        throw $r0;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("knownKeys");

        throw $r0;
    }

    public java.lang.String getInherited(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getInherited");

        throw $r0;
    }

    static org.waveprotocol.wave.model.document.indexed.AnnotationSetListener access$000(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationSetListener $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values access$300(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet, org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values r1, $r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r1 := @parameter1: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values applyChanges(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)>(r1);

        return $r2;
    }

    static void access$400(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.util.OffsetList$Container r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r1 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: void maybeMergeWithPrevious(org.waveprotocol.wave.model.util.OffsetList$Container)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values access$502(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet, org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r1 := @parameter1: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values;

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values oldValues> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser access$600(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$ContainerTraverser paintingTraverser>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.OffsetList access$700(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)
    {
        org.waveprotocol.wave.model.util.OffsetList $r1;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList ranges>;

        return $r1;
    }

    static boolean access$900(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: boolean eq(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/SimpleAnnotationSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
