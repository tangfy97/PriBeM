public abstract class com.hp.hpl.jena.datatypes.xsd.XSDbinary extends com.hp.hpl.jena.datatypes.xsd.XSDDatatype
{

    protected void <init>(java.lang.String, boolean)
    {
        java.lang.Class $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDbinary r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDbinary;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = class "[B";

        goto label2;

     label1:
        $r2 = null;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: void <init>(java.lang.String,java.lang.Class)>(r1, $r2);

        return;
    }

    public boolean isValidValue(java.lang.Object)
    {
        java.lang.Object r0;
        com.hp.hpl.jena.datatypes.xsd.XSDbinary r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.XSDbinary;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof byte[];

        return $z0;
    }

    public boolean isEqual(com.hp.hpl.jena.graph.impl.LiteralLabel, com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        byte[] $r5, $r6, $r8, $r9;
        com.hp.hpl.jena.datatypes.xsd.XSDbinary r10;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r3;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0, r2;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1;

        r10 := @this: com.hp.hpl.jena.datatypes.xsd.XSDbinary;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        r2 := @parameter1: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r1 != $r3 goto label1;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r5 = (byte[]) $r4;

        $r6 = (byte[]) $r5;

        $r7 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r8 = (byte[]) $r7;

        $r9 = (byte[]) $r8;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, $r9);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getHashCode(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        byte[] $r4, $r5;
        com.hp.hpl.jena.datatypes.xsd.XSDbinary r2;
        int $i0, $i1;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        java.lang.Object $r3;
        java.lang.String $r1;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.datatypes.xsd.XSDbinary;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: boolean isWellFormed()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r4 = (byte[]) $r3;

        $r5 = (byte[]) $r4;

        $i1 = virtualinvoke r2.<com.hp.hpl.jena.datatypes.xsd.XSDbinary: int getHashCode(byte[])>($r5);

        return $i1;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }
}
