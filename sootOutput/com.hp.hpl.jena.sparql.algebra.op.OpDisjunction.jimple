public class com.hp.hpl.jena.sparql.algebra.op.OpDisjunction extends com.hp.hpl.jena.sparql.algebra.op.OpN
{

    public static com.hp.hpl.jena.sparql.algebra.op.OpDisjunction create()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction $r0;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: void <init>()>();

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction $r2, r3;
        com.hp.hpl.jena.sparql.algebra.Op r0, r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return null;

     label1:
        if r0 != null goto label2;

        return r1;

     label2:
        if r1 != null goto label3;

        return r0;

     label3:
        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        if $z0 == 0 goto label4;

        r3 = (com.hp.hpl.jena.sparql.algebra.op.OpDisjunction) r0;

        virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return r3;

     label4:
        $r2 = new com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: void <init>()>();

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return $r2;
    }

    private void <init>(java.util.List)
    {
        java.util.List r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: void <init>(java.util.List)>(r1);

        return;
    }

    private void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        return "disjunction";
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction)>(r1);

        return;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r1, r2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r3;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpDisjunction) r0;

        $z1 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpN: boolean equalsSubOps(com.hp.hpl.jena.sparql.algebra.op.OpN,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r1, r3);

        return $z1;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r1;
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction,java.util.List)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.op.OpN copy(java.util.List)
    {
        java.util.List r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction $r0, r2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r1 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: void <init>(java.util.List)>(r1);

        return $r0;
    }
}
