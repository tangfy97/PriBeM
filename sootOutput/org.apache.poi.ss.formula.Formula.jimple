public class org.apache.poi.ss.formula.Formula extends java.lang.Object
{
    private static final org.apache.poi.ss.formula.Formula EMPTY;
    private final byte[] _byteEncoding;
    private final int _encodedTokenLen;

    private void <init>(byte[], int)
    {
        int i0;
        byte[] r1;
        org.apache.poi.ss.formula.Formula r0;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding> = r1;

        r0.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen> = i0;

        return;
    }

    public static org.apache.poi.ss.formula.Formula read(int, org.apache.poi.util.LittleEndianInput)
    {
        int i0;
        org.apache.poi.util.LittleEndianInput r0;
        org.apache.poi.ss.formula.Formula $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.poi.util.LittleEndianInput;

        $r1 = staticinvoke <org.apache.poi.ss.formula.Formula: org.apache.poi.ss.formula.Formula read(int,org.apache.poi.util.LittleEndianInput,int)>(i0, r0, i0);

        return $r1;
    }

    public static org.apache.poi.ss.formula.Formula read(int, org.apache.poi.util.LittleEndianInput, int)
    {
        byte[] r0;
        org.apache.poi.ss.formula.Formula $r2;
        int i0, i1;
        org.apache.poi.util.LittleEndianInput r1;

        i1 := @parameter0: int;

        r1 := @parameter1: org.apache.poi.util.LittleEndianInput;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        interfaceinvoke r1.<org.apache.poi.util.LittleEndianInput: void readFully(byte[])>(r0);

        $r2 = new org.apache.poi.ss.formula.Formula;

        specialinvoke $r2.<org.apache.poi.ss.formula.Formula: void <init>(byte[],int)>(r0, i1);

        return $r2;
    }

    public org.apache.poi.ss.formula.ptg.Ptg[] getTokens()
    {
        org.apache.poi.util.LittleEndianByteArrayInputStream $r0;
        byte[] $r2;
        org.apache.poi.ss.formula.Formula r1;
        org.apache.poi.ss.formula.ptg.Ptg[] $r3;
        int $i0;

        r1 := @this: org.apache.poi.ss.formula.Formula;

        $r0 = new org.apache.poi.util.LittleEndianByteArrayInputStream;

        $r2 = r1.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        specialinvoke $r0.<org.apache.poi.util.LittleEndianByteArrayInputStream: void <init>(byte[])>($r2);

        $i0 = r1.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen>;

        $r3 = staticinvoke <org.apache.poi.ss.formula.ptg.Ptg: org.apache.poi.ss.formula.ptg.Ptg[] readTokens(int,org.apache.poi.util.LittleEndianInput)>($i0, $r0);

        return $r3;
    }

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        byte[] $r2;
        org.apache.poi.ss.formula.Formula r1;
        org.apache.poi.util.LittleEndianOutput r0;
        int $i0;

        r1 := @this: org.apache.poi.ss.formula.Formula;

        r0 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $i0 = r1.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen>;

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i0);

        $r2 = r1.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void write(byte[])>($r2);

        return;
    }

    public void serializeTokens(org.apache.poi.util.LittleEndianOutput)
    {
        byte[] $r2;
        org.apache.poi.ss.formula.Formula r1;
        org.apache.poi.util.LittleEndianOutput r0;
        int $i0;

        r1 := @this: org.apache.poi.ss.formula.Formula;

        r0 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $r2 = r1.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $i0 = r1.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen>;

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void write(byte[],int,int)>($r2, 0, $i0);

        return;
    }

    public void serializeArrayConstantData(org.apache.poi.util.LittleEndianOutput)
    {
        byte[] $r1, $r3;
        org.apache.poi.ss.formula.Formula r0;
        org.apache.poi.util.LittleEndianOutput r2;
        int $i0, $i1, i2, $i3;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        r2 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $r1 = r0.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen>;

        i2 = $i1 - $i0;

        $r3 = r0.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $i3 = r0.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen>;

        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void write(byte[],int,int)>($r3, $i3, i2);

        return;
    }

    public int getEncodedSize()
    {
        byte[] $r1;
        org.apache.poi.ss.formula.Formula r0;
        int $i0, $i1;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        $r1 = r0.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $i0 = lengthof $r1;

        $i1 = 2 + $i0;

        return $i1;
    }

    public int getEncodedTokenSize()
    {
        int $i0;
        org.apache.poi.ss.formula.Formula r0;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        $i0 = r0.<org.apache.poi.ss.formula.Formula: int _encodedTokenLen>;

        return $i0;
    }

    public static org.apache.poi.ss.formula.Formula create(org.apache.poi.ss.formula.ptg.Ptg[])
    {
        byte[] r2;
        org.apache.poi.ss.formula.Formula $r1, $r3;
        org.apache.poi.ss.formula.ptg.Ptg[] r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: org.apache.poi.ss.formula.ptg.Ptg[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 >= 1 goto label2;

     label1:
        $r1 = <org.apache.poi.ss.formula.Formula: org.apache.poi.ss.formula.Formula EMPTY>;

        return $r1;

     label2:
        $i1 = staticinvoke <org.apache.poi.ss.formula.ptg.Ptg: int getEncodedSize(org.apache.poi.ss.formula.ptg.Ptg[])>(r0);

        r2 = newarray (byte)[$i1];

        staticinvoke <org.apache.poi.ss.formula.ptg.Ptg: int serializePtgs(org.apache.poi.ss.formula.ptg.Ptg[],byte[],int)>(r0, r2, 0);

        $i2 = staticinvoke <org.apache.poi.ss.formula.ptg.Ptg: int getEncodedSizeWithoutArrayData(org.apache.poi.ss.formula.ptg.Ptg[])>(r0);

        $r3 = new org.apache.poi.ss.formula.Formula;

        specialinvoke $r3.<org.apache.poi.ss.formula.Formula: void <init>(byte[],int)>(r2, $i2);

        return $r3;
    }

    public static org.apache.poi.ss.formula.ptg.Ptg[] getTokens(org.apache.poi.ss.formula.Formula)
    {
        org.apache.poi.ss.formula.Formula r0;
        org.apache.poi.ss.formula.ptg.Ptg[] $r1;

        r0 := @parameter0: org.apache.poi.ss.formula.Formula;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.ss.formula.Formula: org.apache.poi.ss.formula.ptg.Ptg[] getTokens()>();

        return $r1;
    }

    public org.apache.poi.ss.formula.Formula copy()
    {
        org.apache.poi.ss.formula.Formula r0;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        return r0;
    }

    public org.apache.poi.ss.util.CellReference getExpReference()
    {
        byte[] r1;
        org.apache.poi.ss.formula.Formula r0;
        org.apache.poi.ss.util.CellReference $r3;
        byte $b1;
        int $i0, $i2, $i3, $i4;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        r1 = r0.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $i0 = lengthof r1;

        if $i0 == 5 goto label1;

        return null;

     label1:
        $b1 = r1[0];

        $i4 = (int) $b1;

        lookupswitch($i4)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        goto label5;

     label3:
        goto label5;

     label4:
        return null;

     label5:
        $i2 = staticinvoke <org.apache.poi.util.LittleEndian: int getUShort(byte[],int)>(r1, 1);

        $i3 = staticinvoke <org.apache.poi.util.LittleEndian: int getUShort(byte[],int)>(r1, 3);

        $r3 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r3.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>($i2, $i3);

        return $r3;
    }

    public boolean isSame(org.apache.poi.ss.formula.Formula)
    {
        byte[] $r2, $r3;
        org.apache.poi.ss.formula.Formula r0, r1;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.formula.Formula;

        r1 := @parameter0: org.apache.poi.ss.formula.Formula;

        $r3 = r0.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $r2 = r1.<org.apache.poi.ss.formula.Formula: byte[] _byteEncoding>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r2);

        return $z0;
    }

    static void <clinit>()
    {
        byte[] $r1;
        org.apache.poi.ss.formula.Formula $r0;

        $r0 = new org.apache.poi.ss.formula.Formula;

        $r1 = newarray (byte)[0];

        specialinvoke $r0.<org.apache.poi.ss.formula.Formula: void <init>(byte[],int)>($r1, 0);

        <org.apache.poi.ss.formula.Formula: org.apache.poi.ss.formula.Formula EMPTY> = $r0;

        return;
    }
}
