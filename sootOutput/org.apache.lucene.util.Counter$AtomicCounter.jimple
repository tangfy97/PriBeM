final class org.apache.lucene.util.Counter$AtomicCounter extends org.apache.lucene.util.Counter
{
    private final java.util.concurrent.atomic.AtomicLong count;

    private void <init>()
    {
        org.apache.lucene.util.Counter$AtomicCounter r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.lucene.util.Counter$AtomicCounter;

        specialinvoke r0.<org.apache.lucene.util.Counter: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.apache.lucene.util.Counter$AtomicCounter: java.util.concurrent.atomic.AtomicLong count> = $r1;

        return;
    }

    public long addAndGet(long)
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.lucene.util.Counter$AtomicCounter r0;
        long l0, $l1;

        r0 := @this: org.apache.lucene.util.Counter$AtomicCounter;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.lucene.util.Counter$AtomicCounter: java.util.concurrent.atomic.AtomicLong count>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        return $l1;
    }

    public long get()
    {
        org.apache.lucene.util.Counter$AtomicCounter r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.apache.lucene.util.Counter$AtomicCounter;

        $r1 = r0.<org.apache.lucene.util.Counter$AtomicCounter: java.util.concurrent.atomic.AtomicLong count>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    void <init>(org.apache.lucene.util.Counter$1)
    {
        org.apache.lucene.util.Counter$AtomicCounter r0;
        org.apache.lucene.util.Counter$1 r1;

        r0 := @this: org.apache.lucene.util.Counter$AtomicCounter;

        r1 := @parameter0: org.apache.lucene.util.Counter$1;

        specialinvoke r0.<org.apache.lucene.util.Counter$AtomicCounter: void <init>()>();

        return;
    }
}
