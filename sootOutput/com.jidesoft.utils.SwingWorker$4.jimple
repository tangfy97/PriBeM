class com.jidesoft.utils.SwingWorker$4 extends com.jidesoft.utils.AccumulativeRunnable
{
    final com.jidesoft.utils.SwingWorker this$0;

    void <init>(com.jidesoft.utils.SwingWorker)
    {
        com.jidesoft.utils.SwingWorker r1;
        com.jidesoft.utils.SwingWorker$4 r0;

        r0 := @this: com.jidesoft.utils.SwingWorker$4;

        r1 := @parameter0: com.jidesoft.utils.SwingWorker;

        r0.<com.jidesoft.utils.SwingWorker$4: com.jidesoft.utils.SwingWorker this$0> = r1;

        specialinvoke r0.<com.jidesoft.utils.AccumulativeRunnable: void <init>()>();

        return;
    }

    public void run(java.util.List)
    {
        com.jidesoft.utils.SwingWorker $r2;
        java.util.List r1;
        com.jidesoft.utils.SwingWorker$4 r0;
        int $i0, $i1;
        java.lang.Object $r3, $r4;

        r0 := @this: com.jidesoft.utils.SwingWorker$4;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.jidesoft.utils.SwingWorker$4: com.jidesoft.utils.SwingWorker this$0>;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1);

        virtualinvoke $r2.<com.jidesoft.utils.SwingWorker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("progress", $r3, $r4);

        return;
    }

    protected void submit()
    {
        java.lang.Runnable[] $r1;
        com.jidesoft.utils.AccumulativeRunnable $r0;
        com.jidesoft.utils.SwingWorker$4 r2;

        r2 := @this: com.jidesoft.utils.SwingWorker$4;

        $r0 = staticinvoke <com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable access$300()>();

        $r1 = newarray (java.lang.Runnable)[1];

        $r1[0] = r2;

        virtualinvoke $r0.<com.jidesoft.utils.AccumulativeRunnable: void add(java.lang.Object[])>($r1);

        return;
    }
}
