public abstract class org.apache.batik.dom.svg.AbstractSVGList extends java.lang.Object
{
    protected boolean valid;
    protected java.util.List itemList;

    public void <init>()
    {
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract java.lang.String getItemSeparator();

    protected abstract org.apache.batik.dom.svg.SVGItem createSVGItem(java.lang.Object);

    protected abstract void doParse(java.lang.String, org.apache.batik.dom.svg.ListHandler) throws org.apache.batik.parser.ParseException;

    protected abstract void checkItemType(java.lang.Object) throws org.w3c.dom.svg.SVGException;

    protected abstract java.lang.String getValueAsString();

    protected abstract void setAttributeValue(java.lang.String);

    protected abstract org.w3c.dom.DOMException createDOMException(short, java.lang.String, java.lang.Object[]);

    public int getNumberOfItems()
    {
        java.util.List $r1, $r2;
        int $i0;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;

     label1:
        return 0;
    }

    public void clear() throws org.w3c.dom.DOMException
    {
        java.util.List $r1, $r2;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void clear(java.util.List)>($r2);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

     label1:
        return;
    }

    protected org.apache.batik.dom.svg.SVGItem initializeImpl(java.lang.Object) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        java.util.List $r2, $r3, $r5;
        org.apache.batik.dom.svg.SVGItem $r4;
        java.lang.Object r1;
        org.apache.batik.dom.svg.AbstractSVGList r0;
        java.util.ArrayList $r6;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void checkItemType(java.lang.Object)>(r1);

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        if $r2 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(1);

        r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList> = $r6;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void clear(java.util.List)>($r3);

     label2:
        $r4 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem removeIfNeeded(java.lang.Object)>(r1);

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        interfaceinvoke $r4.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(r0);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

        return $r4;
    }

    protected org.apache.batik.dom.svg.SVGItem getItemImpl(int) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r6;
        org.apache.batik.dom.svg.SVGItem $r5;
        java.lang.Integer $r7;
        java.util.List $r1, $r2, $r3;
        org.w3c.dom.DOMException $r8;
        int i0, $i1;
        java.lang.Object $r4;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i0);

        $r6[0] = $r7;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "index.out.of.bounds", $r6);

        throw $r8;

     label2:
        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (org.apache.batik.dom.svg.SVGItem) $r4;

        return $r5;
    }

    protected org.apache.batik.dom.svg.SVGItem insertItemBeforeImpl(java.lang.Object, int) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        java.lang.Object[] $r6;
        org.apache.batik.dom.svg.SVGItem $r3;
        java.lang.Integer $r7;
        java.util.List $r2, $r4, $r5;
        org.w3c.dom.DOMException $r8;
        int $i0, i1;
        java.lang.Object r1;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r1 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void checkItemType(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        if i1 >= 0 goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i1);

        $r6[0] = $r7;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "index.out.of.bounds", $r6);

        throw $r8;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 <= $i0 goto label2;

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label2:
        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem removeIfNeeded(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(i1, $r3);

        interfaceinvoke $r3.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(r0);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

        return $r3;
    }

    protected org.apache.batik.dom.svg.SVGItem replaceItemImpl(java.lang.Object, int) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        java.lang.Object[] $r2;
        org.apache.batik.dom.svg.SVGItem $r6;
        java.lang.Integer $r3;
        java.util.List $r5, $r7;
        org.w3c.dom.DOMException $r4;
        int i0, $i1;
        java.lang.Object r1;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void checkItemType(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        if i0 < 0 goto label1;

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "index.out.of.bounds", $r2);

        throw $r4;

     label2:
        $r6 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem removeIfNeeded(java.lang.Object)>(r1);

        $r7 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r6);

        interfaceinvoke $r6.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(r0);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

        return $r6;
    }

    protected org.apache.batik.dom.svg.SVGItem removeItemImpl(int) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1;
        org.apache.batik.dom.svg.SVGItem r7;
        java.lang.Integer $r2;
        java.util.List $r4, $r5;
        org.w3c.dom.DOMException $r3;
        int i0, $i1;
        java.lang.Object $r6;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        if i0 < 0 goto label1;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        $r1[0] = $r2;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "index.out.of.bounds", $r1);

        throw $r3;

     label2:
        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>(i0);

        r7 = (org.apache.batik.dom.svg.SVGItem) $r6;

        interfaceinvoke r7.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(null);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

        return r7;
    }

    protected org.apache.batik.dom.svg.SVGItem appendItemImpl(java.lang.Object) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        java.util.List $r3, $r4;
        org.apache.batik.dom.svg.SVGItem $r2;
        int $i0;
        java.lang.Object r1;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void checkItemType(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem removeIfNeeded(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(r0);

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute(org.apache.batik.dom.svg.SVGItem)>($r2);

     label2:
        return $r2;
    }

    protected org.apache.batik.dom.svg.SVGItem removeIfNeeded(java.lang.Object)
    {
        org.apache.batik.dom.svg.SVGItem r4;
        java.lang.Object r0;
        org.apache.batik.dom.svg.AbstractSVGList r1, $r2, $r3;
        boolean $z0;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.batik.dom.svg.SVGItem;

        if $z0 == 0 goto label1;

        r4 = (org.apache.batik.dom.svg.SVGItem) r0;

        $r2 = interfaceinvoke r4.<org.apache.batik.dom.svg.SVGItem: org.apache.batik.dom.svg.AbstractSVGList getParent()>();

        if $r2 == null goto label2;

        $r3 = interfaceinvoke r4.<org.apache.batik.dom.svg.SVGItem: org.apache.batik.dom.svg.AbstractSVGList getParent()>();

        virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGList: void removeItem(org.apache.batik.dom.svg.SVGItem)>(r4);

        goto label2;

     label1:
        r4 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem createSVGItem(java.lang.Object)>(r0);

     label2:
        return r4;
    }

    protected void revalidate()
    {
        java.util.List $r3, $r4;
        org.apache.batik.dom.svg.AbstractSVGList$ListBuilder $r1;
        java.lang.String $r2;
        org.apache.batik.dom.svg.AbstractSVGList r0;
        boolean $z0;
        org.apache.batik.parser.ParseException $r5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        $z0 = r0.<org.apache.batik.dom.svg.AbstractSVGList: boolean valid>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new org.apache.batik.dom.svg.AbstractSVGList$ListBuilder;

        specialinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGList$ListBuilder: void <init>(org.apache.batik.dom.svg.AbstractSVGList)>(r0);

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: java.lang.String getValueAsString()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void doParse(java.lang.String,org.apache.batik.dom.svg.ListHandler)>($r2, $r1);

        $r3 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGList$ListBuilder: java.util.List getList()>();

        if $r3 == null goto label2;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void clear(java.util.List)>($r4);

     label2:
        r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList> = $r3;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList> = null;

     label5:
        r0.<org.apache.batik.dom.svg.AbstractSVGList: boolean valid> = 1;

        return;

        catch org.apache.batik.parser.ParseException from label1 to label3 with label4;
    }

    protected void setValueAsString(java.util.List) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r4;
        int $i0, $i1;
        java.lang.String $r5, $r7, $r8, r9;
        org.apache.batik.dom.svg.AbstractSVGList r2;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        org.apache.batik.dom.svg.SVGItem r10, r11;
        java.util.List r0;
        java.lang.Object $r3, $r6;

        r2 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r0 := @parameter0: java.util.List;

        r9 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.batik.dom.svg.SVGItem) $r3;

        $r4 = new java.lang.StringBuffer;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 * 8;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i1);

        $r5 = interfaceinvoke r10.<org.apache.batik.dom.svg.SVGItem: java.lang.String getValueAsString()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label2;

     label1:
        $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.batik.dom.svg.SVGItem) $r6;

        $r7 = virtualinvoke r2.<org.apache.batik.dom.svg.AbstractSVGList: java.lang.String getItemSeparator()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = interfaceinvoke r11.<org.apache.batik.dom.svg.SVGItem: java.lang.String getValueAsString()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        r9 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        virtualinvoke r2.<org.apache.batik.dom.svg.AbstractSVGList: void setAttributeValue(java.lang.String)>(r9);

        r2.<org.apache.batik.dom.svg.AbstractSVGList: boolean valid> = 1;

        return;
    }

    public void itemChanged()
    {
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

        return;
    }

    protected void resetAttribute()
    {
        java.util.List $r1;
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void setValueAsString(java.util.List)>($r1);

        return;
    }

    protected void resetAttribute(org.apache.batik.dom.svg.SVGItem)
    {
        org.apache.batik.dom.svg.SVGItem r6;
        java.lang.StringBuffer $r0, $r3, $r5, $r8;
        java.lang.String $r2, $r4, $r7, $r9;
        org.apache.batik.dom.svg.AbstractSVGList r1;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r6 := @parameter0: org.apache.batik.dom.svg.SVGItem;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGList: java.lang.String getValueAsString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGList: java.lang.String getItemSeparator()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r7 = interfaceinvoke r6.<org.apache.batik.dom.svg.SVGItem: java.lang.String getValueAsString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGList: void setAttributeValue(java.lang.String)>($r9);

        r1.<org.apache.batik.dom.svg.AbstractSVGList: boolean valid> = 1;

        return;
    }

    public void invalidate()
    {
        org.apache.batik.dom.svg.AbstractSVGList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r0.<org.apache.batik.dom.svg.AbstractSVGList: boolean valid> = 0;

        return;
    }

    protected void removeItem(org.apache.batik.dom.svg.SVGItem)
    {
        java.util.List $r2, $r3;
        org.apache.batik.dom.svg.SVGItem r1;
        org.apache.batik.dom.svg.AbstractSVGList r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r1 := @parameter0: org.apache.batik.dom.svg.SVGItem;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        interfaceinvoke r1.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(null);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void resetAttribute()>();

     label1:
        return;
    }

    protected void clear(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.apache.batik.dom.svg.SVGItem r3;
        java.lang.Object $r2;
        org.apache.batik.dom.svg.AbstractSVGList r4;
        boolean $z0;

        r4 := @this: org.apache.batik.dom.svg.AbstractSVGList;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.batik.dom.svg.SVGItem) $r2;

        interfaceinvoke r3.<org.apache.batik.dom.svg.SVGItem: void setParent(org.apache.batik.dom.svg.AbstractSVGList)>(null);

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        interfaceinvoke r0.<java.util.List: void clear()>();

        return;
    }
}
