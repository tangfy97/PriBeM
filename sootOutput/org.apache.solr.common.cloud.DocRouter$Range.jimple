public class org.apache.solr.common.cloud.DocRouter$Range extends java.lang.Object implements org.noggit.JSONWriter$Writable
{
    public int min;
    public int max;
    static final boolean $assertionsDisabled;

    public void <init>(int, int)
    {
        org.apache.solr.common.cloud.DocRouter$Range r0;
        int i0, i1;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.solr.common.cloud.DocRouter$Range: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 <= i1 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.solr.common.cloud.DocRouter$Range: int min> = i0;

        r0.<org.apache.solr.common.cloud.DocRouter$Range: int max> = i1;

        return;
    }

    public boolean includes(int)
    {
        org.apache.solr.common.cloud.DocRouter$Range r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        if i0 < $i1 goto label1;

        $i2 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        if i0 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSubsetOf(org.apache.solr.common.cloud.DocRouter$Range)
    {
        org.apache.solr.common.cloud.DocRouter$Range r0, r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r1 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        r0 := @parameter0: org.apache.solr.common.cloud.DocRouter$Range;

        $i1 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $i0 = r1.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        if $i1 > $i0 goto label1;

        $i3 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        $i2 = r1.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        if $i3 < $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean overlaps(org.apache.solr.common.cloud.DocRouter$Range)
    {
        org.apache.solr.common.cloud.DocRouter$Range r0, r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        r1 := @parameter0: org.apache.solr.common.cloud.DocRouter$Range;

        $i0 = r1.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $z0 = virtualinvoke r0.<org.apache.solr.common.cloud.DocRouter$Range: boolean includes(int)>($i0);

        if $z0 != 0 goto label1;

        $i1 = r1.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        $z1 = virtualinvoke r0.<org.apache.solr.common.cloud.DocRouter$Range: boolean includes(int)>($i1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.solr.common.cloud.DocRouter$Range: boolean isSubsetOf(org.apache.solr.common.cloud.DocRouter$Range)>(r1);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public java.lang.String toString()
    {
        org.apache.solr.common.cloud.DocRouter$Range r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r1 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i1 = r1.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int hashCode()
    {
        org.apache.solr.common.cloud.DocRouter$Range r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        $i0 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $i3 = $i0 >> 28;

        $i1 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $i2 = $i1 >> 25;

        $i6 = $i3 + $i2;

        $i4 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $i5 = $i4 >> 21;

        $i8 = $i6 + $i5;

        $i7 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $i9 = $i8 + $i7;

        return $i9;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.solr.common.cloud.DocRouter$Range r2, r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        java.lang.Class $r1, $r3;
        boolean $z0;

        r2 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label1;

        return 0;

     label1:
        r4 = (org.apache.solr.common.cloud.DocRouter$Range) r0;

        $i1 = r2.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        $i0 = r4.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        if $i1 != $i0 goto label2;

        $i3 = r2.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        $i2 = r4.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        if $i3 != $i2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void write(org.noggit.JSONWriter)
    {
        org.noggit.JSONWriter r0;
        java.lang.String $r2;
        org.apache.solr.common.cloud.DocRouter$Range r1;

        r1 := @this: org.apache.solr.common.cloud.DocRouter$Range;

        r0 := @parameter0: org.noggit.JSONWriter;

        $r2 = virtualinvoke r1.<org.apache.solr.common.cloud.DocRouter$Range: java.lang.String toString()>();

        virtualinvoke r0.<org.noggit.JSONWriter: void write(java.lang.Object)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/solr/common/cloud/DocRouter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.solr.common.cloud.DocRouter$Range: boolean $assertionsDisabled> = $z1;

        return;
    }
}
