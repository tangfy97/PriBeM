class org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher extends org.springframework.aop.support.StaticMethodMatcher
{
    private final java.lang.reflect.Method adviceMethod;

    public void <init>(java.lang.reflect.Method)
    {
        org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<org.springframework.aop.support.StaticMethodMatcher: void <init>()>();

        r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher: java.lang.reflect.Method adviceMethod> = r1;

        return;
    }

    public boolean matches(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.Class r3;
        org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher r0;
        java.lang.reflect.Method r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher;

        r1 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.Class;

        $r2 = r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher: java.lang.reflect.Method adviceMethod>;

        $z0 = virtualinvoke $r2.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }
}
