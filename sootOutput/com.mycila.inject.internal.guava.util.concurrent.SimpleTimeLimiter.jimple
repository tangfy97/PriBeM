public final class com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter extends java.lang.Object implements com.mycila.inject.internal.guava.util.concurrent.TimeLimiter
{
    private final java.util.concurrent.ExecutorService executor;

    public void <init>(java.util.concurrent.ExecutorService)
    {
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter r0;
        java.lang.Object $r2;
        java.util.concurrent.ExecutorService r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.concurrent.ExecutorService) $r2;

        r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor> = $r3;

        return;
    }

    public void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: void <init>(java.util.concurrent.ExecutorService)>($r1);

        return;
    }

    public java.lang.Object newProxy(java.lang.Object, java.lang.Class, long, java.util.concurrent.TimeUnit)
    {
        long l0;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1 $r12;
        byte $b1;
        int $i2;
        java.lang.String $r6;
        boolean $z0, $z1;
        java.util.Set $r7;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter r9;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object r0, $r10;
        java.lang.Class r1;
        java.lang.StringBuilder $r4, $r5, $r11;

        r9 := @this: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        l0 := @parameter2: long;

        r2 := @parameter3: java.util.concurrent.TimeUnit;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad timeout: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r6);

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInterface()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "interfaceType must be an interface type");

        $r7 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.util.Set findInterruptibleMethods(java.lang.Class)>(r1);

        $r12 = new com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1;

        specialinvoke $r12.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: void <init>(com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter,java.lang.Object,long,java.util.concurrent.TimeUnit,java.util.Set)>(r9, r0, l0, r2, $r7);

        $r10 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(r1, $r12);

        return $r10;
    }

    public java.lang.Object callWithTimeout(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception
    {
        java.lang.Object[] $r2;
        java.util.concurrent.TimeoutException $r9;
        java.util.concurrent.Callable r0;
        long l0;
        java.util.concurrent.Future $r6;
        byte $b1;
        java.lang.Long $r3;
        int $i2;
        java.util.concurrent.ExecutorService $r5;
        boolean z0, $z1;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter r4;
        java.lang.Exception $r12;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.ExecutionException $r11;
        com.mycila.inject.internal.guava.util.concurrent.UncheckedTimeoutException $r14;
        java.lang.InterruptedException $r13;
        java.lang.Object $r7, $r8;

        r4 := @this: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter;

        r0 := @parameter0: java.util.concurrent.Callable;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 := @parameter3: boolean;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "timeout must be positive: %s", $r2);

        $r5 = r4.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r0);

     label03:
        if z0 == 0 goto label07;

     label04:
        $r8 = interfaceinvoke $r6.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

     label05:
        return $r8;

     label06:
        $r13 := @caughtexception;

        interfaceinvoke $r6.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        throw $r13;

     label07:
        $r7 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>($r6, l0, r1);

     label08:
        return $r7;

     label09:
        $r11 := @caughtexception;

        $r12 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.lang.Exception throwCause(java.lang.Exception,boolean)>($r11, 1);

        throw $r12;

     label10:
        $r9 := @caughtexception;

        interfaceinvoke $r6.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        $r14 = new com.mycila.inject.internal.guava.util.concurrent.UncheckedTimeoutException;

        specialinvoke $r14.<com.mycila.inject.internal.guava.util.concurrent.UncheckedTimeoutException: void <init>(java.lang.Throwable)>($r9);

        throw $r14;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.util.concurrent.ExecutionException from label03 to label05 with label09;
        catch java.util.concurrent.ExecutionException from label06 to label08 with label09;
        catch java.util.concurrent.TimeoutException from label03 to label05 with label10;
        catch java.util.concurrent.TimeoutException from label06 to label08 with label10;
    }

    private static java.lang.Exception throwCause(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Throwable $r1;
        java.lang.Object[] $r6;
        java.lang.Error $r2;
        java.lang.Exception r0, $r3;
        java.lang.StackTraceElement[] $r4, $r5, r7;
        boolean z0, $z1, $z2;

        r0 := @parameter0: java.lang.Exception;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r1 != null goto label1;

        throw r0;

     label1:
        if z0 == 0 goto label2;

        $r4 = virtualinvoke $r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r5 = virtualinvoke r0.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class)>($r4, $r5, class "Ljava/lang/StackTraceElement;");

        r7 = (java.lang.StackTraceElement[]) $r6;

        virtualinvoke $r1.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(r7);

     label2:
        $z1 = $r1 instanceof java.lang.Exception;

        if $z1 == 0 goto label3;

        $r3 = (java.lang.Exception) $r1;

        throw $r3;

     label3:
        $z2 = $r1 instanceof java.lang.Error;

        if $z2 == 0 goto label4;

        $r2 = (java.lang.Error) $r1;

        throw $r2;

     label4:
        throw r0;
    }

    private static java.util.Set findInterruptibleMethods(java.lang.Class)
    {
        java.util.HashSet $r0;
        int i0, i1;
        java.lang.Class r1;
        java.lang.reflect.Method r3;
        java.lang.reflect.Method[] $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: java.util.HashSet newHashSet()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = $r2[i1];

        $z0 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: boolean declaresInterruptedEx(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private static boolean declaresInterruptedEx(java.lang.reflect.Method)
    {
        int i0, i1;
        java.lang.Class[] $r1;
        java.lang.Class r2;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 != class "Ljava/lang/InterruptedException;" goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static java.lang.Object newProxy(java.lang.Class, java.lang.reflect.InvocationHandler)
    {
        java.lang.Class[] $r2;
        java.lang.Class r0;
        java.lang.Object $r4, $r5;
        java.lang.ClassLoader $r1;
        java.lang.reflect.InvocationHandler r3;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.InvocationHandler;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = r0;

        $r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r1, $r2, r3);

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);

        return $r5;
    }

    static java.lang.Exception access$000(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Exception r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.Exception;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.lang.Exception throwCause(java.lang.Exception,boolean)>(r0, z0);

        return $r1;
    }
}
