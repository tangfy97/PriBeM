public class com.jidesoft.swing.JideBoxLayout extends java.lang.Object implements java.awt.LayoutManager2, java.io.Serializable
{
    private static final java.util.logging.Logger LOGGER;
    private boolean doReset;
    protected int _axis;
    protected java.awt.Container _target;
    private int _gap;
    protected int[] _componentSizes;
    public static final java.lang.String FIX;
    public static final java.lang.String FLEXIBLE;
    public static final java.lang.String VARY;
    private final java.util.HashMap _constraintMap;
    public static final int X_AXIS;
    public static final int Y_AXIS;
    public static final int LINE_AXIS;
    public static final int PAGE_AXIS;
    private boolean _resetWhenInvalidate;
    private boolean _alwaysLayout;
    private static final long serialVersionUID;

    public void <init>(java.awt.Container)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Container r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Container;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void <init>(java.awt.Container,int)>(r1, 0);

        return;
    }

    public void <init>(java.awt.Container, int)
    {
        int i0;
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Container r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Container;

        i0 := @parameter1: int;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void <init>(java.awt.Container,int,int)>(r1, i0, 0);

        return;
    }

    public void <init>(java.awt.Container, int, int)
    {
        java.awt.AWTError $r3;
        com.jidesoft.swing.JideBoxLayout r0;
        int i0, i1;
        java.util.HashMap $r1;
        java.awt.Container r2;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r2 := @parameter0: java.awt.Container;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.swing.JideBoxLayout: boolean doReset> = 1;

        r0.<com.jidesoft.swing.JideBoxLayout: int _gap> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap> = $r1;

        r0.<com.jidesoft.swing.JideBoxLayout: boolean _resetWhenInvalidate> = 1;

        r0.<com.jidesoft.swing.JideBoxLayout: boolean _alwaysLayout> = 1;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        $r3 = new java.awt.AWTError;

        specialinvoke $r3.<java.awt.AWTError: void <init>(java.lang.String)>("Invalid axis");

        throw $r3;

     label1:
        r0.<com.jidesoft.swing.JideBoxLayout: int _axis> = i0;

        r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target> = r2;

        r0.<com.jidesoft.swing.JideBoxLayout: int _gap> = i1;

        return;
    }

    public void layoutContainer(java.awt.Container)
    {
        java.lang.StringBuilder $r20, $r22, $r23, $r24, $r26, $r33, $r35, $r36, $r37, $r39, $r56, $r58, $r59;
        java.awt.Container r0, $r6, $r10, $r13, $r41, $r44, $r45, $r47, $r49, $r53, $r54, $r63, $r65;
        java.awt.ComponentOrientation $r64;
        int[] $r15, $r18, $r19, $r25, $r28, $r29, $r32, $r38, $r48, $r50, r62;
        java.awt.Insets $r7;
        java.util.logging.Level $r2, $r8, $r16, $r30;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, i35, i36, i37, i38, i39, i40, $i41, i42, i43, $i44, $i45, i46;
        java.lang.Object $r1;
        java.awt.Component $r11, $r14, $r46, $r55;
        java.lang.Throwable $r61;
        com.jidesoft.swing.JideBoxLayout r5;
        java.lang.String $r27, $r40, $r42, $r43, $r51, $r52, $r60;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14;
        java.util.logging.Logger $r3, $r9, $r12, $r17, $r21, $r31, $r34, $r57;
        java.awt.Dimension $r4;

        r5 := @this: com.jidesoft.swing.JideBoxLayout;

        r0 := @parameter0: java.awt.Container;

        $r1 = virtualinvoke r0.<java.awt.Container: java.lang.Object getTreeLock()>();

        entermonitor $r1;

     label01:
        $r3 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        if $z0 == 0 goto label02;

        $r57 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" layoutContainer started");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.util.logging.Logger: void fine(java.lang.String)>($r60);

     label02:
        $r4 = virtualinvoke r0.<java.awt.Container: java.awt.Dimension getSize()>();

        $i0 = $r4.<java.awt.Dimension: int height>;

        if $i0 <= 0 goto label03;

        $i1 = $r4.<java.awt.Dimension: int width>;

        if $i1 > 0 goto label05;

     label03:
        exitmonitor $r1;

     label04:
        return;

     label05:
        $r6 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r7 = virtualinvoke $r6.<java.awt.Container: java.awt.Insets getInsets()>();

        $z1 = r5.<com.jidesoft.swing.JideBoxLayout: boolean doReset>;

        if $z1 == 0 goto label14;

        $r47 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i27 = virtualinvoke $r47.<java.awt.Container: int getComponentCount()>();

        $r48 = newarray (int)[$i27];

        r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes> = $r48;

        $i28 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getAvailableSize(java.awt.Dimension,java.awt.Insets)>($r4, $r7);

        $i29 = specialinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        i33 = $i28 - $i29;

        if i33 > 0 goto label07;

        exitmonitor $r1;

     label06:
        return;

     label07:
        $r49 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i30 = virtualinvoke $r49.<java.awt.Container: int getComponentCount()>();

        $z9 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: boolean calculateComponentSizes(int,int,int)>(i33, 0, $i30);

        if $z9 != 0 goto label12;

        $z10 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: boolean isAlwaysLayout()>();

        if $z10 != 0 goto label10;

        $r51 = "false";

        $r52 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("JideBoxLayout.alwaysLayout", "false");

        $z11 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>($r52);

        if $z11 == 0 goto label10;

        i34 = 0;

     label08:
        $r53 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i32 = virtualinvoke $r53.<java.awt.Container: int getComponentCount()>();

        if i34 >= $i32 goto label09;

        $r54 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r55 = virtualinvoke $r54.<java.awt.Container: java.awt.Component getComponent(int)>(i34);

        virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: void setComponentToSize(java.awt.Component,int,int,java.awt.Insets,java.awt.Dimension)>($r55, 0, 0, $r7, $r4);

        i34 = i34 + 1;

        goto label08;

     label09:
        specialinvoke r5.<com.jidesoft.swing.JideBoxLayout: void redoLayout(java.awt.Container)>(r0);

     label10:
        exitmonitor $r1;

     label11:
        return;

     label12:
        r5.<com.jidesoft.swing.JideBoxLayout: boolean doReset> = 0;

        $r50 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i31 = lengthof $r50;

        if $i31 != 0 goto label13;

        virtualinvoke r0.<java.awt.Container: void repaint()>();

     label13:
        goto label25;

     label14:
        i35 = 0;

        r62 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        i36 = lengthof r62;

        i37 = 0;

     label15:
        if i37 >= i36 goto label16;

        i38 = r62[i37];

        i35 = i35 + i38;

        i37 = i37 + 1;

        goto label15;

     label16:
        $i2 = specialinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        $i3 = i35 + $i2;

        $i4 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r4);

        if $i3 == $i4 goto label17;

        $z12 = 1;

        goto label18;

     label17:
        $z12 = 0;

     label18:
        if $z12 == 0 goto label25;

        $i23 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getAvailableSize(java.awt.Dimension,java.awt.Insets)>($r4, $r7);

        $i24 = specialinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        i39 = $i23 - $i24;

        if i39 > 0 goto label20;

        exitmonitor $r1;

     label19:
        return;

     label20:
        $r41 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i25 = virtualinvoke $r41.<java.awt.Container: int getComponentCount()>();

        $z6 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: boolean calculateComponentSizes(int,int,int)>(i39, 0, $i25);

        if $z6 != 0 goto label25;

        $z7 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: boolean isAlwaysLayout()>();

        if $z7 != 0 goto label23;

        $r42 = "false";

        $r43 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("JideBoxLayout.alwaysLayout", "false");

        $z8 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z8 == 0 goto label23;

        i40 = 0;

     label21:
        $r44 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i26 = virtualinvoke $r44.<java.awt.Container: int getComponentCount()>();

        if i40 >= $i26 goto label22;

        $r45 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r46 = virtualinvoke $r45.<java.awt.Container: java.awt.Component getComponent(int)>(i40);

        virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: void setComponentToSize(java.awt.Component,int,int,java.awt.Insets,java.awt.Dimension)>($r46, 0, 0, $r7, $r4);

        i40 = i40 + 1;

        goto label21;

     label22:
        specialinvoke r5.<com.jidesoft.swing.JideBoxLayout: void redoLayout(java.awt.Container)>(r0);

     label23:
        exitmonitor $r1;

     label24:
        return;

     label25:
        $r63 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r64 = virtualinvoke $r63.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $z13 = virtualinvoke $r64.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        $i41 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>($r7, 1);

        i42 = $i41;

        z14 = 0;

        if $z13 != 0 goto label26;

        $i20 = r5.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i21 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i20, $r64);

        if $i21 != 0 goto label26;

        $i22 = $r4.<java.awt.Dimension: int width>;

        i42 = $i22 - $i41;

     label26:
        i43 = 0;

     label27:
        $r65 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i44 = virtualinvoke $r65.<java.awt.Container: int getComponentCount()>();

        if i43 >= $i44 goto label33;

        $r13 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r14 = virtualinvoke $r13.<java.awt.Container: java.awt.Component getComponent(int)>(i43);

        $i6 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getPreferredSizeOfComponent(java.awt.Component)>($r14);

        if $z13 != 0 goto label29;

        $i13 = r5.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i14 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i13, $r64);

        if $i14 != 0 goto label29;

        $r28 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i15 = $r28[i43];

        i42 = i42 - $i15;

        $r29 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i16 = $r29[i43];

        virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: void setComponentToSize(java.awt.Component,int,int,java.awt.Insets,java.awt.Dimension)>($r14, $i16, i42, $r7, $r4);

        $r31 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r30 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z5 = virtualinvoke $r31.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r30);

        if $z5 == 0 goto label28;

        $r34 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("layoutContainer index: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size: ");

        $r38 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i19 = $r38[i43];

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.util.logging.Logger: void fine(java.lang.String)>($r40);

     label28:
        $r32 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i17 = $r32[i43];

        if $i17 == 0 goto label31;

        $i18 = r5.<com.jidesoft.swing.JideBoxLayout: int _gap>;

        i42 = i42 - $i18;

        goto label31;

     label29:
        $r15 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i7 = $r15[i43];

        virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: void setComponentToSize(java.awt.Component,int,int,java.awt.Insets,java.awt.Dimension)>($r14, $i7, i42, $r7, $r4);

        $r17 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r16 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z4 = virtualinvoke $r17.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r16);

        if $z4 == 0 goto label30;

        $r21 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("layoutContainer index: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size: ");

        $r25 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i11 = $r25[i43];

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.util.logging.Logger: void fine(java.lang.String)>($r27);

     label30:
        $r18 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i8 = $r18[i43];

        $i12 = i42 + $i8;

        i42 = $i12;

        $r19 = r5.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i9 = $r19[i43];

        if $i9 == 0 goto label31;

        $i10 = r5.<com.jidesoft.swing.JideBoxLayout: int _gap>;

        i42 = $i12 + $i10;

     label31:
        $i45 = virtualinvoke r5.<com.jidesoft.swing.JideBoxLayout: int getPreferredSizeOfComponent(java.awt.Component)>($r14);

        if $i45 == $i6 goto label32;

        z14 = 1;

     label32:
        i43 = i43 + 1;

        goto label27;

     label33:
        $r9 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r9.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z2 == 0 goto label34;

        $r12 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        virtualinvoke $r12.<java.util.logging.Logger: void fine(java.lang.String)>("layoutContainer ended");

     label34:
        $r10 = r5.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $z3 = $r10 instanceof com.jidesoft.dialog.JideOptionPane;

        if $z3 == 0 goto label37;

        i46 = 0;

     label35:
        $i5 = virtualinvoke r0.<java.awt.Container: int getComponentCount()>();

        if i46 >= $i5 goto label36;

        $r11 = virtualinvoke r0.<java.awt.Container: java.awt.Component getComponent(int)>(i46);

        virtualinvoke $r11.<java.awt.Component: void invalidate()>();

        i46 = i46 + 1;

        goto label35;

     label36:
        if z14 == 0 goto label37;

        specialinvoke r5.<com.jidesoft.swing.JideBoxLayout: void redoLayout(java.awt.Container)>(r0);

     label37:
        exitmonitor $r1;

     label38:
        goto label41;

     label39:
        $r61 := @caughtexception;

        exitmonitor $r1;

     label40:
        throw $r61;

     label41:
        return;

        catch java.lang.Throwable from label01 to label04 with label39;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch java.lang.Throwable from label07 to label11 with label39;
        catch java.lang.Throwable from label12 to label19 with label39;
        catch java.lang.Throwable from label20 to label24 with label39;
        catch java.lang.Throwable from label25 to label38 with label39;
        catch java.lang.Throwable from label39 to label40 with label39;
    }

    private void redoLayout(java.awt.Container)
    {
        com.jidesoft.swing.JideBoxLayout r2;
        java.awt.Container r0, r3;
        java.awt.Dialog $r1;
        boolean $z0;

        r2 := @this: com.jidesoft.swing.JideBoxLayout;

        r0 := @parameter0: java.awt.Container;

        r3 = virtualinvoke r0.<java.awt.Container: java.awt.Container getParent()>();

     label1:
        if r3 == null goto label3;

        $z0 = r3 instanceof java.awt.Dialog;

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        r3 = virtualinvoke r3.<java.awt.Component: java.awt.Container getParent()>();

        goto label1;

     label3:
        if r3 == null goto label4;

        $r1 = (java.awt.Dialog) r3;

        virtualinvoke $r1.<java.awt.Dialog: void pack()>();

     label4:
        return;
    }

    protected boolean calculateComponentSizes(int, int, int)
    {
        java.awt.Component $r3, $r11, $r21;
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Container $r2, $r10, $r20;
        java.lang.String $r8, $r9, $r16, $r17, $r18, $r19, $r26, $r27;
        int[] $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z14, $z15, $z16;
        java.awt.Dimension $r6, $r7, $r14, $r15, $r24, $r25;
        java.util.HashMap $r4, $r12, $r22;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, $i42, $i44, $i46, $i48, $i50, $i52, $i54;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, $d10;
        java.lang.Object $r5, $r13, $r23;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i28 = i0;

        i29 = 0;

        i30 = 0;

        $i42 = (int) -1;

        i31 = $i42;

        i32 = 0;

        i33 = 0;

        $i44 = (int) -1;

        i34 = $i44;

        $i46 = (int) -1;

        i35 = $i46;

        i36 = i1;

     label01:
        if i36 >= i2 goto label07;

        $r20 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r21 = virtualinvoke $r20.<java.awt.Container: java.awt.Component getComponent(int)>(i36);

        $z8 = virtualinvoke $r21.<java.awt.Component: boolean isVisible()>();

        if $z8 != 0 goto label02;

        goto label06;

     label02:
        $r22 = r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        $r23 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r21);

        $r24 = virtualinvoke $r21.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $i24 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r24);

        $r25 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Dimension getPreferredSizeOf(java.awt.Component,int)>($r21, i36);

        $i25 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r25);

        $r26 = "fix";

        $z9 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z9 == 0 goto label03;

        $i27 = staticinvoke <java.lang.Math: int max(int,int)>($i25, $i24);

        i28 = i28 - $i27;

        goto label06;

     label03:
        $r27 = "vary";

        $z10 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z10 == 0 goto label04;

        i31 = i36;

        virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Dimension getPreferredSizeOf(java.awt.Component,int)>($r21, i36);

        i29 = $i24;

        goto label06;

     label04:
        if $i25 <= $i24 goto label05;

        $i26 = $i25 - $i24;

        i33 = i33 + $i26;

     label05:
        i32 = i32 + $i25;

        i30 = i30 + $i24;

        i34 = i36;

        if $i25 == 0 goto label06;

        i35 = i36;

     label06:
        i36 = i36 + 1;

        goto label01;

     label07:
        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: boolean isAlwaysLayout()>();

        if $z0 != 0 goto label08;

        $r18 = "false";

        $r19 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("JideBoxLayout.alwaysLayout", "false");

        $z7 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z7 == 0 goto label08;

        $i23 = i28 - i29;

        if $i23 >= 0 goto label08;

        return 0;

     label08:
        $i48 = (int) -1;

        if i31 == $i48 goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        z12 = $z11;

        $i3 = i28 - i29;

        if $i3 < i32 goto label11;

        $z16 = 1;

        $z15 = 1;

        goto label12;

     label11:
        $z16 = 0;

        $z15 = 0;

     label12:
        z14 = $z15;

        if z12 == 0 goto label13;

        if z12 == 0 goto label27;

        if $z16 != 0 goto label27;

     label13:
        if z14 == 0 goto label16;

        if i32 != 0 goto label14;

        $d8 = 0.0;

        goto label15;

     label14:
        $i17 = i28 - i29;

        $d7 = (double) $i17;

        $d6 = (double) i32;

        $d8 = $d7 / $d6;

     label15:
        d9 = $d8;

        goto label19;

     label16:
        if i33 != 0 goto label17;

        $d10 = 0.0;

        goto label18;

     label17:
        $i4 = i28 - i29;

        $i5 = $i4 - i30;

        $d1 = (double) $i5;

        $d0 = (double) i33;

        $d10 = $d1 / $d0;

     label18:
        d9 = $d10;

     label19:
        i37 = i1;

     label20:
        if i37 >= i2 goto label26;

        $r2 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r3 = virtualinvoke $r2.<java.awt.Container: java.awt.Component getComponent(int)>(i37);

        $z1 = virtualinvoke $r3.<java.awt.Component: boolean isVisible()>();

        if $z1 != 0 goto label21;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i37, 0);

        goto label25;

     label21:
        $r4 = r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r3.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $i10 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r6);

        $r7 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Dimension getPreferredSizeOf(java.awt.Component,int)>($r3, i37);

        $i11 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r7);

        $r8 = "fix";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label22;

        $i16 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i10);

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i37, $i16);

        goto label25;

     label22:
        $r9 = "vary";

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label23;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i37, i29);

        goto label25;

     label23:
        if z14 == 0 goto label24;

        $d4 = (double) $i11;

        $d5 = $d4 * d9;

        $i15 = (int) $d5;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i37, $i15);

        goto label25;

     label24:
        $i12 = $i11 - $i10;

        $d2 = (double) $i12;

        $d3 = $d2 * d9;

        $i13 = (int) $d3;

        $i14 = $i10 + $i13;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i37, $i14);

     label25:
        i37 = i37 + 1;

        goto label20;

     label26:
        goto label33;

     label27:
        i38 = i1;

     label28:
        if i38 >= i2 goto label33;

        $r10 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r11 = virtualinvoke $r10.<java.awt.Container: java.awt.Component getComponent(int)>(i38);

        $z4 = virtualinvoke $r11.<java.awt.Component: boolean isVisible()>();

        if $z4 != 0 goto label29;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i38, 0);

        goto label32;

     label29:
        $r12 = r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r11);

        $r14 = virtualinvoke $r11.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $i18 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r14);

        $r15 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Dimension getPreferredSizeOf(java.awt.Component,int)>($r11, i38);

        $i19 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r15);

        $r16 = "fix";

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z5 == 0 goto label30;

        $i22 = staticinvoke <java.lang.Math: int max(int,int)>($i19, $i18);

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i38, $i22);

        goto label32;

     label30:
        $r17 = "vary";

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z6 == 0 goto label31;

        $i21 = i28 - i32;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i38, $i21);

        goto label32;

     label31:
        $i20 = staticinvoke <java.lang.Math: int max(int,int)>($i19, $i18);

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i38, $i20);

     label32:
        i38 = i38 + 1;

        goto label28;

     label33:
        i39 = 0;

        i40 = i1;

     label34:
        if i40 >= i2 goto label35;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i9 = $r1[i40];

        i39 = i39 + $i9;

        i40 = i40 + 1;

        goto label34;

     label35:
        if i39 == i0 goto label38;

        $i50 = (int) -1;

        if i31 == $i50 goto label36;

        $i8 = i0 - i39;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSizeByGap(int,int)>(i31, $i8);

        goto label38;

     label36:
        $i52 = (int) -1;

        if i35 == $i52 goto label37;

        $i7 = i0 - i39;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSizeByGap(int,int)>(i35, $i7);

        goto label38;

     label37:
        $i54 = (int) -1;

        if i34 == $i54 goto label38;

        $i6 = i0 - i39;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSizeByGap(int,int)>(i34, $i6);

     label38:
        return 1;
    }

    private void setComponentSizeByGap(int, int)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        int[] $r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.Container $r2, $r5;
        boolean $z0, $z1;
        java.awt.Component $r3, $r6;
        java.awt.Dimension $r7;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk15Above()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r3 = virtualinvoke $r2.<java.awt.Container: java.awt.Component getComponent(int)>(i0);

        $z1 = virtualinvoke $r3.<java.awt.Component: boolean isMinimumSizeSet()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i4 = $r4[i0];

        $i5 = $i4 + i1;

        $r5 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r6 = virtualinvoke $r5.<java.awt.Container: java.awt.Component getComponent(int)>(i0);

        $r7 = virtualinvoke $r6.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $i6 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r7);

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6);

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i0, $i7);

        goto label2;

     label1:
        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $i2 = $r1[i0];

        $i3 = $i2 + i1;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void setComponentSize(int,int)>(i0, $i3);

     label2:
        return;
    }

    private void setComponentSize(int, int)
    {
        com.jidesoft.swing.JideBoxLayout r2;
        java.util.logging.Logger $r1, $r5;
        java.util.logging.Level $r0;
        int[] $r3;
        int i0, i1;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r2 := @this: com.jidesoft.swing.JideBoxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r0);

        if $z0 == 0 goto label1;

        $r5 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setComponentSize index: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void fine(java.lang.String)>($r10);

     label1:
        $r3 = r2.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        $r3[i0] = i1;

        return;
    }

    public void addLayoutComponent(java.lang.String, java.awt.Component)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.lang.String r1;
        java.awt.Component r2;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.awt.Component;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void layoutReset()>();

        return;
    }

    public java.awt.Dimension minimumLayoutSize(java.awt.Container)
    {
        boolean $z0, $z1;
        java.awt.Component $r11;
        java.awt.Dimension $r8, $r9, $r14;
        java.lang.Throwable $r16;
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Insets $r2;
        java.util.HashMap $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;
        java.awt.Container $r1, r3, $r5, $r6, $r10;
        java.lang.String $r15;
        java.awt.ComponentOrientation $r7;
        java.lang.Object $r4, $r13;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r3 := @parameter0: java.awt.Container;

        i16 = 0;

        i17 = 0;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.Insets getInsets()>();

        $r4 = virtualinvoke r3.<java.awt.Container: java.lang.Object getTreeLock()>();

        entermonitor $r4;

     label01:
        i18 = 0;

     label02:
        $r5 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i0 = virtualinvoke $r5.<java.awt.Container: int getComponentCount()>();

        if i18 >= $i0 goto label07;

        $r10 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r11 = virtualinvoke $r10.<java.awt.Container: java.awt.Component getComponent(int)>(i18);

        $z0 = virtualinvoke $r11.<java.awt.Component: boolean isVisible()>();

        if $z0 != 0 goto label03;

        goto label06;

     label03:
        $r12 = r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r11);

        $r14 = virtualinvoke $r11.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $r15 = "fix";

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label04;

        $i15 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getPreferredSizeOfComponent(java.awt.Component)>($r11);

        i16 = i16 + $i15;

        goto label05;

     label04:
        $i13 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r14);

        i16 = i16 + $i13;

     label05:
        $i14 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForSecondaryAxis(java.awt.Dimension)>($r14);

        if $i14 <= i17 goto label06;

        i17 = $i14;

     label06:
        i18 = i18 + 1;

        goto label02;

     label07:
        if $r2 == null goto label08;

        $i7 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>($r2, 1);

        $i8 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>($r2, 0);

        $i9 = $i7 + $i8;

        i16 = i16 + $i9;

        $i10 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForSecondaryAxis(java.awt.Insets,boolean)>($r2, 1);

        $i11 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForSecondaryAxis(java.awt.Insets,boolean)>($r2, 0);

        $i12 = $i10 + $i11;

        i17 = i17 + $i12;

     label08:
        exitmonitor $r4;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        exitmonitor $r4;

     label11:
        throw $r16;

     label12:
        $r6 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r7 = virtualinvoke $r6.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i1 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i2 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i1, $r7);

        if $i2 != 0 goto label13;

        $r9 = new java.awt.Dimension;

        $i5 = specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        $i6 = i16 + $i5;

        specialinvoke $r9.<java.awt.Dimension: void <init>(int,int)>($i6, i17);

        return $r9;

     label13:
        $r8 = new java.awt.Dimension;

        $i3 = specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        $i4 = i16 + $i3;

        specialinvoke $r8.<java.awt.Dimension: void <init>(int,int)>(i17, $i4);

        return $r8;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public java.awt.Dimension preferredLayoutSize(java.awt.Container)
    {
        java.lang.Throwable $r11;
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Insets $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.awt.Container $r1, r3, $r5, $r8;
        boolean $z0;
        java.awt.Component $r9;
        java.awt.Dimension $r6, $r7, $r10;
        java.lang.Object $r4;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r3 := @parameter0: java.awt.Container;

        i14 = 0;

        i15 = 0;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.Insets getInsets()>();

        $r4 = virtualinvoke r3.<java.awt.Container: java.lang.Object getTreeLock()>();

        entermonitor $r4;

     label01:
        i16 = 0;

     label02:
        $r5 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i0 = virtualinvoke $r5.<java.awt.Container: int getComponentCount()>();

        if i16 >= $i0 goto label05;

        $r8 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r9 = virtualinvoke $r8.<java.awt.Container: java.awt.Component getComponent(int)>(i16);

        $z0 = virtualinvoke $r9.<java.awt.Component: boolean isVisible()>();

        if $z0 != 0 goto label03;

        goto label04;

     label03:
        $r10 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Dimension getPreferredSizeOf(java.awt.Component,int)>($r9, i16);

        $i12 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r10);

        i14 = i14 + $i12;

        $i13 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForSecondaryAxis(java.awt.Dimension)>($r10);

        if $i13 <= i15 goto label04;

        i15 = $i13;

     label04:
        i16 = i16 + 1;

        goto label02;

     label05:
        if $r2 == null goto label06;

        $i6 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>($r2, 1);

        $i7 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>($r2, 0);

        $i8 = $i6 + $i7;

        i14 = i14 + $i8;

        $i9 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForSecondaryAxis(java.awt.Insets,boolean)>($r2, 1);

        $i10 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForSecondaryAxis(java.awt.Insets,boolean)>($r2, 0);

        $i11 = $i9 + $i10;

        i15 = i15 + $i11;

     label06:
        exitmonitor $r4;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        exitmonitor $r4;

     label09:
        throw $r11;

     label10:
        $i1 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        if $i1 != 0 goto label11;

        $r7 = new java.awt.Dimension;

        $i4 = specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        $i5 = i14 + $i4;

        specialinvoke $r7.<java.awt.Dimension: void <init>(int,int)>($i5, i15);

        return $r7;

     label11:
        $r6 = new java.awt.Dimension;

        $i2 = specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getGapSize()>();

        $i3 = i14 + $i2;

        specialinvoke $r6.<java.awt.Dimension: void <init>(int,int)>(i15, $i3);

        return $r6;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private int getGapSize()
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Component $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.awt.Container $r1, $r2;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _gap>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i6 = 0;

        i7 = 0;

     label2:
        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $i1 = virtualinvoke $r1.<java.awt.Container: int getComponentCount()>();

        if i7 >= $i1 goto label4;

        $r2 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r3 = virtualinvoke $r2.<java.awt.Container: java.awt.Component getComponent(int)>(i7);

        $z0 = virtualinvoke $r3.<java.awt.Component: boolean isVisible()>();

        if $z0 == 0 goto label3;

        i6 = i6 + 1;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        $i2 = i6 - 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $i4 = r0.<com.jidesoft.swing.JideBoxLayout: int _gap>;

        $i5 = $i3 * $i4;

        return $i5;
    }

    public void removeLayoutComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.util.HashMap $r2;
        java.awt.Component r1;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Component;

        $r2 = r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $z0 = r1 instanceof com.jidesoft.swing.JideSplitPaneDivider;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void layoutReset()>();

     label1:
        return;
    }

    public void addLayoutComponent(java.awt.Component, java.lang.Object)
    {
        com.jidesoft.swing.JideBoxLayout r1;
        java.lang.Object r0;
        java.util.HashMap $r3, $r4;
        java.awt.Component r2;

        r1 := @this: com.jidesoft.swing.JideBoxLayout;

        r2 := @parameter0: java.awt.Component;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = r1.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, "flexible");

        goto label2;

     label1:
        $r3 = r1.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        specialinvoke r1.<com.jidesoft.swing.JideBoxLayout: void layoutReset()>();

        return;
    }

    private void layoutReset()
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.util.logging.Logger $r2, $r4;
        java.util.logging.Level $r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r0.<com.jidesoft.swing.JideBoxLayout: boolean doReset> = 1;

        $r2 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r4 = <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" layoutReset");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>($r7);

     label1:
        return;
    }

    public synchronized float getLayoutAlignmentX(java.awt.Container)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Container r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Container;

        return 0.0F;
    }

    public synchronized float getLayoutAlignmentY(java.awt.Container)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Container r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Container;

        return 0.0F;
    }

    public synchronized void invalidateLayout(java.awt.Container)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Container r1;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Container;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: boolean isResetWhenInvalidate()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: boolean componentCountChanged(java.awt.Container)>(r1);

        if $z1 == 0 goto label2;

     label1:
        specialinvoke r0.<com.jidesoft.swing.JideBoxLayout: void layoutReset()>();

     label2:
        return;
    }

    protected boolean componentCountChanged(java.awt.Container)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Component $r3;
        int[] $r1, r4;
        int $i0, i1, i2, i3, i4, i5, i6;
        java.awt.Container r2;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r2 := @parameter0: java.awt.Container;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        if $r1 != null goto label1;

        return 1;

     label1:
        i2 = 0;

        r4 = r0.<com.jidesoft.swing.JideBoxLayout: int[] _componentSizes>;

        i3 = lengthof r4;

        i4 = 0;

     label2:
        if i4 >= i3 goto label4;

        i1 = r4[i4];

        if i1 <= 0 goto label3;

        i2 = i2 + 1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        i5 = 0;

        i6 = 0;

     label5:
        $i0 = virtualinvoke r2.<java.awt.Container: int getComponentCount()>();

        if i6 >= $i0 goto label7;

        $r3 = virtualinvoke r2.<java.awt.Container: java.awt.Component getComponent(int)>(i6);

        $z0 = virtualinvoke $r3.<java.awt.Component: boolean isVisible()>();

        if $z0 == 0 goto label6;

        i5 = i5 + 1;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        if i5 == i2 goto label8;

        $z1 = 1;

        goto label9;

     label8:
        $z1 = 0;

     label9:
        return $z1;
    }

    public java.awt.Dimension maximumLayoutSize(java.awt.Container)
    {
        java.awt.Dimension $r0;
        com.jidesoft.swing.JideBoxLayout r1;
        java.awt.Container r2;

        r1 := @this: com.jidesoft.swing.JideBoxLayout;

        r2 := @parameter0: java.awt.Container;

        $r0 = new java.awt.Dimension;

        specialinvoke $r0.<java.awt.Dimension: void <init>(int,int)>(2147483647, 2147483647);

        return $r0;
    }

    protected int getPreferredSizeOfComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Dimension $r2;
        int $i0;
        java.awt.Component r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Component;

        $r2 = virtualinvoke r1.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r2);

        return $i0;
    }

    int getMinimumSizeOfComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Dimension $r2;
        int $i0;
        java.awt.Component r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Component;

        $r2 = virtualinvoke r1.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r2);

        return $i0;
    }

    protected int getSizeOfComponent(java.awt.Component)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Dimension $r2;
        int $i0;
        java.awt.Component r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r1 := @parameter0: java.awt.Component;

        $r2 = virtualinvoke r1.<java.awt.Component: java.awt.Dimension getSize()>();

        $i0 = virtualinvoke r0.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>($r2);

        return $i0;
    }

    protected int getAvailableSize(java.awt.Dimension, java.awt.Insets)
    {
        java.awt.Insets r0;
        com.jidesoft.swing.JideBoxLayout r1;
        java.awt.Dimension r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r1 := @this: com.jidesoft.swing.JideBoxLayout;

        r2 := @parameter0: java.awt.Dimension;

        r0 := @parameter1: java.awt.Insets;

        if r0 != null goto label1;

        $i5 = virtualinvoke r1.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>(r2);

        return $i5;

     label1:
        $i0 = virtualinvoke r1.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Dimension)>(r2);

        $i1 = virtualinvoke r1.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>(r0, 1);

        $i2 = virtualinvoke r1.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>(r0, 0);

        $i3 = $i1 + $i2;

        $i4 = $i0 - $i3;

        return $i4;
    }

    protected int getInitialLocation(java.awt.Insets)
    {
        int $i0;
        java.awt.Insets r0;
        com.jidesoft.swing.JideBoxLayout r1;

        r1 := @this: com.jidesoft.swing.JideBoxLayout;

        r0 := @parameter0: java.awt.Insets;

        if r0 == null goto label1;

        $i0 = virtualinvoke r1.<com.jidesoft.swing.JideBoxLayout: int getSizeForPrimaryAxis(java.awt.Insets,boolean)>(r0, 1);

        return $i0;

     label1:
        return 0;
    }

    protected void setComponentToSize(java.awt.Component, int, int, java.awt.Insets, java.awt.Dimension)
    {
        java.awt.Component r4;
        java.awt.Dimension r5;
        java.awt.Insets r0;
        com.jidesoft.swing.JideBoxLayout r1;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.awt.Container $r2, $r6;
        java.awt.ComponentOrientation $r3, $r7;

        r1 := @this: com.jidesoft.swing.JideBoxLayout;

        r4 := @parameter0: java.awt.Component;

        i5 := @parameter1: int;

        i2 := @parameter2: int;

        r0 := @parameter3: java.awt.Insets;

        r5 := @parameter4: java.awt.Dimension;

        if r0 == null goto label3;

        $r6 = r1.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r7 = virtualinvoke $r6.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i10 = r1.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i11 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i10, $r7);

        if $i11 != 0 goto label1;

        $i21 = r0.<java.awt.Insets: int top>;

        $i22 = staticinvoke <java.lang.Math: int max(int,int)>($i21, 0);

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>(i5, 0);

        $i27 = r5.<java.awt.Dimension: int height>;

        $i25 = r0.<java.awt.Insets: int top>;

        $i24 = r0.<java.awt.Insets: int bottom>;

        $i26 = $i25 + $i24;

        $i28 = $i27 - $i26;

        $i29 = staticinvoke <java.lang.Math: int max(int,int)>($i28, 0);

        virtualinvoke r4.<java.awt.Component: void setBounds(int,int,int,int)>(i2, $i22, $i23, $i29);

        goto label2;

     label1:
        $i12 = r0.<java.awt.Insets: int left>;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i12, 0);

        $i17 = r5.<java.awt.Dimension: int width>;

        $i15 = r0.<java.awt.Insets: int left>;

        $i14 = r0.<java.awt.Insets: int right>;

        $i16 = $i15 + $i14;

        $i18 = $i17 - $i16;

        $i19 = staticinvoke <java.lang.Math: int max(int,int)>($i18, 0);

        $i20 = staticinvoke <java.lang.Math: int max(int,int)>(i5, 0);

        virtualinvoke r4.<java.awt.Component: void setBounds(int,int,int,int)>($i13, i2, $i19, $i20);

     label2:
        goto label5;

     label3:
        $r2 = r1.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r3 = virtualinvoke $r2.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i0 = r1.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i1 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i0, $r3);

        if $i1 != 0 goto label4;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(i5, 0);

        $i8 = r5.<java.awt.Dimension: int height>;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 0);

        virtualinvoke r4.<java.awt.Component: void setBounds(int,int,int,int)>(i2, 0, $i7, $i9);

        goto label5;

     label4:
        $i3 = r5.<java.awt.Dimension: int width>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(i5, 0);

        virtualinvoke r4.<java.awt.Component: void setBounds(int,int,int,int)>(0, i2, $i4, $i6);

     label5:
        return;
    }

    int getSizeForPrimaryAxis(java.awt.Dimension)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.ComponentOrientation $r2;
        java.awt.Dimension r3;
        int $i0, $i1, $i2, $i3;
        java.awt.Container $r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r3 := @parameter0: java.awt.Dimension;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i1 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i0, $r2);

        if $i1 != 0 goto label1;

        $i3 = r3.<java.awt.Dimension: int width>;

        return $i3;

     label1:
        $i2 = r3.<java.awt.Dimension: int height>;

        return $i2;
    }

    int getSizeForSecondaryAxis(java.awt.Dimension)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.ComponentOrientation $r2;
        java.awt.Dimension r3;
        int $i0, $i1, $i2, $i3;
        java.awt.Container $r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r3 := @parameter0: java.awt.Dimension;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i1 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i0, $r2);

        if $i1 != 0 goto label1;

        $i3 = r3.<java.awt.Dimension: int height>;

        return $i3;

     label1:
        $i2 = r3.<java.awt.Dimension: int width>;

        return $i2;
    }

    int getSizeForPrimaryAxis(java.awt.Insets, boolean)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Insets r3;
        java.awt.ComponentOrientation $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.Container $r1;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r3 := @parameter0: java.awt.Insets;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i1 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i0, $r2);

        if $i1 != 0 goto label2;

        if z0 == 0 goto label1;

        $i5 = r3.<java.awt.Insets: int left>;

        return $i5;

     label1:
        $i4 = r3.<java.awt.Insets: int right>;

        return $i4;

     label2:
        if z0 == 0 goto label3;

        $i3 = r3.<java.awt.Insets: int top>;

        return $i3;

     label3:
        $i2 = r3.<java.awt.Insets: int bottom>;

        return $i2;
    }

    int getSizeForSecondaryAxis(java.awt.Insets, boolean)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.awt.Insets r3;
        java.awt.ComponentOrientation $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.Container $r1;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        r3 := @parameter0: java.awt.Insets;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.awt.Container _target>;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        $i1 = staticinvoke <com.jidesoft.swing.JideBoxLayout: int resolveAxis(int,java.awt.ComponentOrientation)>($i0, $r2);

        if $i1 != 0 goto label2;

        if z0 == 0 goto label1;

        $i5 = r3.<java.awt.Insets: int top>;

        return $i5;

     label1:
        $i4 = r3.<java.awt.Insets: int bottom>;

        return $i4;

     label2:
        if z0 == 0 goto label3;

        $i3 = r3.<java.awt.Insets: int left>;

        return $i3;

     label3:
        $i2 = r3.<java.awt.Insets: int right>;

        return $i2;
    }

    public java.util.Map getConstraintMap()
    {
        com.jidesoft.swing.JideBoxLayout r0;
        java.util.HashMap $r1;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        $r1 = r0.<com.jidesoft.swing.JideBoxLayout: java.util.HashMap _constraintMap>;

        return $r1;
    }

    protected static int resolveAxis(int, java.awt.ComponentOrientation)
    {
        byte $b1, $b3;
        int i0, i2;
        java.awt.ComponentOrientation r0;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.awt.ComponentOrientation;

        if i0 != 2 goto label3;

        $z1 = virtualinvoke r0.<java.awt.ComponentOrientation: boolean isHorizontal()>();

        if $z1 == 0 goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        i2 = $b1;

        goto label7;

     label3:
        if i0 != 3 goto label6;

        $z0 = virtualinvoke r0.<java.awt.ComponentOrientation: boolean isHorizontal()>();

        if $z0 == 0 goto label4;

        $b3 = 1;

        goto label5;

     label4:
        $b3 = 0;

     label5:
        i2 = $b3;

        goto label7;

     label6:
        i2 = i0;

     label7:
        return i2;
    }

    public int getGap()
    {
        int $i0;
        com.jidesoft.swing.JideBoxLayout r0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _gap>;

        return $i0;
    }

    public void setGap(int)
    {
        int i0;
        com.jidesoft.swing.JideBoxLayout r0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        i0 := @parameter0: int;

        r0.<com.jidesoft.swing.JideBoxLayout: int _gap> = i0;

        return;
    }

    protected java.awt.Dimension getPreferredSizeOf(java.awt.Component, int)
    {
        com.jidesoft.swing.JideBoxLayout r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14;
        java.awt.Component r0;
        java.awt.Dimension $r1, $r2, $r3;

        r4 := @this: com.jidesoft.swing.JideBoxLayout;

        r0 := @parameter0: java.awt.Component;

        i12 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        $r2 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        $i1 = $r1.<java.awt.Dimension: int height>;

        $i0 = $r2.<java.awt.Dimension: int height>;

        if $i1 >= $i0 goto label1;

        $i11 = $r2.<java.awt.Dimension: int height>;

        $r1.<java.awt.Dimension: int height> = $i11;

     label1:
        $i3 = $r1.<java.awt.Dimension: int width>;

        $i2 = $r2.<java.awt.Dimension: int width>;

        if $i3 >= $i2 goto label2;

        $i10 = $r2.<java.awt.Dimension: int width>;

        $r1.<java.awt.Dimension: int width> = $i10;

     label2:
        $r3 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getMaximumSize()>();

        $i5 = $r1.<java.awt.Dimension: int height>;

        $i4 = $r3.<java.awt.Dimension: int height>;

        if $i5 <= $i4 goto label3;

        $i8 = $r3.<java.awt.Dimension: int height>;

        if $i8 == 32767 goto label3;

        $i9 = $r3.<java.awt.Dimension: int height>;

        $r1.<java.awt.Dimension: int height> = $i9;

     label3:
        $i13 = $r1.<java.awt.Dimension: int width>;

        $i14 = $r3.<java.awt.Dimension: int width>;

        if $i13 <= $i14 goto label4;

        $i6 = $r3.<java.awt.Dimension: int height>;

        if $i6 == 32767 goto label4;

        $i7 = $r3.<java.awt.Dimension: int width>;

        $r1.<java.awt.Dimension: int width> = $i7;

     label4:
        return $r1;
    }

    public boolean isResetWhenInvalidate()
    {
        com.jidesoft.swing.JideBoxLayout r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        $z0 = r0.<com.jidesoft.swing.JideBoxLayout: boolean _resetWhenInvalidate>;

        return $z0;
    }

    public void setResetWhenInvalidate(boolean)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideBoxLayout: boolean _resetWhenInvalidate> = z0;

        return;
    }

    public int getAxis()
    {
        int $i0;
        com.jidesoft.swing.JideBoxLayout r0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        $i0 = r0.<com.jidesoft.swing.JideBoxLayout: int _axis>;

        return $i0;
    }

    public void setAxis(int)
    {
        int i0;
        com.jidesoft.swing.JideBoxLayout r0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        i0 := @parameter0: int;

        r0.<com.jidesoft.swing.JideBoxLayout: int _axis> = i0;

        return;
    }

    public boolean isAlwaysLayout()
    {
        com.jidesoft.swing.JideBoxLayout r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        $z0 = r0.<com.jidesoft.swing.JideBoxLayout: boolean _alwaysLayout>;

        return $z0;
    }

    public void setAlwaysLayout(boolean)
    {
        com.jidesoft.swing.JideBoxLayout r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.JideBoxLayout;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.JideBoxLayout: boolean _alwaysLayout> = z0;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <com.jidesoft.swing.JideBoxLayout: long serialVersionUID> = -183922972679053590L;

        <com.jidesoft.swing.JideBoxLayout: int PAGE_AXIS> = 3;

        <com.jidesoft.swing.JideBoxLayout: int LINE_AXIS> = 2;

        <com.jidesoft.swing.JideBoxLayout: int Y_AXIS> = 1;

        <com.jidesoft.swing.JideBoxLayout: int X_AXIS> = 0;

        <com.jidesoft.swing.JideBoxLayout: java.lang.String VARY> = "vary";

        <com.jidesoft.swing.JideBoxLayout: java.lang.String FLEXIBLE> = "flexible";

        <com.jidesoft.swing.JideBoxLayout: java.lang.String FIX> = "fix";

        $r0 = class "Lcom/jidesoft/swing/JideBoxLayout;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.jidesoft.swing.JideBoxLayout: java.util.logging.Logger LOGGER> = $r2;

        return;
    }
}
