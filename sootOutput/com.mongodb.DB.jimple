public abstract class com.mongodb.DB extends java.lang.Object
{
    final com.mongodb.Mongo _mongo;
    final java.lang.String _name;
    final java.util.Set _seenCollections;
    protected boolean _readOnly;
    private com.mongodb.WriteConcern _concern;
    java.lang.String _username;
    byte[] _authhash;

    public void <init>(com.mongodb.Mongo, java.lang.String)
    {
        java.util.HashSet $r1;
        com.mongodb.Mongo r2;
        com.mongodb.DB r0;
        java.lang.String r3;

        r0 := @this: com.mongodb.DB;

        r2 := @parameter0: com.mongodb.Mongo;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.mongodb.DB: java.util.Set _seenCollections> = $r1;

        r0.<com.mongodb.DB: boolean _readOnly> = 0;

        r0.<com.mongodb.DB: byte[] _authhash> = null;

        r0.<com.mongodb.DB: com.mongodb.Mongo _mongo> = r2;

        r0.<com.mongodb.DB: java.lang.String _name> = r3;

        return;
    }

    public abstract void requestStart();

    public abstract void requestDone();

    public abstract void requestEnsureConnection();

    protected abstract com.mongodb.DBCollection doGetCollection(java.lang.String);

    public final com.mongodb.DBCollection getCollection(java.lang.String)
    {
        com.mongodb.DBCollection $r2;
        java.util.Set $r3;
        com.mongodb.DB r0;
        java.lang.String r1;

        r0 := @this: com.mongodb.DB;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.DBCollection doGetCollection(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<com.mongodb.DB: java.util.Set _seenCollections>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label1:
        return $r2;
    }

    public final com.mongodb.DBCollection createCollection(java.lang.String, com.mongodb.DBObject)
    {
        com.mongodb.DBObject r0;
        com.mongodb.DBCollection $r3;
        com.mongodb.BasicDBObject $r4;
        com.mongodb.CommandResult $r5;
        com.mongodb.DB r1;
        java.lang.String r2;

        r1 := @this: com.mongodb.DB;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: com.mongodb.DBObject;

        if r0 == null goto label1;

        $r4 = new com.mongodb.BasicDBObject;

        specialinvoke $r4.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("create", r2);

        interfaceinvoke $r4.<com.mongodb.DBObject: void putAll(org.bson.BSONObject)>(r0);

        $r5 = virtualinvoke r1.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r4);

        virtualinvoke $r5.<com.mongodb.CommandResult: void throwOnError()>();

     label1:
        $r3 = virtualinvoke r1.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>(r2);

        return $r3;
    }

    public com.mongodb.DBCollection getCollectionFromString(java.lang.String)
    {
        com.mongodb.DBCollection $r1, $r2, r5;
        int $i0, $i1;
        com.mongodb.DB r0;
        java.lang.String $r3, r4;
        boolean $z0;

        r0 := @this: com.mongodb.DB;

        r4 := @parameter0: java.lang.String;

        r5 = null;

     label1:
        $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r3 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i1);

        r5 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>($r3);

        goto label1;

     label2:
        if r5 == null goto label3;

        $r2 = virtualinvoke r5.<com.mongodb.DBCollection: com.mongodb.DBCollection getCollection(java.lang.String)>(r4);

        return $r2;

     label3:
        $r1 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>(r4);

        return $r1;
    }

    public com.mongodb.CommandResult command(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBObject r2, $r3;
        com.mongodb.DBCollection $r1;
        com.mongodb.CommandResult r4;
        com.mongodb.DB r0;

        r0 := @this: com.mongodb.DB;

        r2 := @parameter0: com.mongodb.DBObject;

        $r1 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>("$cmd");

        $r3 = virtualinvoke $r1.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>(r2);

        r4 = (com.mongodb.CommandResult) $r3;

        r4.<com.mongodb.CommandResult: com.mongodb.DBObject _cmd> = r2;

        return r4;
    }

    public com.mongodb.CommandResult command(java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.CommandResult $r4;
        java.lang.Boolean $r3;
        com.mongodb.DB r0;
        java.lang.String r2;

        r0 := @this: com.mongodb.DB;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.mongodb.BasicDBObject;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>(r2, $r3);

        $r4 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        return $r4;
    }

    public transient com.mongodb.CommandResult doEval(java.lang.String, java.lang.Object[]) throws com.mongodb.MongoException
    {
        java.lang.Object[] r4;
        com.mongodb.BasicDBObjectBuilder $r1, $r3, $r5;
        com.mongodb.CommandResult $r7;
        com.mongodb.DBObject $r6;
        com.mongodb.DB r0;
        java.lang.String r2;

        r0 := @this: com.mongodb.DB;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r3 = virtualinvoke $r1.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("$eval", r2);

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("args", r4);

        $r6 = virtualinvoke $r5.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        $r7 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r6);

        return $r7;
    }

    public transient java.lang.Object eval(java.lang.String, java.lang.Object[]) throws com.mongodb.MongoException
    {
        java.lang.Object[] r2;
        com.mongodb.MongoException $r4;
        com.mongodb.CommandResult $r3;
        com.mongodb.DB r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object $r9;
        java.lang.String r1, $r8;
        boolean $z0;

        r0 := @this: com.mongodb.DB;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult doEval(java.lang.String,java.lang.Object[])>(r1, r2);

        $z0 = virtualinvoke $r3.<com.mongodb.CommandResult: boolean ok()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r3.<com.mongodb.CommandResult: java.lang.Object get(java.lang.String)>("retval");

        return $r9;

     label1:
        $r4 = new com.mongodb.MongoException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eval failed: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.mongodb.MongoException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public com.mongodb.CommandResult getStats()
    {
        com.mongodb.CommandResult $r1;
        com.mongodb.DB r0;

        r0 := @this: com.mongodb.DB;

        $r1 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(java.lang.String)>("dbstats");

        return $r1;
    }

    public java.lang.String getName()
    {
        com.mongodb.DB r0;
        java.lang.String $r1;

        r0 := @this: com.mongodb.DB;

        $r1 = r0.<com.mongodb.DB: java.lang.String _name>;

        return $r1;
    }

    public void setReadOnly(java.lang.Boolean)
    {
        java.lang.Boolean r1;
        com.mongodb.DB r0;
        boolean $z0;

        r0 := @this: com.mongodb.DB;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<com.mongodb.DB: boolean _readOnly> = $z0;

        return;
    }

    public java.util.Set getCollectionNames() throws com.mongodb.MongoException
    {
        java.util.ArrayList $r4;
        java.util.HashSet $r19;
        com.mongodb.DBObject r7;
        int $i0, $i1, $i2;
        java.lang.String $r10, $r11, $r12, $r13, $r18;
        boolean $z0, $z1;
        com.mongodb.util.OrderedSet $r5;
        java.util.Iterator $r3;
        com.mongodb.MongoException $r14;
        com.mongodb.DBCollection $r1;
        com.mongodb.BasicDBObject $r2;
        java.lang.RuntimeException $r20;
        com.mongodb.DB r0;
        java.lang.Object $r6, $r8, $r9;
        java.lang.StringBuilder $r15, $r16, $r17;

        r0 := @this: com.mongodb.DB;

        $r1 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>("system.namespaces");

        if $r1 != null goto label1;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("this is impossible");

        throw $r20;

     label1:
        $r2 = new com.mongodb.BasicDBObject;

        specialinvoke $r2.<com.mongodb.BasicDBObject: void <init>()>();

        $r3 = virtualinvoke $r1.<com.mongodb.DBCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int)>($r2, null, 0, 0, 0);

        if $r3 != null goto label2;

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>()>();

        return $r19;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.mongodb.DBObject) $r6;

        $r8 = interfaceinvoke r7.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("name");

        if $r8 != null goto label4;

        $r14 = new com.mongodb.MongoException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("how is name null : ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.mongodb.MongoException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label4:
        $r9 = interfaceinvoke r7.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("name");

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r12 = r0.<com.mongodb.DB: java.lang.String _name>;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label5;

        goto label3;

     label5:
        $i1 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>("$");

        if $i1 < 0 goto label6;

        goto label3;

     label6:
        $i2 = $i0 + 1;

        $r13 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label7:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r4);

        $r5 = new com.mongodb.util.OrderedSet;

        specialinvoke $r5.<com.mongodb.util.OrderedSet: void <init>(java.util.Collection)>($r4);

        return $r5;
    }

    public boolean collectionExists(java.lang.String)
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        int $i0;
        com.mongodb.DB r2;
        java.lang.Object $r5;
        java.lang.String r0, $r1, r6;
        boolean $z0, $z1, $z2;

        r2 := @this: com.mongodb.DB;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = virtualinvoke r2.<com.mongodb.DB: java.util.Set getCollectionNames()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i0 != 0 goto label3;

        return 0;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        return 0;
    }

    public java.lang.String toString()
    {
        com.mongodb.DB r0;
        java.lang.String $r1;

        r0 := @this: com.mongodb.DB;

        $r1 = r0.<com.mongodb.DB: java.lang.String _name>;

        return $r1;
    }

    public void resetIndexCache()
    {
        java.util.Iterator $r2;
        com.mongodb.DBCollection r4;
        java.util.Set $r1;
        com.mongodb.DB r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.mongodb.DB;

        $r1 = r0.<com.mongodb.DB: java.util.Set _seenCollections>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.mongodb.DBCollection) $r3;

        virtualinvoke r4.<com.mongodb.DBCollection: void resetIndexCache()>();

        goto label1;

     label2:
        return;
    }

    public com.mongodb.CommandResult getLastError() throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.CommandResult $r3;
        com.mongodb.DB r0;
        java.lang.Integer $r2;

        r0 := @this: com.mongodb.DB;

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("getlasterror", $r2);

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        return $r3;
    }

    public com.mongodb.CommandResult getLastError(com.mongodb.WriteConcern) throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r2;
        com.mongodb.CommandResult $r3;
        com.mongodb.DB r0;
        com.mongodb.WriteConcern r1;

        r0 := @this: com.mongodb.DB;

        r1 := @parameter0: com.mongodb.WriteConcern;

        $r2 = virtualinvoke r1.<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>();

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r2);

        return $r3;
    }

    public com.mongodb.CommandResult getLastError(int, int, boolean) throws com.mongodb.MongoException
    {
        int i0, i1;
        com.mongodb.BasicDBObject $r2;
        com.mongodb.CommandResult $r3;
        com.mongodb.DB r0;
        com.mongodb.WriteConcern $r1;
        boolean z0;

        r0 := @this: com.mongodb.DB;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = new com.mongodb.WriteConcern;

        specialinvoke $r1.<com.mongodb.WriteConcern: void <init>(int,int,boolean)>(i0, i1, z0);

        $r2 = virtualinvoke $r1.<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>();

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r2);

        return $r3;
    }

    public void setWriteConcern(com.mongodb.WriteConcern)
    {
        com.mongodb.DB r1;
        com.mongodb.WriteConcern r0;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: com.mongodb.DB;

        r0 := @parameter0: com.mongodb.WriteConcern;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r1.<com.mongodb.DB: com.mongodb.WriteConcern _concern> = r0;

        return;
    }

    public com.mongodb.WriteConcern getWriteConcern()
    {
        com.mongodb.Mongo $r2;
        com.mongodb.DB r0;
        com.mongodb.WriteConcern $r1, $r3, $r4;

        r0 := @this: com.mongodb.DB;

        $r1 = r0.<com.mongodb.DB: com.mongodb.WriteConcern _concern>;

        if $r1 == null goto label1;

        $r4 = r0.<com.mongodb.DB: com.mongodb.WriteConcern _concern>;

        return $r4;

     label1:
        $r2 = r0.<com.mongodb.DB: com.mongodb.Mongo _mongo>;

        $r3 = virtualinvoke $r2.<com.mongodb.Mongo: com.mongodb.WriteConcern getWriteConcern()>();

        return $r3;
    }

    public void dropDatabase() throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.CommandResult $r3;
        com.mongodb.DB r0;
        java.lang.Integer $r2;

        r0 := @this: com.mongodb.DB;

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("dropDatabase", $r2);

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        virtualinvoke $r3.<com.mongodb.CommandResult: void throwOnError()>();

        return;
    }

    public boolean isAuthenticated()
    {
        com.mongodb.DB r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.mongodb.DB;

        $r1 = r0.<com.mongodb.DB: java.lang.String _username>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean authenticate(java.lang.String, char[]) throws com.mongodb.MongoException
    {
        byte[] $r5, $r6;
        java.lang.IllegalStateException $r7;
        java.lang.NullPointerException $r8;
        char[] r3;
        com.mongodb.DB r1;
        java.lang.String r0, $r2, $r4;
        boolean $z0;

        r1 := @this: com.mongodb.DB;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: char[];

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("username can\'t be null");

        throw $r8;

     label1:
        $r2 = r1.<com.mongodb.DB: java.lang.String _username>;

        if $r2 == null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t call authenticate twice on the same DBObject");

        throw $r7;

     label2:
        $r4 = virtualinvoke r1.<com.mongodb.DB: java.lang.String _hash(java.lang.String,char[])>(r0, r3);

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $z0 = specialinvoke r1.<com.mongodb.DB: boolean _doauth(java.lang.String,byte[])>(r0, $r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r1.<com.mongodb.DB: java.lang.String _username> = r0;

        $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        r1.<com.mongodb.DB: byte[] _authhash> = $r6;

        return 1;
    }

    com.mongodb.DBObject _authCommand(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        byte[] $r3, $r5;
        com.mongodb.DBObject $r7;
        com.mongodb.DB r0;
        java.lang.String $r1, r4, $r6;

        r0 := @this: com.mongodb.DB;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<com.mongodb.DB: java.lang.String _username>;

        if $r1 == null goto label1;

        $r3 = r0.<com.mongodb.DB: byte[] _authhash>;

        if $r3 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no auth info!");

        throw $r2;

     label2:
        $r6 = r0.<com.mongodb.DB: java.lang.String _username>;

        $r5 = r0.<com.mongodb.DB: byte[] _authhash>;

        $r7 = staticinvoke <com.mongodb.DB: com.mongodb.DBObject _authCommand(java.lang.String,java.lang.String,byte[])>(r4, $r6, $r5);

        return $r7;
    }

    static com.mongodb.DBObject _authCommand(java.lang.String, java.lang.String, byte[])
    {
        byte[] r6, $r11;
        com.mongodb.BasicDBObject $r9;
        java.lang.Integer $r10;
        java.lang.StringBuilder $r0, $r2, $r4, $r7;
        java.lang.String r1, r3, $r5, $r8, $r12;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: byte[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>(r6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new com.mongodb.BasicDBObject;

        specialinvoke $r9.<com.mongodb.BasicDBObject: void <init>()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r9.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("authenticate", $r10);

        virtualinvoke $r9.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("user", r3);

        virtualinvoke $r9.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("nonce", r1);

        $r11 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();

        $r12 = staticinvoke <com.mongodb.util.Util: java.lang.String hexMD5(byte[])>($r11);

        virtualinvoke $r9.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("key", $r12);

        return $r9;
    }

    private boolean _doauth(java.lang.String, byte[])
    {
        byte[] r6;
        com.mongodb.MongoException $r9;
        com.mongodb.BasicDBObject $r1;
        com.mongodb.CommandResult $r3, $r8;
        java.lang.Integer $r2;
        com.mongodb.DBObject $r7;
        com.mongodb.DB r0;
        java.lang.String $r4, r5;
        boolean $z0, $z1;

        r0 := @this: com.mongodb.DB;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: byte[];

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("getnonce", $r2);

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        $z0 = virtualinvoke $r3.<com.mongodb.CommandResult: boolean ok()>();

        if $z0 != 0 goto label1;

        $r9 = new com.mongodb.MongoException;

        specialinvoke $r9.<com.mongodb.MongoException: void <init>(java.lang.String)>("Error - unable to get nonce value for authentication.");

        throw $r9;

     label1:
        $r4 = virtualinvoke $r3.<com.mongodb.CommandResult: java.lang.String getString(java.lang.String)>("nonce");

        $r7 = staticinvoke <com.mongodb.DB: com.mongodb.DBObject _authCommand(java.lang.String,java.lang.String,byte[])>($r4, r5, r6);

        $r8 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r7);

        $z1 = virtualinvoke $r8.<com.mongodb.CommandResult: boolean ok()>();

        return $z1;
    }

    public void addUser(java.lang.String, char[])
    {
        com.mongodb.DBCollection $r1;
        com.mongodb.BasicDBObject $r2, $r7;
        com.mongodb.DBObject $r4, r8;
        char[] r5;
        com.mongodb.DB r0;
        java.lang.String r3, $r6;

        r0 := @this: com.mongodb.DB;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: char[];

        $r1 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>("system.users");

        $r2 = new com.mongodb.BasicDBObject;

        specialinvoke $r2.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("user", r3);

        $r4 = virtualinvoke $r1.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>($r2);

        r8 = $r4;

        if $r4 != null goto label1;

        $r7 = new com.mongodb.BasicDBObject;

        specialinvoke $r7.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("user", r3);

        r8 = $r7;

     label1:
        $r6 = virtualinvoke r0.<com.mongodb.DB: java.lang.String _hash(java.lang.String,char[])>(r3, r5);

        interfaceinvoke r8.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("pwd", $r6);

        virtualinvoke $r1.<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>(r8);

        return;
    }

    java.lang.String _hash(java.lang.String, char[])
    {
        byte[] $r3, $r5, $r6;
        java.io.ByteArrayOutputStream $r12;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, i8, $i9, $i10;
        java.lang.String r1, $r4, $r7;
        char $c5, $c6;
        java.io.IOException $r9;
        java.lang.RuntimeException $r14;
        java.lang.IllegalArgumentException $r13;
        char[] r2;
        com.mongodb.DB r11;

        r11 := @this: com.mongodb.DB;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: char[];

        $r12 = new java.io.ByteArrayOutputStream;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + 20;

        $i1 = lengthof r2;

        $i3 = $i2 + $i1;

        specialinvoke $r12.<java.io.ByteArrayOutputStream: void <init>(int)>($i3);

     label1:
        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void write(byte[])>($r3);

        $r4 = ":mongo:";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void write(byte[])>($r5);

        i8 = 0;

     label2:
        $i4 = lengthof r2;

        if i8 >= $i4 goto label4;

        $c5 = r2[i8];

        $i9 = (int) $c5;

        if $i9 < 128 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t handle non-ascii passwords yet");

        throw $r13;

     label3:
        $c6 = r2[i8];

        $b7 = (byte) $c6;

        $i10 = (int) $b7;

        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void write(int)>($i10);

        i8 = i8 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("impossible", $r9);

        throw $r14;

     label6:
        $r6 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r7 = staticinvoke <com.mongodb.util.Util: java.lang.String hexMD5(byte[])>($r6);

        return $r7;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public com.mongodb.CommandResult getPreviousError() throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.CommandResult $r3;
        com.mongodb.DB r0;
        java.lang.Integer $r2;

        r0 := @this: com.mongodb.DB;

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("getpreverror", $r2);

        $r3 = virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        return $r3;
    }

    public void resetError() throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.DB r0;
        java.lang.Integer $r2;

        r0 := @this: com.mongodb.DB;

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("reseterror", $r2);

        virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        return;
    }

    public void forceError() throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.DB r0;
        java.lang.Integer $r2;

        r0 := @this: com.mongodb.DB;

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("forceerror", $r2);

        virtualinvoke r0.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        return;
    }

    public com.mongodb.Mongo getMongo()
    {
        com.mongodb.DB r0;
        com.mongodb.Mongo $r1;

        r0 := @this: com.mongodb.DB;

        $r1 = r0.<com.mongodb.DB: com.mongodb.Mongo _mongo>;

        return $r1;
    }

    public com.mongodb.DB getSisterDB(java.lang.String)
    {
        com.mongodb.Mongo $r2;
        com.mongodb.DB r0, $r3;
        java.lang.String r1;

        r0 := @this: com.mongodb.DB;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mongodb.DB: com.mongodb.Mongo _mongo>;

        $r3 = virtualinvoke $r2.<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>(r1);

        return $r3;
    }
}
