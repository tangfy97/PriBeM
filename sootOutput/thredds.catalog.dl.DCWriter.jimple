public class thredds.catalog.dl.DCWriter extends java.lang.Object
{
    private static final org.jdom.Namespace defNS;
    private static final java.lang.String schemaLocation;
    private static final java.lang.String schemaLocationLocal;
    private static java.lang.String threddsServerURL;
    private thredds.catalog.InvCatalog cat;

    public void <init>(thredds.catalog.InvCatalog)
    {
        thredds.catalog.InvCatalog r1;
        thredds.catalog.dl.DCWriter r0;

        r0 := @this: thredds.catalog.dl.DCWriter;

        r1 := @parameter0: thredds.catalog.InvCatalog;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<thredds.catalog.dl.DCWriter: thredds.catalog.InvCatalog cat> = r1;

        return;
    }

    public void writeItems(java.lang.String)
    {
        thredds.catalog.InvCatalog $r3;
        java.io.File $r0;
        thredds.catalog.dl.DCWriter r2;
        java.util.List $r4;
        int i0, $i1;
        java.lang.Object $r5;
        java.lang.String r1;
        boolean $z0;
        thredds.catalog.InvDataset r6;

        r2 := @this: thredds.catalog.dl.DCWriter;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

     label1:
        $r3 = r2.<thredds.catalog.dl.DCWriter: thredds.catalog.InvCatalog cat>;

        $r4 = virtualinvoke $r3.<thredds.catalog.InvCatalog: java.util.List getDatasets()>();

        i0 = 0;

     label2:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (thredds.catalog.InvDataset) $r5;

        specialinvoke r2.<thredds.catalog.dl.DCWriter: void doDataset(thredds.catalog.InvDataset,java.lang.String)>(r6, r1);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }

    private void doDataset(thredds.catalog.InvDataset, java.lang.String)
    {
        thredds.catalog.dl.DCWriter r3;
        java.io.BufferedOutputStream $r13;
        int i0, $i1;
        java.lang.String r4, $r5, $r9, $r12;
        thredds.catalog.InvDataset r0, r2;
        boolean $z0;
        java.io.PrintStream $r15;
        java.io.FileOutputStream $r14;
        java.io.IOException $r16;
        java.util.List $r17;
        java.lang.Object $r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11;

        r3 := @this: thredds.catalog.dl.DCWriter;

        r0 := @parameter0: thredds.catalog.InvDataset;

        r4 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<thredds.catalog.InvDataset: boolean isHarvest()>();

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r0.<thredds.catalog.InvDataset: java.lang.String getID()>();

        if $r5 == null goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke r0.<thredds.catalog.InvDataset: java.lang.String getID()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dc.xml");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.lang.String)>($r12);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke r3.<thredds.catalog.dl.DCWriter: void writeOneItem(thredds.catalog.InvDataset,java.io.OutputStream)>(r0, $r15);

        specialinvoke r3.<thredds.catalog.dl.DCWriter: void writeOneItem(thredds.catalog.InvDataset,java.io.OutputStream)>(r0, $r13);

        virtualinvoke $r13.<java.io.OutputStream: void close()>();

     label2:
        return;

     label3:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

     label4:
        $r17 = virtualinvoke r0.<thredds.catalog.InvDataset: java.util.List getDatasets()>();

        i0 = 0;

     label5:
        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i0 >= $i1 goto label6;

        $r1 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (thredds.catalog.InvDataset) $r1;

        specialinvoke r3.<thredds.catalog.dl.DCWriter: void doDataset(thredds.catalog.InvDataset,java.lang.String)>(r2, r4);

        i0 = i0 + 1;

        goto label5;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void writeOneItem(thredds.catalog.InvDataset, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom.output.Format $r16;
        org.jdom.output.XMLOutputter $r15;
        thredds.catalog.dl.DCWriter r3;
        org.jdom.Document $r2;
        org.jdom.Namespace $r1, $r5, $r7, $r14;
        java.lang.String $r8, $r11, $r13;
        thredds.catalog.InvDataset r4;
        java.io.OutputStream r17;
        java.lang.StringBuilder $r6, $r9, $r10, $r12;
        org.jdom.Element $r0;

        r3 := @this: thredds.catalog.dl.DCWriter;

        r4 := @parameter0: thredds.catalog.InvDataset;

        r17 := @parameter1: java.io.OutputStream;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("dc", $r1);

        $r2 = new org.jdom.Document;

        specialinvoke $r2.<org.jdom.Document: void <init>(org.jdom.Element)>($r0);

        virtualinvoke r3.<thredds.catalog.dl.DCWriter: void writeDataset(thredds.catalog.InvDataset,org.jdom.Element)>(r4, $r0);

        $r5 = <thredds.catalog.XMLEntityResolver: org.jdom.Namespace xsiNS>;

        virtualinvoke $r0.<org.jdom.Element: void addNamespaceDeclaration(org.jdom.Namespace)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        $r8 = virtualinvoke $r7.<org.jdom.Namespace: java.lang.String getURI()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = <thredds.catalog.dl.DCWriter: java.lang.String schemaLocation>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <thredds.catalog.XMLEntityResolver: org.jdom.Namespace xsiNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("schemaLocation", $r13, $r14);

        $r15 = new org.jdom.output.XMLOutputter;

        $r16 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>();

        specialinvoke $r15.<org.jdom.output.XMLOutputter: void <init>(org.jdom.output.Format)>($r16);

        virtualinvoke $r15.<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.OutputStream)>($r2, r17);

        return;
    }

    public void writeDataset(thredds.catalog.InvDataset, org.jdom.Element)
    {
        org.jdom.Namespace $r2, $r7, $r13, $r15, $r20, $r26, $r28, $r32, $r36, $r40, $r44, $r49, $r53, $r68, $r71, $r76, $r81, $r85;
        thredds.catalog.ThreddsMetadata$Vocab r88;
        thredds.catalog.InvCatalog $r58;
        ucar.nc2.units.DateRange $r11;
        thredds.catalog.InvCatalogImpl $r59;
        java.lang.StringBuilder $r54, $r56, $r57, $r62, $r63, $r65;
        java.lang.String $r4, $r8, $r17, $r22, $r29, $r33, $r37, $r41, $r45, $r50, $r55, $r61, $r64, $r66, $r77, $r86;
        thredds.catalog.ThreddsMetadata$GeospatialCoverage $r24;
        org.jdom.Element r0, $r1, $r5, $r6, $r9, $r12, $r14, $r18, $r19, $r23, $r25, $r27, $r30, $r31, $r34, $r35, $r38, $r39, $r42, $r43, $r46, $r48, $r51, $r52, $r67, $r69, $r70, $r72, $r75, $r78, $r80, $r84, $r87;
        java.util.Date $r74;
        java.net.URI $r60;
        thredds.catalog.InvDataset r3;
        java.util.List $r10, $r47;
        ucar.nc2.units.DateType $r16, $r21, $r73;
        thredds.catalog.dl.DCWriter r82;
        thredds.catalog.ThreddsMetadata$Source r89;
        int $i0, $i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r79, $r83;

        r82 := @this: thredds.catalog.dl.DCWriter;

        r3 := @parameter0: thredds.catalog.InvDataset;

        r0 := @parameter1: org.jdom.Element;

        $r1 = new org.jdom.Element;

        $r2 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r1.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("title", $r2);

        $r4 = virtualinvoke r3.<thredds.catalog.InvDataset: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r4);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r5);

        $r6 = new org.jdom.Element;

        $r7 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r6.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Entry_ID", $r7);

        $r8 = virtualinvoke r3.<thredds.catalog.InvDataset: java.lang.String getUniqueID()>();

        $r9 = virtualinvoke $r6.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r8);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r9);

        $r10 = virtualinvoke r3.<thredds.catalog.InvDataset: java.util.List getKeywords()>();

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        i4 = 0;

     label1:
        $i3 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i4 >= $i3 goto label2;

        $r83 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i4);

        r88 = (thredds.catalog.ThreddsMetadata$Vocab) $r83;

        $r84 = new org.jdom.Element;

        $r85 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r84.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Keyword", $r85);

        $r86 = virtualinvoke r88.<thredds.catalog.ThreddsMetadata$Vocab: java.lang.String getText()>();

        $r87 = virtualinvoke $r84.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r86);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r87);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r11 = virtualinvoke r3.<thredds.catalog.InvDataset: ucar.nc2.units.DateRange getTimeCoverage()>();

        $r12 = new org.jdom.Element;

        $r13 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r12.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Temporal_Coverage", $r13);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r12);

        $r14 = new org.jdom.Element;

        $r15 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Start_Date", $r15);

        $r16 = virtualinvoke $r11.<ucar.nc2.units.DateRange: ucar.nc2.units.DateType getStart()>();

        $r17 = virtualinvoke $r16.<ucar.nc2.units.DateType: java.lang.String toDateString()>();

        $r18 = virtualinvoke $r14.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r17);

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r18);

        $r19 = new org.jdom.Element;

        $r20 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r19.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("End_Date", $r20);

        $r21 = virtualinvoke $r11.<ucar.nc2.units.DateRange: ucar.nc2.units.DateType getEnd()>();

        $r22 = virtualinvoke $r21.<ucar.nc2.units.DateType: java.lang.String toDateString()>();

        $r23 = virtualinvoke $r19.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r22);

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r23);

        $r24 = virtualinvoke r3.<thredds.catalog.InvDataset: thredds.catalog.ThreddsMetadata$GeospatialCoverage getGeospatialCoverage()>();

        $r25 = new org.jdom.Element;

        $r26 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r25.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Spatial_Coverage", $r26);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r25);

        $r27 = new org.jdom.Element;

        $r28 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r27.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Southernmost_Latitude", $r28);

        $d0 = virtualinvoke $r24.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: double getLatSouth()>();

        $r29 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r30 = virtualinvoke $r27.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r29);

        virtualinvoke $r25.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r30);

        $r31 = new org.jdom.Element;

        $r32 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r31.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Northernmost_Latitude", $r32);

        $d1 = virtualinvoke $r24.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: double getLatNorth()>();

        $r33 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        $r34 = virtualinvoke $r31.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r33);

        virtualinvoke $r25.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r34);

        $r35 = new org.jdom.Element;

        $r36 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r35.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Westernmost_Latitude", $r36);

        $d2 = virtualinvoke $r24.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: double getLonWest()>();

        $r37 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d2);

        $r38 = virtualinvoke $r35.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r37);

        virtualinvoke $r25.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r38);

        $r39 = new org.jdom.Element;

        $r40 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r39.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Easternmost_Latitude", $r40);

        $d3 = virtualinvoke $r24.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: double getLonEast()>();

        $r41 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d3);

        $r42 = virtualinvoke $r39.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r41);

        virtualinvoke $r25.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r42);

        $r43 = new org.jdom.Element;

        $r44 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r43.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Use_Constraints", $r44);

        $r45 = virtualinvoke r3.<thredds.catalog.InvDataset: java.lang.String getDocumentation(java.lang.String)>("rights");

        $r46 = virtualinvoke $r43.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r45);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r46);

        $r47 = virtualinvoke r3.<thredds.catalog.InvDataset: java.util.List getPublishers()>();

        $i1 = interfaceinvoke $r47.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        i5 = 0;

     label3:
        $i2 = interfaceinvoke $r47.<java.util.List: int size()>();

        if i5 >= $i2 goto label4;

        $r79 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(i5);

        r89 = (thredds.catalog.ThreddsMetadata$Source) $r79;

        $r80 = new org.jdom.Element;

        $r81 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r80.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Data_Center", $r81);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r80);

        virtualinvoke r82.<thredds.catalog.dl.DCWriter: void writePublisher(thredds.catalog.ThreddsMetadata$Source,org.jdom.Element)>(r89, $r80);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r48 = new org.jdom.Element;

        $r49 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r48.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Summary", $r49);

        $r50 = virtualinvoke r3.<thredds.catalog.InvDataset: java.lang.String getDocumentation(java.lang.String)>("summary");

        $r51 = virtualinvoke $r48.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r50);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r51);

        $r52 = new org.jdom.Element;

        $r53 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r52.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Related_URL", $r53);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r52);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = <thredds.catalog.dl.DCWriter: java.lang.String threddsServerURL>;

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?catalog=");

        $r58 = virtualinvoke r3.<thredds.catalog.InvDataset: thredds.catalog.InvCatalog getParentCatalog()>();

        $r59 = (thredds.catalog.InvCatalogImpl) $r58;

        $r60 = virtualinvoke $r59.<thredds.catalog.InvCatalogImpl: java.net.URI getBaseURI()>();

        $r61 = virtualinvoke $r60.<java.net.URI: java.lang.String toString()>();

        $r62 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&dataset=");

        $r64 = virtualinvoke r3.<thredds.catalog.InvDataset: java.lang.String getID()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r67 = new org.jdom.Element;

        $r68 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r67.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("URL_Content_Type", $r68);

        $r69 = virtualinvoke $r67.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>("THREDDS access page");

        virtualinvoke $r52.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r69);

        $r70 = new org.jdom.Element;

        $r71 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r70.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("URL", $r71);

        $r72 = virtualinvoke $r70.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r66);

        virtualinvoke $r52.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r72);

        $r73 = new ucar.nc2.units.DateType;

        $r74 = new java.util.Date;

        specialinvoke $r74.<java.util.Date: void <init>()>();

        specialinvoke $r73.<ucar.nc2.units.DateType: void <init>(boolean,java.util.Date)>(0, $r74);

        $r75 = new org.jdom.Element;

        $r76 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r75.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("DIF_Creation_Date", $r76);

        $r77 = virtualinvoke $r73.<ucar.nc2.units.DateType: java.lang.String toDateString()>();

        $r78 = virtualinvoke $r75.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r77);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r78);

        return;
    }

    protected void writePublisher(thredds.catalog.ThreddsMetadata$Source, org.jdom.Element)
    {
        thredds.catalog.dl.DCWriter r14;
        thredds.catalog.ThreddsMetadata$Source r5;
        int $i0;
        org.jdom.Namespace $r1, $r4, $r11, $r16, $r18, $r21;
        java.lang.String $r6, $r8, $r9, $r12, $r22;
        org.jdom.Element $r0, r2, $r3, $r7, $r10, $r13, $r15, $r17, $r19, $r20, $r23;

        r14 := @this: thredds.catalog.dl.DCWriter;

        r5 := @parameter0: thredds.catalog.ThreddsMetadata$Source;

        r2 := @parameter1: org.jdom.Element;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Data_Center_Name", $r1);

        virtualinvoke r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r0);

        $r3 = new org.jdom.Element;

        $r4 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r3.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Short_Name", $r4);

        $r6 = virtualinvoke r5.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getName()>();

        $r7 = virtualinvoke $r3.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r6);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

        $r8 = virtualinvoke r5.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getUrl()>();

        if $r8 == null goto label1;

        $r9 = virtualinvoke r5.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getUrl()>();

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r10 = new org.jdom.Element;

        $r11 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r10.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Data_Center_URL", $r11);

        $r12 = virtualinvoke r5.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getUrl()>();

        $r13 = virtualinvoke $r10.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r12);

        virtualinvoke r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r13);

     label1:
        $r15 = new org.jdom.Element;

        $r16 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r15.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Personnel", $r16);

        virtualinvoke r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r15);

        $r17 = new org.jdom.Element;

        $r18 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r17.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Role", $r18);

        $r19 = virtualinvoke $r17.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>("DATA CENTER CONTACT");

        virtualinvoke $r15.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r19);

        $r20 = new org.jdom.Element;

        $r21 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r20.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Email", $r21);

        $r22 = virtualinvoke r5.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getEmail()>();

        $r23 = virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r22);

        virtualinvoke $r15.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r23);

        return;
    }

    private void writeVariable(org.jdom.Element, thredds.catalog.ThreddsMetadata$Variable)
    {
        org.jdom.Namespace $r5, $r10, $r15, $r20, $r25;
        boolean $z0, $z1, $z2, $z3, $z4;
        thredds.catalog.dl.DCWriter r29;
        java.util.StringTokenizer $r2;
        java.lang.String $r1, $r6, $r7, $r11, $r12, $r16, $r17, $r21, $r22, $r26, $r27;
        thredds.catalog.ThreddsMetadata$Variable r0;
        org.jdom.Element r3, $r4, $r8, $r9, $r13, $r14, $r18, $r19, $r23, $r24, $r28;

        r29 := @this: thredds.catalog.dl.DCWriter;

        r3 := @parameter0: org.jdom.Element;

        r0 := @parameter1: thredds.catalog.ThreddsMetadata$Variable;

        $r1 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getVocabularyName()>();

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ">");

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r24 = new org.jdom.Element;

        $r25 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r24.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Category", $r25);

        $r26 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String trim()>();

        $r28 = virtualinvoke $r24.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r27);

        virtualinvoke r3.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r28);

     label1:
        $z1 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label2;

        $r19 = new org.jdom.Element;

        $r20 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r19.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Topic", $r20);

        $r21 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String trim()>();

        $r23 = virtualinvoke $r19.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r22);

        virtualinvoke r3.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r23);

     label2:
        $z2 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label3;

        $r14 = new org.jdom.Element;

        $r15 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Term", $r15);

        $r16 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

        $r18 = virtualinvoke $r14.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r17);

        virtualinvoke r3.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r18);

     label3:
        $z3 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label4;

        $r9 = new org.jdom.Element;

        $r10 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r9.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Variable", $r10);

        $r11 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $r13 = virtualinvoke $r9.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r12);

        virtualinvoke r3.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r13);

     label4:
        $z4 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z4 == 0 goto label5;

        $r4 = new org.jdom.Element;

        $r5 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        specialinvoke $r4.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Detailed_Variable", $r5);

        $r6 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $r8 = virtualinvoke $r4.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r7);

        virtualinvoke r3.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r8);

     label5:
        return;
    }

    private static void doOne(thredds.catalog.InvCatalogFactory, java.lang.String)
    {
        thredds.catalog.dl.DCWriter $r23;
        java.lang.String r3, $r5, $r12, $r17, $r22, $r25;
        thredds.catalog.InvCatalogFactory r6;
        boolean $z0;
        java.io.PrintStream $r1, $r10, $r19;
        java.lang.Exception $r24;
        thredds.catalog.InvCatalogImpl $r7;
        java.lang.StringBuilder $r0, $r2, $r4, $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r18, $r20, $r21;

        r6 := @parameter0: thredds.catalog.InvCatalogFactory;

        r3 := @parameter1: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***read ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        $r7 = virtualinvoke r6.<thredds.catalog.InvCatalogFactory: thredds.catalog.InvCatalogImpl readXML(java.lang.String)>(r3);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke $r7.<thredds.catalog.InvCatalogImpl: boolean check(java.lang.StringBuilder,boolean)>($r8, 0);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("catalog <");

        $r12 = virtualinvoke $r7.<thredds.catalog.InvCatalogImpl: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");

        if $z0 == 0 goto label2;

        $r25 = "is";

        goto label3;

     label2:
        $r25 = "is not";

     label3:
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" valid");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" validation output=\n");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r23 = new thredds.catalog.dl.DCWriter;

        specialinvoke $r23.<thredds.catalog.dl.DCWriter: void <init>(thredds.catalog.InvCatalog)>($r7);

        virtualinvoke $r23.<thredds.catalog.dl.DCWriter: void writeItems(java.lang.String)>("C:/temp/dif");

     label4:
        goto label6;

     label5:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r1;
        thredds.catalog.InvCatalogFactory $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <thredds.catalog.InvCatalogFactory: thredds.catalog.InvCatalogFactory getDefaultFactory(boolean)>(1);

        staticinvoke <thredds.catalog.dl.DCWriter: void doOne(thredds.catalog.InvCatalogFactory,java.lang.String)>($r0, "file:///C:/dev/thredds/catalog/test/data/TestHarvest.xml");

        return;
    }

    static void <clinit>()
    {
        org.jdom.Namespace $r0, $r2, $r8;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r10, $r11;
        java.lang.String $r3, $r6, $r9, $r12;

        $r0 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String)>("http://purl.org/dc/elements/1.1/");

        <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        $r3 = virtualinvoke $r2.<org.jdom.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" http://www.unidata.ucar.edu/schemas/other/dc/dc.xsd");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        <thredds.catalog.dl.DCWriter: java.lang.String schemaLocation> = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = <thredds.catalog.dl.DCWriter: org.jdom.Namespace defNS>;

        $r9 = virtualinvoke $r8.<org.jdom.Namespace: java.lang.String getURI()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file://P:/schemas/other/dc/dc.xsd");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        <thredds.catalog.dl.DCWriter: java.lang.String schemaLocationLocal> = $r12;

        <thredds.catalog.dl.DCWriter: java.lang.String threddsServerURL> = "http://localhost:8080/thredds/subset.html";

        return;
    }
}
