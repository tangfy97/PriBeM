public class org.apache.batik.bridge.SVGFeImageElementBridge extends org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGFeImageElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGFeImageElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGFeImageElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGFeImageElementBridge;

        return "feImage";
    }

    public org.apache.batik.ext.awt.image.renderable.Filter createFilter(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, java.util.Map)
    {
        java.awt.geom.Rectangle2D r4, $r9, $r20;
        org.w3c.dom.Document $r2;
        java.util.Map r23;
        org.apache.batik.ext.awt.image.renderable.AffineRable8Bit $r33;
        boolean $z0;
        org.apache.batik.bridge.SVGFeImageElementBridge r27;
        org.apache.batik.gvt.GraphicsNode r7, $r15;
        org.apache.batik.bridge.GVTBuilder $r14;
        org.apache.batik.bridge.BridgeException $r31;
        org.apache.batik.bridge.BridgeContext r8;
        java.awt.geom.AffineTransform r30, $r32;
        org.apache.batik.ext.awt.image.renderable.Filter $r16, r28;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit $r34;
        java.lang.Object[] $r26;
        org.apache.batik.ext.awt.image.PadMode $r22;
        short s3;
        org.w3c.dom.Node $r5;
        int $i0, $i1, $i2, $i5;
        java.lang.String $r1, $r10, $r11, $r12, $r13, $r17;
        double $d0, $d1, $d2, $d3;
        org.w3c.dom.Element r0, $r3, r6, $r24, r29;

        r27 := @this: org.apache.batik.bridge.SVGFeImageElementBridge;

        r8 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r6 := @parameter2: org.w3c.dom.Element;

        r7 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        r28 := @parameter4: org.apache.batik.ext.awt.image.renderable.Filter;

        r4 := @parameter5: java.awt.geom.Rectangle2D;

        r23 := @parameter6: java.util.Map;

        $r1 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>(r0);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r31 = new org.apache.batik.bridge.BridgeException;

        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = "xlink:href";

        specialinvoke $r31.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r8, r0, "attribute.missing", $r26);

        throw $r31;

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(35);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        r29 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "use");

        goto label5;

     label4:
        r29 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "image");

     label5:
        interfaceinvoke r29.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/1999/xlink", "xlink:href", $r1);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "g");

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r29);

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r24 = (org.w3c.dom.Element) $r5;

        $r9 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D getBaseFilterPrimitiveRegion(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,org.apache.batik.bridge.BridgeContext)>(r0, r6, r7, r4, r8);

        $d0 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getX()>();

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        interfaceinvoke r29.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "x", $r10);

        $d1 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getY()>();

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d1);

        interfaceinvoke r29.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "y", $r11);

        $d2 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getWidth()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d2);

        interfaceinvoke r29.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "width", $r12);

        $d3 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getHeight()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d3);

        interfaceinvoke r29.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "height", $r13);

        $r14 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        $r15 = virtualinvoke $r14.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r8, $r3);

        $r16 = interfaceinvoke $r15.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r17 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>($r24, null, "primitiveUnits", r8);

        $i2 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i2 != 0 goto label6;

        s3 = 1;

        goto label7;

     label6:
        s3 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>($r24, "primitiveUnits", $r17, r8);

     label7:
        $r32 = new java.awt.geom.AffineTransform;

        specialinvoke $r32.<java.awt.geom.AffineTransform: void <init>()>();

        r30 = $r32;

        if s3 != 2 goto label8;

        r30 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform toObjectBBox(java.awt.geom.AffineTransform,org.apache.batik.gvt.GraphicsNode)>($r32, r7);

     label8:
        $r33 = new org.apache.batik.ext.awt.image.renderable.AffineRable8Bit;

        specialinvoke $r33.<org.apache.batik.ext.awt.image.renderable.AffineRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.AffineTransform)>($r16, r30);

        staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void handleColorInterpolationFilters(org.apache.batik.ext.awt.image.renderable.Filter,org.w3c.dom.Element)>($r33, r0);

        $r20 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertFilterPrimitiveRegion(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.apache.batik.bridge.BridgeContext)>(r0, r6, r7, r4, r4, r8);

        $r34 = new org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r22 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r34.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.Rectangle2D,org.apache.batik.ext.awt.image.PadMode)>($r33, $r20, $r22);

        staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void updateFilterMap(org.w3c.dom.Element,org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r0, $r34, r23);

        return $r34;
    }

    protected static org.apache.batik.ext.awt.image.renderable.Filter createSVGFeImage(org.apache.batik.bridge.BridgeContext, java.awt.geom.Rectangle2D, org.w3c.dom.Element, boolean, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        java.awt.geom.Rectangle2D r6, $r13;
        short s1;
        org.w3c.dom.Node $r9;
        int $i0;
        java.lang.String $r11;
        org.apache.batik.ext.awt.image.renderable.AffineRable8Bit $r7;
        boolean z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.batik.gvt.GraphicsNode $r3, r12;
        org.apache.batik.bridge.GVTBuilder $r1;
        org.apache.batik.bridge.BridgeContext r0;
        java.awt.geom.AffineTransform $r5, $r14, r15;
        org.apache.batik.ext.awt.image.renderable.Filter $r4;
        org.w3c.dom.Element r2, r8, r10;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r6 := @parameter1: java.awt.geom.Rectangle2D;

        r2 := @parameter2: org.w3c.dom.Element;

        z0 := @parameter3: boolean;

        r8 := @parameter4: org.w3c.dom.Element;

        r12 := @parameter5: org.apache.batik.gvt.GraphicsNode;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        $r3 = virtualinvoke $r1.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r2);

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r5 = new java.awt.geom.AffineTransform;

        specialinvoke $r5.<java.awt.geom.AffineTransform: void <init>()>();

        r15 = $r5;

        if z0 == 0 goto label4;

        $r9 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r10 = (org.w3c.dom.Element) $r9;

        $r11 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r10, null, "primitiveUnits", r0);

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        s1 = 1;

        goto label2;

     label1:
        s1 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r10, "primitiveUnits", $r11, r0);

     label2:
        if s1 != 2 goto label3;

        r15 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform toObjectBBox(java.awt.geom.AffineTransform,org.apache.batik.gvt.GraphicsNode)>($r5, r12);

     label3:
        $r13 = interfaceinvoke r12.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        $d2 = virtualinvoke r6.<java.awt.geom.RectangularShape: double getX()>();

        $d3 = virtualinvoke $r13.<java.awt.geom.RectangularShape: double getX()>();

        $d4 = $d2 - $d3;

        $d5 = virtualinvoke r6.<java.awt.geom.RectangularShape: double getY()>();

        $d6 = virtualinvoke $r13.<java.awt.geom.RectangularShape: double getY()>();

        $d7 = $d5 - $d6;

        $r14 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d4, $d7);

        virtualinvoke r15.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r14);

        goto label5;

     label4:
        $d0 = virtualinvoke r6.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke r6.<java.awt.geom.RectangularShape: double getY()>();

        virtualinvoke $r5.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);

     label5:
        $r7 = new org.apache.batik.ext.awt.image.renderable.AffineRable8Bit;

        specialinvoke $r7.<org.apache.batik.ext.awt.image.renderable.AffineRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.AffineTransform)>($r4, r15);

        return $r7;
    }

    protected static org.apache.batik.ext.awt.image.renderable.Filter createRasterFeImage(org.apache.batik.bridge.BridgeContext, java.awt.geom.Rectangle2D, org.apache.batik.util.ParsedURL)
    {
        java.awt.geom.Rectangle2D $r3, r5;
        org.apache.batik.ext.awt.image.renderable.AffineRable8Bit $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        org.apache.batik.bridge.BridgeContext r7;
        java.awt.geom.AffineTransform $r4;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry $r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r2;
        org.apache.batik.util.ParsedURL r1;

        r7 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r5 := @parameter1: java.awt.geom.Rectangle2D;

        r1 := @parameter2: org.apache.batik.util.ParsedURL;

        $r0 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry getRegistry()>();

        $r2 = virtualinvoke $r0.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter readURL(org.apache.batik.util.ParsedURL)>(r1);

        $r3 = interfaceinvoke $r2.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        $d0 = virtualinvoke r5.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke r5.<java.awt.geom.RectangularShape: double getY()>();

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);

        $d2 = virtualinvoke r5.<java.awt.geom.RectangularShape: double getWidth()>();

        $d3 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $d4 = $d3 - 1.0;

        $d5 = $d2 / $d4;

        $d6 = virtualinvoke r5.<java.awt.geom.RectangularShape: double getHeight()>();

        $d7 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getHeight()>();

        $d8 = $d7 - 1.0;

        $d9 = $d6 / $d8;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void scale(double,double)>($d5, $d9);

        $d10 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getX()>();

        $d11 = neg $d10;

        $d12 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getY()>();

        $d13 = neg $d12;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d11, $d13);

        $r6 = new org.apache.batik.ext.awt.image.renderable.AffineRable8Bit;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.renderable.AffineRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.AffineTransform)>($r2, $r4);

        return $r6;
    }
}
