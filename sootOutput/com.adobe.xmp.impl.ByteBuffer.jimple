public class com.adobe.xmp.impl.ByteBuffer extends java.lang.Object
{
    private byte[] buffer;
    private int length;
    private java.lang.String encoding;

    public void <init>(int)
    {
        int i0;
        byte[] $r1;
        com.adobe.xmp.impl.ByteBuffer r0;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = null;

        $r1 = newarray (byte)[i0];

        r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer> = $r1;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = 0;

        return;
    }

    public void <init>(byte[])
    {
        int $i0;
        byte[] r1;
        com.adobe.xmp.impl.ByteBuffer r0;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = null;

        r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer> = r1;

        $i0 = lengthof r1;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = $i0;

        return;
    }

    public void <init>(byte[], int)
    {
        byte[] r1;
        com.adobe.xmp.impl.ByteBuffer r0;
        int i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = null;

        $i1 = lengthof r1;

        if i0 <= $i1 goto label1;

        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("Valid length exceeds the buffer length.");

        throw $r2;

     label1:
        r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer> = r1;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = i0;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1, $r3;
        com.adobe.xmp.impl.ByteBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.io.InputStream r2;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r2 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = null;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = 0;

        $r1 = newarray (byte)[16384];

        r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer> = $r1;

     label1:
        $r3 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i0 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i1 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>($r3, $i0, 16384);

        if $i1 <= 0 goto label2;

        $i2 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i3 = $i2 + $i1;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = $i3;

        if $i1 != 16384 goto label2;

        $i4 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i5 = $i4 + 16384;

        specialinvoke r0.<com.adobe.xmp.impl.ByteBuffer: void ensureCapacity(int)>($i5);

        goto label1;

     label2:
        return;
    }

    public void <init>(byte[], int, int)
    {
        byte[] r1, $r2, $r3;
        com.adobe.xmp.impl.ByteBuffer r0;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        int i0, i1, $i2, $i3;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = null;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("Valid length exceeds the buffer length.");

        throw $r4;

     label1:
        $r2 = newarray (byte)[i0];

        r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer> = $r2;

        $r3 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r3, 0, i0);

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = i0;

        return;
    }

    public java.io.InputStream getByteStream()
    {
        byte[] $r2;
        java.io.ByteArrayInputStream $r0;
        com.adobe.xmp.impl.ByteBuffer r1;
        int $i0;

        r1 := @this: com.adobe.xmp.impl.ByteBuffer;

        $r0 = new java.io.ByteArrayInputStream;

        $r2 = r1.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i0 = r1.<com.adobe.xmp.impl.ByteBuffer: int length>;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r2, 0, $i0);

        return $r0;
    }

    public int length()
    {
        int $i0;
        com.adobe.xmp.impl.ByteBuffer r0;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        $i0 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        return $i0;
    }

    public byte byteAt(int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        byte[] $r2;
        com.adobe.xmp.impl.ByteBuffer r0;
        byte $b2;
        int i0, $i1;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b2 = $r2[i0];

        return $b2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("The index exceeds the valid buffer area");

        throw $r1;
    }

    public int charAt(int)
    {
        byte[] $r2;
        java.lang.IndexOutOfBoundsException $r3;
        com.adobe.xmp.impl.ByteBuffer r0;
        short $s3, $s4;
        byte $b2;
        int i0, $i1, $i5;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b2 = $r2[i0];

        $s4 = (short) $b2;

        $s3 = $s4 & 255;

        $i5 = (int) $s3;

        return $i5;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("The index exceeds the valid buffer area");

        throw $r3;
    }

    public void append(byte)
    {
        byte[] $r1;
        com.adobe.xmp.impl.ByteBuffer r0;
        byte b4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        b4 := @parameter0: byte;

        $i0 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i1 = $i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.ByteBuffer: void ensureCapacity(int)>($i1);

        $r1 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i2 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i3 = $i2 + 1;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = $i3;

        $r1[$i2] = b4;

        return;
    }

    public void append(byte[], int, int)
    {
        byte[] r1, $r2;
        com.adobe.xmp.impl.ByteBuffer r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i2 = $i1 + i0;

        specialinvoke r0.<com.adobe.xmp.impl.ByteBuffer: void ensureCapacity(int)>($i2);

        $r2 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i4 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, $r2, $i4, i0);

        $i5 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        $i6 = $i5 + i0;

        r0.<com.adobe.xmp.impl.ByteBuffer: int length> = $i6;

        return;
    }

    public void append(byte[])
    {
        int $i0;
        byte[] r1;
        com.adobe.xmp.impl.ByteBuffer r0;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<com.adobe.xmp.impl.ByteBuffer: void append(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void append(com.adobe.xmp.impl.ByteBuffer)
    {
        byte[] $r2;
        com.adobe.xmp.impl.ByteBuffer r0, r1;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter0: com.adobe.xmp.impl.ByteBuffer;

        $r2 = r1.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i0 = r1.<com.adobe.xmp.impl.ByteBuffer: int length>;

        virtualinvoke r0.<com.adobe.xmp.impl.ByteBuffer: void append(byte[],int,int)>($r2, 0, $i0);

        return;
    }

    public java.lang.String getEncoding()
    {
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        byte $b1, $b2, $b4, $b6, $b9, $b10, $b12, $b14, $b15, $b17;
        com.adobe.xmp.impl.ByteBuffer r0;
        short $s3, $s5, $s7, $s16, $s18, $s19, $s21, $s23, $s25, $s27;
        int $i0, $i8, $i11, $i13, $i20, $i22, $i24, $i26, $i28;
        java.lang.String $r1, $r12;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        $r1 = r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding>;

        if $r1 != null goto label14;

        $i0 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        if $i0 >= 2 goto label01;

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-8";

        goto label14;

     label01:
        $r2 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b1 = $r2[0];

        if $b1 != 0 goto label05;

        $i13 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        if $i13 < 4 goto label02;

        $r9 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b14 = $r9[1];

        if $b14 == 0 goto label03;

     label02:
        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-16BE";

        goto label14;

     label03:
        $r10 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b15 = $r10[2];

        $s19 = (short) $b15;

        $s16 = $s19 & 255;

        $i20 = (int) $s16;

        if $i20 != 254 goto label04;

        $r11 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b17 = $r11[3];

        $s21 = (short) $b17;

        $s18 = $s21 & 255;

        $i22 = (int) $s18;

        if $i22 != 255 goto label04;

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-32BE";

        goto label14;

     label04:
        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-32";

        goto label14;

     label05:
        $r3 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b2 = $r3[0];

        $s23 = (short) $b2;

        $s3 = $s23 & 255;

        $i24 = (int) $s3;

        if $i24 >= 128 goto label09;

        $r7 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b10 = $r7[1];

        if $b10 == 0 goto label06;

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-8";

        goto label14;

     label06:
        $i11 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        if $i11 < 4 goto label07;

        $r8 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b12 = $r8[2];

        if $b12 == 0 goto label08;

     label07:
        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-16LE";

        goto label14;

     label08:
        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-32LE";

        goto label14;

     label09:
        $r4 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b4 = $r4[0];

        $s25 = (short) $b4;

        $s5 = $s25 & 255;

        $i26 = (int) $s5;

        if $i26 != 239 goto label10;

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-8";

        goto label14;

     label10:
        $r5 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b6 = $r5[0];

        $s27 = (short) $b6;

        $s7 = $s27 & 255;

        $i28 = (int) $s7;

        if $i28 != 254 goto label11;

        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-16";

        goto label14;

     label11:
        $i8 = r0.<com.adobe.xmp.impl.ByteBuffer: int length>;

        if $i8 < 4 goto label12;

        $r6 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $b9 = $r6[2];

        if $b9 == 0 goto label13;

     label12:
        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-16";

        goto label14;

     label13:
        r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding> = "UTF-32";

     label14:
        $r12 = r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String encoding>;

        return $r12;
    }

    private void ensureCapacity(int)
    {
        byte[] $r1, r2, $r3, $r4;
        com.adobe.xmp.impl.ByteBuffer r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.adobe.xmp.impl.ByteBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i1 = lengthof $r1;

        if i0 <= $i1 goto label1;

        r2 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i2 = lengthof r2;

        $i3 = $i2 * 2;

        $r3 = newarray (byte)[$i3];

        r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer> = $r3;

        $r4 = r0.<com.adobe.xmp.impl.ByteBuffer: byte[] buffer>;

        $i4 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i4);

     label1:
        return;
    }
}
