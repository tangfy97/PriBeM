public class org.jivesoftware.util.FastDateFormat extends java.lang.Object
{
    public static final java.lang.Object FULL;
    public static final java.lang.Object LONG;
    public static final java.lang.Object MEDIUM;
    public static final java.lang.Object SHORT;
    private static final double LOG_10;
    private static java.lang.String cDefaultPattern;
    private static java.util.TimeZone cDefaultTimeZone;
    private static java.util.Map cTimeZoneDisplayCache;
    private static java.util.Map cInstanceCache;
    private static java.util.Map cDateInstanceCache;
    private static java.util.Map cTimeInstanceCache;
    private static java.util.Map cDateTimeInstanceCache;
    private final java.lang.String mPattern;
    private final java.util.TimeZone mTimeZone;
    private final java.util.Locale mLocale;
    private final org.jivesoftware.util.FastDateFormat$Rule[] mRules;
    private final int mMaxLengthEstimate;

    public static org.jivesoftware.util.FastDateFormat getInstance()
    {
        java.lang.String $r0;
        org.jivesoftware.util.FastDateFormat $r1;

        $r0 = staticinvoke <org.jivesoftware.util.FastDateFormat: java.lang.String getDefaultPattern()>();

        $r1 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>($r0, null, null, null);

        return $r1;
    }

    public static org.jivesoftware.util.FastDateFormat getInstance(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        org.jivesoftware.util.FastDateFormat $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r0, null, null, null);

        return $r1;
    }

    public static org.jivesoftware.util.FastDateFormat getInstance(java.lang.String, java.util.TimeZone) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.util.TimeZone r1;
        org.jivesoftware.util.FastDateFormat $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.TimeZone;

        $r2 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r0, r1, null, null);

        return $r2;
    }

    public static org.jivesoftware.util.FastDateFormat getInstance(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.util.Locale r1;
        org.jivesoftware.util.FastDateFormat $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r0, null, r1, null);

        return $r2;
    }

    public static org.jivesoftware.util.FastDateFormat getInstance(java.lang.String, java.text.DateFormatSymbols) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.text.DateFormatSymbols r1;
        org.jivesoftware.util.FastDateFormat $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.text.DateFormatSymbols;

        $r2 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r0, null, null, r1);

        return $r2;
    }

    public static org.jivesoftware.util.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        java.util.TimeZone r1;
        java.util.Locale r2;
        org.jivesoftware.util.FastDateFormat $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.TimeZone;

        r2 := @parameter2: java.util.Locale;

        $r3 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r0, r1, r2, null);

        return $r3;
    }

    public static synchronized org.jivesoftware.util.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale, java.text.DateFormatSymbols) throws java.lang.IllegalArgumentException
    {
        java.util.TimeZone r1;
        org.jivesoftware.util.FastDateFormat $r4, $r8, r14;
        org.jivesoftware.util.FastDateFormat$Pair $r7, $r9, $r10;
        java.io.Serializable r13;
        java.text.DateFormatSymbols $r6, r12;
        java.util.Locale r11;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.TimeZone;

        r11 := @parameter2: java.util.Locale;

        r12 := @parameter3: java.text.DateFormatSymbols;

        r13 = r0;

        if r1 == null goto label1;

        $r10 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r10.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        r13 = $r10;

     label1:
        if r11 == null goto label2;

        $r9 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r9.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r13, r11);

        r13 = $r9;

     label2:
        if r12 == null goto label3;

        $r7 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r7.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r13, r12);

        r13 = $r7;

     label3:
        $r2 = <org.jivesoftware.util.FastDateFormat: java.util.Map cInstanceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r8 = (org.jivesoftware.util.FastDateFormat) $r3;

        r14 = $r8;

        if $r8 != null goto label6;

        if r11 != null goto label4;

        r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label4:
        if r12 != null goto label5;

        $r6 = new java.text.DateFormatSymbols;

        specialinvoke $r6.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r11);

        r12 = $r6;

     label5:
        $r4 = new org.jivesoftware.util.FastDateFormat;

        specialinvoke $r4.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r0, r1, r11, r12);

        r14 = $r4;

        $r5 = <org.jivesoftware.util.FastDateFormat: java.util.Map cInstanceCache>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r4);

     label6:
        return r14;
    }

    public static synchronized org.jivesoftware.util.FastDateFormat getDateInstance(java.lang.Object, java.util.TimeZone, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.jivesoftware.util.FastDateFormat $r8, $r11, r27;
        java.text.SimpleDateFormat $r6;
        java.lang.Integer $r4;
        java.lang.ClassCastException $r13, $r19;
        java.util.Locale r25;
        java.util.Map $r2, $r9;
        int $i0;
        java.lang.String $r7, $r18, $r24;
        java.text.DateFormat $r5;
        java.util.TimeZone r1;
        org.jivesoftware.util.FastDateFormat$Pair $r10, $r12;
        java.lang.IllegalArgumentException $r14, $r20;
        java.lang.Object r0, $r3, r26;
        java.lang.StringBuilder $r15, $r16, $r17, $r21, $r22, $r23;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.TimeZone;

        r25 := @parameter2: java.util.Locale;

        r26 = r0;

        if r1 == null goto label01;

        $r12 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r12.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        r26 = $r12;

     label01:
        if r25 != null goto label02;

        $r10 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r10.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r26, r25);

        r26 = $r10;

     label02:
        $r2 = <org.jivesoftware.util.FastDateFormat: java.util.Map cDateInstanceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        $r11 = (org.jivesoftware.util.FastDateFormat) $r3;

        r27 = $r11;

        if $r11 != null goto label10;

     label03:
        $r4 = (java.lang.Integer) r0;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label04:
        goto label06;

     label05:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal date style: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label06:
        if r25 != null goto label07;

        r25 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label07:
        $r5 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>($i0, r25);

        $r6 = (java.text.SimpleDateFormat) $r5;

        $r7 = virtualinvoke $r6.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r8 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r7, r1, r25);

        r27 = $r8;

        $r9 = <org.jivesoftware.util.FastDateFormat: java.util.Map cDateInstanceCache>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r8);

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No date pattern for locale: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label10:
        return r27;

        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label07 to label08 with label09;
    }

    public static synchronized org.jivesoftware.util.FastDateFormat getTimeInstance(java.lang.Object, java.util.TimeZone, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.jivesoftware.util.FastDateFormat $r8, $r11, r27;
        java.text.SimpleDateFormat $r6;
        java.lang.Integer $r4;
        java.lang.ClassCastException $r13, $r19;
        java.util.Locale r25;
        java.util.Map $r2, $r9;
        int $i0;
        java.lang.String $r7, $r18, $r24;
        java.text.DateFormat $r5;
        java.util.TimeZone r1;
        org.jivesoftware.util.FastDateFormat$Pair $r10, $r12;
        java.lang.IllegalArgumentException $r14, $r20;
        java.lang.Object r0, $r3, r26;
        java.lang.StringBuilder $r15, $r16, $r17, $r21, $r22, $r23;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.TimeZone;

        r25 := @parameter2: java.util.Locale;

        r26 = r0;

        if r1 == null goto label01;

        $r12 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r12.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        r26 = $r12;

     label01:
        if r25 == null goto label02;

        $r10 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r10.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r26, r25);

        r26 = $r10;

     label02:
        $r2 = <org.jivesoftware.util.FastDateFormat: java.util.Map cTimeInstanceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        $r11 = (org.jivesoftware.util.FastDateFormat) $r3;

        r27 = $r11;

        if $r11 != null goto label10;

     label03:
        $r4 = (java.lang.Integer) r0;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label04:
        goto label06;

     label05:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal time style: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label06:
        if r25 != null goto label07;

        r25 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label07:
        $r5 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>($i0, r25);

        $r6 = (java.text.SimpleDateFormat) $r5;

        $r7 = virtualinvoke $r6.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r8 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r7, r1, r25);

        r27 = $r8;

        $r9 = <org.jivesoftware.util.FastDateFormat: java.util.Map cTimeInstanceCache>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r8);

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No date pattern for locale: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label10:
        return r27;

        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label07 to label08 with label09;
    }

    public static synchronized org.jivesoftware.util.FastDateFormat getDateTimeInstance(java.lang.Object, java.lang.Object, java.util.TimeZone, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.jivesoftware.util.FastDateFormat $r11, $r14, r36;
        java.lang.Integer $r6, $r7;
        java.util.Locale r34;
        java.util.Map $r4, $r12;
        java.text.DateFormat $r8;
        java.util.TimeZone r3;
        org.jivesoftware.util.FastDateFormat$Pair $r0, $r13, $r15, r35;
        java.lang.StringBuilder $r18, $r19, $r20, $r24, $r25, $r26, $r30, $r31, $r32;
        java.text.SimpleDateFormat $r9;
        java.lang.ClassCastException $r16, $r22, $r28;
        int $i0, $i1;
        java.lang.String $r10, $r21, $r27, $r33;
        java.lang.IllegalArgumentException $r17, $r23, $r29;
        java.lang.Object r1, r2, $r5;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.TimeZone;

        r34 := @parameter3: java.util.Locale;

        $r0 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r0.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        r35 = $r0;

        if r3 == null goto label01;

        $r15 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r15.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, r3);

        r35 = $r15;

     label01:
        if r34 == null goto label02;

        $r13 = new org.jivesoftware.util.FastDateFormat$Pair;

        specialinvoke $r13.<org.jivesoftware.util.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r35, r34);

        r35 = $r13;

     label02:
        $r4 = <org.jivesoftware.util.FastDateFormat: java.util.Map cDateTimeInstanceCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r35);

        $r14 = (org.jivesoftware.util.FastDateFormat) $r5;

        r36 = $r14;

        if $r14 != null goto label13;

     label03:
        $r6 = (java.lang.Integer) r1;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label04:
        goto label06;

     label05:
        $r28 := @caughtexception;

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal date style: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label06:
        $r7 = (java.lang.Integer) r2;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal time style: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label09:
        if r34 != null goto label10;

        r34 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label10:
        $r8 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>($i0, $i1, r34);

        $r9 = (java.text.SimpleDateFormat) $r8;

        $r10 = virtualinvoke $r9.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r11 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r10, r3, r34);

        r36 = $r11;

        $r12 = <org.jivesoftware.util.FastDateFormat: java.util.Map cDateTimeInstanceCache>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r35, $r11);

     label11:
        goto label13;

     label12:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No date time pattern for locale: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label13:
        return r36;

        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label06 to label07 with label08;
        catch java.lang.ClassCastException from label10 to label11 with label12;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale)
    {
        java.util.TimeZone r1;
        java.util.Locale r2;
        java.util.Map $r3, $r6;
        int i0;
        java.lang.Object $r4;
        java.lang.String $r5, r7;
        org.jivesoftware.util.FastDateFormat$TimeZoneDisplayKey $r0;
        boolean z0;

        r1 := @parameter0: java.util.TimeZone;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: java.util.Locale;

        $r0 = new org.jivesoftware.util.FastDateFormat$TimeZoneDisplayKey;

        specialinvoke $r0.<org.jivesoftware.util.FastDateFormat$TimeZoneDisplayKey: void <init>(java.util.TimeZone,boolean,int,java.util.Locale)>(r1, z0, i0, r2);

        $r3 = <org.jivesoftware.util.FastDateFormat: java.util.Map cTimeZoneDisplayCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (java.lang.String) $r4;

        if r7 != null goto label1;

        $r5 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z0, i0, r2);

        r7 = $r5;

        $r6 = <org.jivesoftware.util.FastDateFormat: java.util.Map cTimeZoneDisplayCache>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r5);

     label1:
        return r7;
    }

    private static synchronized java.lang.String getDefaultPattern()
    {
        java.text.SimpleDateFormat $r2;
        java.lang.String $r0, $r1, $r3;

        $r0 = <org.jivesoftware.util.FastDateFormat: java.lang.String cDefaultPattern>;

        if $r0 != null goto label1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>()>();

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        <org.jivesoftware.util.FastDateFormat: java.lang.String cDefaultPattern> = $r3;

     label1:
        $r1 = <org.jivesoftware.util.FastDateFormat: java.lang.String cDefaultPattern>;

        return $r1;
    }

    private static java.util.List parse(java.lang.String, java.util.TimeZone, java.util.Locale, java.text.DateFormatSymbols)
    {
        org.jivesoftware.util.FastDateFormat$TwelveHourField $r47;
        int[] r9;
        java.util.Locale r13;
        org.jivesoftware.util.FastDateFormat$TimeZoneRule $r51, $r52;
        java.util.TimeZone r12;
        org.jivesoftware.util.FastDateFormat$StringLiteral $r55;
        java.lang.StringBuilder $r34, $r35, $r56;
        org.jivesoftware.util.FastDateFormat$NumberRule $r18, $r20;
        org.jivesoftware.util.FastDateFormat$TwoDigitMonthField $r45;
        org.jivesoftware.util.FastDateFormat$Rule r37;
        java.lang.String[] $r2, $r3, $r4, $r5, $r6, $r7, $r38;
        java.util.ArrayList $r39;
        int $i0, $i1, $i3, i5, i6, $i7;
        java.lang.String r8, $r10, $r28, $r36, $r54;
        org.jivesoftware.util.FastDateFormat$TextField $r40, $r43, $r44, $r48, $r49;
        org.jivesoftware.util.FastDateFormat$CharacterLiteral $r53;
        char $c2, $c4;
        org.jivesoftware.util.FastDateFormat$TwoDigitYearField $r42;
        org.jivesoftware.util.FastDateFormat$UnpaddedNumberField $r41;
        java.lang.IllegalArgumentException $r57;
        org.jivesoftware.util.FastDateFormat$TwentyFourHourField $r50;
        java.text.DateFormatSymbols r1;
        org.jivesoftware.util.FastDateFormat$UnpaddedMonthField $r46;

        r8 := @parameter0: java.lang.String;

        r12 := @parameter1: java.util.TimeZone;

        r13 := @parameter2: java.util.Locale;

        r1 := @parameter3: java.text.DateFormatSymbols;

        $r39 = new java.util.ArrayList;

        specialinvoke $r39.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();

        $r3 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        $r4 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

        $r5 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        $r6 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();

        $r7 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        r9 = newarray (int)[1];

        i5 = 0;

     label01:
        if i5 >= $i0 goto label32;

        r9[0] = i5;

        $r10 = staticinvoke <org.jivesoftware.util.FastDateFormat: java.lang.String parseToken(java.lang.String,int[])>(r8, r9);

        i6 = r9[0];

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 != 0 goto label02;

        goto label32;

     label02:
        $c2 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c2;

        tableswitch($i7)
        {
            case 39: goto label28;
            case 40: goto label30;
            case 41: goto label30;
            case 42: goto label30;
            case 43: goto label30;
            case 44: goto label30;
            case 45: goto label30;
            case 46: goto label30;
            case 47: goto label30;
            case 48: goto label30;
            case 49: goto label30;
            case 50: goto label30;
            case 51: goto label30;
            case 52: goto label30;
            case 53: goto label30;
            case 54: goto label30;
            case 55: goto label30;
            case 56: goto label30;
            case 57: goto label30;
            case 58: goto label30;
            case 59: goto label30;
            case 60: goto label30;
            case 61: goto label30;
            case 62: goto label30;
            case 63: goto label30;
            case 64: goto label30;
            case 65: goto label30;
            case 66: goto label30;
            case 67: goto label30;
            case 68: goto label19;
            case 69: goto label16;
            case 70: goto label20;
            case 71: goto label03;
            case 72: goto label12;
            case 73: goto label30;
            case 74: goto label30;
            case 75: goto label25;
            case 76: goto label30;
            case 77: goto label06;
            case 78: goto label30;
            case 79: goto label30;
            case 80: goto label30;
            case 81: goto label30;
            case 82: goto label30;
            case 83: goto label15;
            case 84: goto label30;
            case 85: goto label30;
            case 86: goto label30;
            case 87: goto label22;
            case 88: goto label30;
            case 89: goto label30;
            case 90: goto label30;
            case 91: goto label30;
            case 92: goto label30;
            case 93: goto label30;
            case 94: goto label30;
            case 95: goto label30;
            case 96: goto label30;
            case 97: goto label23;
            case 98: goto label30;
            case 99: goto label30;
            case 100: goto label10;
            case 101: goto label30;
            case 102: goto label30;
            case 103: goto label30;
            case 104: goto label11;
            case 105: goto label30;
            case 106: goto label30;
            case 107: goto label24;
            case 108: goto label30;
            case 109: goto label13;
            case 110: goto label30;
            case 111: goto label30;
            case 112: goto label30;
            case 113: goto label30;
            case 114: goto label30;
            case 115: goto label14;
            case 116: goto label30;
            case 117: goto label30;
            case 118: goto label30;
            case 119: goto label21;
            case 120: goto label30;
            case 121: goto label04;
            case 122: goto label26;
            default: goto label30;
        };

     label03:
        $r40 = new org.jivesoftware.util.FastDateFormat$TextField;

        specialinvoke $r40.<org.jivesoftware.util.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(0, $r2);

        r37 = $r40;

        goto label31;

     label04:
        if $i1 < 4 goto label05;

        $r41 = new org.jivesoftware.util.FastDateFormat$UnpaddedNumberField;

        specialinvoke $r41.<org.jivesoftware.util.FastDateFormat$UnpaddedNumberField: void <init>(int)>(1);

        r37 = $r41;

        goto label31;

     label05:
        $r42 = new org.jivesoftware.util.FastDateFormat$TwoDigitYearField;

        specialinvoke $r42.<org.jivesoftware.util.FastDateFormat$TwoDigitYearField: void <init>()>();

        r37 = $r42;

        goto label31;

     label06:
        if $i1 < 4 goto label07;

        $r43 = new org.jivesoftware.util.FastDateFormat$TextField;

        specialinvoke $r43.<org.jivesoftware.util.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(2, $r3);

        r37 = $r43;

        goto label31;

     label07:
        if $i1 != 3 goto label08;

        $r44 = new org.jivesoftware.util.FastDateFormat$TextField;

        specialinvoke $r44.<org.jivesoftware.util.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(2, $r4);

        r37 = $r44;

        goto label31;

     label08:
        if $i1 != 2 goto label09;

        $r45 = new org.jivesoftware.util.FastDateFormat$TwoDigitMonthField;

        specialinvoke $r45.<org.jivesoftware.util.FastDateFormat$TwoDigitMonthField: void <init>()>();

        r37 = $r45;

        goto label31;

     label09:
        $r46 = new org.jivesoftware.util.FastDateFormat$UnpaddedMonthField;

        specialinvoke $r46.<org.jivesoftware.util.FastDateFormat$UnpaddedMonthField: void <init>()>();

        r37 = $r46;

        goto label31;

     label10:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(5, $i1);

        goto label31;

     label11:
        $r47 = new org.jivesoftware.util.FastDateFormat$TwelveHourField;

        $r20 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(10, $i1);

        specialinvoke $r47.<org.jivesoftware.util.FastDateFormat$TwelveHourField: void <init>(org.jivesoftware.util.FastDateFormat$NumberRule)>($r20);

        r37 = $r47;

        goto label31;

     label12:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(11, $i1);

        goto label31;

     label13:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(12, $i1);

        goto label31;

     label14:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(13, $i1);

        goto label31;

     label15:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(14, $i1);

        goto label31;

     label16:
        $r48 = new org.jivesoftware.util.FastDateFormat$TextField;

        if $i1 >= 4 goto label17;

        $r38 = $r6;

        goto label18;

     label17:
        $r38 = $r5;

     label18:
        specialinvoke $r48.<org.jivesoftware.util.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(7, $r38);

        r37 = $r48;

        goto label31;

     label19:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(6, $i1);

        goto label31;

     label20:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(8, $i1);

        goto label31;

     label21:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(3, $i1);

        goto label31;

     label22:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(4, $i1);

        goto label31;

     label23:
        $r49 = new org.jivesoftware.util.FastDateFormat$TextField;

        specialinvoke $r49.<org.jivesoftware.util.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(9, $r7);

        r37 = $r49;

        goto label31;

     label24:
        $r50 = new org.jivesoftware.util.FastDateFormat$TwentyFourHourField;

        $r18 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(11, $i1);

        specialinvoke $r50.<org.jivesoftware.util.FastDateFormat$TwentyFourHourField: void <init>(org.jivesoftware.util.FastDateFormat$NumberRule)>($r18);

        r37 = $r50;

        goto label31;

     label25:
        r37 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int,int)>(10, $i1);

        goto label31;

     label26:
        if $i1 < 4 goto label27;

        $r51 = new org.jivesoftware.util.FastDateFormat$TimeZoneRule;

        specialinvoke $r51.<org.jivesoftware.util.FastDateFormat$TimeZoneRule: void <init>(java.util.TimeZone,java.util.Locale,int)>(r12, r13, 1);

        r37 = $r51;

        goto label31;

     label27:
        $r52 = new org.jivesoftware.util.FastDateFormat$TimeZoneRule;

        specialinvoke $r52.<org.jivesoftware.util.FastDateFormat$TimeZoneRule: void <init>(java.util.TimeZone,java.util.Locale,int)>(r12, r13, 0);

        r37 = $r52;

        goto label31;

     label28:
        $r28 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>(1);

        $i3 = virtualinvoke $r28.<java.lang.String: int length()>();

        if $i3 != 1 goto label29;

        $r53 = new org.jivesoftware.util.FastDateFormat$CharacterLiteral;

        $c4 = virtualinvoke $r28.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r53.<org.jivesoftware.util.FastDateFormat$CharacterLiteral: void <init>(char)>($c4);

        r37 = $r53;

        goto label31;

     label29:
        $r55 = new org.jivesoftware.util.FastDateFormat$StringLiteral;

        $r54 = new java.lang.String;

        specialinvoke $r54.<java.lang.String: void <init>(java.lang.String)>($r28);

        specialinvoke $r55.<org.jivesoftware.util.FastDateFormat$StringLiteral: void <init>(java.lang.String)>($r54);

        r37 = $r55;

        goto label31;

     label30:
        $r57 = new java.lang.IllegalArgumentException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal pattern component: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r57;

     label31:
        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>(r37);

        i5 = i6 + 1;

        goto label01;

     label32:
        return $r39;
    }

    private static java.lang.String parseToken(java.lang.String, int[])
    {
        int[] r1;
        java.lang.StringBuffer $r4;
        int $i0, $i3, $i4, $i6, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23;
        java.lang.String r2, $r3;
        boolean z0, $z1;
        char $c1, $c2, $c5, $c7;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i8 = r1[0];

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);

        $i10 = (int) $c1;

        if $i10 < 65 goto label01;

        $i11 = (int) $c1;

        if $i11 <= 90 goto label02;

     label01:
        $i12 = (int) $c1;

        if $i12 < 97 goto label04;

        $i13 = (int) $c1;

        if $i13 > 122 goto label04;

     label02:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label03:
        $i9 = i8 + 1;

        if $i9 >= $i0 goto label14;

        $i6 = i8 + 1;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i6);

        $i14 = (int) $c7;

        $i15 = (int) $c1;

        if $i14 != $i15 goto label14;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i8 = i8 + 1;

        goto label03;

     label04:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        z0 = 0;

     label05:
        if i8 >= $i0 goto label14;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);

        $i16 = (int) $c2;

        if $i16 != 39 goto label09;

        $i3 = i8 + 1;

        if $i3 >= $i0 goto label06;

        $i4 = i8 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        $i17 = (int) $c5;

        if $i17 != 39 goto label06;

        i8 = i8 + 1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label13;

     label06:
        if z0 != 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z0 = $z1;

        goto label13;

     label09:
        if z0 != 0 goto label12;

        $i18 = (int) $c2;

        if $i18 < 65 goto label10;

        $i19 = (int) $c2;

        if $i19 <= 90 goto label11;

     label10:
        $i20 = (int) $c2;

        if $i20 < 97 goto label12;

        $i21 = (int) $c2;

        if $i21 > 122 goto label12;

     label11:
        $i23 = (int) -1;

        i8 = i8 + $i23;

        goto label14;

     label12:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label13:
        i8 = i8 + 1;

        goto label05;

     label14:
        r1[0] = i8;

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private static org.jivesoftware.util.FastDateFormat$NumberRule selectNumberRule(int, int)
    {
        org.jivesoftware.util.FastDateFormat$TwoDigitNumberField $r0;
        org.jivesoftware.util.FastDateFormat$PaddedNumberField $r2;
        int i0, i1;
        org.jivesoftware.util.FastDateFormat$UnpaddedNumberField $r1;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r1 = new org.jivesoftware.util.FastDateFormat$UnpaddedNumberField;

        specialinvoke $r1.<org.jivesoftware.util.FastDateFormat$UnpaddedNumberField: void <init>(int)>(i1);

        return $r1;

     label2:
        $r0 = new org.jivesoftware.util.FastDateFormat$TwoDigitNumberField;

        specialinvoke $r0.<org.jivesoftware.util.FastDateFormat$TwoDigitNumberField: void <init>(int)>(i1);

        return $r0;

     label3:
        $r2 = new org.jivesoftware.util.FastDateFormat$PaddedNumberField;

        specialinvoke $r2.<org.jivesoftware.util.FastDateFormat$PaddedNumberField: void <init>(int,int)>(i1, i0);

        return $r2;
    }

    private void <init>()
    {
        java.lang.String $r1;
        org.jivesoftware.util.FastDateFormat r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        $r1 = staticinvoke <org.jivesoftware.util.FastDateFormat: java.lang.String getDefaultPattern()>();

        specialinvoke r0.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>($r1, null, null, null);

        return;
    }

    private void <init>(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        org.jivesoftware.util.FastDateFormat r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r1, null, null, null);

        return;
    }

    private void <init>(java.lang.String, java.util.TimeZone) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        org.jivesoftware.util.FastDateFormat r0;
        java.util.TimeZone r2;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.TimeZone;

        specialinvoke r0.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r1, r2, null, null);

        return;
    }

    private void <init>(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        org.jivesoftware.util.FastDateFormat r0;
        java.util.Locale r2;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r1, null, r2, null);

        return;
    }

    private void <init>(java.lang.String, java.text.DateFormatSymbols) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        java.text.DateFormatSymbols r2;
        org.jivesoftware.util.FastDateFormat r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.DateFormatSymbols;

        specialinvoke r0.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r1, null, null, r2);

        return;
    }

    private void <init>(java.lang.String, java.util.TimeZone, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.jivesoftware.util.FastDateFormat r0;
        java.util.TimeZone r2;
        java.util.Locale r3;
        java.lang.String r1;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.TimeZone;

        r3 := @parameter2: java.util.Locale;

        specialinvoke r0.<org.jivesoftware.util.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r1, r2, r3, null);

        return;
    }

    private void <init>(java.lang.String, java.util.TimeZone, java.util.Locale, java.text.DateFormatSymbols) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r5;
        org.jivesoftware.util.FastDateFormat r0;
        org.jivesoftware.util.FastDateFormat$Rule $r10;
        java.util.Locale r12;
        int $i0, $i1, i2, i3, $i5;
        java.lang.String r1;
        java.util.TimeZone r2;
        java.util.List $r3;
        java.text.DateFormatSymbols r13, $r14;
        org.jivesoftware.util.FastDateFormat$Rule[] $r4, $r6, $r7, $r8, $r9;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.TimeZone;

        r12 := @parameter2: java.util.Locale;

        r13 := @parameter3: java.text.DateFormatSymbols;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r12 != null goto label1;

        r12 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        r0.<org.jivesoftware.util.FastDateFormat: java.lang.String mPattern> = r1;

        r0.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone> = r2;

        r0.<org.jivesoftware.util.FastDateFormat: java.util.Locale mLocale> = r12;

        if r13 != null goto label2;

        $r14 = new java.text.DateFormatSymbols;

        specialinvoke $r14.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r12);

        r13 = $r14;

     label2:
        $r3 = staticinvoke <org.jivesoftware.util.FastDateFormat: java.util.List parse(java.lang.String,java.util.TimeZone,java.util.Locale,java.text.DateFormatSymbols)>(r1, r2, r12, r13);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (org.jivesoftware.util.FastDateFormat$Rule)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.jivesoftware.util.FastDateFormat$Rule[]) $r5;

        $r7 = (org.jivesoftware.util.FastDateFormat$Rule[]) $r6;

        r0.<org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$Rule[] mRules> = $r7;

        i2 = 0;

        $r8 = r0.<org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$Rule[] mRules>;

        i3 = lengthof $r8;

     label3:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        if i3 < 0 goto label4;

        $r9 = r0.<org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$Rule[] mRules>;

        $r10 = $r9[i3];

        $i1 = interfaceinvoke $r10.<org.jivesoftware.util.FastDateFormat$Rule: int estimateLength()>();

        i2 = i2 + $i1;

        goto label3;

     label4:
        r0.<org.jivesoftware.util.FastDateFormat: int mMaxLengthEstimate> = i2;

        return;
    }

    public java.lang.String format(java.util.Date)
    {
        java.util.GregorianCalendar $r0;
        java.util.TimeZone $r1, $r4, $r8;
        java.util.Date r2;
        org.jivesoftware.util.FastDateFormat r3;
        java.lang.StringBuffer $r5, $r6;
        int $i0;
        java.lang.String $r7;

        r3 := @this: org.jivesoftware.util.FastDateFormat;

        r2 := @parameter0: java.util.Date;

        $r0 = new java.util.GregorianCalendar;

        $r1 = <org.jivesoftware.util.FastDateFormat: java.util.TimeZone cDefaultTimeZone>;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r1);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r2);

        $r4 = r3.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        if $r4 == null goto label1;

        $r8 = r3.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        virtualinvoke $r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r8);

     label1:
        $r5 = new java.lang.StringBuffer;

        $i0 = r3.<org.jivesoftware.util.FastDateFormat: int mMaxLengthEstimate>;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r6 = specialinvoke r3.<org.jivesoftware.util.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>($r0, $r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String format(java.util.Calendar)
    {
        java.util.Calendar r1;
        org.jivesoftware.util.FastDateFormat r0;
        java.lang.StringBuffer $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r1 := @parameter0: java.util.Calendar;

        $r2 = new java.lang.StringBuffer;

        $i0 = r0.<org.jivesoftware.util.FastDateFormat: int mMaxLengthEstimate>;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r3 = virtualinvoke r0.<org.jivesoftware.util.FastDateFormat: java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)>(r1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer)
    {
        java.util.GregorianCalendar $r0;
        java.util.TimeZone $r1, $r4, $r7;
        java.util.Date r2;
        org.jivesoftware.util.FastDateFormat r3;
        java.lang.StringBuffer r5, $r6;

        r3 := @this: org.jivesoftware.util.FastDateFormat;

        r2 := @parameter0: java.util.Date;

        r5 := @parameter1: java.lang.StringBuffer;

        $r0 = new java.util.GregorianCalendar;

        $r1 = <org.jivesoftware.util.FastDateFormat: java.util.TimeZone cDefaultTimeZone>;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r1);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r2);

        $r4 = r3.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        if $r4 == null goto label1;

        $r7 = r3.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        virtualinvoke $r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r7);

     label1:
        $r6 = specialinvoke r3.<org.jivesoftware.util.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>($r0, r5);

        return $r6;
    }

    public java.lang.StringBuffer format(java.util.Calendar, java.lang.StringBuffer)
    {
        java.util.Calendar r6;
        org.jivesoftware.util.FastDateFormat r0;
        java.util.TimeZone $r1, $r5;
        java.lang.StringBuffer r2, $r3;
        java.lang.Object $r4;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r6 := @parameter0: java.util.Calendar;

        r2 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        if $r1 == null goto label1;

        $r4 = virtualinvoke r6.<java.util.Calendar: java.lang.Object clone()>();

        r6 = (java.util.Calendar) $r4;

        $r5 = r0.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        virtualinvoke r6.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r5);

     label1:
        $r3 = specialinvoke r0.<org.jivesoftware.util.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>(r6, r2);

        return $r3;
    }

    private java.lang.StringBuffer applyRules(java.util.Calendar, java.lang.StringBuffer)
    {
        org.jivesoftware.util.FastDateFormat r0;
        org.jivesoftware.util.FastDateFormat$Rule $r5;
        java.util.Calendar r4;
        java.lang.StringBuffer r3;
        int i0, i1;
        org.jivesoftware.util.FastDateFormat$Rule[] r1, $r2;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        r4 := @parameter0: java.util.Calendar;

        r3 := @parameter1: java.lang.StringBuffer;

        r1 = r0.<org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$Rule[] mRules>;

        $r2 = r0.<org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat$Rule[] mRules>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[i1];

        interfaceinvoke $r5.<org.jivesoftware.util.FastDateFormat$Rule: void appendTo(java.lang.StringBuffer,java.util.Calendar)>(r3, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    public java.lang.String getPattern()
    {
        java.lang.String $r1;
        org.jivesoftware.util.FastDateFormat r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        $r1 = r0.<org.jivesoftware.util.FastDateFormat: java.lang.String mPattern>;

        return $r1;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.jivesoftware.util.FastDateFormat r0;
        java.util.TimeZone $r1;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        $r1 = r0.<org.jivesoftware.util.FastDateFormat: java.util.TimeZone mTimeZone>;

        return $r1;
    }

    public java.util.Locale getLocale()
    {
        org.jivesoftware.util.FastDateFormat r0;
        java.util.Locale $r1;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        $r1 = r0.<org.jivesoftware.util.FastDateFormat: java.util.Locale mLocale>;

        return $r1;
    }

    public int getMaxLengthEstimate()
    {
        int $i0;
        org.jivesoftware.util.FastDateFormat r0;

        r0 := @this: org.jivesoftware.util.FastDateFormat;

        $i0 = r0.<org.jivesoftware.util.FastDateFormat: int mMaxLengthEstimate>;

        return $i0;
    }

    static double access$000()
    {
        double $d0;

        $d0 = <org.jivesoftware.util.FastDateFormat: double LOG_10>;

        return $d0;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r4;
        java.util.HashMap $r5, $r6, $r7, $r8, $r9;
        java.lang.Integer $r0, $r1, $r2, $r3;
        double $d0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(0);

        <org.jivesoftware.util.FastDateFormat: java.lang.Object FULL> = $r0;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(1);

        <org.jivesoftware.util.FastDateFormat: java.lang.Object LONG> = $r1;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(2);

        <org.jivesoftware.util.FastDateFormat: java.lang.Object MEDIUM> = $r2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(3);

        <org.jivesoftware.util.FastDateFormat: java.lang.Object SHORT> = $r3;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        <org.jivesoftware.util.FastDateFormat: double LOG_10> = $d0;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <org.jivesoftware.util.FastDateFormat: java.util.TimeZone cDefaultTimeZone> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        <org.jivesoftware.util.FastDateFormat: java.util.Map cTimeZoneDisplayCache> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(int)>(7);

        <org.jivesoftware.util.FastDateFormat: java.util.Map cInstanceCache> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>(7);

        <org.jivesoftware.util.FastDateFormat: java.util.Map cDateInstanceCache> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>(int)>(7);

        <org.jivesoftware.util.FastDateFormat: java.util.Map cTimeInstanceCache> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>(int)>(7);

        <org.jivesoftware.util.FastDateFormat: java.util.Map cDateTimeInstanceCache> = $r9;

        return;
    }
}
