public class org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.AfterAdvice
{
    private static final java.lang.String AFTER_THROWING;
    private static final org.apache.commons.logging.Log logger;
    private final java.lang.Object throwsAdvice;
    private final java.util.Map exceptionHandlerMap;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.lang.String AFTER_THROWING> = "afterThrowing";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/aop/framework/adapter/ThrowsAdviceInterceptor;");

        <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.reflect.Method[] $r4;
        org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor r0;
        java.util.Map $r12, $r22;
        java.lang.reflect.Method r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r17, $r19, $r24, $r26, $r27;
        java.util.HashMap $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r6, $r20, $r28;
        java.lang.Class[] $r7, $r9, $r10, $r13, $r14, $r21;
        java.lang.IllegalArgumentException $r23;
        java.lang.Object r2;
        java.lang.Class $r3, $r8, $r11, $r15, $r25;
        org.apache.commons.logging.Log $r16, $r18;

        r0 := @this: org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.util.Map exceptionHandlerMap> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Advice must not be null");

        r0.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.lang.Object throwsAdvice> = r2;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r4;

        i7 = 0;

        goto label4;

     label1:
        r5 = $r4[i7];

        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("afterThrowing");

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r7;

        if $i1 == 1 goto label2;

        $r21 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i6 = lengthof $r21;

        if $i6 != 4 goto label3;

     label2:
        $r8 = class "Ljava/lang/Throwable;";

        $r9 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r10 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r10;

        $i3 = $i2 - 1;

        $r11 = $r9[$i3];

        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r11);

        if $z1 == 0 goto label3;

        $r12 = r0.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.util.Map exceptionHandlerMap>;

        $r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r14 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r14;

        $i5 = $i4 - 1;

        $r15 = $r13[$i5];

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r5);

        $r16 = <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label3;

        $r18 = <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found exception handler method: ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

     label3:
        i7 = i7 + 1;

     label4:
        if i7 < i0 goto label1;

        $r22 = r0.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.util.Map exceptionHandlerMap>;

        $z3 = interfaceinvoke $r22.<java.util.Map: boolean isEmpty()>();

        if $z3 == 0 goto label5;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("At least one handler method must be found in class [");

        $r25 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label5:
        return;
    }

    public int getHandlerMethodCount()
    {
        int $i0;
        org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;

        $r1 = r0.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.util.Map exceptionHandlerMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    private java.lang.reflect.Method getExceptionHandler(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor r3;
        java.util.Map $r4, $r15;
        java.lang.String $r9, $r13, $r19, $r22;
        java.lang.reflect.Method r24;
        boolean $z0, $z1, $z2;
        java.lang.Class $r1, $r14, r23;
        org.apache.commons.logging.Log $r2, $r6, $r8, $r18;
        java.lang.Object $r5, $r16;
        java.lang.StringBuilder $r7, $r10, $r11, $r12, $r17, $r20, $r21;

        r3 := @this: org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r23 = $r1;

        $r2 = <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r18 = <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to find handler for exception of type [");

        $r19 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r22);

     label1:
        $r4 = r3.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.util.Map exceptionHandlerMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r24 = (java.lang.reflect.Method) $r5;

        goto label3;

     label2:
        $r14 = virtualinvoke r23.<java.lang.Class: java.lang.Class getSuperclass()>();

        r23 = $r14;

        $r15 = r3.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.util.Map exceptionHandlerMap>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r24 = (java.lang.reflect.Method) $r16;

     label3:
        if r24 != null goto label4;

        $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Throwable;");

        if $z2 == 0 goto label2;

     label4:
        if r24 == null goto label5;

        $r6 = <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r8 = <org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found handler for exception of type [");

        $r9 = virtualinvoke r23.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label5:
        return r24;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r2;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor r3;
        java.lang.Object $r1;
        java.lang.reflect.Method $r4;

        r3 := @this: org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

     label1:
        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r4 = specialinvoke r3.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.lang.reflect.Method getExceptionHandler(java.lang.Throwable)>($r2);

        if $r4 == null goto label4;

        specialinvoke r3.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: void invokeHandlerMethod(org.aopalliance.intercept.MethodInvocation,java.lang.Throwable,java.lang.reflect.Method)>(r0, $r2, $r4);

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void invokeHandlerMethod(org.aopalliance.intercept.MethodInvocation, java.lang.Throwable, java.lang.reflect.Method) throws java.lang.Throwable
    {
        java.lang.Throwable r7, $r12;
        java.lang.Object[] $r2, $r5, $r10, r13;
        java.lang.Class[] $r1;
        java.lang.reflect.InvocationTargetException $r11;
        org.aopalliance.intercept.MethodInvocation r3;
        org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor r8;
        int $i0;
        java.lang.Object $r6, $r9;
        java.lang.reflect.Method r0, $r4;

        r8 := @this: org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;

        r3 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r7 := @parameter1: java.lang.Throwable;

        r0 := @parameter2: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r7;

        r13 = $r10;

        goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[4];

        $r4 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r2[0] = $r4;

        $r5 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r2[1] = $r5;

        $r6 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r2[2] = $r6;

        $r2[3] = r7;

        r13 = $r2;

     label2:
        $r9 = r8.<org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor: java.lang.Object throwsAdvice>;

        virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, r13);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r12;

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label4;
    }
}
