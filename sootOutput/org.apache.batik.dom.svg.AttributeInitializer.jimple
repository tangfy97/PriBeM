public class org.apache.batik.dom.svg.AttributeInitializer extends java.lang.Object
{
    protected java.lang.String[] keys;
    protected int length;
    protected org.apache.batik.util.DoublyIndexedTable values;

    public void <init>(int)
    {
        int i0, $i1;
        org.apache.batik.dom.svg.AttributeInitializer r0;
        java.lang.String[] $r2;
        org.apache.batik.util.DoublyIndexedTable $r1;

        r0 := @this: org.apache.batik.dom.svg.AttributeInitializer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r1.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.dom.svg.AttributeInitializer: org.apache.batik.util.DoublyIndexedTable values> = $r1;

        $i1 = i0 * 3;

        $r2 = newarray (java.lang.String)[$i1];

        r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys> = $r2;

        return;
    }

    public void addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r1, $r2, $r4, $r6, r10, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.batik.dom.svg.AttributeInitializer r0;
        java.lang.String r3, r5, r7, r8;
        org.apache.batik.util.DoublyIndexedTable $r9;

        r0 := @this: org.apache.batik.dom.svg.AttributeInitializer;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        i0 = lengthof $r1;

        $i1 = r0.<org.apache.batik.dom.svg.AttributeInitializer: int length>;

        if $i1 != i0 goto label1;

        $i8 = i0 * 2;

        r10 = newarray (java.lang.String)[$i8];

        $r11 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, 0, i0);

        r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys> = r10;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        $i2 = r0.<org.apache.batik.dom.svg.AttributeInitializer: int length>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.dom.svg.AttributeInitializer: int length> = $i3;

        $r2[$i2] = r3;

        $r4 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        $i4 = r0.<org.apache.batik.dom.svg.AttributeInitializer: int length>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.dom.svg.AttributeInitializer: int length> = $i5;

        $r4[$i4] = r5;

        $r6 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        $i6 = r0.<org.apache.batik.dom.svg.AttributeInitializer: int length>;

        $i7 = $i6 + 1;

        r0.<org.apache.batik.dom.svg.AttributeInitializer: int length> = $i7;

        $r6[$i6] = r7;

        $r9 = r0.<org.apache.batik.dom.svg.AttributeInitializer: org.apache.batik.util.DoublyIndexedTable values>;

        virtualinvoke $r9.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r7, r8);

        return;
    }

    public void initializeAttributes(org.apache.batik.dom.svg.AbstractElement)
    {
        java.lang.String[] $r2, $r3, $r4;
        int $i0, $i1, $i2, i3, $i5;
        org.apache.batik.dom.svg.AttributeInitializer r0;
        java.lang.String $r5, $r6, $r7;
        org.apache.batik.dom.svg.AbstractElement r1;

        r0 := @this: org.apache.batik.dom.svg.AttributeInitializer;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractElement;

        $i0 = r0.<org.apache.batik.dom.svg.AttributeInitializer: int length>;

        i3 = $i0 - 1;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        $i1 = i3 - 2;

        $r7 = $r2[$i1];

        $r3 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        $i2 = i3 - 1;

        $r6 = $r3[$i2];

        $r4 = r0.<org.apache.batik.dom.svg.AttributeInitializer: java.lang.String[] keys>;

        $r5 = $r4[i3];

        virtualinvoke r0.<org.apache.batik.dom.svg.AttributeInitializer: boolean resetAttribute(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String)>(r1, $r7, $r6, $r5);

        $i5 = (int) -3;

        i3 = i3 + $i5;

     label2:
        if i3 >= 2 goto label1;

        return;
    }

    public boolean resetAttribute(org.apache.batik.dom.svg.AbstractElement, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.util.DoublyIndexedTable $r2;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        org.apache.batik.dom.svg.AttributeInitializer r0;
        java.lang.Object $r3;
        java.lang.String r1, r4, r5, r11;
        org.apache.batik.dom.svg.AbstractElement r6;

        r0 := @this: org.apache.batik.dom.svg.AttributeInitializer;

        r6 := @parameter0: org.apache.batik.dom.svg.AbstractElement;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.String;

        $r2 = r0.<org.apache.batik.dom.svg.AttributeInitializer: org.apache.batik.util.DoublyIndexedTable values>;

        $r3 = virtualinvoke $r2.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r11);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        if r5 == null goto label2;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        virtualinvoke r6.<org.apache.batik.dom.svg.AbstractElement: void setUnspecifiedAttribute(java.lang.String,java.lang.String,java.lang.String)>(r1, r11, r4);

        return 1;
    }
}
