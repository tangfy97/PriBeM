public class org.xmpp.forms.DataForm extends org.xmpp.packet.PacketExtension
{
    private static final java.text.SimpleDateFormat UTC_FORMAT;
    private static final org.jivesoftware.util.FastDateFormat FAST_UTC_FORMAT;
    public static final java.lang.String ELEMENT_NAME;
    public static final java.lang.String NAMESPACE;

    public static java.util.Date parseDate(java.lang.String) throws java.text.ParseException
    {
        java.lang.Throwable $r4;
        java.util.Date $r3;
        java.text.SimpleDateFormat $r0, $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.xmpp.forms.DataForm: java.text.SimpleDateFormat UTC_FORMAT>;

        entermonitor $r0;

     label1:
        $r2 = <org.xmpp.forms.DataForm: java.text.SimpleDateFormat UTC_FORMAT>;

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r1);

        exitmonitor $r0;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static java.lang.String encode(java.lang.Object)
    {
        java.util.Date $r2;
        org.jivesoftware.util.FastDateFormat $r3;
        java.lang.Boolean $r5;
        java.lang.Object r0;
        java.lang.String $r1, $r4, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.Boolean;

        if $z1 == 0 goto label4;

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z3 = virtualinvoke $r5.<java.lang.Boolean: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label2;

        $r7 = "1";

        goto label3;

     label2:
        $r7 = "0";

     label3:
        return $r7;

     label4:
        $z2 = r0 instanceof java.util.Date;

        if $z2 == 0 goto label5;

        $r3 = <org.xmpp.forms.DataForm: org.jivesoftware.util.FastDateFormat FAST_UTC_FORMAT>;

        $r2 = (java.util.Date) r0;

        $r4 = virtualinvoke $r3.<org.jivesoftware.util.FastDateFormat: java.lang.String format(java.util.Date)>($r2);

        return $r4;

     label5:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public void <init>(org.xmpp.forms.DataForm$Type)
    {
        org.dom4j.Element $r2;
        org.xmpp.forms.DataForm$Type r1;
        java.lang.String $r3;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        r1 := @parameter0: org.xmpp.forms.DataForm$Type;

        specialinvoke r0.<org.xmpp.packet.PacketExtension: void <init>(java.lang.String,java.lang.String)>("x", "jabber:x:data");

        $r2 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r3 = virtualinvoke r1.<org.xmpp.forms.DataForm$Type: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("type", $r3);

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.xmpp.packet.PacketExtension: void <init>(org.dom4j.Element)>(r1);

        return;
    }

    public org.xmpp.forms.DataForm$Type getType()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.forms.DataForm$Type $r3;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.xmpp.forms.DataForm$Type: org.xmpp.forms.DataForm$Type valueOf(java.lang.String)>($r2);

        return $r3;

     label1:
        return null;
    }

    public void setTitle(java.lang.String)
    {
        org.dom4j.Element $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.String r5;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("title");

        if $r2 == null goto label1;

        $r7 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r6 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r8 = interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("title");

        interfaceinvoke $r7.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r8);

     label1:
        $r3 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("title");

        interfaceinvoke $r4.<org.dom4j.Element: void setText(java.lang.String)>(r5);

        return;
    }

    public java.lang.String getTitle()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementTextTrim(java.lang.String)>("title");

        return $r2;
    }

    public java.util.List getInstructions()
    {
        java.util.Iterator $r3;
        java.util.ArrayList $r0;
        java.util.List $r4;
        org.dom4j.Element $r2, $r6;
        java.lang.Object $r5;
        java.lang.String $r7;
        org.xmpp.forms.DataForm r1;
        boolean $z0;

        r1 := @this: org.xmpp.forms.DataForm;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("instructions");

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.dom4j.Element) $r5;

        $r7 = interfaceinvoke $r6.<org.dom4j.Element: java.lang.String getTextTrim()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r4;
    }

    public void addInstruction(java.lang.String)
    {
        org.dom4j.Element $r1, $r2;
        java.lang.String r3;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("instructions");

        interfaceinvoke $r2.<org.dom4j.Element: void setText(java.lang.String)>(r3);

        return;
    }

    public void clearInstructions()
    {
        java.util.Iterator $r2;
        org.dom4j.Element $r1;
        org.xmpp.forms.DataForm r0;
        boolean $z0;

        r0 := @this: org.xmpp.forms.DataForm;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("instructions");

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public org.xmpp.forms.FormField addField()
    {
        org.xmpp.forms.FormField $r0;
        org.dom4j.Element $r2, $r3;
        org.xmpp.forms.DataForm r1;

        r1 := @this: org.xmpp.forms.DataForm;

        $r0 = new org.xmpp.forms.FormField;

        $r2 = r1.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("field");

        specialinvoke $r0.<org.xmpp.forms.FormField: void <init>(org.dom4j.Element)>($r3);

        return $r0;
    }

    public java.util.List getFields()
    {
        java.util.Iterator $r3;
        java.util.ArrayList $r0;
        org.xmpp.forms.FormField $r4;
        org.dom4j.Element $r2, $r6;
        java.lang.Object $r5;
        org.xmpp.forms.DataForm r1;
        boolean $z0;

        r1 := @this: org.xmpp.forms.DataForm;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("field");

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = new org.xmpp.forms.FormField;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.dom4j.Element) $r5;

        specialinvoke $r4.<org.xmpp.forms.FormField: void <init>(org.dom4j.Element)>($r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    public org.xmpp.forms.FormField getField(java.lang.String)
    {
        java.util.Iterator $r2;
        org.xmpp.forms.FormField $r3;
        org.dom4j.Element $r1, $r5;
        java.lang.Object $r4;
        java.lang.String r6, $r7;
        org.xmpp.forms.DataForm r0;
        boolean $z0, $z1;

        r0 := @this: org.xmpp.forms.DataForm;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("field");

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = new org.xmpp.forms.FormField;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.dom4j.Element) $r4;

        specialinvoke $r3.<org.xmpp.forms.FormField: void <init>(org.dom4j.Element)>($r5);

        $r7 = virtualinvoke $r3.<org.xmpp.forms.FormField: java.lang.String getVariable()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        return $r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public boolean removeField(java.lang.String)
    {
        java.util.Iterator $r2;
        org.dom4j.Element $r1, r4, $r7;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.xmpp.forms.DataForm r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.xmpp.forms.DataForm;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("field");

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.dom4j.Element) $r3;

        $r5 = interfaceinvoke r4.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("var");

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r7 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $z2 = interfaceinvoke $r7.<org.dom4j.Element: boolean remove(org.dom4j.Element)>(r4);

        return $z2;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void addReportedField(java.lang.String, java.lang.String, org.xmpp.forms.FormField$Type)
    {
        java.lang.Throwable $r12;
        org.xmpp.forms.FormField$Type r7;
        org.xmpp.forms.FormField $r4;
        org.dom4j.Element $r1, $r2, $r3, $r5, $r9, $r10, $r11, r13;
        java.lang.String r6, r8;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        r6 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r7 := @parameter2: org.xmpp.forms.FormField$Type;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("reported");

        r13 = $r2;

        $r3 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        entermonitor $r3;

     label1:
        if $r2 != null goto label2;

        $r9 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r10 = interfaceinvoke $r9.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("reported");

        r13 = $r10;

        if $r10 != null goto label2;

        $r11 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        r13 = interfaceinvoke $r11.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("reported");

     label2:
        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r12;

     label6:
        $r4 = new org.xmpp.forms.FormField;

        $r5 = interfaceinvoke r13.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("field");

        specialinvoke $r4.<org.xmpp.forms.FormField: void <init>(org.dom4j.Element)>($r5);

        virtualinvoke $r4.<org.xmpp.forms.FormField: void setVariable(java.lang.String)>(r6);

        virtualinvoke $r4.<org.xmpp.forms.FormField: void setType(org.xmpp.forms.FormField$Type)>(r7);

        virtualinvoke $r4.<org.xmpp.forms.FormField: void setLabel(java.lang.String)>(r8);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addItemFields(java.util.Map)
    {
        java.util.Map r3;
        java.lang.String r7, $r11, $r16;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5, $r13;
        java.util.Collection $r12;
        java.util.Set $r4;
        org.dom4j.Element $r1, $r2, $r8, $r10, $r14;
        java.lang.Object $r6, $r9, $r15;
        org.xmpp.forms.DataForm r0;

        r0 := @this: org.xmpp.forms.DataForm;

        r3 := @parameter0: java.util.Map;

        $r1 = r0.<org.xmpp.forms.DataForm: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("field");

        interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("var", r7);

        $r9 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $z1 = $r9 instanceof java.util.Collection;

        if $z1 == 0 goto label4;

        $r12 = (java.util.Collection) $r9;

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r14 = interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("value");

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r16 = staticinvoke <org.xmpp.forms.DataForm: java.lang.String encode(java.lang.Object)>($r15);

        interfaceinvoke $r14.<org.dom4j.Element: void setText(java.lang.String)>($r16);

        goto label2;

     label3:
        goto label5;

     label4:
        $r10 = interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("value");

        $r11 = staticinvoke <org.xmpp.forms.DataForm: java.lang.String encode(java.lang.Object)>($r9);

        interfaceinvoke $r10.<org.dom4j.Element: void setText(java.lang.String)>($r11);

     label5:
        goto label1;

     label6:
        return;
    }

    public org.xmpp.forms.DataForm createCopy()
    {
        org.dom4j.Element $r2, $r3;
        org.xmpp.forms.DataForm $r0, r1;

        r1 := @this: org.xmpp.forms.DataForm;

        $r0 = new org.xmpp.forms.DataForm;

        $r2 = virtualinvoke r1.<org.xmpp.forms.DataForm: org.dom4j.Element getElement()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element createCopy()>();

        specialinvoke $r0.<org.xmpp.forms.DataForm: void <init>(org.dom4j.Element)>($r3);

        return $r0;
    }

    public volatile org.xmpp.packet.PacketExtension createCopy()
    {
        org.xmpp.forms.DataForm r0, $r1;

        r0 := @this: org.xmpp.forms.DataForm;

        $r1 = virtualinvoke r0.<org.xmpp.forms.DataForm: org.xmpp.forms.DataForm createCopy()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r1, $r4;
        org.jivesoftware.util.FastDateFormat $r2;
        java.util.Map $r5;
        java.text.SimpleDateFormat $r0, $r3;
        org.dom4j.QName $r6;

        <org.xmpp.forms.DataForm: java.lang.String NAMESPACE> = "jabber:x:data";

        <org.xmpp.forms.DataForm: java.lang.String ELEMENT_NAME> = "x";

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyyMMdd\'T\'HH:mm:ss");

        <org.xmpp.forms.DataForm: java.text.SimpleDateFormat UTC_FORMAT> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        $r2 = staticinvoke <org.jivesoftware.util.FastDateFormat: org.jivesoftware.util.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)>("yyyyMMdd\'T\'HH:mm:ss", $r1);

        <org.xmpp.forms.DataForm: org.jivesoftware.util.FastDateFormat FAST_UTC_FORMAT> = $r2;

        $r3 = <org.xmpp.forms.DataForm: java.text.SimpleDateFormat UTC_FORMAT>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+0");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        $r5 = <org.xmpp.forms.DataForm: java.util.Map registeredExtensions>;

        $r6 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String)>("x", "jabber:x:data");

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, class "Lorg/xmpp/forms/DataForm;");

        return;
    }
}
