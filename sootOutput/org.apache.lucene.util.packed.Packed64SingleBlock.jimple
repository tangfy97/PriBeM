abstract class org.apache.lucene.util.packed.Packed64SingleBlock extends org.apache.lucene.util.packed.PackedInts$MutableImpl
{
    public static final int MAX_SUPPORTED_BITS_PER_VALUE;
    private static final int[] SUPPORTED_BITS_PER_VALUE;
    final long[] blocks;
    static final boolean $assertionsDisabled;

    public static boolean isSupported(int)
    {
        int[] $r0;
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $r0 = <org.apache.lucene.util.packed.Packed64SingleBlock: int[] SUPPORTED_BITS_PER_VALUE>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r0, i0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int requiredCapacity(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = i0 / i1;

        $i2 = i0 % i1;

        if $i2 != 0 goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = 1;

     label2:
        $i4 = $i3 + $z0;

        return $i4;
    }

    void <init>(int, int)
    {
        java.lang.AssertionError $r2;
        long[] $r1;
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.packed.Packed64SingleBlock r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void <init>(int,int)>(i0, i1);

        $z0 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.lucene.util.packed.Packed64SingleBlock: boolean isSupported(int)>(i1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i3 = 64 / i1;

        $i2 = staticinvoke <org.apache.lucene.util.packed.Packed64SingleBlock: int requiredCapacity(int,int)>(i0, $i3);

        $r1 = newarray (long)[$i2];

        r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks> = $r1;

        return;
    }

    public void clear()
    {
        long[] $r1;
        org.apache.lucene.util.packed.Packed64SingleBlock r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        $r1 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r1, 0L);

        return;
    }

    public long ramBytesUsed()
    {
        long $l4, $l5, $l6, $l7;
        long[] $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.util.packed.Packed64SingleBlock r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        $i2 = $i0 + 8;

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = $i2 + $i1;

        $l4 = (long) $i3;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l4);

        $r1 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(long[])>($r1);

        $l7 = $l5 + $l6;

        return $l7;
    }

    public int get(int, long[], int, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r13, $r14, $r15, $r17;
        org.apache.lucene.util.packed.BulkOperation $r2;
        long $l21;
        java.lang.AssertionError $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long[] r3, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, $i33;
        java.lang.String $r16;
        org.apache.lucene.util.packed.Packed64SingleBlock r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;

        r0 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        i27 := @parameter0: int;

        r3 := @parameter1: long[];

        i28 := @parameter2: int;

        i29 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i29 > 0 goto label01;

        $r18 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r18;

     label01:
        $z1 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if i27 < 0 goto label02;

        $i26 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int valueCount>;

        if i27 < $i26 goto label03;

     label02:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label03:
        $i0 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int valueCount>;

        $i1 = $i0 - i27;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i29, $i1);

        i30 = $i2;

        $z2 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $i23 = i28 + $i2;

        $i22 = lengthof r3;

        if $i23 <= $i22 goto label04;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label04:
        i3 = i27;

        $i4 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $i24 = 64 / $i4;

        $i25 = i27 % $i24;

        if $i25 == 0 goto label07;

        i31 = $i25;

     label05:
        if i31 >= $i24 goto label06;

        if i30 <= 0 goto label06;

        $i19 = i28;

        i28 = i28 + 1;

        $i20 = i27;

        i27 = i27 + 1;

        $l21 = virtualinvoke r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long get(int)>($i20);

        r3[$i19] = $l21;

        $i33 = (int) -1;

        i30 = i30 + $i33;

        i31 = i31 + 1;

        goto label05;

     label06:
        if i30 != 0 goto label07;

        $i18 = i27 - i3;

        return $i18;

     label07:
        $z3 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $i17 = i27 % $i24;

        if $i17 == 0 goto label08;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label08:
        $r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        $i5 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $r2 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>($r1, $i5);

        $z4 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z4 != 0 goto label09;

        $i16 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longBlockCount()>();

        if $i16 == 1 goto label09;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label09:
        $z5 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        $i10 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longValueCount()>();

        if $i10 == $i24 goto label10;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label10:
        $i11 = i27 / $i24;

        $i6 = i27 + i30;

        $i7 = $i6 / $i24;

        $i12 = $i7 - $i11;

        $r4 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: void decode(long[],int,long[],int,int)>($r4, $i11, r3, i28, $i12);

        $i13 = $i12 * $i24;

        $i14 = i27 + $i13;

        $i15 = i30 - $i13;

        if $i14 <= i3 goto label11;

        $i9 = $i14 - i3;

        return $i9;

     label11:
        $z6 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z6 != 0 goto label12;

        if $i14 == i3 goto label12;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label12:
        $i8 = specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int get(int,long[],int,int)>($i14, r3, i28, $i15);

        return $i8;
    }

    public int set(int, long[], int, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r13, $r14, $r15, $r17;
        org.apache.lucene.util.packed.BulkOperation $r2;
        long $l21;
        java.lang.AssertionError $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long[] r3, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, $i33;
        java.lang.String $r16;
        org.apache.lucene.util.packed.Packed64SingleBlock r0;
        org.apache.lucene.util.packed.PackedInts$Format $r1;

        r0 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        i27 := @parameter0: int;

        r3 := @parameter1: long[];

        i28 := @parameter2: int;

        i29 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i29 > 0 goto label01;

        $r18 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r18;

     label01:
        $z1 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if i27 < 0 goto label02;

        $i26 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int valueCount>;

        if i27 < $i26 goto label03;

     label02:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label03:
        $i0 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int valueCount>;

        $i1 = $i0 - i27;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i29, $i1);

        i30 = $i2;

        $z2 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $i23 = i28 + $i2;

        $i22 = lengthof r3;

        if $i23 <= $i22 goto label04;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label04:
        i3 = i27;

        $i4 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $i24 = 64 / $i4;

        $i25 = i27 % $i24;

        if $i25 == 0 goto label07;

        i31 = $i25;

     label05:
        if i31 >= $i24 goto label06;

        if i30 <= 0 goto label06;

        $i19 = i27;

        i27 = i27 + 1;

        $i20 = i28;

        i28 = i28 + 1;

        $l21 = r3[$i20];

        virtualinvoke r0.<org.apache.lucene.util.packed.Packed64SingleBlock: void set(int,long)>($i19, $l21);

        $i33 = (int) -1;

        i30 = i30 + $i33;

        i31 = i31 + 1;

        goto label05;

     label06:
        if i30 != 0 goto label07;

        $i18 = i27 - i3;

        return $i18;

     label07:
        $z3 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $i17 = i27 % $i24;

        if $i17 == 0 goto label08;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label08:
        $r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        $i5 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $r2 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>($r1, $i5);

        $z4 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z4 != 0 goto label09;

        $i16 = virtualinvoke $r2.<org.apache.lucene.util.packed.BulkOperation: int longBlockCount()>();

        if $i16 == 1 goto label09;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label09:
        $z5 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        $i10 = virtualinvoke $r2.<org.apache.lucene.util.packed.BulkOperation: int longValueCount()>();

        if $i10 == $i24 goto label10;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label10:
        $i11 = i27 / $i24;

        $i6 = i27 + i30;

        $i7 = $i6 / $i24;

        $i12 = $i7 - $i11;

        $r4 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.BulkOperation: void encode(long[],int,long[],int,int)>(r3, i28, $r4, $i11, $i12);

        $i13 = $i12 * $i24;

        $i14 = i27 + $i13;

        $i15 = i30 - $i13;

        if $i14 <= i3 goto label11;

        $i9 = $i14 - i3;

        return $i9;

     label11:
        $z6 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z6 != 0 goto label12;

        if $i14 == i3 goto label12;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label12:
        $i8 = specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int set(int,long[],int,int)>($i14, r3, i28, $i15);

        return $i8;
    }

    public void fill(int, int, long)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        long l5, $l8, l19;
        java.lang.AssertionError $r2, $r3, $r4, $r5, $r6;
        long[] $r1;
        int $i0, i1, $i2, $i3, i4, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, $i17, $i18, i20, i21;
        org.apache.lucene.util.packed.Packed64SingleBlock r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        i15 := @parameter0: int;

        i1 := @parameter1: int;

        l5 := @parameter2: long;

        $z0 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i15 >= 0 goto label01;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label01:
        $z1 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if i15 <= i1 goto label02;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label02:
        $z2 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $i12 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l5);

        $i13 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        if $i12 <= $i13 goto label03;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label03:
        $i0 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $i14 = 64 / $i0;

        $i3 = i1 - i15;

        $i2 = $i14 << 1;

        if $i3 > $i2 goto label04;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void fill(int,int,long)>(i15, i1, l5);

        return;

     label04:
        i4 = i15 % $i14;

        if i4 == 0 goto label07;

        i16 = i4;

     label05:
        if i16 >= $i14 goto label06;

        $i11 = i15;

        i15 = i15 + 1;

        virtualinvoke r0.<org.apache.lucene.util.packed.Packed64SingleBlock: void set(int,long)>($i11, l5);

        i16 = i16 + 1;

        goto label05;

     label06:
        $z3 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z3 != 0 goto label07;

        $i10 = i15 % $i14;

        if $i10 == 0 goto label07;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label07:
        $i17 = i15 / $i14;

        $i18 = i1 / $i14;

        $z4 = <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled>;

        if $z4 != 0 goto label08;

        $i9 = $i17 * $i14;

        if $i9 == i15 goto label08;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label08:
        l19 = 0L;

        i20 = 0;

     label09:
        if i20 >= $i14 goto label10;

        $i6 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $i7 = i20 * $i6;

        $l8 = l5 << $i7;

        l19 = l19 | $l8;

        i20 = i20 + 1;

        goto label09;

     label10:
        $r1 = r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r1, $i17, $i18, l19);

        i21 = $i14 * $i18;

     label11:
        if i21 >= i1 goto label12;

        virtualinvoke r0.<org.apache.lucene.util.packed.Packed64SingleBlock: void set(int,long)>(i21, l5);

        i21 = i21 + 1;

        goto label11;

     label12:
        return;
    }

    protected org.apache.lucene.util.packed.PackedInts$Format getFormat()
    {
        org.apache.lucene.util.packed.PackedInts$Format $r0;
        org.apache.lucene.util.packed.Packed64SingleBlock r1;

        r1 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        $r0 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED_SINGLE_BLOCK>;

        return $r0;
    }

    public java.lang.String toString()
    {
        long[] $r10;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r13;
        org.apache.lucene.util.packed.Packed64SingleBlock r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;
        java.lang.Class $r2;

        r1 := @this: org.apache.lucene.util.packed.Packed64SingleBlock;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(bitsPerValue=");

        $i0 = r1.<org.apache.lucene.util.packed.Packed64SingleBlock: int bitsPerValue>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $i1 = virtualinvoke r1.<org.apache.lucene.util.packed.Packed64SingleBlock: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", elements.length=");

        $r10 = r1.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        $i2 = lengthof $r10;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static org.apache.lucene.util.packed.Packed64SingleBlock create(org.apache.lucene.store.DataInput, int, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r2;
        long $l3;
        long[] $r1, $r3;
        int i0, i1, $i2, i4;
        org.apache.lucene.util.packed.Packed64SingleBlock $r0;

        r2 := @parameter0: org.apache.lucene.store.DataInput;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = staticinvoke <org.apache.lucene.util.packed.Packed64SingleBlock: org.apache.lucene.util.packed.Packed64SingleBlock create(int,int)>(i0, i1);

        i4 = 0;

     label1:
        $r1 = $r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        $i2 = lengthof $r1;

        if i4 >= $i2 goto label2;

        $r3 = $r0.<org.apache.lucene.util.packed.Packed64SingleBlock: long[] blocks>;

        $l3 = virtualinvoke r2.<org.apache.lucene.store.DataInput: long readLong()>();

        $r3[i4] = $l3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static org.apache.lucene.util.packed.Packed64SingleBlock create(int, int)
    {
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1 $r13;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4 $r10;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32 $r0;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10 $r4;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5 $r9;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2 $r12;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12 $r3;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3 $r11;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8 $r6;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9 $r5;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6 $r8;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16 $r2;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7 $r7;
        int i0, i1;
        org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21 $r1;
        java.lang.IllegalArgumentException $r14;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label15;
            case 12: goto label11;
            case 13: goto label15;
            case 14: goto label15;
            case 15: goto label15;
            case 16: goto label12;
            case 17: goto label15;
            case 18: goto label15;
            case 19: goto label15;
            case 20: goto label15;
            case 21: goto label13;
            case 22: goto label15;
            case 23: goto label15;
            case 24: goto label15;
            case 25: goto label15;
            case 26: goto label15;
            case 27: goto label15;
            case 28: goto label15;
            case 29: goto label15;
            case 30: goto label15;
            case 31: goto label15;
            case 32: goto label14;
            default: goto label15;
        };

     label01:
        $r13 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1;

        specialinvoke $r13.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1: void <init>(int)>(i1);

        return $r13;

     label02:
        $r12 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2;

        specialinvoke $r12.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2: void <init>(int)>(i1);

        return $r12;

     label03:
        $r11 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3;

        specialinvoke $r11.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3: void <init>(int)>(i1);

        return $r11;

     label04:
        $r10 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4;

        specialinvoke $r10.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4: void <init>(int)>(i1);

        return $r10;

     label05:
        $r9 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5;

        specialinvoke $r9.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5: void <init>(int)>(i1);

        return $r9;

     label06:
        $r8 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6;

        specialinvoke $r8.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6: void <init>(int)>(i1);

        return $r8;

     label07:
        $r7 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7;

        specialinvoke $r7.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7: void <init>(int)>(i1);

        return $r7;

     label08:
        $r6 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8;

        specialinvoke $r6.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8: void <init>(int)>(i1);

        return $r6;

     label09:
        $r5 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9;

        specialinvoke $r5.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9: void <init>(int)>(i1);

        return $r5;

     label10:
        $r4 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10;

        specialinvoke $r4.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10: void <init>(int)>(i1);

        return $r4;

     label11:
        $r3 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12;

        specialinvoke $r3.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12: void <init>(int)>(i1);

        return $r3;

     label12:
        $r2 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16;

        specialinvoke $r2.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16: void <init>(int)>(i1);

        return $r2;

     label13:
        $r1 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21;

        specialinvoke $r1.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21: void <init>(int)>(i1);

        return $r1;

     label14:
        $r0 = new org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32;

        specialinvoke $r0.<org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32: void <init>(int)>(i1);

        return $r0;

     label15:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported number of bits per value: 32");

        throw $r14;
    }

    static void <clinit>()
    {
        int[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.packed.Packed64SingleBlock: int MAX_SUPPORTED_BITS_PER_VALUE> = 32;

        $r0 = class "Lorg/apache/lucene/util/packed/Packed64SingleBlock;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.Packed64SingleBlock: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[14];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 3;

        $r1[3] = 4;

        $r1[4] = 5;

        $r1[5] = 6;

        $r1[6] = 7;

        $r1[7] = 8;

        $r1[8] = 9;

        $r1[9] = 10;

        $r1[10] = 12;

        $r1[11] = 16;

        $r1[12] = 21;

        $r1[13] = 32;

        <org.apache.lucene.util.packed.Packed64SingleBlock: int[] SUPPORTED_BITS_PER_VALUE> = $r1;

        return;
    }
}
