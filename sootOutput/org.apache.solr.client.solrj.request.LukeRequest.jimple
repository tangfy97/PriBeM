public class org.apache.solr.client.solrj.request.LukeRequest extends org.apache.solr.client.solrj.SolrRequest
{
    private java.util.List fields;
    private int numTerms;
    private boolean showSchema;

    public void <init>()
    {
        int $i1;
        org.apache.solr.client.solrj.SolrRequest$METHOD $r1;
        org.apache.solr.client.solrj.request.LukeRequest r0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        $r1 = <org.apache.solr.client.solrj.SolrRequest$METHOD: org.apache.solr.client.solrj.SolrRequest$METHOD GET>;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrRequest: void <init>(org.apache.solr.client.solrj.SolrRequest$METHOD,java.lang.String)>($r1, "/admin/luke");

        $i1 = (int) -1;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: int numTerms> = $i1;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: boolean showSchema> = 0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.solr.client.solrj.SolrRequest$METHOD $r2;
        int $i1;
        java.lang.String r1;
        org.apache.solr.client.solrj.request.LukeRequest r0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.solr.client.solrj.SolrRequest$METHOD: org.apache.solr.client.solrj.SolrRequest$METHOD GET>;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrRequest: void <init>(org.apache.solr.client.solrj.SolrRequest$METHOD,java.lang.String)>($r2, r1);

        $i1 = (int) -1;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: int numTerms> = $i1;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: boolean showSchema> = 0;

        return;
    }

    public void addField(java.lang.String)
    {
        java.util.List $r1, $r3;
        java.lang.String r2;
        org.apache.solr.client.solrj.request.LukeRequest r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields> = $r4;

     label1:
        $r3 = r0.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void setFields(java.util.List)
    {
        java.util.List r1;
        org.apache.solr.client.solrj.request.LukeRequest r0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields> = r1;

        return;
    }

    public boolean isShowSchema()
    {
        org.apache.solr.client.solrj.request.LukeRequest r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        $z0 = r0.<org.apache.solr.client.solrj.request.LukeRequest: boolean showSchema>;

        return $z0;
    }

    public void setShowSchema(boolean)
    {
        org.apache.solr.client.solrj.request.LukeRequest r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        z0 := @parameter0: boolean;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: boolean showSchema> = z0;

        return;
    }

    public int getNumTerms()
    {
        int $i0;
        org.apache.solr.client.solrj.request.LukeRequest r0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        $i0 = r0.<org.apache.solr.client.solrj.request.LukeRequest: int numTerms>;

        return $i0;
    }

    public void setNumTerms(int)
    {
        int i0;
        org.apache.solr.client.solrj.request.LukeRequest r0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        i0 := @parameter0: int;

        r0.<org.apache.solr.client.solrj.request.LukeRequest: int numTerms> = i0;

        return;
    }

    public java.util.Collection getContentStreams()
    {
        org.apache.solr.client.solrj.request.LukeRequest r0;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        return null;
    }

    public org.apache.solr.common.params.SolrParams getParams()
    {
        java.lang.Object[] $r13;
        java.lang.String[] $r3, $r4, $r12, $r14;
        org.apache.solr.client.solrj.request.LukeRequest r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8;
        boolean $z0;
        org.apache.solr.common.params.ModifiableSolrParams $r0;
        java.util.List $r2, $r9, $r10, $r11;
        java.lang.StringBuilder $r5, $r6, $r7;

        r1 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        $r0 = new org.apache.solr.common.params.ModifiableSolrParams;

        specialinvoke $r0.<org.apache.solr.common.params.ModifiableSolrParams: void <init>()>();

        $r2 = r1.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields>;

        if $r2 == null goto label1;

        $r9 = r1.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i1 <= 0 goto label1;

        $r11 = r1.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields>;

        $r10 = r1.<org.apache.solr.client.solrj.request.LukeRequest: java.util.List fields>;

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r12 = newarray (java.lang.String)[$i2];

        $r13 = interfaceinvoke $r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (java.lang.String[]) $r13;

        virtualinvoke $r0.<org.apache.solr.common.params.ModifiableSolrParams: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("fl", $r14);

     label1:
        $i3 = r1.<org.apache.solr.client.solrj.request.LukeRequest: int numTerms>;

        if $i3 < 0 goto label2;

        $r4 = newarray (java.lang.String)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.apache.solr.client.solrj.request.LukeRequest: int numTerms>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r8;

        virtualinvoke $r0.<org.apache.solr.common.params.ModifiableSolrParams: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("numTerms", $r4);

     label2:
        $z0 = r1.<org.apache.solr.client.solrj.request.LukeRequest: boolean showSchema>;

        if $z0 == 0 goto label3;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "schema";

        virtualinvoke $r0.<org.apache.solr.common.params.ModifiableSolrParams: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("show", $r3);

     label3:
        return $r0;
    }

    public org.apache.solr.client.solrj.response.LukeResponse process(org.apache.solr.client.solrj.SolrServer) throws org.apache.solr.client.solrj.SolrServerException, java.io.IOException
    {
        org.apache.solr.client.solrj.SolrServer r1;
        long $l0, $l1, $l2;
        org.apache.solr.client.solrj.request.LukeRequest r2;
        org.apache.solr.client.solrj.response.LukeResponse $r0;
        org.apache.solr.common.util.NamedList $r3;

        r2 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        r1 := @parameter0: org.apache.solr.client.solrj.SolrServer;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = new org.apache.solr.client.solrj.response.LukeResponse;

        specialinvoke $r0.<org.apache.solr.client.solrj.response.LukeResponse: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.solr.client.solrj.SolrServer: org.apache.solr.common.util.NamedList request(org.apache.solr.client.solrj.SolrRequest)>(r2);

        virtualinvoke $r0.<org.apache.solr.client.solrj.response.LukeResponse: void setResponse(org.apache.solr.common.util.NamedList)>($r3);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - $l0;

        virtualinvoke $r0.<org.apache.solr.client.solrj.response.LukeResponse: void setElapsedTime(long)>($l2);

        return $r0;
    }

    public volatile org.apache.solr.client.solrj.SolrResponse process(org.apache.solr.client.solrj.SolrServer) throws org.apache.solr.client.solrj.SolrServerException, java.io.IOException
    {
        org.apache.solr.client.solrj.request.LukeRequest r0;
        org.apache.solr.client.solrj.SolrServer r1;
        org.apache.solr.client.solrj.response.LukeResponse $r2;

        r0 := @this: org.apache.solr.client.solrj.request.LukeRequest;

        r1 := @parameter0: org.apache.solr.client.solrj.SolrServer;

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.request.LukeRequest: org.apache.solr.client.solrj.response.LukeResponse process(org.apache.solr.client.solrj.SolrServer)>(r1);

        return $r2;
    }
}
