public class org.apache.solr.common.cloud.ClusterState extends java.lang.Object implements org.noggit.JSONWriter$Writable
{
    private static org.slf4j.Logger log;
    private java.lang.Integer zkClusterStateVersion;
    private final java.util.Map collectionStates;
    private final java.util.Set liveNodes;

    public void <init>(java.util.Set, java.util.Map)
    {
        java.util.Set r1;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map r2;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.solr.common.cloud.ClusterState: void <init>(java.lang.Integer,java.util.Set,java.util.Map)>(null, r1, r2);

        return;
    }

    public void <init>(java.lang.Integer, java.util.Set, java.util.Map)
    {
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Set r3, $r4;
        java.util.HashMap $r5;
        java.lang.Integer r1;
        java.util.HashSet $r2;
        java.util.Map r6, $r7;
        int $i0, $i1;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.Integer;

        r3 := @parameter1: java.util.Set;

        r6 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion> = r1;

        $r2 = new java.util.HashSet;

        $i0 = interfaceinvoke r3.<java.util.Set: int size()>();

        specialinvoke $r2.<java.util.HashSet: void <init>(int)>($i0);

        r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes> = $r2;

        $r4 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

        $r5 = new java.util.HashMap;

        $i1 = interfaceinvoke r6.<java.util.Map: int size()>();

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>($i1);

        r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates> = $r5;

        $r7 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>(r6);

        return;
    }

    public org.apache.solr.common.cloud.Replica getLeader(java.lang.String, java.lang.String)
    {
        org.apache.solr.common.cloud.Slice $r6;
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        org.apache.solr.common.cloud.Replica $r7;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, r5;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r4.<org.apache.solr.common.cloud.DocCollection: org.apache.solr.common.cloud.Slice getSlice(java.lang.String)>(r5);

        if $r6 != null goto label2;

        return null;

     label2:
        $r7 = virtualinvoke $r6.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.Replica getLeader()>();

        return $r7;
    }

    public org.apache.solr.common.cloud.Replica getReplica(java.lang.String, java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection $r5;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, r4;
        org.apache.solr.common.cloud.Replica $r6;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.apache.solr.common.cloud.DocCollection) $r3;

        $r6 = specialinvoke r0.<org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.Replica getReplica(org.apache.solr.common.cloud.DocCollection,java.lang.String)>($r5, r4);

        return $r6;
    }

    private org.apache.solr.common.cloud.Replica getReplica(org.apache.solr.common.cloud.DocCollection, java.lang.String)
    {
        org.apache.solr.common.cloud.Slice r4;
        java.util.Iterator $r2;
        org.apache.solr.common.cloud.DocCollection r0;
        org.apache.solr.common.cloud.ClusterState r7;
        java.util.Collection $r1;
        org.apache.solr.common.cloud.Replica $r6;
        java.lang.Object $r3;
        java.lang.String r5;
        boolean $z0;

        r7 := @this: org.apache.solr.common.cloud.ClusterState;

        r0 := @parameter0: org.apache.solr.common.cloud.DocCollection;

        r5 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.apache.solr.common.cloud.DocCollection: java.util.Collection getSlices()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.solr.common.cloud.Slice) $r3;

        $r6 = virtualinvoke r4.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.Replica getReplica(java.lang.String)>(r5);

        if $r6 == null goto label3;

        return $r6;

     label3:
        goto label2;

     label4:
        return null;
    }

    public org.apache.solr.common.cloud.Slice getSlice(java.lang.String, java.lang.String)
    {
        org.apache.solr.common.cloud.Slice $r6;
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, r5;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r4.<org.apache.solr.common.cloud.DocCollection: org.apache.solr.common.cloud.Slice getSlice(java.lang.String)>(r5);

        return $r6;
    }

    public java.util.Map getSlicesMap(java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r4.<org.apache.solr.common.cloud.DocCollection: java.util.Map getSlicesMap()>();

        return $r5;
    }

    public java.util.Map getActiveSlicesMap(java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r4.<org.apache.solr.common.cloud.DocCollection: java.util.Map getActiveSlicesMap()>();

        return $r5;
    }

    public java.util.Collection getSlices(java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r2;
        java.util.Collection $r5;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r4.<org.apache.solr.common.cloud.DocCollection: java.util.Collection getSlices()>();

        return $r5;
    }

    public java.util.Collection getActiveSlices(java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r2;
        java.util.Collection $r5;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r4.<org.apache.solr.common.cloud.DocCollection: java.util.Collection getActiveSlices()>();

        return $r5;
    }

    public org.apache.solr.common.cloud.DocCollection getCollection(java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection r4;
        org.apache.solr.common.cloud.ClusterState r0;
        org.apache.solr.common.SolrException$ErrorCode $r7;
        org.apache.solr.common.SolrException $r5;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String r1, $r10;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.solr.common.cloud.DocCollection) $r3;

        if r4 != null goto label1;

        $r5 = new org.apache.solr.common.SolrException;

        $r7 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find collection:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r7, $r10);

        throw $r5;

     label1:
        return r4;
    }

    public java.util.Set getCollections()
    {
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        $r1 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Map getCollectionStates()
    {
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        $r1 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Set getLiveNodes()
    {
        java.util.Set $r1, $r2;
        org.apache.solr.common.cloud.ClusterState r0;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        $r1 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public java.lang.String getShardId(java.lang.String)
    {
        org.apache.solr.common.cloud.DocCollection r5;
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Map $r1, $r10;
        java.lang.String r11, $r12;
        boolean $z0, $z1, $z2;
        org.apache.solr.common.cloud.Slice r9;
        java.util.Iterator $r3, $r7;
        java.util.Collection $r2, $r6;
        java.lang.Object $r4, $r8;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r11 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.solr.common.cloud.DocCollection) $r4;

        $r6 = virtualinvoke r5.<org.apache.solr.common.cloud.DocCollection: java.util.Collection getSlices()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.solr.common.cloud.Slice) $r8;

        $r10 = virtualinvoke r9.<org.apache.solr.common.cloud.Slice: java.util.Map getReplicasMap()>();

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r11);

        if $z2 == 0 goto label3;

        $r12 = virtualinvoke r9.<org.apache.solr.common.cloud.Slice: java.lang.String getName()>();

        return $r12;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return null;
    }

    public boolean liveNodesContain(java.lang.String)
    {
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.solr.common.cloud.ClusterState r3;
        java.util.Set $r4;
        java.util.Map $r9;
        java.lang.StringBuilder $r0, $r1, $r2, $r5, $r7, $r8, $r10;
        java.lang.String $r6, $r11, $r12;

        r3 := @this: org.apache.solr.common.cloud.ClusterState;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("live nodes:");

        $r4 = r3.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" collections:");

        $r9 = r3.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public static org.apache.solr.common.cloud.ClusterState load(org.apache.solr.common.cloud.SolrZkClient, java.util.Set) throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        byte[] $r2;
        org.apache.solr.common.cloud.ClusterState $r5;
        int $i0;
        java.util.Set r4;
        org.apache.zookeeper.data.Stat $r0;
        org.apache.solr.common.cloud.SolrZkClient r1;
        java.lang.Integer $r3;

        r1 := @parameter0: org.apache.solr.common.cloud.SolrZkClient;

        r4 := @parameter1: java.util.Set;

        $r0 = new org.apache.zookeeper.data.Stat;

        specialinvoke $r0.<org.apache.zookeeper.data.Stat: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.solr.common.cloud.SolrZkClient: byte[] getData(java.lang.String,org.apache.zookeeper.Watcher,org.apache.zookeeper.data.Stat,boolean)>("/clusterstate.json", null, $r0, 1);

        $i0 = virtualinvoke $r0.<org.apache.zookeeper.data.Stat: int getVersion()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.ClusterState load(java.lang.Integer,byte[],java.util.Set)>($r3, $r2, r4);

        return $r5;
    }

    public static org.apache.solr.common.cloud.ClusterState load(java.lang.Integer, byte[], java.util.Set)
    {
        byte[] r0;
        org.apache.solr.common.cloud.DocCollection $r17;
        org.apache.solr.common.cloud.ClusterState $r1, $r10;
        java.lang.Integer r2;
        java.util.LinkedHashMap $r7;
        java.util.Map $r4, r6, $r16;
        int $i0, $i1;
        java.lang.String r14;
        boolean $z0;
        java.util.Map$Entry r12;
        java.util.Iterator $r9;
        java.util.Set r3, $r8;
        java.lang.Object $r5, $r11, $r13, $r15;

        r2 := @parameter0: java.lang.Integer;

        r0 := @parameter1: byte[];

        r3 := @parameter2: java.util.Set;

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r1 = new org.apache.solr.common.cloud.ClusterState;

        $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $r1.<org.apache.solr.common.cloud.ClusterState: void <init>(java.lang.Integer,java.util.Set,java.util.Map)>(r2, r3, $r4);

        return $r1;

     label2:
        $r5 = staticinvoke <org.apache.solr.common.cloud.ZkStateReader: java.lang.Object fromJSON(byte[])>(r0);

        r6 = (java.util.Map) $r5;

        $r7 = new java.util.LinkedHashMap;

        $i1 = interfaceinvoke r6.<java.util.Map: int size()>();

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>(int)>($i1);

        $r8 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        r14 = (java.lang.String) $r13;

        $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.util.Map) $r15;

        $r17 = staticinvoke <org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.DocCollection collectionFromObjects(java.lang.String,java.util.Map)>(r14, $r16);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r17);

        goto label3;

     label4:
        $r10 = new org.apache.solr.common.cloud.ClusterState;

        specialinvoke $r10.<org.apache.solr.common.cloud.ClusterState: void <init>(java.lang.Integer,java.util.Set,java.util.Map)>(r2, r3, $r7);

        return $r10;
    }

    public static org.apache.solr.common.cloud.Aliases load(byte[])
    {
        byte[] r0;
        org.apache.solr.common.cloud.Aliases $r1, $r4;
        java.util.Map r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r1 = new org.apache.solr.common.cloud.Aliases;

        specialinvoke $r1.<org.apache.solr.common.cloud.Aliases: void <init>()>();

        return $r1;

     label2:
        $r2 = staticinvoke <org.apache.solr.common.cloud.ZkStateReader: java.lang.Object fromJSON(byte[])>(r0);

        r3 = (java.util.Map) $r2;

        $r4 = new org.apache.solr.common.cloud.Aliases;

        specialinvoke $r4.<org.apache.solr.common.cloud.Aliases: void <init>(java.util.Map)>(r3);

        return $r4;
    }

    private static org.apache.solr.common.cloud.DocCollection collectionFromObjects(java.lang.String, java.util.Map)
    {
        org.apache.solr.common.cloud.DocCollection $r6;
        java.util.HashMap $r3;
        java.util.Map r0, r2, r8, r9;
        org.apache.solr.common.cloud.DocRouter $r5;
        java.lang.Object $r1, $r4;
        java.lang.String r7;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("shards");

        r2 = (java.util.Map) $r1;

        if r2 != null goto label1;

        r8 = staticinvoke <org.apache.solr.common.cloud.ClusterState: java.util.Map makeSlices(java.util.Map)>(r0);

        r9 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        goto label2;

     label1:
        r8 = staticinvoke <org.apache.solr.common.cloud.ClusterState: java.util.Map makeSlices(java.util.Map)>(r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>(r0);

        r9 = $r3;

        interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("shards");

     label2:
        $r4 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>("router");

        $r5 = staticinvoke <org.apache.solr.common.cloud.DocRouter: org.apache.solr.common.cloud.DocRouter getDocRouter(java.lang.Object)>($r4);

        $r6 = new org.apache.solr.common.cloud.DocCollection;

        specialinvoke $r6.<org.apache.solr.common.cloud.DocCollection: void <init>(java.lang.String,java.util.Map,java.util.Map,org.apache.solr.common.cloud.DocRouter)>(r7, r8, r9, $r5);

        return $r6;
    }

    private static java.util.Map makeSlices(java.util.Map)
    {
        java.util.LinkedHashMap $r1;
        java.util.Map r0, $r10, $r12;
        int $i0;
        java.lang.String r7;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r5;
        org.apache.solr.common.cloud.Slice $r9, $r11;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4, $r6, $r8;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r12 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r12;

     label1:
        $r1 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r8 instanceof org.apache.solr.common.cloud.Slice;

        if $z1 == 0 goto label3;

        $r11 = (org.apache.solr.common.cloud.Slice) $r8;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r11);

        goto label4;

     label3:
        $z2 = $r8 instanceof java.util.Map;

        if $z2 == 0 goto label4;

        $r9 = new org.apache.solr.common.cloud.Slice;

        $r10 = (java.util.Map) $r8;

        specialinvoke $r9.<org.apache.solr.common.cloud.Slice: void <init>(java.lang.String,java.util.Map,java.util.Map)>(r7, null, $r10);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r9);

     label4:
        goto label2;

     label5:
        return $r1;
    }

    public void write(org.noggit.JSONWriter)
    {
        org.noggit.JSONWriter r0;
        org.apache.solr.common.cloud.ClusterState r1;
        java.util.Map $r2;

        r1 := @this: org.apache.solr.common.cloud.ClusterState;

        r0 := @parameter0: org.noggit.JSONWriter;

        $r2 = r1.<org.apache.solr.common.cloud.ClusterState: java.util.Map collectionStates>;

        virtualinvoke r0.<org.noggit.JSONWriter: void write(java.util.Map)>($r2);

        return;
    }

    public java.lang.Integer getZkClusterStateVersion()
    {
        java.lang.Integer $r1;
        org.apache.solr.common.cloud.ClusterState r0;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        $r1 = r0.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        return $r1;
    }

    public int hashCode()
    {
        org.apache.solr.common.cloud.ClusterState r0;
        java.util.Set $r3, $r4;
        java.lang.Integer $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        $r1 = r0.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        $i3 = virtualinvoke $r2.<java.lang.Integer: int hashCode()>();

     label2:
        $i2 = 31 + $i3;

        $i0 = 31 * $i2;

        $r3 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        if $r3 != null goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        $i4 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label4:
        $i1 = $i0 + $i4;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.solr.common.cloud.ClusterState r0, r4;
        java.util.Set $r8, $r9, $r10, $r11;
        java.lang.Integer $r5, $r6, $r7, $r12;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.solr.common.cloud.ClusterState;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.solr.common.cloud.ClusterState) r1;

        $r5 = r0.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        if $r5 != null goto label4;

        $r12 = r4.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        if $r12 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        $r6 = r4.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer zkClusterStateVersion>;

        $z0 = virtualinvoke $r7.<java.lang.Integer: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r8 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        if $r8 != null goto label6;

        $r11 = r4.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        if $r11 == null goto label7;

        return 0;

     label6:
        $r10 = r0.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        $r9 = r4.<org.apache.solr.common.cloud.ClusterState: java.util.Set liveNodes>;

        $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/solr/common/cloud/ClusterState;");

        <org.apache.solr.common.cloud.ClusterState: org.slf4j.Logger log> = $r0;

        return;
    }
}
