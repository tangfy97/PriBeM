public class org.apache.xml.utils.FastStringBuffer extends java.lang.Object
{
    static final int DEBUG_FORCE_INIT_BITS;
    static boolean DEBUG_FORCE_FIXED_CHUNKSIZE;
    public static final int SUPPRESS_LEADING_WS;
    public static final int SUPPRESS_TRAILING_WS;
    public static final int SUPPRESS_BOTH;
    private static final int CARRY_WS;
    int m_chunkBits;
    int m_maxChunkBits;
    int m_rebundleBits;
    int m_chunkSize;
    int m_chunkMask;
    char[][] m_array;
    int m_lastChunk;
    int m_firstFree;
    org.apache.xml.utils.FastStringBuffer m_innerFSB;
    static final char[] SINGLE_SPACE;

    public void <init>(int, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        char[][] $r1, $r3;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        char[] $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = 2;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = null;

        $z0 = <org.apache.xml.utils.FastStringBuffer: boolean DEBUG_FORCE_FIXED_CHUNKSIZE>;

        if $z0 == 0 goto label1;

        i6 = i5;

     label1:
        $r1 = newarray (char[])[16];

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r1;

        if i5 <= i6 goto label2;

        i5 = i6;

     label2:
        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = i5;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = i6;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = i0;

        $i1 = 1 << i5;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i1;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i3 = $i2 - 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i3;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r2 = newarray (char)[$i4];

        $r3[0] = $r2;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.apache.xml.utils.FastStringBuffer r0;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int,int)>(i0, i1, 2);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xml.utils.FastStringBuffer r0;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int,int)>(i0, 15, 2);

        return;
    }

    public void <init>()
    {
        org.apache.xml.utils.FastStringBuffer r0;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        specialinvoke r0.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int,int)>(10, 15, 2);

        return;
    }

    public final int size()
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i0 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i3 = $i1 << $i0;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public final int length()
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i0 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i3 = $i1 << $i0;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public final void reset()
    {
        org.apache.xml.utils.FastStringBuffer r0, $r1, r5;
        char[][] $r2, $r4;
        int $i0, $i1, $i2, $i3;
        char[] $r3;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        r5 = r0;

        goto label2;

     label1:
        r5 = r5.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

     label2:
        $r1 = r5.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r1 != null goto label1;

        $i0 = r5.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i0;

        $i1 = r5.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i1;

        $i2 = r5.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i2;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = null;

        $r2 = newmultiarray (char)[16][0];

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r2;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r3 = newarray (char)[$i3];

        $r4[0] = $r3;

        return;
    }

    public final void setLength(int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i2 = i0 >>> $i1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i2;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        if $i3 != 0 goto label1;

        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        specialinvoke $r2.<org.apache.xml.utils.FastStringBuffer: void setLength(int,org.apache.xml.utils.FastStringBuffer)>(i0, r0);

        goto label2;

     label1:
        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i5 = i0 & $i4;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i5;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        if $i6 != 0 goto label2;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        if $i7 <= 0 goto label2;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i9 = $i8 - 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i9;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i10;

     label2:
        return;
    }

    private final void setLength(int, org.apache.xml.utils.FastStringBuffer)
    {
        char[][] $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.xml.utils.FastStringBuffer r0, r1, $r3, $r4, $r5;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i2 = i0 >>> $i1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i2;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        if $i3 != 0 goto label1;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 == null goto label1;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        specialinvoke $r5.<org.apache.xml.utils.FastStringBuffer: void setLength(int,org.apache.xml.utils.FastStringBuffer)>(i0, r1);

        goto label2;

     label1:
        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i4;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = $i5;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = $i6;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i7;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i8;

        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r2;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r3;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i9;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i11 = i0 & $i10;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i11;

     label2:
        return;
    }

    public final java.lang.String toString()
    {
        org.apache.xml.utils.FastStringBuffer r0;
        java.lang.StringBuffer $r1, $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r3;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i0 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i3 = $i1 << $i0;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i4 = $i3 + $i2;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i4);

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int,int)>($r1, 0, 0, i4);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public final void append(char)
    {
        char[][] $r1, $r2, $r3, r5, $r6, $r8, $r10;
        org.apache.xml.utils.FastStringBuffer r0, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        char c10;
        char[] $r7, r9, $r11;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        c10 := @parameter0: char;

        $i0 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i2 = $i0 + 1;

        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        goto label1;

     label1:
        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        if $i4 >= $i3 goto label2;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i17 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r9 = $r8[$i17];

        goto label6;

     label2:
        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i5 = lengthof $r2;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i7 = $i6 + 1;

        if $i7 != i5 goto label3;

        $i16 = i5 + 16;

        r5 = newarray (char[])[$i16];

        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, i5);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r5;

     label3:
        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i9 = $i8 + 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i9;

        $r7 = $r3[$i9];

        r9 = $r7;

        if $r7 != null goto label5;

        $i13 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i12 = 1 << $i11;

        if $i13 != $i12 goto label4;

        $i15 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i14 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i15 >= $i14 goto label4;

        $r4 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r4;

     label4:
        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i18 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i19 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r11 = newarray (char)[$i19];

        $r10[$i18] = $r11;

        r9 = $r11;

     label5:
        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

     label6:
        $i20 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i21 = $i20 + 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i21;

        r9[$i20] = c10;

        return;
    }

    public final void append(java.lang.String)
    {
        char[][] $r2, $r3, $r5, $r6, r8, $r9, $r12;
        org.apache.xml.utils.FastStringBuffer r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, $i24, $i25;
        java.lang.String r0;
        char[] $r4, $r10, r11, $r13;

        r1 := @this: org.apache.xml.utils.FastStringBuffer;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i21 = $i0;

        if 0 != $i0 goto label2;

        return;

     label2:
        i22 = 0;

        $r2 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i1 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r11 = $r2[$i1];

        $i3 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i2 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i23 = $i3 - $i2;

        goto label8;

     label3:
        if i23 <= i21 goto label4;

        i23 = i21;

     label4:
        $i6 = i22 + i23;

        $r3 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i4 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r4 = $r3[$i4];

        $i5 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i22, $i6, $r4, $i5);

        $i18 = i21 - i23;

        i21 = $i18;

        i22 = i22 + i23;

        if $i18 <= 0 goto label8;

        $r5 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i7 = lengthof $r5;

        $i8 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i9 = $i8 + 1;

        if $i9 != i7 goto label5;

        $i17 = i7 + 16;

        r8 = newarray (char[])[$i17];

        $r9 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r8, 0, i7);

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r8;

     label5:
        $r6 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i10 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i11 = $i10 + 1;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i11;

        $r10 = $r6[$i11];

        if $r10 != null goto label7;

        $i14 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i12 = r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i13 = 1 << $i12;

        if $i14 != $i13 goto label6;

        $i16 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i15 = r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i16 >= $i15 goto label6;

        $r7 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r7.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r1);

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r7;

     label6:
        $r12 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i24 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i25 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r13 = newarray (char)[$i25];

        $r12[$i24] = $r13;

     label7:
        i23 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

     label8:
        if i21 > 0 goto label3;

        $i19 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i20 = $i19 + i23;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i20;

        return;
    }

    public final void append(java.lang.StringBuffer)
    {
        char[][] $r2, $r3, $r5, $r6, r8, $r9, $r12;
        org.apache.xml.utils.FastStringBuffer r1, $r7;
        java.lang.StringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, $i24, $i25;
        char[] $r4, $r10, r11, $r13;

        r1 := @this: org.apache.xml.utils.FastStringBuffer;

        r0 := @parameter0: java.lang.StringBuffer;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        i21 = $i0;

        if 0 != $i0 goto label2;

        return;

     label2:
        i22 = 0;

        $r2 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i1 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r11 = $r2[$i1];

        $i3 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i2 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i23 = $i3 - $i2;

        goto label8;

     label3:
        if i23 <= i21 goto label4;

        i23 = i21;

     label4:
        $i6 = i22 + i23;

        $r3 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i4 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r4 = $r3[$i4];

        $i5 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        virtualinvoke r0.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i22, $i6, $r4, $i5);

        $i18 = i21 - i23;

        i21 = $i18;

        i22 = i22 + i23;

        if $i18 <= 0 goto label8;

        $r5 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i7 = lengthof $r5;

        $i8 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i9 = $i8 + 1;

        if $i9 != i7 goto label5;

        $i17 = i7 + 16;

        r8 = newarray (char[])[$i17];

        $r9 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r8, 0, i7);

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r8;

     label5:
        $r6 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i10 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i11 = $i10 + 1;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i11;

        $r10 = $r6[$i11];

        if $r10 != null goto label7;

        $i14 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i12 = r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i13 = 1 << $i12;

        if $i14 != $i13 goto label6;

        $i16 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i15 = r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i16 >= $i15 goto label6;

        $r7 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r7.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r1);

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r7;

     label6:
        $r12 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i24 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i25 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r13 = newarray (char)[$i25];

        $r12[$i24] = $r13;

     label7:
        i23 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

     label8:
        if i21 > 0 goto label3;

        $i19 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i20 = $i19 + i23;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i20;

        return;
    }

    public final void append(char[], int, int)
    {
        char[][] $r1, $r3, $r5, $r6, r8, $r9, $r12;
        org.apache.xml.utils.FastStringBuffer r0, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, $i24, $i25;
        char[] r2, $r4, $r10, r11, $r13;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r2 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i21 = i0;

        if 0 != i0 goto label1;

        return;

     label1:
        i22 = i1;

        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r11 = $r1[$i2];

        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i23 = $i4 - $i3;

        goto label7;

     label2:
        if i23 <= i21 goto label3;

        i23 = i21;

     label3:
        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r4 = $r3[$i5];

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i22, $r4, $i6, i23);

        $i18 = i21 - i23;

        i21 = $i18;

        i22 = i22 + i23;

        if $i18 <= 0 goto label7;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i7 = lengthof $r5;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i9 = $i8 + 1;

        if $i9 != i7 goto label4;

        $i17 = i7 + 16;

        r8 = newarray (char[])[$i17];

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r8, 0, i7);

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r8;

     label4:
        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i11 = $i10 + 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i11;

        $r10 = $r6[$i11];

        if $r10 != null goto label6;

        $i14 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i12 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i13 = 1 << $i12;

        if $i14 != $i13 goto label5;

        $i16 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i15 = r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i16 >= $i15 goto label5;

        $r7 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r7.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r0);

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r7;

     label5:
        $r12 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i24 = r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i25 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r13 = newarray (char)[$i25];

        $r12[$i24] = $r13;

     label6:
        i23 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

     label7:
        if i21 > 0 goto label2;

        $i19 = r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i20 = $i19 + i23;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i20;

        return;
    }

    public final void append(org.apache.xml.utils.FastStringBuffer)
    {
        char[][] $r2, $r3, $r4, $r7, $r8, r10, $r11, $r13, $r14, $r18;
        org.apache.xml.utils.FastStringBuffer r0, r1, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, $i38, $i39;
        char[] $r5, $r6, $r12, $r15, $r16, r17, $r19;

        r1 := @this: org.apache.xml.utils.FastStringBuffer;

        r0 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        if r0 != null goto label01;

        return;

     label01:
        $i0 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: int length()>();

        i34 = $i0;

        if 0 != $i0 goto label02;

        return;

     label02:
        i35 = 0;

        $r2 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i1 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        r17 = $r2[$i1];

        $i3 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i2 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        i36 = $i3 - $i2;

        goto label10;

     label03:
        if i36 <= i34 goto label04;

        i36 = i34;

     label04:
        $i4 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i5 = i35 + $i4;

        $i7 = $i5 - 1;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i29 = $i7 >>> $i6;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i30 = i35 & $i8;

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i31 = $i9 - $i30;

        i37 = $i31;

        if $i31 <= i36 goto label05;

        i37 = i36;

     label05:
        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r6 = $r3[$i29];

        $r4 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i10 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r5 = $r4[$i10];

        $i11 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i30, $r5, $i11, i37);

        if i37 == i36 goto label06;

        $r13 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i23 = $i29 + 1;

        $r16 = $r13[$i23];

        $r14 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i24 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $r15 = $r14[$i24];

        $i25 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i27 = $i25 + i37;

        $i26 = i36 - i37;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, $r15, $i27, $i26);

     label06:
        $i28 = i34 - i36;

        i34 = $i28;

        i35 = i35 + i36;

        if $i28 <= 0 goto label10;

        $r7 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        i12 = lengthof $r7;

        $i13 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i14 = $i13 + 1;

        if $i14 != i12 goto label07;

        $i22 = i12 + 16;

        r10 = newarray (char[])[$i22];

        $r11 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, 0, i12);

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = r10;

     label07:
        $r8 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i15 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i16 = $i15 + 1;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i16;

        $r12 = $r8[$i16];

        if $r12 != null goto label09;

        $i19 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i17 = r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i18 = 1 << $i17;

        if $i19 != $i18 goto label08;

        $i21 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i20 = r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        if $i21 >= $i20 goto label08;

        $r9 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r9.<org.apache.xml.utils.FastStringBuffer: void <init>(org.apache.xml.utils.FastStringBuffer)>(r1);

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r9;

     label08:
        $r18 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $i38 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i39 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $r19 = newarray (char)[$i39];

        $r18[$i38] = $r19;

     label09:
        i36 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

     label10:
        if i34 > 0 goto label03;

        $i32 = r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree>;

        $i33 = $i32 + i36;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i33;

        return;
    }

    public boolean isWhitespace(int, int)
    {
        char[][] $r1;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, $i9;
        boolean z0;
        org.apache.xml.utils.FastStringBuffer r0, $r3, $r4;
        char[] $r2;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i6 = i0 >>> $i1;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i7 = i0 & $i2;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        i8 = $i3 - i7;

        goto label7;

     label1:
        if i5 > i8 goto label2;

        $i9 = i5;

        goto label3;

     label2:
        $i9 = i8;

     label3:
        i4 = $i9;

        if i6 != 0 goto label4;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r3 == null goto label4;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        z0 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>(i7, $i9);

        goto label5;

     label4:
        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r2 = $r1[i6];

        z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char[],int,int)>($r2, i7, i4);

     label5:
        if z0 != 0 goto label6;

        return 0;

     label6:
        i5 = i5 - i4;

        i6 = i6 + 1;

        i7 = 0;

        i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

     label7:
        if i5 > 0 goto label1;

        return 1;
    }

    public java.lang.String getString(int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r4;
        java.lang.StringBuffer $r1, $r2;
        int i0, $i1, i2, $i3, i4, i5, $i6, $i7;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i2 = i0 & $i1;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i4 = i0 >>> $i3;

        $i7 = i2 + i5;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        if $i7 >= $i6 goto label1;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.String getOneChunkString(int,int,int)>(i4, i2, i5);

        return $r5;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i5);

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int,int)>($r1, i4, i2, i5);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected java.lang.String getOneChunkString(int, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r1;
        int i0, i1, i2;
        char[] $r3;
        java.lang.String $r0;
        char[][] $r2;

        r1 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r3 = $r2[i0];

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r3, i1, i2);

        return $r0;
    }

    java.lang.StringBuffer getString(java.lang.StringBuffer, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        java.lang.StringBuffer r1, $r2;
        int i0, $i1, $i2, i3, $i4, $i5;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i5 = i0 >>> $i1;

        $i2 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i4 = i0 & $i2;

        $r2 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int,int)>(r1, $i5, $i4, i3);

        return $r2;
    }

    java.lang.StringBuffer getString(java.lang.StringBuffer, int, int, int)
    {
        char[][] $r2, $r6;
        java.lang.StringBuffer r1;
        int i0, $i1, $i2, i3, $i4, i5, $i6, i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        org.apache.xml.utils.FastStringBuffer r0, $r4, $r5, $r8, $r9;
        char[] $r3, $r7;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i16 := @parameter2: int;

        i3 := @parameter3: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i2 = i0 << $i1;

        $i4 = $i2 + i16;

        i5 = $i4 + i3;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i7 = i5 >>> $i6;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i9 = i5 & $i8;

        i17 = i0;

        goto label4;

     label1:
        if i17 != 0 goto label2;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i12 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i13 = $i12 - i16;

        virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int)>(r1, i16, $i13);

        goto label3;

     label2:
        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r3 = $r2[i17];

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i11 = $i10 - i16;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r3, i16, $i11);

     label3:
        i16 = 0;

        i17 = i17 + 1;

     label4:
        if i17 < i7 goto label1;

        if i7 != 0 goto label5;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r8 == null goto label5;

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i15 = i9 - i16;

        virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: java.lang.StringBuffer getString(java.lang.StringBuffer,int,int)>(r1, i16, $i15);

        goto label6;

     label5:
        if i9 <= i16 goto label6;

        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r7 = $r6[i7];

        $i14 = i9 - i16;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r7, i16, $i14);

     label6:
        return r1;
    }

    public char charAt(int)
    {
        org.apache.xml.utils.FastStringBuffer r0, $r3, $r4;
        char $c5, $c8;
        char[][] $r1;
        int i0, $i1, i2, $i3, $i4, $i6, $i7;
        char[] $r2;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i2 = i0 >>> $i1;

        if i2 != 0 goto label1;

        $r3 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i7 = i0 & $i6;

        $c8 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>($i7);

        return $c8;

     label1:
        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r2 = $r1[i2];

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i4 = i0 & $i3;

        $c5 = $r2[$i4];

        return $c5;
    }

    public void sendSAXcharacters(org.xml.sax.ContentHandler, int, int) throws org.xml.sax.SAXException
    {
        char[][] $r2, $r6, $r11;
        org.apache.xml.utils.FastStringBuffer r0, $r4, $r5, $r8, $r9, $r10;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        org.xml.sax.ContentHandler r1;
        char[] $r3, $r7, $r12;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        $i1 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i2 = i0 >>> $i1;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i18 = i0 & $i3;

        $i6 = i18 + i4;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        if $i6 >= $i5 goto label1;

        $r10 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r10 != null goto label1;

        $r11 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r12 = $r11[i2];

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r12, i18, i4);

        return;

     label1:
        $i15 = i0 + i4;

        $i7 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i16 = $i15 >>> $i7;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        $i17 = $i15 & $i8;

        i19 = i2;

        goto label5;

     label2:
        if i19 != 0 goto label3;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 == null goto label3;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i11 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i12 = $i11 - i18;

        virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i18, $i12);

        goto label4;

     label3:
        $r2 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r3 = $r2[i19];

        $i9 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i10 = $i9 - i18;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r3, i18, $i10);

     label4:
        i18 = 0;

        i19 = i19 + 1;

     label5:
        if i19 < $i16 goto label2;

        if $i16 != 0 goto label6;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r8 == null goto label6;

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i14 = $i17 - i18;

        virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i18, $i14);

        goto label7;

     label6:
        if $i17 <= i18 goto label7;

        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r7 = $r6[$i16];

        $i13 = $i17 - i18;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r7, i18, $i13);

     label7:
        return;
    }

    public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler, int, int) throws org.xml.sax.SAXException
    {
        char[][] $r1, $r6;
        int i0, i1, i2, $i3, i4, $i5, $i6, i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19;
        org.xml.sax.ContentHandler r2;
        org.apache.xml.utils.FastStringBuffer r0, $r4, $r5, $r8, $r9;
        char[] $r3, $r7;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r2 := @parameter0: org.xml.sax.ContentHandler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i17 = 1;

        i2 = i0 + i1;

        $i3 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i4 = i0 >>> $i3;

        $i5 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i18 = i0 & $i5;

        $i6 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        i7 = i2 >>> $i6;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        i9 = i2 & $i8;

        i19 = i4;

        goto label4;

     label1:
        if i19 != 0 goto label2;

        $r4 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i12 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i13 = $i12 - i18;

        i17 = virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r2, i18, $i13);

        goto label3;

     label2:
        $r1 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r3 = $r1[i19];

        $i10 = r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i11 = $i10 - i18;

        i17 = staticinvoke <org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)>($r3, i18, $i11, r2, i17);

     label3:
        i18 = 0;

        i19 = i19 + 1;

     label4:
        if i19 < i7 goto label1;

        if i7 != 0 goto label5;

        $r8 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        if $r8 == null goto label5;

        $r9 = r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        $i16 = i9 - i18;

        i17 = virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r2, i18, $i16);

        goto label6;

     label5:
        if i9 <= i18 goto label6;

        $r6 = r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        $r7 = $r6[i7];

        $i15 = i9 - i18;

        $i14 = i17 | 2;

        i17 = staticinvoke <org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)>($r7, i18, $i15, r2, $i14);

     label6:
        return i17;
    }

    static int sendNormalizedSAXcharacters(char[], int, int, org.xml.sax.ContentHandler, int) throws org.xml.sax.SAXException
    {
        byte $b16;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, $i9, $i11, $i12, $i14, i15;
        org.xml.sax.ContentHandler r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6;
        char $c8, $c10, $c13;
        char[] r0, $r2;

        r0 := @parameter0: char[];

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        r1 := @parameter3: org.xml.sax.ContentHandler;

        i0 := @parameter4: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z0 = $z4;

        $i2 = i0 & 4;

        if $i2 == 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z6 = $z5;

        $i3 = i0 & 2;

        if $i3 == 0 goto label05;

        goto label05;

     label05:
        i15 = i4;

        $i14 = i4 + i5;

        if z0 == 0 goto label18;

        goto label07;

     label06:
        i15 = i15 + 1;

     label07:
        if i15 >= $i14 goto label08;

        $c13 = r0[i15];

        $z3 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c13);

        if $z3 != 0 goto label06;

     label08:
        if i15 != $i14 goto label18;

        return i0;

     label09:
        i6 = i15;

        goto label11;

     label10:
        i15 = i15 + 1;

     label11:
        if i15 >= $i14 goto label12;

        $c10 = r0[i15];

        $z2 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c10);

        if $z2 == 0 goto label10;

     label12:
        if i6 == i15 goto label14;

        if z6 == 0 goto label13;

        $r2 = <org.apache.xml.utils.FastStringBuffer: char[] SINGLE_SPACE>;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r2, 0, 1);

        z6 = 0;

     label13:
        $i9 = i15 - i6;

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>(r0, i6, $i9);

     label14:
        i7 = i15;

        goto label16;

     label15:
        i15 = i15 + 1;

     label16:
        if i15 >= $i14 goto label17;

        $c8 = r0[i15];

        $z1 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c8);

        if $z1 != 0 goto label15;

     label17:
        if i7 == i15 goto label18;

        z6 = 1;

     label18:
        if i15 < $i14 goto label09;

        if z6 == 0 goto label19;

        $b16 = 4;

        goto label20;

     label19:
        $b16 = 0;

     label20:
        $i11 = i0 & 2;

        $i12 = $b16 | $i11;

        return $i12;
    }

    public static void sendNormalizedSAXcharacters(char[], int, int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        int i0, i1;
        char[] r0;
        org.xml.sax.ContentHandler r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.xml.sax.ContentHandler;

        staticinvoke <org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)>(r0, i0, i1, r1, 3);

        return;
    }

    public void sendSAXComment(org.xml.sax.ext.LexicalHandler, int, int) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler r2;
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, i1;
        char[] $r3;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r2 := @parameter0: org.xml.sax.ext.LexicalHandler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i0, i1);

        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        interfaceinvoke r2.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r3, 0, i1);

        return;
    }

    private void getChars(int, int, char[], int)
    {
        org.apache.xml.utils.FastStringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        return;
    }

    private void <init>(org.apache.xml.utils.FastStringBuffer)
    {
        char[][] $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.apache.xml.utils.FastStringBuffer r0, r1, $r3;

        r0 := @this: org.apache.xml.utils.FastStringBuffer;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = 15;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = 2;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = null;

        $i0 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i0;

        $i1 = r1.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_maxChunkBits> = $i1;

        $i2 = r1.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits> = $i2;

        $i3 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i3;

        $i4 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i4;

        $r2 = r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array>;

        r0.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r2;

        $r3 = r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB>;

        r0.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = $r3;

        $i5 = r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk>;

        $i6 = $i5 - 1;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = $i6;

        $i7 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        r0.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = $i7;

        $r4 = newarray (char[])[16];

        r1.<org.apache.xml.utils.FastStringBuffer: char[][] m_array> = $r4;

        r1.<org.apache.xml.utils.FastStringBuffer: org.apache.xml.utils.FastStringBuffer m_innerFSB> = r0;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_lastChunk> = 1;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_firstFree> = 0;

        $i9 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i8 = r0.<org.apache.xml.utils.FastStringBuffer: int m_rebundleBits>;

        $i10 = $i9 + $i8;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits> = $i10;

        $i11 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkBits>;

        $i12 = 1 << $i11;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize> = $i12;

        $i13 = r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkSize>;

        $i14 = $i13 - 1;

        r1.<org.apache.xml.utils.FastStringBuffer: int m_chunkMask> = $i14;

        return;
    }

    static void <clinit>()
    {
        char[] $r0;

        <org.apache.xml.utils.FastStringBuffer: int CARRY_WS> = 4;

        <org.apache.xml.utils.FastStringBuffer: int SUPPRESS_BOTH> = 3;

        <org.apache.xml.utils.FastStringBuffer: int SUPPRESS_TRAILING_WS> = 2;

        <org.apache.xml.utils.FastStringBuffer: int SUPPRESS_LEADING_WS> = 1;

        <org.apache.xml.utils.FastStringBuffer: int DEBUG_FORCE_INIT_BITS> = 0;

        <org.apache.xml.utils.FastStringBuffer: boolean DEBUG_FORCE_FIXED_CHUNKSIZE> = 1;

        $r0 = newarray (char)[1];

        $r0[0] = 32;

        <org.apache.xml.utils.FastStringBuffer: char[] SINGLE_SPACE> = $r0;

        return;
    }
}
