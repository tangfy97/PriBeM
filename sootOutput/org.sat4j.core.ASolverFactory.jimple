public abstract class org.sat4j.core.ASolverFactory extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.sat4j.core.ASolverFactory r0;

        r0 := @this: org.sat4j.core.ASolverFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String[] solverNames()
    {
        org.sat4j.core.ASolverFactory r1;
        java.lang.Class[] $r5;
        java.lang.String[] r9;
        java.lang.reflect.Method[] $r3;
        java.util.ArrayList $r0;
        int i0, $i1, $i2, i3;
        java.lang.Class $r2;
        java.lang.String $r6, $r7, $r8;
        java.lang.reflect.Method r4;
        boolean $z0;

        r1 := @this: org.sat4j.core.ASolverFactory;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r4 = $r3[i3];

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r5;

        if $i2 != 0 goto label2;

        $r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("new");

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        r9 = newarray (java.lang.String)[$i1];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        return r9;
    }

    public org.sat4j.specs.ISolver createSolverByName(java.lang.String)
    {
        java.lang.Object[] $r8;
        org.sat4j.core.ASolverFactory r0;
        java.lang.NoSuchMethodException $r17;
        org.sat4j.specs.ISolver $r10;
        java.lang.SecurityException $r23;
        java.lang.String r4, $r6, $r13, $r16, $r19, $r22, $r25;
        java.lang.reflect.Method $r7;
        java.io.PrintStream $r12, $r15, $r18, $r21, $r24;
        java.lang.IllegalAccessException $r14;
        java.lang.Class[] r26;
        java.lang.IllegalArgumentException $r20;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.Class $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.Object $r9;

        r0 := @this: org.sat4j.core.ASolverFactory;

        r4 := @parameter0: java.lang.String;

     label1:
        r26 = newarray (java.lang.Class)[0];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r6, r26);

        $r8 = (java.lang.Object[]) null;

        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        $r10 = (org.sat4j.specs.ISolver) $r9;

     label2:
        return $r10;

     label3:
        $r23 := @caughtexception;

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r25 = virtualinvoke $r23.<java.lang.SecurityException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r25);

        goto label8;

     label4:
        $r20 := @caughtexception;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r22 = virtualinvoke $r20.<java.lang.IllegalArgumentException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r22);

        goto label8;

     label5:
        $r17 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r19 = virtualinvoke $r17.<java.lang.NoSuchMethodException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r19);

        goto label8;

     label6:
        $r14 := @caughtexception;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r16 = virtualinvoke $r14.<java.lang.IllegalAccessException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r16);

        goto label8;

     label7:
        $r11 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r13 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label8:
        return null;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
    }

    public abstract org.sat4j.specs.ISolver defaultSolver();

    public abstract org.sat4j.specs.ISolver lightSolver();

    public static void <clinit>()
    {
        <org.sat4j.core.ASolverFactory: long serialVersionUID> = 1L;

        return;
    }
}
