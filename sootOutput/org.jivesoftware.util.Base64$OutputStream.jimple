public class org.jivesoftware.util.Base64$OutputStream extends java.io.FilterOutputStream
{
    private boolean encode;
    private int position;
    private byte[] buffer;
    private int bufferLength;
    private int lineLength;
    private boolean breakLines;
    private byte[] b4;
    private boolean suspendEncoding;
    private int options;
    private byte[] alphabet;
    private byte[] decodabet;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.jivesoftware.util.Base64$OutputStream r0;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.jivesoftware.util.Base64$OutputStream: void <init>(java.io.OutputStream,int)>(r1, 1);

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        java.io.OutputStream r1;
        byte[] $r2, $r3, $r4, $r5;
        org.jivesoftware.util.Base64$OutputStream r0;
        byte $b4;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        $i1 = i0 & 8;

        if $i1 == 8 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.jivesoftware.util.Base64$OutputStream: boolean breakLines> = $z1;

        $i2 = i0 & 1;

        if $i2 != 1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r0.<org.jivesoftware.util.Base64$OutputStream: boolean encode> = $z2;

        $z0 = r0.<org.jivesoftware.util.Base64$OutputStream: boolean encode>;

        if $z0 == 0 goto label5;

        $b4 = 3;

        goto label6;

     label5:
        $b4 = 4;

     label6:
        r0.<org.jivesoftware.util.Base64$OutputStream: int bufferLength> = $b4;

        $i3 = r0.<org.jivesoftware.util.Base64$OutputStream: int bufferLength>;

        $r2 = newarray (byte)[$i3];

        r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer> = $r2;

        r0.<org.jivesoftware.util.Base64$OutputStream: int position> = 0;

        r0.<org.jivesoftware.util.Base64$OutputStream: int lineLength> = 0;

        r0.<org.jivesoftware.util.Base64$OutputStream: boolean suspendEncoding> = 0;

        $r3 = newarray (byte)[4];

        r0.<org.jivesoftware.util.Base64$OutputStream: byte[] b4> = $r3;

        r0.<org.jivesoftware.util.Base64$OutputStream: int options> = i0;

        $r4 = staticinvoke <org.jivesoftware.util.Base64: byte[] access$000(int)>(i0);

        r0.<org.jivesoftware.util.Base64$OutputStream: byte[] alphabet> = $r4;

        $r5 = staticinvoke <org.jivesoftware.util.Base64: byte[] access$100(int)>(i0);

        r0.<org.jivesoftware.util.Base64$OutputStream: byte[] decodabet> = $r5;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r13;
        org.jivesoftware.util.Base64$OutputStream r0;
        byte $b2, $b4, $b7, $b14;
        boolean $z0, $z1, $z2;
        int i0, $i1, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i27;
        java.io.OutputStream $r8, $r12, $r14, $r15;
        java.io.IOException $r16;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.jivesoftware.util.Base64$OutputStream: boolean suspendEncoding>;

        if $z0 == 0 goto label1;

        $r15 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r15.<java.io.OutputStream: void write(int)>(i0);

        return;

     label1:
        $z1 = r0.<org.jivesoftware.util.Base64$OutputStream: boolean encode>;

        if $z1 == 0 goto label3;

        $r9 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer>;

        $i12 = r0.<org.jivesoftware.util.Base64$OutputStream: int position>;

        $i13 = $i12 + 1;

        r0.<org.jivesoftware.util.Base64$OutputStream: int position> = $i13;

        $b14 = (byte) i0;

        $r9[$i12] = $b14;

        $i16 = r0.<org.jivesoftware.util.Base64$OutputStream: int position>;

        $i15 = r0.<org.jivesoftware.util.Base64$OutputStream: int bufferLength>;

        if $i16 < $i15 goto label5;

        $r12 = r0.<org.jivesoftware.util.Base64$OutputStream: java.io.OutputStream out>;

        $r11 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] b4>;

        $r10 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer>;

        $i18 = r0.<org.jivesoftware.util.Base64$OutputStream: int bufferLength>;

        $i17 = r0.<org.jivesoftware.util.Base64$OutputStream: int options>;

        $r13 = staticinvoke <org.jivesoftware.util.Base64: byte[] access$400(byte[],byte[],int,int)>($r11, $r10, $i18, $i17);

        virtualinvoke $r12.<java.io.OutputStream: void write(byte[])>($r13);

        $i19 = r0.<org.jivesoftware.util.Base64$OutputStream: int lineLength>;

        $i20 = $i19 + 4;

        r0.<org.jivesoftware.util.Base64$OutputStream: int lineLength> = $i20;

        $z2 = r0.<org.jivesoftware.util.Base64$OutputStream: boolean breakLines>;

        if $z2 == 0 goto label2;

        $i21 = r0.<org.jivesoftware.util.Base64$OutputStream: int lineLength>;

        if $i21 < 76 goto label2;

        $r14 = r0.<org.jivesoftware.util.Base64$OutputStream: java.io.OutputStream out>;

        virtualinvoke $r14.<java.io.OutputStream: void write(int)>(10);

        r0.<org.jivesoftware.util.Base64$OutputStream: int lineLength> = 0;

     label2:
        r0.<org.jivesoftware.util.Base64$OutputStream: int position> = 0;

        goto label5;

     label3:
        $r1 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] decodabet>;

        $i1 = i0 & 127;

        $b2 = $r1[$i1];

        $i22 = (int) $b2;

        $i24 = (int) -5;

        if $i22 <= $i24 goto label4;

        $r4 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer>;

        $i5 = r0.<org.jivesoftware.util.Base64$OutputStream: int position>;

        $i6 = $i5 + 1;

        r0.<org.jivesoftware.util.Base64$OutputStream: int position> = $i6;

        $b7 = (byte) i0;

        $r4[$i5] = $b7;

        $i9 = r0.<org.jivesoftware.util.Base64$OutputStream: int position>;

        $i8 = r0.<org.jivesoftware.util.Base64$OutputStream: int bufferLength>;

        if $i9 < $i8 goto label5;

        $r6 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer>;

        $r5 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] b4>;

        $i10 = r0.<org.jivesoftware.util.Base64$OutputStream: int options>;

        $i11 = staticinvoke <org.jivesoftware.util.Base64: int access$300(byte[],int,byte[],int,int)>($r6, 0, $r5, 0, $i10);

        $r8 = r0.<org.jivesoftware.util.Base64$OutputStream: java.io.OutputStream out>;

        $r7 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] b4>;

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[],int,int)>($r7, 0, $i11);

        r0.<org.jivesoftware.util.Base64$OutputStream: int position> = 0;

        goto label5;

     label4:
        $r2 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] decodabet>;

        $i3 = i0 & 127;

        $b4 = $r2[$i3];

        $i25 = (int) $b4;

        $i27 = (int) -5;

        if $i25 == $i27 goto label5;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Invalid character in Base64 data.");

        throw $r16;

     label5:
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        org.jivesoftware.util.Base64$OutputStream r0;
        byte $b3;
        int i0, i1, $i2, i4, $i5;
        boolean $z0;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.jivesoftware.util.Base64$OutputStream: boolean suspendEncoding>;

        if $z0 == 0 goto label1;

        $r2 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i1, i0);

        return;

     label1:
        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $i2 = i1 + i4;

        $b3 = r1[$i2];

        $i5 = (int) $b3;

        virtualinvoke r0.<org.jivesoftware.util.Base64$OutputStream: void write(int)>($i5);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public void flushBase64() throws java.io.IOException
    {
        java.io.OutputStream $r4;
        byte[] $r2, $r3, $r5;
        java.io.IOException $r1;
        org.jivesoftware.util.Base64$OutputStream r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        $i0 = r0.<org.jivesoftware.util.Base64$OutputStream: int position>;

        if $i0 <= 0 goto label2;

        $z0 = r0.<org.jivesoftware.util.Base64$OutputStream: boolean encode>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jivesoftware.util.Base64$OutputStream: java.io.OutputStream out>;

        $r3 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] b4>;

        $r2 = r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer>;

        $i2 = r0.<org.jivesoftware.util.Base64$OutputStream: int position>;

        $i1 = r0.<org.jivesoftware.util.Base64$OutputStream: int options>;

        $r5 = staticinvoke <org.jivesoftware.util.Base64: byte[] access$400(byte[],byte[],int,int)>($r3, $r2, $i2, $i1);

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5);

        r0.<org.jivesoftware.util.Base64$OutputStream: int position> = 0;

        goto label2;

     label1:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Base64 input not properly padded.");

        throw $r1;

     label2:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.jivesoftware.util.Base64$OutputStream r0;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        virtualinvoke r0.<org.jivesoftware.util.Base64$OutputStream: void flushBase64()>();

        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

        r0.<org.jivesoftware.util.Base64$OutputStream: byte[] buffer> = null;

        r0.<org.jivesoftware.util.Base64$OutputStream: java.io.OutputStream out> = null;

        return;
    }

    public void suspendEncoding() throws java.io.IOException
    {
        org.jivesoftware.util.Base64$OutputStream r0;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        virtualinvoke r0.<org.jivesoftware.util.Base64$OutputStream: void flushBase64()>();

        r0.<org.jivesoftware.util.Base64$OutputStream: boolean suspendEncoding> = 1;

        return;
    }

    public void resumeEncoding()
    {
        org.jivesoftware.util.Base64$OutputStream r0;

        r0 := @this: org.jivesoftware.util.Base64$OutputStream;

        r0.<org.jivesoftware.util.Base64$OutputStream: boolean suspendEncoding> = 0;

        return;
    }
}
