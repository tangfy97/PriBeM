public class org.springframework.remoting.caucho.HessianExporter extends org.springframework.remoting.support.RemoteExporter implements org.springframework.beans.factory.InitializingBean
{
    public static final java.lang.String CONTENT_TYPE_HESSIAN;
    private com.caucho.hessian.io.SerializerFactory serializerFactory;
    private org.apache.commons.logging.Log debugLogger;
    private com.caucho.hessian.server.HessianSkeleton skeleton;

    public void <init>()
    {
        com.caucho.hessian.io.SerializerFactory $r1;
        org.springframework.remoting.caucho.HessianExporter r0;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        specialinvoke r0.<org.springframework.remoting.support.RemoteExporter: void <init>()>();

        $r1 = new com.caucho.hessian.io.SerializerFactory;

        specialinvoke $r1.<com.caucho.hessian.io.SerializerFactory: void <init>()>();

        r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.io.SerializerFactory serializerFactory> = $r1;

        return;
    }

    public void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)
    {
        com.caucho.hessian.io.SerializerFactory r1, $r2;
        org.springframework.remoting.caucho.HessianExporter r0;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        r1 := @parameter0: com.caucho.hessian.io.SerializerFactory;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new com.caucho.hessian.io.SerializerFactory;

        specialinvoke $r2.<com.caucho.hessian.io.SerializerFactory: void <init>()>();

     label2:
        r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.io.SerializerFactory serializerFactory> = $r2;

        return;
    }

    public void setSendCollectionType(boolean)
    {
        com.caucho.hessian.io.SerializerFactory $r1;
        org.springframework.remoting.caucho.HessianExporter r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.io.SerializerFactory serializerFactory>;

        virtualinvoke $r1.<com.caucho.hessian.io.SerializerFactory: void setSendCollectionType(boolean)>(z0);

        return;
    }

    public void setDebug(boolean)
    {
        org.apache.commons.logging.Log $r1;
        org.springframework.remoting.caucho.HessianExporter r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.springframework.remoting.caucho.HessianExporter: org.apache.commons.logging.Log logger>;

        goto label2;

     label1:
        $r1 = null;

     label2:
        r0.<org.springframework.remoting.caucho.HessianExporter: org.apache.commons.logging.Log debugLogger> = $r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.caucho.HessianExporter r0;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: void prepare()>();

        return;
    }

    public void prepare()
    {
        java.lang.Object $r2;
        java.lang.Class $r3;
        com.caucho.hessian.server.HessianSkeleton $r1;
        org.springframework.remoting.caucho.HessianExporter r0;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: void checkService()>();

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: void checkServiceInterface()>();

        $r1 = new com.caucho.hessian.server.HessianSkeleton;

        $r2 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: java.lang.Object getProxyForService()>();

        $r3 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: java.lang.Class getServiceInterface()>();

        specialinvoke $r1.<com.caucho.hessian.server.HessianSkeleton: void <init>(java.lang.Object,java.lang.Class)>($r2, $r3);

        r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.server.HessianSkeleton skeleton> = $r1;

        return;
    }

    public void invoke(java.io.InputStream, java.io.OutputStream) throws java.lang.Throwable
    {
        java.io.OutputStream r3;
        com.caucho.hessian.server.HessianSkeleton $r1, $r4;
        org.springframework.remoting.caucho.HessianExporter r0;
        java.io.InputStream r2;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.OutputStream;

        $r1 = r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.server.HessianSkeleton skeleton>;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "Hessian exporter has not been initialized");

        $r4 = r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.server.HessianSkeleton skeleton>;

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: void doInvoke(com.caucho.hessian.server.HessianSkeleton,java.io.InputStream,java.io.OutputStream)>($r4, r2, r3);

        return;
    }

    protected void doInvoke(com.caucho.hessian.server.HessianSkeleton, java.io.InputStream, java.io.OutputStream) throws java.lang.Throwable
    {
        java.io.BufferedInputStream $r48;
        com.caucho.hessian.io.HessianDebugInputStream $r46;
        java.io.PrintWriter $r45;
        com.caucho.hessian.io.Hessian2Input $r51, $r53;
        com.caucho.hessian.io.Hessian2Output $r52, $r54, $r56;
        java.lang.StringBuilder $r7, $r21, $r22, $r23, $r24, $r49, $r58;
        java.lang.ClassLoader $r1;
        java.lang.Throwable $r33, $r38;
        com.caucho.hessian.io.HessianOutput $r57;
        com.caucho.hessian.io.AbstractHessianInput $r67, $r71, $r77, $r79, $r81, $r85;
        java.lang.String $r8, $r25;
        java.io.IOException $r34, $r35, $r36, $r37, $r50, $r59;
        com.caucho.hessian.io.SerializerFactory $r12, $r13, $r43;
        com.caucho.hessian.server.HessianSkeleton r11;
        com.caucho.hessian.io.AbstractHessianOutput $r78, $r80, $r83, $r87;
        boolean $z0, $z1;
        com.caucho.hessian.io.HessianInput $r55;
        org.springframework.util.CommonsLogWriter $r44;
        org.springframework.remoting.caucho.HessianExporter r0;
        int $i0, $i1, $i2, $i3;
        com.caucho.hessian.io.HessianDebugOutputStream $r47;
        java.io.OutputStream r3, $r66, $r70, $r75, $r76, $r84, $r88;
        org.apache.commons.logging.Log $r4, $r27, $r30;
        java.lang.Object r39, r40, r41, r42;
        java.io.InputStream r2, $r60, $r61, $r62, $r63, $r64, $r65, $r68, $r69, $r72, $r73, $r74, $r82, $r86;

        r0 := @this: org.springframework.remoting.caucho.HessianExporter;

        r11 := @parameter0: com.caucho.hessian.server.HessianSkeleton;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: java.lang.ClassLoader overrideThreadContextClassLoader()>();

     label01:
        r39 = r2;

        r40 = r3;

        $r4 = r0.<org.springframework.remoting.caucho.HessianExporter: org.apache.commons.logging.Log debugLogger>;

        if $r4 == null goto label02;

        $r27 = r0.<org.springframework.remoting.caucho.HessianExporter: org.apache.commons.logging.Log debugLogger>;

        $z0 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r45 = new java.io.PrintWriter;

        $r44 = new org.springframework.util.CommonsLogWriter;

        $r30 = r0.<org.springframework.remoting.caucho.HessianExporter: org.apache.commons.logging.Log debugLogger>;

        specialinvoke $r44.<org.springframework.util.CommonsLogWriter: void <init>(org.apache.commons.logging.Log)>($r30);

        specialinvoke $r45.<java.io.PrintWriter: void <init>(java.io.Writer)>($r44);

        $r46 = new com.caucho.hessian.io.HessianDebugInputStream;

        specialinvoke $r46.<com.caucho.hessian.io.HessianDebugInputStream: void <init>(java.io.InputStream,java.io.PrintWriter)>(r2, $r45);

        virtualinvoke $r46.<com.caucho.hessian.io.HessianDebugInputStream: void startTop2()>();

        $r47 = new com.caucho.hessian.io.HessianDebugOutputStream;

        specialinvoke $r47.<com.caucho.hessian.io.HessianDebugOutputStream: void <init>(java.io.OutputStream,java.io.PrintWriter)>(r3, $r45);

        virtualinvoke $r47.<com.caucho.hessian.io.HessianDebugOutputStream: void startTop2()>();

        r39 = $r46;

        r40 = $r47;

     label02:
        $r60 = (java.io.InputStream) r39;

        $z1 = virtualinvoke $r60.<java.io.InputStream: boolean markSupported()>();

        if $z1 != 0 goto label03;

        $r48 = new java.io.BufferedInputStream;

        $r61 = (java.io.InputStream) r39;

        specialinvoke $r48.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r61);

        r39 = $r48;

        virtualinvoke $r48.<java.io.InputStream: void mark(int)>(1);

     label03:
        $r62 = (java.io.InputStream) r39;

        $i0 = virtualinvoke $r62.<java.io.InputStream: int read()>();

        if $i0 != 72 goto label05;

        $r63 = (java.io.InputStream) r39;

        $i2 = virtualinvoke $r63.<java.io.InputStream: int read()>();

        $r64 = (java.io.InputStream) r39;

        $i3 = virtualinvoke $r64.<java.io.InputStream: int read()>();

        if $i2 == 2 goto label04;

        $r50 = new java.io.IOException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("Version ");

        $r21 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not understood");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r50;

     label04:
        $r51 = new com.caucho.hessian.io.Hessian2Input;

        $r65 = (java.io.InputStream) r39;

        specialinvoke $r51.<com.caucho.hessian.io.Hessian2Input: void <init>(java.io.InputStream)>($r65);

        r41 = $r51;

        $r52 = new com.caucho.hessian.io.Hessian2Output;

        $r66 = (java.io.OutputStream) r40;

        specialinvoke $r52.<com.caucho.hessian.io.Hessian2Output: void <init>(java.io.OutputStream)>($r66);

        r42 = $r52;

        $r67 = (com.caucho.hessian.io.AbstractHessianInput) $r51;

        virtualinvoke $r67.<com.caucho.hessian.io.AbstractHessianInput: int readCall()>();

        goto label09;

     label05:
        if $i0 != 67 goto label06;

        $r68 = (java.io.InputStream) r39;

        virtualinvoke $r68.<java.io.InputStream: void reset()>();

        $r53 = new com.caucho.hessian.io.Hessian2Input;

        $r69 = (java.io.InputStream) r39;

        specialinvoke $r53.<com.caucho.hessian.io.Hessian2Input: void <init>(java.io.InputStream)>($r69);

        r41 = $r53;

        $r54 = new com.caucho.hessian.io.Hessian2Output;

        $r70 = (java.io.OutputStream) r40;

        specialinvoke $r54.<com.caucho.hessian.io.Hessian2Output: void <init>(java.io.OutputStream)>($r70);

        r42 = $r54;

        $r71 = (com.caucho.hessian.io.AbstractHessianInput) $r53;

        virtualinvoke $r71.<com.caucho.hessian.io.AbstractHessianInput: int readCall()>();

        goto label09;

     label06:
        if $i0 != 99 goto label08;

        $r72 = (java.io.InputStream) r39;

        $i1 = virtualinvoke $r72.<java.io.InputStream: int read()>();

        $r73 = (java.io.InputStream) r39;

        virtualinvoke $r73.<java.io.InputStream: int read()>();

        $r55 = new com.caucho.hessian.io.HessianInput;

        $r74 = (java.io.InputStream) r39;

        specialinvoke $r55.<com.caucho.hessian.io.HessianInput: void <init>(java.io.InputStream)>($r74);

        r41 = $r55;

        if $i1 < 2 goto label07;

        $r56 = new com.caucho.hessian.io.Hessian2Output;

        $r75 = (java.io.OutputStream) r40;

        specialinvoke $r56.<com.caucho.hessian.io.Hessian2Output: void <init>(java.io.OutputStream)>($r75);

        r42 = $r56;

        goto label09;

     label07:
        $r57 = new com.caucho.hessian.io.HessianOutput;

        $r76 = (java.io.OutputStream) r40;

        specialinvoke $r57.<com.caucho.hessian.io.HessianOutput: void <init>(java.io.OutputStream)>($r76);

        r42 = $r57;

        goto label09;

     label08:
        $r59 = new java.io.IOException;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected \'H\'/\'C\' (Hessian 2.0) or \'c\' (Hessian 1.0) in hessian input at ");

        $r7 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r59;

     label09:
        $r43 = r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.io.SerializerFactory serializerFactory>;

        if $r43 == null goto label10;

        $r12 = r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.io.SerializerFactory serializerFactory>;

        $r77 = (com.caucho.hessian.io.AbstractHessianInput) r41;

        virtualinvoke $r77.<com.caucho.hessian.io.AbstractHessianInput: void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)>($r12);

        $r13 = r0.<org.springframework.remoting.caucho.HessianExporter: com.caucho.hessian.io.SerializerFactory serializerFactory>;

        $r78 = (com.caucho.hessian.io.AbstractHessianOutput) r42;

        virtualinvoke $r78.<com.caucho.hessian.io.AbstractHessianOutput: void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)>($r13);

     label10:
        $r79 = (com.caucho.hessian.io.AbstractHessianInput) r41;

        $r80 = (com.caucho.hessian.io.AbstractHessianOutput) r42;

        virtualinvoke r11.<com.caucho.hessian.server.HessianSkeleton: void invoke(com.caucho.hessian.io.AbstractHessianInput,com.caucho.hessian.io.AbstractHessianOutput)>($r79, $r80);

        goto label19;

     label11:
        $r38 := @caughtexception;

     label12:
        $r81 = (com.caucho.hessian.io.AbstractHessianInput) r41;

        virtualinvoke $r81.<com.caucho.hessian.io.AbstractHessianInput: void close()>();

        $r82 = (java.io.InputStream) r39;

        virtualinvoke $r82.<java.io.InputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r37 := @caughtexception;

     label15:
        $r83 = (com.caucho.hessian.io.AbstractHessianOutput) r42;

        virtualinvoke $r83.<com.caucho.hessian.io.AbstractHessianOutput: void close()>();

        $r84 = (java.io.OutputStream) r40;

        virtualinvoke $r84.<java.io.OutputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r36 := @caughtexception;

     label18:
        throw $r38;

     label19:
        $r85 = (com.caucho.hessian.io.AbstractHessianInput) r41;

        virtualinvoke $r85.<com.caucho.hessian.io.AbstractHessianInput: void close()>();

        $r86 = (java.io.InputStream) r39;

        virtualinvoke $r86.<java.io.InputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r35 := @caughtexception;

     label22:
        $r87 = (com.caucho.hessian.io.AbstractHessianOutput) r42;

        virtualinvoke $r87.<com.caucho.hessian.io.AbstractHessianOutput: void close()>();

        $r88 = (java.io.OutputStream) r40;

        virtualinvoke $r88.<java.io.OutputStream: void close()>();

     label23:
        goto label26;

     label24:
        $r34 := @caughtexception;

        goto label26;

     label25:
        $r33 := @caughtexception;

        virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: void resetThreadContextClassLoader(java.lang.ClassLoader)>($r1);

        throw $r33;

     label26:
        virtualinvoke r0.<org.springframework.remoting.caucho.HessianExporter: void resetThreadContextClassLoader(java.lang.ClassLoader)>($r1);

        return;

        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.lang.Throwable from label01 to label25 with label25;
    }

    public static void <clinit>()
    {
        <org.springframework.remoting.caucho.HessianExporter: java.lang.String CONTENT_TYPE_HESSIAN> = "application/x-hessian";

        return;
    }
}
