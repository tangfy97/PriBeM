public class org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl extends org.apache.xmlbeans.impl.jam.JamServiceFactory
{
    public static final java.lang.String USE_NEW_PARSER;
    private static final java.lang.String PREFIX;

    public void <init>()
    {
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.JamServiceFactory: void <init>()>();

        return;
    }

    public org.apache.xmlbeans.impl.jam.JamServiceParams createServiceParams()
    {
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl $r0;

        r1 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        $r0 = new org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        specialinvoke $r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void <init>()>();

        return $r0;
    }

    public org.apache.xmlbeans.impl.jam.JamService createService(org.apache.xmlbeans.impl.jam.JamServiceParams) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.jam.internal.JamServiceImpl $r5;
        java.lang.String[] $r8;
        java.lang.IllegalArgumentException $r9;
        org.apache.xmlbeans.impl.jam.JamClassLoader $r3;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r1;
        org.apache.xmlbeans.impl.jam.JamServiceParams r0;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext $r7;
        boolean $z0;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl $r2, $r4, $r6;

        r1 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.JamServiceParams;

        $z0 = r0 instanceof org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JamServiceParams must be instantiated by this JamServiceFactory.");

        throw $r9;

     label1:
        $r2 = (org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl) r0;

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.JamClassLoader createClassLoader(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>($r2);

        $r4 = (org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl) r0;

        virtualinvoke $r4.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void setClassLoader(org.apache.xmlbeans.impl.jam.JamClassLoader)>($r3);

        $r5 = new org.apache.xmlbeans.impl.jam.internal.JamServiceImpl;

        $r7 = (org.apache.xmlbeans.impl.jam.internal.elements.ElementContext) r0;

        $r6 = (org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl) r0;

        $r8 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: java.lang.String[] getSpecifiedClasses(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>($r6);

        specialinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.JamServiceImpl: void <init>(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext,java.lang.String[])>($r7, $r8);

        return $r5;
    }

    public org.apache.xmlbeans.impl.jam.JamClassLoader createSystemJamClassLoader()
    {
        org.apache.xmlbeans.impl.jam.JamService $r2;
        java.lang.IllegalStateException $r5;
        org.apache.xmlbeans.impl.jam.JamClassLoader $r3;
        java.io.IOException $r4;
        java.lang.String $r6;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r0;
        org.apache.xmlbeans.impl.jam.JamServiceParams $r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.JamServiceParams createServiceParams()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.JamServiceParams: void setUseSystemClasspath(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.JamService createService(org.apache.xmlbeans.impl.jam.JamServiceParams)>($r1);

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.JamService: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r4.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.impl.jam.JamClassLoader createJamClassLoader(java.lang.ClassLoader)
    {
        java.lang.IllegalStateException $r6;
        java.io.IOException $r5;
        org.apache.xmlbeans.impl.jam.JamService $r3;
        org.apache.xmlbeans.impl.jam.JamClassLoader $r4;
        java.lang.ClassLoader r2;
        java.lang.String $r7;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r0;
        org.apache.xmlbeans.impl.jam.JamServiceParams $r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.JamServiceParams createServiceParams()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.JamServiceParams: void setUseSystemClasspath(boolean)>(0);

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.JamServiceParams: void setPropertyInitializer(org.apache.xmlbeans.impl.jam.visitor.MVisitor)>(null);

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.JamServiceParams: void addClassLoader(java.lang.ClassLoader)>(r2);

     label1:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.JamService createService(org.apache.xmlbeans.impl.jam.JamServiceParams)>($r1);

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.impl.jam.JamService: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r5.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected java.lang.String[] getSpecifiedClasses(org.apache.xmlbeans.impl.jam.provider.JamServiceContext) throws java.io.IOException
    {
        java.lang.String[] $r1;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r0;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r2;

        r2 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.lang.String[] getAllClassnames()>();

        return $r1;
    }

    protected org.apache.xmlbeans.impl.jam.JamClassLoader createClassLoader(org.apache.xmlbeans.impl.jam.provider.JamServiceContext) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.jam.provider.JamClassBuilder $r2;
        org.apache.xmlbeans.impl.jam.internal.JamClassLoaderImpl $r3;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r1;
        org.apache.xmlbeans.impl.jam.visitor.MVisitor $r5;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r0;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.provider.JamClassBuilder createBuilder(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r1);

        $r3 = new org.apache.xmlbeans.impl.jam.internal.JamClassLoaderImpl;

        $r4 = (org.apache.xmlbeans.impl.jam.internal.elements.ElementContext) r1;

        $r5 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.visitor.MVisitor getInitializer()>();

        specialinvoke $r3.<org.apache.xmlbeans.impl.jam.internal.JamClassLoaderImpl: void <init>(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext,org.apache.xmlbeans.impl.jam.provider.JamClassBuilder,org.apache.xmlbeans.impl.jam.visitor.MVisitor)>($r4, $r2, $r5);

        return $r3;
    }

    protected org.apache.xmlbeans.impl.jam.provider.JamClassBuilder createBuilder(org.apache.xmlbeans.impl.jam.provider.JamServiceContext) throws java.io.IOException
    {
        java.lang.ClassLoader[] $r7;
        org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder $r15;
        org.apache.xmlbeans.impl.jam.provider.JamClassBuilder $r3, $r5, $r6;
        org.apache.xmlbeans.impl.jam.provider.CompositeJamClassBuilder $r8;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.jam.provider.JamClassBuilder[] r23;
        org.apache.xmlbeans.impl.jam.provider.JamLogger $r1;
        java.lang.ClassLoader $r16, $r19;
        java.util.ArrayList $r2;
        java.lang.StringBuffer $r10, $r11, $r12, $r13, $r17, $r18, $r21;
        int $i0, $i1, i2, $i3;
        java.lang.String $r14, $r22;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext $r9;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r0;
        java.lang.Class $r20;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r4;

        r4 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.JamClassBuilder getBaseBuilder()>();

        if $r3 == null goto label1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        $r5 = virtualinvoke r4.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.provider.JamClassBuilder createSourceBuilder(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r0);

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>("added classbuilder for sources");

     label2:
        if $r5 == null goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        $r6 = virtualinvoke r4.<org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: org.apache.xmlbeans.impl.jam.provider.JamClassBuilder createClassfileBuilder(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r0);

        $z1 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r4);

        if $z1 == 0 goto label4;

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>("added classbuilder for custom classpath");

     label4:
        if $r6 == null goto label5;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

     label5:
        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.lang.ClassLoader[] getReflectionClassLoaders()>();

        i2 = 0;

     label6:
        $i3 = lengthof $r7;

        if i2 >= $i3 goto label8;

        $z3 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r4);

        if $z3 == 0 goto label7;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("added classbuilder for classloader ");

        $r19 = $r7[i2];

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r22);

     label7:
        $r15 = new org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder;

        $r16 = $r7[i2];

        specialinvoke $r15.<org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder: void <init>(java.lang.ClassLoader)>($r16);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r15);

        i2 = i2 + 1;

        goto label6;

     label8:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r23 = newarray (org.apache.xmlbeans.impl.jam.provider.JamClassBuilder)[$i0];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r23);

        $r8 = new org.apache.xmlbeans.impl.jam.provider.CompositeJamClassBuilder;

        specialinvoke $r8.<org.apache.xmlbeans.impl.jam.provider.CompositeJamClassBuilder: void <init>(org.apache.xmlbeans.impl.jam.provider.JamClassBuilder[])>(r23);

        $r9 = (org.apache.xmlbeans.impl.jam.internal.elements.ElementContext) r0;

        virtualinvoke $r8.<org.apache.xmlbeans.impl.jam.provider.JamClassBuilder: void init(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>($r9);

        $z2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r4);

        if $z2 == 0 goto label9;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("returning a composite of ");

        $i1 = lengthof r23;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" class builders.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r14);

        virtualinvoke $r8.<org.apache.xmlbeans.impl.jam.provider.JamClassBuilder: org.apache.xmlbeans.impl.jam.mutable.MClass build(java.lang.String,java.lang.String)>("java.lang", "Object");

        virtualinvoke $r8.<org.apache.xmlbeans.impl.jam.provider.JamClassBuilder: org.apache.xmlbeans.impl.jam.mutable.MClass build(java.lang.String,java.lang.String)>("javax.ejb", "SessionBean");

     label9:
        return $r8;
    }

    protected org.apache.xmlbeans.impl.jam.provider.JamClassBuilder createSourceBuilder(org.apache.xmlbeans.impl.jam.provider.JamServiceContext) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder $r4;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r0;
        int $i0;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder $r5;
        java.io.File[] $r1;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r2;
        boolean $z0;

        r2 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.io.File[] getSourceFiles()>();

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label3;

     label1:
        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: boolean isVerbose(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: void verbose(java.lang.String)>("[JamServiceFactoryImpl]no source files present, skipping source ClassBuilder");

     label2:
        return null;

     label3:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.lang.String getProperty(java.lang.String)>("JamServiceFactoryImpl.use-new-parser");

        if $r3 != null goto label4;

        $r5 = new org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        specialinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void <init>()>();

        return $r5;

     label4:
        $r4 = new org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder;

        specialinvoke $r4.<org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder: void <init>(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r0);

        return $r4;
    }

    protected org.apache.xmlbeans.impl.jam.provider.JamClassBuilder createClassfileBuilder(org.apache.xmlbeans.impl.jam.provider.JamServiceContext) throws java.io.IOException
    {
        java.net.URL[] $r2;
        java.net.URLClassLoader $r3;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r0;
        org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder $r4;
        org.apache.xmlbeans.impl.jam.provider.ResourcePath $r1;
        org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl r5;

        r5 := @this: org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputClasspath()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.ResourcePath: java.net.URL[] toUrlPath()>();

        $r3 = new java.net.URLClassLoader;

        specialinvoke $r3.<java.net.URLClassLoader: void <init>(java.net.URL[])>($r2);

        $r4 = new org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder;

        specialinvoke $r4.<org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder: void <init>(java.lang.ClassLoader)>($r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: java.lang.String PREFIX> = "[JamServiceFactoryImpl]";

        <org.apache.xmlbeans.impl.jam.provider.JamServiceFactoryImpl: java.lang.String USE_NEW_PARSER> = "JamServiceFactoryImpl.use-new-parser";

        return;
    }
}
