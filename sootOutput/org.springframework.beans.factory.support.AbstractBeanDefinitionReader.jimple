public abstract class org.springframework.beans.factory.support.AbstractBeanDefinitionReader extends java.lang.Object implements org.springframework.beans.factory.support.BeanDefinitionReader
{
    protected final org.apache.commons.logging.Log logger;
    private final org.springframework.beans.factory.support.BeanDefinitionRegistry registry;
    private org.springframework.core.io.ResourceLoader resourceLoader;
    private java.lang.ClassLoader beanClassLoader;
    private org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator;

    protected void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.core.io.ResourceLoader $r8;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r4, $r5, $r7;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;
        org.springframework.beans.factory.support.DefaultBeanNameGenerator $r3;
        org.springframework.core.io.support.PathMatchingResourcePatternResolver $r6;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r4 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.beans.factory.support.DefaultBeanNameGenerator;

        specialinvoke $r3.<org.springframework.beans.factory.support.DefaultBeanNameGenerator: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator> = $r3;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r4, "BeanDefinitionRegistry must not be null");

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry> = r4;

        $r5 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $z0 = $r5 instanceof org.springframework.core.io.ResourceLoader;

        if $z0 == 0 goto label1;

        $r7 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r8 = (org.springframework.core.io.ResourceLoader) $r7;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.core.io.ResourceLoader resourceLoader> = $r8;

        goto label2;

     label1:
        $r6 = new org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        specialinvoke $r6.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.core.io.ResourceLoader resourceLoader> = $r6;

     label2:
        return;
    }

    public final org.springframework.beans.factory.support.BeanDefinitionRegistry getBeanFactory()
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        return $r1;
    }

    public final org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        return $r1;
    }

    public void setResourceLoader(org.springframework.core.io.ResourceLoader)
    {
        org.springframework.core.io.ResourceLoader r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r1 := @parameter0: org.springframework.core.io.ResourceLoader;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.core.io.ResourceLoader resourceLoader> = r1;

        return;
    }

    public org.springframework.core.io.ResourceLoader getResourceLoader()
    {
        org.springframework.core.io.ResourceLoader $r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.core.io.ResourceLoader resourceLoader>;

        return $r1;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public java.lang.ClassLoader getBeanClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: java.lang.ClassLoader beanClassLoader>;

        return $r1;
    }

    public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)
    {
        org.springframework.beans.factory.support.BeanNameGenerator r1, $r2;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;
        org.springframework.beans.factory.support.DefaultBeanNameGenerator $r3;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanNameGenerator;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.support.DefaultBeanNameGenerator;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.support.DefaultBeanNameGenerator: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator> = $r2;

        return;
    }

    public org.springframework.beans.factory.support.BeanNameGenerator getBeanNameGenerator()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;
        org.springframework.beans.factory.support.BeanNameGenerator $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator>;

        return $r1;
    }

    public transient int loadBeanDefinitions(org.springframework.core.io.Resource[]) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.core.io.Resource[] r0;
        int i0, $i1, i2, i3;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r2;
        org.springframework.core.io.Resource r1;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r0 := @parameter0: org.springframework.core.io.Resource[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource array must not be null");

        i2 = 0;

        i0 = lengthof r0;

        i3 = 0;

        goto label2;

     label1:
        r1 = r0[i3];

        $i1 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource)>(r1);

        i2 = i2 + $i1;

        i3 = i3 + 1;

     label2:
        if i3 < i0 goto label1;

        return i2;
    }

    public int loadBeanDefinitions(java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        int $i0;
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>(r1, null);

        return $i0;
    }

    public int loadBeanDefinitions(java.lang.String, java.util.Set) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r0;
        boolean $z0, $z1, $z2;
        org.springframework.core.io.Resource $r3, r23;
        org.springframework.core.io.ResourceLoader $r1;
        java.util.Set r4;
        org.springframework.core.io.Resource[] $r14;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r16, $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r31, $r32, $r33;
        int $i0, $i1, i2, i3;
        java.lang.String r2, $r12, $r22, $r28, $r34;
        java.io.IOException $r29;
        org.springframework.beans.factory.BeanDefinitionStoreException $r24, $r30;
        org.apache.commons.logging.Log $r5, $r7, $r15, $r17;
        org.springframework.core.io.support.ResourcePatternResolver $r13;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.Set;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        if $r1 != null goto label01;

        $r24 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot import bean definitions from location [");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: no ResourceLoader available");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label01:
        $z0 = $r1 instanceof org.springframework.core.io.support.ResourcePatternResolver;

        if $z0 == 0 goto label08;

     label02:
        $r13 = (org.springframework.core.io.support.ResourcePatternResolver) $r1;

        $r14 = interfaceinvoke $r13.<org.springframework.core.io.support.ResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>(r2);

        $i1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource[])>($r14);

        if r4 == null goto label05;

        i2 = lengthof $r14;

        i3 = 0;

        goto label04;

     label03:
        r23 = $r14[i3];

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r23);

        i3 = i3 + 1;

     label04:
        if i3 < i2 goto label03;

     label05:
        $r15 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label06;

        $r17 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loaded ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bean definitions from location pattern [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label06:
        return $i1;

     label07:
        $r29 := @caughtexception;

        $r30 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not resolve bean definition resource pattern [");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r34, $r29);

        throw $r30;

     label08:
        $r3 = interfaceinvoke $r1.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>(r2);

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource)>($r3);

        if r4 == null goto label09;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label09:
        $r5 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label10;

        $r7 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loaded ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bean definitions from location [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label10:
        return $i0;

        catch java.io.IOException from label02 to label06 with label07;
    }

    public transient int loadBeanDefinitions(java.lang.String[]) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        int i0, $i1, i2, i3;
        java.lang.String[] r0;
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractBeanDefinitionReader r2;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanDefinitionReader;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Location array must not be null");

        i2 = 0;

        i0 = lengthof r0;

        i3 = 0;

        goto label2;

     label1:
        r1 = r0[i3];

        $i1 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: int loadBeanDefinitions(java.lang.String)>(r1);

        i2 = i2 + $i1;

        i3 = i3 + 1;

     label2:
        if i3 < i0 goto label1;

        return i2;
    }
}
