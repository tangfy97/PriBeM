public class org.apache.commons.codec.binary.Base64 extends org.apache.commons.codec.binary.BaseNCodec
{
    private static final int BITS_PER_ENCODED_BYTE;
    private static final int BYTES_PER_UNENCODED_BLOCK;
    private static final int BYTES_PER_ENCODED_BLOCK;
    static final byte[] CHUNK_SEPARATOR;
    private static final byte[] STANDARD_ENCODE_TABLE;
    private static final byte[] URL_SAFE_ENCODE_TABLE;
    private static final byte[] DECODE_TABLE;
    private static final int MASK_6BITS;
    private final byte[] encodeTable;
    private final byte[] decodeTable;
    private final byte[] lineSeparator;
    private final int decodeSize;
    private final int encodeSize;
    private int bitWorkArea;

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64: void <init>(int)>(0);

        return;
    }

    public void <init>(boolean)
    {
        byte[] $r1;
        org.apache.commons.codec.binary.Base64 r0;
        boolean z0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(76, $r1, z0);

        return;
    }

    public void <init>(int)
    {
        int i0;
        byte[] $r1;
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(i0, $r1);

        return;
    }

    public void <init>(int, byte[])
    {
        int i0;
        byte[] r1;
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(i0, r1, 0);

        return;
    }

    public void <init>(int, byte[], boolean)
    {
        byte[] r1, $r2, $r3, $r4, $r12;
        org.apache.commons.codec.binary.Base64 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r5, $r11;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $i5 = lengthof r1;

     label2:
        specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int)>(3, 4, i0, $i5);

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base64: byte[] decodeTable> = $r2;

        if r1 == null goto label5;

        $z1 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: boolean containsAlphabetOrPad(byte[])>(r1);

        if $z1 == 0 goto label3;

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeparator must not contain base64 characters: [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        if i0 <= 0 goto label4;

        $i1 = lengthof r1;

        $i2 = 4 + $i1;

        r0.<org.apache.commons.codec.binary.Base64: int encodeSize> = $i2;

        $i3 = lengthof r1;

        $r3 = newarray (byte)[$i3];

        r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator> = $r3;

        $r4 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i4);

        goto label6;

     label4:
        r0.<org.apache.commons.codec.binary.Base64: int encodeSize> = 4;

        r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator> = null;

        goto label6;

     label5:
        r0.<org.apache.commons.codec.binary.Base64: int encodeSize> = 4;

        r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator> = null;

     label6:
        $i6 = r0.<org.apache.commons.codec.binary.Base64: int encodeSize>;

        $i7 = $i6 - 1;

        r0.<org.apache.commons.codec.binary.Base64: int decodeSize> = $i7;

        if z0 == 0 goto label7;

        $r12 = <org.apache.commons.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE>;

        goto label8;

     label7:
        $r12 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>;

     label8:
        r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable> = $r12;

        return;
    }

    public boolean isUrlSafe()
    {
        byte[] $r1, $r2;
        org.apache.commons.codec.binary.Base64 r0;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        $r2 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void encode(byte[], int, int)
    {
        byte[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34;
        org.apache.commons.codec.binary.Base64 r0;
        byte $b15, $b21, $b27, $b32, $b51, $b57, $b63, $b77, $b83;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i78, $i79, $i80, $i81, $i82, $i84, $i85, $i86, $i87, $i88, $i89, i90, $i91, $i92, $i93, $i94, $i95, i96, i97;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        i90 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.commons.codec.binary.Base64: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if i0 >= 0 goto label07;

        r0.<org.apache.commons.codec.binary.Base64: boolean eof> = 1;

        $i43 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        if 0 != $i43 goto label02;

        $i88 = r0.<org.apache.commons.codec.binary.Base64: int lineLength>;

        if $i88 != 0 goto label02;

        return;

     label02:
        $i44 = r0.<org.apache.commons.codec.binary.Base64: int encodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base64: void ensureBufferSize(int)>($i44);

        $i89 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i45 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        lookupswitch($i45)
        {
            case 1: goto label03;
            case 2: goto label04;
            default: goto label05;
        };

     label03:
        $r27 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i72 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i73 = $i72 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i73;

        $r28 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i74 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i75 = $i74 >> 2;

        $i76 = $i75 & 63;

        $b77 = $r28[$i76];

        $r27[$i72] = $b77;

        $r29 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i78 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i79 = $i78 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i79;

        $r30 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i80 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i81 = $i80 << 4;

        $i82 = $i81 & 63;

        $b83 = $r30[$i82];

        $r29[$i78] = $b83;

        $r32 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $r31 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>;

        if $r32 != $r31 goto label05;

        $r33 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i84 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i85 = $i84 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i85;

        $r33[$i84] = 61;

        $r34 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i86 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i87 = $i86 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i87;

        $r34[$i86] = 61;

        goto label05;

     label04:
        $r14 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i46 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i47 = $i46 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i47;

        $r15 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i48 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i49 = $i48 >> 10;

        $i50 = $i49 & 63;

        $b51 = $r15[$i50];

        $r14[$i46] = $b51;

        $r16 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i52 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i53 = $i52 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i53;

        $r17 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i54 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i55 = $i54 >> 4;

        $i56 = $i55 & 63;

        $b57 = $r17[$i56];

        $r16[$i52] = $b57;

        $r18 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i58 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i59 = $i58 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i59;

        $r19 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i60 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i61 = $i60 << 2;

        $i62 = $i61 & 63;

        $b63 = $r19[$i62];

        $r18[$i58] = $b63;

        $r21 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $r20 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>;

        if $r21 != $r20 goto label05;

        $r26 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i70 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i71 = $i70 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i71;

        $r26[$i70] = 61;

     label05:
        $i91 = r0.<org.apache.commons.codec.binary.Base64: int currentLinePos>;

        $i92 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i93 = $i92 - $i89;

        $i94 = $i91 + $i93;

        r0.<org.apache.commons.codec.binary.Base64: int currentLinePos> = $i94;

        $i95 = r0.<org.apache.commons.codec.binary.Base64: int lineLength>;

        if $i95 <= 0 goto label06;

        $i64 = r0.<org.apache.commons.codec.binary.Base64: int currentLinePos>;

        if $i64 <= 0 goto label06;

        $r24 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $r23 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i66 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $r22 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $i65 = lengthof $r22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, 0, $r23, $i66, $i65);

        $i68 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $r25 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $i67 = lengthof $r25;

        $i69 = $i68 + $i67;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i69;

     label06:
        goto label11;

     label07:
        i96 = 0;

     label08:
        if i96 >= i0 goto label11;

        $i1 = r0.<org.apache.commons.codec.binary.Base64: int encodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base64: void ensureBufferSize(int)>($i1);

        $i2 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        $i3 = $i2 + 1;

        $i4 = $i3 % 3;

        r0.<org.apache.commons.codec.binary.Base64: int modulus> = $i4;

        $i5 = i90;

        i90 = i90 + 1;

        i97 = r1[$i5];

        if i97 >= 0 goto label09;

        i97 = i97 + 256;

     label09:
        $i6 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i7 = $i6 << 8;

        $i8 = $i7 + i97;

        r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea> = $i8;

        $i9 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        if 0 != $i9 goto label10;

        $r2 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i10 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i11 = $i10 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i11;

        $r3 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i12 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i13 = $i12 >> 18;

        $i14 = $i13 & 63;

        $b15 = $r3[$i14];

        $r2[$i10] = $b15;

        $r4 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i16 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i17 = $i16 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i17;

        $r5 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i18 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i19 = $i18 >> 12;

        $i20 = $i19 & 63;

        $b21 = $r5[$i20];

        $r4[$i16] = $b21;

        $r6 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i22 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i23 = $i22 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i23;

        $r7 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i24 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i25 = $i24 >> 6;

        $i26 = $i25 & 63;

        $b27 = $r7[$i26];

        $r6[$i22] = $b27;

        $r8 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i28 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i29 = $i28 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i29;

        $r9 = r0.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>;

        $i30 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i31 = $i30 & 63;

        $b32 = $r9[$i31];

        $r8[$i28] = $b32;

        $i33 = r0.<org.apache.commons.codec.binary.Base64: int currentLinePos>;

        $i34 = $i33 + 4;

        r0.<org.apache.commons.codec.binary.Base64: int currentLinePos> = $i34;

        $i35 = r0.<org.apache.commons.codec.binary.Base64: int lineLength>;

        if $i35 <= 0 goto label10;

        $i37 = r0.<org.apache.commons.codec.binary.Base64: int lineLength>;

        $i36 = r0.<org.apache.commons.codec.binary.Base64: int currentLinePos>;

        if $i37 > $i36 goto label10;

        $r12 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $r11 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i39 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $r10 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $i38 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, $i39, $i38);

        $i41 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $r13 = r0.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>;

        $i40 = lengthof $r13;

        $i42 = $i41 + $i40;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i42;

        r0.<org.apache.commons.codec.binary.Base64: int currentLinePos> = 0;

     label10:
        i96 = i96 + 1;

        goto label08;

     label11:
        return;
    }

    void decode(byte[], int, int)
    {
        byte[] $r1, $r2, $r3, r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.commons.codec.binary.Base64 r0;
        byte $b11, $b16, $b23, b26, b28, $b41, $b47, $b52;
        boolean $z0, $z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, i53, i54, $i55, $i56, $i57, $i58, $i59, $i60;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r4 := @parameter0: byte[];

        i53 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.commons.codec.binary.Base64: boolean eof>;

        if $z0 == 0 goto label1;

        return;

     label1:
        if i0 >= 0 goto label2;

        r0.<org.apache.commons.codec.binary.Base64: boolean eof> = 1;

     label2:
        i54 = 0;

     label3:
        if i54 >= i0 goto label6;

        $i24 = r0.<org.apache.commons.codec.binary.Base64: int decodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base64: void ensureBufferSize(int)>($i24);

        $i25 = i53;

        i53 = i53 + 1;

        b26 = r4[$i25];

        $i55 = (int) b26;

        if $i55 != 61 goto label4;

        r0.<org.apache.commons.codec.binary.Base64: boolean eof> = 1;

        goto label6;

     label4:
        $i56 = (int) b26;

        if $i56 < 0 goto label5;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>;

        $i27 = lengthof $r5;

        $i57 = (int) b26;

        if $i57 >= $i27 goto label5;

        $r6 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>;

        $i58 = (int) b26;

        b28 = $r6[$i58];

        $i59 = (int) b28;

        if $i59 < 0 goto label5;

        $i29 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        $i30 = $i29 + 1;

        $i31 = $i30 % 4;

        r0.<org.apache.commons.codec.binary.Base64: int modulus> = $i31;

        $i32 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i33 = $i32 << 6;

        $i60 = (int) b28;

        $i34 = $i33 + $i60;

        r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea> = $i34;

        $i35 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        if $i35 != 0 goto label5;

        $r7 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i36 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i37 = $i36 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i37;

        $i38 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i39 = $i38 >> 16;

        $i40 = $i39 & 255;

        $b41 = (byte) $i40;

        $r7[$i36] = $b41;

        $r8 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i42 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i43 = $i42 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i43;

        $i44 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i45 = $i44 >> 8;

        $i46 = $i45 & 255;

        $b47 = (byte) $i46;

        $r8[$i42] = $b47;

        $r9 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i48 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i49 = $i48 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i49;

        $i50 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i51 = $i50 & 255;

        $b52 = (byte) $i51;

        $r9[$i48] = $b52;

     label5:
        i54 = i54 + 1;

        goto label3;

     label6:
        $z1 = r0.<org.apache.commons.codec.binary.Base64: boolean eof>;

        if $z1 == 0 goto label9;

        $i1 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        if $i1 == 0 goto label9;

        $i2 = r0.<org.apache.commons.codec.binary.Base64: int decodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base64: void ensureBufferSize(int)>($i2);

        $i3 = r0.<org.apache.commons.codec.binary.Base64: int modulus>;

        lookupswitch($i3)
        {
            case 2: goto label7;
            case 3: goto label8;
            default: goto label9;
        };

     label7:
        $i17 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i18 = $i17 >> 4;

        r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea> = $i18;

        $r3 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i19 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i20 = $i19 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i20;

        $i21 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i22 = $i21 & 255;

        $b23 = (byte) $i22;

        $r3[$i19] = $b23;

        goto label9;

     label8:
        $i4 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i5 = $i4 >> 2;

        r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea> = $i5;

        $r1 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i6 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i7 = $i6 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i7;

        $i8 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i9 = $i8 >> 8;

        $i10 = $i9 & 255;

        $b11 = (byte) $i10;

        $r1[$i6] = $b11;

        $r2 = r0.<org.apache.commons.codec.binary.Base64: byte[] buffer>;

        $i12 = r0.<org.apache.commons.codec.binary.Base64: int pos>;

        $i13 = $i12 + 1;

        r0.<org.apache.commons.codec.binary.Base64: int pos> = $i13;

        $i14 = r0.<org.apache.commons.codec.binary.Base64: int bitWorkArea>;

        $i15 = $i14 & 255;

        $b16 = (byte) $i15;

        $r2[$i12] = $b16;

     label9:
        return;
    }

    public static boolean isArrayByteBase64(byte[])
    {
        byte[] r0;
        boolean $z0;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>(r0);

        return $z0;
    }

    public static boolean isBase64(byte)
    {
        byte[] $r0, $r1;
        byte b0, $b2;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0;

        b0 := @parameter0: byte;

        $i3 = (int) b0;

        if $i3 == 61 goto label1;

        $i4 = (int) b0;

        if $i4 < 0 goto label2;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>;

        $i1 = lengthof $r0;

        $i5 = (int) b0;

        if $i5 >= $i1 goto label2;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>;

        $i6 = (int) b0;

        $b2 = $r1[$i6];

        $i7 = (int) $b2;

        $i9 = (int) -1;

        if $i7 == $i9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isBase64(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r0);

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r1);

        return $z0;
    }

    public static boolean isBase64(byte[])
    {
        byte[] r0;
        byte $b1, $b2;
        int $i0, i3;
        boolean $z0, $z1;

        r0 := @parameter0: byte[];

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $b1 = r0[i3];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b1);

        if $z0 != 0 goto label2;

        $b2 = r0[i3];

        $z1 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isWhiteSpace(byte)>($b2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String encodeBase64String(byte[])
    {
        byte[] r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r1);

        return $r2;
    }

    public static byte[] encodeBase64URLSafe(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(r0, 0, 1);

        return $r1;
    }

    public static java.lang.String encodeBase64URLSafeString(byte[])
    {
        byte[] r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(r0, 0, 1);

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r1);

        return $r2;
    }

    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] r0, $r1;
        boolean z0;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(r0, z0, 0);

        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean, boolean)
    {
        byte[] r0, $r1;
        boolean z0, z1;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean,int)>(r0, z0, z1, 2147483647);

        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean, boolean, int)
    {
        byte[] r0, $r1, $r2;
        long $l1, $l3;
        org.apache.commons.codec.binary.Base64 $r10, $r11, $r12;
        byte $b4;
        int $i0, i2, $i5;
        java.lang.String $r9;
        boolean z0, z1;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r13;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i2 := @parameter3: int;

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        if z0 == 0 goto label3;

        $r11 = new org.apache.commons.codec.binary.Base64;

        $r10 = $r11;

        specialinvoke $r11.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(z1);

        goto label4;

     label3:
        $r12 = new org.apache.commons.codec.binary.Base64;

        $r10 = $r12;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke $r12.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(0, $r1, z1);

     label4:
        $l1 = virtualinvoke $r10.<org.apache.commons.codec.binary.Base64: long getEncodedLength(byte[])>(r0);

        $l3 = (long) i2;

        $b4 = $l1 cmp $l3;

        $i5 = (int) $b4;

        if $i5 <= 0 goto label5;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input array too big, the output array would be bigger (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") than the specified maximum size of ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label5:
        $r2 = virtualinvoke $r10.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>(r0);

        return $r2;
    }

    public static byte[] decodeBase64(java.lang.String)
    {
        byte[] $r2;
        java.lang.String r1;
        org.apache.commons.codec.binary.Base64 $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r0.<org.apache.commons.codec.binary.Base64: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>(r1);

        return $r2;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] r1, $r2;
        org.apache.commons.codec.binary.Base64 $r0;

        r1 := @parameter0: byte[];

        $r0 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r0.<org.apache.commons.codec.binary.Base64: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>(r1);

        return $r2;
    }

    public static java.math.BigInteger decodeInteger(byte[])
    {
        byte[] r1, $r2;
        java.math.BigInteger $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.math.BigInteger;

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r1);

        specialinvoke $r0.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r0;
    }

    public static byte[] encodeInteger(java.math.BigInteger)
    {
        byte[] $r1, $r2;
        java.math.BigInteger r0;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodeInteger called with null parameter");

        throw $r3;

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] toIntegerBytes(java.math.BigInteger)>(r0);

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r1, 0);

        return $r2;
    }

    static byte[] toIntegerBytes(java.math.BigInteger)
    {
        byte[] $r1, $r2;
        byte b16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i17, $i19;
        java.math.BigInteger r0;

        r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i0 + 7;

        $i2 = $i1 >> 3;

        i15 = $i2 << 3;

        $r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i3 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i4 = $i3 % 8;

        if $i4 == 0 goto label1;

        $i10 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i11 = $i10 / 8;

        $i13 = $i11 + 1;

        $i12 = i15 / 8;

        if $i13 != $i12 goto label1;

        return $r1;

     label1:
        b16 = 0;

        $i14 = lengthof $r1;

        i17 = $i14;

        $i5 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i6 = $i5 % 8;

        if $i6 != 0 goto label2;

        b16 = 1;

        $i19 = (int) -1;

        i17 = $i14 + $i19;

     label2:
        $i7 = i15 / 8;

        $i9 = $i7 - i17;

        $i8 = i15 / 8;

        $r2 = newarray (byte)[$i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, b16, $r2, $i9, i17);

        return $r2;
    }

    protected boolean isInAlphabet(byte)
    {
        byte[] $r1, $r2;
        org.apache.commons.codec.binary.Base64 r0;
        byte b0, $b2;
        int $i1, $i3, $i4, $i5, $i6, $i8;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        b0 := @parameter0: byte;

        $i3 = (int) b0;

        if $i3 < 0 goto label1;

        $r1 = r0.<org.apache.commons.codec.binary.Base64: byte[] decodeTable>;

        $i1 = lengthof $r1;

        $i4 = (int) b0;

        if $i4 >= $i1 goto label1;

        $r2 = r0.<org.apache.commons.codec.binary.Base64: byte[] decodeTable>;

        $i5 = (int) b0;

        $b2 = $r2[$i5];

        $i6 = (int) $b2;

        $i8 = (int) -1;

        if $i6 == $i8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;

        <org.apache.commons.codec.binary.Base64: int MASK_6BITS> = 63;

        <org.apache.commons.codec.binary.Base64: int BYTES_PER_ENCODED_BLOCK> = 4;

        <org.apache.commons.codec.binary.Base64: int BYTES_PER_UNENCODED_BLOCK> = 3;

        <org.apache.commons.codec.binary.Base64: int BITS_PER_ENCODED_BYTE> = 6;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR> = $r0;

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE> = $r1;

        $r2 = newarray (byte)[64];

        $r2[0] = 65;

        $r2[1] = 66;

        $r2[2] = 67;

        $r2[3] = 68;

        $r2[4] = 69;

        $r2[5] = 70;

        $r2[6] = 71;

        $r2[7] = 72;

        $r2[8] = 73;

        $r2[9] = 74;

        $r2[10] = 75;

        $r2[11] = 76;

        $r2[12] = 77;

        $r2[13] = 78;

        $r2[14] = 79;

        $r2[15] = 80;

        $r2[16] = 81;

        $r2[17] = 82;

        $r2[18] = 83;

        $r2[19] = 84;

        $r2[20] = 85;

        $r2[21] = 86;

        $r2[22] = 87;

        $r2[23] = 88;

        $r2[24] = 89;

        $r2[25] = 90;

        $r2[26] = 97;

        $r2[27] = 98;

        $r2[28] = 99;

        $r2[29] = 100;

        $r2[30] = 101;

        $r2[31] = 102;

        $r2[32] = 103;

        $r2[33] = 104;

        $r2[34] = 105;

        $r2[35] = 106;

        $r2[36] = 107;

        $r2[37] = 108;

        $r2[38] = 109;

        $r2[39] = 110;

        $r2[40] = 111;

        $r2[41] = 112;

        $r2[42] = 113;

        $r2[43] = 114;

        $r2[44] = 115;

        $r2[45] = 116;

        $r2[46] = 117;

        $r2[47] = 118;

        $r2[48] = 119;

        $r2[49] = 120;

        $r2[50] = 121;

        $r2[51] = 122;

        $r2[52] = 48;

        $r2[53] = 49;

        $r2[54] = 50;

        $r2[55] = 51;

        $r2[56] = 52;

        $r2[57] = 53;

        $r2[58] = 54;

        $r2[59] = 55;

        $r2[60] = 56;

        $r2[61] = 57;

        $r2[62] = 45;

        $r2[63] = 95;

        <org.apache.commons.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE> = $r2;

        $r3 = newarray (byte)[123];

        $r3[0] = -1;

        $r3[1] = -1;

        $r3[2] = -1;

        $r3[3] = -1;

        $r3[4] = -1;

        $r3[5] = -1;

        $r3[6] = -1;

        $r3[7] = -1;

        $r3[8] = -1;

        $r3[9] = -1;

        $r3[10] = -1;

        $r3[11] = -1;

        $r3[12] = -1;

        $r3[13] = -1;

        $r3[14] = -1;

        $r3[15] = -1;

        $r3[16] = -1;

        $r3[17] = -1;

        $r3[18] = -1;

        $r3[19] = -1;

        $r3[20] = -1;

        $r3[21] = -1;

        $r3[22] = -1;

        $r3[23] = -1;

        $r3[24] = -1;

        $r3[25] = -1;

        $r3[26] = -1;

        $r3[27] = -1;

        $r3[28] = -1;

        $r3[29] = -1;

        $r3[30] = -1;

        $r3[31] = -1;

        $r3[32] = -1;

        $r3[33] = -1;

        $r3[34] = -1;

        $r3[35] = -1;

        $r3[36] = -1;

        $r3[37] = -1;

        $r3[38] = -1;

        $r3[39] = -1;

        $r3[40] = -1;

        $r3[41] = -1;

        $r3[42] = -1;

        $r3[43] = 62;

        $r3[44] = -1;

        $r3[45] = 62;

        $r3[46] = -1;

        $r3[47] = 63;

        $r3[48] = 52;

        $r3[49] = 53;

        $r3[50] = 54;

        $r3[51] = 55;

        $r3[52] = 56;

        $r3[53] = 57;

        $r3[54] = 58;

        $r3[55] = 59;

        $r3[56] = 60;

        $r3[57] = 61;

        $r3[58] = -1;

        $r3[59] = -1;

        $r3[60] = -1;

        $r3[61] = -1;

        $r3[62] = -1;

        $r3[63] = -1;

        $r3[64] = -1;

        $r3[65] = 0;

        $r3[66] = 1;

        $r3[67] = 2;

        $r3[68] = 3;

        $r3[69] = 4;

        $r3[70] = 5;

        $r3[71] = 6;

        $r3[72] = 7;

        $r3[73] = 8;

        $r3[74] = 9;

        $r3[75] = 10;

        $r3[76] = 11;

        $r3[77] = 12;

        $r3[78] = 13;

        $r3[79] = 14;

        $r3[80] = 15;

        $r3[81] = 16;

        $r3[82] = 17;

        $r3[83] = 18;

        $r3[84] = 19;

        $r3[85] = 20;

        $r3[86] = 21;

        $r3[87] = 22;

        $r3[88] = 23;

        $r3[89] = 24;

        $r3[90] = 25;

        $r3[91] = -1;

        $r3[92] = -1;

        $r3[93] = -1;

        $r3[94] = -1;

        $r3[95] = 63;

        $r3[96] = -1;

        $r3[97] = 26;

        $r3[98] = 27;

        $r3[99] = 28;

        $r3[100] = 29;

        $r3[101] = 30;

        $r3[102] = 31;

        $r3[103] = 32;

        $r3[104] = 33;

        $r3[105] = 34;

        $r3[106] = 35;

        $r3[107] = 36;

        $r3[108] = 37;

        $r3[109] = 38;

        $r3[110] = 39;

        $r3[111] = 40;

        $r3[112] = 41;

        $r3[113] = 42;

        $r3[114] = 43;

        $r3[115] = 44;

        $r3[116] = 45;

        $r3[117] = 46;

        $r3[118] = 47;

        $r3[119] = 48;

        $r3[120] = 49;

        $r3[121] = 50;

        $r3[122] = 51;

        <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE> = $r3;

        return;
    }
}
