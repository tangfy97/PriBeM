public class org.apache.poi.hpsf.Util extends java.lang.Object
{
    public static final long EPOCH_DIFF;

    public void <init>()
    {
        org.apache.poi.hpsf.Util r0;

        r0 := @this: org.apache.poi.hpsf.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equal(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b3, $b4;
        int $i0, $i1, $i2, i5, $i6, $i7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label4;

        $b4 = r0[i5];

        $b3 = r1[i5];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static void copy(byte[], int, int, byte[], int)
    {
        byte[] r0, r1;
        byte $b4;
        int i0, i1, i2, $i3, $i5, i6;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: byte[];

        i1 := @parameter4: int;

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $i5 = i1 + i6;

        $i3 = i2 + i6;

        $b4 = r1[$i3];

        r0[$i5] = $b4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public static byte[] cat(byte[][])
    {
        byte[] $r1, $r2, $r3, r4;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i5, i6, i7, i8, i9, i10;
        byte[][] r0;

        r0 := @parameter0: byte[][];

        i6 = 0;

        i7 = 0;

     label1:
        $i0 = lengthof r0;

        if i7 >= $i0 goto label2;

        $r3 = r0[i7];

        $i5 = lengthof $r3;

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        r4 = newarray (byte)[i6];

        i8 = 0;

        i9 = 0;

     label3:
        $i1 = lengthof r0;

        if i9 >= $i1 goto label6;

        i10 = 0;

     label4:
        $r1 = r0[i9];

        $i2 = lengthof $r1;

        if i10 >= $i2 goto label5;

        $i3 = i8;

        i8 = i8 + 1;

        $r2 = r0[i9];

        $b4 = $r2[i10];

        r4[$i3] = $b4;

        i10 = i10 + 1;

        goto label4;

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        return r4;
    }

    public static byte[] copy(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        staticinvoke <org.apache.poi.hpsf.Util: void copy(byte[],int,int,byte[],int)>(r1, i1, i0, r0, 0);

        return r0;
    }

    public static java.util.Date filetimeToDate(int, int)
    {
        java.util.Date $r0;
        long $l1, $l3, $l4, $l5, l6;
        int i0, i2;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $l1 = (long) i0;

        $l5 = $l1 << 32;

        $l3 = (long) i2;

        $l4 = $l3 & 4294967295L;

        l6 = $l5 | $l4;

        $r0 = staticinvoke <org.apache.poi.hpsf.Util: java.util.Date filetimeToDate(long)>(l6);

        return $r0;
    }

    public static java.util.Date filetimeToDate(long)
    {
        java.util.Date $r0;
        long l0, l1, l2;

        l0 := @parameter0: long;

        l1 = l0 / 10000L;

        l2 = l1 - 11644473600000L;

        $r0 = new java.util.Date;

        specialinvoke $r0.<java.util.Date: void <init>(long)>(l2);

        return $r0;
    }

    public static long dateToFileTime(java.util.Date)
    {
        java.util.Date r0;
        long $l0, l1, $l2;

        r0 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        l1 = $l0 + 11644473600000L;

        $l2 = l1 * 10000L;

        return $l2;
    }

    public static boolean equals(java.util.Collection, java.util.Collection)
    {
        java.lang.Object[] $r1, $r3;
        java.util.Collection r0, r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $r3 = interfaceinvoke r2.<java.util.Collection: java.lang.Object[] toArray()>();

        $z0 = staticinvoke <org.apache.poi.hpsf.Util: boolean internalEquals(java.lang.Object[],java.lang.Object[])>($r1, $r3);

        return $z0;
    }

    public static boolean equals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r2, r3, r5;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r3 := @parameter1: java.lang.Object[];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.lang.Object[]) $r1;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        r5 = (java.lang.Object[]) $r4;

        $z0 = staticinvoke <org.apache.poi.hpsf.Util: boolean internalEquals(java.lang.Object[],java.lang.Object[])>(r2, r5);

        return $z0;
    }

    private static boolean internalEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r2;
        int $i0, $i1, i2, i3;
        java.lang.Object r1, r3;
        boolean $z0, z1, z2, z3;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label6;

        r1 = r0[i2];

        z1 = 0;

        z3 = 0;

        z2 = 0;

        i3 = 0;

     label2:
        if z2 != 0 goto label4;

        $i1 = lengthof r0;

        if i3 >= $i1 goto label4;

        r3 = r2[i3];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        r2[i3] = null;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        if z3 != 0 goto label5;

        return 0;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return 1;
    }

    public static byte[] pad4(byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        i4 = $i0 % 4;

        if i4 != 0 goto label1;

        r1 = r0;

        goto label2;

     label1:
        i5 = 4 - i4;

        $i1 = lengthof r0;

        $i2 = $i1 + i5;

        r1 = newarray (byte)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

     label2:
        return r1;
    }

    public static char[] pad4(char[])
    {
        int $i0, $i1, $i2, $i3, i4, i5;
        char[] r0, r1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        i4 = $i0 % 4;

        if i4 != 0 goto label1;

        r1 = r0;

        goto label2;

     label1:
        i5 = 4 - i4;

        $i1 = lengthof r0;

        $i2 = $i1 + i5;

        r1 = newarray (char)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

     label2:
        return r1;
    }

    public static char[] pad4(java.lang.String)
    {
        char[] $r1, $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <org.apache.poi.hpsf.Util: char[] pad4(char[])>($r1);

        return $r2;
    }

    public static java.lang.String toString(java.lang.Throwable)
    {
        java.io.PrintWriter $r1;
        java.lang.Throwable r2;
        java.io.StringWriter $r0;
        java.io.IOException $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r3, $r6, $r7, $r8;

        r2 := @parameter0: java.lang.Throwable;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r1);

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

     label1:
        virtualinvoke $r0.<java.io.StringWriter: void close()>();

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuffer;

        $r6 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not create a stacktrace. Reason: ");

        $r7 = virtualinvoke $r4.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hpsf.Util: long EPOCH_DIFF> = 11644473600000L;

        return;
    }
}
