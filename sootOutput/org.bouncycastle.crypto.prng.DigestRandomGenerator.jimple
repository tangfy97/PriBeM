public class org.bouncycastle.crypto.prng.DigestRandomGenerator extends java.lang.Object implements org.bouncycastle.crypto.prng.RandomGenerator
{
    private static long CYCLE_COUNT;
    private long stateCounter;
    private long seedCounter;
    private org.bouncycastle.crypto.Digest digest;
    private byte[] state;
    private byte[] seed;

    public void <init>(org.bouncycastle.crypto.Digest)
    {
        byte[] $r2, $r3;
        int $i0, $i1;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;
        org.bouncycastle.crypto.Digest r1;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        r1 := @parameter0: org.bouncycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: org.bouncycastle.crypto.Digest digest> = r1;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed> = $r2;

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long seedCounter> = 1L;

        $i1 = interfaceinvoke r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i1];

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] state> = $r3;

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long stateCounter> = 1L;

        return;
    }

    public void addSeedMaterial(byte[])
    {
        java.lang.Throwable $r4;
        byte[] r1, $r2, $r3;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        r1 := @parameter0: byte[];

        entermonitor r0;

     label1:
        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>(r1);

        $r2 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r2);

        $r3 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r3);

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addSeedMaterial(long)
    {
        java.lang.Throwable $r3;
        byte[] $r1, $r2;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;
        long l0;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestAddCounter(long)>(l0);

        $r1 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r2 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r2);

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void nextBytes(byte[])
    {
        int $i0;
        byte[] r1;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void nextBytes(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void nextBytes(byte[], int, int)
    {
        java.lang.Throwable $r4;
        byte[] $r1, r2, $r3;
        byte $b5;
        int i0, i1, i2, $i3, $i4, i6, i7;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        i6 = 0;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void generateState()>();

        i2 = i0 + i1;

        i7 = i0;

     label2:
        if i7 == i2 goto label4;

        $r1 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        $i3 = lengthof $r1;

        if i6 != $i3 goto label3;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void generateState()>();

        i6 = 0;

     label3:
        $r3 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        $i4 = i6;

        i6 = i6 + 1;

        $b5 = $r3[$i4];

        r2[i7] = $b5;

        i7 = i7 + 1;

        goto label2;

     label4:
        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void cycleSeed()
    {
        byte[] $r1, $r2;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;
        long $l0, $l1;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        $r1 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $l0 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long seedCounter>;

        $l1 = $l0 + 1L;

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long seedCounter> = $l1;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestAddCounter(long)>($l0);

        $r2 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r2);

        return;
    }

    private void generateState()
    {
        byte[] $r1, $r2, $r3;
        long $l0, $l1, $l2, $l3, $l4;
        byte $b5;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        $l0 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long stateCounter>;

        $l1 = $l0 + 1L;

        r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long stateCounter> = $l1;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestAddCounter(long)>($l0);

        $r1 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r2 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r2);

        $r3 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r3);

        $l3 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: long stateCounter>;

        $l2 = <org.bouncycastle.crypto.prng.DigestRandomGenerator: long CYCLE_COUNT>;

        $l4 = $l3 % $l2;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label1;

        specialinvoke r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: void cycleSeed()>();

     label1:
        return;
    }

    private void digestAddCounter(long)
    {
        byte $b1;
        int $i0, i3;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;
        long l2;
        org.bouncycastle.crypto.Digest $r1;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        l2 := @parameter0: long;

        i3 = 0;

     label1:
        if i3 == 8 goto label2;

        $r1 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: org.bouncycastle.crypto.Digest digest>;

        $i0 = (int) l2;

        $b1 = (byte) $i0;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: void update(byte)>($b1);

        l2 = l2 >>> 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void digestUpdate(byte[])
    {
        byte[] r1;
        int $i0;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;
        org.bouncycastle.crypto.Digest $r2;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: org.bouncycastle.crypto.Digest digest>;

        $i0 = lengthof r1;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    private void digestDoFinal(byte[])
    {
        byte[] r1;
        org.bouncycastle.crypto.prng.DigestRandomGenerator r0;
        org.bouncycastle.crypto.Digest $r2;

        r0 := @this: org.bouncycastle.crypto.prng.DigestRandomGenerator;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.bouncycastle.crypto.prng.DigestRandomGenerator: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        return;
    }

    static void <clinit>()
    {
        <org.bouncycastle.crypto.prng.DigestRandomGenerator: long CYCLE_COUNT> = 10L;

        return;
    }
}
