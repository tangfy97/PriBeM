public abstract class org.bson.io.OutputBuffer extends java.lang.Object
{

    public void <init>()
    {
        org.bson.io.OutputBuffer r0;

        r0 := @this: org.bson.io.OutputBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract void write(byte[]);

    public abstract void write(byte[], int, int);

    public abstract void write(int);

    public abstract int getPosition();

    public abstract void setPosition(int);

    public abstract void seekEnd();

    public abstract void seekStart();

    public abstract int size();

    public abstract int pipe(java.io.OutputStream) throws java.io.IOException;

    public byte[] toByteArray()
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        org.bson.io.OutputBuffer r1;
        int $i0;
        java.io.IOException $r3;
        java.lang.RuntimeException $r4;

        r1 := @this: org.bson.io.OutputBuffer;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        $i0 = virtualinvoke r1.<org.bson.io.OutputBuffer: int size()>();

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        virtualinvoke r1.<org.bson.io.OutputBuffer: int pipe(java.io.OutputStream)>($r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("should be impossible", $r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String asString()
    {
        byte[] $r2;
        java.lang.String $r0;
        org.bson.io.OutputBuffer r1;

        r1 := @this: org.bson.io.OutputBuffer;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<org.bson.io.OutputBuffer: byte[] toByteArray()>();

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }

    public java.lang.String asString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] $r2;
        org.bson.io.OutputBuffer r1;
        java.lang.String $r0, r3;

        r1 := @this: org.bson.io.OutputBuffer;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<org.bson.io.OutputBuffer: byte[] toByteArray()>();

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, r3);

        return $r0;
    }

    public java.lang.String hex()
    {
        org.bson.io.OutputBuffer r1;
        org.bson.io.OutputBuffer$1 $r2;
        java.lang.StringBuilder $r0;
        java.io.IOException $r4;
        java.lang.String $r3;
        java.lang.RuntimeException $r5;

        r1 := @this: org.bson.io.OutputBuffer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = new org.bson.io.OutputBuffer$1;

        specialinvoke $r2.<org.bson.io.OutputBuffer$1: void <init>(org.bson.io.OutputBuffer,java.lang.StringBuilder)>(r1, $r0);

        virtualinvoke r1.<org.bson.io.OutputBuffer: int pipe(java.io.OutputStream)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("impossible");

        throw $r5;

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String md5()
    {
        byte[] $r4;
        java.security.MessageDigest $r0;
        java.io.IOException $r6;
        java.lang.RuntimeException $r7, $r9;
        org.bson.io.OutputBuffer r2;
        org.bson.io.OutputBuffer$2 $r3;
        java.security.NoSuchAlgorithmException $r8;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;

        r2 := @this: org.bson.io.OutputBuffer;

     label1:
        $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error - this implementation of Java doesn\'t support MD5.");

        throw $r9;

     label4:
        virtualinvoke $r0.<java.security.MessageDigest: void reset()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label5:
        $r3 = new org.bson.io.OutputBuffer$2;

        specialinvoke $r3.<org.bson.io.OutputBuffer$2: void <init>(org.bson.io.OutputBuffer,java.security.MessageDigest)>(r2, $r0);

        virtualinvoke r2.<org.bson.io.OutputBuffer: int pipe(java.io.OutputStream)>($r3);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("impossible");

        throw $r7;

     label8:
        $r4 = virtualinvoke $r0.<java.security.MessageDigest: byte[] digest()>();

        $r5 = staticinvoke <com.mongodb.util.Util: java.lang.String toHex(byte[])>($r4);

        return $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void writeInt(int)
    {
        org.bson.io.OutputBuffer r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.bson.io.OutputBuffer;

        i0 := @parameter0: int;

        $i1 = i0 >> 0;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i1);

        $i2 = i0 >> 8;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i2);

        $i3 = i0 >> 16;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i3);

        $i4 = i0 >> 24;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i4);

        return;
    }

    public void writeInt(int, int)
    {
        org.bson.io.OutputBuffer r0;
        int $i0, i1, i2;

        r0 := @this: org.bson.io.OutputBuffer;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.bson.io.OutputBuffer: int getPosition()>();

        virtualinvoke r0.<org.bson.io.OutputBuffer: void setPosition(int)>(i1);

        virtualinvoke r0.<org.bson.io.OutputBuffer: void writeInt(int)>(i2);

        virtualinvoke r0.<org.bson.io.OutputBuffer: void setPosition(int)>($i0);

        return;
    }

    public void writeLong(long)
    {
        byte $b4, $b8, $b12, $b16, $b20, $b24, $b28, $b32;
        org.bson.io.OutputBuffer r0;
        long l0, $l1, $l2, $l5, $l6, $l9, $l10, $l13, $l14, $l17, $l18, $l21, $l22, $l25, $l26, $l29, $l30;
        int $i3, $i7, $i11, $i15, $i19, $i23, $i27, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;

        r0 := @this: org.bson.io.OutputBuffer;

        l0 := @parameter0: long;

        $l1 = l0 >> 0;

        $l2 = 255L & $l1;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        $i33 = (int) $b4;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i33);

        $l5 = l0 >> 8;

        $l6 = 255L & $l5;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        $i34 = (int) $b8;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i34);

        $l9 = l0 >> 16;

        $l10 = 255L & $l9;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $i35 = (int) $b12;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i35);

        $l13 = l0 >> 24;

        $l14 = 255L & $l13;

        $i15 = (int) $l14;

        $b16 = (byte) $i15;

        $i36 = (int) $b16;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i36);

        $l17 = l0 >> 32;

        $l18 = 255L & $l17;

        $i19 = (int) $l18;

        $b20 = (byte) $i19;

        $i37 = (int) $b20;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i37);

        $l21 = l0 >> 40;

        $l22 = 255L & $l21;

        $i23 = (int) $l22;

        $b24 = (byte) $i23;

        $i38 = (int) $b24;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i38);

        $l25 = l0 >> 48;

        $l26 = 255L & $l25;

        $i27 = (int) $l26;

        $b28 = (byte) $i27;

        $i39 = (int) $b28;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i39);

        $l29 = l0 >> 56;

        $l30 = 255L & $l29;

        $i31 = (int) $l30;

        $b32 = (byte) $i31;

        $i40 = (int) $b32;

        virtualinvoke r0.<org.bson.io.OutputBuffer: void write(int)>($i40);

        return;
    }

    public void writeDouble(double)
    {
        long $l0;
        org.bson.io.OutputBuffer r0;
        double d0;

        r0 := @this: org.bson.io.OutputBuffer;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        virtualinvoke r0.<org.bson.io.OutputBuffer: void writeLong(long)>($l0);

        return;
    }

    public java.lang.String toString()
    {
        org.bson.io.OutputBuffer r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r7, $r8;
        java.lang.Class $r2;
        java.lang.String $r3, $r9;

        r1 := @this: org.bson.io.OutputBuffer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size: ");

        $i0 = virtualinvoke r1.<org.bson.io.OutputBuffer: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pos: ");

        $i1 = virtualinvoke r1.<org.bson.io.OutputBuffer: int getPosition()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
