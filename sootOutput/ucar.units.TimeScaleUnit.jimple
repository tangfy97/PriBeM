public final class ucar.units.TimeScaleUnit extends ucar.units.UnitImpl
{
    private static final long serialVersionUID;
    private final ucar.units.Unit _unit;
    private final java.util.Date _origin;
    private static final java.text.SimpleDateFormat dateFormat;
    private static final ucar.units.BaseUnit SECOND;

    public void <init>(ucar.units.Unit, java.util.Date) throws ucar.units.BadUnitException, ucar.units.UnitSystemException
    {
        ucar.units.Unit r1;
        ucar.units.TimeScaleUnit r0;
        java.util.Date r2;

        r0 := @this: ucar.units.TimeScaleUnit;

        r1 := @parameter0: ucar.units.Unit;

        r2 := @parameter1: java.util.Date;

        specialinvoke r0.<ucar.units.TimeScaleUnit: void <init>(ucar.units.Unit,java.util.Date,ucar.units.UnitName)>(r1, r2, null);

        return;
    }

    public void <init>(ucar.units.Unit, java.util.Date, ucar.units.UnitName) throws ucar.units.BadUnitException, ucar.units.UnitSystemException
    {
        ucar.units.UnitName r1;
        ucar.units.TimeScaleUnit r0;
        ucar.units.RegularBaseQuantity $r4;
        java.util.Date r6;
        ucar.units.Unit r2;
        ucar.units.UnitSystem $r3;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        ucar.units.BaseUnit $r5;
        java.lang.String $r12;
        ucar.units.BadUnitException $r7;
        boolean $z0;

        r0 := @this: ucar.units.TimeScaleUnit;

        r2 := @parameter0: ucar.units.Unit;

        r6 := @parameter1: java.util.Date;

        r1 := @parameter2: ucar.units.UnitName;

        specialinvoke r0.<ucar.units.UnitImpl: void <init>(ucar.units.UnitName)>(r1);

        $r3 = staticinvoke <ucar.units.UnitSystemManager: ucar.units.UnitSystem instance()>();

        $r4 = <ucar.units.BaseQuantity: ucar.units.RegularBaseQuantity TIME>;

        $r5 = interfaceinvoke $r3.<ucar.units.UnitSystem: ucar.units.BaseUnit getBaseUnit(ucar.units.BaseQuantity)>($r4);

        $z0 = interfaceinvoke r2.<ucar.units.Unit: boolean isCompatible(ucar.units.Unit)>($r5);

        if $z0 != 0 goto label1;

        $r7 = new ucar.units.BadUnitException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not a unit of time");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<ucar.units.BadUnitException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        r0.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit> = r2;

        r0.<ucar.units.TimeScaleUnit: java.util.Date _origin> = r6;

        return;
    }

    static ucar.units.Unit getInstance(ucar.units.Unit, java.util.Date) throws ucar.units.ShiftException
    {
        java.lang.Throwable $r6;
        ucar.units.ShiftException $r5, $r7;
        ucar.units.TimeScaleUnit $r2, $r8;
        java.util.Date r1;
        ucar.units.Unit r0, $r3;
        java.lang.Exception $r4;
        boolean $z0;

        r0 := @parameter0: ucar.units.Unit;

        r1 := @parameter1: java.util.Date;

     label1:
        $z0 = r0 instanceof ucar.units.TimeScaleUnit;

        if $z0 == 0 goto label2;

        $r8 = new ucar.units.TimeScaleUnit;

        $r2 = (ucar.units.TimeScaleUnit) r0;

        $r3 = $r2.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        specialinvoke $r8.<ucar.units.TimeScaleUnit: void <init>(ucar.units.Unit,java.util.Date)>($r3, r1);

        goto label3;

     label2:
        $r8 = new ucar.units.TimeScaleUnit;

        specialinvoke $r8.<ucar.units.TimeScaleUnit: void <init>(ucar.units.Unit,java.util.Date)>(r0, r1);

     label3:
        return $r8;

     label4:
        $r4 := @caughtexception;

        $r5 = new ucar.units.ShiftException;

        specialinvoke $r5.<ucar.units.ShiftException: void <init>(ucar.units.Unit,java.util.Date)>(r0, r1);

        $r6 = virtualinvoke $r5.<ucar.units.ShiftException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        $r7 = (ucar.units.ShiftException) $r6;

        throw $r7;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public ucar.units.Unit getUnit()
    {
        ucar.units.Unit $r1;
        ucar.units.TimeScaleUnit r0;

        r0 := @this: ucar.units.TimeScaleUnit;

        $r1 = r0.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        return $r1;
    }

    public java.util.Date getOrigin()
    {
        ucar.units.TimeScaleUnit r0;
        java.util.Date $r1;

        r0 := @this: ucar.units.TimeScaleUnit;

        $r1 = r0.<ucar.units.TimeScaleUnit: java.util.Date _origin>;

        return $r1;
    }

    public ucar.units.Unit clone(ucar.units.UnitName)
    {
        ucar.units.UnitException $r5;
        ucar.units.UnitName r4;
        ucar.units.TimeScaleUnit $r0, r1, r6;
        java.util.Date $r3;
        ucar.units.Unit $r2;

        r1 := @this: ucar.units.TimeScaleUnit;

        r4 := @parameter0: ucar.units.UnitName;

     label1:
        $r0 = new ucar.units.TimeScaleUnit;

        $r2 = virtualinvoke r1.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $r3 = virtualinvoke r1.<ucar.units.TimeScaleUnit: java.util.Date getOrigin()>();

        specialinvoke $r0.<ucar.units.TimeScaleUnit: void <init>(ucar.units.Unit,java.util.Date,ucar.units.UnitName)>($r2, $r3, r4);

        r6 = $r0;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = null;

     label4:
        return r6;

        catch ucar.units.UnitException from label1 to label2 with label3;
    }

    public ucar.units.Unit shiftTo(double) throws ucar.units.ShiftException
    {
        java.lang.Throwable $r9, $r15;
        java.util.Date $r0, $r2;
        long $l0, $l1, $l2;
        java.lang.AssertionError $r12;
        ucar.units.UnitSystemException $r7;
        double d0, $d1, $d2;
        ucar.units.ShiftException $r8, $r10, $r14, $r16;
        ucar.units.TimeScaleUnit r1, $r5;
        ucar.units.Unit $r4, $r6;
        ucar.units.ConversionException $r13;
        ucar.units.BaseUnit $r3;
        ucar.units.BadUnitException $r11;

        r1 := @this: ucar.units.TimeScaleUnit;

        d0 := @parameter0: double;

     label1:
        $r0 = new java.util.Date;

        $r2 = r1.<ucar.units.TimeScaleUnit: java.util.Date _origin>;

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $r4 = r1.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        $r3 = <ucar.units.TimeScaleUnit: ucar.units.BaseUnit SECOND>;

        $d1 = interfaceinvoke $r4.<ucar.units.Unit: double convertTo(double,ucar.units.Unit)>(d0, $r3);

        $d2 = $d1 * 1000.0;

        $l1 = (long) $d2;

        $l2 = $l0 + $l1;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l2);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new ucar.units.ShiftException;

        specialinvoke $r14.<ucar.units.ShiftException: void <init>(ucar.units.Unit,double)>(r1, d0);

        $r15 = virtualinvoke $r14.<ucar.units.ShiftException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        $r16 = (ucar.units.ShiftException) $r15;

        throw $r16;

     label4:
        $r5 = new ucar.units.TimeScaleUnit;

        $r6 = r1.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        specialinvoke $r5.<ucar.units.TimeScaleUnit: void <init>(ucar.units.Unit,java.util.Date)>($r6, $r0);

     label5:
        return $r5;

     label6:
        $r11 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label7:
        $r7 := @caughtexception;

        $r8 = new ucar.units.ShiftException;

        specialinvoke $r8.<ucar.units.ShiftException: void <init>(ucar.units.Unit,double)>(r1, d0);

        $r9 = virtualinvoke $r8.<ucar.units.ShiftException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        $r10 = (ucar.units.ShiftException) $r9;

        throw $r10;

        catch ucar.units.ConversionException from label1 to label2 with label3;
        catch ucar.units.BadUnitException from label4 to label5 with label6;
        catch ucar.units.UnitSystemException from label4 to label5 with label7;
    }

    public ucar.units.Unit shiftTo(java.util.Date) throws ucar.units.ShiftException
    {
        ucar.units.TimeScaleUnit r0;
        java.util.Date r1;
        ucar.units.Unit $r2, $r3;

        r0 := @this: ucar.units.TimeScaleUnit;

        r1 := @parameter0: java.util.Date;

        $r2 = r0.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        $r3 = staticinvoke <ucar.units.TimeScaleUnit: ucar.units.Unit getInstance(ucar.units.Unit,java.util.Date)>($r2, r1);

        return $r3;
    }

    protected ucar.units.Unit myMultiplyBy(ucar.units.Unit) throws ucar.units.MultiplyException
    {
        ucar.units.Unit r2;
        ucar.units.MultiplyException $r0;
        ucar.units.TimeScaleUnit r1;

        r1 := @this: ucar.units.TimeScaleUnit;

        r2 := @parameter0: ucar.units.Unit;

        $r0 = new ucar.units.MultiplyException;

        specialinvoke $r0.<ucar.units.MultiplyException: void <init>(ucar.units.Unit)>(r1);

        throw $r0;
    }

    protected ucar.units.Unit myDivideBy(ucar.units.Unit) throws ucar.units.DivideException
    {
        ucar.units.Unit r2;
        ucar.units.DivideException $r0;
        ucar.units.TimeScaleUnit r1;

        r1 := @this: ucar.units.TimeScaleUnit;

        r2 := @parameter0: ucar.units.Unit;

        $r0 = new ucar.units.DivideException;

        specialinvoke $r0.<ucar.units.DivideException: void <init>(ucar.units.Unit)>(r1);

        throw $r0;
    }

    protected ucar.units.Unit myDivideInto(ucar.units.Unit) throws ucar.units.DivideException
    {
        ucar.units.Unit r1;
        ucar.units.DivideException $r0;
        ucar.units.TimeScaleUnit r2;

        r2 := @this: ucar.units.TimeScaleUnit;

        r1 := @parameter0: ucar.units.Unit;

        $r0 = new ucar.units.DivideException;

        specialinvoke $r0.<ucar.units.DivideException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r1, r2);

        throw $r0;
    }

    protected ucar.units.Unit myRaiseTo(int) throws ucar.units.RaiseException
    {
        int i0;
        ucar.units.RaiseException $r0;
        ucar.units.TimeScaleUnit r1;

        r1 := @this: ucar.units.TimeScaleUnit;

        i0 := @parameter0: int;

        $r0 = new ucar.units.RaiseException;

        specialinvoke $r0.<ucar.units.RaiseException: void <init>(ucar.units.Unit)>(r1);

        throw $r0;
    }

    public ucar.units.DerivedUnit getDerivedUnit()
    {
        ucar.units.Unit $r1;
        ucar.units.DerivedUnit $r2;
        ucar.units.TimeScaleUnit r0;

        r0 := @this: ucar.units.TimeScaleUnit;

        $r1 = virtualinvoke r0.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $r2 = interfaceinvoke $r1.<ucar.units.Unit: ucar.units.DerivedUnit getDerivedUnit()>();

        return $r2;
    }

    public ucar.units.Converter getConverterTo(ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Unit r2;
        ucar.units.TimeScaleUnit$MyConverter $r0;
        ucar.units.TimeScaleUnit r1;

        r1 := @this: ucar.units.TimeScaleUnit;

        r2 := @parameter0: ucar.units.Unit;

        $r0 = new ucar.units.TimeScaleUnit$MyConverter;

        specialinvoke $r0.<ucar.units.TimeScaleUnit$MyConverter: void <init>(ucar.units.TimeScaleUnit,ucar.units.Unit)>(r1, r2);

        return $r0;
    }

    public final boolean isCompatible(ucar.units.Unit)
    {
        ucar.units.Unit r0;
        ucar.units.TimeScaleUnit r1;
        boolean $z0;

        r1 := @this: ucar.units.TimeScaleUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.TimeScaleUnit;

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.units.TimeScaleUnit r0, r2;
        java.util.Date $r3, $r4;
        ucar.units.Unit $r5, $r6;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.units.TimeScaleUnit;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof ucar.units.TimeScaleUnit;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (ucar.units.TimeScaleUnit) r1;

        $r4 = r0.<ucar.units.TimeScaleUnit: java.util.Date _origin>;

        $r3 = r2.<ucar.units.TimeScaleUnit: java.util.Date _origin>;

        $z1 = virtualinvoke $r4.<java.util.Date: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        $r5 = r2.<ucar.units.TimeScaleUnit: ucar.units.Unit _unit>;

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        ucar.units.TimeScaleUnit r0;
        java.util.Date $r2;
        ucar.units.Unit $r1;
        int $i0, $i1, $i2;

        r0 := @this: ucar.units.TimeScaleUnit;

        $r1 = virtualinvoke r0.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = virtualinvoke r0.<ucar.units.TimeScaleUnit: java.util.Date getOrigin()>();

        $i1 = virtualinvoke $r2.<java.util.Date: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean isDimensionless()
    {
        ucar.units.TimeScaleUnit r0;

        r0 := @this: ucar.units.TimeScaleUnit;

        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1, $r2;
        ucar.units.TimeScaleUnit r0;

        r0 := @this: ucar.units.TimeScaleUnit;

        $r1 = specialinvoke r0.<ucar.units.UnitImpl: java.lang.String toString()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.TimeScaleUnit: java.lang.String getCanonicalString()>();

     label2:
        return $r2;
    }

    public java.lang.String getCanonicalString()
    {
        ucar.units.TimeScaleUnit r1;
        java.util.Date $r6;
        ucar.units.Unit $r2;
        java.text.SimpleDateFormat $r5;
        java.lang.StringBuilder $r0, $r4, $r8;
        java.lang.String $r3, $r7, $r9;

        r1 := @this: ucar.units.TimeScaleUnit;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = <ucar.units.TimeScaleUnit: java.text.SimpleDateFormat dateFormat>;

        $r6 = virtualinvoke r1.<ucar.units.TimeScaleUnit: java.util.Date getOrigin()>();

        $r7 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.util.Calendar $r1;
        ucar.units.TimeScaleUnit $r2;
        java.util.TimeZone $r0;
        java.util.Date $r4;
        java.lang.String[] r5;
        ucar.units.BaseUnit $r3;

        r5 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r0);

        virtualinvoke $r1.<java.util.Calendar: void clear()>();

        virtualinvoke $r1.<java.util.Calendar: void set(int,int,int)>(1970, 0, 1);

        $r2 = new ucar.units.TimeScaleUnit;

        $r3 = <ucar.units.TimeScaleUnit: ucar.units.BaseUnit SECOND>;

        $r4 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        specialinvoke $r2.<ucar.units.TimeScaleUnit: void <init>(ucar.units.Unit,java.util.Date)>($r3, $r4);

        return;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r11;
        ucar.units.UnitName $r6;
        ucar.units.RegularBaseQuantity $r7;
        java.util.TimeZone $r4;
        java.text.SimpleDateFormat $r2, $r3, $r5;
        java.lang.Exception $r9;
        java.util.Locale $r0;
        ucar.units.BaseUnit $r8;
        java.text.DateFormat $r1;
        java.lang.ExceptionInInitializerError $r10, $r12;

        <ucar.units.TimeScaleUnit: long serialVersionUID> = 1L;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $r1 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(3, $r0);

        $r2 = (java.text.SimpleDateFormat) $r1;

        <ucar.units.TimeScaleUnit: java.text.SimpleDateFormat dateFormat> = $r2;

        $r3 = <ucar.units.TimeScaleUnit: java.text.SimpleDateFormat dateFormat>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        $r5 = <ucar.units.TimeScaleUnit: java.text.SimpleDateFormat dateFormat>;

        virtualinvoke $r5.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(" \'since\' yyyy-MM-dd HH:mm:ss.SSS \'UTC\'");

     label1:
        $r6 = staticinvoke <ucar.units.UnitName: ucar.units.UnitName newUnitName(java.lang.String,java.lang.String,java.lang.String)>("second", null, "s");

        $r7 = <ucar.units.BaseQuantity: ucar.units.RegularBaseQuantity TIME>;

        $r8 = staticinvoke <ucar.units.BaseUnit: ucar.units.BaseUnit getOrCreate(ucar.units.UnitName,ucar.units.BaseQuantity)>($r6, $r7);

        <ucar.units.TimeScaleUnit: ucar.units.BaseUnit SECOND> = $r8;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.ExceptionInInitializerError;

        specialinvoke $r10.<java.lang.ExceptionInInitializerError: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.ExceptionInInitializerError: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        $r12 = (java.lang.ExceptionInInitializerError) $r11;

        throw $r12;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
