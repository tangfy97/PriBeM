public class org.apache.jena.riot.RiotReader extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.riot.RiotReader r0;

        r0 := @this: org.apache.jena.riot.RiotReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void parse(java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.StreamRDF r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.lang.String,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r0, null, null, r1);

        return;
    }

    public static void parse(java.lang.String, org.apache.jena.riot.Lang, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang r1;
        org.apache.jena.riot.system.StreamRDF r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.riot.Lang;

        r2 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.lang.String,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r0, r1, null, r2);

        return;
    }

    public static void parse(java.lang.String, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang $r5, r6;
        org.apache.jena.riot.system.StreamRDF r4;
        java.lang.String r0, r2, $r3;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.jena.riot.Lang;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.system.StreamRDF;

        if r6 != null goto label1;

        $r5 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        r6 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String,org.apache.jena.riot.Lang)>(r0, $r5);

     label1:
        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.InputStream openFile(java.lang.String)>(r0);

        $r3 = staticinvoke <org.apache.jena.riot.SysRIOT: java.lang.String chooseBaseIRI(java.lang.String,java.lang.String)>(r2, r0);

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>($r1, r6, $r3, r4);

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r1);

        return;
    }

    public static void parse(java.io.InputStream, org.apache.jena.riot.Lang, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang r1;
        org.apache.jena.riot.system.StreamRDF r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.jena.riot.Lang;

        r2 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r0, r1, null, r2);

        return;
    }

    public static void parse(java.io.InputStream, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang r1;
        org.apache.jena.riot.lang.LangRIOT $r4;
        org.apache.jena.riot.system.StreamRDF r3;
        java.lang.String r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.jena.riot.Lang;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.jena.riot.system.StreamRDF;

        $r4 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRIOT createParser(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r0, r1, r2, r3);

        interfaceinvoke $r4.<org.apache.jena.riot.lang.LangRIOT: void parse()>();

        return;
    }

    public static org.apache.jena.riot.lang.LangRIOT createParser(java.io.InputStream, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang r0, $r1, $r2;
        org.apache.jena.riot.system.StreamRDF r4;
        org.apache.jena.atlas.io.PeekReader $r6;
        org.apache.jena.riot.lang.LangRIOT $r5;
        org.apache.jena.riot.system.ErrorHandler $r7;
        org.apache.jena.riot.tokens.Tokenizer $r10;
        org.apache.jena.riot.lang.LangRDFXML $r8;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON $r11;
        java.lang.String r9;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

        r0 := @parameter1: org.apache.jena.riot.Lang;

        r9 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.system.StreamRDF;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFXML>;

        if r0 != $r1 goto label2;

        if r9 == null goto label1;

        r9 = staticinvoke <org.apache.jena.riot.system.IRIResolver: java.lang.String resolveString(java.lang.String)>(r9);

     label1:
        $r7 = staticinvoke <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler getDefaultErrorHandler()>();

        $r8 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML: org.apache.jena.riot.lang.LangRDFXML create(java.io.InputStream,java.lang.String,java.lang.String,org.apache.jena.riot.system.ErrorHandler,org.apache.jena.riot.system.StreamRDF)>(r3, r9, r9, $r7, r4);

        return $r8;

     label2:
        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        if r0 != $r2 goto label3;

        $r11 = new org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r10 = $r11;

        $r6 = staticinvoke <org.apache.jena.atlas.io.PeekReader: org.apache.jena.atlas.io.PeekReader makeUTF8(java.io.InputStream)>(r3);

        specialinvoke $r11.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void <init>(org.apache.jena.atlas.io.PeekReader)>($r6);

        goto label4;

     label3:
        $r10 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerUTF8(java.io.InputStream)>(r3);

     label4:
        $r5 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRIOT createParser(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>($r10, r0, r9, r4);

        return $r5;
    }

    public static org.apache.jena.riot.lang.LangRIOT createParser(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.RiotException $r18;
        org.apache.jena.riot.lang.LangTriG $r14;
        org.apache.jena.riot.lang.LangRDFJSON $r16;
        java.lang.String r4;
        org.apache.jena.riot.lang.LangNull $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.jena.riot.Lang r0, $r1, $r2, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.jena.riot.system.StreamRDF r5;
        org.apache.jena.riot.lang.LangTurtle $r6;
        org.apache.jena.riot.lang.LangNQuads $r15;
        org.apache.jena.riot.tokens.Tokenizer r3;
        org.apache.jena.riot.lang.LangNTriples $r17;

        r3 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r0 := @parameter1: org.apache.jena.riot.Lang;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.jena.riot.system.StreamRDF;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFXML>;

        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r1, r0);

        if $z0 == 0 goto label1;

        $r18 = new org.apache.jena.riot.RiotException;

        specialinvoke $r18.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>("Not possible - can\'t parse RDF/XML from a RIOT token stream");

        throw $r18;

     label1:
        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        $z1 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r2, r0);

        if $z1 != 0 goto label2;

        $r7 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang N3>;

        $z2 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r7, r0);

        if $z2 == 0 goto label3;

     label2:
        $r6 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangTurtle createParserTurtle(org.apache.jena.riot.tokens.Tokenizer,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r3, r4, r5);

        return $r6;

     label3:
        $r8 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        $z3 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r8, r0);

        if $z3 == 0 goto label4;

        $r17 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangNTriples createParserNTriples(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.StreamRDF)>(r3, r5);

        return $r17;

     label4:
        $r9 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        $z4 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r9, r0);

        if $z4 == 0 goto label5;

        $r16 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRDFJSON createParserRdfJson(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.StreamRDF)>(r3, r5);

        return $r16;

     label5:
        $r10 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $z5 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r10, r0);

        if $z5 == 0 goto label6;

        $r15 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangNQuads createParserNQuads(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.StreamRDF)>(r3, r5);

        return $r15;

     label6:
        $r11 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TRIG>;

        $z6 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r11, r0);

        if $z6 == 0 goto label7;

        $r14 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangTriG createParserTriG(org.apache.jena.riot.tokens.Tokenizer,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r3, r4, r5);

        return $r14;

     label7:
        $r12 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFNULL>;

        $z7 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r12, r0);

        if $z7 == 0 goto label8;

        $r13 = new org.apache.jena.riot.lang.LangNull;

        specialinvoke $r13.<org.apache.jena.riot.lang.LangNull: void <init>()>();

        return $r13;

     label8:
        return null;
    }

    public static void parseTriples(java.lang.String, org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.atlas.lib.Sink;

        staticinvoke <org.apache.jena.riot.RiotReader: void parseTriples(java.lang.String,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.atlas.lib.Sink)>(r0, null, null, r1);

        return;
    }

    public static void parseTriples(java.lang.String, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r0;
        org.apache.jena.riot.Lang r3;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2, r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.jena.riot.Lang;

        r4 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.jena.atlas.lib.Sink;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF sinkTriples(org.apache.jena.atlas.lib.Sink)>(r0);

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.lang.String,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r2, r3, r4, $r1);

        return;
    }

    public static void parseTriples(java.io.InputStream, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r0;
        org.apache.jena.riot.Lang r3;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r4;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.jena.riot.Lang;

        r4 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.jena.atlas.lib.Sink;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF sinkTriples(org.apache.jena.atlas.lib.Sink)>(r0);

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r2, r3, r4, $r1);

        return;
    }

    public static void parseQuads(java.lang.String, org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.atlas.lib.Sink;

        staticinvoke <org.apache.jena.riot.RiotReader: void parseQuads(java.lang.String,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.atlas.lib.Sink)>(r0, null, null, r1);

        return;
    }

    public static void parseQuads(java.lang.String, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r0;
        org.apache.jena.riot.Lang r3;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2, r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.jena.riot.Lang;

        r4 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.jena.atlas.lib.Sink;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF sinkQuads(org.apache.jena.atlas.lib.Sink)>(r0);

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.lang.String,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r2, r3, r4, $r1);

        return;
    }

    public static void parseQuads(java.io.InputStream, org.apache.jena.riot.Lang, java.lang.String, org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r0;
        org.apache.jena.riot.Lang r3;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r4;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.jena.riot.Lang;

        r4 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.jena.atlas.lib.Sink;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF sinkQuads(org.apache.jena.atlas.lib.Sink)>(r0);

        staticinvoke <org.apache.jena.riot.RiotReader: void parse(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r2, r3, r4, $r1);

        return;
    }

    public static java.util.Iterator createIteratorTriples(java.io.InputStream, org.apache.jena.riot.Lang, java.lang.String)
    {
        org.apache.jena.riot.Lang r0, $r1;
        org.apache.jena.atlas.iterator.IteratorResourceClosing $r8;
        org.apache.jena.riot.lang.PipedRDFIterator $r2;
        org.apache.jena.riot.lang.PipedTriplesStream $r3;
        org.apache.jena.riot.RiotReader$1 $r5;
        java.lang.Thread $r4;
        org.apache.jena.riot.lang.LangNTriples $r9;
        java.lang.String r7;
        boolean $z0;
        java.io.InputStream r6;

        r6 := @parameter0: java.io.InputStream;

        r0 := @parameter1: org.apache.jena.riot.Lang;

        r7 := @parameter2: java.lang.String;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r1, r0);

        if $z0 == 0 goto label1;

        $r8 = new org.apache.jena.atlas.iterator.IteratorResourceClosing;

        $r9 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangNTriples createParserNTriples(java.io.InputStream,org.apache.jena.riot.system.StreamRDF)>(r6, null);

        specialinvoke $r8.<org.apache.jena.atlas.iterator.IteratorResourceClosing: void <init>(java.util.Iterator,java.io.Closeable)>($r9, r6);

        return $r8;

     label1:
        $r2 = new org.apache.jena.riot.lang.PipedRDFIterator;

        specialinvoke $r2.<org.apache.jena.riot.lang.PipedRDFIterator: void <init>()>();

        $r3 = new org.apache.jena.riot.lang.PipedTriplesStream;

        specialinvoke $r3.<org.apache.jena.riot.lang.PipedTriplesStream: void <init>(org.apache.jena.riot.lang.PipedRDFIterator)>($r2);

        $r4 = new java.lang.Thread;

        $r5 = new org.apache.jena.riot.RiotReader$1;

        specialinvoke $r5.<org.apache.jena.riot.RiotReader$1: void <init>(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.lang.PipedTriplesStream)>(r6, r0, r7, $r3);

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return $r2;
    }

    public static java.util.Iterator createIteratorQuads(java.io.InputStream, org.apache.jena.riot.Lang, java.lang.String)
    {
        org.apache.jena.riot.Lang r0, $r1;
        org.apache.jena.atlas.iterator.IteratorResourceClosing $r8;
        org.apache.jena.riot.lang.PipedRDFIterator $r2;
        org.apache.jena.riot.lang.LangNQuads $r9;
        org.apache.jena.riot.RiotReader$2 $r5;
        java.lang.Thread $r4;
        java.lang.String r7;
        org.apache.jena.riot.lang.PipedQuadsStream $r3;
        boolean $z0;
        java.io.InputStream r6;

        r6 := @parameter0: java.io.InputStream;

        r0 := @parameter1: org.apache.jena.riot.Lang;

        r7 := @parameter2: java.lang.String;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r1, r0);

        if $z0 == 0 goto label1;

        $r8 = new org.apache.jena.atlas.iterator.IteratorResourceClosing;

        $r9 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangNQuads createParserNQuads(java.io.InputStream,org.apache.jena.riot.system.StreamRDF)>(r6, null);

        specialinvoke $r8.<org.apache.jena.atlas.iterator.IteratorResourceClosing: void <init>(java.util.Iterator,java.io.Closeable)>($r9, r6);

        return $r8;

     label1:
        $r2 = new org.apache.jena.riot.lang.PipedRDFIterator;

        specialinvoke $r2.<org.apache.jena.riot.lang.PipedRDFIterator: void <init>()>();

        $r3 = new org.apache.jena.riot.lang.PipedQuadsStream;

        specialinvoke $r3.<org.apache.jena.riot.lang.PipedQuadsStream: void <init>(org.apache.jena.riot.lang.PipedRDFIterator)>($r2);

        $r4 = new java.lang.Thread;

        $r5 = new org.apache.jena.riot.RiotReader$2;

        specialinvoke $r5.<org.apache.jena.riot.RiotReader$2: void <init>(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.lang.PipedQuadsStream)>(r6, r0, r7, $r3);

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return $r2;
    }

    public static org.apache.jena.riot.lang.LangTurtle createParserTurtle(java.io.InputStream, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.tokens.Tokenizer $r1;
        org.apache.jena.riot.system.StreamRDF r3;
        java.lang.String r2;
        java.io.InputStream r0;
        org.apache.jena.riot.lang.LangTurtle $r4;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerUTF8(java.io.InputStream)>(r0);

        $r4 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangTurtle createParserTurtle(org.apache.jena.riot.tokens.Tokenizer,java.lang.String,org.apache.jena.riot.system.StreamRDF)>($r1, r2, r3);

        return $r4;
    }

    public static org.apache.jena.riot.lang.LangTurtle createParserTurtle(org.apache.jena.riot.tokens.Tokenizer, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang $r3;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile $r4;
        org.apache.jena.riot.system.StreamRDF r5;
        java.lang.String r2;
        org.apache.jena.riot.lang.LangTurtle $r0;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.lang.LangTurtle;

        $r3 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String)>($r3, r2);

        specialinvoke $r0.<org.apache.jena.riot.lang.LangTurtle: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, $r4, r5);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LangRDFXML createParserRDFXML(java.io.InputStream, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.ErrorHandler $r1;
        org.apache.jena.riot.lang.LangRDFXML $r3;
        org.apache.jena.riot.system.StreamRDF r2;
        java.lang.String r4;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        if r4 != null goto label1;

        r4 = staticinvoke <org.apache.jena.riot.SysRIOT: java.lang.String chooseBaseIRI()>();

     label1:
        $r1 = staticinvoke <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler getDefaultErrorHandler()>();

        $r3 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML: org.apache.jena.riot.lang.LangRDFXML create(java.io.InputStream,java.lang.String,java.lang.String,org.apache.jena.riot.system.ErrorHandler,org.apache.jena.riot.system.StreamRDF)>(r0, r4, r4, $r1, r2);

        return $r3;
    }

    public static org.apache.jena.riot.lang.LangRDFJSON createParserRdfJson(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang $r2;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile $r3;
        org.apache.jena.riot.lang.LangRDFJSON $r0;
        org.apache.jena.riot.system.StreamRDF r4;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r4 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.lang.LangRDFJSON;

        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        $r3 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String)>($r2, null);

        specialinvoke $r0.<org.apache.jena.riot.lang.LangRDFJSON: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, $r3, r4);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LangRDFJSON createParserRdfJson(java.io.InputStream, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON $r0;
        org.apache.jena.riot.system.StreamRDF r3;
        org.apache.jena.riot.lang.LangRDFJSON $r4;
        org.apache.jena.atlas.io.PeekReader $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r2 = staticinvoke <org.apache.jena.atlas.io.PeekReader: org.apache.jena.atlas.io.PeekReader makeUTF8(java.io.InputStream)>(r1);

        specialinvoke $r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void <init>(org.apache.jena.atlas.io.PeekReader)>($r2);

        $r4 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRDFJSON createParserRdfJson(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.StreamRDF)>($r0, r3);

        return $r4;
    }

    public static org.apache.jena.riot.lang.LangTriG createParserTriG(java.io.InputStream, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangTriG $r4;
        org.apache.jena.riot.tokens.Tokenizer $r1;
        org.apache.jena.riot.system.StreamRDF r3;
        java.lang.String r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerUTF8(java.io.InputStream)>(r0);

        $r4 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangTriG createParserTriG(org.apache.jena.riot.tokens.Tokenizer,java.lang.String,org.apache.jena.riot.system.StreamRDF)>($r1, r2, r3);

        return $r4;
    }

    public static org.apache.jena.riot.lang.LangTriG createParserTriG(org.apache.jena.riot.tokens.Tokenizer, java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangTriG $r0;
        org.apache.jena.riot.Lang $r3;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile $r4;
        org.apache.jena.riot.system.StreamRDF r5;
        java.lang.String r2;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.lang.LangTriG;

        $r3 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TRIG>;

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String)>($r3, r2);

        specialinvoke $r0.<org.apache.jena.riot.lang.LangTriG: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, $r4, r5);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LangNTriples createParserNTriples(java.io.InputStream, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.tokens.Tokenizer $r1;
        org.apache.jena.riot.lang.LangNTriples $r3;
        org.apache.jena.riot.system.StreamRDF r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerASCII(java.io.InputStream)>(r0);

        $r3 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangNTriples createParserNTriples(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.StreamRDF)>($r1, r2);

        return $r3;
    }

    public static org.apache.jena.riot.lang.LangNTriples createParserNTriples(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang $r2;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile $r3;
        org.apache.jena.riot.lang.LangNTriples $r0;
        org.apache.jena.riot.system.StreamRDF r4;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r4 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.lang.LangNTriples;

        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        $r3 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String)>($r2, null);

        specialinvoke $r0.<org.apache.jena.riot.lang.LangNTriples: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, $r3, r4);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LangNQuads createParserNQuads(java.io.InputStream, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangNQuads $r3;
        org.apache.jena.riot.tokens.Tokenizer $r1;
        org.apache.jena.riot.system.StreamRDF r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerASCII(java.io.InputStream)>(r0);

        $r3 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangNQuads createParserNQuads(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.StreamRDF)>($r1, r2);

        return $r3;
    }

    public static org.apache.jena.riot.lang.LangNQuads createParserNQuads(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangNQuads $r0;
        org.apache.jena.riot.Lang $r2;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile $r3;
        org.apache.jena.riot.system.StreamRDF r4;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r4 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.lang.LangNQuads;

        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $r3 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(org.apache.jena.riot.Lang,java.lang.String)>($r2, null);

        specialinvoke $r0.<org.apache.jena.riot.lang.LangNQuads: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, $r3, r4);

        return $r0;
    }
}
