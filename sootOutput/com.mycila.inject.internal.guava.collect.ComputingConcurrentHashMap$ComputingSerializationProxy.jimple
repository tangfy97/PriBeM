final class com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy extends com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$AbstractSerializationProxy
{
    final com.mycila.inject.internal.guava.base.Function computingFunction;
    private static final long serialVersionUID;

    void <init>(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength, com.mycila.inject.internal.guava.base.Equivalence, com.mycila.inject.internal.guava.base.Equivalence, long, long, int, int, com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener, java.util.concurrent.ConcurrentMap, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy r0;
        com.mycila.inject.internal.guava.base.Equivalence r3, r4;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength r1, r2;
        long l0, l1;
        java.util.concurrent.ConcurrentMap r6;
        int i2, i3;
        com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener r5;
        com.mycila.inject.internal.guava.base.Function r7;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength;

        r3 := @parameter2: com.mycila.inject.internal.guava.base.Equivalence;

        r4 := @parameter3: com.mycila.inject.internal.guava.base.Equivalence;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        r5 := @parameter8: com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener;

        r6 := @parameter9: java.util.concurrent.ConcurrentMap;

        r7 := @parameter10: com.mycila.inject.internal.guava.base.Function;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$AbstractSerializationProxy: void <init>(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength,com.mycila.inject.internal.guava.base.Equivalence,com.mycila.inject.internal.guava.base.Equivalence,long,long,int,int,com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener,java.util.concurrent.ConcurrentMap)>(r1, r2, r3, r4, l0, l1, i2, i3, r5, r6);

        r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: com.mycila.inject.internal.guava.base.Function computingFunction> = r7;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy r1;
        java.io.ObjectOutputStream r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: void writeMapTo(java.io.ObjectOutputStream)>(r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy r1;
        com.mycila.inject.internal.guava.collect.MapMaker $r2;
        java.io.ObjectInputStream r0;
        com.mycila.inject.internal.guava.base.Function $r3;
        java.util.concurrent.ConcurrentMap $r4;

        r1 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: com.mycila.inject.internal.guava.collect.MapMaker readMapMaker(java.io.ObjectInputStream)>(r0);

        $r3 = r1.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: com.mycila.inject.internal.guava.base.Function computingFunction>;

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.mycila.inject.internal.guava.base.Function)>($r3);

        r1.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: java.util.concurrent.ConcurrentMap delegate> = $r4;

        virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: void readEntries(java.io.ObjectInputStream)>(r0);

        return;
    }

    java.lang.Object readResolve()
    {
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: java.util.concurrent.ConcurrentMap delegate>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSerializationProxy: long serialVersionUID> = 4L;

        return;
    }
}
