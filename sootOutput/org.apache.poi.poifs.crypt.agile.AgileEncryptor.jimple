public class org.apache.poi.poifs.crypt.agile.AgileEncryptor extends org.apache.poi.poifs.crypt.Encryptor
{
    private final org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder;
    private byte[] integritySalt;
    private javax.crypto.Mac integrityMD;
    private byte[] pwHash;

    protected void <init>(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder)
    {
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r0;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder r1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        r1 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder;

        specialinvoke r0.<org.apache.poi.poifs.crypt.Encryptor: void <init>()>();

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder> = r1;

        return;
    }

    public void confirmPassword(java.lang.String)
    {
        byte[] r9, r10, r11, r12, r13;
        java.security.SecureRandom $r0;
        int $i0, $i1, i2, i3;
        java.lang.String r14;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader $r3, $r5, $r7;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder $r2, $r4, $r6;
        org.apache.poi.poifs.crypt.HashAlgorithm $r8;
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r1;

        r1 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        r14 := @parameter0: java.lang.String;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        $r2 = r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r3 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        $i0 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        $r4 = r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        $i1 = virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getKeySize()>();

        i2 = $i1 / 8;

        $r6 = r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r7 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        $r8 = virtualinvoke $r7.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithmEx()>();

        i3 = $r8.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        r9 = newarray (byte)[$i0];

        r10 = newarray (byte)[$i0];

        r11 = newarray (byte)[$i0];

        r12 = newarray (byte)[i2];

        r13 = newarray (byte)[i3];

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r9);

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r10);

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r11);

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r12);

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r13);

        virtualinvoke r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: void confirmPassword(java.lang.String,byte[],byte[],byte[],byte[],byte[])>(r14, r12, r11, r9, r10, r13);

        return;
    }

    public void confirmPassword(java.lang.String, byte[], byte[], byte[], byte[], byte[])
    {
        byte[] r3, r6, $r9, r10, $r11, $r12, $r14, $r16, $r17, $r18, $r20, r21, $r22, $r23, $r25, r29, $r30, $r31, $r32, $r36, $r37, $r50, $r51, $r55, $r56;
        javax.crypto.spec.SecretKeySpec $r26, $r39;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry r46;
        java.security.GeneralSecurityException $r57;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder $r1, $r4, $r13, $r19, $r24;
        javax.crypto.Mac $r38, $r41, $r52;
        javax.crypto.SecretKey $r49, $r53;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier $r2;
        java.lang.String r8, $r28, $r40;
        org.apache.poi.poifs.crypt.HashAlgorithm $r7;
        org.apache.poi.EncryptedDocumentException $r58;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r27, $r33;
        java.security.cert.X509Certificate $r47, $r54;
        org.apache.poi.poifs.crypt.ChainingMode $r34;
        boolean $z0;
        java.util.List $r43;
        java.security.MessageDigest $r15;
        javax.crypto.Cipher $r35, $r42;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader $r5;
        java.util.Iterator $r44;
        java.security.PublicKey $r48;
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r0;
        java.lang.Object $r45;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        r8 := @parameter0: java.lang.String;

        r21 := @parameter1: byte[];

        r6 := @parameter2: byte[];

        r10 := @parameter3: byte[];

        r3 := @parameter4: byte[];

        r29 := @parameter5: byte[];

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier getVerifier()>();

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setSalt(byte[])>(r3);

        $r4 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setKeySalt(byte[])>(r6);

        $r7 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $i0 = virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        $i1 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: int getSpinCount()>();

        $r9 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] hashPassword(java.lang.String,org.apache.poi.poifs.crypt.HashAlgorithm,byte[],int)>(r8, $r7, r3, $i1);

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: byte[] pwHash> = $r9;

        $r13 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r12 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: byte[] pwHash>;

        $r11 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kVerifierInputBlock>;

        $r14 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder,byte[],byte[],byte[],int)>($r13, $r12, $r11, r10, 1);

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setEncryptedVerifier(byte[])>($r14);

        $r15 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r7);

        $r16 = virtualinvoke $r15.<java.security.MessageDigest: byte[] digest(byte[])>(r10);

        $r19 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r18 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: byte[] pwHash>;

        $r17 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kHashedVerifierBlock>;

        $r20 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder,byte[],byte[],byte[],int)>($r19, $r18, $r17, $r16, 1);

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setEncryptedVerifierHash(byte[])>($r20);

        $r24 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r23 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: byte[] pwHash>;

        $r22 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kCryptoKeyBlock>;

        $r25 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder,byte[],byte[],byte[],int)>($r24, $r23, $r22, r21, 1);

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: void setEncryptedKey(byte[])>($r25);

        $r26 = new javax.crypto.spec.SecretKeySpec;

        $r27 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r28 = $r27.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        specialinvoke $r26.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r21, $r28);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: void setSecretKey(javax.crypto.SecretKey)>($r26);

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: byte[] integritySalt> = r29;

     label1:
        $r30 = virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        $r31 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityKeyBlock>;

        $i2 = virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        $r32 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r7, $r30, $r31, $i2);

        $r33 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r34 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r35 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r26, $r33, $r34, $r32, 1);

        $i3 = lengthof r29;

        $i4 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: int getNextBlockSize(int,int)>($i3, $i0);

        $r36 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>(r29, $i4);

        $r37 = virtualinvoke $r35.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r36);

        virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: void setEncryptedHmacKey(byte[])>($r37);

        $r38 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Mac getMac(org.apache.poi.poifs.crypt.HashAlgorithm)>($r7);

        r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: javax.crypto.Mac integrityMD> = $r38;

        $r41 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: javax.crypto.Mac integrityMD>;

        $r39 = new javax.crypto.spec.SecretKeySpec;

        $r40 = $r7.<org.apache.poi.poifs.crypt.HashAlgorithm: java.lang.String jceHmacId>;

        specialinvoke $r39.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r29, $r40);

        virtualinvoke $r41.<javax.crypto.Mac: void init(java.security.Key)>($r39);

        $r42 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA");

        $r43 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List getCertificates()>();

        $r44 = interfaceinvoke $r43.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r45 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry) $r45;

        $r47 = r46.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509>;

        $r48 = virtualinvoke $r47.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke $r42.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r48);

        $r49 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: javax.crypto.SecretKey getSecretKey()>();

        $r50 = interfaceinvoke $r49.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r51 = virtualinvoke $r42.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r50);

        r46.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] encryptedKey> = $r51;

        $r52 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Mac getMac(org.apache.poi.poifs.crypt.HashAlgorithm)>($r7);

        $r53 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: javax.crypto.SecretKey getSecretKey()>();

        virtualinvoke $r52.<javax.crypto.Mac: void init(java.security.Key)>($r53);

        $r54 = r46.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509>;

        $r55 = virtualinvoke $r54.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r56 = virtualinvoke $r52.<javax.crypto.Mac: byte[] doFinal(byte[])>($r55);

        r46.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] certVerifier> = $r56;

        goto label2;

     label3:
        goto label5;

     label4:
        $r57 := @caughtexception;

        $r58 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r58.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.Throwable)>($r57);

        throw $r58;

     label5:
        return;

        catch java.security.GeneralSecurityException from label1 to label3 with label4;
    }

    public java.io.OutputStream getDataStream(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException, java.security.GeneralSecurityException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode r2;
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r1;
        org.apache.poi.poifs.crypt.agile.AgileEncryptor$ChunkedCipherOutputStream $r0;

        r1 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        r2 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        $r0 = new org.apache.poi.poifs.crypt.agile.AgileEncryptor$ChunkedCipherOutputStream;

        specialinvoke $r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor$ChunkedCipherOutputStream: void <init>(org.apache.poi.poifs.crypt.agile.AgileEncryptor,org.apache.poi.poifs.filesystem.DirectoryNode)>(r1, r2);

        return $r0;
    }

    protected void createEncryptionInfoEntry(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        com.microsoft.schemas.office.x2006.encryption.CTEncryption $r8;
        byte[] $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r39, $r43, $r50, $r51, $r52, r78;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry r77;
        com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor $r48;
        com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum $r16;
        com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor $r11, $r47;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder $r3, $r5, $r41;
        org.apache.poi.poifs.filesystem.DirectoryNode r44;
        com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors $r10;
        java.lang.StringBuilder $r54, $r55, $r56, $r57, $r62, $r63, $r65, $r66, $r69, $r70, $r72, $r73;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier $r4;
        java.security.cert.CertificateEncodingException $r75;
        java.io.ByteArrayOutputStream $r37;
        long $l6, $l8;
        com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor $r12;
        java.lang.String $r15, $r21, $r35, $r36, $r38, $r58, $r67, $r74;
        org.apache.poi.poifs.crypt.agile.AgileEncryptor$1 $r45;
        org.apache.poi.poifs.crypt.HashAlgorithm $r13;
        org.apache.poi.util.LittleEndianByteArrayOutputStream $r40;
        com.microsoft.schemas.office.x2006.encryption.CTKeyData $r9;
        org.apache.poi.EncryptedDocumentException $r53, $r61, $r68, $r76;
        com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum r0, r1;
        com.microsoft.schemas.office.x2006.encryption.EncryptionDocument $r7;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r14, $r71;
        java.security.cert.X509Certificate $r49;
        org.apache.poi.poifs.crypt.ChainingMode $r18, $r64;
        com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum $r22;
        int[] $r17;
        boolean $z0;
        org.apache.poi.poifs.crypt.EncryptionInfo $r42;
        java.util.List $r31;
        com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity $r28;
        java.util.HashMap $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader $r6;
        com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum $r19, $r20, $r59, $r60;
        java.util.Iterator $r32;
        org.apache.xmlbeans.XmlOptions $r33;
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r2;
        java.lang.Object $r46;

        r2 := @this: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        r44 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        r0 = <com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri: com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum HTTP_SCHEMAS_MICROSOFT_COM_OFFICE_2006_KEY_ENCRYPTOR_PASSWORD>;

        r1 = <com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri: com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum HTTP_SCHEMAS_MICROSOFT_COM_OFFICE_2006_KEY_ENCRYPTOR_CERTIFICATE>;

        $r3 = r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r4 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier getVerifier()>();

        $r5 = r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r6 = virtualinvoke $r5.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        $r7 = staticinvoke <com.microsoft.schemas.office.x2006.encryption.EncryptionDocument$Factory: com.microsoft.schemas.office.x2006.encryption.EncryptionDocument newInstance()>();

        $r8 = interfaceinvoke $r7.<com.microsoft.schemas.office.x2006.encryption.EncryptionDocument: com.microsoft.schemas.office.x2006.encryption.CTEncryption addNewEncryption()>();

        $r9 = interfaceinvoke $r8.<com.microsoft.schemas.office.x2006.encryption.CTEncryption: com.microsoft.schemas.office.x2006.encryption.CTKeyData addNewKeyData()>();

        $r10 = interfaceinvoke $r8.<com.microsoft.schemas.office.x2006.encryption.CTEncryption: com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors addNewKeyEncryptors()>();

        $r11 = interfaceinvoke $r10.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors: com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor addNewKeyEncryptor()>();

        interfaceinvoke $r11.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor: void setUri(com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum)>(r0);

        $r12 = interfaceinvoke $r11.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor: com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor addNewEncryptedPasswordKey()>();

        $i0 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: int getSpinCount()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setSpinCount(int)>($i0);

        $i1 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setSaltSize(int)>($i1);

        $i2 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setSaltSize(int)>($i2);

        $i3 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setBlockSize(int)>($i3);

        $i4 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setBlockSize(int)>($i4);

        $i5 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getKeySize()>();

        $l6 = (long) $i5;

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setKeyBits(long)>($l6);

        $i7 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getKeySize()>();

        $l8 = (long) $i7;

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setKeyBits(long)>($l8);

        $r13 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithmEx()>();

        $i9 = $r13.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setHashSize(int)>($i9);

        $i10 = $r13.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setHashSize(int)>($i10);

        $r14 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r15 = $r14.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String xmlId>;

        $r16 = staticinvoke <com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum: com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum forString(java.lang.String)>($r15);

        if $r16 != null goto label01;

        $r68 = new org.apache.poi.EncryptedDocumentException;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CipherAlgorithm ");

        $r71 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported.");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r74);

        throw $r68;

     label01:
        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setCipherAlgorithm(com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum)>($r16);

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setCipherAlgorithm(com.microsoft.schemas.office.x2006.encryption.STCipherAlgorithm$Enum)>($r16);

        $r17 = <org.apache.poi.poifs.crypt.agile.AgileEncryptor$2: int[] $SwitchMap$org$apache$poi$poifs$crypt$ChainingMode>;

        $r18 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $i11 = virtualinvoke $r18.<org.apache.poi.poifs.crypt.ChainingMode: int ordinal()>();

        $i12 = $r17[$i11];

        lookupswitch($i12)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label02:
        $r59 = <com.microsoft.schemas.office.x2006.encryption.STCipherChaining: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum CHAINING_MODE_CBC>;

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setCipherChaining(com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum)>($r59);

        $r60 = <com.microsoft.schemas.office.x2006.encryption.STCipherChaining: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum CHAINING_MODE_CBC>;

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setCipherChaining(com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum)>($r60);

        goto label05;

     label03:
        $r19 = <com.microsoft.schemas.office.x2006.encryption.STCipherChaining: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum CHAINING_MODE_CFB>;

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setCipherChaining(com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum)>($r19);

        $r20 = <com.microsoft.schemas.office.x2006.encryption.STCipherChaining: com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum CHAINING_MODE_CFB>;

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setCipherChaining(com.microsoft.schemas.office.x2006.encryption.STCipherChaining$Enum)>($r20);

        goto label05;

     label04:
        $r61 = new org.apache.poi.EncryptedDocumentException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ChainingMode ");

        $r64 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported.");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r67);

        throw $r61;

     label05:
        $r21 = $r13.<org.apache.poi.poifs.crypt.HashAlgorithm: java.lang.String ecmaString>;

        $r22 = staticinvoke <com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum: com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum forString(java.lang.String)>($r21);

        if $r22 != null goto label06;

        $r53 = new org.apache.poi.EncryptedDocumentException;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HashAlgorithm ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported.");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r58);

        throw $r53;

     label06:
        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setHashAlgorithm(com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum)>($r22);

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setHashAlgorithm(com.microsoft.schemas.office.x2006.encryption.STHashAlgorithm$Enum)>($r22);

        $r23 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        interfaceinvoke $r9.<com.microsoft.schemas.office.x2006.encryption.CTKeyData: void setSaltValue(byte[])>($r23);

        $r24 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getSalt()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setSaltValue(byte[])>($r24);

        $r25 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getEncryptedVerifier()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setEncryptedVerifierHashInput(byte[])>($r25);

        $r26 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getEncryptedVerifierHash()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setEncryptedVerifierHashValue(byte[])>($r26);

        $r27 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getEncryptedKey()>();

        interfaceinvoke $r12.<com.microsoft.schemas.office.x2006.keyEncryptor.password.CTPasswordKeyEncryptor: void setEncryptedKeyValue(byte[])>($r27);

        $r28 = interfaceinvoke $r8.<com.microsoft.schemas.office.x2006.encryption.CTEncryption: com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity addNewDataIntegrity()>();

        $r29 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getEncryptedHmacKey()>();

        interfaceinvoke $r28.<com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity: void setEncryptedHmacKey(byte[])>($r29);

        $r30 = virtualinvoke $r6.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getEncryptedHmacValue()>();

        interfaceinvoke $r28.<com.microsoft.schemas.office.x2006.encryption.CTDataIntegrity: void setEncryptedHmacValue(byte[])>($r30);

        $r31 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List getCertificates()>();

        $r32 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r46 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r77 = (org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry) $r46;

        $r47 = interfaceinvoke $r10.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptors: com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor addNewKeyEncryptor()>();

        interfaceinvoke $r47.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor: void setUri(com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum)>(r1);

        $r48 = interfaceinvoke $r47.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor: com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor addNewEncryptedCertificateKey()>();

     label08:
        $r49 = r77.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509>;

        $r50 = virtualinvoke $r49.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        interfaceinvoke $r48.<com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor: void setX509Certificate(byte[])>($r50);

     label09:
        goto label11;

     label10:
        $r75 := @caughtexception;

        $r76 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r76.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.Throwable)>($r75);

        throw $r76;

     label11:
        $r51 = r77.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] encryptedKey>;

        interfaceinvoke $r48.<com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor: void setEncryptedKeyValue(byte[])>($r51);

        $r52 = r77.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] certVerifier>;

        interfaceinvoke $r48.<com.microsoft.schemas.office.x2006.keyEncryptor.certificate.CTCertificateKeyEncryptor: void setCertVerifier(byte[])>($r52);

        goto label07;

     label12:
        $r33 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r33.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r33.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCharacterEncoding(java.lang.String)>("UTF-8");

        $r34 = new java.util.HashMap;

        specialinvoke $r34.<java.util.HashMap: void <init>()>();

        $r35 = virtualinvoke r0.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum: java.lang.String toString()>();

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, "p");

        $r36 = virtualinvoke r1.<com.microsoft.schemas.office.x2006.encryption.CTKeyEncryptor$Uri$Enum: java.lang.String toString()>();

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, "c");

        virtualinvoke $r33.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setUseDefaultNamespace()>();

        virtualinvoke $r33.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveSuggestedPrefixes(java.util.Map)>($r34);

        virtualinvoke $r33.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveNamespacesFirst()>();

        virtualinvoke $r33.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveAggressiveNamespaces()>();

        virtualinvoke $r33.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveNoXmlDecl()>();

        $r37 = new java.io.ByteArrayOutputStream;

        specialinvoke $r37.<java.io.ByteArrayOutputStream: void <init>()>();

        $r38 = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n";

        $r39 = virtualinvoke $r38.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r37.<java.io.ByteArrayOutputStream: void write(byte[])>($r39);

        interfaceinvoke $r7.<com.microsoft.schemas.office.x2006.encryption.EncryptionDocument: void save(java.io.OutputStream,org.apache.xmlbeans.XmlOptions)>($r37, $r33);

        r78 = newarray (byte)[5000];

        $r40 = new org.apache.poi.util.LittleEndianByteArrayOutputStream;

        specialinvoke $r40.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void <init>(byte[],int)>(r78, 0);

        $r41 = r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r42 = virtualinvoke $r41.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.EncryptionInfo getInfo()>();

        $i13 = virtualinvoke $r42.<org.apache.poi.poifs.crypt.EncryptionInfo: int getVersionMajor()>();

        virtualinvoke $r40.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeShort(int)>($i13);

        $i14 = virtualinvoke $r42.<org.apache.poi.poifs.crypt.EncryptionInfo: int getVersionMinor()>();

        virtualinvoke $r40.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeShort(int)>($i14);

        $i15 = virtualinvoke $r42.<org.apache.poi.poifs.crypt.EncryptionInfo: int getEncryptionFlags()>();

        virtualinvoke $r40.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeInt(int)>($i15);

        $r43 = virtualinvoke $r37.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r40.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void write(byte[])>($r43);

        $i16 = virtualinvoke $r40.<org.apache.poi.util.LittleEndianByteArrayOutputStream: int getWriteIndex()>();

        $r45 = new org.apache.poi.poifs.crypt.agile.AgileEncryptor$1;

        specialinvoke $r45.<org.apache.poi.poifs.crypt.agile.AgileEncryptor$1: void <init>(org.apache.poi.poifs.crypt.agile.AgileEncryptor,byte[])>(r2, r78);

        virtualinvoke r44.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentEntry createDocument(java.lang.String,int,org.apache.poi.poifs.filesystem.POIFSWriterListener)>("EncryptionInfo", $i16, $r45);

        return;

        catch java.security.cert.CertificateEncodingException from label08 to label09 with label10;
    }

    static org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder access$000(org.apache.poi.poifs.crypt.agile.AgileEncryptor)
    {
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r0;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder $r1;

        r0 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        return $r1;
    }

    static javax.crypto.Mac access$100(org.apache.poi.poifs.crypt.agile.AgileEncryptor)
    {
        org.apache.poi.poifs.crypt.agile.AgileEncryptor r0;
        javax.crypto.Mac $r1;

        r0 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileEncryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptor: javax.crypto.Mac integrityMD>;

        return $r1;
    }
}
