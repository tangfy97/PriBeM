class com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference extends java.lang.Object implements com.google.inject.internal.util.$MapMaker$ValueReference
{
    final com.google.inject.internal.util.$MapMaker$ReferenceEntry original;
    final com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry;
    final com.google.inject.internal.util.$MapMaker$StrategyImpl this$0;

    void <init>(com.google.inject.internal.util.$MapMaker$StrategyImpl, com.google.inject.internal.util.$MapMaker$ReferenceEntry, com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r1;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference r0;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r2, r3;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        r1 := @parameter0: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r2 := @parameter1: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        r3 := @parameter2: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$StrategyImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$ReferenceEntry original> = r2;

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry> = r3;

        return;
    }

    public java.lang.Object get()
    {
        java.lang.Throwable $r4;
        java.lang.Object $r3;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference r0;
        com.google.inject.internal.util.$MapMaker$ValueReference $r2;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r1;
        boolean z0;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        z0 = 0;

     label1:
        $r1 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$ReferenceEntry original>;

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()>();

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.util.$MapMaker$ValueReference: java.lang.Object get()>();

        z0 = 1;

     label2:
        if 1 != 0 goto label3;

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: void removeEntry()>();

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

     label5:
        if 0 != 0 goto label6;

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: void removeEntry()>();

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl $r4;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference $r0, r1;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r2, $r3;

        r1 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        r2 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r0 = new com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        $r4 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$StrategyImpl this$0>;

        $r3 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$ReferenceEntry original>;

        specialinvoke $r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: void <init>(com.google.inject.internal.util.$MapMaker$StrategyImpl,com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r4, $r3, r2);

        return $r0;
    }

    public java.lang.Object waitForValue() throws java.lang.InterruptedException
    {
        java.lang.Throwable $r4;
        com.google.inject.internal.util.$MapMaker$StrategyImpl $r2;
        java.lang.Object $r3;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference r0;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r1;
        boolean z0;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        z0 = 0;

     label1:
        $r2 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$StrategyImpl this$0>;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$ReferenceEntry original>;

        $r3 = virtualinvoke $r2.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.lang.Object waitForValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r1);

        z0 = 1;

     label2:
        if 1 != 0 goto label3;

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: void removeEntry()>();

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

     label5:
        if 0 != 0 goto label6;

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: void removeEntry()>();

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void removeEntry()
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals $r3;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference r0;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r2;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$StrategyImpl this$0>;

        $r3 = $r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals>;

        $r2 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry>;

        interfaceinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Internals: boolean removeEntry(java.lang.Object)>($r2);

        return;
    }
}
