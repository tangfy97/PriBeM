public class org.apache.cxf.transport.common.gzip.GZIPOutInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    public static final java.util.regex.Pattern ZERO_Q;
    public static final java.util.regex.Pattern ENCODINGS;
    public static final java.lang.String ORIGINAL_OUTPUT_STREAM_KEY;
    public static final java.lang.String USE_GZIP_KEY;
    public static final java.lang.String GZIP_ENCODING_KEY;
    public static final java.lang.String SOAP_JMS_CONTENTENCODING;
    private static final java.util.ResourceBundle BUNDLE;
    private static final java.util.logging.Logger LOG;
    private int threshold;
    private boolean force;

    public void <init>()
    {
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("prepare-send");

        r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: int threshold> = 1024;

        $r1 = class "Lorg/apache/cxf/interceptor/MessageSenderInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: void addAfter(java.lang.String)>($r2);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("prepare-send");

        r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: int threshold> = 1024;

        $r1 = class "Lorg/apache/cxf/interceptor/MessageSenderInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: void addAfter(java.lang.String)>($r2);

        r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: int threshold> = i0;

        return;
    }

    public void setThreshold(int)
    {
        int i0;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        i0 := @parameter0: int;

        r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: int threshold> = i0;

        return;
    }

    public int getThreshold()
    {
        int $i0;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        $i0 = r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: int threshold>;

        return $i0;
    }

    public void handleMessage(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        java.io.OutputStream r5;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip $r2, $r3, $r9;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$GZipThresholdOutputStream $r8;
        int $i0;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;
        java.lang.Object $r4;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r2 = specialinvoke r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip gzipPermitted(org.apache.cxf.message.Message)>(r1);

        $r3 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip NO>;

        if $r2 == $r3 goto label4;

        $r4 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        r5 = (java.io.OutputStream) $r4;

        if r5 != null goto label1;

        return;

     label1:
        $r6 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String ORIGINAL_OUTPUT_STREAM_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r5);

        $r7 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String USE_GZIP_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r2);

        $r8 = new org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$GZipThresholdOutputStream;

        $i0 = r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: int threshold>;

        $r9 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip FORCE>;

        if $r2 != $r9 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        specialinvoke $r8.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$GZipThresholdOutputStream: void <init>(int,java.io.OutputStream,boolean,org.apache.cxf.message.Message)>($i0, r5, $z0, r1);

        interfaceinvoke r1.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/OutputStream;", $r8);

     label4:
        return;
    }

    private org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip gzipPermitted(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        java.util.regex.Matcher $r39;
        java.util.Map $r7, $r8;
        java.lang.StringBuilder $r9, $r11, $r12, $r42, $r44, $r45;
        java.lang.Object[] $r27;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip r52, $r53;
        java.util.ArrayList $r22, $r23;
        java.util.ResourceBundle $r28;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;
        java.lang.String $r5, $r13, $r29, $r30, $r31, $r32, $r35, r37, $r40, $r41, $r46, $r47, $r49, $r51, $r54, r55;
        org.apache.cxf.message.Exchange $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17, $z18, z19, $z20, z22, $z23, $z24, $z25;
        java.util.logging.Logger $r2, $r10, $r19, $r21, $r43, $r48, $r56;
        java.util.List $r14, $r15, $r17, $r18;
        java.util.regex.Pattern $r34, $r38;
        java.lang.String[] $r36;
        org.apache.cxf.common.i18n.Message $r26;
        java.util.logging.Level $r20, $r57;
        org.apache.cxf.interceptor.Fault $r25;
        int i0, $i1, $i2, $i3, i4;
        java.util.Iterator $r24;
        org.apache.cxf.message.Message r1, $r4;
        java.lang.Object $r6, $r16, $r33, $r50;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip NO>;

        $z0 = virtualinvoke r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r1);

        if $z0 == 0 goto label06;

        $r48 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r48.<java.util.logging.Logger: void fine(java.lang.String)>("Requestor role, so gzip enabled");

        $r49 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String USE_GZIP_KEY>;

        $r50 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>($r49);

        $z11 = $r50 instanceof org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip;

        if $z11 == 0 goto label01;

        r52 = (org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip) $r50;

        goto label05;

     label01:
        $z12 = $r50 instanceof java.lang.String;

        if $z12 == 0 goto label02;

        $r51 = (java.lang.String) $r50;

        r52 = staticinvoke <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip valueOf(java.lang.String)>($r51);

        goto label05;

     label02:
        $z13 = r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: boolean force>;

        if $z13 == 0 goto label03;

        $r53 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip YES>;

        goto label04;

     label03:
        $r53 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip NO>;

     label04:
        r52 = $r53;

     label05:
        $r54 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, "gzip");

        staticinvoke <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: void addHeader(org.apache.cxf.message.Message,java.lang.String,java.lang.String)>(r1, "Accept-Encoding", "gzip;q=1.0, identity; q=0.5, *;q=0");

        goto label32;

     label06:
        $r2 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r2.<java.util.logging.Logger: void fine(java.lang.String)>("Response role, checking accept-encoding");

        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r4 = interfaceinvoke $r3.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r5 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        $r6 = interfaceinvoke $r4.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.util.Map) $r6;

        $r8 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r7);

        if $r8 == null goto label32;

        $r14 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.util.List getHeader(java.util.Map,java.lang.String)>($r8, "Accept-Encoding");

        $r15 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List)>($r14);

        $r16 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("SOAPJMS_contentEncoding");

        $r17 = (java.util.List) $r16;

        $r18 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List)>($r17);

        if $r18 == null goto label07;

        $z10 = interfaceinvoke $r18.<java.util.List: boolean contains(java.lang.Object)>("gzip");

        if $z10 == 0 goto label07;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip YES>;

        $r47 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, "gzip");

     label07:
        if $r15 == null goto label31;

        $r21 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        $r20 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r21.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r20);

        if $z1 == 0 goto label08;

        $r43 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accept-Encoding header: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<java.util.logging.Logger: void fine(java.lang.String)>($r46);

     label08:
        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>(int)>(3);

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>(3);

        $r24 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z14 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label15;

        $r33 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.lang.String) $r33;

        $r34 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.regex.Pattern ENCODINGS>;

        $r35 = virtualinvoke r55.<java.lang.String: java.lang.String trim()>();

        $r36 = virtualinvoke $r34.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r35);

        i0 = lengthof $r36;

        i4 = 0;

     label10:
        if i4 >= i0 goto label14;

        r37 = $r36[i4];

        $r38 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.regex.Pattern ZERO_Q>;

        $r39 = virtualinvoke $r38.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r37);

        $z9 = virtualinvoke $r39.<java.util.regex.Matcher: boolean find()>();

        if $z9 == 0 goto label11;

        $i3 = virtualinvoke $r39.<java.util.regex.Matcher: int start()>();

        $r41 = virtualinvoke r37.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r41);

        goto label13;

     label11:
        $i1 = virtualinvoke r37.<java.lang.String: int indexOf(int)>(59);

        if $i1 < 0 goto label12;

        $i2 = virtualinvoke r37.<java.lang.String: int indexOf(int)>(59);

        $r40 = virtualinvoke r37.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r40);

        goto label13;

     label12:
        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r37);

     label13:
        i4 = i4 + 1;

        goto label10;

     label14:
        goto label09;

     label15:
        $z2 = interfaceinvoke $r22.<java.util.List: boolean contains(java.lang.Object)>("identity");

        if $z2 != 0 goto label17;

        $z7 = interfaceinvoke $r22.<java.util.List: boolean contains(java.lang.Object)>("*");

        if $z7 == 0 goto label16;

        $z8 = interfaceinvoke $r23.<java.util.List: boolean contains(java.lang.Object)>("identity");

        if $z8 == 0 goto label17;

     label16:
        $z15 = 1;

        goto label18;

     label17:
        $z15 = 0;

     label18:
        z16 = $z15;

        $z17 = interfaceinvoke $r23.<java.util.List: boolean contains(java.lang.Object)>("gzip");

        if $z17 != 0 goto label19;

        $z5 = interfaceinvoke $r23.<java.util.List: boolean contains(java.lang.Object)>("*");

        if $z5 == 0 goto label20;

        $z6 = interfaceinvoke $r22.<java.util.List: boolean contains(java.lang.Object)>("gzip");

        if $z6 != 0 goto label20;

     label19:
        $z18 = 1;

        goto label21;

     label20:
        $z18 = 0;

     label21:
        z19 = $z18;

        $z20 = interfaceinvoke $r23.<java.util.List: boolean contains(java.lang.Object)>("x-gzip");

        if $z20 != 0 goto label22;

        $z3 = interfaceinvoke $r23.<java.util.List: boolean contains(java.lang.Object)>("*");

        if $z3 == 0 goto label23;

        $z4 = interfaceinvoke $r22.<java.util.List: boolean contains(java.lang.Object)>("x-gzip");

        if $z4 != 0 goto label23;

     label22:
        $z25 = 1;

        $z24 = 1;

        goto label24;

     label23:
        $z25 = 0;

        $z24 = 0;

     label24:
        z22 = $z24;

        if z16 == 0 goto label25;

        if z19 != 0 goto label25;

        if $z25 != 0 goto label25;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip NO>;

        goto label30;

     label25:
        if z16 == 0 goto label26;

        if z19 == 0 goto label26;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip YES>;

        $r32 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, "gzip");

        goto label30;

     label26:
        if z16 == 0 goto label27;

        if z22 == 0 goto label27;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip YES>;

        $r31 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, "x-gzip");

        goto label30;

     label27:
        if z16 != 0 goto label28;

        if z19 == 0 goto label28;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip FORCE>;

        $r30 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, "gzip");

        goto label30;

     label28:
        if z16 != 0 goto label29;

        if z22 == 0 goto label29;

        r52 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip FORCE>;

        $r29 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY>;

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, "x-gzip");

        goto label30;

     label29:
        $r25 = new org.apache.cxf.interceptor.Fault;

        $r26 = new org.apache.cxf.common.i18n.Message;

        $r28 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.ResourceBundle BUNDLE>;

        $r27 = newarray (java.lang.Object)[0];

        specialinvoke $r26.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("NO_SUPPORTED_ENCODING", $r28, $r27);

        specialinvoke $r25.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message)>($r26);

        throw $r25;

     label30:
        goto label32;

     label31:
        $r19 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r19.<java.util.logging.Logger: void fine(java.lang.String)>("No accept-encoding header");

     label32:
        $r56 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        $r57 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z23 = virtualinvoke $r56.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r57);

        if $z23 == 0 goto label33;

        $r10 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gzip permitted: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r52);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void fine(java.lang.String)>($r13);

     label33:
        return r52;
    }

    private static void addHeader(org.apache.cxf.message.Message, java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r17;
        java.util.Map $r3, $r4, r21;
        int $i0;
        java.lang.String $r1, r5, $r11, r14, $r16, $r20;
        org.apache.cxf.message.Message r0;
        java.util.List $r7, $r8, r22;
        java.util.TreeMap $r18;
        java.lang.Object $r2, $r6, $r10;
        java.lang.StringBuilder $r9, $r12, $r13, $r15;
        java.util.Comparator $r19;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r5 := @parameter1: java.lang.String;

        r14 := @parameter2: java.lang.String;

        $r1 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Map) $r2;

        $r4 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r3);

        r21 = $r4;

        if $r4 != null goto label1;

        $r18 = new java.util.TreeMap;

        $r19 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r18.<java.util.TreeMap: void <init>(java.util.Comparator)>($r19);

        r21 = $r18;

        $r20 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r18);

     label1:
        $r6 = interfaceinvoke r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r7 = (java.util.List) $r6;

        $r8 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List)>($r7);

        r22 = $r8;

        if $r8 != null goto label2;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r22 = $r17;

        interfaceinvoke r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r17);

     label2:
        $i0 = interfaceinvoke r22.<java.util.List: int size()>();

        if $i0 != 0 goto label3;

        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>(r14);

        goto label4;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = interfaceinvoke r22.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (java.lang.String) $r10;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r22.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r16);

     label4:
        return;
    }

    public void setForce(boolean)
    {
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: boolean force> = z0;

        return;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void access$100(org.apache.cxf.message.Message, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.cxf.message.Message r0;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: void addHeader(org.apache.cxf.message.Message,java.lang.String,java.lang.String)>(r0, r1, r2);

        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r20;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r19;
        java.util.logging.Logger $r21;
        java.lang.StringBuilder $r2, $r5, $r6, $r8, $r11, $r12, $r14, $r17, $r18;
        java.lang.Class $r3, $r9, $r15;
        java.util.regex.Pattern $r0, $r1;

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String SOAP_JMS_CONTENTENCODING> = "SOAPJMS_contentEncoding";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(";\\s*q=0(?:\\.0+)?$");

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.regex.Pattern ZERO_Q> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[,\\s]*,\\s*");

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.regex.Pattern ENCODINGS> = $r1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = class "Lorg/apache/cxf/transport/common/gzip/GZIPOutInterceptor;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".originalOutputStream");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String ORIGINAL_OUTPUT_STREAM_KEY> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = class "Lorg/apache/cxf/transport/common/gzip/GZIPOutInterceptor;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".useGzip");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String USE_GZIP_KEY> = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = class "Lorg/apache/cxf/transport/common/gzip/GZIPOutInterceptor;";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gzipEncoding");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String GZIP_ENCODING_KEY> = $r19;

        $r20 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/transport/common/gzip/GZIPOutInterceptor;");

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.ResourceBundle BUNDLE> = $r20;

        $r21 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/common/gzip/GZIPOutInterceptor;");

        <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.util.logging.Logger LOG> = $r21;

        return;
    }
}
