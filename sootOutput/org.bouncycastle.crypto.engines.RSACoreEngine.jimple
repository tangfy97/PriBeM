class org.bouncycastle.crypto.engines.RSACoreEngine extends java.lang.Object
{
    private org.bouncycastle.crypto.params.RSAKeyParameters key;
    private boolean forEncryption;

    void <init>()
    {
        org.bouncycastle.crypto.engines.RSACoreEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.engines.RSACoreEngine r1;
        org.bouncycastle.crypto.params.RSAKeyParameters $r2, $r5;
        org.bouncycastle.crypto.params.ParametersWithRandom r3;
        org.bouncycastle.crypto.CipherParameters r0, $r4;
        boolean $z0, z1;

        r1 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r3 = (org.bouncycastle.crypto.params.ParametersWithRandom) r0;

        $r4 = virtualinvoke r3.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r5 = (org.bouncycastle.crypto.params.RSAKeyParameters) $r4;

        r1.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key> = $r5;

        goto label2;

     label1:
        $r2 = (org.bouncycastle.crypto.params.RSAKeyParameters) r0;

        r1.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key> = $r2;

     label2:
        r1.<org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption> = z1;

        return;
    }

    public int getInputBlockSize()
    {
        org.bouncycastle.crypto.engines.RSACoreEngine r0;
        org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.math.BigInteger $r2;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i3 = $i0 + 7;

        $i4 = $i3 / 8;

        $i5 = $i4 - 1;

        return $i5;

     label1:
        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        return $i2;
    }

    public int getOutputBlockSize()
    {
        org.bouncycastle.crypto.engines.RSACoreEngine r0;
        org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.math.BigInteger $r2;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i4 = $i0 + 7;

        $i5 = $i4 / 8;

        return $i5;

     label1:
        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        $i3 = $i2 - 1;

        return $i3;
    }

    public java.math.BigInteger convertInput(byte[], int, int)
    {
        byte[] r1, $r6, r9;
        org.bouncycastle.crypto.engines.RSACoreEngine r0;
        org.bouncycastle.crypto.DataLengthException $r5, $r7, $r8;
        org.bouncycastle.crypto.params.RSAKeyParameters $r3;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        java.math.BigInteger $r2, $r4;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        $i2 = $i1 + 1;

        if i0 <= $i2 goto label1;

        $r8 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r8.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r8;

     label1:
        $i3 = virtualinvoke r0.<org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        $i4 = $i3 + 1;

        if i0 != $i4 goto label2;

        $z0 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 != 0 goto label2;

        $r7 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r7.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r7;

     label2:
        if i5 != 0 goto label3;

        $i7 = lengthof r1;

        if i0 == $i7 goto label4;

     label3:
        $r6 = newarray (byte)[i0];

        r9 = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i5, $r6, 0, i0);

        goto label5;

     label4:
        r9 = r1;

     label5:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r9);

        $r3 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i6 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i6 < 0 goto label6;

        $r5 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r5;

     label6:
        return $r2;
    }

    public byte[] convertOutput(java.math.BigInteger)
    {
        byte[] $r1, r3, r4, r5;
        org.bouncycastle.crypto.engines.RSACoreEngine r2;
        byte $b0, $b4;
        int $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.math.BigInteger r0;
        boolean $z0;

        r2 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $z0 = r2.<org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label2;

        $b4 = $r1[0];

        if $b4 != 0 goto label1;

        $i12 = lengthof $r1;

        $i13 = virtualinvoke r2.<org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        if $i12 <= $i13 goto label1;

        $i14 = lengthof $r1;

        $i15 = $i14 - 1;

        r3 = newarray (byte)[$i15];

        $i16 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r3, 0, $i16);

        return r3;

     label1:
        $i5 = lengthof $r1;

        $i6 = virtualinvoke r2.<org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        if $i5 >= $i6 goto label3;

        $i7 = virtualinvoke r2.<org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        r4 = newarray (byte)[$i7];

        $i9 = lengthof r4;

        $i8 = lengthof $r1;

        $i11 = $i9 - $i8;

        $i10 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, $i11, $i10);

        return r4;

     label2:
        $b0 = $r1[0];

        if $b0 != 0 goto label3;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        r5 = newarray (byte)[$i2];

        $i3 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r5, 0, $i3);

        return r5;

     label3:
        return $r1;
    }

    public java.math.BigInteger processBlock(java.math.BigInteger)
    {
        org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters r9;
        org.bouncycastle.crypto.engines.RSACoreEngine r0;
        org.bouncycastle.crypto.params.RSAKeyParameters $r1, $r3, $r5, $r8;
        java.math.BigInteger r2, $r4, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RSACoreEngine;

        r2 := @parameter0: java.math.BigInteger;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r1 instanceof org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        r9 = (org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters) $r8;

        $r10 = virtualinvoke r9.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getP()>();

        $r11 = virtualinvoke r9.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQ()>();

        $r12 = virtualinvoke r9.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDP()>();

        $r13 = virtualinvoke r9.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDQ()>();

        $r14 = virtualinvoke r9.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQInv()>();

        $r15 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r10);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r12, $r10);

        $r17 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r11);

        $r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r13, $r11);

        $r19 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r18);

        $r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r10);

        $r22 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        $r23 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r18);

        return $r23;

     label1:
        $r3 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r5 = r0.<org.bouncycastle.crypto.engines.RSACoreEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r7 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r4, $r6);

        return $r7;
    }
}
