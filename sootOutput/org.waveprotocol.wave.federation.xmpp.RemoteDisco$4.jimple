class org.waveprotocol.wave.federation.xmpp.RemoteDisco$4 extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.PacketCallback
{
    final java.util.concurrent.atomic.AtomicInteger val$sharedLatch;
    final org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.RemoteDisco, java.util.concurrent.atomic.AtomicInteger)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$4 r0;
        java.util.concurrent.atomic.AtomicInteger r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$4;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: java.util.concurrent.atomic.AtomicInteger val$sharedLatch> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        java.lang.Object[] $r2;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r5;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$4 r0;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r3, $r6;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$4;

        r5 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: java.util.concurrent.atomic.AtomicInteger val$sharedLatch>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String access$100(org.waveprotocol.wave.federation.xmpp.RemoteDisco)>($r3);

        $r2[0] = $r4;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Info latch should not count down past zero for domain: %s", $r2);

        if $i0 != 0 goto label3;

        $r6 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        virtualinvoke $r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: boolean finish(java.lang.String,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(null, r5);

     label3:
        return;
    }

    public void run(org.xmpp.packet.Packet)
    {
        java.lang.Object[] $r17;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$4 r6;
        org.xmpp.packet.JID $r13;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r15, $r18;
        java.util.concurrent.atomic.AtomicInteger $r16;
        int $i0;
        java.lang.String $r12, $r14, $r19;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r8;
        java.util.List $r3, $r4;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, r10;
        java.lang.Object $r9;
        org.xmpp.packet.IQ r1;
        org.dom4j.Attribute $r11;

        r6 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$4;

        r0 := @parameter0: org.xmpp.packet.Packet;

        $z0 = r0 instanceof org.xmpp.packet.IQ;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r1 = (org.xmpp.packet.IQ) r0;

        $r2 = virtualinvoke r1.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.util.List elements(java.lang.String)>("feature");

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.List toSafeElementList(java.util.List)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.dom4j.Element) $r9;

        $r11 = interfaceinvoke r10.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("var");

        if $r11 == null goto label4;

        $r12 = interfaceinvoke $r11.<org.dom4j.Attribute: java.lang.String getValue()>();

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("http://waveprotocol.org/protocol/0.2/waveserver");

        if $z2 == 0 goto label4;

        $r13 = virtualinvoke r0.<org.xmpp.packet.Packet: org.xmpp.packet.JID getFrom()>();

        $r14 = virtualinvoke $r13.<org.xmpp.packet.JID: java.lang.String toString()>();

        $r15 = r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        virtualinvoke $r15.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: boolean finish(java.lang.String,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r14, null);

        $r16 = r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: java.util.concurrent.atomic.AtomicInteger val$sharedLatch>;

        $i0 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 < 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        $r17 = newarray (java.lang.Object)[1];

        $r18 = r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String access$100(org.waveprotocol.wave.federation.xmpp.RemoteDisco)>($r18);

        $r17[0] = $r19;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z3, "Info latch should not count down past zero for domain: %s", $r17);

        return;

     label4:
        goto label1;

     label5:
        $r7 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code ITEM_NOT_FOUND>;

        $r8 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code)>($r7);

        virtualinvoke r6.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r8);

        return;
    }
}
