public class org.springframework.context.expression.BeanFactoryResolver extends java.lang.Object implements org.springframework.expression.BeanResolver
{
    private final org.springframework.beans.factory.BeanFactory beanFactory;

    public void <init>(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.context.expression.BeanFactoryResolver r0;
        org.springframework.beans.factory.BeanFactory r1;

        r0 := @this: org.springframework.context.expression.BeanFactoryResolver;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "BeanFactory must not be null");

        r0.<org.springframework.context.expression.BeanFactoryResolver: org.springframework.beans.factory.BeanFactory beanFactory> = r1;

        return;
    }

    public java.lang.Object resolve(org.springframework.expression.EvaluationContext, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.BeanFactoryResolver r0;
        org.springframework.beans.factory.BeanFactory $r2;
        java.lang.Object $r3;
        org.springframework.beans.BeansException $r4;
        java.lang.String r1;
        org.springframework.expression.AccessException $r5;
        org.springframework.expression.EvaluationContext r6;

        r0 := @this: org.springframework.context.expression.BeanFactoryResolver;

        r6 := @parameter0: org.springframework.expression.EvaluationContext;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<org.springframework.context.expression.BeanFactoryResolver: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r3 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.expression.AccessException;

        specialinvoke $r5.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>("Could not resolve bean reference against BeanFactory", $r4);

        throw $r5;

        catch org.springframework.beans.BeansException from label1 to label2 with label3;
    }
}
