public class ucar.nc2.dt.radial.LevelII2Dataset extends ucar.nc2.dt.radial.RadialDatasetSweepAdapter implements ucar.nc2.dt.TypedDatasetFactoryIF
{
    private ucar.nc2.dataset.NetcdfDataset ds;
    double latv;
    double lonv;
    double elev;
    ucar.nc2.units.DateFormatter formatter;
    static final boolean $assertionsDisabled;

    public boolean isMine(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.radial.LevelII2Dataset r3;
        java.lang.String $r1, $r2;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r3 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Conventions", null);

        if null == $r1 goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("_Coordinates");

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Format", null);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ARCHIVE2");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0001");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("CINRAD-SA");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0003");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0002");

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0004");

        if $z6 != 0 goto label1;

        $z7 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0006");

        if $z7 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r3;
        ucar.nc2.dt.radial.LevelII2Dataset $r0, r2;
        java.lang.StringBuilder r4;
        ucar.nc2.dataset.NetcdfDataset r1;

        r2 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.util.CancelTask;

        r4 := @parameter2: java.lang.StringBuilder;

        $r0 = new ucar.nc2.dt.radial.LevelII2Dataset;

        specialinvoke $r0.<ucar.nc2.dt.radial.LevelII2Dataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        return $r0;
    }

    public ucar.nc2.constants.FeatureType getScientificDataType()
    {
        ucar.nc2.constants.FeatureType $r0;
        ucar.nc2.dt.radial.LevelII2Dataset r1;

        r1 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r0 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        return $r0;
    }

    public void <init>()
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        ucar.nc2.units.DateFormatter $r1;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        specialinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void <init>()>();

        $r1 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r1.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.units.DateFormatter formatter> = $r1;

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.RuntimeException $r4;
        ucar.nc2.dataset.NetcdfDataset r1;
        java.lang.Exception $r3;
        ucar.nc2.units.DateFormatter $r2;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        $r2 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r2.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.units.DateFormatter formatter> = $r2;

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds> = r1;

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.lang.String desc> = "Nexrad 2 radar dataset";

        virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: void setEarthLocation()>();

     label1:
        virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: void setTimeUnits()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: void setStartDate()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: void setEndDate()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: void setBoundingBox()>();

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void setBoundingBox()
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, d10, $d11, $d12, d13;
        ucar.unidata.geoloc.LatLonRect $r5;
        ucar.unidata.geoloc.EarthLocation $r1, $r2, $r3, $r4;
        ucar.unidata.geoloc.LatLonPointImpl $r6;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        if $r1 != null goto label1;

        return;

     label1:
        $d0 = virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: double getMaximumRadialDist()>();

        $d1 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <java.lang.Math: double toDegrees(double)>($d2);

        $r2 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        $d4 = interfaceinvoke $r2.<ucar.unidata.geoloc.EarthLocation: double getLatitude()>();

        $d5 = staticinvoke <java.lang.Math: double toRadians(double)>($d4);

        $d6 = staticinvoke <java.lang.Math: double cos(double)>($d5);

        d7 = $d3 * $d6;

        $r3 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        $d8 = interfaceinvoke $r3.<ucar.unidata.geoloc.EarthLocation: double getLatitude()>();

        $d9 = $d3 / 2.0;

        d10 = $d8 - $d9;

        $r4 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        $d11 = interfaceinvoke $r4.<ucar.unidata.geoloc.EarthLocation: double getLongitude()>();

        $d12 = d7 / 2.0;

        d13 = $d11 - $d12;

        $r5 = new ucar.unidata.geoloc.LatLonRect;

        $r6 = new ucar.unidata.geoloc.LatLonPointImpl;

        specialinvoke $r6.<ucar.unidata.geoloc.LatLonPointImpl: void <init>(double,double)>(d10, d13);

        specialinvoke $r5.<ucar.unidata.geoloc.LatLonRect: void <init>(ucar.unidata.geoloc.LatLonPoint,double,double)>($r6, $d3, d7);

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.LatLonRect boundingBox> = $r5;

        return;
    }

    double getMaximumRadialDist()
    {
        ucar.nc2.dt.RadialDatasetSweep$Sweep $r5;
        java.util.Iterator $r2;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.util.List $r1;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r4;
        byte $b1;
        int $i0, $i2;
        float $f0, $f1, $f2;
        java.lang.Object $r3;
        boolean $z0;
        double d0, d1;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        d1 = 0.0;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.List dataVariables>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r3;

        $r5 = interfaceinvoke r4.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: ucar.nc2.dt.RadialDatasetSweep$Sweep getSweep(int)>(0);

        $i0 = interfaceinvoke $r5.<ucar.nc2.dt.RadialDatasetSweep$Sweep: int getGateNumber()>();

        $f0 = (float) $i0;

        $f1 = interfaceinvoke $r5.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getGateSize()>();

        $f2 = $f0 * $f1;

        d0 = (double) $f2;

        $b1 = d0 cmpl d1;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    protected void setEarthLocation()
    {
        ucar.unidata.geoloc.EarthLocationImpl $r7;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.Number $r8, $r9, $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        ucar.nc2.Attribute $r2, $r4, $r6;
        ucar.nc2.dataset.NetcdfDataset $r1, $r3, $r5;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("StationLatitude");

        if $r2 == null goto label1;

        $r10 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d5 = virtualinvoke $r10.<java.lang.Number: double doubleValue()>();

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: double latv> = $d5;

        goto label2;

     label1:
        r0.<ucar.nc2.dt.radial.LevelII2Dataset: double latv> = 0.0;

     label2:
        $r3 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("StationLongitude");

        if $r4 == null goto label3;

        $r9 = virtualinvoke $r4.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d4 = virtualinvoke $r9.<java.lang.Number: double doubleValue()>();

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: double lonv> = $d4;

        goto label4;

     label3:
        r0.<ucar.nc2.dt.radial.LevelII2Dataset: double lonv> = 0.0;

     label4:
        $r5 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r6 = virtualinvoke $r5.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("StationElevationInMeters");

        if $r6 == null goto label5;

        $r8 = virtualinvoke $r6.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d3 = virtualinvoke $r8.<java.lang.Number: double doubleValue()>();

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: double elev> = $d3;

        goto label6;

     label5:
        r0.<ucar.nc2.dt.radial.LevelII2Dataset: double elev> = 0.0;

     label6:
        $r7 = new ucar.unidata.geoloc.EarthLocationImpl;

        $d2 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: double latv>;

        $d1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: double lonv>;

        $d0 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: double elev>;

        specialinvoke $r7.<ucar.unidata.geoloc.EarthLocationImpl: void <init>(double,double,double)>($d2, $d1, $d0);

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.EarthLocation origin> = $r7;

        return;
    }

    public ucar.unidata.geoloc.EarthLocation getCommonOrigin()
    {
        ucar.unidata.geoloc.EarthLocation $r1;
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        return $r1;
    }

    public java.lang.String getRadarID()
    {
        ucar.nc2.Attribute $r2;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("Station");

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        return $r3;

     label1:
        return "XXXX";
    }

    public java.lang.String getRadarName()
    {
        ucar.nc2.Attribute $r2;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("StationName");

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        return $r3;

     label1:
        return "Unknown Station";
    }

    public java.lang.String getDataFormat()
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        return "Level II";
    }

    public boolean isVolume()
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        return 1;
    }

    public boolean isHighResolution(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.radial.LevelII2Dataset r3;
        ucar.nc2.Dimension $r1, $r2;
        ucar.nc2.dataset.NetcdfDataset r0;

        r3 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension findDimension(java.lang.String)>("scanR_HI");

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension findDimension(java.lang.String)>("scanV_HI");

        if $r1 != null goto label1;

        if $r2 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isStationary()
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        return 1;
    }

    protected void setTimeUnits() throws java.lang.Exception
    {
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        ucar.nc2.units.DateUnit $r9;
        ucar.nc2.dataset.CoordinateAxis r5;
        java.util.List $r2;
        java.lang.StringBuffer $r3;
        ucar.nc2.constants.AxisType $r6, $r7;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r8;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateAxes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (ucar.nc2.dataset.CoordinateAxis) $r4;

        $r6 = virtualinvoke r5.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r7 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        if $r6 != $r7 goto label2;

        $r8 = virtualinvoke r5.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getUnitsString()>();

        $r9 = new ucar.nc2.units.DateUnit;

        specialinvoke $r9.<ucar.nc2.units.DateUnit: void <init>(java.lang.String)>($r8);

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.units.DateUnit dateUnits> = $r9;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Time Units not Found\n");

        return;
    }

    protected void setStartDate()
    {
        java.lang.StringBuffer $r3;
        java.util.Date $r5;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.String $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;
        ucar.nc2.units.DateFormatter $r4;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "time_coverage_start", null);

        if $r2 == null goto label1;

        $r4 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.units.DateFormatter formatter>;

        $r5 = virtualinvoke $r4.<ucar.nc2.units.DateFormatter: java.util.Date getISODate(java.lang.String)>($r2);

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.Date startDate> = $r5;

        goto label2;

     label1:
        $r3 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** start_datetime not Found\n");

     label2:
        return;
    }

    protected void setEndDate()
    {
        java.lang.StringBuffer $r3;
        java.util.Date $r5;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.String $r2;
        ucar.nc2.dataset.NetcdfDataset $r1;
        ucar.nc2.units.DateFormatter $r4;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "time_coverage_end", null);

        if $r2 == null goto label1;

        $r4 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.units.DateFormatter formatter>;

        $r5 = virtualinvoke $r4.<ucar.nc2.units.DateFormatter: java.util.Date getISODate(java.lang.String)>($r2);

        r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.Date endDate> = $r5;

        goto label2;

     label1:
        $r3 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** end_datetime not Found\n");

     label2:
        return;
    }

    public void clearDatasetMemory()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r4;
        ucar.nc2.dt.radial.LevelII2Dataset r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.List getDataVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r3;

        interfaceinvoke r4.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: void clearVariableMemory()>();

        goto label1;

     label2:
        return;
    }

    public void getRadialsNum()
    {
        ucar.nc2.dataset.NetcdfDataset $r1;
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("numRadialsV");

        return;
    }

    protected void addRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter $r5, $r7;
        ucar.nc2.dt.radial.LevelII2Dataset r2;
        java.util.List $r3, $r6, $r8;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r9;
        int $i0;
        ucar.nc2.Variable r0;
        java.lang.String $r1;
        ucar.nc2.dataset.NetcdfDataset r4;
        boolean $z0, $z1;

        r2 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        r4 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: ucar.nc2.Variable;

        r9 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i0 != 3 goto label2;

        $z0 = virtualinvoke r2.<ucar.nc2.dt.radial.LevelII2Dataset: boolean isHighResolution(ucar.nc2.dataset.NetcdfDataset)>(r4);

        if $z0 != 0 goto label1;

        $r7 = new ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter;

        $r8 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getAttributes()>();

        specialinvoke $r7.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter: void <init>(ucar.nc2.dt.radial.RadialDatasetSweepAdapter,java.lang.String,java.util.List)>(r2, $r1, $r8);

        r9 = virtualinvoke r2.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.VariableSimpleIF,ucar.nc2.Variable)>(r4, $r7, r0);

        goto label2;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("_HI");

        if $z1 != 0 goto label2;

        $r5 = new ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter;

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getAttributes()>();

        specialinvoke $r5.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter: void <init>(ucar.nc2.dt.radial.RadialDatasetSweepAdapter,java.lang.String,java.util.List)>(r2, $r1, $r6);

        r9 = virtualinvoke r2.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.VariableSimpleIF,ucar.nc2.Variable)>(r4, $r5, r0);

     label2:
        if r9 == null goto label3;

        $r3 = r2.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.List dataVariables>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r9);

     label3:
        return;
    }

    protected ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.VariableSimpleIF, ucar.nc2.Variable)
    {
        ucar.nc2.dt.radial.LevelII2Dataset$LevelII2Variable $r0;
        ucar.nc2.VariableSimpleIF r3;
        ucar.nc2.dt.radial.LevelII2Dataset r1;
        ucar.nc2.Variable r4;
        ucar.nc2.dataset.NetcdfDataset r2;

        r1 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.VariableSimpleIF;

        r4 := @parameter2: ucar.nc2.Variable;

        $r0 = new ucar.nc2.dt.radial.LevelII2Dataset$LevelII2Variable;

        specialinvoke $r0.<ucar.nc2.dt.radial.LevelII2Dataset$LevelII2Variable: void <init>(ucar.nc2.dt.radial.LevelII2Dataset,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.VariableSimpleIF,ucar.nc2.Variable,ucar.nc2.dt.radial.LevelII2Dataset$1)>(r1, r2, r3, r4, null);

        return $r0;
    }

    public java.lang.String getInfo()
    {
        java.lang.StringBuffer $r0, $r3;
        ucar.nc2.dt.radial.LevelII2Dataset r1;
        java.lang.String $r2, $r4, $r5;

        r1 := @this: ucar.nc2.dt.radial.LevelII2Dataset;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LevelII2Dataset\n");

        $r2 = specialinvoke r1.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.String getDetailInfo()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r3 = r1.<ucar.nc2.dt.radial.LevelII2Dataset: java.lang.StringBuffer parseInfo>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private static void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable) throws java.io.IOException
    {
        byte $b3, $b4, $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r26;
        ucar.nc2.dt.RadialDatasetSweep$Sweep $r1, $r17;
        float[] $r2, $r4, $r15, r25;
        java.lang.AssertionError $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r0;
        int $i0, $i1, $i2, $i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r24;
        double $d0, $d1, $d2;
        java.io.PrintStream $r19;
        ucar.unidata.geoloc.EarthLocation $r5, $r6, $r7;

        r0 := @parameter0: ucar.nc2.dt.RadialDatasetSweep$RadialVariable;

        $i0 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: int getNumSweeps()>();

        i9 = 0;

     label01:
        if i9 >= $i0 goto label04;

        $r17 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: ucar.nc2.dt.RadialDatasetSweep$Sweep getSweep(int)>(i9);

        $f5 = interfaceinvoke $r17.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getMeanElevation()>();

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** radar Sweep mean elevation of sweep ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $i8 = interfaceinvoke $r17.<ucar.nc2.dt.RadialDatasetSweep$Sweep: int getRadialNumber()>();

        r25 = newarray (float)[$i8];

        i10 = 0;

     label02:
        if i10 >= $i8 goto label03;

        $f6 = interfaceinvoke $r17.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getAzimuth(int)>(i10);

        r25[i10] = $f6;

        i10 = i10 + 1;

        goto label02;

     label03:
        interfaceinvoke $r17.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] getAzimuth()>();

        interfaceinvoke $r17.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] readData()>();

        i9 = i9 + 1;

        goto label01;

     label04:
        $r1 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: ucar.nc2.dt.RadialDatasetSweep$Sweep getSweep(int)>(0);

        interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: float[] readAllData()>();

        $r2 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] readData()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] getAzimuth()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] getElevation()>();

        $z0 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z0 != 0 goto label05;

        if null != $r2 goto label05;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label05:
        $i1 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: int getRadialNumber()>();

        $r15 = newarray (float)[$i1];

        i11 = 0;

     label06:
        if i11 >= $i1 goto label14;

        $i2 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: int getGateNumber()>();

        $z2 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z2 != 0 goto label07;

        if $i2 > 0 goto label07;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label07:
        $r4 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] readData(int)>(i11);

        $z3 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        if null != $r4 goto label08;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label08:
        $f0 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getAzimuth(int)>(i11);

        $z4 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z4 != 0 goto label09;

        $b7 = $f0 cmpl 0.0F;

        $i12 = (int) $b7;

        if $i12 > 0 goto label09;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label09:
        $r15[i11] = $f0;

        $f1 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getElevation(int)>(i11);

        $z5 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        $b6 = $f1 cmpl 0.0F;

        $i13 = (int) $b6;

        if $i13 > 0 goto label10;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label10:
        $r5 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: ucar.unidata.geoloc.EarthLocation getOrigin(int)>(i11);

        $d0 = interfaceinvoke $r5.<ucar.unidata.geoloc.EarthLocation: double getLatitude()>();

        $f4 = (float) $d0;

        $z6 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z6 != 0 goto label11;

        $b5 = $f4 cmpl 0.0F;

        $i14 = (int) $b5;

        if $i14 > 0 goto label11;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label11:
        $r6 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: ucar.unidata.geoloc.EarthLocation getOrigin(int)>(i11);

        $d1 = interfaceinvoke $r6.<ucar.unidata.geoloc.EarthLocation: double getLongitude()>();

        $f3 = (float) $d1;

        $z7 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z7 != 0 goto label12;

        $b4 = $f3 cmpl 0.0F;

        $i15 = (int) $b4;

        if $i15 > 0 goto label12;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label12:
        $r7 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: ucar.unidata.geoloc.EarthLocation getOrigin(int)>(i11);

        $d2 = interfaceinvoke $r7.<ucar.unidata.geoloc.EarthLocation: double getAltitude()>();

        $f2 = (float) $d2;

        $z8 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z8 != 0 goto label13;

        $b3 = $f2 cmpl 0.0F;

        $i16 = (int) $b3;

        if $i16 > 0 goto label13;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label13:
        i11 = i11 + 1;

        goto label06;

     label14:
        $z1 = <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled>;

        if $z1 != 0 goto label15;

        if 0 != $i1 goto label15;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label15:
        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception, java.io.IOException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        ucar.nc2.dt.RadialDatasetSweep r3;
        java.util.Date $r4, $r5;
        java.lang.String[] r20;
        ucar.nc2.dt.TypedDataset $r2;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r11, $r19;
        int i0, $i1;
        java.lang.String $r6, $r7, $r18;
        ucar.nc2.constants.FeatureType $r1;
        boolean $z0;
        java.io.PrintStream $r13;
        java.util.List $r8;
        ucar.nc2.VariableSimpleIF $r9;
        java.lang.StringBuilder $r0, $r12, $r14, $r15, $r16, $r17;
        java.lang.Object $r10;

        r20 := @parameter0: java.lang.String[];

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <ucar.nc2.dt.TypedDatasetFactory: ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType,java.lang.String,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>($r1, "C:/Users/yuanho/Downloads/RADAR/KOUN20100405042306V06.raw.uncompress", null, $r0);

        r3 = (ucar.nc2.dt.RadialDatasetSweep) $r2;

        $r4 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.Date getStartDate()>();

        virtualinvoke $r4.<java.util.Date: java.lang.String toString()>();

        $r5 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.Date getEndDate()>();

        virtualinvoke $r5.<java.util.Date: java.lang.String toString()>();

        $r6 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.lang.String getRadarID()>();

        $r7 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.lang.String getRadarName()>();

        $z0 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: boolean isStationary()>();

        if $z0 == 0 goto label1;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** radar is stationary with name and id: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label1:
        $r8 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.List getDataVariables()>();

        $r9 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: ucar.nc2.VariableSimpleIF getDataVariable(java.lang.String)>("Reflectivity");

        $r19 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r9;

        interfaceinvoke $r19.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: float[] readAllData()>();

        staticinvoke <ucar.nc2.dt.radial.LevelII2Dataset: void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable)>($r19);

        i0 = 0;

     label2:
        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0);

        r11 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r10;

        staticinvoke <ucar.nc2.dt.radial.LevelII2Dataset: void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable)>(r11);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }

    static ucar.nc2.dataset.NetcdfDataset access$100(ucar.nc2.dt.radial.LevelII2Dataset)
    {
        ucar.nc2.dataset.NetcdfDataset $r1;
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @parameter0: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        return $r1;
    }

    static java.util.Date access$200(ucar.nc2.dt.radial.LevelII2Dataset)
    {
        java.util.Date $r1;
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @parameter0: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.Date startDate>;

        return $r1;
    }

    static java.util.Date access$300(ucar.nc2.dt.radial.LevelII2Dataset)
    {
        java.util.Date $r1;
        ucar.nc2.dt.radial.LevelII2Dataset r0;

        r0 := @parameter0: ucar.nc2.dt.radial.LevelII2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.LevelII2Dataset: java.util.Date endDate>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/dt/radial/LevelII2Dataset;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.dt.radial.LevelII2Dataset: boolean $assertionsDisabled> = $z1;

        return;
    }
}
