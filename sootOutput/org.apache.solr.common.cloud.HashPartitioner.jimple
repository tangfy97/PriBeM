public class org.apache.solr.common.cloud.HashPartitioner extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.solr.common.cloud.HashPartitioner r0;

        r0 := @this: org.apache.solr.common.cloud.HashPartitioner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.solr.common.cloud.HashPartitioner$Range fromString(java.lang.String)
    {
        org.apache.solr.common.cloud.HashPartitioner r4;
        org.apache.solr.common.cloud.HashPartitioner$Range $r3;
        long $l2, $l3;
        int $i0, $i1, $i4, $i5;
        java.lang.String r0, $r1, $r2;

        r4 := @this: org.apache.solr.common.cloud.HashPartitioner;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(45);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r1, 16);

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r2, 16);

        $r3 = new org.apache.solr.common.cloud.HashPartitioner$Range;

        $i5 = (int) $l2;

        $i4 = (int) $l3;

        specialinvoke $r3.<org.apache.solr.common.cloud.HashPartitioner$Range: void <init>(int,int)>($i5, $i4);

        return $r3;
    }

    public org.apache.solr.common.cloud.HashPartitioner$Range fullRange()
    {
        org.apache.solr.common.cloud.HashPartitioner r1;
        org.apache.solr.common.cloud.HashPartitioner$Range $r0;

        r1 := @this: org.apache.solr.common.cloud.HashPartitioner;

        $r0 = new org.apache.solr.common.cloud.HashPartitioner$Range;

        specialinvoke $r0.<org.apache.solr.common.cloud.HashPartitioner$Range: void <init>(int,int)>(-2147483648, 2147483647);

        return $r0;
    }

    public java.util.List partitionRange(int, org.apache.solr.common.cloud.HashPartitioner$Range)
    {
        org.apache.solr.common.cloud.HashPartitioner r0;
        java.util.List $r2;
        org.apache.solr.common.cloud.HashPartitioner$Range r1;
        int i0, $i1, $i2;

        r0 := @this: org.apache.solr.common.cloud.HashPartitioner;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.solr.common.cloud.HashPartitioner$Range;

        $i2 = r1.<org.apache.solr.common.cloud.HashPartitioner$Range: int min>;

        $i1 = r1.<org.apache.solr.common.cloud.HashPartitioner$Range: int max>;

        $r2 = virtualinvoke r0.<org.apache.solr.common.cloud.HashPartitioner: java.util.List partitionRange(int,int,int)>(i0, $i2, $i1);

        return $r2;
    }

    public java.util.List partitionRange(int, int, int)
    {
        org.apache.solr.common.cloud.HashPartitioner$Range $r7;
        long $l3, $l4, l5, $l6, $l7, $l8, $l9, l15, l16;
        java.lang.AssertionError $r5;
        java.util.ArrayList $r6;
        byte $b10;
        int i0, i1, i2, $i11, $i12, $i13, $i14, $i17;
        boolean $z0;
        org.apache.solr.common.cloud.HashPartitioner r4;
        java.util.List $r2;

        r4 := @this: org.apache.solr.common.cloud.HashPartitioner;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = <org.apache.solr.common.cloud.HashPartitioner: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= i2 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        if i0 != 0 goto label2;

        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r2;

     label2:
        $l4 = (long) i1;

        $l3 = (long) i2;

        l5 = $l4 - $l3;

        $l6 = (long) i0;

        $l7 = l5 / $l6;

        $l8 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l7);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        l15 = (long) i2;

        l16 = l15;

     label3:
        $l9 = (long) i1;

        $b10 = l16 cmp $l9;

        $i17 = (int) $b10;

        if $i17 >= 0 goto label5;

        l16 = l15 + $l8;

        $i11 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i12 = i0 - 1;

        if $i11 != $i12 goto label4;

        l16 = (long) i1;

     label4:
        $r7 = new org.apache.solr.common.cloud.HashPartitioner$Range;

        $i14 = (int) l15;

        $i13 = (int) l16;

        specialinvoke $r7.<org.apache.solr.common.cloud.HashPartitioner$Range: void <init>(int,int)>($i14, $i13);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        l15 = l16 + 1L;

        goto label3;

     label5:
        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/solr/common/cloud/HashPartitioner;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.solr.common.cloud.HashPartitioner: boolean $assertionsDisabled> = $z1;

        return;
    }
}
