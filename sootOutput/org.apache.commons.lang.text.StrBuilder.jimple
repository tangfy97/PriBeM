public class org.apache.commons.lang.text.StrBuilder extends java.lang.Object implements java.lang.Cloneable
{
    static final int CAPACITY;
    private static final long serialVersionUID;
    protected char[] buffer;
    protected int size;
    private java.lang.String newLine;
    private java.lang.String nullText;

    public void <init>()
    {
        org.apache.commons.lang.text.StrBuilder r0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        specialinvoke r0.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(32);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0;
        char[] $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 > 0 goto label1;

        i0 = 32;

     label1:
        $r1 = newarray (char)[i0];

        r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1;
        char[] $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = newarray (char)[32];

        r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer> = $r3;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 + 32;

        $r2 = newarray (char)[$i1];

        r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer> = $r2;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r1);

     label2:
        return;
    }

    public java.lang.String getNewLineText()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String newLine>;

        return $r1;
    }

    public org.apache.commons.lang.text.StrBuilder setNewLineText(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String newLine> = r1;

        return r0;
    }

    public java.lang.String getNullText()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

        return $r1;
    }

    public org.apache.commons.lang.text.StrBuilder setNullText(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r1 = null;

     label1:
        r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText> = r1;

        return r0;
    }

    public int length()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        return $i0;
    }

    public org.apache.commons.lang.text.StrBuilder setLength(int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        java.lang.StringIndexOutOfBoundsException $r2;
        int i0, $i1, $i2, i3, i4;
        char[] $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r2;

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i0 >= $i1 goto label2;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = i0;

        goto label4;

     label2:
        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i0 <= $i2 goto label4;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>(i0);

        i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = i0;

        i4 = i3;

     label3:
        if i4 >= i0 goto label4;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r1[i4] = 0;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r0;
    }

    public int capacity()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        char[] $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.apache.commons.lang.text.StrBuilder ensureCapacity(int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2;
        char[] $r1, r2, $r3, $r4;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i1 = lengthof $r1;

        if i0 <= $i1 goto label1;

        r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r3 = newarray (char)[i0];

        r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer> = $r3;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i2);

     label1:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder minimizeCapacity()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1, r2, $r3, $r4;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if $i0 <= $i1 goto label1;

        r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $r3 = newarray (char)[$i2];

        r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer> = $r3;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i3);

     label1:
        return r0;
    }

    public int size()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.lang.text.StrBuilder clear()
    {
        org.apache.commons.lang.text.StrBuilder r0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = 0;

        return r0;
    }

    public char charAt(int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r0;
        char[] $r2;
        char $c2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r0;

     label2:
        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c2 = $r2[i0];

        return $c2;
    }

    public org.apache.commons.lang.text.StrBuilder setCharAt(int, char)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r0;
        char[] $r2;
        char c2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        c2 := @parameter1: char;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r0;

     label2:
        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r2[i0] = c2;

        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder deleteCharAt(int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, $i1, $i2;
        java.lang.StringIndexOutOfBoundsException $r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r0;

     label2:
        $i2 = i0 + 1;

        specialinvoke r1.<org.apache.commons.lang.text.StrBuilder: void deleteImpl(int,int,int)>(i0, $i2, 1);

        return r1;
    }

    public char[] toCharArray()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2;
        char[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 != 0 goto label1;

        $r3 = <org.apache.commons.lang.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $r3;

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        r1 = newarray (char)[$i1];

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2);

        return r1;
    }

    public char[] toCharArray(int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, i2, i3;
        char[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int validateRange(int,int)>(i0, i3);

        i2 = $i1 - i0;

        if i2 != 0 goto label1;

        $r3 = <org.apache.commons.lang.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $r3;

     label1:
        r1 = newarray (char)[i2];

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, r1, 0, i2);

        return r1;
    }

    public char[] getChars(char[])
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1;
        char[] r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: char[];

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 >= $i0 goto label2;

     label1:
        r1 = newarray (char)[$i0];

     label2:
        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }

    public void getChars(int, int, char[], int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.lang.StringIndexOutOfBoundsException $r0, $r4, $r5;
        int i0, i1, $i2, i3, $i4;
        char[] r2, $r3;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: char[];

        i3 := @parameter3: int;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r5;

     label1:
        if i1 < 0 goto label2;

        $i2 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if i1 <= $i2 goto label3;

     label2:
        $r0 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i1);

        throw $r0;

     label3:
        if i0 <= i1 goto label4;

        $r4 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("end < start");

        throw $r4;

     label4:
        $r3 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i4 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, r2, i3, $i4);

        return;
    }

    public org.apache.commons.lang.text.StrBuilder appendNewLine()
    {
        org.apache.commons.lang.text.StrBuilder r0, $r3;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String newLine>;

        if $r1 != null goto label1;

        $r4 = <org.apache.commons.lang.SystemUtils: java.lang.String LINE_SEPARATOR>;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r4);

        return r0;

     label1:
        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String newLine>;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendNull()
    {
        org.apache.commons.lang.text.StrBuilder r0, $r3;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

        if $r1 != null goto label1;

        return r0;

     label1:
        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder append(java.lang.Object)
    {
        org.apache.commons.lang.text.StrBuilder r1, $r3, $r4;
        java.lang.Object r0;
        java.lang.String $r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder append(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r2;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r3;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i2 = $i1 + $i0;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r2, $i1);

        $i3 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 + $i0;

        r1.<org.apache.commons.lang.text.StrBuilder: int size> = $i4;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder append(java.lang.String, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r3, $r5;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0;
        java.lang.StringIndexOutOfBoundsException $r1, $r2;
        char[] $r4;

        r3 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r5;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 <= $i1 goto label3;

     label2:
        $r1 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("startIndex must be valid");

        throw $r1;

     label3:
        if i2 < 0 goto label4;

        $i3 = i0 + i2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 <= $i4 goto label5;

     label4:
        $r2 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("length must be valid");

        throw $r2;

     label5:
        if i2 <= 0 goto label6;

        $i5 = virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i6 = $i5 + i2;

        virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i6);

        $i7 = i0 + i2;

        $r4 = r3.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(i0, $i7, $r4, $i5);

        $i8 = r3.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i9 = $i8 + i2;

        r3.<org.apache.commons.lang.text.StrBuilder: int size> = $i9;

     label6:
        return r3;
    }

    public org.apache.commons.lang.text.StrBuilder append(java.lang.StringBuffer)
    {
        org.apache.commons.lang.text.StrBuilder r1, $r3;
        java.lang.StringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.StringBuffer;

        if r0 != null goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r3;

     label1:
        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label2;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i2 = $i1 + $i0;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r0.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(0, $i0, $r2, $i1);

        $i3 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 + $i0;

        r1.<org.apache.commons.lang.text.StrBuilder: int size> = $i4;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder append(java.lang.StringBuffer, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r3, $r5;
        java.lang.StringBuffer r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringIndexOutOfBoundsException $r1, $r2;
        char[] $r4;

        r3 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r5;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        if i0 <= $i1 goto label3;

     label2:
        $r1 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("startIndex must be valid");

        throw $r1;

     label3:
        if i2 < 0 goto label4;

        $i3 = i0 + i2;

        $i4 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        if $i3 <= $i4 goto label5;

     label4:
        $r2 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("length must be valid");

        throw $r2;

     label5:
        if i2 <= 0 goto label6;

        $i5 = virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i6 = $i5 + i2;

        virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i6);

        $i7 = i0 + i2;

        $r4 = r3.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r0.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i0, $i7, $r4, $i5);

        $i8 = r3.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i9 = $i8 + i2;

        r3.<org.apache.commons.lang.text.StrBuilder: int size> = $i9;

     label6:
        return r3;
    }

    public org.apache.commons.lang.text.StrBuilder append(org.apache.commons.lang.text.StrBuilder)
    {
        org.apache.commons.lang.text.StrBuilder r0, r1, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r2, $r3;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: org.apache.commons.lang.text.StrBuilder;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r4;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if $i0 <= 0 goto label2;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i2 = $i1 + $i0;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, $i1, $i0);

        $i3 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 + $i0;

        r1.<org.apache.commons.lang.text.StrBuilder: int size> = $i4;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder append(org.apache.commons.lang.text.StrBuilder, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, r3, $r5;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringIndexOutOfBoundsException $r1, $r2;
        char[] $r4;

        r3 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r5;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if i0 <= $i1 goto label3;

     label2:
        $r1 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("startIndex must be valid");

        throw $r1;

     label3:
        if i2 < 0 goto label4;

        $i3 = i0 + i2;

        $i4 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        if $i3 <= $i4 goto label5;

     label4:
        $r2 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("length must be valid");

        throw $r2;

     label5:
        if i2 <= 0 goto label6;

        $i5 = virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i6 = $i5 + i2;

        virtualinvoke r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i6);

        $i7 = i0 + i2;

        $r4 = r3.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: void getChars(int,int,char[],int)>(i0, $i7, $r4, $i5);

        $i8 = r3.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i9 = $i8 + i2;

        r3.<org.apache.commons.lang.text.StrBuilder: int size> = $i9;

     label6:
        return r3;
    }

    public org.apache.commons.lang.text.StrBuilder append(char[])
    {
        org.apache.commons.lang.text.StrBuilder r1, $r3;
        int i0, $i1, $i2, $i3, $i4;
        char[] r0, $r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: char[];

        if r0 != null goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r3;

     label1:
        i0 = lengthof r0;

        if i0 <= 0 goto label2;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i2 = $i1 + i0;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r2, $i1, i0);

        $i3 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 + i0;

        r1.<org.apache.commons.lang.text.StrBuilder: int size> = $i4;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder append(char[], int, int)
    {
        org.apache.commons.lang.text.StrBuilder r11, $r13;
        java.lang.StringBuffer $r2, $r3, $r4, $r7, $r8, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r5, $r10;
        java.lang.StringIndexOutOfBoundsException $r1, $r6;
        char[] r0, $r12;

        r11 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r13 = virtualinvoke r11.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNull()>();

        return $r13;

     label1:
        if i0 < 0 goto label2;

        $i2 = lengthof r0;

        if i0 <= $i2 goto label3;

     label2:
        $r1 = new java.lang.StringIndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid startIndex: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        if i1 < 0 goto label4;

        $i4 = i0 + i1;

        $i3 = lengthof r0;

        if $i4 <= $i3 goto label5;

     label4:
        $r6 = new java.lang.StringIndexOutOfBoundsException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid length: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label5:
        if i1 <= 0 goto label6;

        $i5 = virtualinvoke r11.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i6 = $i5 + i1;

        virtualinvoke r11.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i6);

        $r12 = r11.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, $r12, $i5, i1);

        $i7 = r11.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i8 = $i7 + i1;

        r11.<org.apache.commons.lang.text.StrBuilder: int size> = $i8;

     label6:
        return r11;
    }

    public org.apache.commons.lang.text.StrBuilder append(boolean)
    {
        boolean z0;
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i12 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i13 = $i12 + 4;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i13);

        $r6 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i14 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i15 = $i14 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i15;

        $r6[$i14] = 116;

        $r7 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i16 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i17 = $i16 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i17;

        $r7[$i16] = 114;

        $r8 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i18 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i19 = $i18 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i19;

        $r8[$i18] = 117;

        $r9 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i20 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i21 = $i20 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i21;

        $r9[$i20] = 101;

        goto label2;

     label1:
        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i1 = $i0 + 5;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i1);

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i3;

        $r1[$i2] = 102;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i4 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i5;

        $r2[$i4] = 97;

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i6 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i7 = $i6 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i7;

        $r3[$i6] = 108;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i8 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i9 = $i8 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i9;

        $r4[$i8] = 115;

        $r5 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i10 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i11 = $i10 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i11;

        $r5[$i10] = 101;

     label2:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder append(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;
        char c4;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c4 := @parameter0: char;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int length()>();

        $i1 = $i0 + 1;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i1);

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i3;

        $r1[$i2] = c4;

        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder append(int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder append(long)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder append(float)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        float f0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder append(double)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        java.lang.String $r1;
        double d0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(java.lang.Object)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(java.lang.String, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String,int,int)>(r1, i0, i1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(java.lang.StringBuffer)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        java.lang.StringBuffer r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.StringBuffer)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(java.lang.StringBuffer, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        java.lang.StringBuffer r1;
        int i0, i1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.StringBuffer,int,int)>(r1, i0, i1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(org.apache.commons.lang.text.StrBuilder)
    {
        org.apache.commons.lang.text.StrBuilder r0, r1, $r2, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrBuilder;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(org.apache.commons.lang.text.StrBuilder)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(org.apache.commons.lang.text.StrBuilder, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, r1, $r2, $r3;
        int i0, i1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(org.apache.commons.lang.text.StrBuilder,int,int)>(r1, i0, i1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(char[])
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: char[];

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char[])>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(char[], int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2, $r3;
        int i0, i1;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char[],int,int)>(r1, i0, i1);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(boolean)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(boolean)>(z0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(char)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r1, $r2;
        char c0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r1, $r2;
        int i0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>(i0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(long)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r1, $r2;
        long l0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(long)>(l0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(float)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r1, $r2;
        float f0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(float)>(f0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendln(double)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r1, $r2;
        double d0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(double)>(d0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendNewLine()>();

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendAll(java.lang.Object[])
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.lang.Object[] r0;
        int $i0, $i1, i2;
        java.lang.Object $r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label2;

        $i0 = lengthof r0;

        if $i0 <= 0 goto label2;

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r2 = r0[i2];

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        int $i0;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label2;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.util.Iterator r0;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.util.Iterator;

        if r0 == null goto label2;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.lang.Object[], java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.lang.Object[] r0;
        int $i0, i1, $i2;
        java.lang.Object $r2, $r3;
        java.lang.String r4, $r5, r6;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.Object[];

        r4 := @parameter1: java.lang.String;

        if r0 == null goto label4;

        $i0 = lengthof r0;

        if $i0 <= 0 goto label4;

        if r4 != null goto label1;

        $r5 = "";

        goto label2;

     label1:
        $r5 = r4;

     label2:
        r6 = $r5;

        $r2 = r0[0];

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r2);

        i1 = 1;

     label3:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label4;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r6);

        $r3 = r0[i1];

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label3;

     label4:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r4, $r5, r6;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.util.Collection;

        r4 := @parameter1: java.lang.String;

        if r0 == null goto label4;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label4;

        if r4 != null goto label1;

        $r5 = "";

        goto label2;

     label1:
        $r5 = r4;

     label2:
        r6 = $r5;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r3);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r6);

        goto label3;

     label4:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.util.Iterator r0;
        java.lang.Object $r2;
        java.lang.String r3, $r4, r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.util.Iterator;

        r3 := @parameter1: java.lang.String;

        if r0 == null goto label4;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = r3;

     label2:
        r5 = $r4;

     label3:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r2);

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r5);

        goto label3;

     label4:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendSeparator(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int $i0;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int size()>();

        if $i0 <= 0 goto label1;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r0);

     label1:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendSeparator(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        char c1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c1 := @parameter0: char;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int size()>();

        if $i0 <= 0 goto label1;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c1);

     label1:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder appendSeparator(java.lang.String, int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 <= 0 goto label1;

        virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r0);

     label1:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder appendSeparator(char, int)
    {
        int i0;
        org.apache.commons.lang.text.StrBuilder r0;
        char c1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c1 := @parameter0: char;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c1);

     label1:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder appendPadding(int, char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c5;
        int i0, $i1, $i2, $i3, $i4, i6;
        char[] $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        c5 := @parameter1: char;

        if i0 < 0 goto label2;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = $i1 + i0;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i4;

        $r1[$i3] = c5;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object, int, char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, i14;
        java.lang.String $r5, r6;
        char c10;
        char[] $r2, $r3, $r4;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        c10 := @parameter2: char;

        if i0 <= 0 goto label8;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = $i1 + i0;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        if r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String getNullText()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        r6 = $r5;

        if $r5 != null goto label3;

        r6 = "";

     label3:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 < i0 goto label4;

        $i13 = $i3 - i0;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i12 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        virtualinvoke r6.<java.lang.String: void getChars(int,int,char[],int)>($i13, $i3, $r4, $i12);

        goto label7;

     label4:
        i4 = i0 - $i3;

        i14 = 0;

     label5:
        if i14 >= i4 goto label6;

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i9 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i11 = $i9 + i14;

        $r3[$i11] = c10;

        i14 = i14 + 1;

        goto label5;

     label6:
        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i5 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i6 = $i5 + i4;

        virtualinvoke r6.<java.lang.String: void getChars(int,int,char[],int)>(0, $i3, $r2, $i6);

     label7:
        $i7 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i8 = $i7 + i0;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i8;

     label8:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(int, int, char)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0, i1;
        char c2;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        c2 := @parameter2: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)>($r1, i1, c2);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object, int, char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, i13;
        java.lang.String $r5, r6;
        char c10;
        char[] $r2, $r3, $r4;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        c10 := @parameter2: char;

        if i0 <= 0 goto label7;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = $i1 + i0;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        if r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String getNullText()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        r6 = $r5;

        if $r5 != null goto label3;

        r6 = "";

     label3:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 < i0 goto label4;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i12 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        virtualinvoke r6.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r4, $i12);

        goto label6;

     label4:
        i4 = i0 - $i3;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i5 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        virtualinvoke r6.<java.lang.String: void getChars(int,int,char[],int)>(0, $i3, $r2, $i5);

        i13 = 0;

     label5:
        if i13 >= i4 goto label6;

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i8 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i9 = $i8 + $i3;

        $i11 = $i9 + i13;

        $r3[$i11] = c10;

        i13 = i13 + 1;

        goto label5;

     label6:
        $i6 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i7 = $i6 + i0;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i7;

     label7:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(int, int, char)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0, i1;
        char c2;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        c2 := @parameter2: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)>($r1, i1, c2);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, java.lang.Object)
    {
        org.apache.commons.lang.text.StrBuilder r1, $r3, $r5;
        int i0;
        java.lang.Object r0;
        java.lang.String $r2, $r4;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = r1.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

        $r5 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r4);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r2);

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6;
        char[] $r1, $r2, $r3;
        java.lang.String r4;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: void validateIndex(int)>(i0);

        if r4 != null goto label1;

        r4 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

     label1:
        if r4 != null goto label2;

        $i6 = 0;

        goto label3;

     label2:
        $i6 = virtualinvoke r4.<java.lang.String: int length()>();

     label3:
        if $i6 <= 0 goto label4;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        i2 = $i1 + $i6;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>(i2);

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i5 = i0 + $i6;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, $i5, $i4);

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = i2;

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r4.<java.lang.String: void getChars(int,int,char[],int)>(0, $i6, $r3, i0);

     label4:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, char[])
    {
        org.apache.commons.lang.text.StrBuilder r0, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r5;
        char[] r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: void validateIndex(int)>(i0);

        if r1 != null goto label1;

        $r5 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

        $r6 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r5);

        return $r6;

     label1:
        i1 = lengthof r1;

        if i1 <= 0 goto label2;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i2 + i1;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i3);

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i6 = i0 + i1;

        $i4 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i5 = $i4 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, $r2, $i6, $i5);

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, i0, i1);

        $i7 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i8 = $i7 + i1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i8;

     label2:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, char[], int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r16;
        java.lang.StringBuffer $r3, $r4, $r5, $r8, $r9, $r10;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r6, $r11, $r15;
        java.lang.StringIndexOutOfBoundsException $r2, $r7;
        char[] r1, $r12, $r13, $r14;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: void validateIndex(int)>(i0);

        if r1 != null goto label1;

        $r15 = r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String nullText>;

        $r16 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r15);

        return $r16;

     label1:
        if i1 < 0 goto label2;

        $i2 = lengthof r1;

        if i1 <= $i2 goto label3;

     label2:
        $r2 = new java.lang.StringIndexOutOfBoundsException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid offset: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        if i3 < 0 goto label4;

        $i5 = i1 + i3;

        $i4 = lengthof r1;

        if $i5 <= $i4 goto label5;

     label4:
        $r7 = new java.lang.StringIndexOutOfBoundsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid length: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label5:
        if i3 <= 0 goto label6;

        $i6 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i7 = $i6 + i3;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i7);

        $r13 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r12 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i10 = i0 + i3;

        $i8 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i9 = $i8 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, i0, $r12, $i10, $i9);

        $r14 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r14, i0, i3);

        $i11 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i12 = $i11 + i3;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i12;

     label6:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, boolean)
    {
        boolean z0;
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18, i19, i20, i21;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i14 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: void validateIndex(int)>(i14);

        if z0 == 0 goto label1;

        $i7 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i8 = $i7 + 4;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i8);

        $r9 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r8 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i11 = i14 + 4;

        $i9 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i10 = $i9 - i14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, i14, $r8, $i11, $i10);

        $r10 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i15 = i14 + 1;

        $r10[i14] = 116;

        $r11 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i16 = i15 + 1;

        $r11[i15] = 114;

        $r12 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i17 = i16 + 1;

        $r12[i16] = 117;

        $r13 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r13[i17] = 101;

        $i12 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i13 = $i12 + 4;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i13;

        goto label2;

     label1:
        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i1 = $i0 + 5;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i1);

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i4 = i14 + 5;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i2 - i14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i14, $r1, $i4, $i3);

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i18 = i14 + 1;

        $r3[i14] = 102;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i19 = i18 + 1;

        $r4[i18] = 97;

        $r5 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i20 = i19 + 1;

        $r5[i19] = 108;

        $r6 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i21 = i20 + 1;

        $r6[i20] = 115;

        $r7 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r7[i21] = 101;

        $i5 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i6 = $i5 + 5;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i6;

     label2:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        char[] $r1, $r2, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        c6 := @parameter1: char;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: void validateIndex(int)>(i0);

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = $i1 + 1;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>($i2);

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i5 = i0 + 1;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, $i5, $i4);

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r3[i0] = c6;

        $i7 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i8 = $i7 + 1;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i8;

        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, long)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0;
        long l1;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, float)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0;
        float f0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder insert(int, double)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int i0;
        java.lang.String $r1;
        double d0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    private void deleteImpl(int, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, i1, $i2, $i3, i4, $i5, $i6;
        char[] $r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, i1, $i3);

        $i5 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i6 = $i5 - i4;

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = $i6;

        return;
    }

    public org.apache.commons.lang.text.StrBuilder delete(int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, i2, i3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int validateRange(int,int)>(i0, i3);

        i2 = $i1 - i0;

        if i2 <= 0 goto label1;

        specialinvoke r0.<org.apache.commons.lang.text.StrBuilder: void deleteImpl(int,int,int)>(i0, $i1, i2);

     label1:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder deleteAll(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c1, $c2, $c5;
        int $i0, i3, $i4, $i6, i7, $i8, $i9, $i10, $i11;
        char[] $r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c1 := @parameter0: char;

        i7 = 0;

     label1:
        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i7 >= $i0 goto label5;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c2 = $r1[i7];

        $i8 = (int) $c2;

        $i9 = (int) c1;

        if $i8 != $i9 goto label4;

        i3 = i7;

     label2:
        i7 = i7 + 1;

        $i4 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i7 >= $i4 goto label3;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c5 = $r2[i7];

        $i10 = (int) $c5;

        $i11 = (int) c1;

        if $i10 == $i11 goto label2;

        goto label3;

     label3:
        $i6 = i7 - i3;

        specialinvoke r0.<org.apache.commons.lang.text.StrBuilder: void deleteImpl(int,int,int)>(i3, i7, $i6);

        i7 = i7 - $i6;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder deleteFirst(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c1, $c2;
        int $i0, $i3, i4, $i5, $i6;
        char[] $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c1 := @parameter0: char;

        i4 = 0;

     label1:
        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i4 >= $i0 goto label3;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c2 = $r1[i4];

        $i5 = (int) $c2;

        $i6 = (int) c1;

        if $i5 != $i6 goto label2;

        $i3 = i4 + 1;

        specialinvoke r0.<org.apache.commons.lang.text.StrBuilder: void deleteImpl(int,int,int)>(i4, $i3, 1);

        goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder deleteAll(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, $i1, $i2, i3;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        i0 = $i2;

        if $i2 <= 0 goto label4;

        i3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r0, 0);

     label3:
        if i3 < 0 goto label4;

        $i1 = i3 + i0;

        specialinvoke r1.<org.apache.commons.lang.text.StrBuilder: void deleteImpl(int,int,int)>(i3, $i1, i0);

        i3 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r0, i3);

        goto label3;

     label4:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder deleteFirst(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int $i0, $i1, $i2;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        if $i2 <= 0 goto label3;

        $i0 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r0, 0);

        if $i0 < 0 goto label3;

        $i1 = $i0 + $i2;

        specialinvoke r1.<org.apache.commons.lang.text.StrBuilder: void deleteImpl(int,int,int)>($i0, $i1, $i2);

     label3:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder deleteAll(org.apache.commons.lang.text.StrMatcher)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int $i0, $i2;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = (int) -1;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder replace(org.apache.commons.lang.text.StrMatcher,java.lang.String,int,int,int)>(r1, null, 0, $i0, $i2);

        return $r2;
    }

    public org.apache.commons.lang.text.StrBuilder deleteFirst(org.apache.commons.lang.text.StrMatcher)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r2;
        int $i0;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder replace(org.apache.commons.lang.text.StrMatcher,java.lang.String,int,int,int)>(r1, null, 0, $i0, 1);

        return $r2;
    }

    private void replaceImpl(int, int, int, java.lang.String, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9;
        char[] $r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i1 - i0;

        i4 = $i3 + i2;

        if i2 == i0 goto label1;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder ensureCapacity(int)>(i4);

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r3 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i9 = i5 + i2;

        $i7 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i8 = $i7 - i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i6, $r3, $i9, $i8);

        r0.<org.apache.commons.lang.text.StrBuilder: int size> = i4;

     label1:
        if i2 <= 0 goto label2;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i2, $r2, i5);

     label2:
        return;
    }

    public org.apache.commons.lang.text.StrBuilder replace(int, int, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2, i3, $i4;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int validateRange(int,int)>(i0, i3);

        if r1 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

     label2:
        $i2 = $i1 - i0;

        specialinvoke r0.<org.apache.commons.lang.text.StrBuilder: void replaceImpl(int,int,int,java.lang.String,int)>(i0, $i1, $i2, r1, $i4);

        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder replaceAll(char, char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c0, c1, $c3;
        int $i2, i4, $i5, $i6, $i7, $i8;
        char[] $r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i5 = (int) c0;

        $i6 = (int) c1;

        if $i5 == $i6 goto label3;

        i4 = 0;

     label1:
        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i4 >= $i2 goto label3;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c3 = $r1[i4];

        $i7 = (int) $c3;

        $i8 = (int) c0;

        if $i7 != $i8 goto label2;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r2[i4] = c1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder replaceFirst(char, char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c0, c1, $c3;
        int $i2, i4, $i5, $i6, $i7, $i8;
        char[] $r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i5 = (int) c0;

        $i6 = (int) c1;

        if $i5 == $i6 goto label3;

        i4 = 0;

     label1:
        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i4 >= $i2 goto label3;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c3 = $r1[i4];

        $i7 = (int) $c3;

        $i8 = (int) c0;

        if $i7 != $i8 goto label2;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $r2[i4] = c1;

        goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder replaceAll(java.lang.String, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String r0, r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        i0 = $i4;

        if $i4 <= 0 goto label6;

        if r2 != null goto label3;

        $i5 = 0;

        goto label4;

     label3:
        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

     label4:
        i1 = $i5;

        i6 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r0, 0);

     label5:
        if i6 < 0 goto label6;

        $i2 = i6 + i0;

        specialinvoke r1.<org.apache.commons.lang.text.StrBuilder: void replaceImpl(int,int,int,java.lang.String,int)>(i6, $i2, i0, r2, i1);

        $i3 = i6 + i1;

        i6 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r0, $i3);

        goto label5;

     label6:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder replaceFirst(java.lang.String, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String r0, r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        i0 = $i3;

        if $i3 <= 0 goto label5;

        $i1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r0, 0);

        if $i1 < 0 goto label5;

        if r2 != null goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

     label4:
        $i2 = $i1 + i0;

        specialinvoke r1.<org.apache.commons.lang.text.StrBuilder: void replaceImpl(int,int,int,java.lang.String,int)>($i1, $i2, i0, r2, $i4);

     label5:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder replaceAll(org.apache.commons.lang.text.StrMatcher, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r3;
        int $i0, $i2;
        java.lang.String r2;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = (int) -1;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder replace(org.apache.commons.lang.text.StrMatcher,java.lang.String,int,int,int)>(r1, r2, 0, $i0, $i2);

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder replaceFirst(org.apache.commons.lang.text.StrMatcher, java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r3;
        int $i0;
        java.lang.String r2;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder replace(org.apache.commons.lang.text.StrMatcher,java.lang.String,int,int,int)>(r1, r2, 0, $i0, 1);

        return $r3;
    }

    public org.apache.commons.lang.text.StrBuilder replace(org.apache.commons.lang.text.StrMatcher, java.lang.String, int, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0, $r3;
        int i0, $i1, i2, i3;
        java.lang.String r2;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i3 := @parameter3: int;

        i2 := @parameter4: int;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int validateRange(int,int)>(i0, i3);

        $r3 = specialinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder replaceImpl(org.apache.commons.lang.text.StrMatcher,java.lang.String,int,int,int)>(r1, r2, i0, $i1, i2);

        return $r3;
    }

    private org.apache.commons.lang.text.StrBuilder replaceImpl(org.apache.commons.lang.text.StrMatcher, java.lang.String, int, int, int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, $i9, i10, $i12;
        java.lang.String r2;
        char[] $r3;
        org.apache.commons.lang.text.StrMatcher r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        r2 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        i7 := @parameter3: int;

        i8 := @parameter4: int;

        if r0 == null goto label1;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        if r2 != null goto label3;

        $i9 = 0;

        goto label4;

     label3:
        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

     label4:
        i1 = $i9;

        $r3 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i10 = i2;

     label5:
        if i10 >= i7 goto label7;

        if i8 == 0 goto label7;

        $i3 = virtualinvoke r0.<org.apache.commons.lang.text.StrMatcher: int isMatch(char[],int,int,int)>($r3, i10, i2, i7);

        if $i3 <= 0 goto label6;

        $i4 = i10 + $i3;

        specialinvoke r1.<org.apache.commons.lang.text.StrBuilder: void replaceImpl(int,int,int,java.lang.String,int)>(i10, $i4, $i3, r2, i1);

        $i5 = i7 - $i3;

        i7 = $i5 + i1;

        $i6 = i10 + i1;

        i10 = $i6 - 1;

        if i8 <= 0 goto label6;

        $i12 = (int) -1;

        i8 = i8 + $i12;

     label6:
        i10 = i10 + 1;

        goto label5;

     label7:
        return r1;
    }

    public org.apache.commons.lang.text.StrBuilder reverse()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c4, $c5;
        int $i0, $i1, i2, $i3, i6, i7, $i9;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        i2 = $i1 / 2;

        r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i6 = 0;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        i7 = $i3 - 1;

     label2:
        if i6 >= i2 goto label3;

        c4 = r1[i6];

        $c5 = r1[i7];

        r1[i6] = $c5;

        r1[i7] = c4;

        i6 = i6 + 1;

        $i9 = (int) -1;

        i7 = i7 + $i9;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.text.StrBuilder trim()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char $c4, $c5;
        int $i0, $i1, $i2, $i3, i6, i7, $i8, $i9, $i11;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        i6 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i7 = 0;

     label2:
        if i7 >= i6 goto label3;

        $c5 = r1[i7];

        $i8 = (int) $c5;

        if $i8 > 32 goto label3;

        i7 = i7 + 1;

        goto label2;

     label3:
        if i7 >= i6 goto label4;

        $i3 = i6 - 1;

        $c4 = r1[$i3];

        $i9 = (int) $c4;

        if $i9 > 32 goto label4;

        $i11 = (int) -1;

        i6 = i6 + $i11;

        goto label3;

     label4:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i6 >= $i1 goto label5;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder delete(int,int)>(i6, $i2);

     label5:
        if i7 <= 0 goto label6;

        virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder delete(int,int)>(0, i7);

     label6:
        return r0;
    }

    public boolean startsWith(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        char $c2, $c3;
        int $i0, $i1, i4, $i5, $i6;
        char[] $r2;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return 1;

     label2:
        $i1 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 <= $i1 goto label3;

        return 0;

     label3:
        i4 = 0;

     label4:
        if i4 >= $i0 goto label6;

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c2 = $r2[i4];

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c2;

        $i6 = (int) $c3;

        if $i5 == $i6 goto label5;

        return 0;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return 1;
    }

    public boolean endsWith(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        char $c3, $c4;
        int $i0, $i1, $i2, i5, i6, $i7, $i8;
        char[] $r2;
        java.lang.String r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return 1;

     label2:
        $i1 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i0 <= $i1 goto label3;

        return 0;

     label3:
        $i2 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        i5 = $i2 - $i0;

        i6 = 0;

     label4:
        if i6 >= $i0 goto label6;

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c3 = $r2[i5];

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c3;

        $i8 = (int) $c4;

        if $i7 == $i8 goto label5;

        return 0;

     label5:
        i6 = i6 + 1;

        i5 = i5 + 1;

        goto label4;

     label6:
        return 1;
    }

    public java.lang.String substring(int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }

    public java.lang.String substring(int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2, i3;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int validateRange(int,int)>(i0, i3);

        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = $i1 - i0;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, i0, $i2);

        return $r1;
    }

    public java.lang.String leftString(int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2;
        char[] $r2, $r4;
        java.lang.String $r1, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return "";

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i0 < $i1 goto label2;

        $r3 = new java.lang.String;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r4, 0, $i2);

        return $r3;

     label2:
        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, i0);

        return $r1;
    }

    public java.lang.String rightString(int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2, $i3, $i4;
        char[] $r2, $r4;
        java.lang.String $r1, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return "";

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i0 < $i1 goto label2;

        $r3 = new java.lang.String;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i4 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r4, 0, $i4);

        return $r3;

     label2:
        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i3 = $i2 - i0;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i3, i0);

        return $r1;
    }

    public java.lang.String midString(int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        char[] $r2, $r4;
        java.lang.String $r1, $r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        if i6 >= 0 goto label1;

        i6 = 0;

     label1:
        if i0 <= 0 goto label2;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i6 < $i1 goto label3;

     label2:
        return "";

     label3:
        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = i6 + i0;

        if $i3 > $i2 goto label4;

        $r3 = new java.lang.String;

        $r4 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i4 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i5 = $i4 - i6;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r4, i6, $i5);

        return $r3;

     label4:
        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, i6, i0);

        return $r1;
    }

    public boolean contains(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c1, $c2;
        int $i0, i3, $i4, $i5;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c1 := @parameter0: char;

        r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i3 >= $i0 goto label3;

        $c2 = r1[i3];

        $i4 = (int) $c2;

        $i5 = (int) c1;

        if $i4 != $i5 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean contains(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r1, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(org.apache.commons.lang.text.StrMatcher)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        org.apache.commons.lang.text.StrMatcher r1;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int indexOf(org.apache.commons.lang.text.StrMatcher,int)>(r1, 0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i1;
        char c0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c0 := @parameter0: char;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int indexOf(char,int)>(c0, 0);

        return $i1;
    }

    public int indexOf(char, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c2, $c3;
        int $i0, $i1, i4, $i5, i6, $i8, $i9, $i10, $i12;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c2 := @parameter0: char;

        i4 := @parameter1: int;

        if i4 >= 0 goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $i5 = i4;

     label2:
        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i5 < $i0 goto label3;

        $i8 = (int) -1;

        return $i8;

     label3:
        r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i6 = $i5;

     label4:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i6 >= $i1 goto label6;

        $c3 = r1[i6];

        $i9 = (int) $c3;

        $i10 = (int) c2;

        if $i9 != $i10 goto label5;

        return i6;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        $i12 = (int) -1;

        return $i12;
    }

    public int indexOf(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int indexOf(java.lang.String,int)>(r1, 0);

        return $i0;
    }

    public int indexOf(java.lang.String, int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i10, i11, $i12, i13, i14, $i16, $i18, $i19, $i20, $i22;
        java.lang.String r0;
        char $c6, $c8, $c9;
        char[] r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.String;

        i11 := @parameter1: int;

        if i11 >= 0 goto label01;

        $i12 = 0;

        goto label02;

     label01:
        $i12 = i11;

     label02:
        if r0 == null goto label03;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i12 < $i0 goto label04;

     label03:
        $i16 = (int) -1;

        return $i16;

     label04:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 1 goto label05;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i10 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: int indexOf(char,int)>($c9, $i12);

        return $i10;

     label05:
        if $i1 != 0 goto label06;

        return $i12;

     label06:
        $i2 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i1 <= $i2 goto label07;

        $i18 = (int) -1;

        return $i18;

     label07:
        r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i3 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i4 = $i3 - $i1;

        i5 = $i4 + 1;

        i13 = $i12;

     label08:
        if i13 >= i5 goto label13;

        i14 = 0;

     label09:
        if i14 >= $i1 goto label11;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        $i7 = i13 + i14;

        $c8 = r2[$i7];

        $i19 = (int) $c6;

        $i20 = (int) $c8;

        if $i19 == $i20 goto label10;

        goto label12;

     label10:
        i14 = i14 + 1;

        goto label09;

     label11:
        return i13;

     label12:
        i13 = i13 + 1;

        goto label08;

     label13:
        $i22 = (int) -1;

        return $i22;
    }

    public int indexOf(org.apache.commons.lang.text.StrMatcher)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int indexOf(org.apache.commons.lang.text.StrMatcher,int)>(r1, 0);

        return $i0;
    }

    public int indexOf(org.apache.commons.lang.text.StrMatcher, int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int $i0, i1, $i2, i3, $i4, i5, i6, $i8, $i10;
        char[] r2;
        org.apache.commons.lang.text.StrMatcher r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        i3 := @parameter1: int;

        if i3 >= 0 goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = i3;

     label2:
        i5 = $i4;

        if r0 == null goto label3;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i4 < $i0 goto label4;

     label3:
        $i8 = (int) -1;

        return $i8;

     label4:
        i1 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i6 = $i4;

     label5:
        if i6 >= i1 goto label7;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.text.StrMatcher: int isMatch(char[],int,int,int)>(r2, i6, i5, i1);

        if $i2 <= 0 goto label6;

        return i6;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        $i10 = (int) -1;

        return $i10;
    }

    public int lastIndexOf(char)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i1, $i2, $i3;
        char c0;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c0 := @parameter0: char;

        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i2 = $i1 - 1;

        $i3 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int lastIndexOf(char,int)>(c0, $i2);

        return $i3;
    }

    public int lastIndexOf(char, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char c1, $c2;
        int $i0, $i3, i4, $i5, i6, $i8, $i9, $i10, $i12, $i14;
        char[] $r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        c1 := @parameter0: char;

        i4 := @parameter1: int;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i4 < $i0 goto label1;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i5 = $i3 - 1;

        goto label2;

     label1:
        $i5 = i4;

     label2:
        if $i5 >= 0 goto label3;

        $i8 = (int) -1;

        return $i8;

     label3:
        i6 = $i5;

     label4:
        if i6 < 0 goto label6;

        $r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $c2 = $r1[i6];

        $i9 = (int) $c2;

        $i10 = (int) c1;

        if $i9 != $i10 goto label5;

        return i6;

     label5:
        $i12 = (int) -1;

        i6 = i6 + $i12;

        goto label4;

     label6:
        $i14 = (int) -1;

        return $i14;
    }

    public int lastIndexOf(java.lang.String)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i1 = $i0 - 1;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int lastIndexOf(java.lang.String,int)>(r1, $i1);

        return $i2;
    }

    public int lastIndexOf(java.lang.String, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1, $i2, $i3, $i5, $i8, $i9, i10, $i11, i12, i13, i14, $i16, $i17, $i18, $i20, $i22;
        java.lang.String r1;
        char $c4, $c6, $c7;
        char[] $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: java.lang.String;

        i10 := @parameter1: int;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i10 < $i0 goto label01;

        $i9 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i11 = $i9 - 1;

        goto label02;

     label01:
        $i11 = i10;

     label02:
        i12 = $i11;

        if r1 == null goto label03;

        if $i11 >= 0 goto label04;

     label03:
        $i16 = (int) -1;

        return $i16;

     label04:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 0 goto label12;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i1 > $i2 goto label12;

        if $i1 != 1 goto label05;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i8 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int lastIndexOf(char,int)>($c7, $i11);

        return $i8;

     label05:
        $i3 = $i11 - $i1;

        i13 = $i3 + 1;

     label06:
        if i13 < 0 goto label11;

        i14 = 0;

     label07:
        if i14 >= $i1 goto label09;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i14);

        $r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i5 = i13 + i14;

        $c6 = $r2[$i5];

        $i17 = (int) $c4;

        $i18 = (int) $c6;

        if $i17 == $i18 goto label08;

        goto label10;

     label08:
        i14 = i14 + 1;

        goto label07;

     label09:
        return i13;

     label10:
        $i20 = (int) -1;

        i13 = i13 + $i20;

        goto label06;

     label11:
        goto label13;

     label12:
        if $i1 != 0 goto label13;

        return i12;

     label13:
        $i22 = (int) -1;

        return $i22;
    }

    public int lastIndexOf(org.apache.commons.lang.text.StrMatcher)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, $i1;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.text.StrBuilder: int lastIndexOf(org.apache.commons.lang.text.StrMatcher,int)>(r1, $i0);

        return $i1;
    }

    public int lastIndexOf(org.apache.commons.lang.text.StrMatcher, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int $i0, i1, $i2, $i3, i4, $i5, i6, $i8, $i10, $i12;
        char[] r2;
        org.apache.commons.lang.text.StrMatcher r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrMatcher;

        i4 := @parameter1: int;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i4 < $i0 goto label1;

        $i3 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i5 = $i3 - 1;

        goto label2;

     label1:
        $i5 = i4;

     label2:
        if r1 == null goto label3;

        if $i5 >= 0 goto label4;

     label3:
        $i8 = (int) -1;

        return $i8;

     label4:
        r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i1 = $i5 + 1;

        i6 = $i5;

     label5:
        if i6 < 0 goto label7;

        $i2 = virtualinvoke r1.<org.apache.commons.lang.text.StrMatcher: int isMatch(char[],int,int,int)>(r2, i6, 0, i1);

        if $i2 <= 0 goto label6;

        return i6;

     label6:
        $i10 = (int) -1;

        i6 = i6 + $i10;

        goto label5;

     label7:
        $i12 = (int) -1;

        return $i12;
    }

    public org.apache.commons.lang.text.StrTokenizer asTokenizer()
    {
        org.apache.commons.lang.text.StrBuilder r1;
        org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer $r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        $r0 = new org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer;

        specialinvoke $r0.<org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer: void <init>(org.apache.commons.lang.text.StrBuilder)>(r1);

        return $r0;
    }

    public java.io.Reader asReader()
    {
        org.apache.commons.lang.text.StrBuilder r1;
        org.apache.commons.lang.text.StrBuilder$StrBuilderReader $r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        $r0 = new org.apache.commons.lang.text.StrBuilder$StrBuilderReader;

        specialinvoke $r0.<org.apache.commons.lang.text.StrBuilder$StrBuilderReader: void <init>(org.apache.commons.lang.text.StrBuilder)>(r1);

        return $r0;
    }

    public java.io.Writer asWriter()
    {
        org.apache.commons.lang.text.StrBuilder r1;
        org.apache.commons.lang.text.StrBuilder$StrBuilderWriter $r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        $r0 = new org.apache.commons.lang.text.StrBuilder$StrBuilderWriter;

        specialinvoke $r0.<org.apache.commons.lang.text.StrBuilder$StrBuilderWriter: void <init>(org.apache.commons.lang.text.StrBuilder)>(r1);

        return $r0;
    }

    public boolean equalsIgnoreCase(org.apache.commons.lang.text.StrBuilder)
    {
        org.apache.commons.lang.text.StrBuilder r0, r1;
        int $i0, $i1, $i2, i7, $i8, $i9, $i10, $i11, $i13;
        char c3, c4, $c5, $c6;
        char[] r2, r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrBuilder;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        r3 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        i7 = $i2 - 1;

     label3:
        if i7 < 0 goto label5;

        c3 = r2[i7];

        c4 = r3[i7];

        $i8 = (int) c3;

        $i9 = (int) c4;

        if $i8 == $i9 goto label4;

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c3);

        $c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c4);

        $i10 = (int) $c5;

        $i11 = (int) $c6;

        if $i10 == $i11 goto label4;

        return 0;

     label4:
        $i13 = (int) -1;

        i7 = i7 + $i13;

        goto label3;

     label5:
        return 1;
    }

    public boolean equals(org.apache.commons.lang.text.StrBuilder)
    {
        org.apache.commons.lang.text.StrBuilder r0, r1;
        char $c3, $c4;
        int $i0, $i1, $i2, i5, $i6, $i7, $i9;
        char[] r2, r3;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 := @parameter0: org.apache.commons.lang.text.StrBuilder;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        r2 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        r3 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        i5 = $i2 - 1;

     label3:
        if i5 < 0 goto label5;

        $c4 = r2[i5];

        $c3 = r3[i5];

        $i6 = (int) $c4;

        $i7 = (int) $c3;

        if $i6 == $i7 goto label4;

        return 0;

     label4:
        $i9 = (int) -1;

        i5 = i5 + $i9;

        goto label3;

     label5:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang.text.StrBuilder r1, $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.commons.lang.text.StrBuilder;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.commons.lang.text.StrBuilder) r0;

        $z1 = virtualinvoke r1.<org.apache.commons.lang.text.StrBuilder: boolean equals(org.apache.commons.lang.text.StrBuilder)>($r2);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.lang.text.StrBuilder r0;
        char $c1;
        int $i0, $i2, i3, i4, $i5, $i7;
        char[] r1;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        r1 = r0.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        i3 = 0;

        $i0 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        $i2 = 31 * i3;

        $c1 = r1[i4];

        $i5 = (int) $c1;

        i3 = $i2 + $i5;

        $i7 = (int) -1;

        i4 = i4 + $i7;

        goto label1;

     label2:
        return i3;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int $i0;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r0;
    }

    public java.lang.StringBuffer toStringBuffer()
    {
        org.apache.commons.lang.text.StrBuilder r1;
        java.lang.StringBuffer $r0, $r3;
        int $i0, $i1;
        char[] $r2;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        $r0 = new java.lang.StringBuffer;

        $i0 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r2 = r1.<org.apache.commons.lang.text.StrBuilder: char[] buffer>;

        $i1 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, 0, $i1);

        return $r3;
    }

    protected int validateRange(int, int)
    {
        org.apache.commons.lang.text.StrBuilder r0;
        int i0, $i1, i2;
        java.lang.StringIndexOutOfBoundsException $r1, $r2;

        r0 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r2;

     label1:
        $i1 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i2 <= $i1 goto label2;

        i2 = r0.<org.apache.commons.lang.text.StrBuilder: int size>;

     label2:
        if i0 <= i2 goto label3;

        $r1 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("end < start");

        throw $r1;

     label3:
        return i2;
    }

    protected void validateIndex(int)
    {
        org.apache.commons.lang.text.StrBuilder r1;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r0;

        r1 := @this: org.apache.commons.lang.text.StrBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<org.apache.commons.lang.text.StrBuilder: int size>;

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r0;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang.text.StrBuilder: long serialVersionUID> = 7628716375283629643L;

        <org.apache.commons.lang.text.StrBuilder: int CAPACITY> = 32;

        return;
    }
}
