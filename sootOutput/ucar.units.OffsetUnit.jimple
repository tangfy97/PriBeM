public final class ucar.units.OffsetUnit extends ucar.units.UnitImpl implements ucar.units.DerivableUnit
{
    private static final long serialVersionUID;
    private final double _offset;
    private final ucar.units.Unit _unit;
    private ucar.units.DerivedUnit _derivedUnit;

    public void <init>(ucar.units.Unit, double)
    {
        ucar.units.Unit r1;
        ucar.units.OffsetUnit r0;
        double d0;

        r0 := @this: ucar.units.OffsetUnit;

        r1 := @parameter0: ucar.units.Unit;

        d0 := @parameter1: double;

        specialinvoke r0.<ucar.units.OffsetUnit: void <init>(ucar.units.Unit,double,ucar.units.UnitName)>(r1, d0, null);

        return;
    }

    public void <init>(ucar.units.Unit, double, ucar.units.UnitName)
    {
        ucar.units.UnitName r1;
        ucar.units.Unit r2, $r4;
        ucar.units.OffsetUnit r0, $r3, $r5;
        boolean $z0;
        double d0, $d1, $d2;

        r0 := @this: ucar.units.OffsetUnit;

        r2 := @parameter0: ucar.units.Unit;

        d0 := @parameter1: double;

        r1 := @parameter2: ucar.units.UnitName;

        specialinvoke r0.<ucar.units.UnitImpl: void <init>(ucar.units.UnitName)>(r1);

        $z0 = r2 instanceof ucar.units.OffsetUnit;

        if $z0 != 0 goto label1;

        r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit> = r2;

        r0.<ucar.units.OffsetUnit: double _offset> = d0;

        goto label2;

     label1:
        $r3 = (ucar.units.OffsetUnit) r2;

        $r4 = $r3.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit> = $r4;

        $r5 = (ucar.units.OffsetUnit) r2;

        $d1 = $r5.<ucar.units.OffsetUnit: double _offset>;

        $d2 = $d1 + d0;

        r0.<ucar.units.OffsetUnit: double _offset> = $d2;

     label2:
        return;
    }

    static ucar.units.Unit getInstance(ucar.units.Unit, double)
    {
        byte $b0;
        ucar.units.Unit r0, $r1;
        ucar.units.OffsetUnit $r2;
        double d0;

        r0 := @parameter0: ucar.units.Unit;

        d0 := @parameter1: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r2 = new ucar.units.OffsetUnit;

        $r1 = $r2;

        specialinvoke $r2.<ucar.units.OffsetUnit: void <init>(ucar.units.Unit,double)>(r0, d0);

     label2:
        return $r1;
    }

    public ucar.units.Unit getUnit()
    {
        ucar.units.Unit $r1;
        ucar.units.OffsetUnit r0;

        r0 := @this: ucar.units.OffsetUnit;

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        return $r1;
    }

    public double getOffset()
    {
        ucar.units.OffsetUnit r0;
        double $d0;

        r0 := @this: ucar.units.OffsetUnit;

        $d0 = r0.<ucar.units.OffsetUnit: double _offset>;

        return $d0;
    }

    public ucar.units.Unit clone(ucar.units.UnitName)
    {
        ucar.units.UnitName r3;
        ucar.units.Unit $r2;
        ucar.units.OffsetUnit $r0, r1;
        double $d0;

        r1 := @this: ucar.units.OffsetUnit;

        r3 := @parameter0: ucar.units.UnitName;

        $r0 = new ucar.units.OffsetUnit;

        $r2 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $d0 = virtualinvoke r1.<ucar.units.OffsetUnit: double getOffset()>();

        specialinvoke $r0.<ucar.units.OffsetUnit: void <init>(ucar.units.Unit,double,ucar.units.UnitName)>($r2, $d0, r3);

        return $r0;
    }

    public ucar.units.Unit multiplyBy(double) throws ucar.units.MultiplyException
    {
        ucar.units.Unit $r1, $r2, $r3;
        ucar.units.MultiplyException $r4;
        ucar.units.OffsetUnit r0;
        byte $b0;
        double d0, $d1, $d2;

        r0 := @this: ucar.units.OffsetUnit;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = new ucar.units.MultiplyException;

        specialinvoke $r4.<ucar.units.MultiplyException: void <init>(double,ucar.units.Unit)>(d0, r0);

        throw $r4;

     label1:
        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $r2 = interfaceinvoke $r1.<ucar.units.Unit: ucar.units.Unit multiplyBy(double)>(d0);

        $d1 = r0.<ucar.units.OffsetUnit: double _offset>;

        $d2 = $d1 / d0;

        $r3 = staticinvoke <ucar.units.OffsetUnit: ucar.units.Unit getInstance(ucar.units.Unit,double)>($r2, $d2);

        return $r3;
    }

    public ucar.units.Unit shiftTo(double)
    {
        ucar.units.Unit $r1, $r2;
        ucar.units.OffsetUnit r0;
        double d0, $d1, $d2;

        r0 := @this: ucar.units.OffsetUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $d1 = r0.<ucar.units.OffsetUnit: double _offset>;

        $d2 = d0 + $d1;

        $r2 = staticinvoke <ucar.units.OffsetUnit: ucar.units.Unit getInstance(ucar.units.Unit,double)>($r1, $d2);

        return $r2;
    }

    protected ucar.units.Unit myMultiplyBy(ucar.units.Unit) throws ucar.units.MultiplyException
    {
        ucar.units.Unit r0, $r2, $r3, $r5, $r6;
        ucar.units.OffsetUnit r1, $r4;
        boolean $z0;

        r1 := @this: ucar.units.OffsetUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.OffsetUnit;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r4 = (ucar.units.OffsetUnit) r0;

        $r5 = virtualinvoke $r4.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r3.<ucar.units.Unit: ucar.units.Unit multiplyBy(ucar.units.Unit)>($r5);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit multiplyBy(ucar.units.Unit)>(r0);

     label2:
        return $r6;
    }

    protected ucar.units.Unit myDivideBy(ucar.units.Unit) throws ucar.units.OperationException
    {
        ucar.units.Unit r0, $r2, $r3, $r5, $r6;
        ucar.units.OffsetUnit r1, $r4;
        boolean $z0;

        r1 := @this: ucar.units.OffsetUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.OffsetUnit;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r4 = (ucar.units.OffsetUnit) r0;

        $r5 = virtualinvoke $r4.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r3.<ucar.units.Unit: ucar.units.Unit divideBy(ucar.units.Unit)>($r5);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit divideBy(ucar.units.Unit)>(r0);

     label2:
        return $r6;
    }

    protected ucar.units.Unit myDivideInto(ucar.units.Unit) throws ucar.units.OperationException
    {
        ucar.units.Unit r0, $r2, $r3, $r5, $r6;
        ucar.units.OffsetUnit r1, $r4;
        boolean $z0;

        r1 := @this: ucar.units.OffsetUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.OffsetUnit;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r4 = (ucar.units.OffsetUnit) r0;

        $r5 = virtualinvoke $r4.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r3.<ucar.units.Unit: ucar.units.Unit divideInto(ucar.units.Unit)>($r5);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit divideInto(ucar.units.Unit)>(r0);

     label2:
        return $r6;
    }

    protected ucar.units.Unit myRaiseTo(int) throws ucar.units.RaiseException
    {
        ucar.units.Unit $r1, $r2;
        int i0;
        ucar.units.OffsetUnit r0;

        r0 := @this: ucar.units.OffsetUnit;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r2 = interfaceinvoke $r1.<ucar.units.Unit: ucar.units.Unit raiseTo(int)>(i0);

        return $r2;
    }

    public ucar.units.DerivedUnit getDerivedUnit()
    {
        ucar.units.DerivedUnit $r1, $r2, $r4;
        ucar.units.Unit $r3;
        ucar.units.OffsetUnit r0;

        r0 := @this: ucar.units.OffsetUnit;

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit _derivedUnit>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r4 = interfaceinvoke $r3.<ucar.units.Unit: ucar.units.DerivedUnit getDerivedUnit()>();

        r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit _derivedUnit> = $r4;

     label1:
        $r2 = r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit _derivedUnit>;

        return $r2;
    }

    public float toDerivedUnit(float) throws ucar.units.ConversionException
    {
        float f0, $f1;
        ucar.units.OffsetUnit r0;
        double $d0, $d1;

        r0 := @this: ucar.units.OffsetUnit;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.OffsetUnit: double toDerivedUnit(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public double toDerivedUnit(double) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r5;
        ucar.units.Unit $r1, $r2;
        ucar.units.OffsetUnit r0;
        ucar.units.DerivableUnit $r3;
        ucar.units.ConversionException $r4;
        boolean $z0;
        double d0, $d1, $d2, $d3;

        r0 := @this: ucar.units.OffsetUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r4 = new ucar.units.ConversionException;

        $r5 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r4.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r0, $r5);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r3 = (ucar.units.DerivableUnit) $r2;

        $d1 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        $d2 = d0 + $d1;

        $d3 = interfaceinvoke $r3.<ucar.units.DerivableUnit: double toDerivedUnit(double)>($d2);

        return $d3;
    }

    public float[] toDerivedUnit(float[], float[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r8;
        float[] r2, r4, $r6;
        int i0, $i2;
        boolean $z0;
        double $d0;
        ucar.units.Unit $r1, $r3;
        ucar.units.OffsetUnit r0;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r9;
        float f0, $f1, $f2;

        r0 := @this: ucar.units.OffsetUnit;

        r2 := @parameter0: float[];

        r4 := @parameter1: float[];

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r9 = new ucar.units.ConversionException;

        $r8 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r9.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r0, $r8);

        throw $r9;

     label1:
        $d0 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        f0 = (float) $d0;

        i0 = lengthof r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label3;

        $f1 = r2[i0];

        $f2 = $f1 + f0;

        r4[i0] = $f2;

        goto label2;

     label3:
        $r3 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r3;

        $r6 = interfaceinvoke $r5.<ucar.units.DerivableUnit: float[] toDerivedUnit(float[],float[])>(r4, r4);

        return $r6;
    }

    public double[] toDerivedUnit(double[], double[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r8;
        ucar.units.Unit $r1, $r3;
        double[] r2, r4, $r6;
        ucar.units.OffsetUnit r0;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r9;
        int i0, $i2;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: ucar.units.OffsetUnit;

        r2 := @parameter0: double[];

        r4 := @parameter1: double[];

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r9 = new ucar.units.ConversionException;

        $r8 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r9.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r0, $r8);

        throw $r9;

     label1:
        $d0 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        i0 = lengthof r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label3;

        $d1 = r2[i0];

        $d2 = $d1 + $d0;

        r4[i0] = $d2;

        goto label2;

     label3:
        $r3 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r3;

        $r6 = interfaceinvoke $r5.<ucar.units.DerivableUnit: double[] toDerivedUnit(double[],double[])>(r4, r4);

        return $r6;
    }

    public float fromDerivedUnit(float) throws ucar.units.ConversionException
    {
        float f0, $f1;
        ucar.units.OffsetUnit r0;
        double $d0, $d1;

        r0 := @this: ucar.units.OffsetUnit;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.OffsetUnit: double fromDerivedUnit(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public double fromDerivedUnit(double) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r5;
        ucar.units.Unit $r1, $r2;
        ucar.units.OffsetUnit r0;
        ucar.units.DerivableUnit $r3;
        ucar.units.ConversionException $r4;
        boolean $z0;
        double d0, $d1, $d2, $d3;

        r0 := @this: ucar.units.OffsetUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r4 = new ucar.units.ConversionException;

        $r5 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r4.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>($r5, r0);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r3 = (ucar.units.DerivableUnit) $r2;

        $d1 = interfaceinvoke $r3.<ucar.units.DerivableUnit: double fromDerivedUnit(double)>(d0);

        $d2 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        $d3 = $d1 - $d2;

        return $d3;
    }

    public float[] fromDerivedUnit(float[], float[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r7;
        ucar.units.Unit $r1, $r2;
        float[] r3, r4;
        ucar.units.OffsetUnit r0;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r8;
        int i0, $i2;
        float f0, $f1, $f2;
        boolean $z0;
        double $d0;

        r0 := @this: ucar.units.OffsetUnit;

        r3 := @parameter0: float[];

        r4 := @parameter1: float[];

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r8 = new ucar.units.ConversionException;

        $r7 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r8.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>($r7, r0);

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r2;

        interfaceinvoke $r5.<ucar.units.DerivableUnit: float[] fromDerivedUnit(float[],float[])>(r3, r4);

        $d0 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        f0 = (float) $d0;

        i0 = lengthof r3;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label3;

        $f1 = r4[i0];

        $f2 = $f1 - f0;

        r4[i0] = $f2;

        goto label2;

     label3:
        return r4;
    }

    public double[] fromDerivedUnit(double[], double[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r7;
        ucar.units.Unit $r1, $r2;
        double[] r3, r4;
        ucar.units.OffsetUnit r0;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r8;
        int i0, $i2;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: ucar.units.OffsetUnit;

        r3 := @parameter0: double[];

        r4 := @parameter1: double[];

        $r1 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r8 = new ucar.units.ConversionException;

        $r7 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r8.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>($r7, r0);

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r2;

        interfaceinvoke $r5.<ucar.units.DerivableUnit: double[] fromDerivedUnit(double[],double[])>(r3, r4);

        $d0 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        i0 = lengthof r3;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label3;

        $d1 = r4[i0];

        $d2 = $d1 - $d0;

        r4[i0] = $d2;

        goto label2;

     label3:
        return r4;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.units.Unit $r3, $r4, $r5;
        ucar.units.OffsetUnit r0, r2;
        byte $b0, $b1;
        java.lang.Object r1;
        double $d0, $d1, $d2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.units.OffsetUnit;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $d0 = r0.<ucar.units.OffsetUnit: double _offset>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $r5 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z2;

     label2:
        $z0 = r1 instanceof ucar.units.OffsetUnit;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (ucar.units.OffsetUnit) r1;

        $d2 = r0.<ucar.units.OffsetUnit: double _offset>;

        $d1 = r2.<ucar.units.OffsetUnit: double _offset>;

        $b1 = $d2 cmpl $d1;

        if $b1 != 0 goto label4;

        $r4 = r0.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $r3 = r2.<ucar.units.OffsetUnit: ucar.units.Unit _unit>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public int hashCode()
    {
        java.lang.Double $r1;
        ucar.units.Unit $r2;
        ucar.units.OffsetUnit r0;
        byte $b0;
        int $i1, $i2, $i3;
        double $d0, $d1;

        r0 := @this: ucar.units.OffsetUnit;

        $d0 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $d1 = virtualinvoke r0.<ucar.units.OffsetUnit: double getOffset()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i3 = virtualinvoke $r1.<java.lang.Double: int hashCode()>();

     label2:
        $r2 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i3 ^ $i1;

        return $i2;
    }

    public boolean isDimensionless()
    {
        ucar.units.Unit $r1;
        ucar.units.OffsetUnit r0;
        boolean $z0;

        r0 := @this: ucar.units.OffsetUnit;

        $r1 = virtualinvoke r0.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $z0 = interfaceinvoke $r1.<ucar.units.Unit: boolean isDimensionless()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        ucar.units.OffsetUnit r0;
        java.lang.String $r1, $r2;

        r0 := @this: ucar.units.OffsetUnit;

        $r1 = specialinvoke r0.<ucar.units.UnitImpl: java.lang.String toString()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.OffsetUnit: java.lang.String getCanonicalString()>();

     label2:
        return $r2;
    }

    public java.lang.String getCanonicalString()
    {
        ucar.units.Unit $r3;
        ucar.units.OffsetUnit r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r7;
        java.lang.String $r4, $r8;
        double $d0;

        r2 := @this: ucar.units.OffsetUnit;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke r2.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") @ ");

        $d0 = virtualinvoke r2.<ucar.units.OffsetUnit: double getOffset()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        ucar.units.SupplementaryBaseQuantity $r83;
        ucar.units.OffsetUnit $r3, $r71, $r85;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r11, $r13, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r43, $r45, $r47, $r51, $r53, $r55, $r56, $r58, $r60, $r64, $r66, $r68, $r69, $r72, $r74, $r75, $r77, $r79, $r80, $r86, $r88, $r89;
        ucar.units.RegularBaseQuantity $r1;
        float[] $r48, $r49, $r50, $r61, $r62, $r63;
        java.lang.String $r8, $r14, $r21, $r27, $r33, $r39, $r44, $r52, $r57, $r65, $r70, $r76, $r81, $r90;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.units.UnitName $r0, $r82;
        ucar.units.Unit $r12, $r15, $r19, $r25, $r31, $r37;
        float $f0, $f1;
        java.lang.String[] r91;
        double $d0, $d1;
        java.io.PrintStream $r5, $r10, $r17, $r23, $r29, $r35, $r41, $r46, $r54, $r59, $r67, $r73, $r78, $r87;
        ucar.units.BaseUnit $r2, $r84;

        r91 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <ucar.units.UnitName: ucar.units.UnitName newUnitName(java.lang.String,java.lang.String,java.lang.String)>("kelvin", null, "K");

        $r1 = <ucar.units.BaseQuantity: ucar.units.RegularBaseQuantity THERMODYNAMIC_TEMPERATURE>;

        $r2 = staticinvoke <ucar.units.BaseUnit: ucar.units.BaseUnit getOrCreate(ucar.units.UnitName,ucar.units.BaseQuantity)>($r0, $r1);

        $r3 = new ucar.units.OffsetUnit;

        specialinvoke $r3.<ucar.units.OffsetUnit: void <init>(ucar.units.Unit,double)>($r2, 273.15);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.equals(kelvin)=");

        $z0 = virtualinvoke $r3.<ucar.units.OffsetUnit: boolean equals(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.getUnit().equals(kelvin)=");

        $r12 = virtualinvoke $r3.<ucar.units.OffsetUnit: ucar.units.Unit getUnit()>();

        $z1 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r15 = virtualinvoke $r3.<ucar.units.OffsetUnit: ucar.units.Unit multiplyBy(ucar.units.Unit)>($r2);

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsiusKelvin.divideBy(celsius)=");

        $r19 = interfaceinvoke $r15.<ucar.units.Unit: ucar.units.Unit divideBy(ucar.units.Unit)>($r3);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.divideBy(kelvin)=");

        $r25 = virtualinvoke $r3.<ucar.units.OffsetUnit: ucar.units.Unit divideBy(ucar.units.Unit)>($r2);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kelvin.divideBy(celsius)=");

        $r31 = virtualinvoke $r2.<ucar.units.BaseUnit: ucar.units.Unit divideBy(ucar.units.Unit)>($r3);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r35 = <java.lang.System: java.io.PrintStream out>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.raiseTo(2)=");

        $r37 = virtualinvoke $r3.<ucar.units.OffsetUnit: ucar.units.Unit raiseTo(int)>(2);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r41 = <java.lang.System: java.io.PrintStream out>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.toDerivedUnit(1.)=");

        $d0 = virtualinvoke $r3.<ucar.units.OffsetUnit: double toDerivedUnit(double)>(1.0);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r44);

        $r46 = <java.lang.System: java.io.PrintStream out>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.toDerivedUnit(new float[]{1,2,3}, new float[3])[1]=");

        $r48 = newarray (float)[3];

        $r48[0] = 1.0F;

        $r48[1] = 2.0F;

        $r48[2] = 3.0F;

        $r49 = newarray (float)[3];

        $r50 = virtualinvoke $r3.<ucar.units.OffsetUnit: float[] toDerivedUnit(float[],float[])>($r48, $r49);

        $f0 = $r50[1];

        $r51 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<java.io.PrintStream: void println(java.lang.String)>($r52);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.fromDerivedUnit(274.15)=");

        $d1 = virtualinvoke $r3.<ucar.units.OffsetUnit: double fromDerivedUnit(double)>(274.15);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r57);

        $r59 = <java.lang.System: java.io.PrintStream out>;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.fromDerivedUnit(new float[]{274.15f},new float[1])[0]=");

        $r61 = newarray (float)[1];

        $r61[0] = 274.15F;

        $r62 = newarray (float)[1];

        $r63 = virtualinvoke $r3.<ucar.units.OffsetUnit: float[] fromDerivedUnit(float[],float[])>($r61, $r62);

        $f1 = $r63[0];

        $r64 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r59.<java.io.PrintStream: void println(java.lang.String)>($r65);

        $r67 = <java.lang.System: java.io.PrintStream out>;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.equals(celsius)=");

        $z2 = virtualinvoke $r3.<ucar.units.OffsetUnit: boolean equals(java.lang.Object)>($r3);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r67.<java.io.PrintStream: void println(java.lang.String)>($r70);

        $r71 = new ucar.units.OffsetUnit;

        specialinvoke $r71.<ucar.units.OffsetUnit: void <init>(ucar.units.Unit,double)>($r3, 100.0);

        $r73 = <java.lang.System: java.io.PrintStream out>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.equals(celsius100)=");

        $z3 = virtualinvoke $r3.<ucar.units.OffsetUnit: boolean equals(java.lang.Object)>($r71);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r73.<java.io.PrintStream: void println(java.lang.String)>($r76);

        $r78 = <java.lang.System: java.io.PrintStream out>;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("celsius.isDimensionless()=");

        $z4 = virtualinvoke $r3.<ucar.units.OffsetUnit: boolean isDimensionless()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r78.<java.io.PrintStream: void println(java.lang.String)>($r81);

        $r82 = staticinvoke <ucar.units.UnitName: ucar.units.UnitName newUnitName(java.lang.String,java.lang.String,java.lang.String)>("radian", null, "rad");

        $r83 = <ucar.units.BaseQuantity: ucar.units.SupplementaryBaseQuantity PLANE_ANGLE>;

        $r84 = staticinvoke <ucar.units.BaseUnit: ucar.units.BaseUnit getOrCreate(ucar.units.UnitName,ucar.units.BaseQuantity)>($r82, $r83);

        $r85 = new ucar.units.OffsetUnit;

        specialinvoke $r85.<ucar.units.OffsetUnit: void <init>(ucar.units.Unit,double)>($r84, 1.570795);

        $r87 = <java.lang.System: java.io.PrintStream out>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offRadian.isDimensionless()=");

        $z5 = virtualinvoke $r85.<ucar.units.OffsetUnit: boolean isDimensionless()>();

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r87.<java.io.PrintStream: void println(java.lang.String)>($r90);

        return;
    }

    public static void <clinit>()
    {
        <ucar.units.OffsetUnit: long serialVersionUID> = 1L;

        return;
    }
}
