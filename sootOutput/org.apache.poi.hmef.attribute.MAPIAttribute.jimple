public class org.apache.poi.hmef.attribute.MAPIAttribute extends java.lang.Object
{
    private final org.apache.poi.hsmf.datatypes.MAPIProperty property;
    private final int type;
    private final byte[] data;

    public void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty, int, byte[])
    {
        byte[] r2;
        org.apache.poi.hsmf.datatypes.MAPIProperty r1;
        int i0;
        org.apache.poi.hmef.attribute.MAPIAttribute r0;

        r0 := @this: org.apache.poi.hmef.attribute.MAPIAttribute;

        r1 := @parameter0: org.apache.poi.hsmf.datatypes.MAPIProperty;

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.hmef.attribute.MAPIAttribute: org.apache.poi.hsmf.datatypes.MAPIProperty property> = r1;

        r0.<org.apache.poi.hmef.attribute.MAPIAttribute: int type> = i0;

        r0.<org.apache.poi.hmef.attribute.MAPIAttribute: byte[] data> = r2;

        return;
    }

    public org.apache.poi.hsmf.datatypes.MAPIProperty getProperty()
    {
        org.apache.poi.hsmf.datatypes.MAPIProperty $r1;
        org.apache.poi.hmef.attribute.MAPIAttribute r0;

        r0 := @this: org.apache.poi.hmef.attribute.MAPIAttribute;

        $r1 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: org.apache.poi.hsmf.datatypes.MAPIProperty property>;

        return $r1;
    }

    public int getType()
    {
        int $i0;
        org.apache.poi.hmef.attribute.MAPIAttribute r0;

        r0 := @this: org.apache.poi.hmef.attribute.MAPIAttribute;

        $i0 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: int type>;

        return $i0;
    }

    public byte[] getData()
    {
        byte[] $r1;
        org.apache.poi.hmef.attribute.MAPIAttribute r0;

        r0 := @this: org.apache.poi.hmef.attribute.MAPIAttribute;

        $r1 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: byte[] data>;

        return $r1;
    }

    public java.lang.String toString()
    {
        byte[] $r1, r2, $r3, $r16;
        org.apache.poi.hmef.attribute.MAPIAttribute r0;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r6, $r11, $r15, r17;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r10;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @this: org.apache.poi.hmef.attribute.MAPIAttribute;

        $r1 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 > 16 goto label1;

        $r16 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: byte[] data>;

        r17 = staticinvoke <org.apache.poi.util.HexDump: java.lang.String toHex(byte[])>($r16);

        goto label2;

     label1:
        r2 = newarray (byte)[16];

        $r3 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: byte[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, 16);

        $r4 = staticinvoke <org.apache.poi.util.HexDump: java.lang.String toHex(byte[])>(r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ....]");

        r17 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<org.apache.poi.hmef.attribute.MAPIAttribute: org.apache.poi.hsmf.datatypes.MAPIProperty property>;

        $r11 = virtualinvoke $r10.<org.apache.poi.hsmf.datatypes.MAPIProperty: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static java.util.List create(org.apache.poi.hmef.attribute.TNEFAttribute) throws java.io.IOException
    {
        byte[] $r13, r38, r40, r42;
        org.apache.poi.hmef.attribute.MAPIDateAttribute $r50;
        org.apache.poi.hmef.attribute.MAPIAttribute r43, $r52;
        org.apache.poi.hmef.attribute.MAPIStringAttribute $r49;
        org.apache.poi.hmef.attribute.TNEFProperty $r1, $r2, $r3, $r4, $r8;
        java.lang.StringBuilder $r7, $r9, $r10, $r26, $r28, $r29, $r44, $r48;
        java.util.ArrayList $r47;
        java.lang.String $r11, $r27, $r30, r39;
        org.apache.poi.hmef.attribute.TNEFAttribute r0;
        java.io.ByteArrayInputStream $r46;
        boolean z0, z1;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r22, $r31, r37, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, $i20, $i22, $i24;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r15, $r16, $r18, $r19, $r21, $r32, $r33, $r34, $r35, r36;
        org.apache.poi.hmef.attribute.MAPIRtfAttribute $r51;
        java.lang.IllegalArgumentException $r45;

        r0 := @parameter0: org.apache.poi.hmef.attribute.TNEFAttribute;

        $r1 = virtualinvoke r0.<org.apache.poi.hmef.attribute.TNEFAttribute: org.apache.poi.hmef.attribute.TNEFProperty getProperty()>();

        $r2 = <org.apache.poi.hmef.attribute.TNEFProperty: org.apache.poi.hmef.attribute.TNEFProperty ID_MAPIPROPERTIES>;

        if $r1 != $r2 goto label01;

        goto label03;

     label01:
        $r3 = virtualinvoke r0.<org.apache.poi.hmef.attribute.TNEFAttribute: org.apache.poi.hmef.attribute.TNEFProperty getProperty()>();

        $r4 = <org.apache.poi.hmef.attribute.TNEFProperty: org.apache.poi.hmef.attribute.TNEFProperty ID_ATTACHMENT>;

        if $r3 != $r4 goto label02;

        goto label03;

     label02:
        $r45 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only create from a MAPIProperty attribute, instead received a ");

        $r8 = virtualinvoke r0.<org.apache.poi.hmef.attribute.TNEFAttribute: org.apache.poi.hmef.attribute.TNEFProperty getProperty()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" one");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r45;

     label03:
        $r46 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke r0.<org.apache.poi.hmef.attribute.TNEFAttribute: byte[] getData()>();

        specialinvoke $r46.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>($r46);

        $r47 = new java.util.ArrayList;

        specialinvoke $r47.<java.util.ArrayList: void <init>()>();

        i15 = 0;

     label04:
        if i15 >= $i0 goto label23;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int readUShort(java.io.InputStream)>($r46);

        $i2 = staticinvoke <org.apache.poi.util.LittleEndian: int readUShort(java.io.InputStream)>($r46);

        z0 = 0;

        z1 = 0;

        i16 = $i1;

        $i3 = $i1 & 4096;

        if $i3 <= 0 goto label05;

        z0 = 1;

        $i20 = (int) -4096;

        i16 = $i1 + $i20;

     label05:
        $r15 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        $i4 = virtualinvoke $r15.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getId()>();

        if i16 == $i4 goto label06;

        $r32 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        $i12 = virtualinvoke $r32.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getId()>();

        if i16 == $i12 goto label06;

        $r33 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType BINARY>;

        $i13 = virtualinvoke $r33.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getId()>();

        if i16 == $i13 goto label06;

        $r34 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType DIRECTORY>;

        $i14 = virtualinvoke $r34.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getId()>();

        if i16 != $i14 goto label07;

     label06:
        z1 = 1;

     label07:
        $r35 = staticinvoke <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType getById(int)>(i16);

        r36 = $r35;

        if $r35 != null goto label08;

        r36 = staticinvoke <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType createCustom(int)>(i16);

     label08:
        r37 = staticinvoke <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty get(int)>($i2);

        $i22 = (int) 32768;

        if $i2 < $i22 goto label11;

        $i24 = (int) 65535;

        if $i2 > $i24 goto label11;

        r38 = newarray (byte)[16];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>($r46, r38);

        $i7 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>($r46);

        if $i7 != 0 goto label09;

        $i11 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>($r46);

        $r31 = staticinvoke <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty get(int)>($i11);

        r39 = $r31.<org.apache.poi.hsmf.datatypes.MAPIProperty: java.lang.String name>;

        goto label10;

     label09:
        $i8 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>($r46);

        r40 = newarray (byte)[$i8];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>($r46, r40);

        $i9 = $i8 / 2;

        $i10 = $i9 - 1;

        r39 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String getFromUnicodeLE(byte[],int,int)>(r40, 0, $i10);

        staticinvoke <org.apache.poi.hmef.attribute.MAPIAttribute: void skipToBoundary(int,java.io.InputStream)>($i8, $r46);

     label10:
        r37 = staticinvoke <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty createCustom(int,org.apache.poi.hsmf.datatypes.Types$MAPIType,java.lang.String)>($i2, r36, r39);

     label11:
        $r41 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty UNKNOWN>;

        if r37 != $r41 goto label12;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(unknown ");

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        r37 = staticinvoke <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty createCustom(int,org.apache.poi.hsmf.datatypes.Types$MAPIType,java.lang.String)>($i2, r36, $r30);

     label12:
        i17 = 1;

        if z0 != 0 goto label13;

        if z1 == 0 goto label14;

     label13:
        i17 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>($r46);

     label14:
        i18 = 0;

     label15:
        if i18 >= i17 goto label22;

        $i5 = staticinvoke <org.apache.poi.hmef.attribute.MAPIAttribute: int getLength(org.apache.poi.hsmf.datatypes.Types$MAPIType,java.io.InputStream)>(r36, $r46);

        r42 = newarray (byte)[$i5];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>($r46, r42);

        staticinvoke <org.apache.poi.hmef.attribute.MAPIAttribute: void skipToBoundary(int,java.io.InputStream)>($i5, $r46);

        $r16 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if r36 == $r16 goto label16;

        $r18 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if r36 != $r18 goto label17;

     label16:
        $r49 = new org.apache.poi.hmef.attribute.MAPIStringAttribute;

        specialinvoke $r49.<org.apache.poi.hmef.attribute.MAPIStringAttribute: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,int,byte[])>(r37, i16, r42);

        r43 = $r49;

        goto label21;

     label17:
        $r19 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType APP_TIME>;

        if r36 == $r19 goto label18;

        $r21 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType TIME>;

        if r36 != $r21 goto label19;

     label18:
        $r50 = new org.apache.poi.hmef.attribute.MAPIDateAttribute;

        specialinvoke $r50.<org.apache.poi.hmef.attribute.MAPIDateAttribute: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,int,byte[])>(r37, i16, r42);

        r43 = $r50;

        goto label21;

     label19:
        $r22 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty RTF_COMPRESSED>;

        $i6 = $r22.<org.apache.poi.hsmf.datatypes.MAPIProperty: int id>;

        if $i2 != $i6 goto label20;

        $r51 = new org.apache.poi.hmef.attribute.MAPIRtfAttribute;

        specialinvoke $r51.<org.apache.poi.hmef.attribute.MAPIRtfAttribute: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,int,byte[])>(r37, i16, r42);

        r43 = $r51;

        goto label21;

     label20:
        $r52 = new org.apache.poi.hmef.attribute.MAPIAttribute;

        specialinvoke $r52.<org.apache.poi.hmef.attribute.MAPIAttribute: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,int,byte[])>(r37, i16, r42);

        r43 = $r52;

     label21:
        interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>(r43);

        i18 = i18 + 1;

        goto label15;

     label22:
        i15 = i15 + 1;

        goto label04;

     label23:
        return $r47;
    }

    private static int getLength(org.apache.poi.hsmf.datatypes.Types$MAPIType, java.io.InputStream) throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r8, $r9;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r0, $r1, $r3, $r4, $r5;
        java.lang.String $r10;
        boolean $z0;
        java.io.InputStream r2;

        r0 := @parameter0: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        r2 := @parameter1: java.io.InputStream;

        $z0 = virtualinvoke r0.<org.apache.poi.hsmf.datatypes.Types$MAPIType: boolean isFixedLength()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getLength()>();

        return $i0;

     label1:
        $r1 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if r0 == $r1 goto label2;

        $r3 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if r0 == $r3 goto label2;

        $r4 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType DIRECTORY>;

        if r0 == $r4 goto label2;

        $r5 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType BINARY>;

        if r0 != $r5 goto label3;

     label2:
        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int readInt(java.io.InputStream)>(r2);

        return $i1;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    private static void skipToBoundary(int, java.io.InputStream) throws java.io.IOException
    {
        byte[] r0;
        int i0, $i1, $i2, i3;
        java.io.InputStream r1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        $i1 = i0 % 4;

        if $i1 == 0 goto label1;

        $i2 = i0 % 4;

        i3 = 4 - $i2;

        r0 = newarray (byte)[i3];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>(r1, r0);

     label1:
        return;
    }
}
