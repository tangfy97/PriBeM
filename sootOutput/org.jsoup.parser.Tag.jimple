public class org.jsoup.parser.Tag extends java.lang.Object
{
    private static final java.util.Map tags;
    private java.lang.String tagName;
    private boolean isBlock;
    private boolean formatAsBlock;
    private boolean canContainBlock;
    private boolean canContainInline;
    private boolean empty;
    private boolean selfClosing;
    private boolean preserveWhitespace;
    private static final java.lang.String[] blockTags;
    private static final java.lang.String[] inlineTags;
    private static final java.lang.String[] emptyTags;
    private static final java.lang.String[] formatAsInlineTags;
    private static final java.lang.String[] preserveWhitespaceTags;

    private void <init>(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.Tag: boolean isBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean formatAsBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean canContainBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean canContainInline> = 1;

        r0.<org.jsoup.parser.Tag: boolean empty> = 0;

        r0.<org.jsoup.parser.Tag: boolean selfClosing> = 0;

        r0.<org.jsoup.parser.Tag: boolean preserveWhitespace> = 0;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<org.jsoup.parser.Tag: java.lang.String tagName> = $r2;

        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        return $r1;
    }

    public static org.jsoup.parser.Tag valueOf(java.lang.String)
    {
        org.jsoup.parser.Tag $r6, r8;
        java.util.Map $r0, $r4;
        java.lang.Object $r1, $r5;
        java.lang.String $r2, $r3, r7;

        r7 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r7);

        $r0 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (org.jsoup.parser.Tag) $r1;

        if r8 != null goto label1;

        $r2 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r3);

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (org.jsoup.parser.Tag) $r5;

        if r8 != null goto label1;

        $r6 = new org.jsoup.parser.Tag;

        specialinvoke $r6.<org.jsoup.parser.Tag: void <init>(java.lang.String)>($r3);

        r8 = $r6;

        $r6.<org.jsoup.parser.Tag: boolean isBlock> = 0;

        $r6.<org.jsoup.parser.Tag: boolean canContainBlock> = 1;

     label1:
        return r8;
    }

    public boolean isBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        return $z0;
    }

    public boolean formatAsBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        return $z0;
    }

    public boolean canContainBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        return $z0;
    }

    public boolean isInline()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isData()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.jsoup.parser.Tag: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEmpty()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        return $z0;
    }

    public boolean isSelfClosing()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isKnownTag()
    {
        java.util.Map $r2;
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $r2 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public static boolean isKnownTag(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public boolean preserveWhitespace()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        return $z0;
    }

    org.jsoup.parser.Tag setSelfClosing()
    {
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        r0.<org.jsoup.parser.Tag: boolean selfClosing> = 1;

        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.jsoup.parser.Tag r0, r2;
        java.lang.Object r1;

        r0 := @this: org.jsoup.parser.Tag;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof org.jsoup.parser.Tag;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (org.jsoup.parser.Tag) r1;

        $z2 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean canContainBlock>;

        if $z2 == $z1 goto label03;

        return 0;

     label03:
        $z4 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        $z3 = r2.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z4 == $z3 goto label04;

        return 0;

     label04:
        $z6 = r0.<org.jsoup.parser.Tag: boolean empty>;

        $z5 = r2.<org.jsoup.parser.Tag: boolean empty>;

        if $z6 == $z5 goto label05;

        return 0;

     label05:
        $z8 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        $z7 = r2.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        if $z8 == $z7 goto label06;

        return 0;

     label06:
        $z10 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        $z9 = r2.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z10 == $z9 goto label07;

        return 0;

     label07:
        $z12 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        $z11 = r2.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        if $z12 == $z11 goto label08;

        return 0;

     label08:
        $z14 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        $z13 = r2.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z14 == $z13 goto label09;

        return 0;

     label09:
        $r4 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $r3 = r2.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $z15 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z15 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = 31 * $i0;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 == 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $i14 = $i1 + $z7;

        $i2 = 31 * $i14;

        $z1 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        if $z1 == 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        $i13 = $i2 + $z8;

        $i3 = 31 * $i13;

        $z2 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        if $z2 == 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        $i12 = $i3 + $z9;

        $i4 = 31 * $i12;

        $z3 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z3 == 0 goto label07;

        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        $i11 = $i4 + $z10;

        $i5 = 31 * $i11;

        $z4 = r0.<org.jsoup.parser.Tag: boolean empty>;

        if $z4 == 0 goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        $i10 = $i5 + $z11;

        $i6 = 31 * $i10;

        $z5 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z5 == 0 goto label11;

        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        $i9 = $i6 + $z12;

        $i7 = 31 * $i9;

        $z6 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        if $z6 == 0 goto label13;

        $z13 = 1;

        goto label14;

     label13:
        $z13 = 0;

     label14:
        $i8 = $i7 + $z13;

        return $i8;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        return $r1;
    }

    private static void register(org.jsoup.parser.Tag)
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;
        java.util.Map $r2;

        r0 := @parameter0: org.jsoup.parser.Tag;

        $r2 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        return;
    }

    static void <clinit>()
    {
        java.util.Map $r6, $r8, $r10;
        org.jsoup.parser.Tag $r12, $r13, r20, r23, r26;
        java.util.HashMap $r0;
        java.lang.String[] $r1, $r2, $r3, $r4, $r5, r14, r16, r18, r21, r24;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;
        java.lang.String r15, r17, r19, r22, r25;
        java.lang.Object $r7, $r9, $r11;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.jsoup.parser.Tag: java.util.Map tags> = $r0;

        $r1 = newarray (java.lang.String)[59];

        $r1[0] = "html";

        $r1[1] = "head";

        $r1[2] = "body";

        $r1[3] = "frameset";

        $r1[4] = "script";

        $r1[5] = "noscript";

        $r1[6] = "style";

        $r1[7] = "meta";

        $r1[8] = "link";

        $r1[9] = "title";

        $r1[10] = "frame";

        $r1[11] = "noframes";

        $r1[12] = "section";

        $r1[13] = "nav";

        $r1[14] = "aside";

        $r1[15] = "hgroup";

        $r1[16] = "header";

        $r1[17] = "footer";

        $r1[18] = "p";

        $r1[19] = "h1";

        $r1[20] = "h2";

        $r1[21] = "h3";

        $r1[22] = "h4";

        $r1[23] = "h5";

        $r1[24] = "h6";

        $r1[25] = "ul";

        $r1[26] = "ol";

        $r1[27] = "pre";

        $r1[28] = "div";

        $r1[29] = "blockquote";

        $r1[30] = "hr";

        $r1[31] = "address";

        $r1[32] = "figure";

        $r1[33] = "figcaption";

        $r1[34] = "form";

        $r1[35] = "fieldset";

        $r1[36] = "ins";

        $r1[37] = "del";

        $r1[38] = "s";

        $r1[39] = "dl";

        $r1[40] = "dt";

        $r1[41] = "dd";

        $r1[42] = "li";

        $r1[43] = "table";

        $r1[44] = "caption";

        $r1[45] = "thead";

        $r1[46] = "tfoot";

        $r1[47] = "tbody";

        $r1[48] = "colgroup";

        $r1[49] = "col";

        $r1[50] = "tr";

        $r1[51] = "th";

        $r1[52] = "td";

        $r1[53] = "video";

        $r1[54] = "audio";

        $r1[55] = "canvas";

        $r1[56] = "details";

        $r1[57] = "menu";

        $r1[58] = "plaintext";

        <org.jsoup.parser.Tag: java.lang.String[] blockTags> = $r1;

        $r2 = newarray (java.lang.String)[56];

        $r2[0] = "object";

        $r2[1] = "base";

        $r2[2] = "font";

        $r2[3] = "tt";

        $r2[4] = "i";

        $r2[5] = "b";

        $r2[6] = "u";

        $r2[7] = "big";

        $r2[8] = "small";

        $r2[9] = "em";

        $r2[10] = "strong";

        $r2[11] = "dfn";

        $r2[12] = "code";

        $r2[13] = "samp";

        $r2[14] = "kbd";

        $r2[15] = "var";

        $r2[16] = "cite";

        $r2[17] = "abbr";

        $r2[18] = "time";

        $r2[19] = "acronym";

        $r2[20] = "mark";

        $r2[21] = "ruby";

        $r2[22] = "rt";

        $r2[23] = "rp";

        $r2[24] = "a";

        $r2[25] = "img";

        $r2[26] = "br";

        $r2[27] = "wbr";

        $r2[28] = "map";

        $r2[29] = "q";

        $r2[30] = "sub";

        $r2[31] = "sup";

        $r2[32] = "bdo";

        $r2[33] = "iframe";

        $r2[34] = "embed";

        $r2[35] = "span";

        $r2[36] = "input";

        $r2[37] = "select";

        $r2[38] = "textarea";

        $r2[39] = "label";

        $r2[40] = "button";

        $r2[41] = "optgroup";

        $r2[42] = "option";

        $r2[43] = "legend";

        $r2[44] = "datalist";

        $r2[45] = "keygen";

        $r2[46] = "output";

        $r2[47] = "progress";

        $r2[48] = "meter";

        $r2[49] = "area";

        $r2[50] = "param";

        $r2[51] = "source";

        $r2[52] = "track";

        $r2[53] = "summary";

        $r2[54] = "command";

        $r2[55] = "device";

        <org.jsoup.parser.Tag: java.lang.String[] inlineTags> = $r2;

        $r3 = newarray (java.lang.String)[14];

        $r3[0] = "meta";

        $r3[1] = "link";

        $r3[2] = "base";

        $r3[3] = "frame";

        $r3[4] = "img";

        $r3[5] = "br";

        $r3[6] = "wbr";

        $r3[7] = "embed";

        $r3[8] = "hr";

        $r3[9] = "input";

        $r3[10] = "keygen";

        $r3[11] = "col";

        $r3[12] = "command";

        $r3[13] = "device";

        <org.jsoup.parser.Tag: java.lang.String[] emptyTags> = $r3;

        $r4 = newarray (java.lang.String)[19];

        $r4[0] = "title";

        $r4[1] = "a";

        $r4[2] = "p";

        $r4[3] = "h1";

        $r4[4] = "h2";

        $r4[5] = "h3";

        $r4[6] = "h4";

        $r4[7] = "h5";

        $r4[8] = "h6";

        $r4[9] = "pre";

        $r4[10] = "address";

        $r4[11] = "li";

        $r4[12] = "th";

        $r4[13] = "td";

        $r4[14] = "script";

        $r4[15] = "style";

        $r4[16] = "ins";

        $r4[17] = "del";

        $r4[18] = "s";

        <org.jsoup.parser.Tag: java.lang.String[] formatAsInlineTags> = $r4;

        $r5 = newarray (java.lang.String)[4];

        $r5[0] = "pre";

        $r5[1] = "plaintext";

        $r5[2] = "title";

        $r5[3] = "textarea";

        <org.jsoup.parser.Tag: java.lang.String[] preserveWhitespaceTags> = $r5;

        r14 = <org.jsoup.parser.Tag: java.lang.String[] blockTags>;

        i0 = lengthof r14;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r15 = r14[i1];

        $r13 = new org.jsoup.parser.Tag;

        specialinvoke $r13.<org.jsoup.parser.Tag: void <init>(java.lang.String)>(r15);

        staticinvoke <org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>($r13);

        i1 = i1 + 1;

        goto label01;

     label02:
        r16 = <org.jsoup.parser.Tag: java.lang.String[] inlineTags>;

        i2 = lengthof r16;

        i3 = 0;

     label03:
        if i3 >= i2 goto label04;

        r17 = r16[i3];

        $r12 = new org.jsoup.parser.Tag;

        specialinvoke $r12.<org.jsoup.parser.Tag: void <init>(java.lang.String)>(r17);

        $r12.<org.jsoup.parser.Tag: boolean isBlock> = 0;

        $r12.<org.jsoup.parser.Tag: boolean canContainBlock> = 0;

        $r12.<org.jsoup.parser.Tag: boolean formatAsBlock> = 0;

        staticinvoke <org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>($r12);

        i3 = i3 + 1;

        goto label03;

     label04:
        r18 = <org.jsoup.parser.Tag: java.lang.String[] emptyTags>;

        i4 = lengthof r18;

        i5 = 0;

     label05:
        if i5 >= i4 goto label06;

        r19 = r18[i5];

        $r10 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        r20 = (org.jsoup.parser.Tag) $r11;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r20);

        r20.<org.jsoup.parser.Tag: boolean canContainBlock> = 0;

        r20.<org.jsoup.parser.Tag: boolean canContainInline> = 0;

        r20.<org.jsoup.parser.Tag: boolean empty> = 1;

        i5 = i5 + 1;

        goto label05;

     label06:
        r21 = <org.jsoup.parser.Tag: java.lang.String[] formatAsInlineTags>;

        i6 = lengthof r21;

        i7 = 0;

     label07:
        if i7 >= i6 goto label08;

        r22 = r21[i7];

        $r8 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        r23 = (org.jsoup.parser.Tag) $r9;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r23);

        r23.<org.jsoup.parser.Tag: boolean formatAsBlock> = 0;

        i7 = i7 + 1;

        goto label07;

     label08:
        r24 = <org.jsoup.parser.Tag: java.lang.String[] preserveWhitespaceTags>;

        i8 = lengthof r24;

        i9 = 0;

     label09:
        if i9 >= i8 goto label10;

        r25 = r24[i9];

        $r6 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        r26 = (org.jsoup.parser.Tag) $r7;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r26);

        r26.<org.jsoup.parser.Tag: boolean preserveWhitespace> = 1;

        i9 = i9 + 1;

        goto label09;

     label10:
        return;
    }
}
