final class org.waveprotocol.wave.model.experimental.schema.ValueValidator extends java.lang.Object
{
    private final java.util.regex.Pattern pattern;

    private void <init>(java.lang.String)
    {
        org.waveprotocol.wave.model.experimental.schema.ValueValidator r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.ValueValidator;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        r0.<org.waveprotocol.wave.model.experimental.schema.ValueValidator: java.util.regex.Pattern pattern> = $r2;

        return;
    }

    boolean validate(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        org.waveprotocol.wave.model.experimental.schema.ValueValidator r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.ValueValidator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.ValueValidator: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    static org.waveprotocol.wave.model.experimental.schema.ValueValidator fromRegex(java.lang.String)
    {
        org.waveprotocol.wave.model.experimental.schema.ValueValidator $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.ValueValidator;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.ValueValidator: void <init>(java.lang.String)>(r1);

        return $r0;
    }
}
