class org.apache.commons.collections.MultiHashMap$ValueIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.Iterator backedIterator;
    private java.util.Iterator tempIterator;
    private final org.apache.commons.collections.MultiHashMap this$0;

    private void <init>(org.apache.commons.collections.MultiHashMap)
    {
        org.apache.commons.collections.MultiHashMap$ValueIterator r0;
        java.util.Iterator $r2;
        org.apache.commons.collections.MultiHashMap r1;

        r0 := @this: org.apache.commons.collections.MultiHashMap$ValueIterator;

        r1 := @parameter0: org.apache.commons.collections.MultiHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: org.apache.commons.collections.MultiHashMap this$0> = r1;

        $r2 = virtualinvoke r1.<org.apache.commons.collections.MultiHashMap: java.util.Iterator superValuesIterator()>();

        r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator backedIterator> = $r2;

        return;
    }

    private boolean searchNextIterator()
    {
        org.apache.commons.collections.MultiHashMap$ValueIterator r0;
        java.util.Iterator $r1, $r2, $r3, $r6, $r7;
        java.util.Collection $r5;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.MultiHashMap$ValueIterator;

     label1:
        $r1 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator tempIterator>;

        if $r1 == null goto label2;

        $r7 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator tempIterator>;

        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

     label2:
        $r2 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator backedIterator>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r3 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator backedIterator>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Collection) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator tempIterator> = $r6;

        goto label1;

     label4:
        return 1;
    }

    public boolean hasNext()
    {
        org.apache.commons.collections.MultiHashMap$ValueIterator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap$ValueIterator;

        $z0 = specialinvoke r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: boolean searchNextIterator()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        org.apache.commons.collections.MultiHashMap$ValueIterator r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap$ValueIterator;

        $z0 = specialinvoke r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: boolean searchNextIterator()>();

        if $z0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator tempIterator>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public void remove()
    {
        org.apache.commons.collections.MultiHashMap$ValueIterator r0;
        java.lang.IllegalStateException $r3;
        java.util.Iterator $r1, $r2;

        r0 := @this: org.apache.commons.collections.MultiHashMap$ValueIterator;

        $r1 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator tempIterator>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: java.util.Iterator tempIterator>;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        return;
    }

    void <init>(org.apache.commons.collections.MultiHashMap, org.apache.commons.collections.MultiHashMap$1)
    {
        org.apache.commons.collections.MultiHashMap$ValueIterator r0;
        org.apache.commons.collections.MultiHashMap$1 r2;
        org.apache.commons.collections.MultiHashMap r1;

        r0 := @this: org.apache.commons.collections.MultiHashMap$ValueIterator;

        r1 := @parameter0: org.apache.commons.collections.MultiHashMap;

        r2 := @parameter1: org.apache.commons.collections.MultiHashMap$1;

        specialinvoke r0.<org.apache.commons.collections.MultiHashMap$ValueIterator: void <init>(org.apache.commons.collections.MultiHashMap)>(r1);

        return;
    }
}
