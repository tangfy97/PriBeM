class org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.Utf16Util$CodePointHandler
{
    static final boolean $assertionsDisabled;
    final java.lang.StringBuilder val$result;
    final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2 this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2, java.lang.StringBuilder)
    {
        java.lang.StringBuilder r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2 r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2;

        r2 := @parameter1: java.lang.StringBuilder;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2 this$0> = r1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Void codePoint(int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;
        org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult $r2, $r3;
        char $c1;
        java.lang.AssertionError $r9;
        int i0, $i3;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        i0 := @parameter0: int;

        if i0 != 9 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        goto label8;

     label1:
        if i0 == 10 goto label2;

        if i0 != 13 goto label3;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label8;

     label3:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isSupplementaryCodePoint(int)>(i0);

        if $z0 == 0 goto label4;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(65533);

        goto label8;

     label4:
        $r2 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult isCodePointGoodForBlip(int)>(i0);

        $r3 = <org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult: org.waveprotocol.wave.model.util.Utf16Util$BlipCodePointResult OK>;

        if $r2 != $r3 goto label7;

        $z1 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        if 0 > i0 goto label5;

        $i3 = (int) 65535;

        if i0 <= $i3 goto label6;

     label5:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not handling supplementary code points (yet)");

        throw $r9;

     label6:
        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result>;

        $c1 = (char) i0;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label8;

     label7:
        $r4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(65533);

     label8:
        return null;
    }

    public java.lang.Void unpairedSurrogate(char)
    {
        java.lang.StringBuilder $r1;
        char c0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        c0 := @parameter0: char;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.StringBuilder val$result>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(65533);

        return null;
    }

    public java.lang.Void endOfString()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        return null;
    }

    public volatile java.lang.Object endOfString()
    {
        java.lang.Void $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.Void endOfString()>();

        return $r1;
    }

    public volatile java.lang.Object unpairedSurrogate(char)
    {
        java.lang.Void $r1;
        char c0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.Void unpairedSurrogate(char)>(c0);

        return $r1;
    }

    public volatile java.lang.Object codePoint(int)
    {
        int i0;
        java.lang.Void $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: java.lang.Void codePoint(int)>(i0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/automaton/DocumentSchema;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters$2$1: boolean $assertionsDisabled> = $z1;

        return;
    }
}
