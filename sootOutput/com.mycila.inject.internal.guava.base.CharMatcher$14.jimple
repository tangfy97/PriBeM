class com.mycila.inject.internal.guava.base.CharMatcher$14 extends com.mycila.inject.internal.guava.base.CharMatcher
{
    final com.mycila.inject.internal.guava.base.CharMatcher val$original;
    final com.mycila.inject.internal.guava.base.CharMatcher this$0;

    void <init>(com.mycila.inject.internal.guava.base.CharMatcher, com.mycila.inject.internal.guava.base.CharMatcher)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$14 r0;
        com.mycila.inject.internal.guava.base.CharMatcher r1, r2;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.CharMatcher;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.CharMatcher;

        r0.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher this$0> = r1;

        r0.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher val$original> = r2;

        specialinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher: void <init>()>();

        return;
    }

    public boolean matches(char)
    {
        com.mycila.inject.internal.guava.base.CharMatcher$14 r0;
        char c0;
        com.mycila.inject.internal.guava.base.CharMatcher $r1;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        c0 := @parameter0: char;

        $r1 = r0.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher val$original>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matches(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean matchesAllOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.mycila.inject.internal.guava.base.CharMatcher$14 r0;
        com.mycila.inject.internal.guava.base.CharMatcher $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher val$original>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matchesNoneOf(java.lang.CharSequence)>(r1);

        return $z0;
    }

    public boolean matchesNoneOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.mycila.inject.internal.guava.base.CharMatcher$14 r0;
        com.mycila.inject.internal.guava.base.CharMatcher $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher val$original>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matchesAllOf(java.lang.CharSequence)>(r1);

        return $z0;
    }

    public int countIn(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        com.mycila.inject.internal.guava.base.CharMatcher$14 r1;
        int $i0, $i1, $i2;
        com.mycila.inject.internal.guava.base.CharMatcher $r2;

        r1 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r2 = r1.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher val$original>;

        $i1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.base.CharMatcher: int countIn(java.lang.CharSequence)>(r0);

        $i2 = $i0 - $i1;

        return $i2;
    }

    public com.mycila.inject.internal.guava.base.CharMatcher negate()
    {
        com.mycila.inject.internal.guava.base.CharMatcher$14 r0;
        com.mycila.inject.internal.guava.base.CharMatcher $r1;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        $r1 = r0.<com.mycila.inject.internal.guava.base.CharMatcher$14: com.mycila.inject.internal.guava.base.CharMatcher val$original>;

        return $r1;
    }

    public volatile boolean apply(java.lang.Object)
    {
        java.lang.Character $r2;
        com.mycila.inject.internal.guava.base.CharMatcher$14 r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.CharMatcher$14;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) r1;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.base.CharMatcher: boolean apply(java.lang.Character)>($r2);

        return $z0;
    }
}
