public abstract class com.mycila.inject.internal.guava.collect.ImmutableMultiset extends com.mycila.inject.internal.guava.collect.ImmutableCollection implements com.mycila.inject.internal.guava.collect.Multiset
{
    private transient com.mycila.inject.internal.guava.collect.ImmutableSet entrySet;

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of()
    {
        com.mycila.inject.internal.guava.collect.EmptyImmutableMultiset $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.EmptyImmutableMultiset: com.mycila.inject.internal.guava.collect.EmptyImmutableMultiset INSTANCE>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r2;

        r1 := @parameter0: java.lang.Object;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(java.lang.Object[])>($r0);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(java.lang.Object[])>($r0);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(java.lang.Object[])>($r0);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3, r4;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r5;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = newarray (java.lang.Object)[4];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(java.lang.Object[])>($r0);

        return $r5;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3, r4, r5;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r6;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $r0 = newarray (java.lang.Object)[5];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(java.lang.Object[])>($r0);

        return $r6;
    }

    public static transient com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0, $r2;
        java.util.ArrayList $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r9;
        int $i0, i1;
        java.lang.Object r3, r4, r5, r6, r7, r8;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

        r7 := @parameter4: java.lang.Object;

        r8 := @parameter5: java.lang.Object;

        r0 := @parameter6: java.lang.Object[];

        $i0 = lengthof r0;

        i1 = $i0 + 6;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i1);

        $r2 = newarray (java.lang.Object)[6];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        $r2[3] = r6;

        $r2[4] = r7;

        $r2[5] = r8;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, $r2);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.lang.Iterable)>($r1);

        return $r9;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset of(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.Multiset $r3;
        java.lang.Iterable r0;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r1, r2;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        if $z0 == 0 goto label1;

        r2 = (com.mycila.inject.internal.guava.collect.ImmutableMultiset) r0;

        $z2 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: boolean isPartialView()>();

        if $z2 != 0 goto label1;

        return r2;

     label1:
        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.Multiset;

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: com.mycila.inject.internal.guava.collect.Multiset cast(java.lang.Iterable)>(r0);

        goto label3;

     label2:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.LinkedHashMultiset: com.mycila.inject.internal.guava.collect.LinkedHashMultiset create(java.lang.Iterable)>(r0);

     label3:
        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(com.mycila.inject.internal.guava.collect.Multiset)>($r3);

        return $r1;
    }

    private static transient com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    private static com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(com.mycila.inject.internal.guava.collect.Multiset)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r5;
        com.mycila.inject.internal.guava.collect.ImmutableMap$Builder $r0;
        com.mycila.inject.internal.guava.collect.Multiset$Entry r8;
        long $l3, l4;
        java.lang.Integer $r10;
        byte $b0;
        int $i1, $i2;
        boolean $z0;
        com.mycila.inject.internal.guava.collect.Multiset r1;
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.RegularImmutableMultiset $r4;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r6;
        java.lang.Object $r7, $r9;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multiset;

        l4 = 0L;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder builder()>();

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r7;

        $i2 = interfaceinvoke r8.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        if $i2 <= 0 goto label2;

        $r9 = interfaceinvoke r8.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r9, $r10);

        $l3 = (long) $i2;

        l4 = l4 + $l3;

     label2:
        goto label1;

     label3:
        $b0 = l4 cmp 0L;

        if $b0 != 0 goto label4;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset of()>();

        return $r6;

     label4:
        $r4 = new com.mycila.inject.internal.guava.collect.RegularImmutableMultiset;

        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMap$Builder: com.mycila.inject.internal.guava.collect.ImmutableMap build()>();

        $i1 = staticinvoke <com.mycila.inject.internal.guava.primitives.Ints: int saturatedCast(long)>(l4);

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.RegularImmutableMultiset: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMap,int)>($r5, $i1);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOf(java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.LinkedHashMultiset $r0;
        java.util.Iterator r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r2;

        r1 := @parameter0: java.util.Iterator;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.LinkedHashMultiset: com.mycila.inject.internal.guava.collect.LinkedHashMultiset create()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r0, r1);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset copyOfInternal(com.mycila.inject.internal.guava.collect.Multiset)>($r0);

        return $r2;
    }

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableCollection: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$1 $r2;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.UnmodifiableIterator entryIterator()>();

        $r2 = new com.mycila.inject.internal.guava.collect.ImmutableMultiset$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$1: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMultiset,java.util.Iterator)>(r0, $r1);

        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: int count(java.lang.Object)>(r1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collection r2;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: java.util.Set elementSet()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);

        return $z0;
    }

    public final int add(java.lang.Object, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final int remove(java.lang.Object, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final int setCount(java.lang.Object, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final boolean setCount(java.lang.Object, int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multiset r2;
        java.util.Iterator $r4;
        com.mycila.inject.internal.guava.collect.Multiset$Entry r6;
        java.util.Set $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0, $r5, $r7;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multiset;

        if $z0 == 0 goto label6;

        r2 = (com.mycila.inject.internal.guava.collect.Multiset) r0;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: int size()>();

        $i1 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multiset: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r3 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r5;

        $r7 = interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: int count(java.lang.Object)>($r7);

        $i3 = interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        if $i2 == $i3 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: java.util.Set entrySet()>();

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: int hashCodeImpl(java.util.Set)>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Set $r1;
        java.lang.String $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: java.util.Set entrySet()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Set entrySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet r1, $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet>;

        if r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableSet createEntrySet()>();

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    abstract com.mycila.inject.internal.guava.collect.UnmodifiableIterator entryIterator();

    abstract int distinctElements();

    com.mycila.inject.internal.guava.collect.ImmutableSet createEntrySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$EntrySet: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMultiset)>(r1);

        return $r0;
    }

    java.lang.Object writeReplace()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$SerializedForm $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableMultiset$SerializedForm;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$SerializedForm: void <init>(com.mycila.inject.internal.guava.collect.Multiset)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder builder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: void <init>()>();

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }
}
