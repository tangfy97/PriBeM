public abstract class org.apache.lucene.util.packed.PackedInts$Writer extends java.lang.Object
{
    protected final org.apache.lucene.store.DataOutput out;
    protected final int valueCount;
    protected final int bitsPerValue;
    static final boolean $assertionsDisabled;

    protected void <init>(org.apache.lucene.store.DataOutput, int, int)
    {
        org.apache.lucene.store.DataOutput r1;
        java.lang.AssertionError $r4, $r5;
        int i0, i1, $i3;
        org.apache.lucene.util.packed.PackedInts$Writer r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Writer;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.util.packed.PackedInts$Writer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 <= 64 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = <org.apache.lucene.util.packed.PackedInts$Writer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 >= 0 goto label2;

        $i3 = (int) -1;

        if i0 == $i3 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        r0.<org.apache.lucene.util.packed.PackedInts$Writer: org.apache.lucene.store.DataOutput out> = r1;

        r0.<org.apache.lucene.util.packed.PackedInts$Writer: int valueCount> = i0;

        r0.<org.apache.lucene.util.packed.PackedInts$Writer: int bitsPerValue> = i1;

        return;
    }

    void writeHeader() throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput $r1, $r2, $r3, $r4;
        org.apache.lucene.util.packed.PackedInts$Format $r5;
        java.lang.AssertionError $r7;
        int $i0, $i1, $i2, $i3, $i5;
        org.apache.lucene.util.packed.PackedInts$Writer r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Writer;

        $z0 = <org.apache.lucene.util.packed.PackedInts$Writer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: int valueCount>;

        $i5 = (int) -1;

        if $i3 != $i5 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: org.apache.lucene.store.DataOutput out>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r1, "PackedInts", 1);

        $r2 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: org.apache.lucene.store.DataOutput out>;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: int bitsPerValue>;

        virtualinvoke $r2.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i0);

        $r3 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: org.apache.lucene.store.DataOutput out>;

        $i1 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: int valueCount>;

        virtualinvoke $r3.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i1);

        $r4 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: org.apache.lucene.store.DataOutput out>;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Writer: org.apache.lucene.util.packed.PackedInts$Format getFormat()>();

        $i2 = virtualinvoke $r5.<org.apache.lucene.util.packed.PackedInts$Format: int getId()>();

        virtualinvoke $r4.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i2);

        return;
    }

    protected abstract org.apache.lucene.util.packed.PackedInts$Format getFormat();

    public abstract void add(long) throws java.io.IOException;

    public final int bitsPerValue()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$Writer r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Writer;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$Writer: int bitsPerValue>;

        return $i0;
    }

    public abstract void finish() throws java.io.IOException;

    public abstract int ord();

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts$Writer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
