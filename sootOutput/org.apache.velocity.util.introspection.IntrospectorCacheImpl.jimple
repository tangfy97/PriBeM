public final class org.apache.velocity.util.introspection.IntrospectorCacheImpl extends java.lang.Object implements org.apache.velocity.util.introspection.IntrospectorCache
{
    public static final java.lang.String CACHEDUMP_MSG;
    private final org.apache.velocity.runtime.log.Log log;
    private final java.util.Map classMapCache;
    private final java.util.Set classNameCache;

    public void <init>(org.apache.velocity.runtime.log.Log)
    {
        java.util.HashSet $r2;
        org.apache.velocity.runtime.log.Log r3;
        java.util.HashMap $r1;
        org.apache.velocity.util.introspection.IntrospectorCacheImpl r0;

        r0 := @this: org.apache.velocity.util.introspection.IntrospectorCacheImpl;

        r3 := @parameter0: org.apache.velocity.runtime.log.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Set classNameCache> = $r2;

        r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: org.apache.velocity.runtime.log.Log log> = r3;

        return;
    }

    public void clear()
    {
        org.apache.velocity.runtime.log.Log $r4;
        java.lang.Throwable $r5;
        java.util.Map $r1, $r2;
        java.util.Set $r3;
        org.apache.velocity.util.introspection.IntrospectorCacheImpl r0;

        r0 := @this: org.apache.velocity.util.introspection.IntrospectorCacheImpl;

        $r1 = r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Set classNameCache>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        $r4 = r0.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r4.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>("IntrospectorCache detected classloader change. Dumping cache.");

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.velocity.util.introspection.ClassMap get(java.lang.Class)
    {
        java.lang.Throwable $r9;
        org.apache.velocity.util.introspection.ClassMap r4;
        java.util.Set $r6;
        java.lang.IllegalArgumentException $r8;
        java.util.Map $r2, $r5;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String $r7;
        org.apache.velocity.util.introspection.IntrospectorCacheImpl r1;
        boolean $z0;

        r1 := @this: org.apache.velocity.util.introspection.IntrospectorCacheImpl;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("class is null!");

        throw $r8;

     label1:
        $r2 = r1.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (org.apache.velocity.util.introspection.ClassMap) $r3;

        if r4 != null goto label7;

        $r5 = r1.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache>;

        entermonitor $r5;

     label2:
        $r6 = r1.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Set classNameCache>;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        virtualinvoke r1.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: void clear()>();

     label3:
        exitmonitor $r5;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r9;

     label7:
        return r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.apache.velocity.util.introspection.ClassMap put(java.lang.Class)
    {
        java.lang.Throwable $r8;
        org.apache.velocity.util.introspection.ClassMap $r0;
        java.util.Set $r6;
        org.apache.velocity.runtime.log.Log $r3;
        java.util.Map $r4, $r5;
        java.lang.Class r1;
        java.lang.String $r7;
        org.apache.velocity.util.introspection.IntrospectorCacheImpl r2;

        r2 := @this: org.apache.velocity.util.introspection.IntrospectorCacheImpl;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.apache.velocity.util.introspection.ClassMap;

        $r3 = r2.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: org.apache.velocity.runtime.log.Log log>;

        specialinvoke $r0.<org.apache.velocity.util.introspection.ClassMap: void <init>(java.lang.Class,org.apache.velocity.runtime.log.Log)>(r1, $r3);

        $r4 = r2.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache>;

        entermonitor $r4;

     label1:
        $r5 = r2.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Map classMapCache>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        $r6 = r2.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.util.Set classNameCache>;

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

        exitmonitor $r4;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r8;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.velocity.util.introspection.IntrospectorCacheImpl: java.lang.String CACHEDUMP_MSG> = "IntrospectorCache detected classloader change. Dumping cache.";

        return;
    }
}
