public class com.hp.hpl.jena.reasoner.rulesys.Util extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.Util r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isNumeric(com.hp.hpl.jena.graph.Node)
    {
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z1 = $r1 instanceof java.lang.Number;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static int getIntValue(com.hp.hpl.jena.graph.Node)
    {
        int $i0;
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.Number $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r2 = (java.lang.Number) $r1;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public static int compareNumbers(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        long $l1, $l2;
        com.hp.hpl.jena.graph.Node r0, r1;
        java.lang.ClassCastException $r9;
        byte $b0, $b3, $b4, $b5, $b6, $b7;
        int $i8, $i9;
        java.lang.Number $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0, $d1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label9;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label9;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z2 = $r2 instanceof java.lang.Number;

        if $z2 == 0 goto label9;

        $z3 = $r3 instanceof java.lang.Number;

        if $z3 == 0 goto label9;

        $z4 = $r2 instanceof java.lang.Float;

        if $z4 != 0 goto label1;

        $z5 = $r2 instanceof java.lang.Double;

        if $z5 != 0 goto label1;

        $z6 = $r3 instanceof java.lang.Float;

        if $z6 != 0 goto label1;

        $z7 = $r3 instanceof java.lang.Double;

        if $z7 == 0 goto label5;

     label1:
        $r6 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

        $r7 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r7.<java.lang.Number: double doubleValue()>();

        $b5 = $d0 cmpg $d1;

        $i8 = (int) $b5;

        if $i8 >= 0 goto label2;

        $b6 = -1;

        goto label4;

     label2:
        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        $b6 = 0;

        goto label4;

     label3:
        $b6 = 1;

     label4:
        return $b6;

     label5:
        $r4 = (java.lang.Number) $r2;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $r5 = (java.lang.Number) $r3;

        $l2 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        $b3 = $l1 cmp $l2;

        $i9 = (int) $b3;

        if $i9 >= 0 goto label6;

        $b7 = -1;

        goto label8;

     label6:
        $b4 = $l1 cmp $l2;

        if $b4 != 0 goto label7;

        $b7 = 0;

        goto label8;

     label7:
        $b7 = 1;

     label8:
        return $b7;

     label9:
        $r9 = new java.lang.ClassCastException;

        specialinvoke $r9.<java.lang.ClassCastException: void <init>(java.lang.String)>("Non-numeric literal in compareNumbers");

        throw $r9;
    }

    public static boolean isInstant(com.hp.hpl.jena.graph.Node)
    {
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z1 = $r1 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        return $z1;

     label1:
        return 0;
    }

    public static int compareInstants(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        java.lang.ClassCastException $r6;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r4, r5;
        int $i0;
        java.lang.Object $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z2 = $r2 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        if $z2 == 0 goto label1;

        $z3 = $r3 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        if $z3 == 0 goto label1;

        r4 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r2;

        r5 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r3;

        $i0 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int compare(com.hp.hpl.jena.datatypes.xsd.AbstractDateTime)>(r5);

        return $i0;

     label1:
        $r6 = new java.lang.ClassCastException;

        specialinvoke $r6.<java.lang.ClassCastException: void <init>(java.lang.String)>("Non-numeric literal in compareNumbers");

        throw $r6;
    }

    public static int compareTypedLiterals(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        byte $b0, $b3, $b4, $b6, $b7, $b8;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r6, r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        long $l1, $l2;
        java.lang.ClassCastException $r11;
        int $i5, $i9, $i10;
        java.lang.Number $r4, $r5, $r8, $r9;
        double $d0, $d1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label10;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label10;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z2 = $r2 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        if $z2 == 0 goto label01;

        $z9 = $r3 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        if $z9 == 0 goto label01;

        r7 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r2;

        r6 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) $r3;

        $i5 = virtualinvoke r7.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int compare(com.hp.hpl.jena.datatypes.xsd.AbstractDateTime)>(r6);

        return $i5;

     label01:
        $z3 = $r2 instanceof java.lang.Number;

        if $z3 == 0 goto label10;

        $z4 = $r3 instanceof java.lang.Number;

        if $z4 == 0 goto label10;

        $z5 = $r2 instanceof java.lang.Float;

        if $z5 != 0 goto label02;

        $z6 = $r2 instanceof java.lang.Double;

        if $z6 != 0 goto label02;

        $z7 = $r3 instanceof java.lang.Float;

        if $z7 != 0 goto label02;

        $z8 = $r3 instanceof java.lang.Double;

        if $z8 == 0 goto label06;

     label02:
        $r8 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r8.<java.lang.Number: double doubleValue()>();

        $r9 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r9.<java.lang.Number: double doubleValue()>();

        $b6 = $d0 cmpg $d1;

        $i9 = (int) $b6;

        if $i9 >= 0 goto label03;

        $b7 = -1;

        goto label05;

     label03:
        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label04;

        $b7 = 0;

        goto label05;

     label04:
        $b7 = 1;

     label05:
        return $b7;

     label06:
        $r4 = (java.lang.Number) $r2;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $r5 = (java.lang.Number) $r3;

        $l2 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        $b3 = $l1 cmp $l2;

        $i10 = (int) $b3;

        if $i10 >= 0 goto label07;

        $b8 = -1;

        goto label09;

     label07:
        $b4 = $l1 cmp $l2;

        if $b4 != 0 goto label08;

        $b8 = 0;

        goto label09;

     label08:
        $b8 = 1;

     label09:
        return $b8;

     label10:
        $r11 = new java.lang.ClassCastException;

        specialinvoke $r11.<java.lang.ClassCastException: void <init>(java.lang.String)>("Compare typed literals can only compare numbers and datetimes");

        throw $r11;
    }

    public static boolean comparable(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean isNumeric(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean isNumeric(com.hp.hpl.jena.graph.Node)>(r1);

        if $z3 != 0 goto label2;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean isInstant(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean isInstant(com.hp.hpl.jena.graph.Node)>(r1);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public static com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.Finder r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.graph.Node r2, r3, $r5;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.reasoner.Finder;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, null);

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r1);

        $r5 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node doGetPropValue(com.hp.hpl.jena.util.iterator.ClosableIterator)>($r4);

        return $r5;
    }

    public static com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.graph.Node r1, r2, $r4;
        com.hp.hpl.jena.graph.Graph r0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.graph.Graph;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, null);

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node doGetPropValue(com.hp.hpl.jena.util.iterator.ClosableIterator)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r0;
        com.hp.hpl.jena.graph.Node r1, r2, $r4;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.util.iterator.ClosableIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, null);

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node doGetPropValue(com.hp.hpl.jena.util.iterator.ClosableIterator)>($r3);

        return $r4;
    }

    private static com.hp.hpl.jena.graph.Node doGetPropValue(com.hp.hpl.jena.util.iterator.ClosableIterator)
    {
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.util.iterator.ClosableIterator r0;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r2;

        r0 := @parameter0: com.hp.hpl.jena.util.iterator.ClosableIterator;

        r3 = null;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        $r2 = (com.hp.hpl.jena.graph.Triple) $r1;

        r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

     label1:
        interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return r3;
    }

    public static java.util.List convertList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r1;
        java.util.List $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.util.LinkedList $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: java.util.List convertList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext,java.util.List)>(r0, r1, $r2);

        return $r3;
    }

    private static java.util.List convertList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext, java.util.List)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r6;
        com.hp.hpl.jena.graph.Node r0, $r3, $r5, $r7, $r9, $r10;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        java.util.List r1, $r11;
        com.hp.hpl.jena.rdf.model.Property $r4, $r8;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r6 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        r1 := @parameter2: java.util.List;

        if r0 == null goto label1;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        return r1;

     label2:
        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0, $r5, r6);

        if $r7 == null goto label3;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r10 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0, $r9, r6);

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: java.util.List convertList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext,java.util.List)>($r10, r6, r1);

        return $r11;

     label3:
        return r1;
    }

    public static com.hp.hpl.jena.graph.Node makeIntNode(int)
    {
        int i0;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        com.hp.hpl.jena.graph.Node $r2;
        java.lang.Integer $r0;

        i0 := @parameter0: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.Object)>($r0);

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node makeLongNode(long)
    {
        long l0;
        com.hp.hpl.jena.graph.Node $r2, $r5;
        java.lang.Integer $r7;
        byte $b1;
        java.lang.Long $r6;
        int $i2, $i3;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1, $r4;

        l0 := @parameter0: long;

        $b1 = l0 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $r6 = new java.lang.Long;

        specialinvoke $r6.<java.lang.Long: void <init>(long)>(l0);

        $r4 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.Object)>($r6);

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r4);

        return $r5;

     label1:
        $r7 = new java.lang.Integer;

        $i2 = (int) l0;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i2);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.Object)>($r7);

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node makeDoubleNode(double)
    {
        java.lang.Double $r0;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r1;
        com.hp.hpl.jena.graph.Node $r2;
        double d0;

        d0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);

        $r1 = staticinvoke <com.hp.hpl.jena.graph.impl.LiteralLabelFactory: com.hp.hpl.jena.graph.impl.LiteralLabel create(java.lang.Object)>($r0);

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node makeList(com.hp.hpl.jena.graph.Node[], com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node[] r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node[];

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node doMakeList(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.graph.Graph)>(r0, 0, r1);

        return $r2;
    }

    private static com.hp.hpl.jena.graph.Node doMakeList(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node[] r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r5, $r6, $r8, $r9;
        com.hp.hpl.jena.graph.Triple $r4, $r7;
        int i0, $i1, $i2;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r3 := @parameter2: com.hp.hpl.jena.graph.Graph;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label1;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        $r4 = new com.hp.hpl.jena.graph.Triple;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node first>;

        $r5 = r0[i0];

        specialinvoke $r4.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r6, $r5);

        interfaceinvoke r3.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r4);

        $r7 = new com.hp.hpl.jena.graph.Triple;

        $r8 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node rest>;

        $i2 = i0 + 1;

        $r9 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node doMakeList(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.graph.Graph)>(r0, $i2, r3);

        specialinvoke $r7.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r8, $r9);

        interfaceinvoke r3.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r7);

        return $r2;

     label1:
        $r1 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node nil>;

        return $r1;
    }

    public static com.hp.hpl.jena.reasoner.rulesys.Rule$Parser loadRuleParserFromResourceFile(java.lang.String)
    {
        java.lang.String r0;
        java.io.BufferedReader $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader openResourceFile(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser rulesParserFromReader(java.io.BufferedReader)>($r1);

        return $r2;
    }

    public static java.lang.String loadURLFile(java.lang.String) throws java.io.IOException
    {
        java.io.StringWriter $r2;
        int $i0;
        char[] r3;
        java.lang.String r0, $r4;
        java.io.BufferedReader $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader readerFromURL(java.lang.String)>(r0);

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>(int)>(1024);

        r3 = newarray (char)[1024];

     label1:
        $z0 = virtualinvoke $r1.<java.io.BufferedReader: boolean ready()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r1.<java.io.BufferedReader: int read(char[])>(r3);

        if $i0 > 0 goto label2;

        goto label3;

     label2:
        virtualinvoke $r2.<java.io.StringWriter: void write(char[],int,int)>(r3, 0, $i0);

        goto label1;

     label3:
        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

        virtualinvoke $r2.<java.io.StringWriter: void close()>();

        $r4 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.Boolean checkBinaryPredicate(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Boolean $r3;
        java.lang.String $r6;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.Boolean;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.RDFNode: java.lang.String toString()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        specialinvoke $r3.<java.lang.Boolean: void <init>(boolean)>($z1);

        return $r3;

     label1:
        return null;
    }

    public static java.lang.Integer getIntegerPredicate(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.rdf.model.Statement $r3;
        java.lang.Integer $r5;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        int $i0;
        com.hp.hpl.jena.rdf.model.Literal $r6;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z1 = $r4 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label1;

        $r5 = new java.lang.Integer;

        $r6 = (com.hp.hpl.jena.rdf.model.Literal) $r4;

        $i0 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Literal: int getInt()>();

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i0);

        return $r5;

     label1:
        return null;
    }

    public static boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.IllegalParameterException $r1;
        com.hp.hpl.jena.rdf.model.Property r4;
        java.lang.Boolean $r9;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r9 = (java.lang.Boolean) r0;

        $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r8 = (java.lang.String) r0;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        return $z2;

     label2:
        $r1 = new com.hp.hpl.jena.reasoner.IllegalParameterException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal type for ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setting - use a Boolean");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.IllegalParameterException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public static int convertIntegerPredicateArg(com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.Property r4;
        int $i0, $i1;
        java.lang.String $r7, $r8, $r16;
        java.lang.Number $r9;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r10;
        com.hp.hpl.jena.reasoner.IllegalParameterException $r1, $r11;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r12, $r13, $r14, $r15;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r9 = (java.lang.Number) r0;

        $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        return $i1;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label5;

     label2:
        $r8 = (java.lang.String) r0;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label3:
        return $i0;

     label4:
        $r10 := @caughtexception;

        $r11 = new com.hp.hpl.jena.reasoner.IllegalParameterException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal type for ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setting - use an integer");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.reasoner.IllegalParameterException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label5:
        $r1 = new com.hp.hpl.jena.reasoner.IllegalParameterException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal type for ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setting - use an integer");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.IllegalParameterException: void <init>(java.lang.String)>($r7);

        throw $r1;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public static void updateParameter(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Object r3;
        java.lang.String $r4;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void remove()>();

        goto label1;

     label2:
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,java.lang.String)>(r1, $r4);

        return;
    }
}
