public class org.sat4j.tools.xplain.DeletionStrategy extends java.lang.Object implements org.sat4j.tools.xplain.MinimizationStrategy
{
    private static final long serialVersionUID;
    private boolean computationCanceled;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.sat4j.tools.xplain.DeletionStrategy r0;

        r0 := @this: org.sat4j.tools.xplain.DeletionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancelExplanationComputation()
    {
        org.sat4j.tools.xplain.DeletionStrategy r0;

        r0 := @this: org.sat4j.tools.xplain.DeletionStrategy;

        r0.<org.sat4j.tools.xplain.DeletionStrategy: boolean computationCanceled> = 1;

        return;
    }

    public org.sat4j.specs.IVecInt explain(org.sat4j.specs.ISolver, java.util.Map, org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.lang.Integer $r28, $r38, $r60, $r79, r82;
        java.util.Map r2;
        java.lang.StringBuilder $r11, $r14, $r15, $r17, $r20, $r21, $r23, $r26, $r27, $r30, $r31, $r33, $r36, $r37, $r40, $r41, $r43, $r46, $r47, $r49, $r52, $r53, $r55, $r58, $r59, $r62, $r63, $r68, $r71, $r72;
        org.sat4j.specs.IVecInt r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, $i35, i36, i37;
        java.io.PrintStream $r12, $r18, $r24, $r34, $r44, $r50, $r56, $r69, $r75, $r77, $r78, $r81;
        java.lang.Object $r29, $r39, $r61, $r67, $r80;
        java.io.PrintWriter $r76;
        java.util.Set $r7;
        org.sat4j.specs.TimeoutException $r65;
        org.sat4j.specs.IteratorInt $r10, $r74;
        org.sat4j.specs.ISolver r4;
        java.lang.AssertionError $r66;
        java.lang.String $r13, $r16, $r19, $r22, $r25, $r32, $r35, $r42, $r45, $r48, $r51, $r54, $r57, $r64, $r70, $r73;
        org.sat4j.tools.xplain.DeletionStrategy r0;
        org.sat4j.core.VecInt $r1, $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.Iterator $r9;

        r0 := @this: org.sat4j.tools.xplain.DeletionStrategy;

        r4 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.sat4j.specs.IVecInt;

        r0.<org.sat4j.tools.xplain.DeletionStrategy: boolean computationCanceled> = 0;

        $r1 = new org.sat4j.core.VecInt;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $i1 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: int size()>();

        $i2 = $i0 + $i1;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>(int)>($i2);

        interfaceinvoke r3.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r1);

        $r5 = interfaceinvoke r4.<org.sat4j.specs.ISolver: org.sat4j.specs.IVecInt unsatExplanation()>();

        $r6 = new org.sat4j.core.VecInt;

        $i3 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        specialinvoke $r6.<org.sat4j.core.VecInt: void <init>(int)>($i3);

        $i4 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        if $i4 != 1 goto label01;

        $i32 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int get(int)>(0);

        $i33 = neg $i32;

        interfaceinvoke $r6.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i33);

        return $r6;

     label01:
        $z0 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z0 == 0 goto label04;

        $r69 = <java.lang.System: java.io.PrintStream out>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r70 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initial unsat core ");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r69.<java.io.PrintStream: void print(java.lang.String)>($r73);

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: void sort()>();

        $r74 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: org.sat4j.specs.IteratorInt iterator()>();

     label02:
        $z16 = interfaceinvoke $r74.<org.sat4j.specs.IteratorInt: boolean hasNext()>();

        if $z16 == 0 goto label03;

        $r78 = <java.lang.System: java.io.PrintStream out>;

        $i30 = interfaceinvoke $r74.<org.sat4j.specs.IteratorInt: int next()>();

        $i31 = neg $i30;

        $r79 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i31);

        $r80 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r79);

        virtualinvoke $r78.<java.io.PrintStream: void print(java.lang.Object)>($r80);

        $r81 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r81.<java.io.PrintStream: void print(java.lang.String)>(" ");

        goto label02;

     label03:
        $r75 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r75.<java.io.PrintStream: void println()>();

        $r76 = new java.io.PrintWriter;

        $r77 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r76.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r77, 1);

        interfaceinvoke r4.<org.sat4j.specs.ISolver: void printStat(java.io.PrintWriter,java.lang.String)>($r76, "c ");

     label04:
        i34 = 0;

     label05:
        $i35 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        if i34 >= $i35 goto label07;

        $i29 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int get(int)>(i34);

        $z15 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: boolean contains(int)>($i29);

        if $z15 == 0 goto label06;

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int delete(int)>(i34);

        goto label05;

     label06:
        i34 = i34 + 1;

        goto label05;

     label07:
        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $r8 = new org.sat4j.core.VecInt;

        $i5 = interfaceinvoke $r7.<java.util.Set: int size()>();

        specialinvoke $r8.<org.sat4j.core.VecInt: void <init>(int)>($i5);

        $r9 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r67 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r82 = (java.lang.Integer) $r67;

        $i28 = virtualinvoke r82.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r8.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i28);

        goto label08;

     label09:
        $r10 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: org.sat4j.specs.IteratorInt iterator()>();

     label10:
        $z2 = interfaceinvoke $r10.<org.sat4j.specs.IteratorInt: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $i27 = interfaceinvoke $r10.<org.sat4j.specs.IteratorInt: int next()>();

        i36 = $i27;

        if $i27 >= 0 goto label11;

        i36 = neg $i27;

     label11:
        interfaceinvoke $r8.<org.sat4j.specs.IVecInt: void remove(int)>(i36);

        goto label10;

     label12:
        interfaceinvoke $r8.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r1);

        $i6 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r1);

        $z3 = <org.sat4j.tools.xplain.DeletionStrategy: boolean $assertionsDisabled>;

        if $z3 != 0 goto label13;

        $z14 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r1);

        if $z14 == 0 goto label13;

        $r66 = new java.lang.AssertionError;

        specialinvoke $r66.<java.lang.AssertionError: void <init>()>();

        throw $r66;

     label13:
        $i7 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        $i26 = $i7 - 1;

        i37 = $i6;

     label14:
        if i37 >= $i26 goto label19;

        $z9 = r0.<org.sat4j.tools.xplain.DeletionStrategy: boolean computationCanceled>;

        if $z9 == 0 goto label15;

        $r65 = new org.sat4j.specs.TimeoutException;

        specialinvoke $r65.<org.sat4j.specs.TimeoutException: void <init>()>();

        throw $r65;

     label15:
        $i19 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>(i37);

        $i20 = neg $i19;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i37, $i20);

        $z10 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z10 == 0 goto label16;

        $r56 = <java.lang.System: java.io.PrintStream out>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r57 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checking ");

        $i25 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>(i37);

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i25);

        $r61 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r60);

        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ...");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r56.<java.io.PrintStream: void println(java.lang.String)>($r64);

     label16:
        $z11 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r1);

        if $z11 == 0 goto label17;

        $i21 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>(i37);

        $i22 = neg $i21;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i37, $i22);

        $i23 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>(i37);

        $i24 = neg $i23;

        interfaceinvoke $r6.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i24);

        $z13 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z13 == 0 goto label18;

        $r50 = <java.lang.System: java.io.PrintStream out>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mandatory.");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r54);

        goto label18;

     label17:
        $z12 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z12 == 0 goto label18;

        $r44 = <java.lang.System: java.io.PrintStream out>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not needed.");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r48);

     label18:
        i37 = i37 + 1;

        goto label14;

     label19:
        $i8 = interfaceinvoke $r6.<org.sat4j.specs.IVecInt: int size()>();

        if $i8 != 0 goto label20;

        $i16 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>($i26);

        $i17 = neg $i16;

        interfaceinvoke $r6.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i17);

        $z8 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z8 == 0 goto label23;

        $r34 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping last test,the remaining element ");

        $i18 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>($i26);

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r39 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r38);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is causing the inconsistency!");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r42);

        goto label23;

     label20:
        $i9 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>($i26);

        $i10 = neg $i9;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void set(int,int)>($i26, $i10);

        $z4 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z4 == 0 goto label21;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checking ");

        $i15 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>($i26);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r29 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ...");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r32);

     label21:
        $z5 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r1);

        if $z5 == 0 goto label22;

        $i11 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>($i26);

        $i12 = neg $i11;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void set(int,int)>($i26, $i12);

        $i13 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int get(int)>($i26);

        $i14 = neg $i13;

        interfaceinvoke $r6.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i14);

        $z7 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z7 == 0 goto label23;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mandatory.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

        goto label23;

     label22:
        $z6 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z6 == 0 goto label23;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not needed.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label23:
        return $r6;
    }

    public java.lang.String toString()
    {
        org.sat4j.tools.xplain.DeletionStrategy r0;

        r0 := @this: org.sat4j.tools.xplain.DeletionStrategy;

        return "Deletion based minimization strategy";
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.tools.xplain.DeletionStrategy: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/tools/xplain/DeletionStrategy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.tools.xplain.DeletionStrategy: boolean $assertionsDisabled> = $z1;

        return;
    }
}
