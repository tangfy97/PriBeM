final class org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1 extends java.lang.Object implements org.springframework.util.ReflectionUtils$MethodCallback
{
    final org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0;
    private final java.lang.Object val$bean;

    void <init>(org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor, java.lang.Object)
    {
        org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1 r0;
        org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor r1;
        java.lang.Object r2;

        r0 := @this: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1;

        r1 := @parameter0: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor;

        r2 := @parameter1: java.lang.Object;

        r0.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0> = r1;

        r0.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: java.lang.Object val$bean> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void doWith(java.lang.reflect.Method) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        org.springframework.util.StringValueResolver $r20, $r24;
        java.lang.IllegalStateException $r29;
        org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor $r13, $r16, $r19, $r21, $r23;
        byte $b2, $b4;
        java.lang.Long $r15, $r18;
        java.util.Map $r14, $r17, $r22;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, z3, $z4, $z5, z6, z7, z8;
        java.lang.Exception $r25;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Object[] $r10;
        long $l1, $l3;
        org.springframework.scheduling.'annotation'.Scheduled r2;
        int $i0, $i5, $i6;
        java.lang.String $r9, $r11, $r12, r27;
        org.springframework.scheduling.support.MethodInvokingRunnable $r28;
        java.lang.Class[] $r5;
        org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1 r7;
        java.lang.Class $r3, $r4;
        java.lang.Object $r8;

        r7 := @this: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, class "Lorg/springframework/scheduling/annotation/Scheduled;");

        r2 = (org.springframework.scheduling.'annotation'.Scheduled) $r1;

        if r2 == null goto label15;

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Only void-returning methods may be annotated with @Scheduled.");

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r5;

        if $i0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z2, "Only no-arg methods may be annotated with @Scheduled.");

        $r28 = new org.springframework.scheduling.support.MethodInvokingRunnable;

        specialinvoke $r28.<org.springframework.scheduling.support.MethodInvokingRunnable: void <init>()>();

        $r8 = r7.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: java.lang.Object val$bean>;

        virtualinvoke $r28.<org.springframework.scheduling.support.MethodInvokingRunnable: void setTargetObject(java.lang.Object)>($r8);

        $r9 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r28.<org.springframework.scheduling.support.MethodInvokingRunnable: void setTargetMethod(java.lang.String)>($r9);

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke $r28.<org.springframework.scheduling.support.MethodInvokingRunnable: void setArguments(java.lang.Object[])>($r10);

     label03:
        virtualinvoke $r28.<org.springframework.scheduling.support.MethodInvokingRunnable: void prepare()>();

     label04:
        goto label06;

     label05:
        $r25 := @caughtexception;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("failed to prepare task", $r25);

        throw $r29;

     label06:
        z3 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        $r11 = interfaceinvoke r2.<org.springframework.scheduling.'annotation'.Scheduled: java.lang.String cron()>();

        r27 = $r11;

        $r12 = "";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label08;

        z3 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        $r19 = r7.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0>;

        $r20 = staticinvoke <org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor: org.springframework.util.StringValueResolver access$1(org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor)>($r19);

        if $r20 == null goto label07;

        $r23 = r7.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0>;

        $r24 = staticinvoke <org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor: org.springframework.util.StringValueResolver access$1(org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor)>($r23);

        r27 = interfaceinvoke $r24.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>($r11);

     label07:
        $r21 = r7.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0>;

        $r22 = staticinvoke <org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor: java.util.Map access$2(org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor)>($r21);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r27);

     label08:
        $l1 = interfaceinvoke r2.<org.springframework.scheduling.'annotation'.Scheduled: long fixedDelay()>();

        $b2 = $l1 cmp 0L;

        $i5 = (int) $b2;

        if $i5 < 0 goto label11;

        if z6 == 0 goto label09;

        $z4 = 0;

        goto label10;

     label09:
        $z4 = 1;

     label10:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z4, "Exactly one of \'cron\', \'fixedDelay\', or \'fixedRate\' is required.");

        z3 = 1;

        z8 = 1;

        z7 = 1;

        $r16 = r7.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0>;

        $r17 = staticinvoke <org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor: java.util.Map access$3(org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor)>($r16);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r18);

     label11:
        $l3 = interfaceinvoke r2.<org.springframework.scheduling.'annotation'.Scheduled: long fixedRate()>();

        $b4 = $l3 cmp 0L;

        $i6 = (int) $b4;

        if $i6 < 0 goto label14;

        if z7 == 0 goto label12;

        $z5 = 0;

        goto label13;

     label12:
        $z5 = 1;

     label13:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z5, "Exactly one of \'cron\', \'fixedDelay\', or \'fixedRate\' is required.");

        z3 = 1;

        z8 = 1;

        $r13 = r7.<org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor$1: org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor this$0>;

        $r14 = staticinvoke <org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor: java.util.Map access$4(org.springframework.scheduling.'annotation'.ScheduledAnnotationBeanPostProcessor)>($r13);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r15);

     label14:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>(z8, "Exactly one of \'cron\', \'fixedDelay\', or \'fixedRate\' is required.");

     label15:
        return;

        catch java.lang.Exception from label03 to label04 with label05;
    }
}
