public class org.springframework.scheduling.timer.TimerTaskExecutor extends java.lang.Object implements org.springframework.scheduling.SchedulingTaskExecutor, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private java.util.Timer timer;
    private long delay;
    private java.lang.String beanName;
    private boolean timerInternal;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: long delay> = 0L;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: boolean timerInternal> = 0;

        return;
    }

    public void <init>(java.util.Timer)
    {
        org.springframework.scheduling.timer.TimerTaskExecutor r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.Timer r3;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r3 := @parameter0: java.util.Timer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: long delay> = 0L;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: boolean timerInternal> = 0;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "Timer must not be null");

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer> = r3;

        return;
    }

    public void setTimer(java.util.Timer)
    {
        java.util.Timer r1;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r1 := @parameter0: java.util.Timer;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer> = r1;

        return;
    }

    public void setDelay(long)
    {
        long l0;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        l0 := @parameter0: long;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: long delay> = l0;

        return;
    }

    public void setBeanName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.lang.String beanName> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.scheduling.timer.TimerTaskExecutor r0;
        java.util.Timer $r1, $r3;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer>;

        if $r1 != null goto label1;

        $r2 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Initializing Timer");

        $r3 = virtualinvoke r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer createTimer()>();

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer> = $r3;

        r0.<org.springframework.scheduling.timer.TimerTaskExecutor: boolean timerInternal> = 1;

     label1:
        return;
    }

    protected java.util.Timer createTimer()
    {
        org.springframework.scheduling.timer.TimerTaskExecutor r0;
        java.util.Timer $r2, $r3;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.lang.String beanName>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new java.util.Timer;

        $r4 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.lang.String beanName>;

        specialinvoke $r3.<java.util.Timer: void <init>(java.lang.String)>($r4);

        return $r3;

     label1:
        $r2 = new java.util.Timer;

        specialinvoke $r2.<java.util.Timer: void <init>()>();

        return $r2;
    }

    protected final java.util.Timer getTimer()
    {
        java.util.Timer $r1, $r2;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer>;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "Timer not initialized yet");

        $r2 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer>;

        return $r2;
    }

    public void execute(java.lang.Runnable)
    {
        org.springframework.scheduling.timer.DelegatingTimerTask $r2;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;
        java.util.Timer $r1;
        long $l0;
        java.lang.Runnable r3;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r3 := @parameter0: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer getTimer()>();

        $r2 = new org.springframework.scheduling.timer.DelegatingTimerTask;

        specialinvoke $r2.<org.springframework.scheduling.timer.DelegatingTimerTask: void <init>(java.lang.Runnable)>(r3);

        $l0 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: long delay>;

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r2, $l0);

        return;
    }

    public void execute(java.lang.Runnable, long)
    {
        org.springframework.scheduling.timer.DelegatingTimerTask $r4;
        long l0, $l1, $l3;
        java.util.Timer $r1;
        java.lang.Runnable r3;
        byte $b2;
        org.springframework.scheduling.timer.TimerTaskExecutor r0;
        int $i4;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r3 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $l1 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: long delay>;

        $b2 = l0 cmp $l1;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label1;

        $l3 = l0;

        goto label2;

     label1:
        $l3 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: long delay>;

     label2:
        $r1 = virtualinvoke r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer getTimer()>();

        $r4 = new org.springframework.scheduling.timer.DelegatingTimerTask;

        specialinvoke $r4.<org.springframework.scheduling.timer.DelegatingTimerTask: void <init>(java.lang.Runnable)>(r3);

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r4, $l3);

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.FutureTask $r0;
        java.lang.Runnable r1;
        org.springframework.scheduling.timer.TimerTaskExecutor r2;

        r2 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, null);

        virtualinvoke r2.<org.springframework.scheduling.timer.TimerTaskExecutor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask $r0;
        java.util.concurrent.Callable r1;
        org.springframework.scheduling.timer.TimerTaskExecutor r2;

        r2 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        virtualinvoke r2.<org.springframework.scheduling.timer.TimerTaskExecutor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public boolean prefersShortLivedTasks()
    {
        org.springframework.scheduling.timer.TimerTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        return 1;
    }

    public void destroy()
    {
        org.springframework.scheduling.timer.TimerTaskExecutor r0;
        org.apache.commons.logging.Log $r1;
        java.util.Timer $r2;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.timer.TimerTaskExecutor;

        $z0 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: boolean timerInternal>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Cancelling Timer");

        $r2 = r0.<org.springframework.scheduling.timer.TimerTaskExecutor: java.util.Timer timer>;

        virtualinvoke $r2.<java.util.Timer: void cancel()>();

     label1:
        return;
    }
}
