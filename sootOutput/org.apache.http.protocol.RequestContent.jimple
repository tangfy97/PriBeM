public class org.apache.http.protocol.RequestContent extends java.lang.Object implements org.apache.http.HttpRequestInterceptor
{
    private final boolean overwrite;

    public void <init>()
    {
        org.apache.http.protocol.RequestContent r0;

        r0 := @this: org.apache.http.protocol.RequestContent;

        specialinvoke r0.<org.apache.http.protocol.RequestContent: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.http.protocol.RequestContent r0;
        boolean z0;

        r0 := @this: org.apache.http.protocol.RequestContent;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.protocol.RequestContent: boolean overwrite> = z0;

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.ProtocolException $r22, $r23, $r25;
        org.apache.http.Header $r7, $r8, $r9, $r20;
        byte $b1;
        org.apache.http.RequestLine $r2;
        org.apache.http.protocol.RequestContent r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.http.HttpEntity $r5;
        org.apache.http.HttpRequest r0;
        java.lang.StringBuilder $r12, $r13, $r24;
        org.apache.http.HttpVersion $r6;
        long $l0, $l2;
        int $i3;
        java.lang.String $r14, $r15;
        org.apache.http.HttpEntityEnclosingRequest $r4;
        java.lang.IllegalArgumentException $r21;
        org.apache.http.ProtocolVersion $r3;
        org.apache.http.protocol.HttpContext r19;

        r1 := @this: org.apache.http.protocol.RequestContent;

        r0 := @parameter0: org.apache.http.HttpRequest;

        r19 := @parameter1: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r21;

     label01:
        $z0 = r0 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label11;

        $z1 = r1.<org.apache.http.protocol.RequestContent: boolean overwrite>;

        if $z1 == 0 goto label02;

        interfaceinvoke r0.<org.apache.http.HttpRequest: void removeHeaders(java.lang.String)>("Transfer-Encoding");

        interfaceinvoke r0.<org.apache.http.HttpRequest: void removeHeaders(java.lang.String)>("Content-Length");

        goto label04;

     label02:
        $z2 = interfaceinvoke r0.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Transfer-Encoding");

        if $z2 == 0 goto label03;

        $r22 = new org.apache.http.ProtocolException;

        specialinvoke $r22.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Transfer-encoding header already present");

        throw $r22;

     label03:
        $z3 = interfaceinvoke r0.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Content-Length");

        if $z3 == 0 goto label04;

        $r23 = new org.apache.http.ProtocolException;

        specialinvoke $r23.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Content-Length header already present");

        throw $r23;

     label04:
        $r2 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r4 = (org.apache.http.HttpEntityEnclosingRequest) r0;

        $r5 = interfaceinvoke $r4.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        if $r5 != null goto label05;

        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Content-Length", "0");

        return;

     label05:
        $z4 = interfaceinvoke $r5.<org.apache.http.HttpEntity: boolean isChunked()>();

        if $z4 != 0 goto label06;

        $l0 = interfaceinvoke $r5.<org.apache.http.HttpEntity: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label08;

     label06:
        $r6 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z5 = virtualinvoke $r3.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r6);

        if $z5 == 0 goto label07;

        $r25 = new org.apache.http.ProtocolException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chunked transfer encoding not allowed for ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r14);

        throw $r25;

     label07:
        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Transfer-Encoding", "chunked");

        goto label09;

     label08:
        $l2 = interfaceinvoke $r5.<org.apache.http.HttpEntity: long getContentLength()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r15);

     label09:
        $r7 = interfaceinvoke $r5.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        if $r7 == null goto label10;

        $z7 = interfaceinvoke r0.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Content-Type");

        if $z7 != 0 goto label10;

        $r9 = interfaceinvoke $r5.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(org.apache.http.Header)>($r9);

     label10:
        $r20 = interfaceinvoke $r5.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        if $r20 == null goto label11;

        $z6 = interfaceinvoke r0.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Content-Encoding");

        if $z6 != 0 goto label11;

        $r8 = interfaceinvoke $r5.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(org.apache.http.Header)>($r8);

     label11:
        return;
    }
}
