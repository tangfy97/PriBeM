public abstract class org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier extends java.lang.Object implements org.apache.cxf.transport.https.CertificateHostnameVerifier
{
    private static final java.lang.String[] BAD_COUNTRY_2LDS;
    private static final java.lang.String[] LOCALHOSTS;

    protected void <init>()
    {
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r0;

        r0 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean verify(java.lang.String, javax.net.ssl.SSLSession)
    {
        java.security.cert.X509Certificate r3;
        java.lang.String[] $r5;
        javax.net.ssl.SSLException $r7;
        javax.net.ssl.SSLSession r0;
        java.security.cert.Certificate $r2;
        java.security.cert.Certificate[] $r1;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r4;
        java.lang.String r6;

        r4 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: javax.net.ssl.SSLSession;

     label1:
        $r1 = interfaceinvoke r0.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r2 = $r1[0];

        r3 = (java.security.cert.X509Certificate) $r2;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r6;

        virtualinvoke r4.<org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: void check(java.lang.String[],java.security.cert.X509Certificate)>($r5, r3);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
    }

    public void check(java.lang.String, javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        javax.net.ssl.SSLSocket r3;
        java.lang.String[] $r1;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r0;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.net.ssl.SSLSocket;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: void check(java.lang.String[],javax.net.ssl.SSLSocket)>($r1, r3);

        return;
    }

    public void check(java.lang.String, java.security.cert.X509Certificate) throws javax.net.ssl.SSLException
    {
        java.security.cert.X509Certificate r3;
        java.lang.String[] $r1;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r0;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.security.cert.X509Certificate;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: void check(java.lang.String[],java.security.cert.X509Certificate)>($r1, r3);

        return;
    }

    public void check(java.lang.String, java.lang.String[], java.lang.String[]) throws javax.net.ssl.SSLException
    {
        java.lang.String[] $r1, r3, r4;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r0;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String[];

        r4 := @parameter2: java.lang.String[];

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: void check(java.lang.String[],java.lang.String[],java.lang.String[])>($r1, r3, r4);

        return;
    }

    public void check(java.lang.String[], javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        java.security.cert.X509Certificate r12;
        javax.net.ssl.SSLSocket r1;
        java.lang.String[] r0;
        java.lang.NullPointerException $r7;
        javax.net.ssl.SSLSession $r2, $r6, r10;
        java.security.cert.Certificate $r3;
        java.security.cert.Certificate[] $r11;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r4;
        java.io.InputStream $r5, $r9;
        javax.net.ssl.SSLPeerUnverifiedException $r8;

        r4 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: javax.net.ssl.SSLSocket;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("host to verify is null");

        throw $r7;

     label1:
        $r2 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r10 = $r2;

        if $r2 != null goto label2;

        $r5 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>();

        virtualinvoke $r5.<java.io.InputStream: int available()>();

        $r6 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r10 = $r6;

        if $r6 != null goto label2;

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r10 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

     label2:
        $r11 = interfaceinvoke r10.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>();

        virtualinvoke $r9.<java.io.InputStream: int available()>();

        throw $r8;

     label5:
        $r3 = $r11[0];

        r12 = (java.security.cert.X509Certificate) $r3;

        virtualinvoke r4.<org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: void check(java.lang.String[],java.security.cert.X509Certificate)>(r0, r12);

        return;

        catch javax.net.ssl.SSLPeerUnverifiedException from label2 to label3 with label4;
    }

    public void check(java.lang.String[], java.security.cert.X509Certificate) throws javax.net.ssl.SSLException
    {
        java.security.cert.X509Certificate r0;
        java.lang.String[] $r1, $r2, r4;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r3;

        r3 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r4 := @parameter0: java.lang.String[];

        r0 := @parameter1: java.security.cert.X509Certificate;

        $r1 = staticinvoke <org.apache.cxf.transport.https.CertificateHostnameVerifier$Certificates: java.lang.String[] getCNs(java.security.cert.X509Certificate)>(r0);

        $r2 = staticinvoke <org.apache.cxf.transport.https.CertificateHostnameVerifier$Certificates: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>(r0);

        virtualinvoke r3.<org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: void check(java.lang.String[],java.lang.String[],java.lang.String[])>(r4, $r1, $r2);

        return;
    }

    public void check(java.lang.String[], java.lang.String[], java.lang.String[], boolean, boolean) throws javax.net.ssl.SSLException
    {
        javax.net.ssl.SSLException $r8, $r27;
        java.lang.StringBuilder $r0, $r6, $r9, $r10, $r11, $r12, $r13, $r21, $r22, $r24, $r25;
        java.util.TreeSet $r3;
        java.lang.String $r2, $r14, $r16, $r17, $r18, $r19, $r20, $r23, $r26, $r28, $r29, $r30, $r31, $r32, $r33, r35, $r36, r37, r38;
        boolean $z0, $z1, $z2, $z3, z4, $z5, z6, $z7, $z8, z9, z10, $z11, $z12;
        java.lang.String[] r1, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11;
        java.util.Iterator $r7;
        java.lang.Object $r15;
        org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier r34;

        r34 := @this: org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier;

        r1 := @parameter0: java.lang.String[];

        r4 := @parameter1: java.lang.String[];

        r5 := @parameter2: java.lang.String[];

        z9 := @parameter3: boolean;

        z6 := @parameter4: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(32);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        i7 = 0;

     label01:
        $i0 = lengthof r1;

        if i7 >= $i0 goto label05;

        r35 = r1[i7];

        if r35 == null goto label02;

        $r33 = virtualinvoke r35.<java.lang.String: java.lang.String trim()>();

        $r36 = virtualinvoke $r33.<java.lang.String: java.lang.String toLowerCase()>();

        goto label03;

     label02:
        $r36 = "";

     label03:
        r37 = $r36;

        r1[i7] = $r36;

        if i7 <= 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label04:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        i7 = i7 + 1;

        goto label01;

     label05:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.util.TreeSet;

        specialinvoke $r3.<java.util.TreeSet: void <init>()>();

        if r4 == null goto label07;

        $i5 = lengthof r4;

        if $i5 <= 0 goto label07;

        $r30 = r4[0];

        if $r30 == null goto label07;

        $r31 = r4[0];

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r31);

        if z9 == 0 goto label07;

        i8 = 1;

     label06:
        $i6 = lengthof r4;

        if i8 >= $i6 goto label07;

        $r32 = r4[i8];

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r32);

        i8 = i8 + 1;

        goto label06;

     label07:
        if r5 == null goto label10;

        i9 = 0;

     label08:
        $i4 = lengthof r5;

        if i9 >= $i4 goto label10;

        $r28 = r5[i9];

        if $r28 == null goto label09;

        $r29 = r5[i9];

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r29);

     label09:
        i9 = i9 + 1;

        goto label08;

     label10:
        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label11;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate for ");

        $r23 = r1[0];

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t contain CN or DNS subjectAlt");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = new javax.net.ssl.SSLException;

        specialinvoke $r27.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r26);

        throw $r27;

     label11:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        z10 = 0;

        $r7 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label23;

        $r15 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.lang.String) $r15;

        $r16 = virtualinvoke r38.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OR");

     label13:
        $z3 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if $z3 == 0 goto label14;

        $i3 = virtualinvoke $r16.<java.lang.String: int lastIndexOf(int)>(46);

        if $i3 < 0 goto label14;

        $z7 = staticinvoke <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: boolean isIP4Address(java.lang.String)>($r16);

        if $z7 != 0 goto label14;

        $z8 = staticinvoke <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>($r16);

        if $z8 == 0 goto label14;

        $z11 = 1;

        goto label15;

     label14:
        $z11 = 0;

     label15:
        z4 = $z11;

        i10 = 0;

     label16:
        $i11 = lengthof r1;

        if i10 >= $i11 goto label22;

        $r17 = r1[i10];

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String toLowerCase()>();

        if z4 == 0 goto label19;

        $r20 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int)>(1);

        $z5 = virtualinvoke $r19.<java.lang.String: boolean endsWith(java.lang.String)>($r20);

        z10 = $z5;

        if $z5 == 0 goto label20;

        if z6 == 0 goto label20;

        $i1 = staticinvoke <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: int countDots(java.lang.String)>($r19);

        $i2 = staticinvoke <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: int countDots(java.lang.String)>($r16);

        if $i1 != $i2 goto label17;

        $z12 = 1;

        goto label18;

     label17:
        $z12 = 0;

     label18:
        z10 = $z12;

        goto label20;

     label19:
        z10 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r16);

     label20:
        if z10 == 0 goto label21;

        goto label23;

     label21:
        i10 = i10 + 1;

        goto label16;

     label22:
        goto label12;

     label23:
        if z10 != 0 goto label24;

        $r8 = new javax.net.ssl.SSLException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hostname in certificate didn\'t match: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label24:
        return;
    }

    public static boolean isIP4Address(java.lang.String)
    {
        char $c1;
        int $i0, $i2, $i3, $i4, i5, $i6;
        java.lang.String r0, r1;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.String;

        z1 = 1;

        r1 = r0;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 < 0 goto label1;

        $i2 = $i0 + 1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label1;

        $i4 = $i0 + 1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

     label1:
        i5 = 0;

     label2:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i6 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 != 0 goto label3;

        z1 = 0;

        goto label4;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return z1;
    }

    public static boolean acceptableCountryWildcard(java.lang.String)
    {
        char $c2;
        java.lang.String[] $r2;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 7 goto label3;

        if $i0 > 9 goto label3;

        $i1 = $i0 - 3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i5 = (int) $c2;

        if $i5 != 46 goto label3;

        $i3 = $i0 - 3;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, $i3);

        $r2 = <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS>;

        $i4 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r2, $r1);

        if $i4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 1;
    }

    public static boolean isLocalhost(java.lang.String)
    {
        java.lang.String[] $r4;
        int $i0, $i1;
        java.lang.String $r0, r1, $r2, r3;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r0 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        goto label2;

     label1:
        $r2 = "";

     label2:
        r3 = $r2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("::1");

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(37);

        if $i0 < 0 goto label3;

        r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label3:
        $r4 = <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: java.lang.String[] LOCALHOSTS>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r4, r3);

        if $i1 < 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public static int countDots(java.lang.String)
    {
        int $i0, i2, i3, $i4;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 != 46 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2, $r3;

        $r0 = newarray (java.lang.String)[14];

        $r0[0] = "ac";

        $r0[1] = "co";

        $r0[2] = "com";

        $r0[3] = "ed";

        $r0[4] = "edu";

        $r0[5] = "go";

        $r0[6] = "gouv";

        $r0[7] = "gov";

        $r0[8] = "info";

        $r0[9] = "lg";

        $r0[10] = "ne";

        $r0[11] = "net";

        $r0[12] = "or";

        $r0[13] = "org";

        <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "::1";

        $r1[1] = "127.0.0.1";

        $r1[2] = "localhost";

        $r1[3] = "localhost.localdomain";

        <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: java.lang.String[] LOCALHOSTS> = $r1;

        $r2 = <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r2);

        $r3 = <org.apache.cxf.transport.https.CertificateHostnameVerifier$AbstractVerifier: java.lang.String[] LOCALHOSTS>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r3);

        return;
    }
}
