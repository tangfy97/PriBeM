public class kodkod.ast.Relation extends kodkod.ast.LeafExpression
{

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        kodkod.ast.Relation r0;

        r0 := @this: kodkod.ast.Relation;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<kodkod.ast.LeafExpression: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static kodkod.ast.Relation nary(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        kodkod.ast.Relation $r0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new kodkod.ast.Relation;

        specialinvoke $r0.<kodkod.ast.Relation: void <init>(java.lang.String,int)>(r1, i0);

        return $r0;
    }

    public static kodkod.ast.Relation unary(java.lang.String)
    {
        java.lang.String r1;
        kodkod.ast.Relation $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new kodkod.ast.Relation;

        specialinvoke $r0.<kodkod.ast.Relation: void <init>(java.lang.String,int)>(r1, 1);

        return $r0;
    }

    public static kodkod.ast.Relation binary(java.lang.String)
    {
        java.lang.String r1;
        kodkod.ast.Relation $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new kodkod.ast.Relation;

        specialinvoke $r0.<kodkod.ast.Relation: void <init>(java.lang.String,int)>(r1, 2);

        return $r0;
    }

    public static kodkod.ast.Relation ternary(java.lang.String)
    {
        java.lang.String r1;
        kodkod.ast.Relation $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new kodkod.ast.Relation;

        specialinvoke $r0.<kodkod.ast.Relation: void <init>(java.lang.String,int)>(r1, 3);

        return $r0;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;
        kodkod.ast.Relation r1;

        r1 := @this: kodkod.ast.Relation;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.Relation)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.visitor.VoidVisitor r0;
        kodkod.ast.Relation r1;

        r1 := @this: kodkod.ast.Relation;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.Relation)>(r1);

        return;
    }

    public kodkod.ast.Formula acyclic()
    {
        kodkod.ast.RelationPredicate$Acyclic $r0;
        kodkod.ast.Relation r1;

        r1 := @this: kodkod.ast.Relation;

        $r0 = new kodkod.ast.RelationPredicate$Acyclic;

        specialinvoke $r0.<kodkod.ast.RelationPredicate$Acyclic: void <init>(kodkod.ast.Relation)>(r1);

        return $r0;
    }

    public kodkod.ast.Formula function(kodkod.ast.Expression, kodkod.ast.Expression)
    {
        kodkod.ast.RelationPredicate$Function $r0;
        kodkod.ast.operator.Multiplicity $r4;
        kodkod.ast.Expression r2, r3;
        kodkod.ast.Relation r1;

        r1 := @this: kodkod.ast.Relation;

        r2 := @parameter0: kodkod.ast.Expression;

        r3 := @parameter1: kodkod.ast.Expression;

        $r0 = new kodkod.ast.RelationPredicate$Function;

        $r4 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        specialinvoke $r0.<kodkod.ast.RelationPredicate$Function: void <init>(kodkod.ast.Relation,kodkod.ast.Expression,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, r2, $r4, r3);

        return $r0;
    }

    public kodkod.ast.Formula partialFunction(kodkod.ast.Expression, kodkod.ast.Expression)
    {
        kodkod.ast.RelationPredicate$Function $r0;
        kodkod.ast.operator.Multiplicity $r4;
        kodkod.ast.Expression r2, r3;
        kodkod.ast.Relation r1;

        r1 := @this: kodkod.ast.Relation;

        r2 := @parameter0: kodkod.ast.Expression;

        r3 := @parameter1: kodkod.ast.Expression;

        $r0 = new kodkod.ast.RelationPredicate$Function;

        $r4 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE>;

        specialinvoke $r0.<kodkod.ast.RelationPredicate$Function: void <init>(kodkod.ast.Relation,kodkod.ast.Expression,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, r2, $r4, r3);

        return $r0;
    }

    public kodkod.ast.Formula totalOrder(kodkod.ast.Relation, kodkod.ast.Relation, kodkod.ast.Relation)
    {
        kodkod.ast.RelationPredicate$TotalOrdering $r0;
        kodkod.ast.Relation r1, r2, r3, r4;

        r1 := @this: kodkod.ast.Relation;

        r2 := @parameter0: kodkod.ast.Relation;

        r3 := @parameter1: kodkod.ast.Relation;

        r4 := @parameter2: kodkod.ast.Relation;

        $r0 = new kodkod.ast.RelationPredicate$TotalOrdering;

        specialinvoke $r0.<kodkod.ast.RelationPredicate$TotalOrdering: void <init>(kodkod.ast.Relation,kodkod.ast.Relation,kodkod.ast.Relation,kodkod.ast.Relation)>(r1, r2, r3, r4);

        return $r0;
    }
}
