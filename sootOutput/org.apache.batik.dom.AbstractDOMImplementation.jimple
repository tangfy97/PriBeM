public abstract class org.apache.batik.dom.AbstractDOMImplementation extends java.lang.Object implements org.w3c.dom.DOMImplementation, java.io.Serializable
{
    protected final org.apache.batik.dom.util.HashTable features;

    protected void registerFeature(java.lang.String, java.lang.Object)
    {
        org.apache.batik.dom.util.HashTable $r2;
        java.lang.Object r4;
        java.lang.String r1, $r3;
        org.apache.batik.dom.AbstractDOMImplementation r0;

        r0 := @this: org.apache.batik.dom.AbstractDOMImplementation;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.batik.dom.AbstractDOMImplementation: org.apache.batik.dom.util.HashTable features>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r2.<org.apache.batik.dom.util.HashTable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    protected void <init>()
    {
        java.lang.String[] $r2, $r3, $r4, $r5, $r6, $r7;
        org.apache.batik.dom.util.HashTable $r1;
        org.apache.batik.dom.AbstractDOMImplementation r0;

        r0 := @this: org.apache.batik.dom.AbstractDOMImplementation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.dom.util.HashTable;

        specialinvoke $r1.<org.apache.batik.dom.util.HashTable: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDOMImplementation: org.apache.batik.dom.util.HashTable features> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "2.0";

        $r2[1] = "3.0";

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("Core", $r2);

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "1.0";

        $r3[1] = "2.0";

        $r3[2] = "3.0";

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("XML", $r3);

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "2.0";

        $r4[1] = "3.0";

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("Events", $r4);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "2.0";

        $r5[1] = "3.0";

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("UIEvents", $r5);

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "2.0";

        $r6[1] = "3.0";

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("MouseEvents", $r6);

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("TextEvents", "3.0");

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("KeyboardEvents", "3.0");

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "2.0";

        $r7[1] = "3.0";

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("MutationEvents", $r7);

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("MutationNameEvents", "3.0");

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("Traversal", "2.0");

        virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void registerFeature(java.lang.String,java.lang.Object)>("XPath", "3.0");

        return;
    }

    public boolean hasFeature(java.lang.String, java.lang.String)
    {
        java.lang.String[] r5;
        org.apache.batik.dom.util.HashTable $r1;
        int $i0, $i2, $i3, i4, $i5;
        java.lang.String $r2, r4, $r6, r7;
        boolean $z0, $z1, $z2;
        char $c1;
        java.lang.Object $r3;
        org.apache.batik.dom.AbstractDOMImplementation r0;

        r0 := @this: org.apache.batik.dom.AbstractDOMImplementation;

        r7 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        if r7 == null goto label01;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $c1 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c1;

        if $i5 != 43 goto label03;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>(1);

     label03:
        $r1 = r0.<org.apache.batik.dom.AbstractDOMImplementation: org.apache.batik.dom.util.HashTable features>;

        $r2 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke $r1.<org.apache.batik.dom.util.HashTable: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 != null goto label04;

        return 0;

     label04:
        if r4 == null goto label05;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i2 != 0 goto label06;

     label05:
        return 1;

     label06:
        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label07;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z2;

     label07:
        r5 = (java.lang.String[]) $r3;

        i4 = 0;

        goto label10;

     label08:
        $r6 = r5[i4];

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label09;

        return 1;

     label09:
        i4 = i4 + 1;

     label10:
        $i3 = lengthof r5;

        if i4 < $i3 goto label08;

        return 0;
    }

    public java.lang.Object getFeature(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.dom.AbstractDOMImplementation r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDOMImplementation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    public org.apache.batik.dom.events.DocumentEventSupport createDocumentEventSupport()
    {
        org.apache.batik.dom.events.DocumentEventSupport $r0;
        org.apache.batik.dom.AbstractDOMImplementation r1;

        r1 := @this: org.apache.batik.dom.AbstractDOMImplementation;

        $r0 = new org.apache.batik.dom.events.DocumentEventSupport;

        specialinvoke $r0.<org.apache.batik.dom.events.DocumentEventSupport: void <init>()>();

        return $r0;
    }

    public org.apache.batik.dom.events.EventSupport createEventSupport(org.apache.batik.dom.AbstractNode)
    {
        org.apache.batik.dom.events.EventSupport $r0;
        org.apache.batik.dom.AbstractNode r1;
        org.apache.batik.dom.AbstractDOMImplementation r2;

        r2 := @this: org.apache.batik.dom.AbstractDOMImplementation;

        r1 := @parameter0: org.apache.batik.dom.AbstractNode;

        $r0 = new org.apache.batik.dom.events.EventSupport;

        specialinvoke $r0.<org.apache.batik.dom.events.EventSupport: void <init>(org.apache.batik.dom.AbstractNode)>(r1);

        return $r0;
    }

    public abstract org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, org.w3c.dom.DocumentType) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.DocumentType createDocumentType(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;
}
