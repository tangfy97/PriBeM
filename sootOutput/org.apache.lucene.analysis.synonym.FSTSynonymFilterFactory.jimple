final class org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    private final boolean ignoreCase;
    private final java.lang.String tokenizerFactory;
    private final java.lang.String synonyms;
    private final java.lang.String format;
    private final boolean expand;
    private final java.util.Map tokArgs;
    private org.apache.lucene.analysis.synonym.SynonymMap map;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r0;
        java.util.HashMap $r2;
        java.util.Map r1, $r12, $r19;
        java.lang.String $r3, $r4, $r5, $r6, $r11, $r14, r18, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r16;
        java.util.Set $r15;
        java.lang.IllegalArgumentException $r7;
        org.apache.lucene.util.Version $r13;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.Object $r17, $r21;

        r0 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.util.Map tokArgs> = $r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "ignoreCase", 0);

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean ignoreCase> = $z0;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, "synonyms");

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "format");

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String format> = $r4;

        $z1 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "expand", 1);

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean expand> = $z1;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "tokenizerFactory");

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String tokenizerFactory> = $r5;

        $r6 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String tokenizerFactory>;

        if $r6 == null goto label2;

        virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: void assureMatchVersion()>();

        $r12 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.util.Map tokArgs>;

        $r13 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.util.Version getLuceneMatchVersion()>();

        $r14 = virtualinvoke $r13.<org.apache.lucene.util.Version: java.lang.String toString()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("luceneMatchVersion", $r14);

        $r15 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r17;

        $r19 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.util.Map tokArgs>;

        $r20 = virtualinvoke r18.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^tokenizerFactory\\.", "");

        $r21 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        interfaceinvoke $r16.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label3:
        return;
    }

    public org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.TokenStream r3, $r5;
        org.apache.lucene.analysis.synonym.SynonymMap $r1, $r4;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r0;
        org.apache.lucene.util.fst.FST $r2;
        org.apache.lucene.analysis.synonym.SynonymFilter $r6;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r3 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r1 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.synonym.SynonymMap map>;

        $r2 = $r1.<org.apache.lucene.analysis.synonym.SynonymMap: org.apache.lucene.util.fst.FST fst>;

        if $r2 != null goto label1;

        $r5 = r3;

        goto label2;

     label1:
        $r6 = new org.apache.lucene.analysis.synonym.SynonymFilter;

        $r5 = $r6;

        $r4 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.synonym.SynonymMap map>;

        $z0 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean ignoreCase>;

        specialinvoke $r6.<org.apache.lucene.analysis.synonym.SynonymFilter: void <init>(org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.synonym.SynonymMap,boolean)>(r3, $r4, $z0);

     label2:
        return $r5;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory $r18;
        org.apache.lucene.analysis.synonym.SynonymMap $r6, $r15;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r0;
        org.apache.lucene.analysis.util.ResourceLoader r2;
        java.lang.String $r1, $r3, $r5, $r7, $r8, $r12, $r14;
        java.text.ParseException $r16;
        boolean $z0, $z1;
        java.io.IOException $r17;
        java.lang.IllegalArgumentException $r9;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1 $r4;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r1 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String tokenizerFactory>;

        if $r1 != null goto label1;

        $r18 = null;

        goto label2;

     label1:
        $r3 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String tokenizerFactory>;

        $r18 = specialinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.util.TokenizerFactory loadTokenizerFactory(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r2, $r3);

     label2:
        $r4 = new org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1;

        specialinvoke $r4.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory$1: void <init>(org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory,org.apache.lucene.analysis.util.TokenizerFactory)>(r0, $r18);

     label3:
        $r5 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String format>;

        if $r5 == null goto label4;

        $r7 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String format>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("solr");

        if $z0 == 0 goto label5;

     label4:
        $r6 = specialinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.synonym.SynonymMap loadSolrSynonyms(org.apache.lucene.analysis.util.ResourceLoader,boolean,org.apache.lucene.analysis.Analyzer)>(r2, 1, $r4);

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.synonym.SynonymMap map> = $r6;

        goto label7;

     label5:
        $r8 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String format>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("wordnet");

        if $z1 == 0 goto label6;

        $r15 = specialinvoke r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.synonym.SynonymMap loadWordnetSynonyms(org.apache.lucene.analysis.util.ResourceLoader,boolean,org.apache.lucene.analysis.Analyzer)>(r2, 1, $r4);

        r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: org.apache.lucene.analysis.synonym.SynonymMap map> = $r15;

        goto label7;

     label6:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized synonyms format: ");

        $r12 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String format>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label7:
        goto label9;

     label8:
        $r16 := @caughtexception;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing synonyms file:", $r16);

        throw $r17;

     label9:
        return;

        catch java.text.ParseException from label3 to label7 with label8;
    }

    private org.apache.lucene.analysis.synonym.SynonymMap loadSolrSynonyms(org.apache.lucene.analysis.util.ResourceLoader, boolean, org.apache.lucene.analysis.Analyzer) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.synonym.SynonymMap $r14;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r7;
        java.nio.charset.Charset $r0;
        java.nio.charset.CodingErrorAction $r2, $r4;
        org.apache.lucene.analysis.util.ResourceLoader r18;
        org.apache.lucene.analysis.synonym.SolrSynonymParser $r6;
        java.lang.String $r10, $r11, r16, $r21;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator $r13;
        org.apache.lucene.analysis.Analyzer r8;
        java.nio.charset.CharsetDecoder $r1, $r3, $r5;
        java.io.InputStreamReader $r17, $r20;
        java.io.File $r9;
        java.util.List $r12;
        java.lang.Object $r15;
        java.io.InputStream $r19, $r22;

        r7 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r18 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        z0 := @parameter1: boolean;

        r8 := @parameter2: org.apache.lucene.analysis.Analyzer;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r1 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r3 = virtualinvoke $r1.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r2);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r5 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = new org.apache.lucene.analysis.synonym.SolrSynonymParser;

        $z1 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean expand>;

        specialinvoke $r6.<org.apache.lucene.analysis.synonym.SolrSynonymParser: void <init>(boolean,boolean,org.apache.lucene.analysis.Analyzer)>(z0, $z1, r8);

        $r9 = new java.io.File;

        $r10 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms>;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r10);

        $z2 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label1;

        virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        $r20 = new java.io.InputStreamReader;

        $r21 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms>;

        $r22 = interfaceinvoke r18.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>($r21);

        specialinvoke $r20.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>($r22, $r5);

        virtualinvoke $r6.<org.apache.lucene.analysis.synonym.SolrSynonymParser: void add(java.io.Reader)>($r20);

        goto label3;

     label1:
        $r11 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms>;

        $r12 = virtualinvoke r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.util.List splitFileNames(java.lang.String)>($r11);

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        $r17 = new java.io.InputStreamReader;

        $r19 = interfaceinvoke r18.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>(r16);

        specialinvoke $r17.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>($r19, $r5);

        virtualinvoke $r6.<org.apache.lucene.analysis.synonym.SolrSynonymParser: void add(java.io.Reader)>($r17);

        goto label2;

     label3:
        $r14 = virtualinvoke $r6.<org.apache.lucene.analysis.synonym.SolrSynonymParser: org.apache.lucene.analysis.synonym.SynonymMap build()>();

        return $r14;
    }

    private org.apache.lucene.analysis.synonym.SynonymMap loadWordnetSynonyms(org.apache.lucene.analysis.util.ResourceLoader, boolean, org.apache.lucene.analysis.Analyzer) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.synonym.SynonymMap $r14;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r7;
        java.nio.charset.Charset $r0;
        java.nio.charset.CodingErrorAction $r2, $r4;
        org.apache.lucene.analysis.util.ResourceLoader r18;
        java.lang.String $r10, $r11, r16, $r21;
        boolean z0, $z1, $z2, $z3;
        org.apache.lucene.analysis.synonym.WordnetSynonymParser $r6;
        java.util.Iterator $r13;
        org.apache.lucene.analysis.Analyzer r8;
        java.nio.charset.CharsetDecoder $r1, $r3, $r5;
        java.io.InputStreamReader $r17, $r20;
        java.io.File $r9;
        java.util.List $r12;
        java.lang.Object $r15;
        java.io.InputStream $r19, $r22;

        r7 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r18 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        z0 := @parameter1: boolean;

        r8 := @parameter2: org.apache.lucene.analysis.Analyzer;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r1 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r3 = virtualinvoke $r1.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r2);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r5 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = new org.apache.lucene.analysis.synonym.WordnetSynonymParser;

        $z1 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean expand>;

        specialinvoke $r6.<org.apache.lucene.analysis.synonym.WordnetSynonymParser: void <init>(boolean,boolean,org.apache.lucene.analysis.Analyzer)>(z0, $z1, r8);

        $r9 = new java.io.File;

        $r10 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms>;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r10);

        $z2 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label1;

        virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        $r20 = new java.io.InputStreamReader;

        $r21 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms>;

        $r22 = interfaceinvoke r18.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>($r21);

        specialinvoke $r20.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>($r22, $r5);

        virtualinvoke $r6.<org.apache.lucene.analysis.synonym.WordnetSynonymParser: void add(java.io.Reader)>($r20);

        goto label3;

     label1:
        $r11 = r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.lang.String synonyms>;

        $r12 = virtualinvoke r7.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.util.List splitFileNames(java.lang.String)>($r11);

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        $r17 = new java.io.InputStreamReader;

        $r19 = interfaceinvoke r18.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>(r16);

        specialinvoke $r17.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>($r19, $r5);

        virtualinvoke $r6.<org.apache.lucene.analysis.synonym.WordnetSynonymParser: void add(java.io.Reader)>($r17);

        goto label2;

     label3:
        $r14 = virtualinvoke $r6.<org.apache.lucene.analysis.synonym.WordnetSynonymParser: org.apache.lucene.analysis.synonym.SynonymMap build()>();

        return $r14;
    }

    private org.apache.lucene.analysis.util.TokenizerFactory loadTokenizerFactory(org.apache.lucene.analysis.util.ResourceLoader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory r12;
        java.lang.Object[] $r5;
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r6;
        java.lang.Class[] $r3;
        java.lang.RuntimeException $r11;
        java.lang.reflect.Constructor $r4;
        org.apache.lucene.analysis.util.ResourceLoaderAware $r9;
        java.lang.Exception $r10;
        java.util.Map $r7;
        org.apache.lucene.analysis.util.ResourceLoader r0;
        java.lang.Class $r2;
        java.lang.Object $r8;
        java.lang.String r1;
        boolean $z0;

        r6 := @this: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        r0 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.apache.lucene.analysis.util.ResourceLoader: java.lang.Class findClass(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/lucene/analysis/util/TokenizerFactory;");

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/util/Map;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r7 = r6.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: java.util.Map tokArgs>;

        $r5[0] = $r7;

        $r8 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        r12 = (org.apache.lucene.analysis.util.TokenizerFactory) $r8;

        $z0 = r12 instanceof org.apache.lucene.analysis.util.ResourceLoaderAware;

        if $z0 == 0 goto label2;

        $r9 = (org.apache.lucene.analysis.util.ResourceLoaderAware) r12;

        interfaceinvoke $r9.<org.apache.lucene.analysis.util.ResourceLoaderAware: void inform(org.apache.lucene.analysis.util.ResourceLoader)>(r0);

     label2:
        return r12;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static boolean access$000(org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory)
    {
        org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory;

        $z0 = r0.<org.apache.lucene.analysis.synonym.FSTSynonymFilterFactory: boolean ignoreCase>;

        return $z0;
    }
}
