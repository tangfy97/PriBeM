public class org.codehaus.jackson.map.deser.AbstractDeserializer extends org.codehaus.jackson.map.JsonDeserializer
{
    protected final org.codehaus.jackson.type.JavaType _baseType;
    protected final boolean _acceptString;
    protected final boolean _acceptBoolean;
    protected final boolean _acceptInt;
    protected final boolean _acceptDouble;

    public void <init>(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.AbstractDeserializer r0;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.JsonDeserializer: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: org.codehaus.jackson.type.JavaType _baseType> = r1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;");

        r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptString> = $z0;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r2 == $r3 goto label1;

        $z3 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Boolean;");

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptBoolean> = $z4;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r2 == $r4 goto label4;

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Integer;");

        if $z2 == 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptInt> = $z5;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        if $r2 == $r5 goto label7;

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Double;");

        if $z1 == 0 goto label8;

     label7:
        $z6 = 1;

        goto label9;

     label8:
        $z6 = 0;

     label9:
        r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptDouble> = $z6;

        return;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r4;
        org.codehaus.jackson.map.deser.AbstractDeserializer r0;
        java.lang.Object $r3, $r5;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r4 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: java.lang.Object _deserializeIfNatural(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r5;
    }

    public java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.AbstractDeserializer r1;
        org.codehaus.jackson.map.JsonMappingException $r4;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.DeserializationContext r0;
        org.codehaus.jackson.JsonParser r5;

        r1 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        r5 := @parameter0: org.codehaus.jackson.JsonParser;

        r0 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 = r1.<org.codehaus.jackson.map.deser.AbstractDeserializer: org.codehaus.jackson.type.JavaType _baseType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class,java.lang.String)>($r3, "abstract types can only be instantiated with additional type information");

        throw $r4;
    }

    protected java.lang.Object _deserializeIfNatural(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r2;
        java.lang.Double $r6;
        java.lang.Integer $r7;
        org.codehaus.jackson.map.DeserializationContext r9;
        org.codehaus.jackson.map.deser.AbstractDeserializer r3;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.Boolean $r4, $r5;
        java.lang.String $r8;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        double $d0;

        r3 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r9 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = <org.codehaus.jackson.map.deser.AbstractDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        $z4 = r3.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptString>;

        if $z4 == 0 goto label6;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r8;

     label2:
        $z3 = r3.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptInt>;

        if $z3 == 0 goto label6;

        $i2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r7;

     label3:
        $z2 = r3.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptDouble>;

        if $z2 == 0 goto label6;

        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r6;

     label4:
        $z1 = r3.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptBoolean>;

        if $z1 == 0 goto label6;

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r5;

     label5:
        $z0 = r3.<org.codehaus.jackson.map.deser.AbstractDeserializer: boolean _acceptBoolean>;

        if $z0 == 0 goto label6;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r4;

     label6:
        return null;
    }
}
