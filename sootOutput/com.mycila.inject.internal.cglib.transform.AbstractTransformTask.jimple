public abstract class com.mycila.inject.internal.cglib.transform.AbstractTransformTask extends com.mycila.inject.internal.cglib.transform.AbstractProcessTask
{
    private static final int ZIP_MAGIC;
    private static final int CLASS_MAGIC;
    private boolean verbose;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractProcessTask: void <init>()>();

        return;
    }

    public void setVerbose(boolean)
    {
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        z0 := @parameter0: boolean;

        r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean verbose> = z0;

        return;
    }

    protected abstract com.mycila.inject.internal.cglib.transform.ClassTransformer getClassTransformer(java.lang.String[]);

    protected com.mycila.inject.internal.asm.Attribute[] attributes()
    {
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        return null;
    }

    protected void processFile(java.io.File) throws java.lang.Exception
    {
        java.net.URL $r4;
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;
        java.io.File r1;
        java.lang.StringBuffer $r2, $r3, $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean isClassFile(java.io.File)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void processClassFile(java.io.File)>(r1);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean isJarFile(java.io.File)>(r1);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void processJarFile(java.io.File)>(r1);

        goto label3;

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ignoring ");

        $r4 = virtualinvoke r1.<java.io.File: java.net.URL toURL()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void log(java.lang.String,int)>($r6, 1);

     label3:
        return;
    }

    private void processClassFile(java.io.File) throws java.lang.Exception, java.io.FileNotFoundException, java.io.IOException, java.net.MalformedURLException
    {
        java.lang.Throwable $r17;
        byte[] $r11;
        java.net.URL $r14;
        java.lang.String[] $r2;
        com.mycila.inject.internal.asm.ClassReader $r1, $r8;
        com.mycila.inject.internal.asm.Attribute[] $r9;
        java.lang.StringBuffer $r12, $r13, $r15;
        com.mycila.inject.internal.cglib.transform.TransformingClassGenerator $r6;
        int $i0;
        java.lang.String $r16;
        com.mycila.inject.internal.cglib.transform.ClassReaderGenerator $r7;
        boolean $z0;
        java.io.FileOutputStream $r10;
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r4;
        java.io.File r0;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter $r3;
        com.mycila.inject.internal.cglib.transform.ClassTransformer $r5;

        r4 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.transform.AbstractTransformTask: com.mycila.inject.internal.asm.ClassReader getClassReader(java.io.File)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ClassNameReader: java.lang.String[] getClassInfo(com.mycila.inject.internal.asm.ClassReader)>($r1);

        $r3 = new com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        specialinvoke $r3.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: void <init>(int)>(1);

        $r5 = virtualinvoke r4.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: com.mycila.inject.internal.cglib.transform.ClassTransformer getClassTransformer(java.lang.String[])>($r2);

        if $r5 == null goto label6;

        $z0 = r4.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean verbose>;

        if $z0 == 0 goto label1;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("processing ");

        $r14 = virtualinvoke r0.<java.io.File: java.net.URL toURL()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void log(java.lang.String)>($r16);

     label1:
        $r6 = new com.mycila.inject.internal.cglib.transform.TransformingClassGenerator;

        $r7 = new com.mycila.inject.internal.cglib.transform.ClassReaderGenerator;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.transform.AbstractTransformTask: com.mycila.inject.internal.asm.ClassReader getClassReader(java.io.File)>(r0);

        $r9 = virtualinvoke r4.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: com.mycila.inject.internal.asm.Attribute[] attributes()>();

        $i0 = virtualinvoke r4.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: int getFlags()>();

        specialinvoke $r7.<com.mycila.inject.internal.cglib.transform.ClassReaderGenerator: void <init>(com.mycila.inject.internal.asm.ClassReader,com.mycila.inject.internal.asm.Attribute[],int)>($r8, $r9, $i0);

        specialinvoke $r6.<com.mycila.inject.internal.cglib.transform.TransformingClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.ClassGenerator,com.mycila.inject.internal.cglib.transform.ClassTransformer)>($r7, $r5);

        virtualinvoke $r6.<com.mycila.inject.internal.cglib.transform.TransformingClassGenerator: void generateClass(com.mycila.inject.internal.asm.ClassVisitor)>($r3);

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

     label2:
        $r11 = virtualinvoke $r3.<com.mycila.inject.internal.asm.ClassWriter: byte[] toByteArray()>();

        virtualinvoke $r10.<java.io.FileOutputStream: void write(byte[])>($r11);

     label3:
        virtualinvoke $r10.<java.io.FileOutputStream: void close()>();

        goto label6;

     label4:
        $r17 := @caughtexception;

     label5:
        virtualinvoke $r10.<java.io.FileOutputStream: void close()>();

        throw $r17;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected int getFlags()
    {
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        return 0;
    }

    private static com.mycila.inject.internal.asm.ClassReader getClassReader(java.io.File) throws java.lang.Exception
    {
        java.lang.Throwable $r4;
        java.io.BufferedInputStream $r0;
        java.io.FileInputStream $r1;
        java.io.File r2;
        com.mycila.inject.internal.asm.ClassReader $r3;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

     label1:
        $r3 = new com.mycila.inject.internal.asm.ClassReader;

        specialinvoke $r3.<com.mycila.inject.internal.asm.ClassReader: void <init>(java.io.InputStream)>($r0);

     label2:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected boolean isClassFile(java.io.File) throws java.io.IOException
    {
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r1 := @parameter0: java.io.File;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean checkMagic(java.io.File,long)>(r1, -889275714L);

        return $z0;
    }

    protected void processJarFile(java.io.File) throws java.lang.Exception
    {
        byte[] $r25, r43;
        java.net.URL $r36;
        java.io.ByteArrayInputStream $r28;
        java.util.zip.ZipEntry $r42, $r44;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.zip.ZipOutputStream $r10;
        java.lang.Throwable $r39, $r40, $r41;
        java.io.DataInputStream $r27;
        java.util.zip.ZipInputStream $r7;
        long $l0, $l2, $l6;
        java.lang.StringBuffer $r12, $r13, $r14, $r19, $r20, $r21, $r22, $r23, $r29, $r30, $r32, $r34, $r35, $r37;
        int $i1, $i3, $i4, $i5, $i7;
        java.lang.String $r2, $r5, $r15, $r17, $r24, $r31, $r33, $r38, $r45, $r46;
        java.io.FileOutputStream $r9;
        java.io.IOException $r11, $r18;
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;
        java.io.FileInputStream $r8;
        java.io.File r1, $r3, $r4, $r6, $r16;
        java.util.zip.CRC32 $r26;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r1 := @parameter0: java.io.File;

        $z0 = r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean verbose>;

        if $z0 == 0 goto label01;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("processing ");

        $r36 = virtualinvoke r1.<java.io.File: java.net.URL toURL()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void log(java.lang.String)>($r38);

     label01:
        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $r3 = new java.io.File;

        $r4 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $r6 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r2, null, $r3);

     label02:
        $r7 = new java.util.zip.ZipInputStream;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r7.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r8);

     label03:
        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

     label04:
        $r10 = new java.util.zip.ZipOutputStream;

        specialinvoke $r10.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r9);

     label05:
        $r42 = virtualinvoke $r7.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        if $r42 == null goto label09;

        $r25 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: byte[] getBytes(java.util.zip.ZipInputStream)>($r7);

        r43 = $r25;

        $z3 = virtualinvoke $r42.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z3 != 0 goto label07;

        $r27 = new java.io.DataInputStream;

        $r28 = new java.io.ByteArrayInputStream;

        specialinvoke $r28.<java.io.ByteArrayInputStream: void <init>(byte[])>($r25);

        specialinvoke $r27.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r28);

        $i3 = virtualinvoke $r27.<java.io.DataInputStream: int readInt()>();

        if $i3 != -889275714 goto label06;

        r43 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: byte[] process(byte[])>($r25);

        goto label07;

     label06:
        $z4 = r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean verbose>;

        if $z4 == 0 goto label07;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ignoring ");

        $r31 = virtualinvoke $r42.<java.util.zip.ZipEntry: java.lang.String toString()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void log(java.lang.String)>($r33);

     label07:
        $r44 = new java.util.zip.ZipEntry;

        $r45 = virtualinvoke $r42.<java.util.zip.ZipEntry: java.lang.String getName()>();

        specialinvoke $r44.<java.util.zip.ZipEntry: void <init>(java.lang.String)>($r45);

        $i4 = virtualinvoke $r42.<java.util.zip.ZipEntry: int getMethod()>();

        virtualinvoke $r44.<java.util.zip.ZipEntry: void setMethod(int)>($i4);

        $r46 = virtualinvoke $r42.<java.util.zip.ZipEntry: java.lang.String getComment()>();

        virtualinvoke $r44.<java.util.zip.ZipEntry: void setComment(java.lang.String)>($r46);

        $i5 = lengthof r43;

        $l6 = (long) $i5;

        virtualinvoke $r44.<java.util.zip.ZipEntry: void setSize(long)>($l6);

        $i7 = virtualinvoke $r44.<java.util.zip.ZipEntry: int getMethod()>();

        if $i7 != 0 goto label08;

        $r26 = new java.util.zip.CRC32;

        specialinvoke $r26.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r26.<java.util.zip.CRC32: void update(byte[])>(r43);

        $l0 = virtualinvoke $r26.<java.util.zip.CRC32: long getValue()>();

        virtualinvoke $r44.<java.util.zip.ZipEntry: void setCrc(long)>($l0);

        $i1 = lengthof r43;

        $l2 = (long) $i1;

        virtualinvoke $r44.<java.util.zip.ZipEntry: void setCompressedSize(long)>($l2);

     label08:
        virtualinvoke $r10.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r44);

        virtualinvoke $r10.<java.util.zip.ZipOutputStream: void write(byte[])>(r43);

        virtualinvoke $r10.<java.util.zip.ZipOutputStream: void closeEntry()>();

        virtualinvoke $r7.<java.util.zip.ZipInputStream: void closeEntry()>();

        goto label05;

     label09:
        virtualinvoke $r10.<java.util.zip.ZipOutputStream: void close()>();

     label10:
        virtualinvoke $r9.<java.io.FileOutputStream: void close()>();

        goto label13;

     label11:
        $r41 := @caughtexception;

     label12:
        virtualinvoke $r9.<java.io.FileOutputStream: void close()>();

        throw $r41;

     label13:
        virtualinvoke $r7.<java.util.zip.ZipInputStream: void close()>();

        goto label16;

     label14:
        $r40 := @caughtexception;

     label15:
        virtualinvoke $r7.<java.util.zip.ZipInputStream: void close()>();

        throw $r40;

     label16:
        $z1 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z1 == 0 goto label18;

        $r16 = new java.io.File;

        $r17 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r17);

        $z2 = virtualinvoke $r16.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z2 != 0 goto label17;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("can not rename ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label17:
        goto label19;

     label18:
        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("can not delete ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label19:
        virtualinvoke $r6.<java.io.File: boolean delete()>();

        goto label22;

     label20:
        $r39 := @caughtexception;

     label21:
        virtualinvoke $r6.<java.io.File: boolean delete()>();

        throw $r39;

     label22:
        return;

        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label03 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label02 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private byte[] process(byte[]) throws java.lang.Exception
    {
        byte[] r2, $r13, $r14;
        java.io.ByteArrayOutputStream $r12;
        java.lang.String[] $r3;
        com.mycila.inject.internal.asm.ClassReader $r0, $r9;
        com.mycila.inject.internal.asm.Attribute[] $r11;
        java.io.ByteArrayInputStream $r1, $r10;
        java.lang.StringBuffer $r15, $r16, $r18;
        com.mycila.inject.internal.cglib.transform.TransformingClassGenerator $r7;
        int $i0;
        java.lang.String $r17, $r19;
        com.mycila.inject.internal.cglib.transform.ClassReaderGenerator $r8;
        boolean $z0;
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r5;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter $r4;
        com.mycila.inject.internal.cglib.transform.ClassTransformer $r6;

        r5 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r2 := @parameter0: byte[];

        $r0 = new com.mycila.inject.internal.asm.ClassReader;

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r0.<com.mycila.inject.internal.asm.ClassReader: void <init>(java.io.InputStream)>($r1);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.ClassNameReader: java.lang.String[] getClassInfo(com.mycila.inject.internal.asm.ClassReader)>($r0);

        $r4 = new com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: void <init>(int)>(1);

        $r6 = virtualinvoke r5.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: com.mycila.inject.internal.cglib.transform.ClassTransformer getClassTransformer(java.lang.String[])>($r3);

        if $r6 == null goto label2;

        $z0 = r5.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean verbose>;

        if $z0 == 0 goto label1;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("processing ");

        $r17 = $r3[0];

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: void log(java.lang.String)>($r19);

     label1:
        $r7 = new com.mycila.inject.internal.cglib.transform.TransformingClassGenerator;

        $r8 = new com.mycila.inject.internal.cglib.transform.ClassReaderGenerator;

        $r9 = new com.mycila.inject.internal.asm.ClassReader;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r9.<com.mycila.inject.internal.asm.ClassReader: void <init>(java.io.InputStream)>($r10);

        $r11 = virtualinvoke r5.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: com.mycila.inject.internal.asm.Attribute[] attributes()>();

        $i0 = virtualinvoke r5.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: int getFlags()>();

        specialinvoke $r8.<com.mycila.inject.internal.cglib.transform.ClassReaderGenerator: void <init>(com.mycila.inject.internal.asm.ClassReader,com.mycila.inject.internal.asm.Attribute[],int)>($r9, $r11, $i0);

        specialinvoke $r7.<com.mycila.inject.internal.cglib.transform.TransformingClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.ClassGenerator,com.mycila.inject.internal.cglib.transform.ClassTransformer)>($r8, $r6);

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.transform.TransformingClassGenerator: void generateClass(com.mycila.inject.internal.asm.ClassVisitor)>($r4);

        $r12 = new java.io.ByteArrayOutputStream;

        specialinvoke $r12.<java.io.ByteArrayOutputStream: void <init>()>();

        $r13 = virtualinvoke $r4.<com.mycila.inject.internal.asm.ClassWriter: byte[] toByteArray()>();

        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void write(byte[])>($r13);

        $r14 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r14;

     label2:
        return r2;
    }

    private byte[] getBytes(java.util.zip.ZipInputStream) throws java.io.IOException
    {
        byte[] $r3;
        java.util.zip.ZipInputStream r2;
        java.io.BufferedInputStream $r6;
        java.io.ByteArrayOutputStream $r5;
        int $i0, $i2;
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r4;

        r4 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r2 := @parameter0: java.util.zip.ZipInputStream;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new java.io.BufferedInputStream;

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);

     label1:
        $i0 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        goto label1;

     label2:
        $r3 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    private boolean checkMagic(java.io.File, long) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.io.DataInputStream $r0;
        long l1, $l2;
        java.io.FileInputStream $r1;
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r4;
        java.io.File r2;
        byte $b3;
        int $i0;
        boolean $z0;

        r4 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r2 := @parameter0: java.io.File;

        l1 := @parameter1: long;

        $r0 = new java.io.DataInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

     label1:
        $i0 = virtualinvoke $r0.<java.io.DataInputStream: int readInt()>();

        $l2 = (long) $i0;

        $b3 = l1 cmp $l2;

        if $b3 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke $r0.<java.io.DataInputStream: void close()>();

        return $z0;

     label4:
        $r3 := @caughtexception;

     label5:
        virtualinvoke $r0.<java.io.DataInputStream: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected boolean isJarFile(java.io.File) throws java.io.IOException
    {
        com.mycila.inject.internal.cglib.transform.AbstractTransformTask r0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractTransformTask;

        r1 := @parameter0: java.io.File;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractTransformTask: boolean checkMagic(java.io.File,long)>(r1, 1347093252L);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.cglib.transform.AbstractTransformTask: int CLASS_MAGIC> = -889275714;

        <com.mycila.inject.internal.cglib.transform.AbstractTransformTask: int ZIP_MAGIC> = 1347093252;

        return;
    }
}
