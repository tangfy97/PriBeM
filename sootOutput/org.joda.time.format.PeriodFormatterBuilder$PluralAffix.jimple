class org.joda.time.format.PeriodFormatterBuilder$PluralAffix extends java.lang.Object implements org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix
{
    private final java.lang.String iSingularText;
    private final java.lang.String iPluralText;

    void <init>(java.lang.String, java.lang.String)
    {
        org.joda.time.format.PeriodFormatterBuilder$PluralAffix r0;
        java.lang.String r1, r2;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$PluralAffix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iSingularText> = r1;

        r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iPluralText> = r2;

        return;
    }

    public int calculatePrintedLength(int)
    {
        int i0, $i1;
        org.joda.time.format.PeriodFormatterBuilder$PluralAffix r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$PluralAffix;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iSingularText>;

        goto label2;

     label1:
        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iPluralText>;

     label2:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i1;
    }

    public void printTo(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0;
        org.joda.time.format.PeriodFormatterBuilder$PluralAffix r1;
        java.lang.String $r2;

        r1 := @this: org.joda.time.format.PeriodFormatterBuilder$PluralAffix;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        if i0 != 1 goto label1;

        $r2 = r1.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iSingularText>;

        goto label2;

     label1:
        $r2 = r1.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iPluralText>;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return;
    }

    public void printTo(java.io.Writer, int) throws java.io.IOException
    {
        java.io.Writer r0;
        int i0;
        org.joda.time.format.PeriodFormatterBuilder$PluralAffix r1;
        java.lang.String $r2;

        r1 := @this: org.joda.time.format.PeriodFormatterBuilder$PluralAffix;

        r0 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        if i0 != 1 goto label1;

        $r2 = r1.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iSingularText>;

        goto label2;

     label1:
        $r2 = r1.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iPluralText>;

     label2:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }

    public int parse(java.lang.String, int)
    {
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.String r1, r2, r3, r4;
        boolean $z0, $z1;
        org.joda.time.format.PeriodFormatterBuilder$PluralAffix r0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$PluralAffix;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iPluralText>;

        r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iSingularText>;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        r2 = r3;

        r3 = r4;

        r4 = r2;

     label1:
        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i2, r3, 0, $i3);

        if $z0 == 0 goto label2;

        $i8 = virtualinvoke r3.<java.lang.String: int length()>();

        $i9 = i2 + $i8;

        return $i9;

     label2:
        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i2, r4, 0, $i4);

        if $z1 == 0 goto label3;

        $i6 = virtualinvoke r4.<java.lang.String: int length()>();

        $i7 = i2 + $i6;

        return $i7;

     label3:
        $i11 = (int) -1;

        $i5 = i2 ^ $i11;

        return $i5;
    }

    public int scan(java.lang.String, int)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i9;
        java.lang.String r1, r2, r3, r4;
        boolean $z0, $z1;
        org.joda.time.format.PeriodFormatterBuilder$PluralAffix r0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$PluralAffix;

        r1 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iPluralText>;

        r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String iSingularText>;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        r4 = r2;

        r2 = r3;

        r3 = r4;

     label1:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        i7 = i5;

     label2:
        if i7 >= $i4 goto label5;

        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i7, r2, 0, $i2);

        if $z0 == 0 goto label3;

        return i7;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i7, r3, 0, $i3);

        if $z1 == 0 goto label4;

        return i7;

     label4:
        i7 = i7 + 1;

        goto label2;

     label5:
        $i9 = (int) -1;

        $i6 = i5 ^ $i9;

        return $i6;
    }
}
