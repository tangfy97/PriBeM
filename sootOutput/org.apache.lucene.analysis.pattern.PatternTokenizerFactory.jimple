public class org.apache.lucene.analysis.pattern.PatternTokenizerFactory extends org.apache.lucene.analysis.util.TokenizerFactory
{
    public static final java.lang.String PATTERN;
    public static final java.lang.String GROUP;
    protected final java.util.regex.Pattern pattern;
    protected final int group;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.pattern.PatternTokenizerFactory r0;
        java.lang.IllegalArgumentException $r9;
        java.util.Map r1;
        int $i0, $i2;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.util.regex.Pattern $r2;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternTokenizerFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenizerFactory: void <init>(java.util.Map)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: java.util.regex.Pattern getPattern(java.util.Map,java.lang.String)>(r1, "pattern");

        r0.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: java.util.regex.Pattern pattern> = $r2;

        $i2 = (int) -1;

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "group", $i2);

        r0.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: int group> = $i0;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label1:
        return;
    }

    public org.apache.lucene.analysis.pattern.PatternTokenizer create(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)
    {
        org.apache.lucene.analysis.pattern.PatternTokenizer $r0;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        int $i0;
        java.io.Reader r2;
        org.apache.lucene.analysis.pattern.PatternTokenizerFactory r3;
        java.util.regex.Pattern $r4;

        r3 := @this: org.apache.lucene.analysis.pattern.PatternTokenizerFactory;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter1: java.io.Reader;

        $r0 = new org.apache.lucene.analysis.pattern.PatternTokenizer;

        $r4 = r3.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: java.util.regex.Pattern pattern>;

        $i0 = r3.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: int group>;

        specialinvoke $r0.<org.apache.lucene.analysis.pattern.PatternTokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader,java.util.regex.Pattern,int)>(r1, r2, $r4, $i0);

        return $r0;
    }

    public volatile org.apache.lucene.analysis.Tokenizer create(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)
    {
        org.apache.lucene.analysis.pattern.PatternTokenizer $r3;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        org.apache.lucene.analysis.pattern.PatternTokenizerFactory r0;
        java.io.Reader r2;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternTokenizerFactory;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter1: java.io.Reader;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.pattern.PatternTokenizerFactory: org.apache.lucene.analysis.pattern.PatternTokenizer create(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader)>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.pattern.PatternTokenizerFactory: java.lang.String GROUP> = "group";

        <org.apache.lucene.analysis.pattern.PatternTokenizerFactory: java.lang.String PATTERN> = "pattern";

        return;
    }
}
