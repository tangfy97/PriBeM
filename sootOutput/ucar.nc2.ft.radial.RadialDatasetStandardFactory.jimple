public class ucar.nc2.ft.radial.RadialDatasetStandardFactory extends java.lang.Object implements ucar.nc2.ft.FeatureDatasetFactory
{
    private static java.util.List factories;

    public void <init>()
    {
        ucar.nc2.ft.radial.RadialDatasetStandardFactory r0;

        r0 := @this: ucar.nc2.ft.radial.RadialDatasetStandardFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void registerFactory(java.lang.Class)
    {
        java.lang.InstantiationException $r20;
        java.lang.String $r8, $r11, $r16, $r19, $r24, $r27;
        boolean $z0;
        java.lang.IllegalAccessException $r12;
        java.lang.IllegalArgumentException $r5, $r13, $r21;
        ucar.nc2.dt.TypedDatasetFactoryIF $r3;
        java.util.List $r4;
        java.lang.Class r0, $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r14, $r15, $r17, $r18, $r22, $r23, $r25, $r26;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lucar/nc2/dt/TypedDatasetFactoryIF;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must implement TypedDatasetFactoryIF");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label5;

     label3:
        $r20 := @caughtexception;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r24 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot instantiate, probably need default Constructor");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r21;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r16 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label5:
        $r4 = <ucar.nc2.ft.radial.RadialDatasetStandardFactory: java.util.List factories>;

        $r3 = (ucar.nc2.dt.TypedDatasetFactoryIF) $r2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public java.lang.Object isMine(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset, java.util.Formatter) throws java.io.IOException
    {
        java.util.Iterator $r10;
        ucar.nc2.ft.radial.RadialDatasetStandardFactory r7;
        java.util.Formatter r8;
        ucar.nc2.dt.TypedDatasetFactoryIF r3;
        java.util.List $r9;
        java.lang.Object $r2;
        ucar.nc2.constants.FeatureType r0, $r1, $r5, $r6;
        ucar.nc2.dataset.NetcdfDataset r4;
        boolean $z0, $z1;

        r7 := @this: ucar.nc2.ft.radial.RadialDatasetStandardFactory;

        r0 := @parameter0: ucar.nc2.constants.FeatureType;

        r4 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r8 := @parameter2: java.util.Formatter;

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        if r0 == $r1 goto label1;

        $r5 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType NONE>;

        if r0 == $r5 goto label1;

        $r6 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType ANY>;

        if r0 == $r6 goto label1;

        return null;

     label1:
        $r9 = <ucar.nc2.ft.radial.RadialDatasetStandardFactory: java.util.List factories>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r3 = (ucar.nc2.dt.TypedDatasetFactoryIF) $r2;

        $z0 = interfaceinvoke r3.<ucar.nc2.dt.TypedDatasetFactoryIF: boolean isMine(ucar.nc2.dataset.NetcdfDataset)>(r4);

        if $z0 == 0 goto label3;

        return r3;

     label3:
        goto label2;

     label4:
        return null;
    }

    public ucar.nc2.ft.FeatureDataset open(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset, java.lang.Object, ucar.nc2.util.CancelTask, java.util.Formatter) throws java.io.IOException
    {
        java.lang.Object[] $r7;
        ucar.nc2.ft.radial.RadialDatasetStandardFactory r9;
        java.util.Formatter r6;
        ucar.nc2.dt.TypedDatasetFactoryIF r1;
        ucar.nc2.dt.TypedDataset $r5;
        ucar.nc2.util.CancelTask r4;
        java.lang.Object r0;
        java.lang.StringBuilder $r2;
        ucar.nc2.dataset.NetcdfDataset r3;
        ucar.nc2.constants.FeatureType r10;
        ucar.nc2.ft.FeatureDataset $r8;

        r9 := @this: ucar.nc2.ft.radial.RadialDatasetStandardFactory;

        r10 := @parameter0: ucar.nc2.constants.FeatureType;

        r3 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter2: java.lang.Object;

        r4 := @parameter3: ucar.nc2.util.CancelTask;

        r6 := @parameter4: java.util.Formatter;

        r1 = (ucar.nc2.dt.TypedDatasetFactoryIF) r0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = interfaceinvoke r1.<ucar.nc2.dt.TypedDatasetFactoryIF: ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>(r3, r4, $r2);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        virtualinvoke r6.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r7);

        $r8 = (ucar.nc2.ft.FeatureDataset) $r5;

        return $r8;
    }

    public ucar.nc2.constants.FeatureType[] getFeatureType()
    {
        ucar.nc2.constants.FeatureType[] $r0;
        ucar.nc2.constants.FeatureType $r1;
        ucar.nc2.ft.radial.RadialDatasetStandardFactory r2;

        r2 := @this: ucar.nc2.ft.radial.RadialDatasetStandardFactory;

        $r0 = newarray (ucar.nc2.constants.FeatureType)[1];

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        $r0[0] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(10);

        <ucar.nc2.ft.radial.RadialDatasetStandardFactory: java.util.List factories> = $r0;

        staticinvoke <ucar.nc2.ft.radial.RadialDatasetStandardFactory: void registerFactory(java.lang.Class)>(class "Lucar/nc2/dt/radial/Netcdf2Dataset;");

        staticinvoke <ucar.nc2.ft.radial.RadialDatasetStandardFactory: void registerFactory(java.lang.Class)>(class "Lucar/nc2/dt/radial/Dorade2Dataset;");

        staticinvoke <ucar.nc2.ft.radial.RadialDatasetStandardFactory: void registerFactory(java.lang.Class)>(class "Lucar/nc2/dt/radial/LevelII2Dataset;");

        staticinvoke <ucar.nc2.ft.radial.RadialDatasetStandardFactory: void registerFactory(java.lang.Class)>(class "Lucar/nc2/dt/radial/Nids2Dataset;");

        staticinvoke <ucar.nc2.ft.radial.RadialDatasetStandardFactory: void registerFactory(java.lang.Class)>(class "Lucar/nc2/dt/radial/UF2Dataset;");

        return;
    }
}
