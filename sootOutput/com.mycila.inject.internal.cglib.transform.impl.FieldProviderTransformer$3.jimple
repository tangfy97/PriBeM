class com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3 extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ObjectSwitchCallback
{
    private final com.mycila.inject.internal.cglib.core.CodeEmitter val$e;
    private final com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer this$0;

    void <init>(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer, com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3 r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3;

        r1 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer this$0> = r1;

        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.core.CodeEmitter val$e> = r2;

        return;
    }

    public void processCase(java.lang.Object, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer $r1;
        com.mycila.inject.internal.asm.Type r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r7, $r8, $r9;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3 r0;
        java.util.Map $r2;
        com.mycila.inject.internal.asm.Label r10;
        java.lang.Object r3, $r4;
        java.lang.String $r6;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3;

        r3 := @parameter0: java.lang.Object;

        r10 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map access$000(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer)>($r1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (com.mycila.inject.internal.asm.Type) $r4;

        $r7 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r6 = (java.lang.String) r3;

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r6);

        $r8 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void box(com.mycila.inject.internal.asm.Type)>(r5);

        $r9 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        return;
    }

    public void processDefault()
    {
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3 r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type access$100()>();

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void throw_exception(com.mycila.inject.internal.asm.Type,java.lang.String)>($r2, "Unknown field name");

        return;
    }
}
