public class org.mortbay.util.Scanner extends java.lang.Object
{
    private int _scanInterval;
    private java.util.List _listeners;
    private java.util.Map _prevScan;
    private java.util.Map _currentScan;
    private java.io.FilenameFilter _filter;
    private java.util.List _scanDirs;
    private volatile boolean _running;
    private boolean _reportExisting;
    private java.util.Timer _timer;
    private java.util.TimerTask _task;
    private boolean _recursive;

    public void <init>()
    {
        org.mortbay.util.Scanner r0;
        java.util.List $r2;
        java.util.HashMap $r3, $r4;
        java.util.ArrayList $r1;

        r0 := @this: org.mortbay.util.Scanner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<org.mortbay.util.Scanner: java.util.List _listeners> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.util.Scanner: java.util.Map _prevScan> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.util.Scanner: java.util.Map _currentScan> = $r4;

        r0.<org.mortbay.util.Scanner: boolean _running> = 0;

        r0.<org.mortbay.util.Scanner: boolean _reportExisting> = 1;

        r0.<org.mortbay.util.Scanner: boolean _recursive> = 1;

        return;
    }

    public int getScanInterval()
    {
        org.mortbay.util.Scanner r0;
        int $i0;

        r0 := @this: org.mortbay.util.Scanner;

        $i0 = r0.<org.mortbay.util.Scanner: int _scanInterval>;

        return $i0;
    }

    public synchronized void setScanInterval(int)
    {
        org.mortbay.util.Scanner r0;
        int i0;

        r0 := @this: org.mortbay.util.Scanner;

        i0 := @parameter0: int;

        r0.<org.mortbay.util.Scanner: int _scanInterval> = i0;

        virtualinvoke r0.<org.mortbay.util.Scanner: void schedule()>();

        return;
    }

    public void setScanDir(java.io.File)
    {
        org.mortbay.util.Scanner r0;
        java.util.List $r3;
        java.io.File r2;
        java.util.ArrayList $r1;

        r0 := @this: org.mortbay.util.Scanner;

        r2 := @parameter0: java.io.File;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.mortbay.util.Scanner: java.util.List _scanDirs> = $r1;

        $r3 = r0.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public java.io.File getScanDir()
    {
        org.mortbay.util.Scanner r0;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        java.io.File $r4;

        r0 := @this: org.mortbay.util.Scanner;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.io.File) $r3;

     label2:
        return $r4;
    }

    public void setScanDirs(java.util.List)
    {
        org.mortbay.util.Scanner r0;
        java.util.List r1;

        r0 := @this: org.mortbay.util.Scanner;

        r1 := @parameter0: java.util.List;

        r0.<org.mortbay.util.Scanner: java.util.List _scanDirs> = r1;

        return;
    }

    public java.util.List getScanDirs()
    {
        org.mortbay.util.Scanner r0;
        java.util.List $r1;

        r0 := @this: org.mortbay.util.Scanner;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        return $r1;
    }

    public void setRecursive(boolean)
    {
        org.mortbay.util.Scanner r0;
        boolean z0;

        r0 := @this: org.mortbay.util.Scanner;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.util.Scanner: boolean _recursive> = z0;

        return;
    }

    public boolean getRecursive()
    {
        org.mortbay.util.Scanner r0;
        boolean $z0;

        r0 := @this: org.mortbay.util.Scanner;

        $z0 = r0.<org.mortbay.util.Scanner: boolean _recursive>;

        return $z0;
    }

    public void setFilenameFilter(java.io.FilenameFilter)
    {
        org.mortbay.util.Scanner r0;
        java.io.FilenameFilter r1;

        r0 := @this: org.mortbay.util.Scanner;

        r1 := @parameter0: java.io.FilenameFilter;

        r0.<org.mortbay.util.Scanner: java.io.FilenameFilter _filter> = r1;

        return;
    }

    public java.io.FilenameFilter getFilenameFilter()
    {
        org.mortbay.util.Scanner r0;
        java.io.FilenameFilter $r1;

        r0 := @this: org.mortbay.util.Scanner;

        $r1 = r0.<org.mortbay.util.Scanner: java.io.FilenameFilter _filter>;

        return $r1;
    }

    public void setReportExistingFilesOnStartup(boolean)
    {
        org.mortbay.util.Scanner r0;
        boolean z0;

        r0 := @this: org.mortbay.util.Scanner;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.util.Scanner: boolean _reportExisting> = z0;

        return;
    }

    public synchronized void addListener(org.mortbay.util.Scanner$Listener)
    {
        org.mortbay.util.Scanner$Listener r0;
        org.mortbay.util.Scanner r1;
        java.util.List $r2;

        r1 := @this: org.mortbay.util.Scanner;

        r0 := @parameter0: org.mortbay.util.Scanner$Listener;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.mortbay.util.Scanner: java.util.List _listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public synchronized void removeListener(org.mortbay.util.Scanner$Listener)
    {
        org.mortbay.util.Scanner$Listener r0;
        org.mortbay.util.Scanner r1;
        java.util.List $r2;

        r1 := @this: org.mortbay.util.Scanner;

        r0 := @parameter0: org.mortbay.util.Scanner$Listener;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.mortbay.util.Scanner: java.util.List _listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r0);

        return;
    }

    public synchronized void start()
    {
        org.mortbay.util.Scanner r0;
        java.util.Map $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.Scanner;

        $z0 = r0.<org.mortbay.util.Scanner: boolean _running>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.mortbay.util.Scanner: boolean _running> = 1;

        $z1 = r0.<org.mortbay.util.Scanner: boolean _reportExisting>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.mortbay.util.Scanner: void scan()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.mortbay.util.Scanner: void scanFiles()>();

        $r2 = r0.<org.mortbay.util.Scanner: java.util.Map _prevScan>;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.Map _currentScan>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r1);

     label3:
        virtualinvoke r0.<org.mortbay.util.Scanner: void schedule()>();

        return;
    }

    public java.util.TimerTask newTimerTask()
    {
        org.mortbay.util.Scanner r1;
        org.mortbay.util.Scanner$1 $r0;

        r1 := @this: org.mortbay.util.Scanner;

        $r0 = new org.mortbay.util.Scanner$1;

        specialinvoke $r0.<org.mortbay.util.Scanner$1: void <init>(org.mortbay.util.Scanner)>(r1);

        return $r0;
    }

    public java.util.Timer newTimer()
    {
        org.mortbay.util.Scanner r1;
        java.util.Timer $r0;

        r1 := @this: org.mortbay.util.Scanner;

        $r0 = new java.util.Timer;

        specialinvoke $r0.<java.util.Timer: void <init>(boolean)>(1);

        return $r0;
    }

    public void schedule()
    {
        java.util.Timer $r1, $r3, $r5, $r8;
        long $l2, $l3, $l5, $l6;
        int $i0, $i1, $i4;
        java.util.TimerTask $r2, $r4, $r6, $r7;
        boolean $z0;
        org.mortbay.util.Scanner r0;

        r0 := @this: org.mortbay.util.Scanner;

        $z0 = r0.<org.mortbay.util.Scanner: boolean _running>;

        if $z0 == 0 goto label3;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.Timer _timer>;

        if $r1 == null goto label1;

        $r8 = r0.<org.mortbay.util.Scanner: java.util.Timer _timer>;

        virtualinvoke $r8.<java.util.Timer: void cancel()>();

     label1:
        $r2 = r0.<org.mortbay.util.Scanner: java.util.TimerTask _task>;

        if $r2 == null goto label2;

        $r7 = r0.<org.mortbay.util.Scanner: java.util.TimerTask _task>;

        virtualinvoke $r7.<java.util.TimerTask: boolean cancel()>();

     label2:
        $i0 = virtualinvoke r0.<org.mortbay.util.Scanner: int getScanInterval()>();

        if $i0 <= 0 goto label3;

        $r3 = virtualinvoke r0.<org.mortbay.util.Scanner: java.util.Timer newTimer()>();

        r0.<org.mortbay.util.Scanner: java.util.Timer _timer> = $r3;

        $r4 = virtualinvoke r0.<org.mortbay.util.Scanner: java.util.TimerTask newTimerTask()>();

        r0.<org.mortbay.util.Scanner: java.util.TimerTask _task> = $r4;

        $r5 = r0.<org.mortbay.util.Scanner: java.util.Timer _timer>;

        $r6 = r0.<org.mortbay.util.Scanner: java.util.TimerTask _task>;

        $i1 = virtualinvoke r0.<org.mortbay.util.Scanner: int getScanInterval()>();

        $l2 = (long) $i1;

        $l3 = 1000L * $l2;

        $i4 = virtualinvoke r0.<org.mortbay.util.Scanner: int getScanInterval()>();

        $l5 = (long) $i4;

        $l6 = 1000L * $l5;

        virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r6, $l3, $l6);

     label3:
        return;
    }

    public synchronized void stop()
    {
        org.mortbay.util.Scanner r0;
        java.util.Timer $r1, $r4;
        java.util.TimerTask $r2, $r3;
        boolean $z0;

        r0 := @this: org.mortbay.util.Scanner;

        $z0 = r0.<org.mortbay.util.Scanner: boolean _running>;

        if $z0 == 0 goto label3;

        r0.<org.mortbay.util.Scanner: boolean _running> = 0;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.Timer _timer>;

        if $r1 == null goto label1;

        $r4 = r0.<org.mortbay.util.Scanner: java.util.Timer _timer>;

        virtualinvoke $r4.<java.util.Timer: void cancel()>();

     label1:
        $r2 = r0.<org.mortbay.util.Scanner: java.util.TimerTask _task>;

        if $r2 == null goto label2;

        $r3 = r0.<org.mortbay.util.Scanner: java.util.TimerTask _task>;

        virtualinvoke $r3.<java.util.TimerTask: boolean cancel()>();

     label2:
        r0.<org.mortbay.util.Scanner: java.util.TimerTask _task> = null;

        r0.<org.mortbay.util.Scanner: java.util.Timer _timer> = null;

     label3:
        return;
    }

    public void scan()
    {
        org.mortbay.util.Scanner r0;
        java.util.Map $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.mortbay.util.Scanner;

        virtualinvoke r0.<org.mortbay.util.Scanner: void scanFiles()>();

        $r2 = r0.<org.mortbay.util.Scanner: java.util.Map _currentScan>;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.Map _prevScan>;

        virtualinvoke r0.<org.mortbay.util.Scanner: void reportDifferences(java.util.Map,java.util.Map)>($r2, $r1);

        $r3 = r0.<org.mortbay.util.Scanner: java.util.Map _prevScan>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r5 = r0.<org.mortbay.util.Scanner: java.util.Map _prevScan>;

        $r4 = r0.<org.mortbay.util.Scanner: java.util.Map _currentScan>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r4);

        return;
    }

    public void scanFiles()
    {
        java.util.Iterator $r4;
        java.io.File r6;
        org.mortbay.util.Scanner r0;
        java.util.List $r1, $r3;
        java.util.Map $r2, $r7;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.Scanner;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.mortbay.util.Scanner: java.util.Map _currentScan>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.io.File) $r5;

        if r6 == null goto label3;

        $z1 = virtualinvoke r6.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<org.mortbay.util.Scanner: java.util.Map _currentScan>;

        specialinvoke r0.<org.mortbay.util.Scanner: void scanFile(java.io.File,java.util.Map)>(r6, $r7);

     label3:
        goto label2;

     label4:
        return;
    }

    public void reportDifferences(java.util.Map, java.util.Map)
    {
        java.util.Map r2, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r3, $r5;
        java.util.ArrayList $r0;
        java.util.HashSet $r1;
        java.lang.StringBuffer $r11, $r12, $r13, $r21, $r22, $r24, $r30, $r31, $r33;
        java.lang.String r10, $r14, $r25, $r27, $r34, $r36;
        java.util.Map$Entry r38;
        java.util.Iterator $r6, $r8;
        org.mortbay.util.Scanner r7;
        java.lang.Object $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r26, $r28, $r29, $r32, $r35, $r37;

        r7 := @this: org.mortbay.util.Scanner;

        r4 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.HashSet;

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $r5 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r15 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z4 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z4 != 0 goto label2;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File added: ");

        $r32 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r34);

        $r35 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r36 = (java.lang.String) $r35;

        specialinvoke r7.<org.mortbay.util.Scanner: void reportAddition(java.lang.String)>($r36);

        $r37 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r37);

        goto label4;

     label2:
        $r17 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r19 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z5 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        if $z5 != 0 goto label3;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File changed: ");

        $r23 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r25);

        $r26 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r27 = (java.lang.String) $r26;

        specialinvoke r7.<org.mortbay.util.Scanner: void reportChange(java.lang.String)>($r27);

        $r28 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>($r28);

        $r29 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label4;

     label3:
        $r20 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>($r20);

     label4:
        goto label1;

     label5:
        $z1 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label7;

        $r8 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File removed: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r14);

        specialinvoke r7.<org.mortbay.util.Scanner: void reportRemoval(java.lang.String)>(r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label6;

     label7:
        $z2 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label8;

        specialinvoke r7.<org.mortbay.util.Scanner: void reportBulkChanges(java.util.List)>($r0);

     label8:
        return;
    }

    private void scanFile(java.io.File, java.util.Map)
    {
        java.io.FilenameFilter $r6, $r9, $r10;
        long $l0;
        java.lang.Long $r8;
        java.util.Map r3;
        int i1, $i2;
        java.lang.String $r7, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r13;
        java.io.File r0, $r4, $r11;
        org.mortbay.util.Scanner r1;
        java.util.List $r5;
        java.io.File[] $r2;

        r1 := @this: org.mortbay.util.Scanner;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: java.util.Map;

     label01:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label03;

     label02:
        return;

     label03:
        $z1 = virtualinvoke r0.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label05;

        $r6 = r1.<org.mortbay.util.Scanner: java.io.FilenameFilter _filter>;

        if $r6 == null goto label04;

        $r9 = r1.<org.mortbay.util.Scanner: java.io.FilenameFilter _filter>;

        if $r9 == null goto label08;

        $r10 = r1.<org.mortbay.util.Scanner: java.io.FilenameFilter _filter>;

        $r11 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $r12 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z5 = interfaceinvoke $r10.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>($r11, $r12);

        if $z5 == 0 goto label08;

     label04:
        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $l0 = virtualinvoke r0.<java.io.File: long lastModified()>();

        $r8 = new java.lang.Long;

        specialinvoke $r8.<java.lang.Long: void <init>(long)>($l0);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label08;

     label05:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label08;

        $z3 = r1.<org.mortbay.util.Scanner: boolean _recursive>;

        if $z3 != 0 goto label06;

        $r5 = r1.<org.mortbay.util.Scanner: java.util.List _scanDirs>;

        $z4 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z4 == 0 goto label08;

     label06:
        $r2 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i1 = 0;

     label07:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label08;

        $r4 = $r2[i1];

        specialinvoke r1.<org.mortbay.util.Scanner: void scanFile(java.io.File,java.util.Map)>($r4, r3);

        i1 = i1 + 1;

        goto label07;

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Throwable)>("Error scanning watched files", $r13);

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label08 with label09;
    }

    private void warn(java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.mortbay.util.Scanner r8;
        java.lang.StringBuffer $r1, $r3, $r4, $r6;
        java.lang.Object r2;
        java.lang.String r5, $r7;

        r8 := @this: org.mortbay.util.Scanner;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Throwable;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>(r0);

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" failed on \'");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r7);

        return;
    }

    private void reportAddition(java.lang.String)
    {
        org.mortbay.util.Scanner$DiscreteListener $r5;
        java.util.Iterator $r2;
        java.lang.Error $r6;
        java.lang.Exception $r7;
        org.mortbay.util.Scanner r0;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.Scanner;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z1 = $r3 instanceof org.mortbay.util.Scanner$DiscreteListener;

        if $z1 == 0 goto label3;

        $r5 = (org.mortbay.util.Scanner$DiscreteListener) $r3;

        interfaceinvoke $r5.<org.mortbay.util.Scanner$DiscreteListener: void fileAdded(java.lang.String)>(r4);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, r4, $r7);

        goto label6;

     label5:
        $r6 := @caughtexception;

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, r4, $r6);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Error from label2 to label3 with label5;
    }

    private void reportRemoval(java.lang.String)
    {
        org.mortbay.util.Scanner$DiscreteListener $r5;
        java.util.Iterator $r2;
        java.lang.Error $r6;
        java.lang.Exception $r7;
        org.mortbay.util.Scanner r0;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.Scanner;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z1 = $r3 instanceof org.mortbay.util.Scanner$DiscreteListener;

        if $z1 == 0 goto label3;

        $r5 = (org.mortbay.util.Scanner$DiscreteListener) $r3;

        interfaceinvoke $r5.<org.mortbay.util.Scanner$DiscreteListener: void fileRemoved(java.lang.String)>(r4);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, r4, $r7);

        goto label6;

     label5:
        $r6 := @caughtexception;

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, r4, $r6);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Error from label2 to label3 with label5;
    }

    private void reportChange(java.lang.String)
    {
        org.mortbay.util.Scanner$DiscreteListener $r5;
        java.util.Iterator $r2;
        java.lang.Error $r6;
        java.lang.Exception $r7;
        org.mortbay.util.Scanner r0;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.Scanner;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z1 = $r3 instanceof org.mortbay.util.Scanner$DiscreteListener;

        if $z1 == 0 goto label3;

        $r5 = (org.mortbay.util.Scanner$DiscreteListener) $r3;

        interfaceinvoke $r5.<org.mortbay.util.Scanner$DiscreteListener: void fileChanged(java.lang.String)>(r4);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, r4, $r7);

        goto label6;

     label5:
        $r6 := @caughtexception;

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, r4, $r6);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Error from label2 to label3 with label5;
    }

    private void reportBulkChanges(java.util.List)
    {
        java.util.Iterator $r2;
        java.lang.Error $r6;
        java.lang.Exception $r8;
        org.mortbay.util.Scanner r0;
        java.util.List $r1, r4;
        org.mortbay.util.Scanner$BulkListener $r5;
        java.lang.Object $r3;
        java.lang.String $r7, $r9;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.Scanner;

        r4 := @parameter0: java.util.List;

        $r1 = r0.<org.mortbay.util.Scanner: java.util.List _listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z1 = $r3 instanceof org.mortbay.util.Scanner$BulkListener;

        if $z1 == 0 goto label3;

        $r5 = (org.mortbay.util.Scanner$BulkListener) $r3;

        interfaceinvoke $r5.<org.mortbay.util.Scanner$BulkListener: void filesChanged(java.util.List)>(r4);

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, $r9, $r8);

        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<org.mortbay.util.Scanner: void warn(java.lang.Object,java.lang.String,java.lang.Throwable)>($r3, $r7, $r6);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Error from label2 to label3 with label5;
    }
}
