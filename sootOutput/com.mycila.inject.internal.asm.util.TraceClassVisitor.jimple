public class com.mycila.inject.internal.asm.util.TraceClassVisitor extends com.mycila.inject.internal.asm.util.TraceAbstractVisitor implements com.mycila.inject.internal.asm.ClassVisitor
{
    protected final com.mycila.inject.internal.asm.ClassVisitor cv;
    protected final java.io.PrintWriter pw;

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        byte b5, b6, b7, b8, b9, b10;
        boolean $z0, $z1, z2, z3, z4, z5;
        java.io.PrintWriter $r21;
        java.lang.String[] r0;
        com.mycila.inject.internal.asm.util.TraceClassVisitor $r22;
        com.mycila.inject.internal.asm.ClassReader r17, $r19, $r20;
        com.mycila.inject.internal.asm.Attribute[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i12, $i14;
        java.lang.String $r1, $r6, $r7, $r9, $r12, $r13, $r16;
        java.io.PrintStream $r4, $r10, $r11;
        java.io.FileInputStream $r18;

        r0 := @parameter0: java.lang.String[];

        z2 = 0;

        b10 = 0;

        b9 = 0;

        b8 = 0;

        b7 = 0;

        b6 = 0;

        b5 = 2;

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $i0 = lengthof r0;

        if $i0 < 1 goto label1;

        $i4 = lengthof r0;

        if $i4 <= 2 goto label2;

     label1:
        z3 = 0;

        z5 = 0;

        z4 = 0;

     label2:
        if z4 == 0 goto label3;

        $r13 = "-debug";

        $r12 = r0[0];

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label3;

        z2 = 1;

        b10 = 1;

        b9 = 1;

        b8 = 1;

        b7 = 1;

        b6 = 1;

        b5 = 0;

        $i3 = lengthof r0;

        if $i3 == 2 goto label3;

        z3 = 0;

        z5 = 0;

     label3:
        if z5 != 0 goto label4;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Prints a disassembled view of the given class.");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Usage: TraceClassVisitor [-debug] <fully qualified class name or class file name>");

        return;

     label4:
        $r1 = r0[b7];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 != 0 goto label5;

        $r6 = r0[b8];

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(92);

        $i12 = (int) -1;

        if $i1 > $i12 goto label5;

        $r7 = r0[b6];

        $i2 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(47);

        $i14 = (int) -1;

        if $i2 <= $i14 goto label6;

     label5:
        $r19 = new com.mycila.inject.internal.asm.ClassReader;

        $r18 = new java.io.FileInputStream;

        $r16 = r0[b9];

        specialinvoke $r18.<java.io.FileInputStream: void <init>(java.lang.String)>($r16);

        specialinvoke $r19.<com.mycila.inject.internal.asm.ClassReader: void <init>(java.io.InputStream)>($r18);

        r17 = $r19;

        goto label7;

     label6:
        $r20 = new com.mycila.inject.internal.asm.ClassReader;

        $r9 = r0[b10];

        specialinvoke $r20.<com.mycila.inject.internal.asm.ClassReader: void <init>(java.lang.String)>($r9);

        r17 = $r20;

     label7:
        $r22 = new com.mycila.inject.internal.asm.util.TraceClassVisitor;

        $r21 = new java.io.PrintWriter;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r21.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r4);

        specialinvoke $r22.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void <init>(java.io.PrintWriter)>($r21);

        $r5 = staticinvoke <com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.Attribute[] getDefaultAttributes()>();

        virtualinvoke r17.<com.mycila.inject.internal.asm.ClassReader: void accept(com.mycila.inject.internal.asm.ClassVisitor,com.mycila.inject.internal.asm.Attribute[],int)>($r22, $r5, b5);

        return;
    }

    public void <init>(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void <init>(com.mycila.inject.internal.asm.ClassVisitor,java.io.PrintWriter)>(null, r1);

        return;
    }

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor, java.io.PrintWriter)
    {
        java.io.PrintWriter r2;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r2 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv> = r1;

        r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.io.PrintWriter pw> = r2;

        return;
    }

    public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.mycila.inject.internal.asm.signature.SignatureReader $r42;
        boolean $z0;
        java.util.List $r37;
        java.lang.String[] r17;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r19, $r21, $r23, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r34, $r35, $r36, $r38;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i13, $i15;
        java.lang.String $r11, $r12, r14, r15, r16, $r20, $r22, $r33, $r39;
        com.mycila.inject.internal.asm.ClassVisitor $r18, $r40;
        com.mycila.inject.internal.asm.util.TraceSignatureVisitor $r41;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r15 := @parameter2: java.lang.String;

        r14 := @parameter3: java.lang.String;

        r16 := @parameter4: java.lang.String;

        r17 := @parameter5: java.lang.String[];

        $i13 = (int) 65535;

        i1 = i0 & $i13;

        i2 = i0 >>> 16;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// class version ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")\n");

        $i4 = i3 & 131072;

        if $i4 == 0 goto label1;

        $r35 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// DEPRECATED\n");

     label1:
        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// access flags 0x");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String toUpperCase()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(5, r14);

        if r14 == null goto label2;

        $r41 = new com.mycila.inject.internal.asm.util.TraceSignatureVisitor;

        specialinvoke $r41.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: void <init>(int)>(i3);

        $r42 = new com.mycila.inject.internal.asm.signature.SignatureReader;

        specialinvoke $r42.<com.mycila.inject.internal.asm.signature.SignatureReader: void <init>(java.lang.String)>(r14);

        virtualinvoke $r42.<com.mycila.inject.internal.asm.signature.SignatureReader: void accept(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r41);

        $r30 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// declaration: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r33 = virtualinvoke $r41.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: java.lang.String getDeclaration()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label2:
        $i15 = (int) -33;

        $i5 = i3 & $i15;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendAccess(int)>($i5);

        $i6 = i3 & 8192;

        if $i6 == 0 goto label3;

        $r27 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@interface ");

        goto label5;

     label3:
        $i7 = i3 & 512;

        if $i7 == 0 goto label4;

        $r26 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("interface ");

        goto label5;

     label4:
        $i8 = i3 & 16384;

        if $i8 != 0 goto label5;

        $r25 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

     label5:
        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, r15);

        if r16 == null goto label6;

        $r22 = "java/lang/Object";

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r16);

        if $z0 != 0 goto label6;

        $r23 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, r16);

        $r24 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label6:
        if r17 == null goto label8;

        $i9 = lengthof r17;

        if $i9 <= 0 goto label8;

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" implements ");

        i11 = 0;

     label7:
        $i10 = lengthof r17;

        if i11 >= $i10 goto label8;

        $r20 = r17[i11];

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, $r20);

        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i11 = i11 + 1;

        goto label7;

     label8:
        $r36 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {\n\n");

        $r37 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r38 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r39);

        $r40 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r40 == null goto label9;

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r18.<com.mycila.inject.internal.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, i3, r15, r14, r16, r17);

     label9:
        return;
    }

    public void visitSource(java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r4, $r7, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19;
        int $i0;
        java.lang.String r2, r3, $r9, $r10, $r15;
        com.mycila.inject.internal.asm.ClassVisitor $r5, $r6;
        java.util.List $r8;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        if r2 == null goto label1;

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// compiled from: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label1:
        if r3 == null goto label2;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// debug info: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label2:
        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $i0 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label3;

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r5 == null goto label4;

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r6.<com.mycila.inject.internal.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r2, r3);

     label4:
        return;
    }

    public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r9, $r10, $r15, $r16;
        java.lang.String $r2, r5, r7, r8, $r12;
        com.mycila.inject.internal.asm.ClassVisitor $r13, $r14;
        java.util.List $r11;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r5 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("OUTERCLASS ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        if r7 == null goto label1;

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(3, r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r13 == null goto label2;

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r5, r7, r8);

     label2:
        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.util.List $r1;
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r6;
        com.mycila.inject.internal.asm.AnnotationVisitor $r3, $r7;
        java.lang.String r2;
        com.mycila.inject.internal.asm.ClassVisitor $r4, $r5;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("\n");

        $r3 = specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r2, z0);

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r4 == null goto label1;

        $r6 = (com.mycila.inject.internal.asm.util.TraceAnnotationVisitor) $r3;

        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        $r7 = interfaceinvoke $r5.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r2, z0);

        $r6.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: com.mycila.inject.internal.asm.AnnotationVisitor av> = $r7;

     label1:
        return $r3;
    }

    public void visitAttribute(com.mycila.inject.internal.asm.Attribute)
    {
        java.util.List $r1;
        com.mycila.inject.internal.asm.Attribute r2;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        com.mycila.inject.internal.asm.ClassVisitor $r3, $r4;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r2 := @parameter0: com.mycila.inject.internal.asm.Attribute;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("\n");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>(r2);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r3 == null goto label1;

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.ClassVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>(r2);

     label1:
        return;
    }

    public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)
    {
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r8, $r10, $r11, $r13, $r15, $r17, $r18;
        int i0, $i1, $i3;
        java.lang.String $r2, $r6, $r7, $r9, r12, r14, r16, $r20;
        com.mycila.inject.internal.asm.ClassVisitor $r21, $r22;
        java.util.List $r19;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        r12 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r16 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// access flags 0x");

        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $i3 = (int) -33;

        $i1 = i0 & $i3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendAccess(int)>(i0);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("INNERCLASS ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, r14);

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, r16);

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r21 == null goto label1;

        $r22 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r22.<com.mycila.inject.internal.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>(r12, r14, r16, i0);

     label1:
        return;
    }

    public com.mycila.inject.internal.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        com.mycila.inject.internal.asm.FieldVisitor $r19;
        com.mycila.inject.internal.asm.signature.SignatureReader $r28;
        com.mycila.inject.internal.asm.util.TraceFieldVisitor $r42;
        boolean $z0;
        java.util.List $r39, $r43, $r44;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r6, $r9, $r12, $r14, $r15, $r20, $r21, $r22, $r23, $r24, $r26, $r30, $r31, $r32, $r34, $r36, $r37, $r38, $r40;
        int i0, $i1;
        java.lang.String $r3, $r7, $r8, r10, $r11, r13, r16, $r25, $r29, $r33, $r35, $r41;
        com.mycila.inject.internal.asm.ClassVisitor $r18, $r45;
        com.mycila.inject.internal.asm.util.TraceSignatureVisitor $r27;
        java.lang.Object r17;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        i0 := @parameter0: int;

        r16 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        r17 := @parameter4: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i1 = i0 & 131072;

        if $i1 == 0 goto label1;

        $r36 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r35 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// DEPRECATED\n");

     label1:
        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// access flags 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toUpperCase()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        if r10 == null goto label2;

        $r26 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r25 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(2, r10);

        $r27 = new com.mycila.inject.internal.asm.util.TraceSignatureVisitor;

        specialinvoke $r27.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: void <init>(int)>(0);

        $r28 = new com.mycila.inject.internal.asm.signature.SignatureReader;

        specialinvoke $r28.<com.mycila.inject.internal.asm.signature.SignatureReader: void <init>(java.lang.String)>(r10);

        virtualinvoke $r28.<com.mycila.inject.internal.asm.signature.SignatureReader: void acceptType(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r27);

        $r30 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r29 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// declaration: ");

        $r33 = virtualinvoke $r27.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: java.lang.String getDeclaration()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label2:
        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendAccess(int)>(i0);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(1, r13);

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);

        if r17 == null goto label4;

        $r20 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $z0 = r17 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        $r22 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r17);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        goto label4;

     label3:
        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r17);

     label4:
        $r38 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r39 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r40 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>($r41);

        $r42 = virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.util.TraceFieldVisitor createTraceFieldVisitor()>();

        $r43 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r44 = virtualinvoke $r42.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: java.util.List getText()>();

        interfaceinvoke $r43.<java.util.List: boolean add(java.lang.Object)>($r44);

        $r45 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r45 == null goto label5;

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        $r19 = interfaceinvoke $r18.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(i0, r16, r13, r10, r17);

        $r42.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv> = $r19;

     label5:
        return $r42;
    }

    public com.mycila.inject.internal.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.mycila.inject.internal.asm.MethodVisitor $r16;
        com.mycila.inject.internal.asm.signature.SignatureReader $r26;
        java.util.List $r46, $r50, $r51;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor $r49;
        java.lang.String[] r14;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r6, $r9, $r12, $r17, $r19, $r20, $r21, $r22, $r24, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r45, $r47;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r3, $r7, $r8, r10, r11, r13, $r18, $r23, $r27, $r28, $r29, $r30, $r40, $r44, $r48;
        com.mycila.inject.internal.asm.ClassVisitor $r15, $r52;
        com.mycila.inject.internal.asm.util.TraceSignatureVisitor $r25;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        i0 := @parameter0: int;

        r11 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        r14 := @parameter4: java.lang.String[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i1 = i0 & 131072;

        if $i1 == 0 goto label1;

        $r41 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r40 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// DEPRECATED\n");

     label1:
        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// access flags 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toUpperCase()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        if r10 == null goto label3;

        $r24 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r23 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(4, r10);

        $r25 = new com.mycila.inject.internal.asm.util.TraceSignatureVisitor;

        specialinvoke $r25.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: void <init>(int)>(0);

        $r26 = new com.mycila.inject.internal.asm.signature.SignatureReader;

        specialinvoke $r26.<com.mycila.inject.internal.asm.signature.SignatureReader: void <init>(java.lang.String)>(r10);

        virtualinvoke $r26.<com.mycila.inject.internal.asm.signature.SignatureReader: void accept(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r25);

        $r27 = virtualinvoke $r25.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: java.lang.String getDeclaration()>();

        $r28 = virtualinvoke $r25.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: java.lang.String getReturnType()>();

        $r29 = virtualinvoke $r25.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: java.lang.String getExceptions()>();

        $r31 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r30 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// declaration: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        if $r29 == null goto label2;

        $r38 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" throws ");

        virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

     label2:
        $r37 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label3:
        $r43 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r44 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.String tab>;

        virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendAccess(int)>(i0);

        $i6 = i0 & 256;

        if $i6 == 0 goto label4;

        $r22 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("native ");

     label4:
        $i2 = i0 & 128;

        if $i2 == 0 goto label5;

        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("varargs ");

     label5:
        $i3 = i0 & 64;

        if $i3 == 0 goto label6;

        $r20 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("bridge ");

     label6:
        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(3, r13);

        if r14 == null goto label8;

        $i4 = lengthof r14;

        if $i4 <= 0 goto label8;

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" throws ");

        i7 = 0;

     label7:
        $i5 = lengthof r14;

        if i7 >= $i5 goto label8;

        $r18 = r14[i7];

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void appendDescriptor(int,java.lang.String)>(0, $r18);

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i7 = i7 + 1;

        goto label7;

     label8:
        $r45 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r46 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r47 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r46.<java.util.List: boolean add(java.lang.Object)>($r48);

        $r49 = virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.util.TraceMethodVisitor createTraceMethodVisitor()>();

        $r50 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        $r51 = virtualinvoke $r49.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List getText()>();

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r51);

        $r52 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r52 == null goto label9;

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        $r16 = interfaceinvoke $r15.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r11, r13, r10, r14);

        $r49.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv> = $r16;

     label9:
        return $r49;
    }

    public void visitEnd()
    {
        java.io.PrintWriter $r2, $r3;
        java.util.List $r1;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        com.mycila.inject.internal.asm.ClassVisitor $r4, $r5;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.util.List text>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("}\n");

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.io.PrintWriter pw>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void print(java.io.PrintWriter)>($r2);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.io.PrintWriter pw>;

        virtualinvoke $r3.<java.io.PrintWriter: void flush()>();

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        if $r4 == null goto label1;

        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r5.<com.mycila.inject.internal.asm.ClassVisitor: void visitEnd()>();

     label1:
        return;
    }

    protected com.mycila.inject.internal.asm.util.TraceFieldVisitor createTraceFieldVisitor()
    {
        com.mycila.inject.internal.asm.util.TraceClassVisitor r1;
        com.mycila.inject.internal.asm.util.TraceFieldVisitor $r0;

        r1 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        $r0 = new com.mycila.inject.internal.asm.util.TraceFieldVisitor;

        specialinvoke $r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: void <init>()>();

        return $r0;
    }

    protected com.mycila.inject.internal.asm.util.TraceMethodVisitor createTraceMethodVisitor()
    {
        com.mycila.inject.internal.asm.util.TraceMethodVisitor $r0;
        com.mycila.inject.internal.asm.util.TraceClassVisitor r1;

        r1 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        $r0 = new com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        specialinvoke $r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void <init>()>();

        return $r0;
    }

    private void appendAccess(int)
    {
        com.mycila.inject.internal.asm.util.TraceClassVisitor r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceClassVisitor;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label01;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

     label01:
        $i2 = i0 & 2;

        if $i2 == 0 goto label02;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("private ");

     label02:
        $i3 = i0 & 4;

        if $i3 == 0 goto label03;

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("protected ");

     label03:
        $i4 = i0 & 16;

        if $i4 == 0 goto label04;

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("final ");

     label04:
        $i5 = i0 & 8;

        if $i5 == 0 goto label05;

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("static ");

     label05:
        $i6 = i0 & 32;

        if $i6 == 0 goto label06;

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synchronized ");

     label06:
        $i7 = i0 & 64;

        if $i7 == 0 goto label07;

        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("volatile ");

     label07:
        $i8 = i0 & 128;

        if $i8 == 0 goto label08;

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("transient ");

     label08:
        $i9 = i0 & 1024;

        if $i9 == 0 goto label09;

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("abstract ");

     label09:
        $i10 = i0 & 2048;

        if $i10 == 0 goto label10;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("strictfp ");

     label10:
        $i11 = i0 & 16384;

        if $i11 == 0 goto label11;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceClassVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("enum ");

     label11:
        return;
    }
}
