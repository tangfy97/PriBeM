final class com.mycila.inject.internal.guava.collect.BstInOrderPath extends com.mycila.inject.internal.guava.collect.BstPath
{
    private final com.mycila.inject.internal.guava.collect.BstSide sideExtension;
    private transient com.mycila.inject.internal.guava.base.Optional prevInOrder;
    private transient com.mycila.inject.internal.guava.base.Optional nextInOrder;
    static final boolean $assertionsDisabled;

    public static com.mycila.inject.internal.guava.collect.BstPathFactory inOrderFactory()
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath$1 $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.BstInOrderPath$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath$1: void <init>()>();

        return $r0;
    }

    private static com.mycila.inject.internal.guava.collect.BstInOrderPath extension(com.mycila.inject.internal.guava.collect.BstInOrderPath, com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstSide r3;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0, $r2;
        com.mycila.inject.internal.guava.collect.BstNode $r1, $r4;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $r2 = new com.mycila.inject.internal.guava.collect.BstInOrderPath;

        $r4 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode getChild(com.mycila.inject.internal.guava.collect.BstSide)>(r3);

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: void <init>(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstInOrderPath)>($r4, r3, r0);

        return $r2;
    }

    private void <init>(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstInOrderPath)
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0, r2;
        java.lang.AssertionError $r4;
        com.mycila.inject.internal.guava.collect.BstNode r1;
        com.mycila.inject.internal.guava.collect.BstSide r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.BstPath: void <init>(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstPath)>(r1, r2);

        r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstSide sideExtension> = r3;

        $z0 = <com.mycila.inject.internal.guava.collect.BstInOrderPath: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        if r3 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if r2 != null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z1 == $z2 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        return;
    }

    private com.mycila.inject.internal.guava.base.Optional computeNextInOrder(com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0, r10, r11, r12;
        com.mycila.inject.internal.guava.collect.BstPath $r4, $r6;
        com.mycila.inject.internal.guava.collect.BstNode $r1, $r8;
        com.mycila.inject.internal.guava.collect.BstSide r2, $r3, $r7;
        com.mycila.inject.internal.guava.base.Optional $r5, $r9;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>(r2);

        if $z0 == 0 goto label3;

        r10 = staticinvoke <com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstInOrderPath extension(com.mycila.inject.internal.guava.collect.BstInOrderPath,com.mycila.inject.internal.guava.collect.BstSide)>(r0, r2);

        $r7 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide other()>();

     label1:
        $r8 = virtualinvoke r10.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $z1 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>($r7);

        if $z1 == 0 goto label2;

        r10 = staticinvoke <com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstInOrderPath extension(com.mycila.inject.internal.guava.collect.BstInOrderPath,com.mycila.inject.internal.guava.collect.BstSide)>(r10, $r7);

        goto label1;

     label2:
        $r9 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional of(java.lang.Object)>(r10);

        return $r9;

     label3:
        r11 = r0;

     label4:
        $r3 = r11.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstSide sideExtension>;

        if $r3 != r2 goto label5;

        $r6 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstPath getPrefix()>();

        r11 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r6;

        goto label4;

     label5:
        $r4 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstPath prefixOrNull()>();

        r12 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Optional: com.mycila.inject.internal.guava.base.Optional fromNullable(java.lang.Object)>(r12);

        return $r5;
    }

    private com.mycila.inject.internal.guava.base.Optional nextInOrder(com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath r2;
        java.lang.AssertionError $r3;
        int[] $r1;
        com.mycila.inject.internal.guava.collect.BstSide r0;
        int $i0, $i1;
        com.mycila.inject.internal.guava.base.Optional r4, $r5, r6, $r7;

        r2 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $r1 = <com.mycila.inject.internal.guava.collect.BstInOrderPath$2: int[] $SwitchMap$com$google$common$collect$BstSide>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstSide: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label7;
        };

     label1:
        r4 = r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional prevInOrder>;

        if r4 != null goto label2;

        $r5 = specialinvoke r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional computeNextInOrder(com.mycila.inject.internal.guava.collect.BstSide)>(r0);

        r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional prevInOrder> = $r5;

        goto label3;

     label2:
        $r5 = r4;

     label3:
        return $r5;

     label4:
        r6 = r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional nextInOrder>;

        if r6 != null goto label5;

        $r7 = specialinvoke r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional computeNextInOrder(com.mycila.inject.internal.guava.collect.BstSide)>(r0);

        r2.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional nextInOrder> = $r7;

        goto label6;

     label5:
        $r7 = r6;

     label6:
        return $r7;

     label7:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;
    }

    public boolean hasNext(com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstSide r1;
        com.mycila.inject.internal.guava.base.Optional $r2;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional nextInOrder(com.mycila.inject.internal.guava.collect.BstSide)>(r1);

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.base.Optional: boolean isPresent()>();

        return $z0;
    }

    public com.mycila.inject.internal.guava.collect.BstInOrderPath next(com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstSide r1;
        com.mycila.inject.internal.guava.base.Optional $r2;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0, $r4;
        java.util.NoSuchElementException $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: boolean hasNext(com.mycila.inject.internal.guava.collect.BstSide)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.base.Optional nextInOrder(com.mycila.inject.internal.guava.collect.BstSide)>(r1);

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.base.Optional: java.lang.Object get()>();

        $r4 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r3;

        return $r4;
    }

    public com.mycila.inject.internal.guava.collect.BstSide getSideOfExtension()
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0;
        com.mycila.inject.internal.guava.collect.BstSide $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstSide sideExtension>;

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.BstInOrderPath access$000(com.mycila.inject.internal.guava.collect.BstInOrderPath, com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0, $r2;
        com.mycila.inject.internal.guava.collect.BstSide r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstInOrderPath extension(com.mycila.inject.internal.guava.collect.BstInOrderPath,com.mycila.inject.internal.guava.collect.BstSide)>(r0, r1);

        return $r2;
    }

    void <init>(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstInOrderPath, com.mycila.inject.internal.guava.collect.BstInOrderPath$1)
    {
        com.mycila.inject.internal.guava.collect.BstInOrderPath$1 r4;
        com.mycila.inject.internal.guava.collect.BstSide r2;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r0, r3;
        com.mycila.inject.internal.guava.collect.BstNode r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r4 := @parameter3: com.mycila.inject.internal.guava.collect.BstInOrderPath$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.BstInOrderPath: void <init>(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstInOrderPath)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/mycila/inject/internal/guava/collect/BstInOrderPath;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.mycila.inject.internal.guava.collect.BstInOrderPath: boolean $assertionsDisabled> = $z1;

        return;
    }
}
