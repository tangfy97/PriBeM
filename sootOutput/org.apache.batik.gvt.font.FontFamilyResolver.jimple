public class org.apache.batik.gvt.font.FontFamilyResolver extends java.lang.Object
{
    public static final org.apache.batik.gvt.font.AWTFontFamily defaultFont;
    protected static final java.util.Map fonts;
    protected static final java.util.List awtFontFamilies;
    protected static final java.util.List awtFonts;
    protected static final java.util.Map resolvedFontFamilies;

    public void <init>()
    {
        org.apache.batik.gvt.font.FontFamilyResolver r0;

        r0 := @this: org.apache.batik.gvt.font.FontFamilyResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String lookup(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r3;
        java.lang.String r0, $r2, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public static org.apache.batik.gvt.font.GVTFontFamily resolve(java.lang.String)
    {
        org.apache.batik.gvt.font.GVTFontFamily r9;
        org.apache.batik.gvt.font.AWTFontFamily $r7;
        java.util.Map $r1, $r3, $r6;
        java.lang.Object $r2, $r4;
        java.lang.String $r0, r5, r8;

        r8 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r8.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map resolvedFontFamilies>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r9 = (org.apache.batik.gvt.font.GVTFontFamily) $r2;

        if r9 != null goto label2;

        $r3 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label1;

        $r7 = new org.apache.batik.gvt.font.AWTFontFamily;

        specialinvoke $r7.<org.apache.batik.gvt.font.AWTFontFamily: void <init>(java.lang.String)>(r5);

        r9 = $r7;

     label1:
        $r6 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map resolvedFontFamilies>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r9);

     label2:
        return r9;
    }

    public static org.apache.batik.gvt.font.GVTFontFamily resolve(org.apache.batik.gvt.font.UnresolvedFontFamily)
    {
        org.apache.batik.gvt.font.UnresolvedFontFamily r0;
        java.lang.String $r1;
        org.apache.batik.gvt.font.GVTFontFamily $r2;

        r0 := @parameter0: org.apache.batik.gvt.font.UnresolvedFontFamily;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.UnresolvedFontFamily: java.lang.String getFamilyName()>();

        $r2 = staticinvoke <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.GVTFontFamily resolve(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.batik.gvt.font.GVTFontFamily getFamilyThatCanDisplay(char)
    {
        char c0;
        org.apache.batik.gvt.font.AWTFontFamily r2;
        java.util.List $r0, $r3, $r7;
        int $i1, i2, $i3, $i5;
        org.apache.batik.gvt.font.AWTGVTFont r5;
        java.lang.Object $r1, $r4;
        java.lang.String $r6;
        boolean $z0;

        c0 := @parameter0: char;

        i2 = 0;

        goto label3;

     label1:
        $r0 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFontFamilies>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (org.apache.batik.gvt.font.AWTFontFamily) $r1;

        $r3 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFonts>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        r5 = (org.apache.batik.gvt.font.AWTGVTFont) $r4;

        $z0 = virtualinvoke r5.<org.apache.batik.gvt.font.AWTGVTFont: boolean canDisplay(char)>(c0);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r2.<org.apache.batik.gvt.font.AWTFontFamily: java.lang.String getFamilyName()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>("Song");

        $i5 = (int) -1;

        if $i1 != $i5 goto label2;

        return r2;

     label2:
        i2 = i2 + 1;

     label3:
        $r7 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFontFamilies>;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i2 < $i3 goto label1;

        return null;
    }

    static void <clinit>()
    {
        java.awt.GraphicsEnvironment $r13;
        java.util.Map $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r25, $r31, $r40;
        boolean $z0, $z1, $z2;
        java.util.Collection $r41;
        java.util.List $r35, $r38, $r45, $r47;
        java.util.HashMap $r1, $r48;
        java.lang.String[] $r14;
        java.util.ArrayList $r2, $r3;
        java.util.StringTokenizer $r19;
        java.lang.StringBuffer $r21, $r22, $r24;
        int i0, $i1, i2;
        org.apache.batik.gvt.font.AWTGVTFont $r36, $r46;
        java.lang.String $r15, $r17, $r18, $r20, $r23, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r39, r49, r50;
        java.util.Iterator $r42;
        org.apache.batik.gvt.font.AWTFontFamily $r0, $r34, $r37, $r44;
        java.lang.Object $r43;

        $r0 = new org.apache.batik.gvt.font.AWTFontFamily;

        specialinvoke $r0.<org.apache.batik.gvt.font.AWTFontFamily: void <init>(java.lang.String)>("SansSerif");

        <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.AWTFontFamily defaultFont> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFontFamilies> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFonts> = $r3;

        $r4 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sans-serif", "SansSerif");

        $r5 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("serif", "Serif");

        $r6 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("times", "Serif");

        $r7 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("times new roman", "Serif");

        $r8 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cursive", "Dialog");

        $r9 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("fantasy", "Symbol");

        $r10 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("monospace", "Monospaced");

        $r11 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("monospaced", "Monospaced");

        $r12 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("courier", "Monospaced");

        $r13 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r14 = virtualinvoke $r13.<java.awt.GraphicsEnvironment: java.lang.String[] getAvailableFontFamilyNames()>();

        if $r14 == null goto label1;

        $i1 = lengthof $r14;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        i0 = $i1;

        i2 = 0;

        goto label7;

     label3:
        $r16 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        $r15 = $r14[i2];

        $r17 = virtualinvoke $r15.<java.lang.String: java.lang.String toLowerCase()>();

        $r18 = $r14[i2];

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = new java.util.StringTokenizer;

        $r20 = $r14[i2];

        specialinvoke $r19.<java.util.StringTokenizer: void <init>(java.lang.String)>($r20);

        r49 = "";

        goto label5;

     label4:
        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r49);

        $r23 = virtualinvoke $r19.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        r49 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        $z0 = virtualinvoke $r19.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label4;

        $r25 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        $r26 = virtualinvoke r49.<java.lang.String: java.lang.String toLowerCase()>();

        $r27 = $r14[i2];

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r28 = $r14[i2];

        $r29 = virtualinvoke $r28.<java.lang.String: java.lang.String replace(char,char)>(32, 45);

        $r30 = $r14[i2];

        $z1 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z1 != 0 goto label6;

        $r31 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        $r32 = virtualinvoke $r29.<java.lang.String: java.lang.String toLowerCase()>();

        $r33 = $r14[i2];

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r33);

     label6:
        i2 = i2 + 1;

     label7:
        if i2 < i0 goto label3;

        $r35 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFontFamilies>;

        $r34 = <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.AWTFontFamily defaultFont>;

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r34);

        $r38 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFonts>;

        $r36 = new org.apache.batik.gvt.font.AWTGVTFont;

        $r37 = <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.AWTFontFamily defaultFont>;

        $r39 = virtualinvoke $r37.<org.apache.batik.gvt.font.AWTFontFamily: java.lang.String getFamilyName()>();

        specialinvoke $r36.<org.apache.batik.gvt.font.AWTGVTFont: void <init>(java.lang.String,int,int)>($r39, 0, 12);

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>($r36);

        $r40 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map fonts>;

        $r41 = interfaceinvoke $r40.<java.util.Map: java.util.Collection values()>();

        $r42 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();

        goto label9;

     label8:
        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.lang.String) $r43;

        $r44 = new org.apache.batik.gvt.font.AWTFontFamily;

        specialinvoke $r44.<org.apache.batik.gvt.font.AWTFontFamily: void <init>(java.lang.String)>(r50);

        $r45 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFontFamilies>;

        interfaceinvoke $r45.<java.util.List: boolean add(java.lang.Object)>($r44);

        $r46 = new org.apache.batik.gvt.font.AWTGVTFont;

        specialinvoke $r46.<org.apache.batik.gvt.font.AWTGVTFont: void <init>(java.lang.String,int,int)>(r50, 0, 12);

        $r47 = <org.apache.batik.gvt.font.FontFamilyResolver: java.util.List awtFonts>;

        interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>($r46);

     label9:
        $z2 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label8;

        $r48 = new java.util.HashMap;

        specialinvoke $r48.<java.util.HashMap: void <init>()>();

        <org.apache.batik.gvt.font.FontFamilyResolver: java.util.Map resolvedFontFamilies> = $r48;

        return;
    }
}
