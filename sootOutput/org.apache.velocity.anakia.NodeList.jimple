public class org.apache.velocity.anakia.NodeList extends java.lang.Object implements java.util.List, java.lang.Cloneable
{
    private static final org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER;
    private java.util.List nodes;

    public void <init>()
    {
        org.apache.velocity.anakia.NodeList r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes> = $r1;

        return;
    }

    public void <init>(org.jdom.Document)
    {
        org.jdom.Document r1;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: org.jdom.Document;

        specialinvoke r0.<org.apache.velocity.anakia.NodeList: void <init>(java.lang.Object)>(r1);

        return;
    }

    public void <init>(org.jdom.Element)
    {
        org.apache.velocity.anakia.NodeList r0;
        org.jdom.Element r1;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: org.jdom.Element;

        specialinvoke r0.<org.apache.velocity.anakia.NodeList: void <init>(java.lang.Object)>(r1);

        return;
    }

    private void <init>(java.lang.Object)
    {
        java.util.List $r3;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r4;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot construct NodeList with null.");

        throw $r4;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(1);

        r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes> = $r2;

        $r3 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List r1;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.velocity.anakia.NodeList: void <init>(java.util.List,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.util.List, boolean)
    {
        java.util.List r1, $r3;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.IllegalArgumentException $r4;
        boolean z0;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot initialize NodeList with null list");

        throw $r4;

     label1:
        if z0 == 0 goto label2;

        $r5 = new java.util.ArrayList;

        $r3 = $r5;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        goto label3;

     label2:
        $r3 = r1;

     label3:
        r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes> = $r3;

        return;
    }

    public java.util.List getList()
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.jdom.Document $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.jdom.Text $r30;
        org.jdom.Attribute $r32;
        java.util.List $r1, $r3, $r4;
        org.jdom.Comment $r24;
        java.lang.Error $r37;
        org.jdom.CDATA $r22;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r15, $r16;
        int $i0, $i1;
        org.jdom.DocType $r20;
        java.lang.String $r6, $r14, $r17, $r38;
        org.jdom.ProcessingInstruction $r26;
        java.util.Iterator $r5;
        java.io.StringWriter $r2;
        org.apache.velocity.anakia.NodeList$AttributeXMLOutputter $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35;
        org.jdom.EntityRef $r18;
        java.io.IOException $r36;
        java.lang.IllegalArgumentException $r8;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.Object $r7;
        java.lang.Class $r13;
        org.jdom.Element $r34;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return "";

     label01:
        $r2 = new java.io.StringWriter;

        $r3 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 * 128;

        specialinvoke $r2.<java.io.StringWriter: void <init>(int)>($i1);

     label02:
        $r4 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r7 instanceof org.jdom.Element;

        if $z2 == 0 goto label04;

        $r35 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r34 = (org.jdom.Element) $r7;

        virtualinvoke $r35.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.Element,java.io.Writer)>($r34, $r2);

        goto label15;

     label04:
        $z3 = $r7 instanceof org.jdom.Attribute;

        if $z3 == 0 goto label05;

        $r33 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r32 = (org.jdom.Attribute) $r7;

        virtualinvoke $r33.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.Attribute,java.io.Writer)>($r32, $r2);

        goto label15;

     label05:
        $z4 = $r7 instanceof org.jdom.Text;

        if $z4 == 0 goto label06;

        $r31 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r30 = (org.jdom.Text) $r7;

        virtualinvoke $r31.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.Text,java.io.Writer)>($r30, $r2);

        goto label15;

     label06:
        $z5 = $r7 instanceof org.jdom.Document;

        if $z5 == 0 goto label07;

        $r29 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r28 = (org.jdom.Document) $r7;

        virtualinvoke $r29.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.Document,java.io.Writer)>($r28, $r2);

        goto label15;

     label07:
        $z6 = $r7 instanceof org.jdom.ProcessingInstruction;

        if $z6 == 0 goto label08;

        $r27 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r26 = (org.jdom.ProcessingInstruction) $r7;

        virtualinvoke $r27.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.ProcessingInstruction,java.io.Writer)>($r26, $r2);

        goto label15;

     label08:
        $z7 = $r7 instanceof org.jdom.Comment;

        if $z7 == 0 goto label09;

        $r25 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r24 = (org.jdom.Comment) $r7;

        virtualinvoke $r25.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.Comment,java.io.Writer)>($r24, $r2);

        goto label15;

     label09:
        $z8 = $r7 instanceof org.jdom.CDATA;

        if $z8 == 0 goto label10;

        $r23 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r22 = (org.jdom.CDATA) $r7;

        virtualinvoke $r23.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.CDATA,java.io.Writer)>($r22, $r2);

        goto label15;

     label10:
        $z9 = $r7 instanceof org.jdom.DocType;

        if $z9 == 0 goto label11;

        $r21 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r20 = (org.jdom.DocType) $r7;

        virtualinvoke $r21.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.DocType,java.io.Writer)>($r20, $r2);

        goto label15;

     label11:
        $z10 = $r7 instanceof org.jdom.EntityRef;

        if $z10 == 0 goto label12;

        $r19 = <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER>;

        $r18 = (org.jdom.EntityRef) $r7;

        virtualinvoke $r19.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void output(org.jdom.EntityRef,java.io.Writer)>($r18, $r2);

        goto label15;

     label12:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot process a ");

        if $r7 != null goto label13;

        $r38 = "null node";

        goto label14;

     label13:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("node of class ");

        $r13 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r38 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

     label14:
        $r16 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r8;

     label15:
        goto label03;

     label16:
        goto label18;

     label17:
        $r36 := @caughtexception;

        $r37 = new java.lang.Error;

        specialinvoke $r37.<java.lang.Error: void <init>()>();

        throw $r37;

     label18:
        $r6 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r6;

        catch java.io.IOException from label02 to label16 with label17;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r1;
        org.apache.velocity.anakia.NodeList r0, r2;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.velocity.anakia.NodeList) $r1;

        specialinvoke r2.<org.apache.velocity.anakia.NodeList: void cloneNodes()>();

        return r2;
    }

    private void cloneNodes() throws java.lang.CloneNotSupportedException
    {
        java.lang.IllegalAccessException $r7;
        java.lang.Error $r6;
        java.lang.CloneNotSupportedException $r8;
        java.util.List $r1, $r4, r14;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.StringBuffer $r9, $r10, $r12;
        java.lang.InstantiationException $r5;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.String $r11, $r13;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        r14 = (java.util.List) $r3;

        $r4 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        interfaceinvoke r14.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes> = r14;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.CloneNotSupportedException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot clone NodeList since there is no accessible no-arg constructor on class ");

        $r11 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>()>();

        throw $r6;

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
    }

    public int hashCode()
    {
        int $i0;
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r3, $r4;
        org.apache.velocity.anakia.NodeList $r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.velocity.anakia.NodeList;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.velocity.anakia.NodeList;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.velocity.anakia.NodeList) r0;

        $r4 = $r1.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r3 = r2.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.velocity.anakia.NodeList selectNodes(java.lang.String)
    {
        java.util.List $r4, $r5;
        com.werken.xpath.XPath $r2;
        org.apache.velocity.anakia.NodeList $r0, r3;
        java.lang.String r1;

        r3 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.velocity.anakia.NodeList;

        $r2 = staticinvoke <org.apache.velocity.anakia.XPathCache: com.werken.xpath.XPath getXPath(java.lang.String)>(r1);

        $r4 = r3.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r5 = virtualinvoke $r2.<com.werken.xpath.XPath: java.util.List applyTo(java.util.List)>($r4);

        specialinvoke $r0.<org.apache.velocity.anakia.NodeList: void <init>(java.util.List,boolean)>($r5, 0);

        return $r0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public void add(int, java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.util.Collection r1;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean addAll(int,java.util.Collection)>(i0, r1);

        return $z0;
    }

    public void clear()
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.lang.Object get(int)
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        return $r2;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;
        java.util.Iterator $r2;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;
        java.util.ListIterator $r2;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;
        java.util.ListIterator $r2;
        int i0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>(i0);

        return $r2;
    }

    public java.lang.Object remove(int)
    {
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.List $r2;
        org.apache.velocity.anakia.NodeList r0;
        int i0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return $r3;
    }

    public int size()
    {
        int $i0;
        java.util.List $r1;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List subList(int, int)
    {
        java.util.List $r2, $r3;
        org.apache.velocity.anakia.NodeList $r0, r1;
        int i0, i1;

        r1 := @this: org.apache.velocity.anakia.NodeList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.apache.velocity.anakia.NodeList;

        $r2 = r1.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(i0, i1);

        specialinvoke $r0.<org.apache.velocity.anakia.NodeList: void <init>(java.util.List)>($r3);

        return $r0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.List $r1;
        java.lang.Object[] $r2;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        $r1 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.List $r2;
        java.lang.Object[] r1, $r3;
        org.apache.velocity.anakia.NodeList r0;

        r0 := @this: org.apache.velocity.anakia.NodeList;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.apache.velocity.anakia.NodeList: java.util.List nodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        org.apache.velocity.anakia.NodeList$AttributeXMLOutputter $r0;

        $r0 = new org.apache.velocity.anakia.NodeList$AttributeXMLOutputter;

        specialinvoke $r0.<org.apache.velocity.anakia.NodeList$AttributeXMLOutputter: void <init>(org.apache.velocity.anakia.NodeList$1)>(null);

        <org.apache.velocity.anakia.NodeList: org.apache.velocity.anakia.NodeList$AttributeXMLOutputter DEFAULT_OUTPUTTER> = $r0;

        return;
    }
}
