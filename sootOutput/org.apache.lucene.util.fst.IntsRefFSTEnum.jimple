public final class org.apache.lucene.util.fst.IntsRefFSTEnum extends org.apache.lucene.util.fst.FSTEnum
{
    private final org.apache.lucene.util.IntsRef current;
    private final org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput result;
    private org.apache.lucene.util.IntsRef target;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.fst.FST)
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r3, $r5;
        org.apache.lucene.util.fst.FST r1;
        org.apache.lucene.util.IntsRef $r2, $r4, $r6;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        r1 := @parameter0: org.apache.lucene.util.fst.FST;

        specialinvoke r0.<org.apache.lucene.util.fst.FSTEnum: void <init>(org.apache.lucene.util.fst.FST)>(r1);

        $r2 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r2.<org.apache.lucene.util.IntsRef: void <init>(int)>(10);

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current> = $r2;

        $r3 = new org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput;

        specialinvoke $r3.<org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput: void <init>()>();

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput result> = $r3;

        $r5 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput result>;

        $r4 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $r5.<org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput: org.apache.lucene.util.IntsRef input> = $r4;

        $r6 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $r6.<org.apache.lucene.util.IntsRef: int offset> = 1;

        return;
    }

    public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput current()
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        $r1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput result>;

        return $r1;
    }

    public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput next() throws java.io.IOException
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        virtualinvoke r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: void doNext()>();

        $r1 = specialinvoke r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput setResult()>();

        return $r1;
    }

    public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput seekCeil(org.apache.lucene.util.IntsRef) throws java.io.IOException
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r2;
        int $i0;
        org.apache.lucene.util.IntsRef r1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef target> = r1;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int targetLength> = $i0;

        specialinvoke r0.<org.apache.lucene.util.fst.FSTEnum: void doSeekCeil()>();

        $r2 = specialinvoke r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput setResult()>();

        return $r2;
    }

    public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput seekFloor(org.apache.lucene.util.IntsRef) throws java.io.IOException
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r2;
        int $i0;
        org.apache.lucene.util.IntsRef r1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef target> = r1;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int targetLength> = $i0;

        specialinvoke r0.<org.apache.lucene.util.fst.FSTEnum: void doSeekFloor()>();

        $r2 = specialinvoke r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput setResult()>();

        return $r2;
    }

    public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput seekExact(org.apache.lucene.util.IntsRef) throws java.io.IOException
    {
        java.lang.AssertionError $r3;
        org.apache.lucene.util.IntsRef r1;
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef target> = r1;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int targetLength> = $i0;

        $z0 = specialinvoke r0.<org.apache.lucene.util.fst.FSTEnum: boolean doSeekExact()>();

        if $z0 == 0 goto label2;

        $z1 = <org.apache.lucene.util.fst.IntsRefFSTEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $i3 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $i1 = r1.<org.apache.lucene.util.IntsRef: int length>;

        $i2 = 1 + $i1;

        if $i3 == $i2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r2 = specialinvoke r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput setResult()>();

        return $r2;

     label2:
        return null;
    }

    protected int getTargetLabel()
    {
        org.apache.lucene.util.IntsRef $r1, $r2, $r3;
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        $i0 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $i2 = $i0 - 1;

        $r1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef target>;

        $i1 = $r1.<org.apache.lucene.util.IntsRef: int length>;

        if $i2 != $i1 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $r2 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef target>;

        $r4 = $r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r3 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef target>;

        $i4 = $r3.<org.apache.lucene.util.IntsRef: int offset>;

        $i3 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $i5 = $i4 + $i3;

        $i6 = $i5 - 1;

        $i7 = $r4[$i6];

        return $i7;
    }

    protected int getCurrentLabel()
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        int[] $r2;
        int $i0, $i1;
        org.apache.lucene.util.IntsRef $r1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        $r1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $r2 = $r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i0 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $i1 = $r2[$i0];

        return $i1;
    }

    protected void setCurrentLabel(int)
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        int[] $r2;
        int i0, $i1;
        org.apache.lucene.util.IntsRef $r1;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $r2 = $r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $r2[$i1] = i0;

        return;
    }

    protected void grow()
    {
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        int[] $r2, $r4;
        int $i0, $i1;
        org.apache.lucene.util.IntsRef $r1, $r3;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        $r3 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $r1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $r2 = $r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i0 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r2, $i1);

        $r3.<org.apache.lucene.util.IntsRef: int[] ints> = $r4;

        return;
    }

    private org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput setResult()
    {
        java.lang.Object[] $r2;
        org.apache.lucene.util.IntsRef $r1;
        org.apache.lucene.util.fst.IntsRefFSTEnum r0;
        org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput $r4, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.util.fst.IntsRefFSTEnum;

        $i0 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.IntsRef current>;

        $i1 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $i2 = $i1 - 1;

        $r1.<org.apache.lucene.util.IntsRef: int length> = $i2;

        $r4 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput result>;

        $r2 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: java.lang.Object[] output>;

        $i3 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: int upto>;

        $r3 = $r2[$i3];

        $r4.<org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput: java.lang.Object output> = $r3;

        $r5 = r0.<org.apache.lucene.util.fst.IntsRefFSTEnum: org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput result>;

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/IntsRefFSTEnum;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.IntsRefFSTEnum: boolean $assertionsDisabled> = $z1;

        return;
    }
}
