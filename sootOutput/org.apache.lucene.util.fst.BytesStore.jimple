class org.apache.lucene.util.fst.BytesStore extends org.apache.lucene.store.DataOutput
{
    private final java.util.List blocks;
    private final int blockSize;
    private final int blockBits;
    private final int blockMask;
    private byte[] current;
    private int nextWrite;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        org.apache.lucene.util.fst.BytesStore r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks> = $r1;

        r0.<org.apache.lucene.util.fst.BytesStore: int blockBits> = i0;

        $i1 = 1 << i0;

        r0.<org.apache.lucene.util.fst.BytesStore: int blockSize> = $i1;

        $i2 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $i3 = $i2 - 1;

        r0.<org.apache.lucene.util.fst.BytesStore: int blockMask> = $i3;

        $i4 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i4;

        return;
    }

    public void <init>(org.apache.lucene.store.DataInput, long, int) throws java.io.IOException
    {
        byte[] $r5, r6;
        org.apache.lucene.store.DataInput r7;
        org.apache.lucene.util.fst.BytesStore r0;
        long l0, $l1, $l7, $l8, $l11, l15;
        java.util.ArrayList $r9;
        byte $b2, $b16;
        int $i3, $i4, $i5, $i6, i9, $i10, i12, i13, i14, $i17, $i18;
        java.util.List $r2, $r3, $r8;
        java.lang.Object $r4;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        r7 := @parameter0: org.apache.lucene.store.DataInput;

        l0 := @parameter1: long;

        i12 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks> = $r9;

        i13 = 2;

        i14 = 1;

     label1:
        $l1 = (long) i13;

        $b2 = $l1 cmp l0;

        $i17 = (int) $b2;

        if $i17 >= 0 goto label2;

        if i13 >= i12 goto label2;

        i13 = i13 * 2;

        i14 = i14 + 1;

        goto label1;

     label2:
        r0.<org.apache.lucene.util.fst.BytesStore: int blockBits> = i14;

        r0.<org.apache.lucene.util.fst.BytesStore: int blockSize> = i13;

        $i3 = i13 - 1;

        r0.<org.apache.lucene.util.fst.BytesStore: int blockMask> = $i3;

        l15 = l0;

     label3:
        $b16 = l15 cmp 0L;

        $i18 = (int) $b16;

        if $i18 <= 0 goto label4;

        $l7 = (long) i13;

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l7, l15);

        i9 = (int) $l8;

        r6 = newarray (byte)[i9];

        $i10 = lengthof r6;

        virtualinvoke r7.<org.apache.lucene.store.DataInput: void readBytes(byte[],int,int)>(r6, 0, $i10);

        $r8 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r6);

        $l11 = (long) i9;

        l15 = l15 - $l11;

        goto label3;

     label4:
        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i4 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i5);

        $r5 = (byte[]) $r4;

        $i6 = lengthof $r5;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i6;

        return;
    }

    public void writeByte(int, byte)
    {
        byte[] r3;
        org.apache.lucene.util.fst.BytesStore r0;
        java.util.List $r1;
        byte b4;
        int i0, $i1, i2, $i3, $i5;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        i0 := @parameter0: int;

        b4 := @parameter1: byte;

        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        i2 = i0 >> $i1;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (byte[]) $r2;

        $i3 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $i5 = i0 & $i3;

        r3[$i5] = b4;

        return;
    }

    public void writeByte(byte)
    {
        byte[] $r1, $r2, $r3;
        org.apache.lucene.util.fst.BytesStore r0;
        java.util.List $r4;
        byte b4;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        b4 := @parameter0: byte;

        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        if $i1 != $i0 goto label1;

        $i5 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $r2 = newarray (byte)[$i5];

        r0.<org.apache.lucene.util.fst.BytesStore: byte[] current> = $r2;

        $r4 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = 0;

     label1:
        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        $i2 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i3;

        $r1[$i2] = b4;

        return;
    }

    public void writeBytes(byte[], int, int)
    {
        byte[] $r1, $r2, r4, $r5, $r6;
        org.apache.lucene.util.fst.BytesStore r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.util.List $r3;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        r4 := @parameter0: byte[];

        i8 := @parameter1: int;

        i9 := @parameter2: int;

     label1:
        if i9 <= 0 goto label4;

        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        i2 = $i1 - $i0;

        if i9 > i2 goto label2;

        $r6 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        $i5 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i8, $r6, $i5, i9);

        $i6 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        $i7 = $i6 + i9;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i7;

        goto label4;

     label2:
        if i2 <= 0 goto label3;

        $r5 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        $i4 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i8, $r5, $i4, i2);

        i8 = i8 + i2;

        i9 = i9 - i2;

     label3:
        $i3 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $r1 = newarray (byte)[$i3];

        r0.<org.apache.lucene.util.fst.BytesStore: byte[] current> = $r1;

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = 0;

        goto label1;

     label4:
        return;
    }

    int getBlockBits()
    {
        int $i0;
        org.apache.lucene.util.fst.BytesStore r0;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        return $i0;
    }

    void writeBytes(long, byte[], int, int)
    {
        byte[] r3, r15;
        org.apache.lucene.util.fst.BytesStore r0;
        byte $b13;
        boolean $z0;
        java.util.List $r1, $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r16;
        long l0, $l1, $l3, $l5, $l6, $l10, $l11, $l12, $l14, $l17;
        java.lang.AssertionError $r17;
        int $i2, $i4, i7, $i8, $i9, $i15, $i16, i18, i19, i20, $i21, $i23, $i25;
        java.lang.String $r14;
        java.lang.Object $r2, $r5;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        l0 := @parameter0: long;

        r3 := @parameter1: byte[];

        i7 := @parameter2: int;

        i18 := @parameter3: int;

        $z0 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l10 = (long) i18;

        $l11 = l0 + $l10;

        $l12 = virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $b13 = $l11 cmp $l12;

        $i21 = (int) $b13;

        if $i21 <= 0 goto label1;

        $r17 = new java.lang.AssertionError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dest=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pos=");

        $l17 = virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r17;

     label1:
        $l1 = (long) i18;

        $l14 = l0 + $l1;

        $i2 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        $l3 = $l14 >> $i2;

        $i15 = (int) $l3;

        i19 = $i15;

        $i4 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $l5 = (long) $i4;

        $l6 = $l14 & $l5;

        $i16 = (int) $l6;

        i20 = $i16;

        if $i16 != 0 goto label2;

        $i23 = (int) -1;

        i19 = $i15 + $i23;

        i20 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

     label2:
        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i19);

        r15 = (byte[]) $r2;

     label3:
        if i18 <= 0 goto label5;

        if i18 > i20 goto label4;

        $i9 = i20 - i18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i7, r15, $i9, i18);

        goto label5;

     label4:
        i18 = i18 - i20;

        $i8 = i7 + i18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i8, r15, 0, i20);

        $i25 = (int) -1;

        i19 = i19 + $i25;

        $r4 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i19);

        r15 = (byte[]) $r5;

        i20 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        goto label3;

     label5:
        return;
    }

    public void copyBytes(long, long, int)
    {
        byte[] r6;
        org.apache.lucene.util.fst.BytesStore r0;
        long l0, $l1, $l3, $l5, $l6, l7, $l8, $l9, $l12;
        java.lang.AssertionError $r7;
        byte $b11;
        int $i2, $i4, $i10, $i13, $i14, i15, i16, i17, $i18, $i20, $i22;
        boolean $z0;
        java.util.List $r1, $r3;
        java.lang.Object $r2, $r4;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        l0 := @parameter0: long;

        l7 := @parameter1: long;

        i15 := @parameter2: int;

        $z0 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b11 = l0 cmp l7;

        $i18 = (int) $b11;

        if $i18 < 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $l1 = (long) i15;

        $l12 = l0 + $l1;

        $i2 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        $l3 = $l12 >> $i2;

        $i13 = (int) $l3;

        i16 = $i13;

        $i4 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $l5 = (long) $i4;

        $l6 = $l12 & $l5;

        $i14 = (int) $l6;

        i17 = $i14;

        if $i14 != 0 goto label2;

        $i20 = (int) -1;

        i16 = $i13 + $i20;

        i17 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

     label2:
        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i16);

        r6 = (byte[]) $r2;

     label3:
        if i15 <= 0 goto label5;

        if i15 > i17 goto label4;

        $i10 = i17 - i15;

        virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: void writeBytes(long,byte[],int,int)>(l7, r6, $i10, i15);

        goto label5;

     label4:
        i15 = i15 - i17;

        $l8 = (long) i15;

        $l9 = l7 + $l8;

        virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: void writeBytes(long,byte[],int,int)>($l9, r6, 0, i17);

        $i22 = (int) -1;

        i16 = i16 + $i22;

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i16);

        r6 = (byte[]) $r4;

        i17 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        goto label3;

     label5:
        return;
    }

    public void writeInt(long, int)
    {
        byte[] r5;
        org.apache.lucene.util.fst.BytesStore r0;
        long l0, $l2, $l4, $l5;
        byte $b9;
        int $i1, $i3, $i6, i7, $i8, $i10, i11, i12, i13, i14, $i16;
        java.util.List $r1, $r3;
        java.lang.Object $r2, $r4;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        l0 := @parameter0: long;

        i7 := @parameter1: int;

        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        $l2 = l0 >> $i1;

        i11 = (int) $l2;

        $i3 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        i12 = (int) $l5;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i11);

        r5 = (byte[]) $r2;

        i13 = 24;

        i14 = 0;

     label1:
        if i14 >= 4 goto label3;

        $i6 = i12;

        i12 = i12 + 1;

        $i8 = i7 >> i13;

        $b9 = (byte) $i8;

        r5[$i6] = $b9;

        $i16 = (int) -8;

        i13 = i13 + $i16;

        $i10 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        if i12 != $i10 goto label2;

        i12 = 0;

        i11 = i11 + 1;

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i11);

        r5 = (byte[]) $r4;

     label2:
        i14 = i14 + 1;

        goto label1;

     label3:
        return;
    }

    public void reverse(long, long)
    {
        byte[] r11, r12;
        org.apache.lucene.util.fst.BytesStore r0;
        byte b15, $b16, $b20, $b24;
        boolean $z0, $z1;
        java.util.List $r1, $r3, $r5, $r7;
        long l0, $l2, $l4, $l5, l6, $l8, $l10, $l11, $l12, $l13, $l19;
        java.lang.AssertionError $r13, $r14;
        int $i1, $i3, $i7, $i9, $i14, $i17, $i18, $i21, $i22, $i23, i25, i26, i27, i28, i29, $i30, $i31, $i33, $i35, $i37;
        java.lang.Object $r2, $r4, $r6, $r8;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        l0 := @parameter0: long;

        l6 := @parameter1: long;

        $z0 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b24 = l0 cmp l6;

        $i30 = (int) $b24;

        if $i30 < 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $z1 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $l19 = virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $b20 = l6 cmp $l19;

        $i31 = (int) $b20;

        if $i31 < 0 goto label2;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label2:
        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        $l2 = l0 >> $i1;

        $i21 = (int) $l2;

        i25 = $i21;

        $i3 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        i26 = (int) $l5;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i21);

        r11 = (byte[]) $r2;

        $i7 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        $l8 = l6 >> $i7;

        $i22 = (int) $l8;

        i27 = $i22;

        $i9 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $l10 = (long) $i9;

        $l11 = l6 & $l10;

        i28 = (int) $l11;

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i22);

        r12 = (byte[]) $r4;

        $l12 = l6 - l0;

        $l13 = $l12 + 1L;

        $i14 = (int) $l13;

        $i23 = $i14 / 2;

        i29 = 0;

     label3:
        if i29 >= $i23 goto label6;

        b15 = r11[i26];

        $b16 = r12[i28];

        r11[i26] = $b16;

        r12[i28] = b15;

        i26 = i26 + 1;

        $i17 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        if i26 != $i17 goto label4;

        i25 = i25 + 1;

        $r7 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i25);

        r11 = (byte[]) $r8;

        i26 = 0;

     label4:
        $i33 = (int) -1;

        i28 = i28 + $i33;

        $i35 = (int) -1;

        if i28 != $i35 goto label5;

        $i37 = (int) -1;

        i27 = i27 + $i37;

        $r5 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i27);

        r12 = (byte[]) $r6;

        $i18 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        i28 = $i18 - 1;

     label5:
        i29 = i29 + 1;

        goto label3;

     label6:
        return;
    }

    public void skipBytes(int)
    {
        byte[] $r1, $r2;
        org.apache.lucene.util.fst.BytesStore r0;
        java.util.List $r3;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        i6 := @parameter0: int;

     label1:
        if i6 <= 0 goto label3;

        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        i2 = $i1 - $i0;

        if i6 > i2 goto label2;

        $i4 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        $i5 = $i4 + i6;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i5;

        goto label3;

     label2:
        i6 = i6 - i2;

        $i3 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $r1 = newarray (byte)[$i3];

        r0.<org.apache.lucene.util.fst.BytesStore: byte[] current> = $r1;

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = 0;

        goto label1;

     label3:
        return;
    }

    public long getPosition()
    {
        org.apache.lucene.util.fst.BytesStore r0;
        long $l1, $l3, $l4, $l6, $l7, $l8;
        java.util.List $r1;
        int $i0, $i2, $i5;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $l4 = $l1 - 1L;

        $i2 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        $l3 = (long) $i2;

        $l7 = $l4 * $l3;

        $i5 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        $l6 = (long) $i5;

        $l8 = $l7 + $l6;

        return $l8;
    }

    public void truncate(long)
    {
        byte[] $r6;
        org.apache.lucene.util.fst.BytesStore r0;
        byte $b10, $b12, $b14, $b17;
        boolean $z0, $z1, $z2;
        java.util.List $r1, $r2, $r3, $r4;
        long l0, $l2, $l4, $l5, $l11, $l16;
        java.lang.AssertionError $r10, $r11, $r12;
        int $i1, $i3, $i6, $i7, $i8, $i9, $i13, $i15, i18, $i19, $i20, $i22;
        java.lang.Object $r5;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l16 = virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $b17 = l0 cmp $l16;

        $i19 = (int) $b17;

        if $i19 <= 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $z1 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $b14 = l0 cmp 0L;

        $i20 = (int) $b14;

        if $i20 >= 0 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        $l2 = l0 >> $i1;

        $i15 = (int) $l2;

        i18 = $i15;

        $i3 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        $i6 = (int) $l5;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i6;

        $i7 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        if $i7 != 0 goto label3;

        $i22 = (int) -1;

        i18 = $i15 + $i22;

        $i13 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite> = $i13;

     label3:
        $r2 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i8 = i18 + 1;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i9 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i8, $i9);

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $b10 = l0 cmp 0L;

        if $b10 != 0 goto label4;

        r0.<org.apache.lucene.util.fst.BytesStore: byte[] current> = null;

        goto label5;

     label4:
        $r4 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i18);

        $r6 = (byte[]) $r5;

        r0.<org.apache.lucene.util.fst.BytesStore: byte[] current> = $r6;

     label5:
        $z2 = <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled>;

        if $z2 != 0 goto label6;

        $l11 = virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $b12 = l0 cmp $l11;

        if $b12 == 0 goto label6;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label6:
        return;
    }

    public void finish()
    {
        byte[] $r1, r2, $r3;
        org.apache.lucene.util.fst.BytesStore r0;
        java.util.List $r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        if $r1 == null goto label1;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.apache.lucene.util.fst.BytesStore: byte[] current>;

        $i1 = r0.<org.apache.lucene.util.fst.BytesStore: int nextWrite>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        $r5 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r4 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i3, r2);

        r0.<org.apache.lucene.util.fst.BytesStore: byte[] current> = null;

     label1:
        return;
    }

    public void writeTo(org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        byte[] r4;
        org.apache.lucene.util.fst.BytesStore r0;
        java.util.Iterator $r2;
        org.apache.lucene.store.DataOutput r5;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        r5 := @parameter0: org.apache.lucene.store.DataOutput;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (byte[]) $r3;

        $i0 = lengthof r4;

        virtualinvoke r5.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int,int)>(r4, 0, $i0);

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.util.fst.FST$BytesReader getForwardReader()
    {
        byte[] $r6;
        org.apache.lucene.util.fst.BytesStore r0;
        org.apache.lucene.util.fst.ForwardBytesReader $r3;
        org.apache.lucene.util.fst.BytesStore$1 $r2;
        java.util.List $r1, $r4;
        int $i0;
        java.lang.Object $r5;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r3 = new org.apache.lucene.util.fst.ForwardBytesReader;

        $r4 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (byte[]) $r5;

        specialinvoke $r3.<org.apache.lucene.util.fst.ForwardBytesReader: void <init>(byte[])>($r6);

        return $r3;

     label1:
        $r2 = new org.apache.lucene.util.fst.BytesStore$1;

        specialinvoke $r2.<org.apache.lucene.util.fst.BytesStore$1: void <init>(org.apache.lucene.util.fst.BytesStore)>(r0);

        return $r2;
    }

    public org.apache.lucene.util.fst.FST$BytesReader getReverseReader()
    {
        org.apache.lucene.util.fst.BytesStore r0;
        org.apache.lucene.util.fst.FST$BytesReader $r1;

        r0 := @this: org.apache.lucene.util.fst.BytesStore;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.fst.BytesStore: org.apache.lucene.util.fst.FST$BytesReader getReverseReader(boolean)>(1);

        return $r1;
    }

    org.apache.lucene.util.fst.FST$BytesReader getReverseReader(boolean)
    {
        byte[] $r6;
        org.apache.lucene.util.fst.BytesStore r1;
        org.apache.lucene.util.fst.ReverseBytesReader $r3;
        org.apache.lucene.util.fst.BytesStore$2 $r0;
        java.util.List $r2, $r4;
        int $i0;
        java.lang.Object $r5;
        boolean z0;

        r1 := @this: org.apache.lucene.util.fst.BytesStore;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r1.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r3 = new org.apache.lucene.util.fst.ReverseBytesReader;

        $r4 = r1.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (byte[]) $r5;

        specialinvoke $r3.<org.apache.lucene.util.fst.ReverseBytesReader: void <init>(byte[])>($r6);

        return $r3;

     label1:
        $r0 = new org.apache.lucene.util.fst.BytesStore$2;

        specialinvoke $r0.<org.apache.lucene.util.fst.BytesStore$2: void <init>(org.apache.lucene.util.fst.BytesStore)>(r1);

        return $r0;
    }

    static int access$000(org.apache.lucene.util.fst.BytesStore)
    {
        int $i0;
        org.apache.lucene.util.fst.BytesStore r0;

        r0 := @parameter0: org.apache.lucene.util.fst.BytesStore;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int blockSize>;

        return $i0;
    }

    static java.util.List access$100(org.apache.lucene.util.fst.BytesStore)
    {
        org.apache.lucene.util.fst.BytesStore r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.lucene.util.fst.BytesStore;

        $r1 = r0.<org.apache.lucene.util.fst.BytesStore: java.util.List blocks>;

        return $r1;
    }

    static int access$200(org.apache.lucene.util.fst.BytesStore)
    {
        int $i0;
        org.apache.lucene.util.fst.BytesStore r0;

        r0 := @parameter0: org.apache.lucene.util.fst.BytesStore;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int blockBits>;

        return $i0;
    }

    static int access$300(org.apache.lucene.util.fst.BytesStore)
    {
        int $i0;
        org.apache.lucene.util.fst.BytesStore r0;

        r0 := @parameter0: org.apache.lucene.util.fst.BytesStore;

        $i0 = r0.<org.apache.lucene.util.fst.BytesStore: int blockMask>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/BytesStore;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.BytesStore: boolean $assertionsDisabled> = $z1;

        return;
    }
}
