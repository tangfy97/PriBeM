class com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19 extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build
{
    final com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0;

    void <init>(com.hp.hpl.jena.sparql.sse.builders.BuilderOp)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp r1;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19 r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.builders.BuilderOp;

        r0.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op make(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19 r1;
        com.hp.hpl.jena.graph.Node $r8;
        int $i0;
        java.lang.String $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r11;
        boolean $z0, $z1, $z2, z3, $z4;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp $r10;
        com.hp.hpl.jena.sparql.sse.ItemList $r0, r5, r6, $r9;
        com.hp.hpl.jena.sparql.algebra.op.OpService $r12;
        com.hp.hpl.jena.sparql.sse.Item $r2, $r3, $r7;

        r1 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19;

        r5 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        z3 = 0;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(3, 4, r5, "service");

        $r0 = virtualinvoke r5.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        r6 = $r0;

        $i0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 3 goto label3;

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>($r0, "Expected a keyword");

     label1:
        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SILENT");

        if $z2 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>($r0, "Service: Expected SILENT");

     label2:
        z3 = 1;

        r6 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label3:
        $r7 = virtualinvoke r6.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r7);

        $z4 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z4 != 0 goto label4;

        $z0 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label4;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r6, "Service must provide a URI or variable");

     label4:
        $r9 = virtualinvoke r6.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        $r10 = r1.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$19: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.algebra.Op build(com.hp.hpl.jena.sparql.sse.ItemList,int)>($r9, 0);

        $r12 = new com.hp.hpl.jena.sparql.algebra.op.OpService;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.algebra.op.OpService: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op,boolean)>($r8, $r11, z3);

        return $r12;
    }
}
