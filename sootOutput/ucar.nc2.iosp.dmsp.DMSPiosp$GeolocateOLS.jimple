class ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS extends java.lang.Object
{
    static final double PI;
    static final double TWO_PI;
    static final double HALF_PI;
    static final double DEGREES_PER_RADIANS;

    void <init>()
    {
        ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS r0;

        r0 := @this: ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void geolocateOLS(int, int, int, float[], float[], float[], float[], float[], float[], float[])
    {
        float[] r26, r27, r28, r29, r30, r31, r33;
        int[] $r1, $r8, $r12, $r17, $r32, $r34, $r47, $r49, $r55, $r66;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, $i35, $i36;
        java.lang.String $r15, $r25, $r60, $r71, $r79, $r87, $r95, $r103, $r111;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, d149, $d150, $d151, $d152, d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176;
        byte $b19, $b20;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r13, $r14, $r20, $r21, $r22, $r23, $r24, $r52, $r53, $r54, $r56, $r57, $r58, $r59, $r63, $r64, $r65, $r67, $r68, $r69, $r70, $r74, $r75, $r76, $r77, $r78, $r82, $r83, $r84, $r85, $r86, $r90, $r91, $r92, $r93, $r94, $r98, $r99, $r100, $r101, $r102, $r106, $r107, $r108, $r109, $r110, $r116, $r118, $r120, $r122, $r124, $r126, $r128, $r130, $r132;
        double[] r35, r36, r37, r38, r39, r40, r41, $r42, $r43, $r44, $r45, $r46, $r48, r112, r113, r114, r115;
        int[][] $r0, $r7, $r11, $r16;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.IllegalArgumentException $r117, $r119, $r121, $r123, $r125, $r127, $r129, $r131, $r133;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        r26 := @parameter3: float[];

        r27 := @parameter4: float[];

        r28 := @parameter5: float[];

        r29 := @parameter6: float[];

        r30 := @parameter7: float[];

        r31 := @parameter8: float[];

        r33 := @parameter9: float[];

        $r0 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[][] RANGE_SAT_GROUPS>;

        $r1 = $r0[0];

        $i1 = $r1[0];

        if i0 < $i1 goto label01;

        $r16 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[][] RANGE_SAT_GROUPS>;

        $r17 = $r16[1];

        $i4 = $r17[1];

        if i0 <= $i4 goto label02;

     label01:
        $r117 = new java.lang.IllegalArgumentException;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Satellite ID <");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> outside supported range <min=");

        $r7 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[][] RANGE_SAT_GROUPS>;

        $r8 = $r7[0];

        $i2 = $r8[0];

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",max=");

        $r11 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[][] RANGE_SAT_GROUPS>;

        $r12 = $r11[1];

        $i3 = $r12[1];

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r117.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r117;

     label02:
        if i5 < 0 goto label03;

        if i5 <= 4 goto label04;

     label03:
        $r119 = new java.lang.IllegalArgumentException;

        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data type <");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in valid range <min=0,max=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r119.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r119;

     label04:
        $i7 = lengthof r26;

        if $i7 == i6 goto label05;

        $r121 = new java.lang.IllegalArgumentException;

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of scannerOffset vector <");

        $i32 = lengthof r26;

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r121.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r111);

        throw $r121;

     label05:
        $i8 = lengthof r27;

        if $i8 == i6 goto label06;

        $r123 = new java.lang.IllegalArgumentException;

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of satEphemLatitude vector <");

        $i31 = lengthof r27;

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r123.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r103);

        throw $r123;

     label06:
        $i9 = lengthof r28;

        if $i9 == i6 goto label07;

        $r125 = new java.lang.IllegalArgumentException;

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of satEphemLongitude vector <");

        $i30 = lengthof r28;

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r125.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r95);

        throw $r125;

     label07:
        $i10 = lengthof r29;

        if $i10 == i6 goto label08;

        $r127 = new java.lang.IllegalArgumentException;

        $r126 = new java.lang.StringBuilder;

        specialinvoke $r126.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of satEphemAltitude vector <");

        $i29 = lengthof r29;

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r127.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r87);

        throw $r127;

     label08:
        $i11 = lengthof r30;

        if $i11 == i6 goto label09;

        $r129 = new java.lang.IllegalArgumentException;

        $r128 = new java.lang.StringBuilder;

        specialinvoke $r128.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of satEphemHeading vector <");

        $i28 = lengthof r30;

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r129.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r79);

        throw $r129;

     label09:
        $i14 = lengthof r31;

        $r32 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[] numSamplesPerScan>;

        $i12 = $r32[i5];

        $i13 = $i12 * i6;

        if $i14 == $i13 goto label10;

        $r131 = new java.lang.IllegalArgumentException;

        $r130 = new java.lang.StringBuilder;

        specialinvoke $r130.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of latitude vector <");

        $i26 = lengthof r31;

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r66 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[] numSamplesPerScan>;

        $i27 = $r66[i5];

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r131.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r71);

        throw $r131;

     label10:
        $i17 = lengthof r33;

        $r34 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[] numSamplesPerScan>;

        $i15 = $r34[i5];

        $i16 = $i15 * i6;

        if $i17 == $i16 goto label11;

        $r133 = new java.lang.IllegalArgumentException;

        $r132 = new java.lang.StringBuilder;

        specialinvoke $r132.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of longitude vector <");

        $i24 = lengthof r33;

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not as expected <");

        $r55 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[] numSamplesPerScan>;

        $i25 = $r55[i5];

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r133.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r60);

        throw $r133;

     label11:
        r112 = newarray (double)[3];

        r35 = newarray (double)[3];

        r36 = newarray (double)[3];

        r113 = newarray (double)[3];

        r114 = newarray (double)[3];

        r37 = newarray (double)[3];

        r115 = newarray (double)[3];

        r38 = newarray (double)[3];

        r39 = newarray (double)[3];

        r40 = newarray (double)[3];

        r41 = newarray (double)[3];

        i33 = 0;

     label12:
        if i33 >= i6 goto label19;

        $f0 = r27[i33];

        $d0 = (double) $f0;

        $d1 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double degreesToRadians(double)>($d0);

        $f1 = r28[i33];

        $d2 = (double) $f1;

        $d3 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double degreesToRadians(double)>($d2);

        $f2 = r29[i33];

        d4 = (double) $f2;

        $f3 = r30[i33];

        $d5 = (double) $f3;

        $d6 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double degreesToRadians(double)>($d5);

        $d7 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$EllipsoidalEarthModel: double geodeticToGeocentric(double)>($d1);

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d7);

        $d9 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        $d10 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        $d11 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d12 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$EllipsoidalEarthModel: double earthRadiusKm(double)>($d7);

        $d13 = $d8 * $d10;

        r41[0] = $d13;

        $d14 = $d8 * $d11;

        r41[1] = $d14;

        r41[2] = $d9;

        $r42 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double[] vectorScalarMultiplication(double[],double)>(r41, $d12);

        $d15 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d16 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d17 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        $d18 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d19 = $d15 * $d17;

        r35[0] = $d19;

        $d20 = $d15 * $d18;

        r35[1] = $d20;

        r35[2] = $d16;

        $d23 = $r42[0];

        $d21 = r35[0];

        $d22 = $d21 * d4;

        $d24 = $d23 + $d22;

        r36[0] = $d24;

        $d27 = $r42[1];

        $d25 = r35[1];

        $d26 = $d25 * d4;

        $d28 = $d27 + $d26;

        r36[1] = $d28;

        $d31 = $r42[2];

        $d29 = r35[2];

        $d30 = $d29 * d4;

        $d32 = $d31 + $d30;

        r36[2] = $d32;

        $d33 = $r42[0];

        $d34 = neg $d33;

        r113[0] = $d34;

        $d35 = $r42[1];

        $d36 = neg $d35;

        r113[1] = $d36;

        $d37 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$EllipsoidalEarthModel: double earthRadiusKm(double)>(1.5707963267948966);

        $d38 = $r42[2];

        $d39 = $d37 - $d38;

        r113[2] = $d39;

        $d40 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double vectorDotProduct(double[],double[])>(r113, r35);

        $d41 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double vectorMagnitude(double[])>(r35);

        $d42 = staticinvoke <java.lang.Math: double pow(double,double)>($d41, 2.0);

        d43 = $d40 / $d42;

        $d46 = r113[0];

        $d44 = r35[0];

        $d45 = d43 * $d44;

        $d47 = $d46 - $d45;

        r113[0] = $d47;

        $d50 = r113[1];

        $d48 = r35[1];

        $d49 = d43 * $d48;

        $d51 = $d50 - $d49;

        r113[1] = $d51;

        $d54 = r113[2];

        $d52 = r35[2];

        $d53 = d43 * $d52;

        $d55 = $d54 - $d53;

        r113[2] = $d55;

        $r43 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double[] unitVector(double[])>(r113);

        r113 = $r43;

        $r44 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double[] vectorCrossProduct(double[],double[])>(r35, $r43);

        $r45 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double[] unitVector(double[])>($r44);

        $d56 = staticinvoke <java.lang.Math: double cos(double)>($d6);

        $d57 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $d58 = $r45[0];

        $d61 = $d57 * $d58;

        $d59 = $r43[0];

        $d60 = $d56 * $d59;

        $d62 = $d61 + $d60;

        r37[0] = $d62;

        $d63 = $r45[1];

        $d66 = $d57 * $d63;

        $d64 = $r43[1];

        $d65 = $d56 * $d64;

        $d67 = $d66 + $d65;

        r37[1] = $d67;

        $d68 = $r45[2];

        $d71 = $d57 * $d68;

        $d69 = $r43[2];

        $d70 = $d56 * $d69;

        $d72 = $d71 + $d70;

        r37[2] = $d72;

        $r46 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double[] vectorCrossProduct(double[],double[])>(r35, r37);

        i34 = 0;

     label13:
        $r47 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[] numSamplesPerScan>;

        $i18 = $r47[i5];

        if i34 >= $i18 goto label18;

        $f4 = r26[i33];

        $d73 = (double) $f4;

        $d74 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: double scanAngleOLS(int,int,int,double)>(i0, i5, i34, $d73);

        $d75 = staticinvoke <java.lang.Math: double tan(double)>($d74);

        d76 = d4 * $d75;

        $d79 = $r42[0];

        $d77 = $r46[0];

        $d78 = d76 * $d77;

        $d80 = $d79 + $d78;

        r38[0] = $d80;

        $d83 = $r42[1];

        $d81 = $r46[1];

        $d82 = d76 * $d81;

        $d84 = $d83 + $d82;

        r38[1] = $d84;

        $d87 = $r42[2];

        $d85 = $r46[2];

        $d86 = d76 * $d85;

        $d88 = $d87 + $d86;

        r38[2] = $d88;

        $d90 = r38[0];

        $d89 = r36[0];

        $d91 = $d90 - $d89;

        r39[0] = $d91;

        $d93 = r38[1];

        $d92 = r36[1];

        $d94 = $d93 - $d92;

        r39[1] = $d94;

        $d96 = r38[2];

        $d95 = r36[2];

        $d97 = $d96 - $d95;

        r39[2] = $d97;

        $d98 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$EllipsoidalEarthModel: double earthRadiusKm(double)>(0.0);

        $d99 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$EllipsoidalEarthModel: double earthRadiusKm(double)>(1.5707963267948966);

        $d100 = staticinvoke <java.lang.Math: double pow(double,double)>($d98, 2.0);

        $d101 = staticinvoke <java.lang.Math: double pow(double,double)>($d99, 2.0);

        $d102 = r39[0];

        $d103 = staticinvoke <java.lang.Math: double pow(double,double)>($d102, 2.0);

        $d105 = $d101 * $d103;

        $d104 = r39[1];

        $d106 = staticinvoke <java.lang.Math: double pow(double,double)>($d104, 2.0);

        $d107 = $d101 * $d106;

        $d109 = $d105 + $d107;

        $d108 = r39[2];

        $d110 = staticinvoke <java.lang.Math: double pow(double,double)>($d108, 2.0);

        $d111 = $d100 * $d110;

        d112 = $d109 + $d111;

        $d113 = r36[0];

        $d115 = $d101 * $d113;

        $d114 = r39[0];

        $d120 = $d115 * $d114;

        $d116 = r36[1];

        $d118 = $d101 * $d116;

        $d117 = r39[1];

        $d119 = $d118 * $d117;

        $d125 = $d120 + $d119;

        $d121 = r36[2];

        $d123 = $d100 * $d121;

        $d122 = r39[2];

        $d124 = $d123 * $d122;

        $d126 = $d125 + $d124;

        d127 = 2.0 * $d126;

        $d128 = r36[0];

        $d129 = staticinvoke <java.lang.Math: double pow(double,double)>($d128, 2.0);

        $d131 = $d101 * $d129;

        $d130 = r36[1];

        $d132 = staticinvoke <java.lang.Math: double pow(double,double)>($d130, 2.0);

        $d133 = $d101 * $d132;

        $d135 = $d131 + $d133;

        $d134 = r36[2];

        $d136 = staticinvoke <java.lang.Math: double pow(double,double)>($d134, 2.0);

        $d137 = $d100 * $d136;

        $d139 = $d135 + $d137;

        $d138 = $d100 * $d101;

        d140 = $d139 - $d138;

        $d141 = staticinvoke <java.lang.Math: double pow(double,double)>(d127, 2.0);

        $d142 = 4.0 * d112;

        $d143 = $d142 * d140;

        $d144 = $d141 - $d143;

        $d145 = staticinvoke <java.lang.Math: double sqrt(double)>($d144);

        $d146 = neg d127;

        $d148 = $d146 + $d145;

        $d147 = 2.0 * d112;

        d149 = $d148 / $d147;

        $d150 = neg d127;

        $d152 = $d150 - $d145;

        $d151 = 2.0 * d112;

        d153 = $d152 / $d151;

        $b19 = d149 cmpg d153;

        $i35 = (int) $b19;

        if $i35 >= 0 goto label14;

        $d175 = d149;

        goto label15;

     label14:
        $d175 = d153;

     label15:
        $d154 = r39[0];

        $d156 = $d154 * $d175;

        $d155 = r36[0];

        $d157 = $d156 + $d155;

        r40[0] = $d157;

        $d158 = r39[1];

        $d160 = $d158 * $d175;

        $d159 = r36[1];

        $d161 = $d160 + $d159;

        r40[1] = $d161;

        $d162 = r39[2];

        $d164 = $d162 * $d175;

        $d163 = r36[2];

        $d165 = $d164 + $d163;

        r40[2] = $d165;

        $r48 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double[] unitVector(double[])>(r40);

        $d166 = $r48[2];

        $d167 = staticinvoke <java.lang.Math: double asin(double)>($d166);

        $d168 = $r48[0];

        $d169 = staticinvoke <java.lang.Math: double cos(double)>($d167);

        $d170 = $d168 / $d169;

        $d171 = staticinvoke <java.lang.Math: double acos(double)>($d170);

        $d172 = $r48[1];

        $b20 = $d172 cmpg 0.0;

        $i36 = (int) $b20;

        if $i36 >= 0 goto label16;

        $d176 = neg $d171;

        goto label17;

     label16:
        $d176 = $d171;

     label17:
        $r49 = <ucar.nc2.iosp.dmsp.DMSPiosp$OLSSensorModel: int[] numSamplesPerScan>;

        $i21 = $r49[i5];

        $i22 = i33 * $i21;

        $i23 = $i22 + i34;

        $d173 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double radiansToDegrees(double)>($d167);

        $f5 = (float) $d173;

        r31[$i23] = $f5;

        $d174 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double radiansToDegrees(double)>($d176);

        $f6 = (float) $d174;

        r33[$i23] = $f6;

        i34 = i34 + 1;

        goto label13;

     label18:
        i33 = i33 + 1;

        goto label12;

     label19:
        return;
    }

    static double degreesToRadians(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 / 57.29577951308232;

        return $d1;
    }

    static double radiansToDegrees(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * 57.29577951308232;

        return $d1;
    }

    public static void <clinit>()
    {
        <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double DEGREES_PER_RADIANS> = 57.29577951308232;

        <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double HALF_PI> = 1.5707963267948966;

        <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double TWO_PI> = 6.283185307179586;

        <ucar.nc2.iosp.dmsp.DMSPiosp$GeolocateOLS: double PI> = 3.141592653589793;

        return;
    }
}
