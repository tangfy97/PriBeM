public class org.apache.http.entity.FileEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable
{
    protected final java.io.File file;

    public void <init>(java.io.File, java.lang.String)
    {
        org.apache.http.entity.FileEntity r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;
        java.io.File r1;

        r0 := @this: org.apache.http.entity.FileEntity;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r3;

     label1:
        r0.<org.apache.http.entity.FileEntity: java.io.File file> = r1;

        virtualinvoke r0.<org.apache.http.entity.FileEntity: void setContentType(java.lang.String)>(r2);

        return;
    }

    public void <init>(java.io.File, org.apache.http.entity.ContentType)
    {
        org.apache.http.entity.ContentType r2;
        org.apache.http.entity.FileEntity r0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.File r1;

        r0 := @this: org.apache.http.entity.FileEntity;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.http.entity.ContentType;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.entity.FileEntity: java.io.File file> = r1;

        if r2 == null goto label2;

        $r3 = virtualinvoke r2.<org.apache.http.entity.ContentType: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.http.entity.FileEntity: void setContentType(java.lang.String)>($r3);

     label2:
        return;
    }

    public void <init>(java.io.File)
    {
        org.apache.http.entity.FileEntity r0;
        java.lang.IllegalArgumentException $r2;
        java.io.File r1;

        r0 := @this: org.apache.http.entity.FileEntity;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r2;

     label1:
        r0.<org.apache.http.entity.FileEntity: java.io.File file> = r1;

        return;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.FileEntity r0;

        r0 := @this: org.apache.http.entity.FileEntity;

        return 1;
    }

    public long getContentLength()
    {
        org.apache.http.entity.FileEntity r0;
        long $l0;
        java.io.File $r1;

        r0 := @this: org.apache.http.entity.FileEntity;

        $r1 = r0.<org.apache.http.entity.FileEntity: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.entity.FileEntity r1;
        java.io.FileInputStream $r0;
        java.io.File $r2;

        r1 := @this: org.apache.http.entity.FileEntity;

        $r0 = new java.io.FileInputStream;

        $r2 = r1.<org.apache.http.entity.FileEntity: java.io.File file>;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return $r0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.lang.Throwable $r6;
        byte[] r4;
        org.apache.http.entity.FileEntity r2;
        java.io.FileInputStream $r8;
        java.lang.IllegalArgumentException $r7;
        java.io.File $r3;
        int $i0, $i2;

        r2 := @this: org.apache.http.entity.FileEntity;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r7;

     label1:
        $r8 = new java.io.FileInputStream;

        $r3 = r2.<org.apache.http.entity.FileEntity: java.io.File file>;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

     label2:
        r4 = newarray (byte)[4096];

     label3:
        $i0 = virtualinvoke $r8.<java.io.InputStream: int read(byte[])>(r4);

        $i2 = (int) -1;

        if $i0 == $i2 goto label4;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r4, 0, $i0);

        goto label3;

     label4:
        virtualinvoke r0.<java.io.OutputStream: void flush()>();

     label5:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

        goto label8;

     label6:
        $r6 := @caughtexception;

     label7:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

        throw $r6;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.FileEntity r0;

        r0 := @this: org.apache.http.entity.FileEntity;

        return 0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.entity.FileEntity r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.entity.FileEntity;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }
}
