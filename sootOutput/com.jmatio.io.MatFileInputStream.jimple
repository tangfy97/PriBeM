class com.jmatio.io.MatFileInputStream extends java.lang.Object
{
    private final int type;
    private final java.nio.ByteBuffer buf;

    public void <init>(java.nio.ByteBuffer, int)
    {
        int i0;
        java.nio.ByteBuffer r1;
        com.jmatio.io.MatFileInputStream r0;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jmatio.io.MatFileInputStream: int type> = i0;

        r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf> = r1;

        return;
    }

    public int readInt() throws java.io.IOException
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        byte $b12, $b14;
        java.lang.StringBuilder $r12, $r13, $r15;
        com.jmatio.io.MatFileInputStream r0;
        long $l1, $l3;
        short $s9, $s11, $s13, $s16;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i15, $i17, $i18, $i19, $i21, $i22, $i24;
        java.lang.String $r14;
        double $d0;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label01;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label10;
            case 8: goto label10;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label10;
            case 12: goto label08;
            case 13: goto label07;
            default: goto label10;
        };

     label01:
        $r8 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b12 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get()>();

        $s16 = (short) $b12;

        $s13 = $s16 & 255;

        $i17 = (int) $s13;

        return $i17;

     label02:
        $r9 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b14 = virtualinvoke $r9.<java.nio.ByteBuffer: byte get()>();

        $i18 = (int) $b14;

        return $i18;

     label03:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s9 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort()>();

        $i19 = (int) $s9;

        $i21 = (int) 65535;

        $i10 = $i19 & $i21;

        return $i10;

     label04:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s11 = virtualinvoke $r7.<java.nio.ByteBuffer: short getShort()>();

        $i22 = (int) $s11;

        return $i22;

     label05:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i6 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $i24 = (int) -1;

        $i7 = $i6 & $i24;

        return $i7;

     label06:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i8 = virtualinvoke $r5.<java.nio.ByteBuffer: int getInt()>();

        return $i8;

     label07:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $l1 = virtualinvoke $r1.<java.nio.ByteBuffer: long getLong()>();

        $i2 = (int) $l1;

        return $i2;

     label08:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $l3 = virtualinvoke $r2.<java.nio.ByteBuffer: long getLong()>();

        $i4 = (int) $l3;

        return $i4;

     label09:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r3.<java.nio.ByteBuffer: double getDouble()>();

        $i5 = (int) $d0;

        return $i5;

     label10:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i15 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r16;
    }

    public char readChar() throws java.io.IOException
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        byte $b1, $b15, $b18;
        java.lang.StringBuilder $r11, $r12, $r14;
        com.jmatio.io.MatFileInputStream r0;
        short $s10, $s13, $s16, $s21;
        int $i0, $i3, $i5, $i6, $i8, $i11, $i20, $i22, $i24, $i26;
        java.lang.String $r13;
        double $d0;
        char $c2, $c4, $c7, $c9, $c12, $c14, $c17, $c19;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label5;
            case 7: goto label9;
            case 8: goto label9;
            case 9: goto label7;
            case 10: goto label9;
            case 11: goto label9;
            case 12: goto label9;
            case 13: goto label9;
            case 14: goto label9;
            case 15: goto label9;
            case 16: goto label8;
            default: goto label9;
        };

     label1:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b15 = virtualinvoke $r7.<java.nio.ByteBuffer: byte get()>();

        $s21 = (short) $b15;

        $s16 = $s21 & 255;

        $c17 = (char) $s16;

        return $c17;

     label2:
        $r8 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b18 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get()>();

        $c19 = (char) $b18;

        return $c19;

     label3:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s10 = virtualinvoke $r5.<java.nio.ByteBuffer: short getShort()>();

        $i22 = (int) $s10;

        $i24 = (int) 65535;

        $i11 = $i22 & $i24;

        $c12 = (char) $i11;

        return $c12;

     label4:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s13 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort()>();

        $c14 = (char) $s13;

        return $c14;

     label5:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i5 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        $i26 = (int) -1;

        $i6 = $i5 & $i26;

        $c7 = (char) $i6;

        return $c7;

     label6:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i8 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $c9 = (char) $i8;

        return $c9;

     label7:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r2.<java.nio.ByteBuffer: double getDouble()>();

        $i3 = (int) $d0;

        $c4 = (char) $i3;

        return $c4;

     label8:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b1 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $c2 = (char) $b1;

        return $c2;

     label9:
        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i20 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r15;
    }

    public double readDouble() throws java.io.IOException
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        byte $b7, $b9;
        java.lang.StringBuilder $r10, $r11, $r13;
        com.jmatio.io.MatFileInputStream r0;
        short $s4, $s6, $s8, $s11;
        int $i0, $i1, $i2, $i3, $i5, $i10, $i12, $i14, $i16;
        java.lang.String $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label5;
            case 7: goto label8;
            case 8: goto label8;
            case 9: goto label7;
            default: goto label8;
        };

     label1:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b7 = virtualinvoke $r6.<java.nio.ByteBuffer: byte get()>();

        $s11 = (short) $b7;

        $s8 = $s11 & 255;

        $d5 = (double) $s8;

        return $d5;

     label2:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b9 = virtualinvoke $r7.<java.nio.ByteBuffer: byte get()>();

        $d6 = (double) $b9;

        return $d6;

     label3:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s4 = virtualinvoke $r4.<java.nio.ByteBuffer: short getShort()>();

        $i12 = (int) $s4;

        $i14 = (int) 65535;

        $i5 = $i12 & $i14;

        $d3 = (double) $i5;

        return $d3;

     label4:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s6 = virtualinvoke $r5.<java.nio.ByteBuffer: short getShort()>();

        $d4 = (double) $s6;

        return $d4;

     label5:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        $i16 = (int) -1;

        $i2 = $i1 & $i16;

        $d1 = (double) $i2;

        return $d1;

     label6:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i3 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        $d2 = (double) $i3;

        return $d2;

     label7:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r1.<java.nio.ByteBuffer: double getDouble()>();

        return $d0;

     label8:
        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i10 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r14;
    }

    public byte readByte()
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        byte $b1, $b3, $b6, $b8, $b11, $b13, $b14, $b16, $b17;
        java.lang.StringBuilder $r11, $r12, $r14;
        com.jmatio.io.MatFileInputStream r0;
        short $s9, $s12, $s15, $s19;
        int $i0, $i2, $i4, $i5, $i7, $i10, $i18, $i20, $i22, $i24;
        java.lang.String $r13;
        double $d0;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label5;
            case 7: goto label9;
            case 8: goto label9;
            case 9: goto label7;
            case 10: goto label9;
            case 11: goto label9;
            case 12: goto label9;
            case 13: goto label9;
            case 14: goto label9;
            case 15: goto label9;
            case 16: goto label8;
            default: goto label9;
        };

     label1:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b14 = virtualinvoke $r7.<java.nio.ByteBuffer: byte get()>();

        $s19 = (short) $b14;

        $s15 = $s19 & 255;

        $b16 = (byte) $s15;

        return $b16;

     label2:
        $r8 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b17 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get()>();

        return $b17;

     label3:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s9 = virtualinvoke $r5.<java.nio.ByteBuffer: short getShort()>();

        $i20 = (int) $s9;

        $i22 = (int) 65535;

        $i10 = $i20 & $i22;

        $b11 = (byte) $i10;

        return $b11;

     label4:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s12 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort()>();

        $b13 = (byte) $s12;

        return $b13;

     label5:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i4 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        $i24 = (int) -1;

        $i5 = $i4 & $i24;

        $b6 = (byte) $i5;

        return $b6;

     label6:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i7 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $b8 = (byte) $i7;

        return $b8;

     label7:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r2.<java.nio.ByteBuffer: double getDouble()>();

        $i2 = (int) $d0;

        $b3 = (byte) $i2;

        return $b3;

     label8:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b1 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        return $b1;

     label9:
        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i18 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r15;
    }

    public java.nio.ByteBuffer readToByteBuffer(java.nio.ByteBuffer, int, com.jmatio.types.ByteStorageSupport) throws java.io.IOException
    {
        byte[] r14;
        com.jmatio.types.ByteStorageSupport r0;
        java.nio.ByteBuffer r3, $r9, $r12, $r13, $r15, $r16;
        byte $b9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.nio.ByteOrder $r10, $r11;
        float $f0;
        java.lang.StringBuilder $r5, $r6, $r7;
        com.jmatio.io.MatFileInputStream r1;
        long $l7;
        short $s6;
        int $i0, i1, $i2, i3, $i4, $i5, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r8;
        double $d0;
        java.lang.RuntimeException $r4;
        java.lang.Class $r2;

        r1 := @this: com.jmatio.io.MatFileInputStream;

        r3 := @parameter0: java.nio.ByteBuffer;

        i1 := @parameter1: int;

        r0 := @parameter2: com.jmatio.types.ByteStorageSupport;

        $i0 = interfaceinvoke r0.<com.jmatio.types.ByteStorageSupport: int getBytesAllocated()>();

        $i2 = interfaceinvoke r0.<com.jmatio.types.ByteStorageSupport: int getBytesAllocated()>();

        i3 = i1 * $i2;

        $i4 = r1.<com.jmatio.io.MatFileInputStream: int type>;

        $i5 = staticinvoke <com.jmatio.common.MatDataTypes: int sizeOf(int)>($i4);

        if $i5 != $i0 goto label03;

        $r9 = r1.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $r10 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r11 = virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $z6 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label03;

        $r12 = r1.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i10 = virtualinvoke $r12.<java.nio.ByteBuffer: int remaining()>();

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i10, 1024);

        $r13 = r1.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i12 = virtualinvoke $r13.<java.nio.ByteBuffer: int position()>();

        r14 = newarray (byte)[$i11];

     label01:
        $i13 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        if $i13 <= 0 goto label02;

        $i15 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        $i16 = lengthof r14;

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i16);

        $r16 = r1.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r16.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r14, 0, $i17);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r14, 0, $i17);

        goto label01;

     label02:
        $r15 = r1.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i14 = $i12 + i3;

        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i14);

        goto label11;

     label03:
        $r2 = interfaceinvoke r0.<com.jmatio.types.ByteStorageSupport: java.lang.Class getStorageClazz()>();

     label04:
        $i18 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        if $i18 <= 0 goto label11;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z0 == 0 goto label05;

        $d0 = virtualinvoke r1.<com.jmatio.io.MatFileInputStream: double readDouble()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        goto label04;

     label05:
        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Byte;");

        if $z1 == 0 goto label06;

        $b9 = virtualinvoke r1.<com.jmatio.io.MatFileInputStream: byte readByte()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b9);

        goto label04;

     label06:
        $z2 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z2 == 0 goto label07;

        $i8 = virtualinvoke r1.<com.jmatio.io.MatFileInputStream: int readInt()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i8);

        goto label04;

     label07:
        $z3 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Long;");

        if $z3 == 0 goto label08;

        $l7 = specialinvoke r1.<com.jmatio.io.MatFileInputStream: long readLong()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l7);

        goto label04;

     label08:
        $z4 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Float;");

        if $z4 == 0 goto label09;

        $f0 = specialinvoke r1.<com.jmatio.io.MatFileInputStream: float readFloat()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>($f0);

        goto label04;

     label09:
        $z5 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Short;");

        if $z5 == 0 goto label10;

        $s6 = specialinvoke r1.<com.jmatio.io.MatFileInputStream: short readShort()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s6);

        goto label04;

     label10:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not supported buffer reader for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label11:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r3;
    }

    private float readFloat()
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        byte $b7, $b9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.StringBuilder $r11, $r12, $r14;
        com.jmatio.io.MatFileInputStream r0;
        short $s4, $s6, $s8, $s11;
        int $i0, $i1, $i2, $i3, $i5, $i10, $i12, $i14, $i16;
        java.lang.String $r13;
        double $d0;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label5;
            case 7: goto label7;
            case 8: goto label9;
            case 9: goto label8;
            default: goto label9;
        };

     label1:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b7 = virtualinvoke $r7.<java.nio.ByteBuffer: byte get()>();

        $s11 = (short) $b7;

        $s8 = $s11 & 255;

        $f6 = (float) $s8;

        return $f6;

     label2:
        $r8 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b9 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get()>();

        $f7 = (float) $b9;

        return $f7;

     label3:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s4 = virtualinvoke $r5.<java.nio.ByteBuffer: short getShort()>();

        $i12 = (int) $s4;

        $i14 = (int) 65535;

        $i5 = $i12 & $i14;

        $f4 = (float) $i5;

        return $f4;

     label4:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s6 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort()>();

        $f5 = (float) $s6;

        return $f5;

     label5:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        $i16 = (int) -1;

        $i2 = $i1 & $i16;

        $f2 = (float) $i2;

        return $f2;

     label6:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i3 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $f3 = (float) $i3;

        return $f3;

     label7:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $f1 = virtualinvoke $r2.<java.nio.ByteBuffer: float getFloat()>();

        return $f1;

     label8:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r1.<java.nio.ByteBuffer: double getDouble()>();

        $f0 = (float) $d0;

        return $f0;

     label9:
        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i10 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r15;
    }

    private short readShort()
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        byte $b18, $b21;
        java.lang.StringBuilder $r12, $r13, $r15;
        com.jmatio.io.MatFileInputStream r0;
        long $l1, $l4;
        short $s3, $s6, $s8, $s11, $s13, $s14, $s16, $s17, $s19, $s20, $s22, $s24;
        int $i0, $i2, $i5, $i7, $i9, $i10, $i12, $i15, $i23, $i25, $i27, $i29;
        java.lang.String $r14;
        double $d0;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label01;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label10;
            case 8: goto label10;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label10;
            case 12: goto label08;
            case 13: goto label07;
            default: goto label10;
        };

     label01:
        $r8 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b18 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get()>();

        $s24 = (short) $b18;

        $s19 = $s24 & 255;

        $s20 = (short) $s19;

        return $s20;

     label02:
        $r9 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b21 = virtualinvoke $r9.<java.nio.ByteBuffer: byte get()>();

        $s22 = (short) $b21;

        return $s22;

     label03:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s14 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort()>();

        $i25 = (int) $s14;

        $i27 = (int) 65535;

        $i15 = $i25 & $i27;

        $s16 = (short) $i15;

        return $s16;

     label04:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s17 = virtualinvoke $r7.<java.nio.ByteBuffer: short getShort()>();

        return $s17;

     label05:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i9 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $i29 = (int) -1;

        $i10 = $i9 & $i29;

        $s11 = (short) $i10;

        return $s11;

     label06:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i12 = virtualinvoke $r5.<java.nio.ByteBuffer: int getInt()>();

        $s13 = (short) $i12;

        return $s13;

     label07:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $l1 = virtualinvoke $r1.<java.nio.ByteBuffer: long getLong()>();

        $i2 = (int) $l1;

        $s3 = (short) $i2;

        return $s3;

     label08:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $l4 = virtualinvoke $r2.<java.nio.ByteBuffer: long getLong()>();

        $i5 = (int) $l4;

        $s6 = (short) $i5;

        return $s6;

     label09:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r3.<java.nio.ByteBuffer: double getDouble()>();

        $i7 = (int) $d0;

        $s8 = (short) $i7;

        return $s8;

     label10:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i23 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r16;
    }

    private long readLong()
    {
        java.nio.ByteBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        byte $b14, $b17;
        java.lang.StringBuilder $r12, $r13, $r15;
        com.jmatio.io.MatFileInputStream r0;
        long $l1, $l2, $l3, $l6, $l8, $l11, $l13, $l16, $l18;
        short $s9, $s12, $s15, $s20;
        int $i0, $i4, $i5, $i7, $i10, $i19, $i21, $i23, $i25;
        java.lang.String $r14;
        double $d0;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        $i0 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label01;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label10;
            case 8: goto label10;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label10;
            case 12: goto label08;
            case 13: goto label07;
            default: goto label10;
        };

     label01:
        $r8 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b14 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get()>();

        $s20 = (short) $b14;

        $s15 = $s20 & 255;

        $l16 = (long) $s15;

        return $l16;

     label02:
        $r9 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $b17 = virtualinvoke $r9.<java.nio.ByteBuffer: byte get()>();

        $l18 = (long) $b17;

        return $l18;

     label03:
        $r6 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s9 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort()>();

        $i21 = (int) $s9;

        $i23 = (int) 65535;

        $i10 = $i21 & $i23;

        $l11 = (long) $i10;

        return $l11;

     label04:
        $r7 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $s12 = virtualinvoke $r7.<java.nio.ByteBuffer: short getShort()>();

        $l13 = (long) $s12;

        return $l13;

     label05:
        $r4 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i4 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $i25 = (int) -1;

        $i5 = $i4 & $i25;

        $l6 = (long) $i5;

        return $l6;

     label06:
        $r5 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i7 = virtualinvoke $r5.<java.nio.ByteBuffer: int getInt()>();

        $l8 = (long) $i7;

        return $l8;

     label07:
        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $l1 = virtualinvoke $r1.<java.nio.ByteBuffer: long getLong()>();

        return $l1;

     label08:
        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $l2 = virtualinvoke $r2.<java.nio.ByteBuffer: long getLong()>();

        return $l2;

     label09:
        $r3 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $d0 = virtualinvoke $r3.<java.nio.ByteBuffer: double getDouble()>();

        $l3 = (long) $d0;

        return $l3;

     label10:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data type: ");

        $i19 = r0.<com.jmatio.io.MatFileInputStream: int type>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r16;
    }

    public void skip(int)
    {
        int $i0, i1, $i2;
        java.nio.ByteBuffer $r1, $r2;
        com.jmatio.io.MatFileInputStream r0;

        r0 := @this: com.jmatio.io.MatFileInputStream;

        i1 := @parameter0: int;

        $r2 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $r1 = r0.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer buf>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i0 + i1;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return;
    }
}
