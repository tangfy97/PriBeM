final class org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame extends java.lang.Object
{
    final int ord;
    long fp;
    long fpOrig;
    long fpEnd;
    long lastSubFP;
    int state;
    int metaDataUpto;
    byte[] suffixBytes;
    final org.apache.lucene.store.ByteArrayDataInput suffixesReader;
    byte[] statBytes;
    final org.apache.lucene.store.ByteArrayDataInput statsReader;
    byte[] floorData;
    final org.apache.lucene.store.ByteArrayDataInput floorDataReader;
    int prefix;
    int entCount;
    int nextEnt;
    boolean isLastInFloor;
    boolean isLeafBlock;
    int numFollowFloorBlocks;
    int nextFloorLabel;
    org.apache.lucene.util.automaton.Transition[] transitions;
    int curTransitionMax;
    int transitionIndex;
    org.apache.lucene.util.fst.FST$Arc arc;
    final org.apache.lucene.codecs.BlockTermState termState;
    org.apache.lucene.util.BytesRef outputPrefix;
    private int startBytePos;
    private int suffix;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2;

    public void <init>(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum, int) throws java.io.IOException
    {
        byte[] $r2, $r4, $r6;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum r1;
        org.apache.lucene.codecs.BlockTreeTermsReader $r9;
        org.apache.lucene.codecs.BlockTermState $r11, $r12;
        org.apache.lucene.store.ByteArrayDataInput $r3, $r5, $r7;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader $r8;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        org.apache.lucene.codecs.PostingsReaderBase $r10;
        int i0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        r1 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[128];

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] suffixBytes> = $r2;

        $r3 = new org.apache.lucene.store.ByteArrayDataInput;

        specialinvoke $r3.<org.apache.lucene.store.ByteArrayDataInput: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader> = $r3;

        $r4 = newarray (byte)[64];

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] statBytes> = $r4;

        $r5 = new org.apache.lucene.store.ByteArrayDataInput;

        specialinvoke $r5.<org.apache.lucene.store.ByteArrayDataInput: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput statsReader> = $r5;

        $r6 = newarray (byte)[32];

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] floorData> = $r6;

        $r7 = new org.apache.lucene.store.ByteArrayDataInput;

        specialinvoke $r7.<org.apache.lucene.store.ByteArrayDataInput: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader> = $r7;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int ord> = i0;

        $r8 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader this$1>;

        $r9 = $r8.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.codecs.BlockTreeTermsReader this$0>;

        $r10 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader: org.apache.lucene.codecs.PostingsReaderBase access$000(org.apache.lucene.codecs.BlockTreeTermsReader)>($r9);

        $r11 = virtualinvoke $r10.<org.apache.lucene.codecs.PostingsReaderBase: org.apache.lucene.codecs.BlockTermState newTermState()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState> = $r11;

        $r12 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $r12.<org.apache.lucene.codecs.BlockTermState: long totalTermFreq> = -1L;

        return;
    }

    void loadNextFloorBlock() throws java.io.IOException
    {
        org.apache.lucene.store.ByteArrayDataInput $r3, $r5;
        long $l7, $l8, $l9, $l10;
        java.lang.AssertionError $r6;
        short $s5, $s14;
        byte $b4;
        org.apache.lucene.util.automaton.Transition[] $r1;
        int $i0, $i1, $i2, $i3, $i6, $i11, $i12, $i13, $i15;
        boolean $z0;
        org.apache.lucene.util.automaton.Transition $r2;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        if $i6 > 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $l7 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fpOrig>;

        $r5 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $l8 = virtualinvoke $r5.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $l9 = $l8 >>> 1;

        $l10 = $l7 + $l9;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fp> = $l10;

        $i11 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        $i12 = $i11 - 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks> = $i12;

        $i13 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        if $i13 == 0 goto label2;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $b4 = virtualinvoke $r3.<org.apache.lucene.store.ByteArrayDataInput: byte readByte()>();

        $s14 = (short) $b4;

        $s5 = $s14 & 255;

        $i15 = (int) $s5;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel> = $i15;

        goto label3;

     label2:
        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel> = 256;

     label3:
        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        if $i0 == 0 goto label4;

        $i2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel>;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.util.automaton.Transition[] transitions>;

        $i1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int transitionIndex>;

        $r2 = $r1[$i1];

        $i3 = virtualinvoke $r2.<org.apache.lucene.util.automaton.Transition: int getMin()>();

        if $i2 <= $i3 goto label1;

     label4:
        virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: void load(org.apache.lucene.util.BytesRef)>(null);

        return;
    }

    public void setState(int)
    {
        org.apache.lucene.util.automaton.Transition[][] $r3;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum $r1;
        org.apache.lucene.util.automaton.Transition $r7;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        org.apache.lucene.util.automaton.Transition[] $r4, $r5, $r6;
        int i0, $i1, $i2, $i4;
        org.apache.lucene.util.automaton.CompiledAutomaton $r2;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int state> = i0;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int transitionIndex> = 0;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r2 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.util.automaton.CompiledAutomaton access$100(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r1);

        $r3 = $r2.<org.apache.lucene.util.automaton.CompiledAutomaton: org.apache.lucene.util.automaton.Transition[][] sortedTransitions>;

        $r4 = $r3[i0];

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.util.automaton.Transition[] transitions> = $r4;

        $r5 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.util.automaton.Transition[] transitions>;

        $i1 = lengthof $r5;

        if $i1 == 0 goto label1;

        $r6 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.util.automaton.Transition[] transitions>;

        $r7 = $r6[0];

        $i2 = virtualinvoke $r7.<org.apache.lucene.util.automaton.Transition: int getMax()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int curTransitionMax> = $i2;

        goto label2;

     label1:
        $i4 = (int) -1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int curTransitionMax> = $i4;

     label2:
        return;
    }

    void load(org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        byte[] $r4, $r7, $r8, $r12, $r15, $r16, $r31, $r32, $r35, $r36, $r37, $r38, $r49;
        byte $b19, $b21, $b33;
        org.apache.lucene.util.automaton.Transition[] $r34, $r45;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader $r20, $r26;
        long $l6, $l17, $l18, $l26, $l27, $l28, $l29, $l38;
        java.lang.AssertionError $r54;
        short $s22, $s34, $s41, $s43;
        org.apache.lucene.codecs.PostingsReaderBase $r22;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum $r2, $r5, $r10, $r13, $r19, $r23, $r25, $r29, $r43, $r50, $r52;
        org.apache.lucene.store.IndexInput $r3, $r6, $r11, $r14, $r24, $r30, $r51, $r53;
        org.apache.lucene.index.FieldInfo $r28;
        org.apache.lucene.store.ByteArrayDataInput $r9, $r17, $r39, $r40, $r41, $r42, $r47, $r48;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.codecs.BlockTermState $r18, $r27;
        org.apache.lucene.util.BytesRef r0;
        org.apache.lucene.codecs.BlockTreeTermsReader $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i20, $i23, $i24, $i25, $i30, $i31, $i32, $i35, $i36, $i37, $i39, $i40, $i42, $i44;
        org.apache.lucene.util.automaton.RunAutomaton $r44;
        org.apache.lucene.util.automaton.Transition $r46;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        if r0 == null goto label04;

        $r34 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.util.automaton.Transition[] transitions>;

        $i11 = lengthof $r34;

        if $i11 == 0 goto label04;

        $r35 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] floorData>;

        $i13 = lengthof $r35;

        $i12 = r0.<org.apache.lucene.util.BytesRef: int length>;

        if $i13 >= $i12 goto label01;

        $i35 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i36 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i35, 1);

        $r49 = newarray (byte)[$i36];

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] floorData> = $r49;

     label01:
        $r37 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i15 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $r36 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] floorData>;

        $i14 = r0.<org.apache.lucene.util.BytesRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r37, $i15, $r36, 0, $i14);

        $r39 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $r38 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] floorData>;

        $i16 = r0.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r39.<org.apache.lucene.store.ByteArrayDataInput: void reset(byte[],int,int)>($r38, 0, $i16);

        $r40 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $l17 = virtualinvoke $r40.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $l18 = $l17 & 1L;

        $b19 = $l18 cmp 0L;

        if $b19 == 0 goto label04;

        $r41 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $i20 = virtualinvoke $r41.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks> = $i20;

        $r42 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $b21 = virtualinvoke $r42.<org.apache.lucene.store.ByteArrayDataInput: byte readByte()>();

        $s41 = (short) $b21;

        $s22 = $s41 & 255;

        $i42 = (int) $s22;

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel> = $i42;

        $r43 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r44 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.util.automaton.RunAutomaton access$200(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r43);

        $i23 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int state>;

        $z1 = virtualinvoke $r44.<org.apache.lucene.util.automaton.RunAutomaton: boolean isAccept(int)>($i23);

        if $z1 != 0 goto label04;

     label02:
        $i37 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        if $i37 == 0 goto label04;

        $i24 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel>;

        $r45 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.util.automaton.Transition[] transitions>;

        $r46 = $r45[0];

        $i25 = virtualinvoke $r46.<org.apache.lucene.util.automaton.Transition: int getMin()>();

        if $i24 > $i25 goto label04;

        $l26 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fpOrig>;

        $r47 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $l27 = virtualinvoke $r47.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $l28 = $l27 >>> 1;

        $l29 = $l26 + $l28;

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fp> = $l29;

        $i30 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        $i31 = $i30 - 1;

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks> = $i31;

        $i32 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int numFollowFloorBlocks>;

        if $i32 == 0 goto label03;

        $r48 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput floorDataReader>;

        $b33 = virtualinvoke $r48.<org.apache.lucene.store.ByteArrayDataInput: byte readByte()>();

        $s43 = (short) $b33;

        $s34 = $s43 & 255;

        $i44 = (int) $s34;

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel> = $i44;

        goto label02;

     label03:
        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextFloorLabel> = 256;

        goto label02;

     label04:
        $r50 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r51 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r50);

        $l38 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fp>;

        virtualinvoke $r51.<org.apache.lucene.store.IndexInput: void seek(long)>($l38);

        $r52 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r53 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r52);

        $i39 = virtualinvoke $r53.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $i40 = $i39 >>> 1;

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int entCount> = $i40;

        $z2 = <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $i10 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int entCount>;

        if $i10 > 0 goto label05;

        $r54 = new java.lang.AssertionError;

        specialinvoke $r54.<java.lang.AssertionError: void <init>()>();

        throw $r54;

     label05:
        $i0 = $i39 & 1;

        if $i0 == 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean isLastInFloor> = $z3;

        $r2 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r3 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r2);

        $i1 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $i2 = $i1 & 1;

        if $i2 == 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean isLeafBlock> = $z4;

        $i9 = $i1 >>> 1;

        $r4 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] suffixBytes>;

        $i3 = lengthof $r4;

        if $i3 >= $i9 goto label10;

        $i8 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i9, 1);

        $r32 = newarray (byte)[$i8];

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] suffixBytes> = $r32;

     label10:
        $r5 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r6 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r5);

        $r7 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] suffixBytes>;

        virtualinvoke $r6.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>($r7, 0, $i9);

        $r9 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $r8 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] suffixBytes>;

        virtualinvoke $r9.<org.apache.lucene.store.ByteArrayDataInput: void reset(byte[],int,int)>($r8, 0, $i9);

        $r10 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r11 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r10);

        $i4 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r12 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] statBytes>;

        $i5 = lengthof $r12;

        if $i5 >= $i4 goto label11;

        $i7 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i4, 1);

        $r31 = newarray (byte)[$i7];

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] statBytes> = $r31;

     label11:
        $r13 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r14 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r13);

        $r15 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] statBytes>;

        virtualinvoke $r14.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>($r15, 0, $i4);

        $r17 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput statsReader>;

        $r16 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: byte[] statBytes>;

        virtualinvoke $r17.<org.apache.lucene.store.ByteArrayDataInput: void reset(byte[],int,int)>($r16, 0, $i4);

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int metaDataUpto> = 0;

        $r18 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $r18.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd> = 0;

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt> = 0;

        $r19 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r20 = $r19.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader this$1>;

        $r21 = $r20.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.codecs.BlockTreeTermsReader this$0>;

        $r22 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader: org.apache.lucene.codecs.PostingsReaderBase access$000(org.apache.lucene.codecs.BlockTreeTermsReader)>($r21);

        $r23 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r24 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r23);

        $r25 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r26 = $r25.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader this$1>;

        $r28 = $r26.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r27 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        virtualinvoke $r22.<org.apache.lucene.codecs.PostingsReaderBase: void readTermsBlock(org.apache.lucene.store.IndexInput,org.apache.lucene.index.FieldInfo,org.apache.lucene.codecs.BlockTermState)>($r24, $r28, $r27);

        $z0 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean isLastInFloor>;

        if $z0 != 0 goto label12;

        $r29 = r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r30 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.store.IndexInput access$300(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum)>($r29);

        $l6 = virtualinvoke $r30.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        r1.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fpEnd> = $l6;

     label12:
        return;
    }

    public boolean next()
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $z0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean isLeafBlock>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean nextLeaf()>();

        goto label2;

     label1:
        $z1 = virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean nextNonLeaf()>();

     label2:
        return $z1;
    }

    public boolean nextLeaf()
    {
        org.apache.lucene.store.ByteArrayDataInput $r1, $r2, $r3;
        long $l8;
        java.lang.AssertionError $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12;
        java.lang.String $r12;
        boolean $z0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i5 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $i12 = (int) -1;

        if $i5 == $i12 goto label1;

        $i10 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $i9 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int entCount>;

        if $i10 < $i9 goto label2;

     label1:
        $r14 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nextEnt=");

        $i6 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entCount=");

        $i7 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int entCount>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fp=");

        $l8 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fp>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r14;

     label2:
        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt> = $i1;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i2 = virtualinvoke $r1.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int suffix> = $i2;

        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i3 = virtualinvoke $r2.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int startBytePos> = $i3;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i4 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int suffix>;

        virtualinvoke $r3.<org.apache.lucene.store.ByteArrayDataInput: void skipBytes(int)>($i4);

        return 0;
    }

    public boolean nextNonLeaf()
    {
        org.apache.lucene.store.ByteArrayDataInput $r1, $r2, $r3, $r4;
        boolean $z0;
        org.apache.lucene.codecs.BlockTermState $r5;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r15;
        long $l7, $l8, $l9, $l15;
        java.lang.AssertionError $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19;
        java.lang.String $r14;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i12 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $i19 = (int) -1;

        if $i12 == $i19 goto label1;

        $i17 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $i16 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int entCount>;

        if $i17 < $i16 goto label2;

     label1:
        $r16 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nextEnt=");

        $i13 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entCount=");

        $i14 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int entCount>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fp=");

        $l15 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fp>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r16;

     label2:
        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt> = $i1;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i2 = virtualinvoke $r1.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        $i3 = $i2 >>> 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int suffix> = $i3;

        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i4 = virtualinvoke $r2.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int startBytePos> = $i4;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $i5 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int suffix>;

        virtualinvoke $r3.<org.apache.lucene.store.ByteArrayDataInput: void skipBytes(int)>($i5);

        $i6 = $i2 & 1;

        if $i6 != 0 goto label3;

        $r5 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $i10 = $r5.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd>;

        $i11 = $i10 + 1;

        $r5.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd> = $i11;

        return 0;

     label3:
        $l7 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long fp>;

        $r4 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput suffixesReader>;

        $l8 = virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $l9 = $l7 - $l8;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: long lastSubFP> = $l9;

        return 1;
    }

    public int getTermBlockOrd()
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        org.apache.lucene.codecs.BlockTermState $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $z0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean isLeafBlock>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int nextEnt>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $i0 = $r1.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd>;

     label2:
        return $i0;
    }

    public void decodeMetaData() throws java.io.IOException
    {
        org.apache.lucene.store.ByteArrayDataInput $r2, $r19;
        boolean $z0;
        org.apache.lucene.index.FieldInfo$IndexOptions $r7, $r8;
        org.apache.lucene.codecs.BlockTermState $r1, $r3, $r15, $r17, $r18, $r20;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;
        org.apache.lucene.codecs.BlockTreeTermsReader $r11;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader $r5, $r10, $r14;
        long $l8, $l9, $l10;
        java.lang.AssertionError $r21;
        org.apache.lucene.codecs.PostingsReaderBase $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i11;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum $r4, $r9, $r13;
        org.apache.lucene.index.FieldInfo $r6, $r16;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $i0 = virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int getTermBlockOrd()>();

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 > 0 goto label1;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label1:
        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $i1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int metaDataUpto>;

        $r1.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd> = $i1;

     label2:
        $i11 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int metaDataUpto>;

        if $i11 >= $i0 goto label4;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput statsReader>;

        $i2 = virtualinvoke $r2.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        $r3.<org.apache.lucene.codecs.BlockTermState: int docFreq> = $i2;

        $r4 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r5 = $r4.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader this$1>;

        $r6 = $r5.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r8 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r7 == $r8 goto label3;

        $r20 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $r18 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $i7 = $r18.<org.apache.lucene.codecs.BlockTermState: int docFreq>;

        $l8 = (long) $i7;

        $r19 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.store.ByteArrayDataInput statsReader>;

        $l9 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $l10 = $l8 + $l9;

        $r20.<org.apache.lucene.codecs.BlockTermState: long totalTermFreq> = $l10;

     label3:
        $r9 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r10 = $r9.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader this$1>;

        $r11 = $r10.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.codecs.BlockTreeTermsReader this$0>;

        $r12 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsReader: org.apache.lucene.codecs.PostingsReaderBase access$000(org.apache.lucene.codecs.BlockTreeTermsReader)>($r11);

        $r13 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum this$2>;

        $r14 = $r13.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader this$1>;

        $r16 = $r14.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r15 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        virtualinvoke $r12.<org.apache.lucene.codecs.PostingsReaderBase: void nextTerm(org.apache.lucene.index.FieldInfo,org.apache.lucene.codecs.BlockTermState)>($r16, $r15);

        $i3 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int metaDataUpto>;

        $i4 = $i3 + 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int metaDataUpto> = $i4;

        $r17 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: org.apache.lucene.codecs.BlockTermState termState>;

        $i5 = $r17.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd>;

        $i6 = $i5 + 1;

        $r17.<org.apache.lucene.codecs.BlockTermState: int termBlockOrd> = $i6;

        goto label2;

     label4:
        return;
    }

    static int access$600(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame)
    {
        int $i0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int suffix>;

        return $i0;
    }

    static int access$700(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame)
    {
        int $i0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int startBytePos>;

        return $i0;
    }

    static int access$702(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame, int)
    {
        int i0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int startBytePos> = i0;

        return i0;
    }

    static int access$602(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame, int)
    {
        int i0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame r0;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: int suffix> = i0;

        return i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame: boolean $assertionsDisabled> = $z1;

        return;
    }
}
