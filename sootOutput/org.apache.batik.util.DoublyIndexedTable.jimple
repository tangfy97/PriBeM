public class org.apache.batik.util.DoublyIndexedTable extends java.lang.Object
{
    protected int initialCapacity;
    protected org.apache.batik.util.DoublyIndexedTable$Entry[] table;
    protected int count;

    public void <init>()
    {
        org.apache.batik.util.DoublyIndexedTable r0;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        specialinvoke r0.<org.apache.batik.util.DoublyIndexedTable: void <init>(int)>(16);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r1;
        org.apache.batik.util.DoublyIndexedTable r0;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.util.DoublyIndexedTable: int initialCapacity> = i0;

        $r1 = newarray (org.apache.batik.util.DoublyIndexedTable$Entry)[i0];

        r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table> = $r1;

        return;
    }

    public void <init>(org.apache.batik.util.DoublyIndexedTable)
    {
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.apache.batik.util.DoublyIndexedTable r0, r1;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r2, $r3, $r4, $r5, $r10;
        java.lang.Object $r7, $r8, $r9;
        org.apache.batik.util.DoublyIndexedTable$Entry $r6, r11, r12;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        r1 := @parameter0: org.apache.batik.util.DoublyIndexedTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = r1.<org.apache.batik.util.DoublyIndexedTable: int initialCapacity>;

        r0.<org.apache.batik.util.DoublyIndexedTable: int initialCapacity> = $i0;

        $r2 = r1.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i1 = lengthof $r2;

        $r3 = newarray (org.apache.batik.util.DoublyIndexedTable$Entry)[$i1];

        r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table> = $r3;

        i5 = 0;

        goto label4;

     label1:
        r11 = null;

        $r5 = r1.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        r12 = $r5[i5];

        goto label3;

     label2:
        $r6 = new org.apache.batik.util.DoublyIndexedTable$Entry;

        $i3 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: int hash>;

        $r9 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object key1>;

        $r8 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object key2>;

        $r7 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value>;

        specialinvoke $r6.<org.apache.batik.util.DoublyIndexedTable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.DoublyIndexedTable$Entry)>($i3, $r9, $r8, $r7, r11);

        r11 = $r6;

        r12 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

     label3:
        if r12 != null goto label2;

        $r10 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $r10[i5] = r11;

        i5 = i5 + 1;

     label4:
        $r4 = r1.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i2 = lengthof $r4;

        if i5 < $i2 goto label1;

        $i4 = r1.<org.apache.batik.util.DoublyIndexedTable: int count>;

        r0.<org.apache.batik.util.DoublyIndexedTable: int count> = $i4;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.batik.util.DoublyIndexedTable r0;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        $i0 = r0.<org.apache.batik.util.DoublyIndexedTable: int count>;

        return $i0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        boolean $z0;
        org.apache.batik.util.DoublyIndexedTable r0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r3, $r4, $r6, $r8, $r10, $r11;
        java.lang.Object r1, r2, r5, r13;
        org.apache.batik.util.DoublyIndexedTable$Entry $r7, $r9, r12;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.batik.util.DoublyIndexedTable: int hashCode(java.lang.Object,java.lang.Object)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i2 = lengthof $r3;

        i9 = i1 % $i2;

        $r4 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        r12 = $r4[i9];

        goto label3;

     label1:
        $i3 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: int hash>;

        if $i3 != i1 goto label2;

        $z0 = virtualinvoke r12.<org.apache.batik.util.DoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        r13 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value>;

        r12.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value> = r5;

        return r13;

     label2:
        r12 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

     label3:
        if r12 != null goto label1;

        $r6 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        i10 = lengthof $r6;

        $i4 = r0.<org.apache.batik.util.DoublyIndexedTable: int count>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.util.DoublyIndexedTable: int count> = $i5;

        $i6 = i10 >> 2;

        $i7 = i10 - $i6;

        if $i4 < $i7 goto label4;

        virtualinvoke r0.<org.apache.batik.util.DoublyIndexedTable: void rehash()>();

        $r11 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i8 = lengthof $r11;

        i9 = i1 % $i8;

     label4:
        $r7 = new org.apache.batik.util.DoublyIndexedTable$Entry;

        $r8 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $r9 = $r8[i9];

        specialinvoke $r7.<org.apache.batik.util.DoublyIndexedTable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.DoublyIndexedTable$Entry)>(i1, r1, r2, r5, $r9);

        $r10 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $r10[i9] = $r7;

        return null;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        org.apache.batik.util.DoublyIndexedTable r0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r3, $r4;
        int $i0, i1, $i2, i3, $i4;
        java.lang.Object r1, r2, $r5;
        org.apache.batik.util.DoublyIndexedTable$Entry r6;
        boolean $z0;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.batik.util.DoublyIndexedTable: int hashCode(java.lang.Object,java.lang.Object)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i2 = lengthof $r3;

        i3 = i1 % $i2;

        $r4 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        r6 = $r4[i3];

        goto label3;

     label1:
        $i4 = r6.<org.apache.batik.util.DoublyIndexedTable$Entry: int hash>;

        if $i4 != i1 goto label2;

        $z0 = virtualinvoke r6.<org.apache.batik.util.DoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        $r5 = r6.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value>;

        return $r5;

     label2:
        r6 = r6.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

     label3:
        if r6 != null goto label1;

        return null;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1;
        org.apache.batik.util.DoublyIndexedTable r0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r3, $r4, $r8;
        java.lang.Object r1, r2, $r6, $r9;
        org.apache.batik.util.DoublyIndexedTable$Entry $r5, $r7, r10, r11, r12;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.batik.util.DoublyIndexedTable: int hashCode(java.lang.Object,java.lang.Object)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i2 = lengthof $r3;

        i3 = i1 % $i2;

        $r4 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        r10 = $r4[i3];

        if r10 != null goto label1;

        return null;

     label1:
        $i4 = r10.<org.apache.batik.util.DoublyIndexedTable$Entry: int hash>;

        if $i4 != i1 goto label2;

        $z1 = virtualinvoke r10.<org.apache.batik.util.DoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $r7 = r10.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

        $r8[i3] = $r7;

        $i8 = r0.<org.apache.batik.util.DoublyIndexedTable: int count>;

        $i9 = $i8 - 1;

        r0.<org.apache.batik.util.DoublyIndexedTable: int count> = $i9;

        $r9 = r10.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value>;

        return $r9;

     label2:
        r11 = r10;

        r12 = r10.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

        goto label5;

     label3:
        $i5 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: int hash>;

        if $i5 != i1 goto label4;

        $z0 = virtualinvoke r12.<org.apache.batik.util.DoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label4;

        $r5 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

        r11.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next> = $r5;

        $i6 = r0.<org.apache.batik.util.DoublyIndexedTable: int count>;

        $i7 = $i6 - 1;

        r0.<org.apache.batik.util.DoublyIndexedTable: int count> = $i7;

        $r6 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value>;

        return $r6;

     label4:
        r11 = r12;

        r12 = r12.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

     label5:
        if r12 != null goto label3;

        return null;
    }

    public java.lang.Object[] getValuesArray()
    {
        java.lang.Object[] r1;
        org.apache.batik.util.DoublyIndexedTable r0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r2, $r3;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r4;
        org.apache.batik.util.DoublyIndexedTable$Entry r5;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        $i0 = r0.<org.apache.batik.util.DoublyIndexedTable: int count>;

        r1 = newarray (java.lang.Object)[$i0];

        i3 = 0;

        i4 = 0;

        goto label4;

     label1:
        $r3 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        r5 = $r3[i4];

        goto label3;

     label2:
        $i2 = i3;

        i3 = i3 + 1;

        $r4 = r5.<org.apache.batik.util.DoublyIndexedTable$Entry: java.lang.Object value>;

        r1[$i2] = $r4;

        r5 = r5.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

     label3:
        if r5 != null goto label2;

        i4 = i4 + 1;

     label4:
        $r2 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i1 = lengthof $r2;

        if i4 < $i1 goto label1;

        return r1;
    }

    public void clear()
    {
        int $i0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] $r1;
        org.apache.batik.util.DoublyIndexedTable r0;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        $i0 = r0.<org.apache.batik.util.DoublyIndexedTable: int initialCapacity>;

        $r1 = newarray (org.apache.batik.util.DoublyIndexedTable$Entry)[$i0];

        r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table> = $r1;

        r0.<org.apache.batik.util.DoublyIndexedTable: int count> = 0;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.batik.util.DoublyIndexedTable$TableIterator $r0;
        org.apache.batik.util.DoublyIndexedTable r1;

        r1 := @this: org.apache.batik.util.DoublyIndexedTable;

        $r0 = new org.apache.batik.util.DoublyIndexedTable$TableIterator;

        specialinvoke $r0.<org.apache.batik.util.DoublyIndexedTable$TableIterator: void <init>(org.apache.batik.util.DoublyIndexedTable)>(r1);

        return $r0;
    }

    protected void rehash()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        org.apache.batik.util.DoublyIndexedTable r0;
        org.apache.batik.util.DoublyIndexedTable$Entry[] r1, $r2, $r4, $r5, $r7;
        org.apache.batik.util.DoublyIndexedTable$Entry r3, $r6, r8;

        r0 := @this: org.apache.batik.util.DoublyIndexedTable;

        r1 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        $i2 = $i1 + 1;

        $r2 = newarray (org.apache.batik.util.DoublyIndexedTable$Entry)[$i2];

        r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table> = $r2;

        $i3 = lengthof r1;

        i7 = $i3 - 1;

        goto label4;

     label1:
        r8 = r1[i7];

        goto label3;

     label2:
        r3 = r8;

        r8 = r8.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next>;

        $i5 = r3.<org.apache.batik.util.DoublyIndexedTable$Entry: int hash>;

        $r4 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $i4 = lengthof $r4;

        i6 = $i5 % $i4;

        $r5 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $r6 = $r5[i6];

        r3.<org.apache.batik.util.DoublyIndexedTable$Entry: org.apache.batik.util.DoublyIndexedTable$Entry next> = $r6;

        $r7 = r0.<org.apache.batik.util.DoublyIndexedTable: org.apache.batik.util.DoublyIndexedTable$Entry[] table>;

        $r7[i6] = r3;

     label3:
        if r8 != null goto label2;

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label4:
        if i7 >= 0 goto label1;

        return;
    }

    protected int hashCode(java.lang.Object, java.lang.Object)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0, r1;
        org.apache.batik.util.DoublyIndexedTable r2;

        r2 := @this: org.apache.batik.util.DoublyIndexedTable;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        $i1 = $i2;

        if r1 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label4:
        $i0 = $i1 ^ $i3;

        return $i0;
    }
}
