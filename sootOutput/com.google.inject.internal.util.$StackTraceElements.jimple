public class com.google.inject.internal.util.$StackTraceElements extends java.lang.Object
{
    static final java.util.Map lineNumbersCache;

    public void <init>()
    {
        com.google.inject.internal.util.$StackTraceElements r0;

        r0 := @this: com.google.inject.internal.util.$StackTraceElements;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object forMember(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;
        java.lang.Integer $r6;
        com.google.inject.internal.util.$LineNumbers r4;
        java.util.Map $r2;
        int i0, $i1;
        java.lang.Class $r1, $r7;
        java.lang.Object $r3, $r10;
        java.lang.StackTraceElement $r8;
        java.lang.String $r5, $r9, $r11;

        r0 := @parameter0: java.lang.reflect.Member;

        if r0 != null goto label1;

        $r10 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        return $r10;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r2 = <com.google.inject.internal.util.$StackTraceElements: java.util.Map lineNumbersCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.google.inject.internal.util.$LineNumbers) $r3;

        $r5 = virtualinvoke r4.<com.google.inject.internal.util.$LineNumbers: java.lang.String getSource()>();

        $r6 = virtualinvoke r4.<com.google.inject.internal.util.$LineNumbers: java.lang.Integer getLineNumber(java.lang.reflect.Member)>(r0);

        if $r6 != null goto label2;

        $i1 = virtualinvoke r4.<com.google.inject.internal.util.$LineNumbers: int getFirstLine()>();

        goto label3;

     label2:
        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label3:
        i0 = $i1;

        $r7 = staticinvoke <com.google.inject.internal.util.$Classes: java.lang.Class memberType(java.lang.reflect.Member)>(r0);

        if $r7 != class "Ljava/lang/reflect/Constructor;" goto label4;

        $r11 = "<init>";

        goto label5;

     label4:
        $r11 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

     label5:
        $r8 = new java.lang.StackTraceElement;

        $r9 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r8.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r9, $r11, $r5, i0);

        return $r8;
    }

    public static java.lang.Object forType(java.lang.Class)
    {
        com.google.inject.internal.util.$LineNumbers r3;
        java.util.Map $r1;
        int $i0;
        java.lang.Class r0;
        java.lang.Object $r2;
        java.lang.StackTraceElement $r5;
        java.lang.String $r4, $r6;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.inject.internal.util.$StackTraceElements: java.util.Map lineNumbersCache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (com.google.inject.internal.util.$LineNumbers) $r2;

        $i0 = virtualinvoke r3.<com.google.inject.internal.util.$LineNumbers: int getFirstLine()>();

        $r4 = virtualinvoke r3.<com.google.inject.internal.util.$LineNumbers: java.lang.String getSource()>();

        $r5 = new java.lang.StackTraceElement;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r5.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r6, "class", $r4, $i0);

        return $r5;
    }

    static void <clinit>()
    {
        com.google.inject.internal.util.$MapMaker $r0, $r1, $r2;
        com.google.inject.internal.util.$StackTraceElements$1 $r3;
        java.util.concurrent.ConcurrentMap $r4;

        $r0 = new com.google.inject.internal.util.$MapMaker;

        specialinvoke $r0.<com.google.inject.internal.util.$MapMaker: void <init>()>();

        $r1 = virtualinvoke $r0.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker weakKeys()>();

        $r2 = virtualinvoke $r1.<com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker softValues()>();

        $r3 = new com.google.inject.internal.util.$StackTraceElements$1;

        specialinvoke $r3.<com.google.inject.internal.util.$StackTraceElements$1: void <init>()>();

        $r4 = virtualinvoke $r2.<com.google.inject.internal.util.$MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.inject.internal.util.$Function)>($r3);

        <com.google.inject.internal.util.$StackTraceElements: java.util.Map lineNumbersCache> = $r4;

        return;
    }
}
