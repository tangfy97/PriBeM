public final class org.waveprotocol.wave.model.util.ConcurrentList extends java.lang.Object implements java.lang.Iterable
{
    private org.waveprotocol.wave.model.util.ConcurrentList$Node start;

    public void <init>()
    {
        org.waveprotocol.wave.model.util.ConcurrentList r0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.util.ConcurrentList create()
    {
        org.waveprotocol.wave.model.util.ConcurrentList $r0;

        $r0 = new org.waveprotocol.wave.model.util.ConcurrentList;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.ConcurrentList: void <init>()>();

        return $r0;
    }

    public void add(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.util.ConcurrentList r0;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        if $r1 != null goto label1;

        $r8 = new org.waveprotocol.wave.model.util.ConcurrentList$Node;

        specialinvoke $r8.<org.waveprotocol.wave.model.util.ConcurrentList$Node: void <init>(org.waveprotocol.wave.model.util.ConcurrentList$Node,org.waveprotocol.wave.model.util.ConcurrentList$Node,java.lang.Object)>(null, null, r3);

        r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start> = $r8;

        goto label2;

     label1:
        $r2 = new org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r4 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.ConcurrentList$Node: void <init>(org.waveprotocol.wave.model.util.ConcurrentList$Node,org.waveprotocol.wave.model.util.ConcurrentList$Node,java.lang.Object)>(null, $r4, r3);

        r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start> = $r2;

        $r5 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node access$200(org.waveprotocol.wave.model.util.ConcurrentList$Node)>($r5);

        $r7 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        staticinvoke <org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node access$302(org.waveprotocol.wave.model.util.ConcurrentList$Node,org.waveprotocol.wave.model.util.ConcurrentList$Node)>($r6, $r7);

     label2:
        return;
    }

    public void remove(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.ConcurrentList r0;
        org.waveprotocol.wave.model.util.ConcurrentList$Node r3;
        java.lang.Object $r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList;

        r2 := @parameter0: java.lang.Object;

        r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

     label1:
        if r3 == null goto label3;

        $r1 = virtualinvoke r3.<org.waveprotocol.wave.model.util.ConcurrentList$Node: java.lang.Object data()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        r3 = virtualinvoke r3.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next()>();

        goto label1;

     label3:
        if r3 == null goto label4;

        specialinvoke r0.<org.waveprotocol.wave.model.util.ConcurrentList: void remove(org.waveprotocol.wave.model.util.ConcurrentList$Node)>(r3);

     label4:
        return;
    }

    private void remove(org.waveprotocol.wave.model.util.ConcurrentList$Node)
    {
        org.waveprotocol.wave.model.util.ConcurrentList r1;
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, $r2, $r3, $r4;

        r1 := @this: org.waveprotocol.wave.model.util.ConcurrentList;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r2 = r1.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        if r0 != $r2 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next()>();

        r1.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start> = $r4;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: void remove()>();

        return;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.util.ConcurrentList r0;
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.waveprotocol.wave.model.util.ConcurrentList r1;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator $r0;

        r1 := @this: org.waveprotocol.wave.model.util.ConcurrentList;

        $r0 = new org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: void <init>(org.waveprotocol.wave.model.util.ConcurrentList,org.waveprotocol.wave.model.util.ConcurrentList$1)>(r1, null);

        return $r0;
    }

    static org.waveprotocol.wave.model.util.ConcurrentList$Node access$000(org.waveprotocol.wave.model.util.ConcurrentList)
    {
        org.waveprotocol.wave.model.util.ConcurrentList r0;
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node start>;

        return $r1;
    }

    static void access$100(org.waveprotocol.wave.model.util.ConcurrentList, org.waveprotocol.wave.model.util.ConcurrentList$Node)
    {
        org.waveprotocol.wave.model.util.ConcurrentList r0;
        org.waveprotocol.wave.model.util.ConcurrentList$Node r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        specialinvoke r0.<org.waveprotocol.wave.model.util.ConcurrentList: void remove(org.waveprotocol.wave.model.util.ConcurrentList$Node)>(r1);

        return;
    }
}
