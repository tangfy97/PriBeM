public abstract class org.springframework.scheduling.support.TaskUtils extends java.lang.Object
{
    public static final org.springframework.util.ErrorHandler LOG_AND_SUPPRESS_ERROR_HANDLER;
    public static final org.springframework.util.ErrorHandler LOG_AND_PROPAGATE_ERROR_HANDLER;

    static void <clinit>()
    {
        org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler $r0;
        org.springframework.scheduling.support.TaskUtils$PropagatingErrorHandler $r1;

        $r0 = new org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler;

        specialinvoke $r0.<org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler: void <init>()>();

        <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler LOG_AND_SUPPRESS_ERROR_HANDLER> = $r0;

        $r1 = new org.springframework.scheduling.support.TaskUtils$PropagatingErrorHandler;

        specialinvoke $r1.<org.springframework.scheduling.support.TaskUtils$PropagatingErrorHandler: void <init>()>();

        <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler LOG_AND_PROPAGATE_ERROR_HANDLER> = $r1;

        return;
    }

    public void <init>()
    {
        org.springframework.scheduling.support.TaskUtils r0;

        r0 := @this: org.springframework.scheduling.support.TaskUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.springframework.scheduling.support.DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(java.lang.Runnable, org.springframework.util.ErrorHandler, boolean)
    {
        org.springframework.util.ErrorHandler r1, $r4;
        java.lang.Runnable r0;
        boolean $z0, z1;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable $r2, $r3;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: org.springframework.util.ErrorHandler;

        z1 := @parameter2: boolean;

        $z0 = r0 instanceof org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

        if $z0 == 0 goto label1;

        $r3 = (org.springframework.scheduling.support.DelegatingErrorHandlingRunnable) r0;

        return $r3;

     label1:
        if r1 == null goto label2;

        $r4 = r1;

        goto label3;

     label2:
        $r4 = staticinvoke <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean)>(z1);

     label3:
        $r2 = new org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

        specialinvoke $r2.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: void <init>(java.lang.Runnable,org.springframework.util.ErrorHandler)>(r0, $r4);

        return $r2;
    }

    public static org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean)
    {
        org.springframework.util.ErrorHandler $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler LOG_AND_SUPPRESS_ERROR_HANDLER>;

        goto label2;

     label1:
        $r0 = <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler LOG_AND_PROPAGATE_ERROR_HANDLER>;

     label2:
        return $r0;
    }
}
