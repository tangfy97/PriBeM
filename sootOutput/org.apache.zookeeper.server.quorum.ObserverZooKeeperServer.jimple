public class org.apache.zookeeper.server.quorum.ObserverZooKeeperServer extends org.apache.zookeeper.server.quorum.LearnerZooKeeperServer
{
    private static final org.slf4j.Logger LOG;
    private org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor;
    private org.apache.zookeeper.server.SyncRequestProcessor syncProcessor;
    java.util.concurrent.ConcurrentLinkedQueue pendingSyncs;

    void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, org.apache.zookeeper.server.quorum.QuorumPeer, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder, org.apache.zookeeper.server.ZKDatabase) throws java.io.IOException
    {
        org.apache.zookeeper.server.quorum.QuorumPeer r2;
        org.apache.zookeeper.server.ZKDatabase r4;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r3;
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r0;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;
        int $i0, $i1, $i2;
        java.util.concurrent.ConcurrentLinkedQueue $r5;

        r0 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        r2 := @parameter1: org.apache.zookeeper.server.quorum.QuorumPeer;

        r3 := @parameter2: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        r4 := @parameter3: org.apache.zookeeper.server.ZKDatabase;

        $i2 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int tickTime>;

        $i1 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int minSessionTimeout>;

        $i0 = r2.<org.apache.zookeeper.server.quorum.QuorumPeer: int maxSessionTimeout>;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,int,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder,org.apache.zookeeper.server.ZKDatabase,org.apache.zookeeper.server.quorum.QuorumPeer)>(r1, $i2, $i1, $i0, r3, r4, r2);

        $r5 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r5.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: java.util.concurrent.ConcurrentLinkedQueue pendingSyncs> = $r5;

        return;
    }

    public org.apache.zookeeper.server.quorum.Observer getObserver()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.Observer $r2;

        r0 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r2 = $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.Observer observer>;

        return $r2;
    }

    public org.apache.zookeeper.server.quorum.Learner getLearner()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.Observer $r2;

        r0 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r2 = $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.Observer observer>;

        return $r2;
    }

    public void commitRequest(org.apache.zookeeper.server.Request)
    {
        org.apache.zookeeper.server.Request r1;
        org.apache.zookeeper.server.quorum.CommitProcessor $r2;
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.Request;

        $r2 = r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor>;

        virtualinvoke $r2.<org.apache.zookeeper.server.quorum.CommitProcessor: void commit(org.apache.zookeeper.server.Request)>(r1);

        return;
    }

    protected void setupRequestProcessors()
    {
        org.apache.zookeeper.server.quorum.SendAckRequestProcessor $r10;
        org.apache.zookeeper.server.quorum.Observer $r11;
        long $l0;
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r1;
        org.apache.zookeeper.server.FinalRequestProcessor $r0;
        org.apache.zookeeper.server.SyncRequestProcessor $r9, $r12;
        org.apache.zookeeper.server.quorum.ObserverRequestProcessor $r5, $r8;
        org.apache.zookeeper.server.quorum.CommitProcessor $r2, $r4, $r6;
        java.lang.String $r3;
        org.apache.zookeeper.server.RequestProcessor $r7;

        r1 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        $r0 = new org.apache.zookeeper.server.FinalRequestProcessor;

        specialinvoke $r0.<org.apache.zookeeper.server.FinalRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer)>(r1);

        $r2 = new org.apache.zookeeper.server.quorum.CommitProcessor;

        $l0 = virtualinvoke r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: long getServerId()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r2.<org.apache.zookeeper.server.quorum.CommitProcessor: void <init>(org.apache.zookeeper.server.RequestProcessor,java.lang.String,boolean)>($r0, $r3, 1);

        r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor> = $r2;

        $r4 = r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor>;

        virtualinvoke $r4.<org.apache.zookeeper.server.quorum.CommitProcessor: void start()>();

        $r5 = new org.apache.zookeeper.server.quorum.ObserverRequestProcessor;

        $r6 = r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor>;

        specialinvoke $r5.<org.apache.zookeeper.server.quorum.ObserverRequestProcessor: void <init>(org.apache.zookeeper.server.quorum.ObserverZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r6);

        r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor> = $r5;

        $r7 = r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.RequestProcessor firstProcessor>;

        $r8 = (org.apache.zookeeper.server.quorum.ObserverRequestProcessor) $r7;

        virtualinvoke $r8.<org.apache.zookeeper.server.quorum.ObserverRequestProcessor: void start()>();

        $r9 = new org.apache.zookeeper.server.SyncRequestProcessor;

        $r10 = new org.apache.zookeeper.server.quorum.SendAckRequestProcessor;

        $r11 = virtualinvoke r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.Observer getObserver()>();

        specialinvoke $r10.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: void <init>(org.apache.zookeeper.server.quorum.Learner)>($r11);

        specialinvoke $r9.<org.apache.zookeeper.server.SyncRequestProcessor: void <init>(org.apache.zookeeper.server.ZooKeeperServer,org.apache.zookeeper.server.RequestProcessor)>(r1, $r10);

        r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.SyncRequestProcessor syncProcessor> = $r9;

        $r12 = r1.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.SyncRequestProcessor syncProcessor>;

        virtualinvoke $r12.<org.apache.zookeeper.server.SyncRequestProcessor: void start()>();

        return;
    }

    public synchronized void sync()
    {
        org.slf4j.Logger $r6;
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r0;
        org.apache.zookeeper.server.Request r4;
        org.apache.zookeeper.server.quorum.CommitProcessor $r5;
        int $i0;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentLinkedQueue $r1, $r2;

        r0 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: java.util.concurrent.ConcurrentLinkedQueue pendingSyncs>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: int size()>();

        if $i0 != 0 goto label1;

        $r6 = <org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>("Not expecting a sync.");

        return;

     label1:
        $r2 = r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: java.util.concurrent.ConcurrentLinkedQueue pendingSyncs>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object remove()>();

        r4 = (org.apache.zookeeper.server.Request) $r3;

        $r5 = r0.<org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.apache.zookeeper.server.quorum.CommitProcessor commitProcessor>;

        virtualinvoke $r5.<org.apache.zookeeper.server.quorum.CommitProcessor: void commit(org.apache.zookeeper.server.Request)>(r4);

        return;
    }

    public java.lang.String getState()
    {
        org.apache.zookeeper.server.quorum.ObserverZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.ObserverZooKeeperServer;

        return "observer";
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/quorum/ObserverZooKeeperServer;");

        <org.apache.zookeeper.server.quorum.ObserverZooKeeperServer: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
