public class org.apache.xml.utils.DOMHelper extends java.lang.Object
{
    java.util.Hashtable m_NSInfos;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS;
    protected java.util.Vector m_candidateNoAncestorXMLNS;
    protected org.w3c.dom.Document m_DOMFactory;

    public void <init>()
    {
        org.apache.xml.utils.DOMHelper r0;
        java.util.Vector $r2;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS> = $r2;

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = null;

        return;
    }

    public static org.w3c.dom.Document createDocument()
    {
        javax.xml.parsers.ParserConfigurationException $r3;
        org.w3c.dom.Document $r2;
        javax.xml.parsers.DocumentBuilder $r1;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(1);

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r2 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        return $r2;

     label2:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CREATEDOCUMENT_NOT_SUPPORTED", null);

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label2;
    }

    public boolean shouldStripSourceNode(org.w3c.dom.Node) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        return 0;
    }

    public java.lang.String getUniqueID(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r7;
        java.lang.StringBuffer $r0, $r1, $r5;
        org.w3c.dom.Node r2;
        int $i0;
        java.lang.String $r3, $r4, $r6;

        r7 := @this: org.apache.xml.utils.DOMHelper;

        r2 := @parameter0: org.w3c.dom.Node;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("N");

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static boolean isNodeAfter(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, $r2, $r3, r4, r5, r6, r7, r8, r9;
        int i0, i1, i2, i3, i4, i5;
        boolean $z0, $z1, $z2, z3, $z4;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        if r0 == r1 goto label01;

        $z0 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r1);

        if $z0 == 0 goto label02;

     label01:
        return 1;

     label02:
        z3 = 1;

        $r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r0);

        r4 = $r2;

        $r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        r5 = $r3;

        if $r2 == $r3 goto label03;

        $z1 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>($r2, $r3);

        if $z1 == 0 goto label04;

     label03:
        if null == $r2 goto label22;

        z3 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfterSibling(org.w3c.dom.Node,org.w3c.dom.Node,org.w3c.dom.Node)>($r2, r0, r1);

        goto label22;

     label04:
        i0 = 2;

        i1 = 2;

        goto label06;

     label05:
        i0 = i0 + 1;

        r4 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r4);

     label06:
        if r4 != null goto label05;

        goto label08;

     label07:
        i1 = i1 + 1;

        r5 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r5);

     label08:
        if r5 != null goto label07;

        r6 = r0;

        r7 = r1;

        if i0 >= i1 goto label11;

        i2 = i1 - i0;

        i3 = 0;

        goto label10;

     label09:
        r7 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r7);

        i3 = i3 + 1;

     label10:
        if i3 < i2 goto label09;

        goto label14;

     label11:
        if i0 <= i1 goto label14;

        i4 = i0 - i1;

        i5 = 0;

        goto label13;

     label12:
        r6 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r6);

        i5 = i5 + 1;

     label13:
        if i5 < i4 goto label12;

     label14:
        r8 = null;

        r9 = null;

        goto label21;

     label15:
        if r6 == r7 goto label16;

        $z2 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r6, r7);

        if $z2 == 0 goto label20;

     label16:
        if null != r8 goto label19;

        if i0 >= i1 goto label17;

        $z4 = 1;

        goto label18;

     label17:
        $z4 = 0;

     label18:
        z3 = $z4;

        goto label22;

     label19:
        z3 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfterSibling(org.w3c.dom.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r6, r8, r9);

        goto label22;

     label20:
        r8 = r6;

        r6 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r6);

        r9 = r7;

        r7 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r7);

     label21:
        if null != r6 goto label15;

     label22:
        return z3;
    }

    public static boolean isNodeTheSame(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1;
        org.apache.xml.dtm.ref.DTMNodeProxy $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z1 == 0 goto label1;

        $r3 = (org.apache.xml.dtm.ref.DTMNodeProxy) r0;

        $r2 = (org.apache.xml.dtm.ref.DTMNodeProxy) r1;

        $z2 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMNodeProxy: boolean equals(org.w3c.dom.Node)>($r2);

        return $z2;

     label1:
        if r0 != r1 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static boolean isNodeAfterSibling(org.w3c.dom.Node, org.w3c.dom.Node, org.w3c.dom.Node)
    {
        short $s0, $s1;
        org.w3c.dom.Node r0, r1, r2, $r4, r5;
        int $i2, i3, $i4, $i5, $i6, $i7, $i8;
        org.w3c.dom.NamedNodeMap $r3;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, z7, z8;

        r2 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: org.w3c.dom.Node;

        z4 = 0;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s0;

        if 2 == $i4 goto label01;

        $i5 = (int) $s1;

        if 2 != $i5 goto label01;

        z4 = 0;

        goto label21;

     label01:
        $i6 = (int) $s0;

        if 2 != $i6 goto label02;

        $i7 = (int) $s1;

        if 2 == $i7 goto label02;

        z4 = 1;

        goto label21;

     label02:
        $i8 = (int) $s0;

        if 2 != $i8 goto label12;

        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i2 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: int getLength()>();

        z5 = 0;

        z6 = 0;

        i3 = 0;

        goto label10;

     label03:
        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        if r0 == $r4 goto label04;

        $z2 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r4);

        if $z2 == 0 goto label06;

     label04:
        if z6 == 0 goto label05;

        z4 = 0;

        goto label11;

     label05:
        z5 = 1;

        goto label09;

     label06:
        if r1 == $r4 goto label07;

        $z3 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, $r4);

        if $z3 == 0 goto label09;

     label07:
        if z5 == 0 goto label08;

        z4 = 1;

        goto label11;

     label08:
        z6 = 1;

     label09:
        i3 = i3 + 1;

     label10:
        if i3 < $i2 goto label03;

     label11:
        goto label21;

     label12:
        r5 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        z7 = 0;

        z8 = 0;

        goto label20;

     label13:
        if r0 == r5 goto label14;

        $z0 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r5);

        if $z0 == 0 goto label16;

     label14:
        if z8 == 0 goto label15;

        z4 = 0;

        goto label21;

     label15:
        z7 = 1;

        goto label19;

     label16:
        if r1 == r5 goto label17;

        $z1 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, r5);

        if $z1 == 0 goto label19;

     label17:
        if z7 == 0 goto label18;

        z4 = 1;

        goto label21;

     label18:
        z8 = 1;

     label19:
        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label20:
        if null != r5 goto label13;

     label21:
        return z4;
    }

    public short getLevel(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r1;
        short s1;
        org.w3c.dom.Node $r0, r2;
        int $i0;

        r1 := @this: org.apache.xml.utils.DOMHelper;

        r2 := @parameter0: org.w3c.dom.Node;

        s1 = 1;

        goto label2;

     label1:
        $i0 = s1 + 1;

        s1 = (short) $i0;

     label2:
        $r0 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r2);

        r2 = $r0;

        if null != $r0 goto label1;

        return s1;
    }

    public java.lang.String getNamespaceForPrefix(java.lang.String, org.w3c.dom.Element)
    {
        org.w3c.dom.Attr $r7;
        short $s0;
        java.lang.StringBuffer $r3, $r4, $r12;
        org.w3c.dom.Node r9;
        int $i1;
        java.lang.String r1, r5, r10, $r11;
        boolean $z0, $z1;
        org.apache.xml.utils.DOMHelper r8;
        org.w3c.dom.Element r0, $r6;

        r8 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Element;

        r9 = r0;

        r10 = null;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label1;

        r10 = "http://www.w3.org/XML/1998/namespace";

        goto label8;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label2;

        r10 = "http://www.w3.org/2000/xmlns/";

        goto label8;

     label2:
        if r1 != "" goto label3;

        $r11 = "xmlns";

        goto label4;

     label3:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        r5 = $r11;

        goto label7;

     label5:
        if $s0 != 1 goto label6;

        $r6 = (org.w3c.dom.Element) r9;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>(r5);

        if $r7 == null goto label6;

        r10 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label8;

     label6:
        r9 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r9);

     label7:
        if null == r9 goto label8;

        if null != null goto label8;

        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label5;

        $i1 = (int) $s0;

        if $i1 == 5 goto label5;

     label8:
        return r10;
    }

    public java.lang.String getNamespaceOfNode(org.w3c.dom.Node)
    {
        java.util.Vector $r11, $r15, $r19, $r23, $r24, $r42, $r43;
        org.apache.xml.utils.NSInfo $r5, $r7, $r9, $r13, $r14, $r18, $r22, $r33, r34, $r40, $r41, $r44;
        short $s0, $s3;
        java.lang.String $r1, $r30, r35, r36, $r37, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, $z8, z9, z10, z11, z12, z13;
        org.apache.xml.utils.DOMHelper r2;
        org.w3c.dom.Node r0, $r29, r38;
        int $i1, $i2, $i5, i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.w3c.dom.NamedNodeMap $r28;
        java.util.Hashtable $r4, $r6, $r8, $r10, $r16, $r20, $r25, $r27, $r31;
        char $c4;
        java.lang.Object $r12, $r17, $r21, $r26, $r32;

        r2 := @this: org.apache.xml.utils.DOMHelper;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i10 = (int) $s0;

        if 2 == $i10 goto label05;

        $r31 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r32 = virtualinvoke $r31.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        if $r32 != null goto label01;

        $r33 = null;

        goto label02;

     label01:
        $r33 = (org.apache.xml.utils.NSInfo) $r32;

     label02:
        r34 = $r33;

        if $r33 != null goto label03;

        $z4 = 0;

        goto label04;

     label03:
        $z4 = $r33.<org.apache.xml.utils.NSInfo: boolean m_hasProcessedNS>;

     label04:
        z5 = $z4;

        goto label06;

     label05:
        z5 = 0;

        r34 = null;

     label06:
        if z5 == 0 goto label07;

        r35 = r34.<org.apache.xml.utils.NSInfo: java.lang.String m_namespace>;

        goto label43;

     label07:
        r35 = null;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        $i11 = (int) $s0;

        if 2 != $i11 goto label09;

        if $i1 <= 0 goto label08;

        r36 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label12;

     label08:
        return null;

     label09:
        if $i1 < 0 goto label10;

        $r37 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label11;

     label10:
        $r37 = "";

     label11:
        r36 = $r37;

     label12:
        z6 = 0;

        z13 = 0;

        z12 = 0;

        z7 = 0;

        z11 = 0;

        z10 = 0;

        $z8 = virtualinvoke r36.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z8 == 0 goto label13;

        r35 = "http://www.w3.org/XML/1998/namespace";

        goto label39;

     label13:
        r38 = r0;

        goto label32;

     label14:
        if null == r34 goto label15;

        $i5 = r34.<org.apache.xml.utils.NSInfo: int m_ancestorHasXMLNSAttrs>;

        if $i5 != 2 goto label15;

        goto label33;

     label15:
        $s3 = interfaceinvoke r38.<org.w3c.dom.Node: short getNodeType()>();

        if null == r34 goto label16;

        $z3 = r34.<org.apache.xml.utils.NSInfo: boolean m_hasXMLNSAttrs>;

        if $z3 == 0 goto label27;

     label16:
        z9 = 0;

        if $s3 != 1 goto label24;

        $r28 = interfaceinvoke r38.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i6 = 0;

        goto label23;

     label17:
        $r29 = interfaceinvoke $r28.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i6);

        $r30 = interfaceinvoke $r29.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $c4 = virtualinvoke $r30.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c4;

        if $i12 != 120 goto label22;

        $z0 = virtualinvoke $r30.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        $z1 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 != 0 goto label18;

        if $z0 == 0 goto label22;

     label18:
        if r0 != r38 goto label19;

        z7 = 1;

        z11 = 1;

        z10 = 1;

     label19:
        z9 = 1;

        z6 = 1;

        z13 = 1;

        z12 = 1;

        if $z0 == 0 goto label20;

        $r39 = virtualinvoke $r30.<java.lang.String: java.lang.String substring(int)>(6);

        goto label21;

     label20:
        $r39 = "";

     label21:
        $z2 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z2 == 0 goto label22;

        r35 = interfaceinvoke $r29.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label24;

     label22:
        i6 = i6 + 1;

     label23:
        $i7 = interfaceinvoke $r28.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i6 < $i7 goto label17;

     label24:
        $i13 = (int) $s3;

        if 2 == $i13 goto label27;

        if null != r34 goto label27;

        if r0 == r38 goto label27;

        if z9 == 0 goto label25;

        $r40 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS>;

        goto label26;

     label25:
        $r40 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS>;

     label26:
        r34 = $r40;

        $r27 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        virtualinvoke $r27.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r38, $r40);

     label27:
        $i14 = (int) $s3;

        if 2 != $i14 goto label28;

        r38 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r38);

        goto label29;

     label28:
        $r23 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r23.<java.util.Vector: void addElement(java.lang.Object)>(r38);

        $r24 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r24.<java.util.Vector: void addElement(java.lang.Object)>(r34);

        r38 = interfaceinvoke r38.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label29:
        if null == r38 goto label32;

        $r25 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r26 = virtualinvoke $r25.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r38);

        if $r26 != null goto label30;

        $r41 = null;

        goto label31;

     label30:
        $r41 = (org.apache.xml.utils.NSInfo) $r26;

     label31:
        r34 = $r41;

     label32:
        if null == r38 goto label33;

        if null == r35 goto label14;

     label33:
        $r42 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $i8 = virtualinvoke $r42.<java.util.Vector: int size()>();

        if $i8 <= 0 goto label39;

        if 0 != z12 goto label38;

        if null != r38 goto label38;

        i9 = 0;

        goto label37;

     label34:
        $r11 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $i2 = i9 + 1;

        $r12 = virtualinvoke $r11.<java.util.Vector: java.lang.Object elementAt(int)>($i2);

        $r13 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS>;

        if $r12 != $r13 goto label35;

        $r20 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r19 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $r21 = virtualinvoke $r19.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r22 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS>;

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        goto label36;

     label35:
        $r14 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS>;

        if $r12 != $r14 goto label36;

        $r16 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r15 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $r17 = virtualinvoke $r15.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r18 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS>;

        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

     label36:
        i9 = i9 + 2;

     label37:
        if i9 < $i8 goto label34;

     label38:
        $r43 = r2.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r43.<java.util.Vector: void removeAllElements()>();

     label39:
        $i15 = (int) $s0;

        if 2 == $i15 goto label43;

        if null != r35 goto label42;

        if z13 == 0 goto label41;

        if z10 == 0 goto label40;

        $r10 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r9 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS>;

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

        goto label43;

     label40:
        $r8 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r7 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r7);

        goto label43;

     label41:
        $r6 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r5 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        goto label43;

     label42:
        $r4 = r2.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r44 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r44.<org.apache.xml.utils.NSInfo: void <init>(java.lang.String,boolean)>(r35, z11);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r44);

     label43:
        return r35;
    }

    public java.lang.String getLocalNameOfNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r2;
        org.w3c.dom.Node r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;

        r2 := @this: org.apache.xml.utils.DOMHelper;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label1;

        $r3 = $r1;

        goto label2;

     label1:
        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        return $r3;
    }

    public java.lang.String getExpandedElementName(org.w3c.dom.Element)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Element r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r7;
        java.lang.String $r2, $r6, $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getNamespaceOfNode(org.w3c.dom.Node)>(r1);

        if null == $r2 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

     label2:
        return $r8;
    }

    public java.lang.String getExpandedAttributeName(org.w3c.dom.Attr)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Attr r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r7;
        java.lang.String $r2, $r6, $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Attr;

        $r2 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getNamespaceOfNode(org.w3c.dom.Node)>(r1);

        if null == $r2 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

     label2:
        return $r8;
    }

    public boolean isIgnorableWhitespace(org.w3c.dom.Text)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Text r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Text;

        return 0;
    }

    public org.w3c.dom.Node getRoot(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = null;

        goto label2;

     label1:
        r2 = r1;

        r1 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

     label2:
        if r1 != null goto label1;

        return r2;
    }

    public org.w3c.dom.Node getRootNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r1;
        short $s0;
        org.w3c.dom.Node r0, $r2;
        int $i1, $i2;

        r1 := @this: org.apache.xml.utils.DOMHelper;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if 9 == $i1 goto label1;

        $i2 = (int) $s0;

        if 11 != $i2 goto label2;

     label1:
        $r2 = r0;

        goto label3;

     label2:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label3:
        return $r2;
    }

    public boolean isNamespaceNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r2;
        short $s0;
        org.w3c.dom.Node r0;
        int $i1;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.xml.utils.DOMHelper;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if 2 != $i1 goto label4;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public static org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node) throws java.lang.RuntimeException
    {
        java.lang.RuntimeException $r9;
        org.w3c.dom.Attr $r6;
        short $s0;
        org.w3c.dom.Element $r3, $r7;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node r0, r8;
        int $i1;
        java.lang.String $r5;
        org.w3c.dom.DOMImplementation $r2;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if 2 != $i1 goto label3;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>("Core", "2.0");

        if $z0 == 0 goto label1;

        $r6 = (org.w3c.dom.Attr) r0;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        return $r7;

     label1:
        $r3 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        if null != $r3 goto label2;

        $r9 = new java.lang.RuntimeException;

        $r5 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT", null);

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r9;

     label2:
        r8 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element,org.w3c.dom.Node)>($r3, r0);

        goto label4;

     label3:
        r8 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label4:
        return r8;
    }

    public org.w3c.dom.Element getElementByID(java.lang.String, org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1;
        org.w3c.dom.Document r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Document;

        return null;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String, org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r8;
        org.w3c.dom.DocumentType $r1;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node $r4;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String r3, $r6, $r7, r9;
        org.w3c.dom.Entity r5;

        r8 := @this: org.apache.xml.utils.DOMHelper;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Document;

        r9 = "";

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if null == $r1 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        if null != $r2 goto label1;

        return "";

     label1:
        $r4 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r3);

        r5 = (org.w3c.dom.Entity) $r4;

        if null != r5 goto label2;

        return "";

     label2:
        $r6 = interfaceinvoke r5.<org.w3c.dom.Entity: java.lang.String getNotationName()>();

        if null == $r6 goto label3;

        $r7 = interfaceinvoke r5.<org.w3c.dom.Entity: java.lang.String getSystemId()>();

        r9 = $r7;

        if null != $r7 goto label3;

        r9 = interfaceinvoke r5.<org.w3c.dom.Entity: java.lang.String getPublicId()>();

     label3:
        return r9;
    }

    private static org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element, org.w3c.dom.Node)
    {
        org.w3c.dom.Attr $r3;
        short $s0;
        org.w3c.dom.Element r0, $r4;
        org.w3c.dom.Node r1, $r5, r6, r7;
        java.lang.String $r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.w3c.dom.Node;

        r6 = null;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>($r2);

        if $r3 != r1 goto label1;

        r6 = r0;

     label1:
        if null != r6 goto label5;

        r7 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label4;

     label2:
        $s0 = interfaceinvoke r7.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s0 goto label3;

        $r4 = (org.w3c.dom.Element) r7;

        $r5 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element,org.w3c.dom.Node)>($r4, r1);

        r6 = $r5;

        if null == $r5 goto label3;

        goto label5;

     label3:
        r7 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label4:
        if null != r7 goto label2;

     label5:
        return r6;
    }

    public void setDOMFactory(org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Document r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Document;

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = r1;

        return;
    }

    public org.w3c.dom.Document getDOMFactory()
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Document $r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        $r1 = r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory>;

        if null != $r1 goto label1;

        $r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Document createDocument()>();

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = $r3;

     label1:
        $r2 = r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory>;

        return $r2;
    }

    public static java.lang.String getNodeData(org.w3c.dom.Node)
    {
        java.lang.Throwable $r2;
        org.apache.xml.utils.FastStringBuffer $r0;
        org.w3c.dom.Node r1;
        int $i0;
        java.lang.String $r3;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label1:
        staticinvoke <org.apache.xml.utils.DOMHelper: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r1, $r0);

        $i0 = virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i0 <= 0 goto label2;

        $r3 = virtualinvoke $r0.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label3;

     label2:
        $r3 = "";

     label3:
        goto label8;

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        goto label9;

     label6:
        throw $r2;

     label7:
        return $r3;

     label8:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r0);

        goto label4;

     label9:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r0);

        goto label6;

        catch java.lang.Throwable from label1 to label5 with label5;
    }

    public static void getNodeData(org.w3c.dom.Node, org.apache.xml.utils.FastStringBuffer)
    {
        short $s0;
        org.apache.xml.utils.FastStringBuffer r1;
        org.w3c.dom.Node r0, r4;
        int $i1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label7;
            case 6: goto label7;
            case 7: goto label6;
            case 8: goto label7;
            case 9: goto label1;
            case 10: goto label7;
            case 11: goto label1;
            default: goto label7;
        };

     label1:
        r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label2:
        staticinvoke <org.apache.xml.utils.DOMHelper: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r4, r1);

        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if null != r4 goto label2;

        goto label7;

     label4:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r2);

        goto label7;

     label5:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r3);

        goto label7;

     label6:
        goto label7;

     label7:
        return;
    }

    static void <clinit>()
    {
        org.apache.xml.utils.NSInfo $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r0.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(0, 1);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS> = $r0;

        $r1 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r1.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(0, 0);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS> = $r1;

        $r2 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r2.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean,int)>(0, 0, 2);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS> = $r2;

        $r3 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r3.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(1, 1);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS> = $r3;

        $r4 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r4.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(1, 0);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS> = $r4;

        $r5 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r5.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean,int)>(1, 0, 2);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS> = $r5;

        return;
    }
}
