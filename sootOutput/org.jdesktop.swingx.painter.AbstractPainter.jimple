public abstract class org.jdesktop.swingx.painter.AbstractPainter extends org.jdesktop.beans.AbstractBean implements org.jdesktop.swingx.painter.Painter
{
    private transient java.lang.ref.SoftReference cachedImage;
    private boolean cacheCleared;
    private boolean cacheable;
    private boolean dirty;
    private java.awt.image.BufferedImageOp[] filters;
    private boolean antialiasing;
    private org.jdesktop.swingx.painter.AbstractPainter$Interpolation interpolation;
    private boolean visible;

    public void <init>()
    {
        org.jdesktop.swingx.painter.AbstractPainter$Interpolation $r2;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.awt.image.BufferedImageOp[] $r1;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        specialinvoke r0.<org.jdesktop.beans.AbstractBean: void <init>()>();

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheCleared> = 1;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheable> = 0;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean dirty> = 0;

        $r1 = newarray (java.awt.image.BufferedImageOp)[0];

        r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters> = $r1;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean antialiasing> = 1;

        $r2 = <org.jdesktop.swingx.painter.AbstractPainter$Interpolation: org.jdesktop.swingx.painter.AbstractPainter$Interpolation NearestNeighbor>;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation interpolation> = $r2;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean visible> = 1;

        return;
    }

    public void <init>(boolean)
    {
        org.jdesktop.swingx.painter.AbstractPainter$Interpolation $r2;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.awt.image.BufferedImageOp[] $r1;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.jdesktop.beans.AbstractBean: void <init>()>();

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheCleared> = 1;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheable> = 0;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean dirty> = 0;

        $r1 = newarray (java.awt.image.BufferedImageOp)[0];

        r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters> = $r1;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean antialiasing> = 1;

        $r2 = <org.jdesktop.swingx.painter.AbstractPainter$Interpolation: org.jdesktop.swingx.painter.AbstractPainter$Interpolation NearestNeighbor>;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation interpolation> = $r2;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean visible> = 1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void setCacheable(boolean)>(z0);

        return;
    }

    public final java.awt.image.BufferedImageOp[] getFilters()
    {
        int $i0, $i1;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.awt.image.BufferedImageOp[] $r1, r2, $r3;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters>;

        $i0 = lengthof $r1;

        r2 = newarray (java.awt.image.BufferedImageOp)[$i0];

        $r3 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters>;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        return r2;
    }

    public transient void setFilters(java.awt.image.BufferedImageOp[])
    {
        int $i0, $i1;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.awt.image.BufferedImageOp[] $r1, $r2, $r3, $r4, $r5, r6;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        r6 := @parameter0: java.awt.image.BufferedImageOp[];

        if r6 != null goto label1;

        r6 = newarray (java.awt.image.BufferedImageOp)[0];

     label1:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] getFilters()>();

        if r6 != null goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $i1 = lengthof r6;

     label3:
        $r2 = newarray (java.awt.image.BufferedImageOp)[$i1];

        r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters> = $r2;

        $r4 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters>;

        $r3 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r4, 0, $i0);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void setDirty(boolean)>(1);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] getFilters()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("filters", $r1, $r5);

        return;
    }

    public boolean isAntialiasing()
    {
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean antialiasing>;

        return $z0;
    }

    public void setAntialiasing(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isAntialiasing()>();

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean antialiasing> = z1;

        if $z0 == z1 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void setDirty(boolean)>(1);

     label1:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isAntialiasing()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("antialiasing", $r1, $r2);

        return;
    }

    public org.jdesktop.swingx.painter.AbstractPainter$Interpolation getInterpolation()
    {
        org.jdesktop.swingx.painter.AbstractPainter$Interpolation $r1;
        org.jdesktop.swingx.painter.AbstractPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation interpolation>;

        return $r1;
    }

    public void setInterpolation(org.jdesktop.swingx.painter.AbstractPainter$Interpolation)
    {
        org.jdesktop.swingx.painter.AbstractPainter$Interpolation $r1, r2, $r3, $r4;
        org.jdesktop.swingx.painter.AbstractPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.AbstractPainter$Interpolation;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation getInterpolation()>();

        if r2 != null goto label1;

        $r4 = <org.jdesktop.swingx.painter.AbstractPainter$Interpolation: org.jdesktop.swingx.painter.AbstractPainter$Interpolation NearestNeighbor>;

        goto label2;

     label1:
        $r4 = r2;

     label2:
        r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation interpolation> = $r4;

        if $r1 == r2 goto label3;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void setDirty(boolean)>(1);

     label3:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation getInterpolation()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("interpolation", $r1, $r3);

        return;
    }

    public boolean isVisible()
    {
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean visible>;

        return $z0;
    }

    public void setVisible(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isVisible()>();

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean visible> = z1;

        if $z0 == z1 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void setDirty(boolean)>(1);

     label1:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isVisible()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("visible", $r1, $r2);

        return;
    }

    public boolean isCacheable()
    {
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheable>;

        return $z0;
    }

    public void setCacheable(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isCacheable()>();

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheable> = z1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isCacheable()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("cacheable", $r1, $r2);

        $z3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isCacheable()>();

        if $z3 != 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void clearCache()>();

     label1:
        return;
    }

    public void clearCache()
    {
        java.awt.image.BufferedImage $r4;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.lang.Object $r3;
        java.lang.ref.SoftReference $r1, $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.lang.ref.SoftReference cachedImage>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.lang.ref.SoftReference cachedImage>;

        $r3 = virtualinvoke $r2.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r4 = (java.awt.image.BufferedImage) $r3;

     label2:
        if $r4 == null goto label3;

        virtualinvoke $r4.<java.awt.image.BufferedImage: void flush()>();

     label3:
        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheCleared> = 1;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isCacheable()>();

        if $z0 != 0 goto label4;

        r0.<org.jdesktop.swingx.painter.AbstractPainter: java.lang.ref.SoftReference cachedImage> = null;

     label4:
        return;
    }

    boolean isCacheCleared()
    {
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheCleared>;

        return $z0;
    }

    protected void validate(java.lang.Object)
    {
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.lang.Object r1;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected boolean isDirty()
    {
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean dirty>;

        return $z0;
    }

    protected void setDirty(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean dirty> = z1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("dirty", $r1, $r2);

        $z3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        if $z3 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void clearCache()>();

     label1:
        return;
    }

    protected boolean shouldUseCache()
    {
        int $i0;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.awt.image.BufferedImageOp[] $r1;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isCacheable()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected void configureGraphics(java.awt.Graphics2D)
    {
        org.jdesktop.swingx.painter.AbstractPainter$Interpolation $r4;
        java.awt.Graphics2D r1;
        java.awt.RenderingHints$Key $r3, $r6;
        org.jdesktop.swingx.painter.AbstractPainter r0;
        java.lang.Object $r2, $r5;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        r1 := @parameter0: java.awt.Graphics2D;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isAntialiasing()>();

        if $z0 == 0 goto label1;

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        goto label2;

     label1:
        $r3 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r2 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r3, $r2);

     label2:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: org.jdesktop.swingx.painter.AbstractPainter$Interpolation getInterpolation()>();

        staticinvoke <org.jdesktop.swingx.painter.AbstractPainter$Interpolation: void access$000(org.jdesktop.swingx.painter.AbstractPainter$Interpolation,java.awt.Graphics2D)>($r4, r1);

        return;
    }

    protected abstract void doPaint(java.awt.Graphics2D, java.lang.Object, int, int);

    public final void paint(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.lang.NullPointerException $r13;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z7, $z8;
        java.awt.Composite $r10;
        java.awt.image.BufferedImage $r15, r16;
        org.jdesktop.swingx.painter.AbstractPainter r1;
        java.awt.image.BufferedImageOp[] $r7, $r12;
        java.lang.Throwable $r14;
        java.awt.image.BufferedImageOp r9;
        java.awt.AlphaComposite $r11;
        java.awt.Graphics2D r0, $r6;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.ref.SoftReference $r3, $r4, $r8;
        java.lang.Object r2, $r5;

        r1 := @this: org.jdesktop.swingx.painter.AbstractPainter;

        r0 := @parameter0: java.awt.Graphics2D;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label01;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("The Graphics2D must be supplied");

        throw $r13;

     label01:
        $z0 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: boolean isVisible()>();

        if $z0 == 0 goto label02;

        if i0 < 1 goto label02;

        if i1 >= 1 goto label03;

     label02:
        return;

     label03:
        virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: void configureGraphics(java.awt.Graphics2D)>(r0);

        $z1 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: boolean shouldUseCache()>();

        if $z1 != 0 goto label04;

        $r12 = r1.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] filters>;

        $i4 = lengthof $r12;

        if $i4 <= 0 goto label21;

     label04:
        virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: void validate(java.lang.Object)>(r2);

        $r3 = r1.<org.jdesktop.swingx.painter.AbstractPainter: java.lang.ref.SoftReference cachedImage>;

        if $r3 != null goto label05;

        $r15 = null;

        goto label06;

     label05:
        $r4 = r1.<org.jdesktop.swingx.painter.AbstractPainter: java.lang.ref.SoftReference cachedImage>;

        $r5 = virtualinvoke $r4.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r15 = (java.awt.image.BufferedImage) $r5;

     label06:
        r16 = $r15;

        if null == $r15 goto label07;

        $i2 = virtualinvoke $r15.<java.awt.image.BufferedImage: int getWidth()>();

        if $i2 != i0 goto label07;

        $i3 = virtualinvoke $r15.<java.awt.image.BufferedImage: int getHeight()>();

        if $i3 == i1 goto label08;

     label07:
        $z8 = 1;

        $z7 = 1;

        goto label09;

     label08:
        $z8 = 0;

        $z7 = 0;

     label09:
        z2 = $z7;

        $z3 = r1.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheCleared>;

        if $z3 != 0 goto label10;

        if $z8 != 0 goto label10;

        $z5 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        if $z5 == 0 goto label20;

     label10:
        if z2 == 0 goto label11;

        r16 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleTranslucentImage(int,int)>(i0, i1);

     label11:
        $r6 = virtualinvoke r16.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label12:
        virtualinvoke $r6.<java.awt.Graphics2D: void setClip(int,int,int,int)>(0, 0, i0, i1);

        if z2 != 0 goto label13;

        $r10 = virtualinvoke $r6.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $r11 = <java.awt.AlphaComposite: java.awt.AlphaComposite Clear>;

        virtualinvoke $r6.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r11);

        virtualinvoke $r6.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, i0, i1);

        virtualinvoke $r6.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r10);

     label13:
        virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: void configureGraphics(java.awt.Graphics2D)>($r6);

        virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)>($r6, r2, i0, i1);

     label14:
        virtualinvoke $r6.<java.awt.Graphics2D: void dispose()>();

        goto label17;

     label15:
        $r14 := @caughtexception;

     label16:
        virtualinvoke $r6.<java.awt.Graphics2D: void dispose()>();

        throw $r14;

     label17:
        $r7 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: java.awt.image.BufferedImageOp[] getFilters()>();

        i5 = lengthof $r7;

        i6 = 0;

     label18:
        if i6 >= i5 goto label19;

        r9 = $r7[i6];

        r16 = interfaceinvoke r9.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r16, null);

        i6 = i6 + 1;

        goto label18;

     label19:
        $z4 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: boolean shouldUseCache()>();

        if $z4 == 0 goto label20;

        $r8 = new java.lang.ref.SoftReference;

        specialinvoke $r8.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r16);

        r1.<org.jdesktop.swingx.painter.AbstractPainter: java.lang.ref.SoftReference cachedImage> = $r8;

        r1.<org.jdesktop.swingx.painter.AbstractPainter: boolean cacheCleared> = 0;

     label20:
        virtualinvoke r0.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r16, 0, 0, null);

        goto label22;

     label21:
        virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)>(r0, r2, i0, i1);

     label22:
        virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractPainter: void setDirty(boolean)>(0);

        return;

        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }
}
