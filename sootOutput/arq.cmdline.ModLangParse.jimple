public class arq.cmdline.ModLangParse extends java.lang.Object implements arq.cmdline.ArgModuleGeneral
{
    private arq.cmdline.ArgDecl argCheck;
    private arq.cmdline.ArgDecl argNoCheck;
    private arq.cmdline.ArgDecl argSink;
    private arq.cmdline.ArgDecl argStrict;
    private arq.cmdline.ArgDecl argValidate;
    private arq.cmdline.ArgDecl argSkip;
    private arq.cmdline.ArgDecl argNoSkip;
    private arq.cmdline.ArgDecl argStop;
    private arq.cmdline.ArgDecl argBase;
    private arq.cmdline.ArgDecl argRDFS;
    private arq.cmdline.ArgDecl argSyntax;
    private java.lang.String rdfsVocabFilename;
    private com.hp.hpl.jena.rdf.model.Model rdfsVocab;
    private java.lang.String baseIRI;
    private boolean explicitCheck;
    private boolean explicitNoCheck;
    private boolean skipOnBadTerm;
    private boolean stopOnBadTerm;
    private boolean bitbucket;
    private boolean strict;
    private boolean validate;
    private org.apache.jena.riot.Lang lang;

    public void <init>()
    {
        arq.cmdline.ArgDecl $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        java.lang.String[] $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        arq.cmdline.ModLangParse r0;

        r0 := @this: arq.cmdline.ModLangParse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[0];

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "check", $r2);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argCheck> = $r1;

        $r3 = new arq.cmdline.ArgDecl;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "noCheck";

        specialinvoke $r3.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "nocheck", $r4);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argNoCheck> = $r3;

        $r5 = new arq.cmdline.ArgDecl;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "null";

        specialinvoke $r5.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "sink", $r6);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSink> = $r5;

        $r7 = new arq.cmdline.ArgDecl;

        $r8 = newarray (java.lang.String)[0];

        specialinvoke $r7.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "strict", $r8);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argStrict> = $r7;

        $r9 = new arq.cmdline.ArgDecl;

        $r10 = newarray (java.lang.String)[0];

        specialinvoke $r9.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "validate", $r10);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argValidate> = $r9;

        $r11 = new arq.cmdline.ArgDecl;

        $r12 = newarray (java.lang.String)[0];

        specialinvoke $r11.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "skip", $r12);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSkip> = $r11;

        $r13 = new arq.cmdline.ArgDecl;

        $r14 = newarray (java.lang.String)[0];

        specialinvoke $r13.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "noSkip", $r14);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argNoSkip> = $r13;

        $r15 = new arq.cmdline.ArgDecl;

        $r16 = newarray (java.lang.String)[2];

        $r16[0] = "stoponerror";

        $r16[1] = "stop";

        specialinvoke $r15.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "stopOnError", $r16);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argStop> = $r15;

        $r17 = new arq.cmdline.ArgDecl;

        $r18 = newarray (java.lang.String)[0];

        specialinvoke $r17.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "base", $r18);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argBase> = $r17;

        $r19 = new arq.cmdline.ArgDecl;

        $r20 = newarray (java.lang.String)[0];

        specialinvoke $r19.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "rdfs", $r20);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argRDFS> = $r19;

        $r21 = new arq.cmdline.ArgDecl;

        $r22 = newarray (java.lang.String)[0];

        specialinvoke $r21.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "syntax", $r22);

        r0.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSyntax> = $r21;

        r0.<arq.cmdline.ModLangParse: java.lang.String rdfsVocabFilename> = null;

        r0.<arq.cmdline.ModLangParse: com.hp.hpl.jena.rdf.model.Model rdfsVocab> = null;

        r0.<arq.cmdline.ModLangParse: java.lang.String baseIRI> = null;

        r0.<arq.cmdline.ModLangParse: boolean explicitCheck> = 0;

        r0.<arq.cmdline.ModLangParse: boolean explicitNoCheck> = 0;

        r0.<arq.cmdline.ModLangParse: boolean skipOnBadTerm> = 0;

        r0.<arq.cmdline.ModLangParse: boolean stopOnBadTerm> = 0;

        r0.<arq.cmdline.ModLangParse: boolean bitbucket> = 0;

        r0.<arq.cmdline.ModLangParse: boolean strict> = 0;

        r0.<arq.cmdline.ModLangParse: boolean validate> = 0;

        r0.<arq.cmdline.ModLangParse: org.apache.jena.riot.Lang lang> = null;

        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.ModLangParse r2;
        arq.cmdline.Usage $r1;
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r2 := @this: arq.cmdline.ModLangParse;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r1 = virtualinvoke r0.<arq.cmdline.CmdGeneral: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r1.<arq.cmdline.Usage: void startCategory(java.lang.String)>("Parser control");

        $r3 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSink>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--sink", "Parse but throw away output");

        $r4 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSyntax>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r4, "--syntax=NAME", "Set syntax (otherwise syntax guessed from file extension)");

        $r5 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argBase>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r5, "--base=URI", "Set the base URI (does not apply to N-triples and N-Quads)");

        $r6 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argCheck>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r6, "--check", "Addition checking of RDF terms");

        $r7 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argStrict>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r7, "--strict", "Run with in strict mode");

        $r8 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argValidate>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r8, "--validate", "Same as --sink --check=true --strict");

        $r9 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argRDFS>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r9, "--rdfs=file", "Apply some RDFS inference using the vocabulary in the file");

        $r10 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argNoCheck>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r10, "--nocheck", "Turn off checking of RDF terms");

        $r11 = r2.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argStop>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r11, "--stop", "Stop parsing on encountering a bad RDF term");

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.ArgDecl $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r19, $r35;
        arq.cmdline.Arg $r14;
        org.apache.jena.iri.IRI $r22;
        java.lang.Exception $r44;
        arq.cmd.CmdException $r23, $r29, $r38, $r45, $r52;
        java.lang.StringBuilder $r24, $r25, $r27, $r30, $r31, $r33, $r39, $r40, $r41, $r42, $r46, $r47, $r49, $r53, $r54, $r56;
        org.apache.jena.riot.RiotException $r51;
        arq.cmdline.CmdArgModule r0;
        java.lang.String $r15, $r17, $r20, $r21, $r26, $r28, $r32, $r34, $r36, $r43, $r48, $r50, $r55, $r57;
        arq.cmdline.ModLangParse r1;
        com.hp.hpl.jena.rdf.model.Model $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.hp.hpl.jena.util.FileManager $r16;
        org.apache.jena.riot.Lang $r37;

        r1 := @this: arq.cmdline.ModLangParse;

        r0 := @parameter0: arq.cmdline.CmdArgModule;

        $r2 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argValidate>;

        $z0 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z0 == 0 goto label01;

        r1.<arq.cmdline.ModLangParse: boolean validate> = 1;

        r1.<arq.cmdline.ModLangParse: boolean strict> = 1;

        r1.<arq.cmdline.ModLangParse: boolean explicitCheck> = 1;

        r1.<arq.cmdline.ModLangParse: boolean bitbucket> = 1;

     label01:
        $r3 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSyntax>;

        $z1 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r3);

        if $z1 == 0 goto label03;

        $r35 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSyntax>;

        $r36 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.lang.String getValue(arq.cmdline.ArgDecl)>($r35);

        $r37 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang nameToLang(java.lang.String)>($r36);

        if $r37 != null goto label02;

        $r38 = new arq.cmd.CmdException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not detemine the synatx from \'");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<arq.cmd.CmdException: void <init>(java.lang.String)>($r43);

        throw $r38;

     label02:
        r1.<arq.cmdline.ModLangParse: org.apache.jena.riot.Lang lang> = $r37;

     label03:
        $r4 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argCheck>;

        $z2 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r4);

        if $z2 == 0 goto label04;

        r1.<arq.cmdline.ModLangParse: boolean explicitCheck> = 1;

     label04:
        $r5 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argNoCheck>;

        $z3 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r5);

        if $z3 == 0 goto label05;

        r1.<arq.cmdline.ModLangParse: boolean explicitNoCheck> = 1;

     label05:
        $r6 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argStrict>;

        $z4 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r6);

        if $z4 == 0 goto label06;

        r1.<arq.cmdline.ModLangParse: boolean strict> = 1;

     label06:
        $r7 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSkip>;

        $z5 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r7);

        if $z5 == 0 goto label07;

        r1.<arq.cmdline.ModLangParse: boolean skipOnBadTerm> = 1;

     label07:
        $r8 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argNoSkip>;

        $z6 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r8);

        if $z6 == 0 goto label08;

        r1.<arq.cmdline.ModLangParse: boolean skipOnBadTerm> = 0;

     label08:
        $r9 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argBase>;

        $z7 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r9);

        if $z7 == 0 goto label10;

        $r19 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argBase>;

        $r20 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.lang.String getValue(arq.cmdline.ArgDecl)>($r19);

        r1.<arq.cmdline.ModLangParse: java.lang.String baseIRI> = $r20;

        $r21 = r1.<arq.cmdline.ModLangParse: java.lang.String baseIRI>;

        $r22 = staticinvoke <org.apache.jena.riot.system.IRIResolver: org.apache.jena.iri.IRI resolveIRI(java.lang.String)>($r21);

        $z11 = virtualinvoke $r22.<org.apache.jena.iri.IRI: boolean hasViolation(boolean)>(0);

        if $z11 == 0 goto label09;

        $r29 = new arq.cmd.CmdException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad base IRI: ");

        $r32 = r1.<arq.cmdline.ModLangParse: java.lang.String baseIRI>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<arq.cmd.CmdException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label09:
        $z12 = virtualinvoke $r22.<org.apache.jena.iri.IRI: boolean isAbsolute()>();

        if $z12 != 0 goto label10;

        $r23 = new arq.cmd.CmdException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base IRI must be an absolute IRI: ");

        $r26 = r1.<arq.cmdline.ModLangParse: java.lang.String baseIRI>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<arq.cmd.CmdException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label10:
        $r10 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argStop>;

        $z8 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r10);

        if $z8 == 0 goto label11;

        r1.<arq.cmdline.ModLangParse: boolean stopOnBadTerm> = 1;

     label11:
        $r11 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argSink>;

        $z9 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r11);

        if $z9 == 0 goto label12;

        r1.<arq.cmdline.ModLangParse: boolean bitbucket> = 1;

     label12:
        $r12 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argRDFS>;

        $z10 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r12);

        if $z10 == 0 goto label17;

     label13:
        $r13 = r1.<arq.cmdline.ModLangParse: arq.cmdline.ArgDecl argRDFS>;

        $r14 = virtualinvoke r0.<arq.cmdline.CmdArgModule: arq.cmdline.Arg getArg(arq.cmdline.ArgDecl)>($r13);

        $r15 = virtualinvoke $r14.<arq.cmdline.Arg: java.lang.String getValue()>();

        r1.<arq.cmdline.ModLangParse: java.lang.String rdfsVocabFilename> = $r15;

        $r16 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r17 = r1.<arq.cmdline.ModLangParse: java.lang.String rdfsVocabFilename>;

        $r18 = virtualinvoke $r16.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)>($r17);

        r1.<arq.cmdline.ModLangParse: com.hp.hpl.jena.rdf.model.Model rdfsVocab> = $r18;

     label14:
        goto label17;

     label15:
        $r51 := @caughtexception;

        $r52 = new arq.cmd.CmdException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in RDFS vocabulary: ");

        $r55 = r1.<arq.cmdline.ModLangParse: java.lang.String rdfsVocabFilename>;

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<arq.cmd.CmdException: void <init>(java.lang.String)>($r57);

        throw $r52;

     label16:
        $r44 := @caughtexception;

        $r45 = new arq.cmd.CmdException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r48 = virtualinvoke $r44.<java.lang.Exception: java.lang.String getMessage()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<arq.cmd.CmdException: void <init>(java.lang.String)>($r50);

        throw $r45;

     label17:
        return;

        catch org.apache.jena.riot.RiotException from label13 to label14 with label15;
        catch java.lang.Exception from label13 to label14 with label16;
    }

    public boolean explicitChecking()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean explicitCheck>;

        return $z0;
    }

    public boolean explicitNoChecking()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean explicitNoCheck>;

        return $z0;
    }

    public boolean strictMode()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean strict>;

        return $z0;
    }

    public boolean validate()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean validate>;

        return $z0;
    }

    public boolean skipOnBadTerm()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean skipOnBadTerm>;

        return $z0;
    }

    public boolean stopOnBadTerm()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean stopOnBadTerm>;

        return $z0;
    }

    public boolean toBitBucket()
    {
        arq.cmdline.ModLangParse r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModLangParse;

        $z0 = r0.<arq.cmdline.ModLangParse: boolean bitbucket>;

        return $z0;
    }

    public java.lang.String getBaseIRI()
    {
        arq.cmdline.ModLangParse r0;
        java.lang.String $r1;

        r0 := @this: arq.cmdline.ModLangParse;

        $r1 = r0.<arq.cmdline.ModLangParse: java.lang.String baseIRI>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Model getRDFSVocab()
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        arq.cmdline.ModLangParse r0;

        r0 := @this: arq.cmdline.ModLangParse;

        $r1 = r0.<arq.cmdline.ModLangParse: com.hp.hpl.jena.rdf.model.Model rdfsVocab>;

        return $r1;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        arq.cmdline.ModLangParse r0;
        org.apache.jena.riot.Lang $r1;

        r0 := @this: arq.cmdline.ModLangParse;

        $r1 = r0.<arq.cmdline.ModLangParse: org.apache.jena.riot.Lang lang>;

        return $r1;
    }
}
