public final class org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW extends java.lang.Object
{
    private static org.slf4j.Logger log;
    private static final boolean logging;
    private final java.util.concurrent.atomic.AtomicLong readCounter;
    private final java.util.concurrent.atomic.AtomicLong writeCounter;
    private static final java.util.concurrent.atomic.AtomicLong policyCounter;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong readCounter> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong writeCounter> = $r2;

        $r3 = <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong policyCounter>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return;
    }

    public void startRead()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        $r1 = r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong readCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void log()>();

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void checkConcurrency()>();

        return;
    }

    public void finishRead()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void log()>();

        $r1 = r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong readCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void checkConcurrency()>();

        return;
    }

    public void startUpdate()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        $r1 = r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong writeCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void log()>();

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void checkConcurrency()>();

        return;
    }

    public void finishUpdate()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void log()>();

        $r1 = r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong writeCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        specialinvoke r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void checkConcurrency()>();

        return;
    }

    private synchronized void checkConcurrency()
    {
        long $l0, $l1, $l2;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        byte $b3, $b4, $b5;
        int $i6, $i7, $i8;
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        $r1 = r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong readCounter>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r2 = r0.<org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong writeCounter>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r3 = <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong policyCounter>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b3 = $l0 cmp 0L;

        $i6 = (int) $b3;

        if $i6 <= 0 goto label1;

        $b4 = $l1 cmp 0L;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label1;

        staticinvoke <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void policyError(long,long,long)>($l2, $l0, $l1);

     label1:
        $b5 = $l1 cmp 1L;

        $i8 = (int) $b5;

        if $i8 <= 0 goto label2;

        staticinvoke <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void policyError(long,long,long)>($l2, $l0, $l1);

     label2:
        return;
    }

    private void log()
    {
        org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW r0;

        r0 := @this: org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW;

        return;
    }

    private static void policyError(long, long, long)
    {
        long l0, l1, l2;
        java.lang.String $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r0 = staticinvoke <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.lang.String format(long,long,long)>(l0, l1, l2);

        staticinvoke <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: void policyError(java.lang.String)>($r0);

        return;
    }

    private static void policyError(java.lang.String)
    {
        java.lang.String r1;
        java.util.ConcurrentModificationException $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ConcurrentModificationException;

        specialinvoke $r0.<java.util.ConcurrentModificationException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    private static java.lang.String format(long, long, long)
    {
        java.lang.Object[] $r0;
        long l0, l1, l2;
        java.lang.Long $r1, $r2, $r3;
        java.lang.String $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r0 = newarray (java.lang.Object)[3];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r0[1] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r0[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("(lock=%d) Reader = %d, Writer = %d", $r0);

        return $r4;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.slf4j.Logger $r0;

        <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: boolean logging> = 0;

        $r0 = <org.apache.jena.fuseki.Fuseki: org.slf4j.Logger requestLog>;

        <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: org.slf4j.Logger log> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        <org.apache.jena.fuseki.servlets.ConcurrencyPolicyMRSW: java.util.concurrent.atomic.AtomicLong policyCounter> = $r1;

        return;
    }
}
