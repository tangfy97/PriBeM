public abstract class org.apache.poi.xslf.usermodel.XSLFSimpleShape extends org.apache.poi.xslf.usermodel.XSLFShape
{
    private static org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect NO_SHADOW;
    private final org.apache.xmlbeans.XmlObject _shape;
    private final org.apache.poi.xslf.usermodel.XSLFSheet _sheet;
    private org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties _spPr;
    private org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle _spStyle;
    private org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps _nvPr;
    private org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder _ph;

    void <init>(org.apache.xmlbeans.XmlObject, org.apache.poi.xslf.usermodel.XSLFSheet)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.xmlbeans.XmlObject r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        r2 := @parameter1: org.apache.poi.xslf.usermodel.XSLFSheet;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject _shape> = r1;

        r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet> = r2;

        return;
    }

    public org.apache.xmlbeans.XmlObject getXmlObject()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.xmlbeans.XmlObject $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject _shape>;

        return $r1;
    }

    public org.apache.poi.xslf.usermodel.XSLFSheet getSheet()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.poi.xslf.usermodel.XSLFSheet $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        return $r1;
    }

    public void setShapeType(org.apache.poi.xslf.usermodel.XSLFShapeType)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r5;
        org.apache.poi.xslf.usermodel.XSLFShapeType r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D $r6;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShape r2;
        org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum $r4;
        int $i0;
        org.apache.xmlbeans.XmlObject $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShapeType;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r2 = (org.openxmlformats.schemas.presentationml.x2006.main.CTShape) $r1;

        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.XSLFShapeType: int getIndex()>();

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum forInt(int)>($i0);

        $r5 = interfaceinvoke r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D getPrstGeom()>();

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D: void setPrst(org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum)>($r4);

        return;
    }

    public org.apache.poi.xslf.usermodel.XSLFShapeType getShapeType()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D $r4;
        org.apache.poi.xslf.usermodel.XSLFShapeType $r6;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShape r2;
        org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum $r5;
        int $i0;
        org.apache.xmlbeans.XmlObject $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r2 = (org.openxmlformats.schemas.presentationml.x2006.main.CTShape) $r1;

        $r3 = interfaceinvoke r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D getPrstGeom()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D: org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum getPrst()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum: int intValue()>();

        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.XSLFShapeType: org.apache.poi.xslf.usermodel.XSLFShapeType forInt(int)>($i0);

        return $r6;
    }

    public java.lang.String getShapeName()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        java.lang.String $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps getNvPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: java.lang.String getName()>();

        return $r2;
    }

    public int getShapeId()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r1;
        int $i1;
        long $l0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps getNvPr()>();

        $l0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: long getId()>();

        $i1 = (int) $l0;

        return $i1;
    }

    protected org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps getNvPr()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.xmlbeans.XmlObject[] $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r1, $r5, $r6;
        int $i0;
        org.apache.xmlbeans.XmlObject $r2, $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps _nvPr>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject _shape>;

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("declare namespace p=\'http://schemas.openxmlformats.org/presentationml/2006/main\' .//*/p:cNvPr");

        $i0 = lengthof $r3;

        if $i0 == 0 goto label1;

        $r4 = $r3[0];

        $r5 = (org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps) $r4;

        r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps _nvPr> = $r5;

     label1:
        $r6 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps _nvPr>;

        return $r6;
    }

    protected org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1, $r2, $r3, $r8;
        java.lang.IllegalStateException $r4;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.xmlbeans.XmlObject[] $r6;
        int i0, i1;
        org.apache.xmlbeans.XmlObject $r5, r7;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties _spPr>;

        if $r1 != null goto label3;

        $r5 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject _shape>;

        $r6 = interfaceinvoke $r5.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        i0 = lengthof $r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r7 = $r6[i1];

        $z0 = r7 instanceof org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties;

        if $z0 == 0 goto label2;

        $r8 = (org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties) r7;

        r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties _spPr> = $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties _spPr>;

        if $r2 != null goto label4;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CTShapeProperties was not found.");

        throw $r4;

     label4:
        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties _spPr>;

        return $r3;
    }

    protected org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle getSpStyle()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.xmlbeans.XmlObject[] $r4;
        int i0, i1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle $r1, $r2, $r6;
        org.apache.xmlbeans.XmlObject $r3, r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle _spStyle>;

        if $r1 != null goto label3;

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject _shape>;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = $r4[i1];

        $z0 = r5 instanceof org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle;

        if $z0 == 0 goto label2;

        $r6 = (org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle) r5;

        r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle _spStyle> = $r6;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle _spStyle>;

        return $r2;
    }

    protected org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder getCTPlaceholder()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r1, $r5, $r6;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.xmlbeans.XmlObject[] $r3;
        int $i0;
        org.apache.xmlbeans.XmlObject $r2, $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder _ph>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.xmlbeans.XmlObject _shape>;

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("declare namespace p=\'http://schemas.openxmlformats.org/presentationml/2006/main\' .//*/p:nvPr/p:ph");

        $i0 = lengthof $r3;

        if $i0 != 1 goto label1;

        $r4 = $r3[0];

        $r5 = (org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder) $r4;

        r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder _ph> = $r5;

     label1:
        $r6 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder _ph>;

        return $r6;
    }

    org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape$1 $r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r3;
        java.lang.Object $r2;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFSimpleShape$1;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape$1: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r3 = (org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D) $r2;

        return $r3;
    }

    public java.awt.geom.Rectangle2D getAnchor()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D $r2;
        long $l0, $l1, $l2, $l3;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D $r3;
        java.awt.geom.Rectangle2D$Double $r4;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D getOff()>();

        $l0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: long getX()>();

        $l1 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: long getY()>();

        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D getExt()>();

        $l2 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: long getCx()>();

        $l3 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: long getCy()>();

        $r4 = new java.awt.geom.Rectangle2D$Double;

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l0);

        $d1 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l1);

        $d2 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l2);

        $d3 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l3);

        specialinvoke $r4.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r4;
    }

    public void setAnchor(java.awt.geom.Rectangle2D)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        java.awt.geom.Rectangle2D r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D $r5;
        long $l4, $l5, $l6, $l7;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1, $i2, $i3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D $r6;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D r2, $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetXfrm()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D addNewXfrm()>();

     label2:
        r2 = $r4;

        $z1 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: boolean isSetOff()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D getOff()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D addNewOff()>();

     label4:
        $d0 = virtualinvoke r3.<java.awt.geom.Rectangle2D: double getX()>();

        $i0 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d0);

        $l6 = (long) $i0;

        $d1 = virtualinvoke r3.<java.awt.geom.Rectangle2D: double getY()>();

        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d1);

        $l7 = (long) $i1;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: void setX(long)>($l6);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: void setY(long)>($l7);

        $z2 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: boolean isSetExt()>();

        if $z2 == 0 goto label5;

        $r6 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D getExt()>();

        goto label6;

     label5:
        $r6 = interfaceinvoke r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D addNewExt()>();

     label6:
        $d2 = virtualinvoke r3.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i2 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d2);

        $l4 = (long) $i2;

        $d3 = virtualinvoke r3.<java.awt.geom.Rectangle2D: double getHeight()>();

        $i3 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d3);

        $l5 = (long) $i3;

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: void setCx(long)>($l4);

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: void setCy(long)>($l5);

        return;
    }

    public void setRotation(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r2;
        int $i0;
        boolean $z0;
        double d0, $d1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetXfrm()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D addNewXfrm()>();

     label2:
        $d1 = d0 * 60000.0;

        $i0 = (int) $d1;

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: void setRot(int)>($i0);

        return;
    }

    public double getRotation()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r1;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        $i0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: int getRot()>();

        $d0 = (double) $i0;

        $d1 = $d0 / 60000.0;

        return $d1;
    }

    public void setFlipHorizontal(boolean)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r2;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        z1 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetXfrm()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D addNewXfrm()>();

     label2:
        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: void setFlipH(boolean)>(z1);

        return;
    }

    public void setFlipVertical(boolean)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r2;
        boolean $z0, z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        z1 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetXfrm()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D addNewXfrm()>();

     label2:
        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: void setFlipV(boolean)>(z1);

        return;
    }

    public boolean getFlipHorizontal()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: boolean getFlipH()>();

        return $z0;
    }

    public boolean getFlipVertical()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D getXfrm()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D: boolean getFlipV()>();

        return $z0;
    }

    org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getDefaultLineProperties()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet $r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineStyleList $r8;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix $r7;
        long $l0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties r9;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.poi.xslf.usermodel.XSLFSheet $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference $r2;
        int i1, $i2;
        org.apache.poi.xslf.usermodel.XSLFTheme $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r9 = null;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle getSpStyle()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference getLnRef()>();

        $l0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference: long getIdx()>();

        i1 = (int) $l0;

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        $r4 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFTheme: org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet getXmlObject()>();

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet: org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles getThemeElements()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix getFmtScheme()>();

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix: org.openxmlformats.schemas.drawingml.x2006.main.CTLineStyleList getLnStyleLst()>();

        $i2 = i1 - 1;

        r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineStyleList: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLnArray(int)>($i2);

     label1:
        return r9;
    }

    public void setLineColor(java.awt.Color)
    {
        java.awt.Color r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        byte[] $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r6, $r7, $r8;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        byte $b1, $b3, $b5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties r5, $r9;
        int $i0, $i2, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        if r2 != null goto label01;

        $z7 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z7 == 0 goto label10;

        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z8 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetSolidFill()>();

        if $z8 == 0 goto label10;

        $r7 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void unsetSolidFill()>();

        goto label10;

     label01:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z0 == 0 goto label02;

        $r8 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        goto label03;

     label02:
        $r8 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties addNewLn()>();

     label03:
        $r3 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor$Factory: org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor newInstance()>();

        $r4 = newarray (byte)[3];

        $i0 = virtualinvoke r2.<java.awt.Color: int getRed()>();

        $b1 = (byte) $i0;

        $r4[0] = $b1;

        $i2 = virtualinvoke r2.<java.awt.Color: int getGreen()>();

        $b3 = (byte) $i2;

        $r4[1] = $b3;

        $i4 = virtualinvoke r2.<java.awt.Color: int getBlue()>();

        $b5 = (byte) $i4;

        $r4[2] = $b5;

        interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor: void setVal(byte[])>($r4);

        $z1 = interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetSolidFill()>();

        if $z1 == 0 goto label04;

        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties getSolidFill()>();

        goto label05;

     label04:
        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties addNewSolidFill()>();

     label05:
        r5 = $r9;

        interfaceinvoke $r9.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void setSrgbClr(org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor)>($r3);

        $z2 = interfaceinvoke $r9.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetHslClr()>();

        if $z2 == 0 goto label06;

        interfaceinvoke $r9.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetHslClr()>();

     label06:
        $z3 = interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetPrstClr()>();

        if $z3 == 0 goto label07;

        interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetPrstClr()>();

     label07:
        $z4 = interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSchemeClr()>();

        if $z4 == 0 goto label08;

        interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetSchemeClr()>();

     label08:
        $z5 = interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetScrgbClr()>();

        if $z5 == 0 goto label09;

        interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetScrgbClr()>();

     label09:
        $z6 = interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSysClr()>();

        if $z6 == 0 goto label10;

        interfaceinvoke r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetSysClr()>();

     label10:
        return;
    }

    public java.awt.Color getLineColor()
    {
        java.awt.Color $r3;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        java.awt.Paint $r2;
        org.apache.poi.xslf.usermodel.RenderableShape $r0;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.RenderableShape;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint getLinePaint(java.awt.Graphics2D)>(null);

        $z0 = $r2 instanceof java.awt.Color;

        if $z0 == 0 goto label1;

        $r3 = (java.awt.Color) $r2;

        return $r3;

     label1:
        return null;
    }

    public void setLineWidth(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2, $r3, $r4;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        byte $b0;
        int $i1;
        double d0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z2 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetW()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void unsetW()>();

        goto label4;

     label1:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties addNewLn()>();

     label3:
        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>(d0);

        interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void setW(int)>($i1);

     label4:
        return;
    }

    public double getLineWidth()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape$2 $r0;
        java.lang.Double $r4;
        long $l1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r5;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        int $i0;
        java.lang.Object $r2, $r3;
        boolean $z0;
        double d0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFSimpleShape$2;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape$2: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        d0 = 0.0;

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label2;

        $r5 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getDefaultLineProperties()>();

        if $r5 == null goto label1;

        $z0 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetW()>();

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: int getW()>();

        $l1 = (long) $i0;

        d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l1);

     label1:
        goto label3;

     label2:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label3:
        return d0;
    }

    public void setLineDash(org.apache.poi.xslf.usermodel.LineDash)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r5, $r6, $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties $r3;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.LineDash r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.LineDash;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        if r2 != null goto label1;

        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z2 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetPrstDash()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void unsetPrstDash()>();

        goto label4;

     label1:
        $r3 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties$Factory: org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties newInstance()>();

        $i0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.LineDash: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum forInt(int)>($i1);

        interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties: void setVal(org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum)>($r4);

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        goto label3;

     label2:
        $r7 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties addNewLn()>();

     label3:
        interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void setPrstDash(org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties)>($r3);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineDash getLineDash()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape$3 $r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum $r6;
        org.apache.poi.xslf.usermodel.LineDash[] $r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties $r4;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        int $i0, $i1;
        java.lang.Object $r2;
        org.apache.poi.xslf.usermodel.LineDash r7;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFSimpleShape$3;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape$3: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        r7 = (org.apache.poi.xslf.usermodel.LineDash) $r2;

        if r7 != null goto label1;

        $r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getDefaultLineProperties()>();

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties getPrstDash()>();

        if $r4 == null goto label1;

        $r5 = staticinvoke <org.apache.poi.xslf.usermodel.LineDash: org.apache.poi.xslf.usermodel.LineDash[] values()>();

        $r6 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTPresetLineDashProperties: org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum getVal()>();

        $i0 = virtualinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.STPresetLineDashVal$Enum: int intValue()>();

        $i1 = $i0 - 1;

        r7 = $r5[$i1];

     label1:
        return r7;
    }

    public void setLineCap(org.apache.poi.xslf.usermodel.LineCap)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r4, $r5, $r6;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.poi.xslf.usermodel.LineCap r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.LineCap;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        if r2 != null goto label1;

        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z2 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetCap()>();

        if $z2 == 0 goto label4;

        $r5 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void unsetCap()>();

        goto label4;

     label1:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetLn()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        goto label3;

     label2:
        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties addNewLn()>();

     label3:
        $i0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.LineCap: int ordinal()>();

        $i1 = $i0 + 1;

        $r3 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum forInt(int)>($i1);

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: void setCap(org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum)>($r3);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineCap getLineCap()
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape$4 $r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r3;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        org.apache.poi.xslf.usermodel.LineCap[] $r5;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.LineCap r6;
        java.lang.Object $r2;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFSimpleShape$4;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape$4: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        r6 = (org.apache.poi.xslf.usermodel.LineCap) $r2;

        if r6 != null goto label1;

        $r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getDefaultLineProperties()>();

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum getCap()>();

        if $r4 == null goto label1;

        $r5 = staticinvoke <org.apache.poi.xslf.usermodel.LineCap: org.apache.poi.xslf.usermodel.LineCap[] values()>();

        $i0 = virtualinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.STLineCap$Enum: int intValue()>();

        $i1 = $i0 - 1;

        r6 = $r5[$i1];

     label1:
        return r6;
    }

    public void setFillColor(java.awt.Color)
    {
        java.awt.Color r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        byte[] $r5;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties r3, $r6;
        byte $b1, $b3, $b5;
        int $i0, $i2, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        if r2 != null goto label02;

        $z7 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetSolidFill()>();

        if $z7 == 0 goto label01;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: void unsetSolidFill()>();

     label01:
        $z8 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetNoFill()>();

        if $z8 != 0 goto label10;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTNoFillProperties addNewNoFill()>();

        goto label10;

     label02:
        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetNoFill()>();

        if $z0 == 0 goto label03;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: void unsetNoFill()>();

     label03:
        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetSolidFill()>();

        if $z1 == 0 goto label04;

        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties getSolidFill()>();

        goto label05;

     label04:
        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties addNewSolidFill()>();

     label05:
        r3 = $r6;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor$Factory: org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor newInstance()>();

        $r5 = newarray (byte)[3];

        $i0 = virtualinvoke r2.<java.awt.Color: int getRed()>();

        $b1 = (byte) $i0;

        $r5[0] = $b1;

        $i2 = virtualinvoke r2.<java.awt.Color: int getGreen()>();

        $b3 = (byte) $i2;

        $r5[1] = $b3;

        $i4 = virtualinvoke r2.<java.awt.Color: int getBlue()>();

        $b5 = (byte) $i4;

        $r5[2] = $b5;

        interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor: void setVal(byte[])>($r5);

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void setSrgbClr(org.openxmlformats.schemas.drawingml.x2006.main.CTSRgbColor)>($r4);

        $z2 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetHslClr()>();

        if $z2 == 0 goto label06;

        interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetHslClr()>();

     label06:
        $z3 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetPrstClr()>();

        if $z3 == 0 goto label07;

        interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetPrstClr()>();

     label07:
        $z4 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSchemeClr()>();

        if $z4 == 0 goto label08;

        interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetSchemeClr()>();

     label08:
        $z5 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetScrgbClr()>();

        if $z5 == 0 goto label09;

        interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetScrgbClr()>();

     label09:
        $z6 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: boolean isSetSysClr()>();

        if $z6 == 0 goto label10;

        interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTSolidColorFillProperties: void unsetSysClr()>();

     label10:
        return;
    }

    public java.awt.Color getFillColor()
    {
        java.awt.Color $r3;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        java.awt.Paint $r2;
        org.apache.poi.xslf.usermodel.RenderableShape $r0;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.RenderableShape;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.Paint getFillPaint(java.awt.Graphics2D)>(null);

        $z0 = $r2 instanceof java.awt.Color;

        if $z0 == 0 goto label1;

        $r3 = (java.awt.Color) $r2;

        return $r3;

     label1:
        return null;
    }

    public org.apache.poi.xslf.usermodel.XSLFShadow getShadow()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet $r8;
        org.apache.poi.xslf.usermodel.XSLFShadow $r15;
        long $l0;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        org.apache.poi.xslf.usermodel.XSLFSheet $r6;
        int i1, $i2;
        org.apache.poi.xslf.usermodel.XSLFTheme $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles $r9;
        org.openxmlformats.schemas.drawingml.x2006.main.CTEffectList $r13;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape$5 $r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix $r10;
        org.openxmlformats.schemas.drawingml.x2006.main.CTEffectStyleList $r11;
        org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference $r5;
        java.lang.Object $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTEffectStyleItem $r12;
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect $r3, r14;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFSimpleShape$5;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape$5: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        r14 = (org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect) $r2;

        if r14 != null goto label1;

        $r4 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle getSpStyle()>();

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeStyle: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference getEffectRef()>();

        $l0 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrixReference: long getIdx()>();

        i1 = (int) $l0;

        if i1 == 0 goto label1;

        $r6 = r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        $r7 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFTheme getTheme()>();

        $r8 = virtualinvoke $r7.<org.apache.poi.xslf.usermodel.XSLFTheme: org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet getXmlObject()>();

        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTOfficeStyleSheet: org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles getThemeElements()>();

        $r10 = interfaceinvoke $r9.<org.openxmlformats.schemas.drawingml.x2006.main.CTBaseStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix getFmtScheme()>();

        $r11 = interfaceinvoke $r10.<org.openxmlformats.schemas.drawingml.x2006.main.CTStyleMatrix: org.openxmlformats.schemas.drawingml.x2006.main.CTEffectStyleList getEffectStyleLst()>();

        $i2 = i1 - 1;

        $r12 = interfaceinvoke $r11.<org.openxmlformats.schemas.drawingml.x2006.main.CTEffectStyleList: org.openxmlformats.schemas.drawingml.x2006.main.CTEffectStyleItem getEffectStyleArray(int)>($i2);

        $r13 = interfaceinvoke $r12.<org.openxmlformats.schemas.drawingml.x2006.main.CTEffectStyleItem: org.openxmlformats.schemas.drawingml.x2006.main.CTEffectList getEffectLst()>();

        r14 = interfaceinvoke $r13.<org.openxmlformats.schemas.drawingml.x2006.main.CTEffectList: org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect getOuterShdw()>();

     label1:
        if r14 == null goto label2;

        $r3 = <org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect NO_SHADOW>;

        if r14 != $r3 goto label3;

     label2:
        $r15 = null;

        goto label4;

     label3:
        $r15 = new org.apache.poi.xslf.usermodel.XSLFShadow;

        specialinvoke $r15.<org.apache.poi.xslf.usermodel.XSLFShadow: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect,org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r14, r1);

     label4:
        return $r15;
    }

    public void draw(java.awt.Graphics2D)
    {
        java.awt.Color $r3;
        org.apache.poi.xslf.model.geom.Path $r8, $r9;
        java.awt.Shape $r10, $r11;
        java.util.Iterator $r5;
        org.apache.poi.xslf.usermodel.RenderableShape $r0;
        org.apache.poi.xslf.model.geom.Outline r7;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        java.util.List $r4;
        java.awt.Graphics2D r2;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r2 := @parameter0: java.awt.Graphics2D;

        $r0 = new org.apache.poi.xslf.usermodel.RenderableShape;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        virtualinvoke $r0.<org.apache.poi.xslf.usermodel.RenderableShape: void render(java.awt.Graphics2D)>(r2);

        $r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.Color getLineColor()>();

        if $r3 == null goto label4;

        virtualinvoke r2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r3);

        $r4 = specialinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.util.List getDecorationOutlines(java.awt.Graphics2D)>(r2);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.xslf.model.geom.Outline) $r6;

        $r8 = virtualinvoke r7.<org.apache.poi.xslf.model.geom.Outline: org.apache.poi.xslf.model.geom.Path getPath()>();

        $z1 = virtualinvoke $r8.<org.apache.poi.xslf.model.geom.Path: boolean isFilled()>();

        if $z1 == 0 goto label2;

        $r11 = virtualinvoke r7.<org.apache.poi.xslf.model.geom.Outline: java.awt.Shape getOutline()>();

        virtualinvoke r2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r11);

     label2:
        $r9 = virtualinvoke r7.<org.apache.poi.xslf.model.geom.Outline: org.apache.poi.xslf.model.geom.Path getPath()>();

        $z2 = virtualinvoke $r9.<org.apache.poi.xslf.model.geom.Path: boolean isStroked()>();

        if $z2 == 0 goto label3;

        $r10 = virtualinvoke r7.<org.apache.poi.xslf.model.geom.Outline: java.awt.Shape getOutline()>();

        virtualinvoke r2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r10);

     label3:
        goto label1;

     label4:
        return;
    }

    boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r4;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1, $r7, $r8;
        org.apache.poi.xslf.usermodel.XSLFSheet $r2, $r3, $r9;
        int $i0, i1;
        org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum $r5, $r6;
        org.apache.poi.xslf.model.PropertyFetcher r0;
        boolean $z0, $z1, z2;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r0 := @parameter0: org.apache.poi.xslf.model.PropertyFetcher;

        $z0 = virtualinvoke r0.<org.apache.poi.xslf.model.PropertyFetcher: boolean fetch(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r1);

        z2 = $z0;

        $r2 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSheet getMasterSheet()>();

        $r4 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder getCTPlaceholder()>();

        if $r3 == null goto label7;

        if $r4 == null goto label7;

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholder(org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder)>($r4);

        if $r8 == null goto label1;

        z2 = virtualinvoke r0.<org.apache.poi.xslf.model.PropertyFetcher: boolean fetch(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>($r8);

     label1:
        if z2 != 0 goto label7;

        $z1 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: boolean isSetType()>();

        if $z1 != 0 goto label2;

        i1 = 2;

        goto label6;

     label2:
        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum getType()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum: int intValue()>();

        tableswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label3;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label4;
            default: goto label5;
        };

     label3:
        i1 = 1;

        goto label6;

     label4:
        $r6 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum getType()>();

        i1 = virtualinvoke $r6.<org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum: int intValue()>();

        goto label6;

     label5:
        i1 = 2;

     label6:
        $r9 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSheet getMasterSheet()>();

        if $r9 == null goto label7;

        $r7 = virtualinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholderByType(int)>(i1);

        if $r7 == null goto label7;

        z2 = virtualinvoke r0.<org.apache.poi.xslf.model.PropertyFetcher: boolean fetch(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>($r7);

     label7:
        return z2;
    }

    org.apache.poi.xslf.model.geom.CustomGeometry getGeometry()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        java.lang.IllegalStateException $r10;
        org.apache.poi.xslf.model.geom.CustomGeometry $r4, r15;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTCustomGeometry2D $r5;
        java.lang.String $r8, $r14;
        boolean $z0, $z1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D $r6;
        java.lang.Object $r3, $r9;
        java.lang.StringBuilder $r11, $r12, $r13;
        org.apache.poi.xslf.model.geom.PresetGeometries $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = staticinvoke <org.apache.poi.xslf.model.geom.PresetGeometries: org.apache.poi.xslf.model.geom.PresetGeometries getInstance()>();

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetPrstGeom()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D getPrstGeom()>();

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTPresetGeometry2D: org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum getPrst()>();

        $r8 = virtualinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.STShapeType$Enum: java.lang.String toString()>();

        $r9 = virtualinvoke $r2.<org.apache.poi.xslf.model.geom.PresetGeometries: java.lang.Object get(java.lang.Object)>($r8);

        r15 = (org.apache.poi.xslf.model.geom.CustomGeometry) $r9;

        if r15 != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown shape geometry: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        goto label4;

     label2:
        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetCustGeom()>();

        if $z1 == 0 goto label3;

        $r4 = new org.apache.poi.xslf.model.geom.CustomGeometry;

        $r5 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTCustomGeometry2D getCustGeom()>();

        specialinvoke $r4.<org.apache.poi.xslf.model.geom.CustomGeometry: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTCustomGeometry2D)>($r5);

        r15 = $r4;

        goto label4;

     label3:
        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.model.geom.PresetGeometries: java.lang.Object get(java.lang.Object)>("rect");

        r15 = (org.apache.poi.xslf.model.geom.CustomGeometry) $r3;

     label4:
        return r15;
    }

    public void drawContent(java.awt.Graphics2D)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        java.awt.Graphics2D r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r1 := @parameter0: java.awt.Graphics2D;

        return;
    }

    void copy(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        java.awt.Color $r3, $r4, $r5, $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r9, $r17;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0, r2;
        org.apache.poi.xslf.usermodel.XSLFShape r1;
        org.apache.poi.xslf.usermodel.XSLFSheet $r13, $r14;
        byte $b0;
        org.apache.poi.xslf.usermodel.LineCap $r18, $r19;
        org.apache.poi.openxml4j.opc.PackagePart $r15;
        java.lang.String $r12, $r16;
        boolean $z0, $z1, $z2;
        double $d0, $d1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties $r10;
        org.openxmlformats.schemas.drawingml.x2006.main.CTBlip $r11;
        org.apache.poi.xslf.usermodel.LineDash $r7, $r8;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r1 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: void copy(org.apache.poi.xslf.usermodel.XSLFShape)>(r1);

        r2 = (org.apache.poi.xslf.usermodel.XSLFSimpleShape) r1;

        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.Color getFillColor()>();

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.Color getFillColor()>();

        if $r3 == null goto label1;

        $z1 = virtualinvoke $r3.<java.awt.Color: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void setFillColor(java.awt.Color)>($r3);

     label1:
        $r17 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $z2 = interfaceinvoke $r17.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: boolean isSetBlipFill()>();

        if $z2 == 0 goto label2;

        $r9 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r10 = interfaceinvoke $r9.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties getBlipFill()>();

        $r11 = interfaceinvoke $r10.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlipFillProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTBlip getBlip()>();

        $r12 = interfaceinvoke $r11.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlip: java.lang.String getEmbed()>();

        $r13 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r14 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.XSLFSheet getSheet()>();

        $r15 = virtualinvoke $r14.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r16 = virtualinvoke $r13.<org.apache.poi.xslf.usermodel.XSLFSheet: java.lang.String importBlip(java.lang.String,org.apache.poi.openxml4j.opc.PackagePart)>($r12, $r15);

        interfaceinvoke $r11.<org.openxmlformats.schemas.drawingml.x2006.main.CTBlip: void setEmbed(java.lang.String)>($r16);

     label2:
        $r5 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.Color getLineColor()>();

        $r6 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: java.awt.Color getLineColor()>();

        if $r5 == null goto label3;

        $z0 = virtualinvoke $r5.<java.awt.Color: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void setLineColor(java.awt.Color)>($r5);

     label3:
        $d0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getLineWidth()>();

        $d1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getLineWidth()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label4;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void setLineWidth(double)>($d0);

     label4:
        $r7 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineDash getLineDash()>();

        $r8 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineDash getLineDash()>();

        if $r7 == null goto label5;

        if $r7 == $r8 goto label5;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void setLineDash(org.apache.poi.xslf.usermodel.LineDash)>($r7);

     label5:
        $r18 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineCap getLineCap()>();

        $r19 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineCap getLineCap()>();

        if $r18 == null goto label6;

        if $r18 == $r19 goto label6;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void setLineCap(org.apache.poi.xslf.usermodel.LineCap)>($r18);

     label6:
        return;
    }

    public void setLineHeadDecoration(org.apache.poi.xslf.usermodel.LineDecoration)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.LineDecoration r3;
        boolean $z0, $z1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.LineDecoration;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetHeadEnd()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getHeadEnd()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties addNewHeadEnd()>();

     label2:
        if r3 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: boolean isSetType()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void unsetType()>();

        goto label4;

     label3:
        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.LineDecoration: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum forInt(int)>($i1);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void setType(org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum)>($r4);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineDecoration getLineHeadDecoration()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.apache.poi.xslf.usermodel.LineDecoration[] $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.LineDecoration $r3, $r7;
        boolean $z0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetHeadEnd()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.LineDecoration: org.apache.poi.xslf.usermodel.LineDecoration NONE>;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getHeadEnd()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum getType()>();

        if $r5 != null goto label3;

        $r7 = <org.apache.poi.xslf.usermodel.LineDecoration: org.apache.poi.xslf.usermodel.LineDecoration NONE>;

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.LineDecoration: org.apache.poi.xslf.usermodel.LineDecoration[] values()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r7 = $r6[$i1];

     label4:
        return $r7;
    }

    public void setLineHeadWidth(org.apache.poi.xslf.usermodel.LineEndWidth)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r5;
        org.apache.poi.xslf.usermodel.LineEndWidth r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum $r4;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.LineEndWidth;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetHeadEnd()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getHeadEnd()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties addNewHeadEnd()>();

     label2:
        if r3 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: boolean isSetW()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void unsetW()>();

        goto label4;

     label3:
        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.LineEndWidth: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum forInt(int)>($i1);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void setW(org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum)>($r4);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineEndWidth getLineHeadWidth()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r4;
        org.apache.poi.xslf.usermodel.LineEndWidth $r3, $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum $r5;
        int $i0, $i1;
        boolean $z0;
        org.apache.poi.xslf.usermodel.LineEndWidth[] $r6;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetHeadEnd()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.LineEndWidth: org.apache.poi.xslf.usermodel.LineEndWidth MEDIUM>;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getHeadEnd()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum getW()>();

        if $r5 != null goto label3;

        $r7 = <org.apache.poi.xslf.usermodel.LineEndWidth: org.apache.poi.xslf.usermodel.LineEndWidth MEDIUM>;

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.LineEndWidth: org.apache.poi.xslf.usermodel.LineEndWidth[] values()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r7 = $r6[$i1];

     label4:
        return $r7;
    }

    public void setLineHeadLength(org.apache.poi.xslf.usermodel.LineEndLength)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r5;
        org.apache.poi.xslf.usermodel.LineEndLength r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.LineEndLength;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetHeadEnd()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getHeadEnd()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties addNewHeadEnd()>();

     label2:
        if r3 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: boolean isSetLen()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void unsetLen()>();

        goto label4;

     label3:
        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.LineEndLength: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum forInt(int)>($i1);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void setLen(org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum)>($r4);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineEndLength getLineHeadLength()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r4;
        org.apache.poi.xslf.usermodel.LineEndLength $r3, $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.poi.xslf.usermodel.LineEndLength[] $r6;
        int $i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum $r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetHeadEnd()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.LineEndLength: org.apache.poi.xslf.usermodel.LineEndLength MEDIUM>;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getHeadEnd()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum getLen()>();

        if $r5 != null goto label3;

        $r7 = <org.apache.poi.xslf.usermodel.LineEndLength: org.apache.poi.xslf.usermodel.LineEndLength MEDIUM>;

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.LineEndLength: org.apache.poi.xslf.usermodel.LineEndLength[] values()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r7 = $r6[$i1];

     label4:
        return $r7;
    }

    public void setLineTailDecoration(org.apache.poi.xslf.usermodel.LineDecoration)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.LineDecoration r3;
        boolean $z0, $z1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.LineDecoration;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetTailEnd()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getTailEnd()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties addNewTailEnd()>();

     label2:
        if r3 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: boolean isSetType()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void unsetType()>();

        goto label4;

     label3:
        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.LineDecoration: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum forInt(int)>($i1);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void setType(org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum)>($r4);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineDecoration getLineTailDecoration()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.apache.poi.xslf.usermodel.LineDecoration[] $r6;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.LineDecoration $r3, $r7;
        boolean $z0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetTailEnd()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.LineDecoration: org.apache.poi.xslf.usermodel.LineDecoration NONE>;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getTailEnd()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum getType()>();

        if $r5 != null goto label3;

        $r7 = <org.apache.poi.xslf.usermodel.LineDecoration: org.apache.poi.xslf.usermodel.LineDecoration NONE>;

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.LineDecoration: org.apache.poi.xslf.usermodel.LineDecoration[] values()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STLineEndType$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r7 = $r6[$i1];

     label4:
        return $r7;
    }

    public void setLineTailWidth(org.apache.poi.xslf.usermodel.LineEndWidth)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r5;
        org.apache.poi.xslf.usermodel.LineEndWidth r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum $r4;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.LineEndWidth;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetTailEnd()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getTailEnd()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties addNewTailEnd()>();

     label2:
        if r3 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: boolean isSetW()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void unsetW()>();

        goto label4;

     label3:
        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.LineEndWidth: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum forInt(int)>($i1);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void setW(org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum)>($r4);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineEndWidth getLineTailWidth()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r4;
        org.apache.poi.xslf.usermodel.LineEndWidth $r3, $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum $r5;
        int $i0, $i1;
        boolean $z0;
        org.apache.poi.xslf.usermodel.LineEndWidth[] $r6;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetTailEnd()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.LineEndWidth: org.apache.poi.xslf.usermodel.LineEndWidth MEDIUM>;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getTailEnd()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum getW()>();

        if $r5 != null goto label3;

        $r7 = <org.apache.poi.xslf.usermodel.LineEndWidth: org.apache.poi.xslf.usermodel.LineEndWidth MEDIUM>;

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.LineEndWidth: org.apache.poi.xslf.usermodel.LineEndWidth[] values()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STLineEndWidth$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r7 = $r6[$i1];

     label4:
        return $r7;
    }

    public void setLineTailLength(org.apache.poi.xslf.usermodel.LineEndLength)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r5;
        org.apache.poi.xslf.usermodel.LineEndLength r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int $i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.LineEndLength;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetTailEnd()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getTailEnd()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties addNewTailEnd()>();

     label2:
        if r3 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: boolean isSetLen()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void unsetLen()>();

        goto label4;

     label3:
        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.LineEndLength: int ordinal()>();

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum forInt(int)>($i1);

        interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: void setLen(org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum)>($r4);

     label4:
        return;
    }

    public org.apache.poi.xslf.usermodel.LineEndLength getLineTailLength()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties $r4;
        org.apache.poi.xslf.usermodel.LineEndLength $r3, $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        org.apache.poi.xslf.usermodel.LineEndLength[] $r6;
        int $i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum $r5;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties getSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties getLn()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: boolean isSetTailEnd()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = <org.apache.poi.xslf.usermodel.LineEndLength: org.apache.poi.xslf.usermodel.LineEndLength MEDIUM>;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties getTailEnd()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTLineEndProperties: org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum getLen()>();

        if $r5 != null goto label3;

        $r7 = <org.apache.poi.xslf.usermodel.LineEndLength: org.apache.poi.xslf.usermodel.LineEndLength MEDIUM>;

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.LineEndLength: org.apache.poi.xslf.usermodel.LineEndLength[] values()>();

        $i0 = virtualinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.STLineEndLength$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r7 = $r6[$i1];

     label4:
        return $r7;
    }

    org.apache.poi.xslf.model.geom.Outline getTailDecoration(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r5, $r15;
        org.apache.poi.xslf.usermodel.RenderableShape $r3;
        org.apache.poi.xslf.model.geom.Path $r9, $r11, $r13, r17;
        java.awt.geom.AffineTransform $r6;
        java.awt.geom.GeneralPath $r10, $r12;
        org.apache.poi.xslf.usermodel.LineEndLength $r1;
        org.apache.poi.xslf.usermodel.LineEndWidth $r2;
        org.apache.poi.xslf.model.geom.Outline $r18;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int[] $r7;
        java.awt.Shape r16;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.awt.Graphics2D r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.poi.xslf.usermodel.LineDecoration $r8;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, d49;
        java.awt.geom.Ellipse2D$Double $r14;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r4 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineEndLength getLineTailLength()>();

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineEndWidth getLineTailWidth()>();

        $d0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getLineWidth()>();

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>(2.5, $d0);

        $r3 = new org.apache.poi.xslf.usermodel.RenderableShape;

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.RenderableShape: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r0);

        $r5 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.geom.Rectangle2D getAnchor(java.awt.Graphics2D)>(r4);

        $d2 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getX()>();

        $d3 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getWidth()>();

        d4 = $d2 + $d3;

        $d5 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getY()>();

        $d6 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getHeight()>();

        d7 = $d5 + $d6;

        $d8 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d9 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d10 = $d8 / $d9;

        $d11 = staticinvoke <java.lang.Math: double atan(double)>($d10);

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>()>();

        r16 = null;

        r17 = null;

        $i0 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.LineEndWidth: int ordinal()>();

        $d12 = (double) $i0;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d12);

        $i1 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.LineEndLength: int ordinal()>();

        $d14 = (double) $i1;

        $d15 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d14);

        $r7 = <org.apache.poi.xslf.usermodel.XSLFSimpleShape$6: int[] $SwitchMap$org$apache$poi$xslf$usermodel$LineDecoration>;

        $r8 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineDecoration getLineTailDecoration()>();

        $i2 = virtualinvoke $r8.<org.apache.poi.xslf.usermodel.LineDecoration: int ordinal()>();

        $i3 = $r7[$i2];

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r13 = new org.apache.poi.xslf.model.geom.Path;

        specialinvoke $r13.<org.apache.poi.xslf.model.geom.Path: void <init>()>();

        r17 = $r13;

        $r14 = new java.awt.geom.Ellipse2D$Double;

        $d33 = $d1 * $d15;

        $d32 = $d1 * $d13;

        specialinvoke $r14.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d33, $d32);

        r16 = $r14;

        $r15 = interfaceinvoke $r14.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d34 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d35 = $d34 / 2.0;

        $d36 = d4 - $d35;

        $d37 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d38 = $d37 / 2.0;

        $d39 = d7 - $d38;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d36, $d39);

        $d40 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getX()>();

        $d41 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d42 = $d41 / 2.0;

        $d43 = $d40 + $d42;

        $d44 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getY()>();

        $d45 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d46 = $d45 / 2.0;

        $d47 = $d44 + $d46;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double,double,double)>($d11, $d43, $d47);

        goto label4;

     label2:
        $r11 = new org.apache.poi.xslf.model.geom.Path;

        specialinvoke $r11.<org.apache.poi.xslf.model.geom.Path: void <init>()>();

        r17 = $r11;

        $r12 = new java.awt.geom.GeneralPath;

        specialinvoke $r12.<java.awt.geom.GeneralPath: void <init>()>();

        $d25 = neg $d1;

        $d26 = $d25 * 3.0;

        $f5 = (float) $d26;

        $d27 = neg $d1;

        $d28 = $d27 * 2.0;

        $f4 = (float) $d28;

        virtualinvoke $r12.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f5, $f4);

        virtualinvoke $r12.<java.awt.geom.GeneralPath: void lineTo(float,float)>(0.0F, 0.0F);

        $d29 = neg $d1;

        $d30 = $d29 * 3.0;

        $f7 = (float) $d30;

        $d31 = $d1 * 2.0;

        $f6 = (float) $d31;

        virtualinvoke $r12.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f7, $f6);

        r16 = $r12;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>(d4, d7);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double)>($d11);

        goto label4;

     label3:
        $r9 = new org.apache.poi.xslf.model.geom.Path;

        specialinvoke $r9.<org.apache.poi.xslf.model.geom.Path: void <init>()>();

        r17 = $r9;

        $i4 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.LineEndWidth: int ordinal()>();

        $i5 = $i4 + 1;

        d48 = (double) $i5;

        $i6 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.LineEndLength: int ordinal()>();

        $i7 = $i6 + 1;

        d49 = (double) $i7;

        $r10 = new java.awt.geom.GeneralPath;

        specialinvoke $r10.<java.awt.geom.GeneralPath: void <init>()>();

        $d16 = neg $d1;

        $d17 = $d16 * d49;

        $f1 = (float) $d17;

        $d18 = neg $d1;

        $d19 = $d18 * d48;

        $d20 = $d19 / 2.0;

        $f0 = (float) $d20;

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f1, $f0);

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void lineTo(float,float)>(0.0F, 0.0F);

        $d21 = neg $d1;

        $d22 = $d21 * d49;

        $f3 = (float) $d22;

        $d23 = $d1 * d48;

        $d24 = $d23 / 2.0;

        $f2 = (float) $d24;

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f3, $f2);

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void closePath()>();

        r16 = $r10;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>(d4, d7);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double)>($d11);

        goto label4;

     label4:
        if r16 == null goto label5;

        r16 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r16);

     label5:
        if r16 != null goto label6;

        $r18 = null;

        goto label7;

     label6:
        $r18 = new org.apache.poi.xslf.model.geom.Outline;

        specialinvoke $r18.<org.apache.poi.xslf.model.geom.Outline: void <init>(java.awt.Shape,org.apache.poi.xslf.model.geom.Path)>(r16, r17);

     label7:
        return $r18;
    }

    org.apache.poi.xslf.model.geom.Outline getHeadDecoration(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r5, $r15;
        org.apache.poi.xslf.usermodel.RenderableShape $r3;
        org.apache.poi.xslf.model.geom.Path $r9, $r11, $r13, r17;
        java.awt.geom.AffineTransform $r6;
        java.awt.geom.GeneralPath $r10, $r12;
        org.apache.poi.xslf.usermodel.LineEndLength $r1;
        org.apache.poi.xslf.usermodel.LineEndWidth $r2;
        org.apache.poi.xslf.model.geom.Outline $r18;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r0;
        int[] $r7;
        java.awt.Shape r16;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.awt.Graphics2D r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.poi.xslf.usermodel.LineDecoration $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d40, d41;
        java.awt.geom.Ellipse2D$Double $r14;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r4 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineEndLength getLineHeadLength()>();

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineEndWidth getLineHeadWidth()>();

        $d0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: double getLineWidth()>();

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>(2.5, $d0);

        $r3 = new org.apache.poi.xslf.usermodel.RenderableShape;

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.RenderableShape: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r0);

        $r5 = virtualinvoke $r3.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.geom.Rectangle2D getAnchor(java.awt.Graphics2D)>(r4);

        $d2 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getX()>();

        $d3 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getY()>();

        $d4 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d5 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d6 = $d4 / $d5;

        $d7 = staticinvoke <java.lang.Math: double atan(double)>($d6);

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>()>();

        r16 = null;

        r17 = null;

        $r7 = <org.apache.poi.xslf.usermodel.XSLFSimpleShape$6: int[] $SwitchMap$org$apache$poi$xslf$usermodel$LineDecoration>;

        $r8 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.usermodel.LineDecoration getLineHeadDecoration()>();

        $i0 = virtualinvoke $r8.<org.apache.poi.xslf.usermodel.LineDecoration: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        $r13 = new org.apache.poi.xslf.model.geom.Path;

        specialinvoke $r13.<org.apache.poi.xslf.model.geom.Path: void <init>()>();

        r17 = $r13;

        $r14 = new java.awt.geom.Ellipse2D$Double;

        $d25 = $d1 * 1.0;

        $d24 = $d1 * 1.0;

        specialinvoke $r14.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d25, $d24);

        r16 = $r14;

        $r15 = interfaceinvoke $r14.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d26 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d27 = $d26 / 2.0;

        $d28 = $d2 - $d27;

        $d29 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d30 = $d29 / 2.0;

        $d31 = $d3 - $d30;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d28, $d31);

        $d32 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getX()>();

        $d33 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d34 = $d33 / 2.0;

        $d35 = $d32 + $d34;

        $d36 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getY()>();

        $d37 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d38 = $d37 / 2.0;

        $d39 = $d36 + $d38;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double,double,double)>($d7, $d35, $d39);

        goto label4;

     label2:
        $r11 = new org.apache.poi.xslf.model.geom.Path;

        specialinvoke $r11.<org.apache.poi.xslf.model.geom.Path: void <init>(boolean,boolean)>(0, 1);

        r17 = $r11;

        $r12 = new java.awt.geom.GeneralPath;

        specialinvoke $r12.<java.awt.geom.GeneralPath: void <init>()>();

        $d15 = $d1 * 3.0;

        $d16 = $d15 * 1.0;

        $f5 = (float) $d16;

        $d17 = neg $d1;

        $d18 = $d17 * 1.0;

        $d19 = $d18 * 2.0;

        $f4 = (float) $d19;

        virtualinvoke $r12.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f5, $f4);

        virtualinvoke $r12.<java.awt.geom.GeneralPath: void lineTo(float,float)>(0.0F, 0.0F);

        $d20 = $d1 * 3.0;

        $d21 = $d20 * 1.0;

        $f7 = (float) $d21;

        $d22 = $d1 * 1.0;

        $d23 = $d22 * 2.0;

        $f6 = (float) $d23;

        virtualinvoke $r12.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f7, $f6);

        r16 = $r12;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d2, $d3);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double)>($d7);

        goto label4;

     label3:
        $r9 = new org.apache.poi.xslf.model.geom.Path;

        specialinvoke $r9.<org.apache.poi.xslf.model.geom.Path: void <init>()>();

        r17 = $r9;

        $i2 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.LineEndWidth: int ordinal()>();

        $i3 = $i2 + 1;

        d40 = (double) $i3;

        $i4 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.LineEndLength: int ordinal()>();

        $i5 = $i4 + 1;

        d41 = (double) $i5;

        $r10 = new java.awt.geom.GeneralPath;

        specialinvoke $r10.<java.awt.geom.GeneralPath: void <init>()>();

        $d8 = $d1 * d41;

        $f1 = (float) $d8;

        $d9 = neg $d1;

        $d10 = $d9 * d40;

        $d11 = $d10 / 2.0;

        $f0 = (float) $d11;

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f1, $f0);

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void lineTo(float,float)>(0.0F, 0.0F);

        $d12 = $d1 * d41;

        $f3 = (float) $d12;

        $d13 = $d1 * d40;

        $d14 = $d13 / 2.0;

        $f2 = (float) $d14;

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f3, $f2);

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void closePath()>();

        r16 = $r10;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d2, $d3);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double)>($d7);

        goto label4;

     label4:
        if r16 == null goto label5;

        r16 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r16);

     label5:
        if r16 != null goto label6;

        $r18 = null;

        goto label7;

     label6:
        $r18 = new org.apache.poi.xslf.model.geom.Outline;

        specialinvoke $r18.<org.apache.poi.xslf.model.geom.Outline: void <init>(java.awt.Shape,org.apache.poi.xslf.model.geom.Path)>(r16, r17);

     label7:
        return $r18;
    }

    private java.util.List getDecorationOutlines(java.awt.Graphics2D)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        java.awt.Graphics2D r2;
        org.apache.poi.xslf.model.geom.Outline $r3, $r4;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        r2 := @parameter0: java.awt.Graphics2D;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.model.geom.Outline getHeadDecoration(java.awt.Graphics2D)>(r2);

        if $r3 == null goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        $r4 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.apache.poi.xslf.model.geom.Outline getTailDecoration(java.awt.Graphics2D)>(r2);

        if $r4 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        return $r0;
    }

    static org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect access$000()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect $r0;

        $r0 = <org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect NO_SHADOW>;

        return $r0;
    }

    static void <clinit>()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect $r0;

        $r0 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect$Factory: org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect newInstance()>();

        <org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.drawingml.x2006.main.CTOuterShadowEffect NO_SHADOW> = $r0;

        return;
    }
}
