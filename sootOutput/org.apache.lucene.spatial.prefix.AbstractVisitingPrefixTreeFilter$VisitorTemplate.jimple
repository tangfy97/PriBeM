public abstract class org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate extends org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter$BaseTermsEnumTraverser
{
    protected final boolean hasIndexedLeaves;
    private org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode;
    private org.apache.lucene.util.BytesRef curVNodeTerm;
    private org.apache.lucene.spatial.prefix.tree.Cell scanCell;
    private org.apache.lucene.util.BytesRef thisTerm;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0;

    public void <init>(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, boolean) throws java.io.IOException
    {
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r0;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter r1;
        org.apache.lucene.util.BytesRef $r4;
        org.apache.lucene.util.Bits r3;
        org.apache.lucene.index.AtomicReaderContext r2;
        boolean z0;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        r1 := @parameter0: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter2: org.apache.lucene.util.Bits;

        z0 := @parameter3: boolean;

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0> = r1;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter$BaseTermsEnumTraverser: void <init>(org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter,org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits)>(r1, r2, r3);

        $r4 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r4.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm> = $r4;

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean hasIndexedLeaves> = z0;

        return;
    }

    public org.apache.lucene.search.DocIdSet getDocIdSet() throws java.io.IOException
    {
        byte[] $r19, $r21;
        org.apache.lucene.index.TermsEnum $r1, $r2, $r23, $r29, $r32, $r35, $r43;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r0;
        org.apache.lucene.index.AtomicReader $r39;
        java.lang.AssertionError $r45, $r53, $r55;
        java.lang.String $r41;
        org.apache.lucene.index.TermsEnum$SeekStatus $r33, $r34, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.index.Terms $r42;
        org.apache.lucene.util.BytesRef $r3, $r18, $r20, $r22, $r25, $r26, $r30, $r31, $r36, $r44, $r56;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter $r5, $r40;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode $r4, $r7, $r9, $r11, $r15, $r16, $r27, $r46, $r47, $r50, $r51, $r54, r57;
        org.apache.lucene.spatial.prefix.tree.Cell $r8, $r17, $r28;
        org.apache.lucene.search.DocIdSet $r58;
        int $i0, $i1;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree $r6;
        java.util.Iterator $r10, $r12, $r13, $r48, $r52;
        java.lang.Object $r14, $r49;
        java.util.Comparator $r24;
        org.apache.lucene.index.AtomicReaderContext $r38;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        $z0 = <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r54 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        if $r54 == null goto label01;

        $r55 = new java.lang.AssertionError;

        specialinvoke $r55.<java.lang.AssertionError: void <init>(java.lang.Object)>("Called more than once?");

        throw $r55;

     label01:
        $r1 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        if $r1 != null goto label02;

        return null;

     label02:
        $r2 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm> = $r3;

        if $r3 != null goto label03;

        return null;

     label03:
        $r4 = new org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode;

        specialinvoke $r4.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: void <init>(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode)>(null);

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode> = $r4;

        $r7 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r5 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $r6 = $r5.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree grid>;

        $r8 = virtualinvoke $r6.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getWorldCell()>();

        virtualinvoke $r7.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: void reset(org.apache.lucene.spatial.prefix.tree.Cell)>($r8);

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void start()>();

        specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void addIntersectingChildren()>();

     label04:
        $r56 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        if $r56 == null goto label16;

        $r9 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r10 = $r9.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children>;

        if $r10 == null goto label06;

        $z5 = <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean $assertionsDisabled>;

        if $z5 != 0 goto label05;

        $r51 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r52 = $r51.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children>;

        $z6 = interfaceinvoke $r52.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label05;

        $r53 = new java.lang.AssertionError;

        specialinvoke $r53.<java.lang.AssertionError: void <init>()>();

        throw $r53;

     label05:
        $r46 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void preSiblings(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode)>($r46);

        $r47 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r48 = $r47.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children>;

        $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        $r50 = (org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode) $r49;

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode> = $r50;

        goto label10;

     label06:
        $r11 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        r57 = $r11.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode parent>;

     label07:
        if r57 != null goto label08;

        goto label16;

     label08:
        $r12 = r57.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children>;

        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r13 = r57.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children>;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode) $r14;

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode> = $r15;

        goto label10;

     label09:
        virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void postSiblings(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode)>(r57);

        r57.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children> = null;

        r57 = r57.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode parent>;

        goto label07;

     label10:
        $r18 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $r16 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r17 = $r16.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: org.apache.lucene.spatial.prefix.tree.Cell cell>;

        $r19 = virtualinvoke $r17.<org.apache.lucene.spatial.prefix.tree.Cell: byte[] getTokenBytes()>();

        $r18.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r19;

        $r22 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $r20 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $r21 = $r20.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i0 = lengthof $r21;

        $r22.<org.apache.lucene.util.BytesRef: int length> = $i0;

        $r23 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r24 = virtualinvoke $r23.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        $r26 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $r25 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $i1 = interfaceinvoke $r24.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r26, $r25);

        if $i1 <= 0 goto label11;

        $z3 = <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean $assertionsDisabled>;

        if $z3 != 0 goto label15;

        $r38 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.AtomicReaderContext context>;

        $r39 = virtualinvoke $r38.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r40 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $r41 = $r40.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: java.lang.String fieldName>;

        $r42 = virtualinvoke $r39.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Terms terms(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r44 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $z4 = virtualinvoke $r43.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r44, 0);

        if $z4 == 0 goto label15;

        $r45 = new java.lang.AssertionError;

        specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>("should be absent");

        throw $r45;

     label11:
        if $i1 >= 0 goto label13;

        $r32 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r31 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $r33 = virtualinvoke $r32.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef,boolean)>($r31, 1);

        $r34 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus END>;

        if $r33 != $r34 goto label12;

        goto label16;

     label12:
        $r35 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r36 = virtualinvoke $r35.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm> = $r36;

        $r37 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus NOT_FOUND>;

        if $r33 != $r37 goto label13;

        goto label04;

     label13:
        $r27 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r28 = $r27.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: org.apache.lucene.spatial.prefix.tree.Cell cell>;

        $z2 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean visit(org.apache.lucene.spatial.prefix.tree.Cell)>($r28);

        $r29 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r30 = virtualinvoke $r29.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm> = $r30;

        if $r30 != null goto label14;

        goto label16;

     label14:
        if $z2 == 0 goto label15;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void addIntersectingChildren()>();

     label15:
        goto label04;

     label16:
        $r58 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.search.DocIdSet finish()>();

        return $r58;
    }

    private void addIntersectingChildren() throws java.io.IOException
    {
        byte[] $r14;
        java.lang.IllegalStateException $r25;
        org.apache.lucene.index.TermsEnum $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r0;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate$VNodeCellIterator $r5;
        org.apache.lucene.util.BytesRef $r10, $r11, $r12, $r21, $r22, $r23, $r26;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter $r2, $r3, $r9, $r29;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode $r1, $r6, $r7, $r8;
        java.lang.AssertionError $r24, $r28;
        org.apache.lucene.spatial.prefix.tree.Cell $r13, $r16, $r17, $r18, $r19, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree $r15;
        java.util.Iterator $r4;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        $z0 = <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r26 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        if $r26 != null goto label1;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label1:
        $r1 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r27 = $r1.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: org.apache.lucene.spatial.prefix.tree.Cell cell>;

        $i0 = virtualinvoke $r27.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        $r2 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $i1 = $r2.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int detailLevel>;

        if $i0 < $i1 goto label2;

        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Spatial logic error");

        throw $r25;

     label2:
        $z1 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean hasIndexedLeaves>;

        if $z1 == 0 goto label4;

        $i3 = virtualinvoke $r27.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        if $i3 == 0 goto label4;

        $z3 = <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        $r23 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $r22 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $z5 = staticinvoke <org.apache.lucene.util.StringHelper: boolean startsWith(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef)>($r23, $r22);

        if $z5 != 0 goto label3;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label3:
        $r9 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $r15 = $r9.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree grid>;

        $r10 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $r14 = $r10.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r11 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $i5 = $r11.<org.apache.lucene.util.BytesRef: int offset>;

        $r12 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $i4 = $r12.<org.apache.lucene.util.BytesRef: int length>;

        $r13 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        $r16 = virtualinvoke $r15.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(byte[],int,int,org.apache.lucene.spatial.prefix.tree.Cell)>($r14, $i5, $i4, $r13);

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell> = $r16;

        $r17 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        $i6 = virtualinvoke $r17.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        $i7 = virtualinvoke $r27.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        if $i6 != $i7 goto label4;

        $r18 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        $z4 = virtualinvoke $r18.<org.apache.lucene.spatial.prefix.tree.Cell: boolean isLeaf()>();

        if $z4 == 0 goto label4;

        $r19 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell)>($r19);

        $r20 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r21 = virtualinvoke $r20.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm> = $r21;

        if $r21 != null goto label4;

        return;

     label4:
        $i8 = virtualinvoke $r27.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        $r29 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $i9 = $r29.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int prefixGridScanLevel>;

        if $i8 < $i9 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        if $z6 != 0 goto label8;

        $r4 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: java.util.Iterator findSubCellsToVisit(org.apache.lucene.spatial.prefix.tree.Cell)>($r27);

        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label7;

        return;

     label7:
        $r8 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        $r5 = new org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate$VNodeCellIterator;

        $r6 = new org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode;

        $r7 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode curVNode>;

        specialinvoke $r6.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: void <init>(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode)>($r7);

        specialinvoke $r5.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate$VNodeCellIterator: void <init>(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate,java.util.Iterator,org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode)>(r0, $r4, $r6);

        $r8.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode: java.util.Iterator children> = $r5;

        goto label9;

     label8:
        $r3 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $i2 = $r3.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int detailLevel>;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void scan(int)>($i2);

     label9:
        return;
    }

    protected java.util.Iterator findSubCellsToVisit(org.apache.lucene.spatial.prefix.tree.Cell)
    {
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r1;
        com.spatial4j.core.shape.Shape $r3;
        java.util.Iterator $r5;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter $r2;
        java.util.Collection $r4;
        org.apache.lucene.spatial.prefix.tree.Cell r0;

        r1 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        r0 := @parameter0: org.apache.lucene.spatial.prefix.tree.Cell;

        $r2 = r1.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $r3 = $r2.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: com.spatial4j.core.shape.Shape queryShape>;

        $r4 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: java.util.Collection getSubCells(com.spatial4j.core.shape.Shape)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        return $r5;
    }

    protected void scan(int) throws java.io.IOException
    {
        byte[] $r9;
        org.apache.lucene.spatial.prefix.tree.Cell $r8, $r11, $r12, $r13, $r14;
        org.apache.lucene.index.TermsEnum $r15;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r0;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree $r10;
        org.apache.lucene.util.BytesRef $r1, $r2, $r3, $r5, $r6, $r7, $r16;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter $r4;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        i3 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        if $r1 == null goto label5;

        $r3 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $r2 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef curVNodeTerm>;

        $z0 = staticinvoke <org.apache.lucene.util.StringHelper: boolean startsWith(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef)>($r3, $r2);

        if $z0 == 0 goto label5;

        $r4 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter this$0>;

        $r10 = $r4.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree grid>;

        $r5 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $r9 = $r5.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r6 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $i1 = $r6.<org.apache.lucene.util.BytesRef: int offset>;

        $r7 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm>;

        $i0 = $r7.<org.apache.lucene.util.BytesRef: int length>;

        $r8 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(byte[],int,int,org.apache.lucene.spatial.prefix.tree.Cell)>($r9, $i1, $i0, $r8);

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell> = $r11;

        $r12 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        $i2 = virtualinvoke $r12.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        if $i2 <= i3 goto label2;

        goto label4;

     label2:
        if $i2 == i3 goto label3;

        $r14 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        $z1 = virtualinvoke $r14.<org.apache.lucene.spatial.prefix.tree.Cell: boolean isLeaf()>();

        if $z1 == 0 goto label4;

     label3:
        $r13 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.spatial.prefix.tree.Cell scanCell>;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: void visitScanned(org.apache.lucene.spatial.prefix.tree.Cell)>($r13);

     label4:
        $r15 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.index.TermsEnum termsEnum>;

        $r16 = virtualinvoke $r15.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: org.apache.lucene.util.BytesRef thisTerm> = $r16;

        goto label1;

     label5:
        return;
    }

    protected abstract void start() throws java.io.IOException;

    protected abstract org.apache.lucene.search.DocIdSet finish() throws java.io.IOException;

    protected abstract boolean visit(org.apache.lucene.spatial.prefix.tree.Cell) throws java.io.IOException;

    protected abstract void visitLeaf(org.apache.lucene.spatial.prefix.tree.Cell) throws java.io.IOException;

    protected abstract void visitScanned(org.apache.lucene.spatial.prefix.tree.Cell) throws java.io.IOException;

    protected void preSiblings(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode) throws java.io.IOException
    {
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r0;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode r1;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        r1 := @parameter0: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode;

        return;
    }

    protected void postSiblings(org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode) throws java.io.IOException
    {
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate r0;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode r1;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate;

        r1 := @parameter0: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VNode;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter$VisitorTemplate: boolean $assertionsDisabled> = $z1;

        return;
    }
}
