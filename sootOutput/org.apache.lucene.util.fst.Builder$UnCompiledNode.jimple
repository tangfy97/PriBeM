public final class org.apache.lucene.util.fst.Builder$UnCompiledNode extends java.lang.Object implements org.apache.lucene.util.fst.Builder$Node
{
    final org.apache.lucene.util.fst.Builder owner;
    public int numArcs;
    public org.apache.lucene.util.fst.Builder$Arc[] arcs;
    public java.lang.Object output;
    public boolean isFinal;
    public long inputCount;
    public final int depth;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.fst.Builder, int)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        org.apache.lucene.util.fst.Builder$Arc[] $r2, $r3, $r5;
        org.apache.lucene.util.fst.Builder r1;
        org.apache.lucene.util.fst.Builder$Arc $r4;
        int i0;
        java.lang.Object $r6;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        r1 := @parameter0: org.apache.lucene.util.fst.Builder;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner> = r1;

        $r2 = newarray (org.apache.lucene.util.fst.Builder$Arc)[1];

        $r3 = (org.apache.lucene.util.fst.Builder$Arc[]) $r2;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs> = $r3;

        $r5 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r4 = new org.apache.lucene.util.fst.Builder$Arc;

        specialinvoke $r4.<org.apache.lucene.util.fst.Builder$Arc: void <init>()>();

        $r5[0] = $r4;

        $r6 = staticinvoke <org.apache.lucene.util.fst.Builder: java.lang.Object access$000(org.apache.lucene.util.fst.Builder)>(r1);

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output> = $r6;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int depth> = i0;

        return;
    }

    public boolean isCompiled()
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        return 0;
    }

    public void clear()
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        java.lang.Object $r2;
        org.apache.lucene.util.fst.Builder $r1;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs> = 0;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal> = 0;

        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $r2 = staticinvoke <org.apache.lucene.util.fst.Builder: java.lang.Object access$000(org.apache.lucene.util.fst.Builder)>($r1);

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output> = $r2;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount> = 0L;

        return;
    }

    public java.lang.Object getLastOutput(int)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        java.lang.AssertionError $r6, $r7;
        org.apache.lucene.util.fst.Builder$Arc[] $r1, $r4;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6;
        org.apache.lucene.util.fst.Builder$Arc $r2, $r5;
        boolean $z0, $z1;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i4 := @parameter0: int;

        $z0 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i6 > 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i2 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i3 = $i2 - 1;

        $r5 = $r4[$i3];

        $i5 = $r5.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        if $i5 == i4 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i1 = $i0 - 1;

        $r2 = $r1[$i1];

        $r3 = $r2.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        return $r3;
    }

    public void addArc(int, org.apache.lucene.util.fst.Builder$Node)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        org.apache.lucene.util.fst.Builder $r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r12, $r13, $r16, $r17, $r18, $r19, $r20;
        java.lang.AssertionError $r11, $r22;
        org.apache.lucene.util.fst.Builder$Arc[] $r1, $r5, $r6, $r9, $r14, $r23, r24;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        org.apache.lucene.util.fst.Builder$Arc $r7, $r8, $r10, $r15;
        java.lang.String $r21;
        org.apache.lucene.util.fst.Builder$Node r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i2 := @parameter0: int;

        r2 := @parameter1: org.apache.lucene.util.fst.Builder$Node;

        $z0 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 >= 0 goto label1;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label1:
        $z1 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i9 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i9 == 0 goto label2;

        $r9 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i10 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i11 = $i10 - 1;

        $r10 = $r9[$i11];

        $i12 = $r10.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        if i2 > $i12 goto label2;

        $r11 = new java.lang.AssertionError;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("arc[-1].label=");

        $r14 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i13 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i14 = $i13 - 1;

        $r15 = $r14[$i14];

        $i15 = $r15.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new label=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numArcs=");

        $i16 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r11;

     label2:
        $i17 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $r23 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i18 = lengthof $r23;

        if $i17 != $i18 goto label5;

        $i3 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i5 = $i3 + 1;

        $i4 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i6 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i5, $i4);

        r24 = newarray (org.apache.lucene.util.fst.Builder$Arc)[$i6];

        $r6 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r5 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i7 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r24, 0, $i7);

        i19 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

     label3:
        $i8 = lengthof r24;

        if i19 >= $i8 goto label4;

        $r8 = new org.apache.lucene.util.fst.Builder$Arc;

        specialinvoke $r8.<org.apache.lucene.util.fst.Builder$Arc: void <init>()>();

        r24[i19] = $r8;

        i19 = i19 + 1;

        goto label3;

     label4:
        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs> = r24;

     label5:
        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs> = $i1;

        $r7 = $r1[$i0];

        $r7.<org.apache.lucene.util.fst.Builder$Arc: int label> = i2;

        $r7.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target> = r2;

        $r3 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $r4 = staticinvoke <org.apache.lucene.util.fst.Builder: java.lang.Object access$000(org.apache.lucene.util.fst.Builder)>($r3);

        $r7.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput> = $r4;

        $r7.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output> = $r4;

        $r7.<org.apache.lucene.util.fst.Builder$Arc: boolean isFinal> = 0;

        return;
    }

    public void replaceLast(int, org.apache.lucene.util.fst.Builder$Node, java.lang.Object, boolean)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        java.lang.AssertionError $r4, $r12;
        org.apache.lucene.util.fst.Builder$Arc[] $r1;
        int $i0, $i1, i2, $i3, $i4, $i5;
        org.apache.lucene.util.fst.Builder$Arc $r11;
        java.lang.String $r10;
        boolean $z0, $z1, z2;
        org.apache.lucene.util.fst.Builder$Node r2;
        java.lang.Object r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i2 := @parameter0: int;

        r2 := @parameter1: org.apache.lucene.util.fst.Builder$Node;

        r3 := @parameter2: java.lang.Object;

        z2 := @parameter3: boolean;

        $z0 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i5 > 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i1 = $i0 - 1;

        $r11 = $r1[$i1];

        $z1 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i3 = $r11.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        if $i3 == i2 goto label2;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("arc.label=");

        $i4 = $r11.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r4;

     label2:
        $r11.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target> = r2;

        $r11.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput> = r3;

        $r11.<org.apache.lucene.util.fst.Builder$Arc: boolean isFinal> = z2;

        return;
    }

    public void deleteLast(int, org.apache.lucene.util.fst.Builder$Node)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        java.lang.AssertionError $r5, $r8, $r9;
        org.apache.lucene.util.fst.Builder$Arc[] $r2, $r6;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8;
        org.apache.lucene.util.fst.Builder$Arc $r3, $r7;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.fst.Builder$Node r1, $r4;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i4 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.util.fst.Builder$Node;

        $z0 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i8 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i8 > 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r6 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i5 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i6 = $i5 - 1;

        $r7 = $r6[$i6];

        $i7 = $r7.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        if i4 == $i7 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $z2 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r2 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i2 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i3 = $i2 - 1;

        $r3 = $r2[$i3];

        $r4 = $r3.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        if r1 == $r4 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i1 = $i0 - 1;

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs> = $i1;

        return;
    }

    public void setLastOutput(int, java.lang.Object)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        java.lang.AssertionError $r3, $r5, $r7;
        org.apache.lucene.util.fst.Builder$Arc[] $r1;
        org.apache.lucene.util.fst.Builder $r6;
        int $i0, $i1, i2, $i3, $i4;
        org.apache.lucene.util.fst.Builder$Arc $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r2;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i2 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $z0 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $z3 = staticinvoke <org.apache.lucene.util.fst.Builder: boolean access$100(org.apache.lucene.util.fst.Builder,java.lang.Object)>($r6, r2);

        if $z3 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i4 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i4 > 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i1 = $i0 - 1;

        $r4 = $r1[$i1];

        $z2 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i3 = $r4.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        if $i3 == i2 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $r4.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output> = r2;

        return;
    }

    public void prependOutput(java.lang.Object)
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        org.apache.lucene.util.fst.Builder $r1, $r8, $r11, $r22, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r9, $r23, $r25;
        org.apache.lucene.util.fst.Outputs $r5, $r17;
        org.apache.lucene.util.fst.Builder$Arc[] $r10, $r14, $r19;
        org.apache.lucene.util.fst.Builder$Arc $r12, $r15, $r20;
        int i0, $i1;
        org.apache.lucene.util.fst.FST $r2, $r13;
        java.lang.Object r3, $r4, $r6, $r7, $r16, $r18, $r21;

        r0 := @this: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        r3 := @parameter0: java.lang.Object;

        $z0 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r24 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $z6 = staticinvoke <org.apache.lucene.util.fst.Builder: boolean access$100(org.apache.lucene.util.fst.Builder,java.lang.Object)>($r24, r3);

        if $z6 != 0 goto label1;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label1:
        i0 = 0;

     label2:
        $i1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i0 >= $i1 goto label4;

        $r10 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r12 = $r10[i0];

        $r11 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $r13 = staticinvoke <org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST access$200(org.apache.lucene.util.fst.Builder)>($r11);

        $r17 = $r13.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r14 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r15 = $r14[i0];

        $r16 = $r15.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $r18 = virtualinvoke $r17.<org.apache.lucene.util.fst.Outputs: java.lang.Object add(java.lang.Object,java.lang.Object)>(r3, $r16);

        $r12.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output> = $r18;

        $z4 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z4 != 0 goto label3;

        $r22 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $r19 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r20 = $r19[i0];

        $r21 = $r20.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $z5 = staticinvoke <org.apache.lucene.util.fst.Builder: boolean access$100(org.apache.lucene.util.fst.Builder,java.lang.Object)>($r22, $r21);

        if $z5 != 0 goto label3;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $z1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal>;

        if $z1 == 0 goto label5;

        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $r2 = staticinvoke <org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST access$200(org.apache.lucene.util.fst.Builder)>($r1);

        $r5 = $r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r4 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.fst.Outputs: java.lang.Object add(java.lang.Object,java.lang.Object)>(r3, $r4);

        r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output> = $r6;

        $z2 = <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $r8 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder owner>;

        $r7 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output>;

        $z3 = staticinvoke <org.apache.lucene.util.fst.Builder: boolean access$100(org.apache.lucene.util.fst.Builder,java.lang.Object)>($r8, $r7);

        if $z3 != 0 goto label5;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label5:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/Builder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean $assertionsDisabled> = $z1;

        return;
    }
}
