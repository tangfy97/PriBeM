public class org.springframework.validation.DataBinder extends java.lang.Object implements org.springframework.beans.PropertyEditorRegistry, org.springframework.beans.TypeConverter
{
    public static final java.lang.String DEFAULT_OBJECT_NAME;
    public static final int DEFAULT_AUTO_GROW_COLLECTION_LIMIT;
    protected static final org.apache.commons.logging.Log logger;
    private final java.lang.Object target;
    private final java.lang.String objectName;
    private org.springframework.validation.AbstractPropertyBindingResult bindingResult;
    private org.springframework.beans.SimpleTypeConverter typeConverter;
    private org.springframework.validation.BindException bindException;
    private boolean ignoreUnknownFields;
    private boolean ignoreInvalidFields;
    private boolean autoGrowNestedPaths;
    private int autoGrowCollectionLimit;
    private java.lang.String[] allowedFields;
    private java.lang.String[] disallowedFields;
    private java.lang.String[] requiredFields;
    private org.springframework.validation.BindingErrorProcessor bindingErrorProcessor;
    private org.springframework.validation.Validator validator;
    private org.springframework.core.convert.ConversionService conversionService;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.validation.DataBinder: int DEFAULT_AUTO_GROW_COLLECTION_LIMIT> = 256;

        <org.springframework.validation.DataBinder: java.lang.String DEFAULT_OBJECT_NAME> = "target";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/validation/DataBinder;");

        <org.springframework.validation.DataBinder: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.springframework.validation.DataBinder: void <init>(java.lang.Object,java.lang.String)>(r1, "target");

        return;
    }

    public void <init>(java.lang.Object, java.lang.String)
    {
        org.springframework.validation.DataBinder r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.validation.DefaultBindingErrorProcessor $r1;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.validation.DataBinder: boolean ignoreUnknownFields> = 1;

        r0.<org.springframework.validation.DataBinder: boolean ignoreInvalidFields> = 0;

        r0.<org.springframework.validation.DataBinder: boolean autoGrowNestedPaths> = 1;

        r0.<org.springframework.validation.DataBinder: int autoGrowCollectionLimit> = 256;

        $r1 = new org.springframework.validation.DefaultBindingErrorProcessor;

        specialinvoke $r1.<org.springframework.validation.DefaultBindingErrorProcessor: void <init>()>();

        r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingErrorProcessor bindingErrorProcessor> = $r1;

        r0.<org.springframework.validation.DataBinder: java.lang.Object target> = r2;

        r0.<org.springframework.validation.DataBinder: java.lang.String objectName> = r3;

        return;
    }

    public java.lang.Object getTarget()
    {
        java.lang.Object $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: java.lang.Object target>;

        return $r1;
    }

    public java.lang.String getObjectName()
    {
        java.lang.String $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: java.lang.String objectName>;

        return $r1;
    }

    public void setAutoGrowNestedPaths(boolean)
    {
        org.springframework.validation.AbstractPropertyBindingResult $r1;
        org.springframework.validation.DataBinder r0;
        boolean z0, $z1;

        r0 := @this: org.springframework.validation.DataBinder;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        if $r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z1, "DataBinder is already initialized - call setAutoGrowNestedPaths before other configuration methods");

        r0.<org.springframework.validation.DataBinder: boolean autoGrowNestedPaths> = z0;

        return;
    }

    public boolean isAutoGrowNestedPaths()
    {
        org.springframework.validation.DataBinder r0;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        $z0 = r0.<org.springframework.validation.DataBinder: boolean autoGrowNestedPaths>;

        return $z0;
    }

    public void setAutoGrowCollectionLimit(int)
    {
        int i0;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        i0 := @parameter0: int;

        r0.<org.springframework.validation.DataBinder: int autoGrowCollectionLimit> = i0;

        return;
    }

    public int getAutoGrowCollectionLimit()
    {
        int $i0;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $i0 = r0.<org.springframework.validation.DataBinder: int autoGrowCollectionLimit>;

        return $i0;
    }

    public void initBeanPropertyAccess()
    {
        org.springframework.validation.DataBinder r0;
        org.springframework.validation.AbstractPropertyBindingResult $r1, $r7;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r4;
        org.springframework.validation.BeanPropertyBindingResult $r2;
        org.springframework.core.convert.ConversionService $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        if $r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z1, "DataBinder is already initialized - call initBeanPropertyAccess before other configuration methods");

        $r2 = new org.springframework.validation.BeanPropertyBindingResult;

        $r3 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        $r4 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.String getObjectName()>();

        $z0 = virtualinvoke r0.<org.springframework.validation.DataBinder: boolean isAutoGrowNestedPaths()>();

        $i0 = virtualinvoke r0.<org.springframework.validation.DataBinder: int getAutoGrowCollectionLimit()>();

        specialinvoke $r2.<org.springframework.validation.BeanPropertyBindingResult: void <init>(java.lang.Object,java.lang.String,boolean,int)>($r3, $r4, $z0, $i0);

        r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult> = $r2;

        $r5 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        if $r5 == null goto label3;

        $r7 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        $r6 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        virtualinvoke $r7.<org.springframework.validation.AbstractPropertyBindingResult: void initConversion(org.springframework.core.convert.ConversionService)>($r6);

     label3:
        return;
    }

    public void initDirectFieldAccess()
    {
        org.springframework.validation.DataBinder r0;
        org.springframework.validation.DirectFieldBindingResult $r2;
        org.springframework.validation.AbstractPropertyBindingResult $r1, $r7;
        java.lang.Object $r3;
        java.lang.String $r4;
        org.springframework.core.convert.ConversionService $r5, $r6;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z0, "DataBinder is already initialized - call initDirectFieldAccess before other configuration methods");

        $r2 = new org.springframework.validation.DirectFieldBindingResult;

        $r3 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        $r4 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.String getObjectName()>();

        specialinvoke $r2.<org.springframework.validation.DirectFieldBindingResult: void <init>(java.lang.Object,java.lang.String)>($r3, $r4);

        r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult> = $r2;

        $r5 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        if $r5 == null goto label3;

        $r7 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        $r6 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        virtualinvoke $r7.<org.springframework.validation.AbstractPropertyBindingResult: void initConversion(org.springframework.core.convert.ConversionService)>($r6);

     label3:
        return;
    }

    protected org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()
    {
        org.springframework.validation.AbstractPropertyBindingResult $r1, $r2;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.springframework.validation.DataBinder: void initBeanPropertyAccess()>();

     label1:
        $r2 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        return $r2;
    }

    protected org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()
    {
        org.springframework.validation.AbstractPropertyBindingResult $r1;
        org.springframework.beans.ConfigurablePropertyAccessor $r2;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        $r2 = virtualinvoke $r1.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        return $r2;
    }

    protected org.springframework.beans.SimpleTypeConverter getSimpleTypeConverter()
    {
        org.springframework.validation.DataBinder r0;
        org.springframework.core.convert.ConversionService $r3, $r4;
        org.springframework.beans.SimpleTypeConverter $r1, $r2, $r5, $r6;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.beans.SimpleTypeConverter typeConverter>;

        if $r1 != null goto label1;

        $r2 = new org.springframework.beans.SimpleTypeConverter;

        specialinvoke $r2.<org.springframework.beans.SimpleTypeConverter: void <init>()>();

        r0.<org.springframework.validation.DataBinder: org.springframework.beans.SimpleTypeConverter typeConverter> = $r2;

        $r3 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        if $r3 == null goto label1;

        $r5 = r0.<org.springframework.validation.DataBinder: org.springframework.beans.SimpleTypeConverter typeConverter>;

        $r4 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        virtualinvoke $r5.<org.springframework.beans.SimpleTypeConverter: void setConversionService(org.springframework.core.convert.ConversionService)>($r4);

     label1:
        $r6 = r0.<org.springframework.validation.DataBinder: org.springframework.beans.SimpleTypeConverter typeConverter>;

        return $r6;
    }

    protected org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()
    {
        org.springframework.validation.AbstractPropertyBindingResult $r3;
        org.springframework.validation.DataBinder r0;
        java.lang.Object $r1;
        org.springframework.beans.ConfigurablePropertyAccessor $r4;
        org.springframework.beans.SimpleTypeConverter $r2;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        $r4 = virtualinvoke $r3.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.SimpleTypeConverter getSimpleTypeConverter()>();

        return $r2;
    }

    protected org.springframework.beans.TypeConverter getTypeConverter()
    {
        org.springframework.validation.AbstractPropertyBindingResult $r3;
        org.springframework.validation.DataBinder r0;
        java.lang.Object $r1;
        org.springframework.beans.ConfigurablePropertyAccessor $r4;
        org.springframework.beans.SimpleTypeConverter $r2;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        $r4 = virtualinvoke $r3.<org.springframework.validation.AbstractPropertyBindingResult: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.SimpleTypeConverter getSimpleTypeConverter()>();

        return $r2;
    }

    public org.springframework.validation.BindingResult getBindingResult()
    {
        org.springframework.validation.AbstractPropertyBindingResult $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        return $r1;
    }

    public org.springframework.validation.BindException getErrors()
    {
        org.springframework.validation.DataBinder r0;
        org.springframework.validation.BindingResult $r4;
        org.springframework.validation.BindException $r1, $r2, $r3;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindException bindException>;

        if $r1 != null goto label1;

        $r3 = new org.springframework.validation.BindException;

        $r4 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        specialinvoke $r3.<org.springframework.validation.BindException: void <init>(org.springframework.validation.BindingResult)>($r4);

        r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindException bindException> = $r3;

     label1:
        $r2 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindException bindException>;

        return $r2;
    }

    public void setIgnoreUnknownFields(boolean)
    {
        org.springframework.validation.DataBinder r0;
        boolean z0;

        r0 := @this: org.springframework.validation.DataBinder;

        z0 := @parameter0: boolean;

        r0.<org.springframework.validation.DataBinder: boolean ignoreUnknownFields> = z0;

        return;
    }

    public boolean isIgnoreUnknownFields()
    {
        org.springframework.validation.DataBinder r0;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        $z0 = r0.<org.springframework.validation.DataBinder: boolean ignoreUnknownFields>;

        return $z0;
    }

    public void setIgnoreInvalidFields(boolean)
    {
        org.springframework.validation.DataBinder r0;
        boolean z0;

        r0 := @this: org.springframework.validation.DataBinder;

        z0 := @parameter0: boolean;

        r0.<org.springframework.validation.DataBinder: boolean ignoreInvalidFields> = z0;

        return;
    }

    public boolean isIgnoreInvalidFields()
    {
        org.springframework.validation.DataBinder r0;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        $z0 = r0.<org.springframework.validation.DataBinder: boolean ignoreInvalidFields>;

        return $z0;
    }

    public transient void setAllowedFields(java.lang.String[])
    {
        java.lang.String[] r1, $r2;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: java.lang.String[] canonicalPropertyNames(java.lang.String[])>(r1);

        r0.<org.springframework.validation.DataBinder: java.lang.String[] allowedFields> = $r2;

        return;
    }

    public java.lang.String[] getAllowedFields()
    {
        java.lang.String[] $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: java.lang.String[] allowedFields>;

        return $r1;
    }

    public transient void setDisallowedFields(java.lang.String[])
    {
        java.lang.String[] r1, $r2;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: java.lang.String[] canonicalPropertyNames(java.lang.String[])>(r1);

        r0.<org.springframework.validation.DataBinder: java.lang.String[] disallowedFields> = $r2;

        return;
    }

    public java.lang.String[] getDisallowedFields()
    {
        java.lang.String[] $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: java.lang.String[] disallowedFields>;

        return $r1;
    }

    public transient void setRequiredFields(java.lang.String[])
    {
        org.springframework.validation.DataBinder r0;
        java.lang.String[] r1, $r2;
        org.apache.commons.logging.Log $r3, $r5;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: java.lang.String[] canonicalPropertyNames(java.lang.String[])>(r1);

        r0.<org.springframework.validation.DataBinder: java.lang.String[] requiredFields> = $r2;

        $r3 = <org.springframework.validation.DataBinder: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = <org.springframework.validation.DataBinder: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("DataBinder requires binding of required fields [");

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label1:
        return;
    }

    public java.lang.String[] getRequiredFields()
    {
        java.lang.String[] $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: java.lang.String[] requiredFields>;

        return $r1;
    }

    public void setExtractOldValueForEditor(boolean)
    {
        org.springframework.beans.ConfigurablePropertyAccessor $r1;
        org.springframework.validation.DataBinder r0;
        boolean z0;

        r0 := @this: org.springframework.validation.DataBinder;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        interfaceinvoke $r1.<org.springframework.beans.ConfigurablePropertyAccessor: void setExtractOldValueForEditor(boolean)>(z0);

        return;
    }

    public void setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)
    {
        org.springframework.validation.MessageCodesResolver r2;
        org.springframework.validation.AbstractPropertyBindingResult $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: org.springframework.validation.MessageCodesResolver;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        virtualinvoke $r1.<org.springframework.validation.AbstractPropertyBindingResult: void setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)>(r2);

        return;
    }

    public void setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)
    {
        org.springframework.validation.BindingErrorProcessor r0;
        org.springframework.validation.DataBinder r1;

        r1 := @this: org.springframework.validation.DataBinder;

        r0 := @parameter0: org.springframework.validation.BindingErrorProcessor;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BindingErrorProcessor must not be null");

        r1.<org.springframework.validation.DataBinder: org.springframework.validation.BindingErrorProcessor bindingErrorProcessor> = r0;

        return;
    }

    public org.springframework.validation.BindingErrorProcessor getBindingErrorProcessor()
    {
        org.springframework.validation.BindingErrorProcessor $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingErrorProcessor bindingErrorProcessor>;

        return $r1;
    }

    public void setValidator(org.springframework.validation.Validator)
    {
        java.lang.IllegalStateException $r5;
        org.springframework.validation.Validator r0;
        org.springframework.validation.DataBinder r1;
        java.lang.Object $r2, $r3, $r9;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        java.lang.String $r11;
        boolean $z0;

        r1 := @this: org.springframework.validation.DataBinder;

        r0 := @parameter0: org.springframework.validation.Validator;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r1.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = interfaceinvoke r0.<org.springframework.validation.Validator: boolean supports(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid target for Validator [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke r1.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        r1.<org.springframework.validation.DataBinder: org.springframework.validation.Validator validator> = r0;

        return;
    }

    public org.springframework.validation.Validator getValidator()
    {
        org.springframework.validation.Validator $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.Validator validator>;

        return $r1;
    }

    public void setConversionService(org.springframework.core.convert.ConversionService)
    {
        org.springframework.validation.AbstractPropertyBindingResult $r3, $r4;
        org.springframework.validation.DataBinder r0;
        org.springframework.core.convert.ConversionService $r1, r2;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: org.springframework.core.convert.ConversionService;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z0, "DataBinder is already initialized with ConversionService");

        r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService> = r2;

        $r3 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        if $r3 == null goto label3;

        if r2 == null goto label3;

        $r4 = r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult bindingResult>;

        virtualinvoke $r4.<org.springframework.validation.AbstractPropertyBindingResult: void initConversion(org.springframework.core.convert.ConversionService)>(r2);

     label3:
        return;
    }

    public org.springframework.core.convert.ConversionService getConversionService()
    {
        org.springframework.core.convert.ConversionService $r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = r0.<org.springframework.validation.DataBinder: org.springframework.core.convert.ConversionService conversionService>;

        return $r1;
    }

    public void registerCustomEditor(java.lang.Class, java.beans.PropertyEditor)
    {
        java.beans.PropertyEditor r3;
        org.springframework.validation.DataBinder r0;
        org.springframework.beans.PropertyEditorRegistry $r1;
        java.lang.Class r2;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.beans.PropertyEditor;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()>();

        interfaceinvoke $r1.<org.springframework.beans.PropertyEditorRegistry: void registerCustomEditor(java.lang.Class,java.beans.PropertyEditor)>(r2, r3);

        return;
    }

    public void registerCustomEditor(java.lang.Class, java.lang.String, java.beans.PropertyEditor)
    {
        java.beans.PropertyEditor r4;
        org.springframework.validation.DataBinder r0;
        org.springframework.beans.PropertyEditorRegistry $r1;
        java.lang.Class r2;
        java.lang.String r3;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.beans.PropertyEditor;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()>();

        interfaceinvoke $r1.<org.springframework.beans.PropertyEditorRegistry: void registerCustomEditor(java.lang.Class,java.lang.String,java.beans.PropertyEditor)>(r2, r3, r4);

        return;
    }

    public java.beans.PropertyEditor findCustomEditor(java.lang.Class, java.lang.String)
    {
        java.beans.PropertyEditor $r4;
        org.springframework.validation.DataBinder r0;
        org.springframework.beans.PropertyEditorRegistry $r1;
        java.lang.Class r2;
        java.lang.String r3;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()>();

        $r4 = interfaceinvoke $r1.<org.springframework.beans.PropertyEditorRegistry: java.beans.PropertyEditor findCustomEditor(java.lang.Class,java.lang.String)>(r2, r3);

        return $r4;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class) throws org.springframework.beans.TypeMismatchException
    {
        org.springframework.validation.DataBinder r0;
        org.springframework.beans.TypeConverter $r1;
        java.lang.Object r2, $r4;
        java.lang.Class r3;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.TypeConverter getTypeConverter()>();

        $r4 = interfaceinvoke $r1.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>(r2, r3);

        return $r4;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) throws org.springframework.beans.TypeMismatchException
    {
        org.springframework.validation.DataBinder r0;
        org.springframework.core.MethodParameter r4;
        org.springframework.beans.TypeConverter $r1;
        java.lang.Object r2, $r5;
        java.lang.Class r3;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Class;

        r4 := @parameter2: org.springframework.core.MethodParameter;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.TypeConverter getTypeConverter()>();

        $r5 = interfaceinvoke $r1.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r2, r3, r4);

        return $r5;
    }

    public void bind(org.springframework.beans.PropertyValues)
    {
        org.springframework.validation.DataBinder r1;
        org.springframework.beans.MutablePropertyValues $r2;
        org.springframework.beans.PropertyValues r0;
        boolean $z0;

        r1 := @this: org.springframework.validation.DataBinder;

        r0 := @parameter0: org.springframework.beans.PropertyValues;

        $z0 = r0 instanceof org.springframework.beans.MutablePropertyValues;

        if $z0 == 0 goto label1;

        $r2 = (org.springframework.beans.MutablePropertyValues) r0;

        goto label2;

     label1:
        $r2 = new org.springframework.beans.MutablePropertyValues;

        specialinvoke $r2.<org.springframework.beans.MutablePropertyValues: void <init>(org.springframework.beans.PropertyValues)>(r0);

     label2:
        virtualinvoke r1.<org.springframework.validation.DataBinder: void doBind(org.springframework.beans.MutablePropertyValues)>($r2);

        return;
    }

    protected void doBind(org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.beans.MutablePropertyValues r1;
        org.springframework.validation.DataBinder r0;

        r0 := @this: org.springframework.validation.DataBinder;

        r1 := @parameter0: org.springframework.beans.MutablePropertyValues;

        virtualinvoke r0.<org.springframework.validation.DataBinder: void checkAllowedFields(org.springframework.beans.MutablePropertyValues)>(r1);

        virtualinvoke r0.<org.springframework.validation.DataBinder: void checkRequiredFields(org.springframework.beans.MutablePropertyValues)>(r1);

        virtualinvoke r0.<org.springframework.validation.DataBinder: void applyPropertyValues(org.springframework.beans.MutablePropertyValues)>(r1);

        return;
    }

    protected void checkAllowedFields(org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.validation.BindingResult $r6;
        org.springframework.beans.PropertyValue[] $r1;
        int i0, i1;
        java.lang.String $r3, $r4, $r13;
        boolean $z0, $z1;
        org.springframework.beans.PropertyValue r2;
        org.springframework.validation.DataBinder r5;
        org.springframework.beans.MutablePropertyValues r0;
        org.apache.commons.logging.Log $r7, $r9;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;

        r5 := @this: org.springframework.validation.DataBinder;

        r0 := @parameter0: org.springframework.beans.MutablePropertyValues;

        $r1 = virtualinvoke r0.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $r3 = virtualinvoke r2.<org.springframework.beans.PropertyValue: java.lang.String getName()>();

        $r4 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: java.lang.String canonicalPropertyName(java.lang.String)>($r3);

        $z0 = virtualinvoke r5.<org.springframework.validation.DataBinder: boolean isAllowed(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.springframework.beans.MutablePropertyValues: void removePropertyValue(org.springframework.beans.PropertyValue)>(r2);

        $r6 = virtualinvoke r5.<org.springframework.validation.DataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        interfaceinvoke $r6.<org.springframework.validation.BindingResult: void recordSuppressedField(java.lang.String)>($r4);

        $r7 = <org.springframework.validation.DataBinder: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r9 = <org.springframework.validation.DataBinder: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field [");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has been removed from PropertyValues ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("and will not be bound, because it has not been found in the list of allowed fields");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return;
    }

    protected boolean isAllowed(java.lang.String)
    {
        org.springframework.validation.DataBinder r0;
        java.lang.String[] $r1, $r2;
        java.lang.String r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.validation.DataBinder;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.String[] getAllowedFields()>();

        $r2 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.String[] getDisallowedFields()>();

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r1);

        if $z0 != 0 goto label1;

        $z3 = staticinvoke <org.springframework.util.PatternMatchUtils: boolean simpleMatch(java.lang.String[],java.lang.String)>($r1, r3);

        if $z3 == 0 goto label3;

     label1:
        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r2);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.springframework.util.PatternMatchUtils: boolean simpleMatch(java.lang.String[],java.lang.String)>($r2, r3);

        if $z2 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    protected void checkRequiredFields(org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.validation.BindingErrorProcessor $r8;
        org.springframework.beans.PropertyValue[] $r4;
        boolean $z0, $z1, $z2, $z3, $z4, z6, $z7, $z8, $z9, $z10;
        org.springframework.validation.DataBinder r0;
        java.lang.String[] $r1, r13;
        java.util.HashMap $r2;
        int $i0, i1, i2, i3, i4;
        java.lang.String $r5, $r6, $r14, $r16, r19;
        org.springframework.beans.PropertyValue r18, r20;
        org.springframework.beans.MutablePropertyValues r3;
        org.springframework.validation.AbstractPropertyBindingResult $r9;
        java.lang.Object $r7, $r10, $r11, $r12, $r15, $r17;

        r0 := @this: org.springframework.validation.DataBinder;

        r3 := @parameter0: org.springframework.beans.MutablePropertyValues;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.String[] getRequiredFields()>();

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r1);

        if $z0 != 0 goto label14;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r3.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>();

        i1 = lengthof $r4;

        i2 = 0;

        goto label02;

     label01:
        r18 = $r4[i2];

        $r5 = virtualinvoke r18.<org.springframework.beans.PropertyValue: java.lang.String getName()>();

        $r6 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: java.lang.String canonicalPropertyName(java.lang.String)>($r5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r18);

        i2 = i2 + 1;

     label02:
        if i2 < i1 goto label01;

        i3 = lengthof $r1;

        i4 = 0;

        goto label13;

     label03:
        r19 = $r1[i4];

        $r7 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        r20 = (org.springframework.beans.PropertyValue) $r7;

        if r20 == null goto label04;

        $r17 = virtualinvoke r20.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        if $r17 == null goto label04;

        $z10 = 0;

        $z9 = 0;

        goto label05;

     label04:
        $z10 = 1;

        $z9 = 1;

     label05:
        z6 = $z9;

        if $z10 != 0 goto label11;

        $r10 = virtualinvoke r20.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        $z1 = $r10 instanceof java.lang.String;

        if $z1 == 0 goto label08;

        $r15 = virtualinvoke r20.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        $r16 = (java.lang.String) $r15;

        $z4 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r16);

        if $z4 == 0 goto label06;

        $z7 = 0;

        goto label07;

     label06:
        $z7 = 1;

     label07:
        z6 = $z7;

        goto label11;

     label08:
        $r11 = virtualinvoke r20.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        $z2 = $r11 instanceof java.lang.String[];

        if $z2 == 0 goto label11;

        $r12 = virtualinvoke r20.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        r13 = (java.lang.String[]) $r12;

        $i0 = lengthof r13;

        if $i0 == 0 goto label09;

        $r14 = r13[0];

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r14);

        if $z3 == 0 goto label09;

        $z8 = 0;

        goto label10;

     label09:
        $z8 = 1;

     label10:
        z6 = $z8;

     label11:
        if z6 == 0 goto label12;

        $r8 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingErrorProcessor getBindingErrorProcessor()>();

        $r9 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        interfaceinvoke $r8.<org.springframework.validation.BindingErrorProcessor: void processMissingFieldError(java.lang.String,org.springframework.validation.BindingResult)>(r19, $r9);

        if r20 == null goto label12;

        virtualinvoke r3.<org.springframework.beans.MutablePropertyValues: void removePropertyValue(org.springframework.beans.PropertyValue)>(r20);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r19);

     label12:
        i4 = i4 + 1;

     label13:
        if i4 < i3 goto label03;

     label14:
        return;
    }

    protected void applyPropertyValues(org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.beans.PropertyAccessException r5;
        org.springframework.validation.DataBinder r0;
        org.springframework.beans.MutablePropertyValues r2;
        org.springframework.beans.PropertyAccessException[] $r4;
        org.springframework.validation.BindingErrorProcessor $r6;
        org.springframework.validation.AbstractPropertyBindingResult $r7;
        org.springframework.beans.PropertyBatchUpdateException $r3;
        int i0, i1;
        org.springframework.beans.ConfigurablePropertyAccessor $r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.validation.DataBinder;

        r2 := @parameter0: org.springframework.beans.MutablePropertyValues;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()>();

        $z0 = virtualinvoke r0.<org.springframework.validation.DataBinder: boolean isIgnoreUnknownFields()>();

        $z1 = virtualinvoke r0.<org.springframework.validation.DataBinder: boolean isIgnoreInvalidFields()>();

        interfaceinvoke $r1.<org.springframework.beans.ConfigurablePropertyAccessor: void setPropertyValues(org.springframework.beans.PropertyValues,boolean,boolean)>(r2, $z0, $z1);

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<org.springframework.beans.PropertyBatchUpdateException: org.springframework.beans.PropertyAccessException[] getPropertyAccessExceptions()>();

        i0 = lengthof $r4;

        i1 = 0;

        goto label5;

     label4:
        r5 = $r4[i1];

        $r6 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingErrorProcessor getBindingErrorProcessor()>();

        $r7 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.AbstractPropertyBindingResult getInternalBindingResult()>();

        interfaceinvoke $r6.<org.springframework.validation.BindingErrorProcessor: void processPropertyAccessException(org.springframework.beans.PropertyAccessException,org.springframework.validation.BindingResult)>(r5, $r7);

        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label4;

     label6:
        return;

        catch org.springframework.beans.PropertyBatchUpdateException from label1 to label2 with label3;
    }

    public void validate()
    {
        org.springframework.validation.Validator $r1;
        org.springframework.validation.DataBinder r0;
        java.lang.Object $r2;
        org.springframework.validation.BindingResult $r3;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.Validator getValidator()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.validation.DataBinder: java.lang.Object getTarget()>();

        $r3 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        interfaceinvoke $r1.<org.springframework.validation.Validator: void validate(java.lang.Object,org.springframework.validation.Errors)>($r2, $r3);

     label1:
        return;
    }

    public java.util.Map close() throws org.springframework.validation.BindException
    {
        org.springframework.validation.DataBinder r0;
        java.util.Map $r3;
        org.springframework.validation.BindingResult $r1, $r2, $r5;
        org.springframework.validation.BindException $r4;
        boolean $z0;

        r0 := @this: org.springframework.validation.DataBinder;

        $r1 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        $z0 = interfaceinvoke $r1.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        $r4 = new org.springframework.validation.BindException;

        $r5 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        specialinvoke $r4.<org.springframework.validation.BindException: void <init>(org.springframework.validation.BindingResult)>($r5);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.validation.DataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        $r3 = interfaceinvoke $r2.<org.springframework.validation.BindingResult: java.util.Map getModel()>();

        return $r3;
    }
}
