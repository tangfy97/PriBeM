public class org.apache.lucene.util.automaton.Automaton extends java.lang.Object implements java.lang.Cloneable
{
    public static final int MINIMIZE_HOPCROFT;
    static int minimization;
    org.apache.lucene.util.automaton.State initial;
    boolean deterministic;
    transient java.lang.Object info;
    java.lang.String singleton;
    static boolean minimize_always;
    static boolean allow_mutation;
    private org.apache.lucene.util.automaton.State[] numberedStates;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.automaton.State)
    {
        org.apache.lucene.util.automaton.State r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.State;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = r1;

        r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 1;

        r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton> = null;

        return;
    }

    public void <init>()
    {
        org.apache.lucene.util.automaton.State $r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r1.<org.apache.lucene.util.automaton.State: void <init>()>();

        specialinvoke r0.<org.apache.lucene.util.automaton.Automaton: void <init>(org.apache.lucene.util.automaton.State)>($r1);

        return;
    }

    public static void setMinimization(int)
    {
        int i0;

        i0 := @parameter0: int;

        <org.apache.lucene.util.automaton.Automaton: int minimization> = i0;

        return;
    }

    public static void setMinimizeAlways(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <org.apache.lucene.util.automaton.Automaton: boolean minimize_always> = z0;

        return;
    }

    public static boolean setAllowMutate(boolean)
    {
        boolean z0, z1;

        z1 := @parameter0: boolean;

        z0 = <org.apache.lucene.util.automaton.Automaton: boolean allow_mutation>;

        <org.apache.lucene.util.automaton.Automaton: boolean allow_mutation> = z1;

        return z0;
    }

    static boolean getAllowMutate()
    {
        boolean $z0;

        $z0 = <org.apache.lucene.util.automaton.Automaton: boolean allow_mutation>;

        return $z0;
    }

    void checkMinimizeAlways()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = <org.apache.lucene.util.automaton.Automaton: boolean minimize_always>;

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>(r0);

     label1:
        return;
    }

    boolean isSingleton()
    {
        java.lang.String $r1;
        org.apache.lucene.util.automaton.Automaton r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getSingleton()
    {
        java.lang.String $r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        return $r1;
    }

    public org.apache.lucene.util.automaton.State getInitialState()
    {
        org.apache.lucene.util.automaton.State $r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        return $r1;
    }

    public boolean isDeterministic()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic>;

        return $z0;
    }

    public void setDeterministic(boolean)
    {
        org.apache.lucene.util.automaton.Automaton r0;
        boolean z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = z0;

        return;
    }

    public void setInfo(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.lucene.util.automaton.Automaton: java.lang.Object info> = r1;

        return;
    }

    public java.lang.Object getInfo()
    {
        java.lang.Object $r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.Object info>;

        return $r1;
    }

    public org.apache.lucene.util.automaton.State[] getNumberedStates()
    {
        org.apache.lucene.util.automaton.Transition[] $r13;
        boolean $z0;
        org.apache.lucene.util.automaton.Automaton r0;
        java.util.HashSet $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.util.LinkedList $r3;
        org.apache.lucene.util.automaton.Transition r14;
        org.apache.lucene.util.automaton.State $r5, $r6, $r7, $r8, $r15, $r16, $r17, $r18, $r20, r24;
        org.apache.lucene.util.automaton.State[] $r1, $r4, $r9, $r10, $r11, $r19, $r21, r22, $r23, r25, $r26;
        java.lang.Object $r12;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        if $r1 != null goto label7;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        $r4 = newarray (org.apache.lucene.util.automaton.State)[4];

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates> = $r4;

        $r5 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r6);

        $r7 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r7.<org.apache.lucene.util.automaton.State: int number> = 0;

        $r9 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        $r8 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r9[0] = $r8;

        i7 = 1;

     label1:
        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label6;

        $r12 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r24 = (org.apache.lucene.util.automaton.State) $r12;

        i8 = 0;

     label2:
        $i2 = r24.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i8 >= $i2 goto label5;

        $r13 = r24.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r14 = $r13[i8];

        $r15 = r14.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z0 != 0 goto label4;

        $r16 = r14.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r16);

        $r17 = r14.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r17);

        $r18 = r14.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r18.<org.apache.lucene.util.automaton.State: int number> = i7;

        $r19 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        $i3 = lengthof $r19;

        if i7 != $i3 goto label3;

        $i5 = 1 + i7;

        $i4 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i6 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i5, $i4);

        r22 = newarray (org.apache.lucene.util.automaton.State)[$i6];

        $r23 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, 0, r22, 0, i7);

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates> = r22;

     label3:
        $r21 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        $r20 = r14.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r21[i7] = $r20;

        i7 = i7 + 1;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        goto label1;

     label6:
        $r10 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        $i1 = lengthof $r10;

        if $i1 == i7 goto label7;

        r25 = newarray (org.apache.lucene.util.automaton.State)[i7];

        $r11 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r25, 0, i7);

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates> = r25;

     label7:
        $r26 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates>;

        return $r26;
    }

    public void setNumberedStates(org.apache.lucene.util.automaton.State[])
    {
        int $i0;
        org.apache.lucene.util.automaton.State[] r1;
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.State[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void setNumberedStates(org.apache.lucene.util.automaton.State[],int)>(r1, $i0);

        return;
    }

    public void setNumberedStates(org.apache.lucene.util.automaton.State[], int)
    {
        org.apache.lucene.util.automaton.Automaton r1;
        java.lang.AssertionError $r3;
        int i0, $i1, $i2;
        org.apache.lucene.util.automaton.State[] r0, r2;
        boolean $z0;

        r1 := @this: org.apache.lucene.util.automaton.Automaton;

        r0 := @parameter0: org.apache.lucene.util.automaton.State[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.automaton.Automaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = lengthof r0;

        if i0 <= $i2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        r2 = newarray (org.apache.lucene.util.automaton.State)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i0);

        r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates> = r2;

        goto label3;

     label2:
        r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates> = r0;

     label3:
        return;
    }

    public void clearNumberedStates()
    {
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] numberedStates> = null;

        return;
    }

    public java.util.Set getAcceptStates()
    {
        java.lang.Iterable $r8;
        java.util.HashSet $r1, $r2;
        int $i0;
        java.util.LinkedList $r3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.Transition r11;
        org.apache.lucene.util.automaton.State $r4, $r5, r7, $r12, $r13, $r14;
        java.lang.Object $r6, $r10;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        $r4 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r4);

        $r5 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>($r5);

     label1:
        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label6;

        $r6 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r7 = (org.apache.lucene.util.automaton.State) $r6;

        $z0 = r7.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(r7);

     label2:
        $r8 = virtualinvoke r7.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.util.automaton.Transition) $r10;

        $r12 = r11.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z1 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r12);

        if $z1 != 0 goto label4;

        $r13 = r11.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>($r13);

        $r14 = r11.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r14);

     label4:
        goto label3;

     label5:
        goto label1;

     label6:
        return $r1;
    }

    void totalize()
    {
        java.lang.Iterable $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean $z0;
        java.util.Iterator $r7;
        org.apache.lucene.util.automaton.Automaton r2;
        org.apache.lucene.util.automaton.Transition $r1, $r8, r10, $r11;
        org.apache.lucene.util.automaton.State $r0, r4;
        org.apache.lucene.util.automaton.State[] $r3;
        java.lang.Object $r9;
        java.util.Comparator $r5;

        r2 := @this: org.apache.lucene.util.automaton.Automaton;

        $r0 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r0.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r1 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r1.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(0, 1114111, $r0);

        virtualinvoke $r0.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r1);

        $r3 = virtualinvoke r2.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        i0 = lengthof $r3;

        i7 = 0;

     label1:
        if i7 >= i0 goto label7;

        r4 = $r3[i7];

        i8 = 0;

        $r5 = <org.apache.lucene.util.automaton.Transition: java.util.Comparator CompareByMinMaxThenDest>;

        virtualinvoke r4.<org.apache.lucene.util.automaton.State: void sortTransitions(java.util.Comparator)>($r5);

        $r6 = virtualinvoke r4.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.util.automaton.Transition) $r9;

        $i1 = r10.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i1 <= i8 goto label3;

        $r11 = new org.apache.lucene.util.automaton.Transition;

        $i5 = r10.<org.apache.lucene.util.automaton.Transition: int min>;

        $i6 = $i5 - 1;

        specialinvoke $r11.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i8, $i6, $r0);

        virtualinvoke r4.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r11);

     label3:
        $i2 = r10.<org.apache.lucene.util.automaton.Transition: int max>;

        $i3 = $i2 + 1;

        if $i3 <= i8 goto label4;

        $i4 = r10.<org.apache.lucene.util.automaton.Transition: int max>;

        i8 = $i4 + 1;

     label4:
        goto label2;

     label5:
        if i8 > 1114111 goto label6;

        $r8 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r8.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i8, 1114111, $r0);

        virtualinvoke r4.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r8);

     label6:
        i7 = i7 + 1;

        goto label1;

     label7:
        virtualinvoke r2.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        return;
    }

    public void restoreInvariant()
    {
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void removeDeadTransitions()>();

        return;
    }

    public void reduce()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        int i0, i1;
        org.apache.lucene.util.automaton.State[] $r1;
        org.apache.lucene.util.automaton.State r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        virtualinvoke r2.<org.apache.lucene.util.automaton.State: void reduce()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    int[] getStartPoints()
    {
        java.lang.Integer $r3, $r10, $r11, r14;
        java.lang.Iterable $r6;
        java.util.HashSet $r2;
        int[] r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        boolean $z0, $z1;
        java.util.Iterator $r4, $r7;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.Transition r9;
        org.apache.lucene.util.automaton.State r12;
        org.apache.lucene.util.automaton.State[] $r1;
        java.lang.Object $r5, $r8;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        i7 = lengthof $r1;

        i8 = 0;

     label1:
        if i8 >= i7 goto label5;

        r12 = $r1[i8];

        $r6 = virtualinvoke r12.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.lucene.util.automaton.Transition) $r8;

        $i3 = r9.<org.apache.lucene.util.automaton.Transition: int min>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r10);

        $i4 = r9.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i4 >= 1114111 goto label3;

        $i5 = r9.<org.apache.lucene.util.automaton.Transition: int max>;

        $i6 = $i5 + 1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label3:
        goto label2;

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        r13 = newarray (int)[$i0];

        i9 = 0;

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.Integer) $r5;

        $i1 = i9;

        i9 = i9 + 1;

        $i2 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        r13[$i1] = $i2;

        goto label6;

     label7:
        staticinvoke <java.util.Arrays: void sort(int[])>(r13);

        return r13;
    }

    private org.apache.lucene.util.automaton.State[] getLiveStates()
    {
        org.apache.lucene.util.automaton.Transition[] $r11;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.automaton.Automaton r0;
        java.util.Set $r8, $r14;
        java.lang.Object[] $r5;
        java.util.HashSet $r2, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12;
        java.util.Set[] r17;
        java.util.LinkedList $r3;
        java.util.Iterator $r9;
        org.apache.lucene.util.automaton.Transition $r12;
        org.apache.lucene.util.automaton.State $r13, r16, r18, r19, r20;
        org.apache.lucene.util.automaton.State[] $r1, $r4, $r6;
        java.lang.Object $r7, $r10;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        i7 = lengthof $r1;

        i8 = 0;

     label01:
        if i8 >= i7 goto label03;

        r16 = $r1[i8];

        $z2 = virtualinvoke r16.<org.apache.lucene.util.automaton.State: boolean isAccept()>();

        if $z2 == 0 goto label02;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r16);

     label02:
        i8 = i8 + 1;

        goto label01;

     label03:
        $i0 = lengthof $r1;

        r17 = newarray (java.util.Set)[$i0];

        i9 = 0;

     label04:
        $i1 = lengthof r17;

        if i9 >= $i1 goto label05;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r17[i9] = $r15;

        i9 = i9 + 1;

        goto label04;

     label05:
        i10 = lengthof $r1;

        i11 = 0;

     label06:
        if i11 >= i10 goto label09;

        r18 = $r1[i11];

        i12 = 0;

     label07:
        $i5 = r18.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i12 >= $i5 goto label08;

        $r11 = r18.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $r12 = $r11[i12];

        $r13 = $r12.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i6 = $r13.<org.apache.lucene.util.automaton.State: int number>;

        $r14 = r17[$i6];

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>(r18);

        i12 = i12 + 1;

        goto label07;

     label08:
        i11 = i11 + 1;

        goto label06;

     label09:
        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>(java.util.Collection)>($r2);

     label10:
        $i2 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i2 <= 0 goto label14;

        $r7 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r19 = (org.apache.lucene.util.automaton.State) $r7;

        $i4 = r19.<org.apache.lucene.util.automaton.State: int number>;

        $r8 = r17[$i4];

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.lucene.util.automaton.State) $r10;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r20);

        if $z1 != 0 goto label12;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r20);

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r20);

     label12:
        goto label11;

     label13:
        goto label10;

     label14:
        $i3 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r4 = newarray (org.apache.lucene.util.automaton.State)[$i3];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.lucene.util.automaton.State[]) $r5;

        return $r6;
    }

    public void removeDeadTransitions()
    {
        org.apache.lucene.util.automaton.Transition[] $r5, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13;
        boolean $z0, $z1;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.Transition r6, $r9;
        org.apache.lucene.util.automaton.State $r4, $r7, r11, r12;
        org.apache.lucene.util.automaton.State[] $r1, $r2;
        java.util.BitSet $r3;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = specialinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getLiveStates()>();

        $r3 = new java.util.BitSet;

        $i0 = lengthof $r1;

        specialinvoke $r3.<java.util.BitSet: void <init>(int)>($i0);

        i7 = lengthof $r2;

        i8 = 0;

     label02:
        if i8 >= i7 goto label03;

        r11 = $r2[i8];

        $i6 = r11.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke $r3.<java.util.BitSet: void set(int)>($i6);

        i8 = i8 + 1;

        goto label02;

     label03:
        i9 = lengthof $r1;

        i10 = 0;

     label04:
        if i10 >= i9 goto label08;

        r12 = $r1[i10];

        i11 = 0;

        i12 = 0;

     label05:
        $i3 = r12.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i12 >= $i3 goto label07;

        $r5 = r12.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r6 = $r5[i12];

        $r7 = r6.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i4 = $r7.<org.apache.lucene.util.automaton.State: int number>;

        $z1 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>($i4);

        if $z1 == 0 goto label06;

        $r10 = r12.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i5 = i11;

        i11 = i11 + 1;

        $r8 = r12.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $r9 = $r8[i12];

        $r10[$i5] = $r9;

     label06:
        i12 = i12 + 1;

        goto label05;

     label07:
        r12.<org.apache.lucene.util.automaton.State: int numTransitions> = i11;

        i10 = i10 + 1;

        goto label04;

     label08:
        i13 = 0;

     label09:
        $i1 = lengthof $r2;

        if i13 >= $i1 goto label10;

        $r4 = $r2[i13];

        $r4.<org.apache.lucene.util.automaton.State: int number> = i13;

        i13 = i13 + 1;

        goto label09;

     label10:
        $i2 = lengthof $r2;

        if $i2 <= 0 goto label11;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void setNumberedStates(org.apache.lucene.util.automaton.State[])>($r2);

        goto label12;

     label11:
        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

     label12:
        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void reduce()>();

        return;
    }

    public org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()
    {
        org.apache.lucene.util.automaton.Transition[][] r2;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.State r3;
        java.lang.AssertionError $r7;
        org.apache.lucene.util.automaton.Transition[] $r5, $r6;
        int $i0, i1, $i2, i3;
        org.apache.lucene.util.automaton.State[] $r1;
        java.util.Comparator $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.lucene.util.automaton.Transition[])[$i0];

        i1 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r3 = $r1[i3];

        $r4 = <org.apache.lucene.util.automaton.Transition: java.util.Comparator CompareByMinMaxThenDest>;

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void sortTransitions(java.util.Comparator)>($r4);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void trimTransitionsArray()>();

        $i2 = r3.<org.apache.lucene.util.automaton.State: int number>;

        $r5 = r3.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r2[$i2] = $r5;

        $z0 = <org.apache.lucene.util.automaton.Automaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r6 = r3.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        if $r6 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return r2;
    }

    public void expandSingleton()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.Transition $r4;
        org.apache.lucene.util.automaton.State $r1, $r3, r6;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label3;

        $r1 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r1.<org.apache.lucene.util.automaton.State: void <init>()>();

        r6 = $r1;

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r1;

        i3 = 0;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i3 >= $i0 goto label2;

        $r3 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r3.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r4 = new org.apache.lucene.util.automaton.Transition;

        $r5 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i1 = virtualinvoke $r5.<java.lang.String: int codePointAt(int)>(i3);

        specialinvoke $r4.<org.apache.lucene.util.automaton.Transition: void <init>(int,org.apache.lucene.util.automaton.State)>($i1, $r3);

        virtualinvoke r6.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r4);

        r6 = $r3;

        $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i1);

        i3 = i3 + $i2;

        goto label1;

     label2:
        r6.<org.apache.lucene.util.automaton.State: boolean accept> = 1;

        r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 1;

        r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton> = null;

     label3:
        return;
    }

    public int getNumberOfStates()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.util.automaton.State[] $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r3.<java.lang.String: int codePointCount(int,int)>(0, $i1);

        $i3 = $i2 + 1;

        return $i3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getNumberOfTransitions()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.State r2;
        int i0, $i1, $i2, $i3, i4, i5;
        org.apache.lucene.util.automaton.State[] $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r3 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r4.<java.lang.String: int codePointCount(int,int)>(0, $i2);

        return $i3;

     label1:
        i4 = 0;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        i0 = lengthof $r1;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        r2 = $r1[i5];

        $i1 = virtualinvoke r2.<org.apache.lucene.util.automaton.State: int numTransitions()>();

        i4 = i4 + $i1;

        i5 = i5 + 1;

        goto label2;

     label3:
        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        org.apache.lucene.util.automaton.Automaton r1;

        r1 := @this: org.apache.lucene.util.automaton.Automaton;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("use BasicOperations.sameLanguage instead");

        throw $r0;
    }

    public int hashCode()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.util.automaton.Automaton r1;

        r1 := @this: org.apache.lucene.util.automaton.Automaton;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.String toString()
    {
        int[] r12;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        org.apache.lucene.util.automaton.Automaton r1;
        org.apache.lucene.util.automaton.State $r4, r13;
        java.lang.StringBuilder $r0, $r3, $r5;
        org.apache.lucene.util.automaton.State[] $r2;

        r1 := @this: org.apache.lucene.util.automaton.Automaton;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("singleton: ");

        $r9 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r8 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r9.<java.lang.String: int codePointCount(int,int)>(0, $i1);

        r12 = newarray (int)[$i2];

        i8 = 0;

        i9 = 0;

     label1:
        $r10 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        if i8 >= $i3 goto label2;

        $i5 = i9;

        i9 = i9 + 1;

        $r11 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i6 = virtualinvoke $r11.<java.lang.String: int codePointAt(int)>(i8);

        r12[$i5] = $i6;

        $i7 = staticinvoke <java.lang.Character: int charCount(int)>($i6);

        i8 = i8 + $i7;

        goto label1;

     label2:
        i10 = lengthof r12;

        i11 = 0;

     label3:
        if i11 >= i10 goto label4;

        i4 = r12[i11];

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>(i4, $r0);

        i11 = i11 + 1;

        goto label3;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label7;

     label5:
        $r2 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initial state: ");

        $r4 = r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $i0 = $r4.<org.apache.lucene.util.automaton.State: int number>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i12 = lengthof $r2;

        i13 = 0;

     label6:
        if i13 >= i12 goto label7;

        r13 = $r2[i13];

        $r7 = virtualinvoke r13.<org.apache.lucene.util.automaton.State: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i13 = i13 + 1;

        goto label6;

     label7:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String toDot()
    {
        java.lang.Iterable $r8;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r4;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        org.apache.lucene.util.automaton.Automaton r1;
        org.apache.lucene.util.automaton.Transition r11;
        org.apache.lucene.util.automaton.State r5, $r7;
        java.lang.StringBuilder $r0, $r3, $r6, $r12, $r13, $r14;
        org.apache.lucene.util.automaton.State[] $r2;
        java.lang.Object $r10;

        r1 := @this: org.apache.lucene.util.automaton.Automaton;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("digraph Automaton {\n");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  rankdir = LR;\n");

        $r2 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        i0 = lengthof $r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label7;

        r5 = $r2[i4];

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $i1 = r5.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $z0 = r5.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=doublecircle,label=\"\"];\n");

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=circle,label=\"\"];\n");

     label3:
        $r7 = r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        if r5 != $r7 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  initial [shape=plaintext,label=\"\"];\n");

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  initial -> ");

        $i3 = r5.<org.apache.lucene.util.automaton.State: int number>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label4:
        $r8 = virtualinvoke r5.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.util.automaton.Transition) $r10;

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $i2 = r5.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r11.<org.apache.lucene.util.automaton.Transition: void appendDot(java.lang.StringBuilder)>($r0);

        goto label5;

     label6:
        i4 = i4 + 1;

        goto label1;

     label7:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    org.apache.lucene.util.automaton.Automaton cloneExpanded()
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        virtualinvoke $r1.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        return $r1;
    }

    org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = <org.apache.lucene.util.automaton.Automaton: boolean allow_mutation>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton clone()
    {
        java.util.HashMap $r2;
        java.lang.Iterable $r7;
        java.lang.CloneNotSupportedException $r16;
        int $i0, $i1, i2, i3, i4, i5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r8;
        org.apache.lucene.util.automaton.Automaton r0, r18;
        org.apache.lucene.util.automaton.Transition r10, $r11;
        org.apache.lucene.util.automaton.State r5, $r6, $r12, $r14, $r15, r19, r20;
        java.lang.RuntimeException $r17;
        java.lang.Object $r1, $r4, $r9, $r13;
        org.apache.lucene.util.automaton.State[] $r3;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

     label01:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r18 = (org.apache.lucene.util.automaton.Automaton) $r1;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 != 0 goto label08;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        i2 = lengthof $r3;

        i3 = 0;

     label02:
        if i3 >= i2 goto label03;

        r19 = $r3[i3];

        $r15 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r15.<org.apache.lucene.util.automaton.State: void <init>()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r15);

        i3 = i3 + 1;

        goto label02;

     label03:
        i4 = lengthof $r3;

        i5 = 0;

     label04:
        if i5 >= i4 goto label08;

        r20 = $r3[i5];

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r20);

        r5 = (org.apache.lucene.util.automaton.State) $r4;

        $z1 = r20.<org.apache.lucene.util.automaton.State: boolean accept>;

        r5.<org.apache.lucene.util.automaton.State: boolean accept> = $z1;

        $r6 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        if r20 != $r6 goto label05;

        r18.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = r5;

     label05:
        $r7 = virtualinvoke r20.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.util.automaton.Transition) $r9;

        $r11 = new org.apache.lucene.util.automaton.Transition;

        $i0 = r10.<org.apache.lucene.util.automaton.Transition: int min>;

        $i1 = r10.<org.apache.lucene.util.automaton.Transition: int max>;

        $r12 = r10.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r13 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (org.apache.lucene.util.automaton.State) $r13;

        specialinvoke $r11.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i0, $i1, $r14);

        virtualinvoke r5.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r11);

        goto label06;

     label07:
        i5 = i5 + 1;

        goto label04;

     label08:
        virtualinvoke r18.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

     label09:
        return r18;

     label10:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

        catch java.lang.CloneNotSupportedException from label01 to label09 with label10;
    }

    org.apache.lucene.util.automaton.Automaton cloneIfRequired()
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = <org.apache.lucene.util.automaton.Automaton: boolean allow_mutation>;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton concatenate(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, r1, $r2;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton concatenate(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        return $r2;
    }

    public static org.apache.lucene.util.automaton.Automaton concatenate(java.util.List)
    {
        java.util.List r0;
        org.apache.lucene.util.automaton.Automaton $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton concatenate(java.util.List)>(r0);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton optional()
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton optional(org.apache.lucene.util.automaton.Automaton)>(r0);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton repeat()
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton)>(r0);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton repeat(int)
    {
        int i0;
        org.apache.lucene.util.automaton.Automaton r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton,int)>(r0, i0);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton repeat(int, int)
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton,int,int)>(r0, i0, i1);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton complement()
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton complement(org.apache.lucene.util.automaton.Automaton)>(r0);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton minus(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, r1, $r2;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton minus(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        return $r2;
    }

    public org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, r1, $r2;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        return $r2;
    }

    public boolean subsetOf(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean subsetOf(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        return $z0;
    }

    public org.apache.lucene.util.automaton.Automaton union(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, r1, $r2;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton union(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        return $r2;
    }

    public static org.apache.lucene.util.automaton.Automaton union(java.util.Collection)
    {
        org.apache.lucene.util.automaton.Automaton $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton union(java.util.Collection)>(r0);

        return $r1;
    }

    public void determinize()
    {
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        staticinvoke <org.apache.lucene.util.automaton.BasicOperations: void determinize(org.apache.lucene.util.automaton.Automaton)>(r0);

        return;
    }

    public boolean isEmptyString()
    {
        org.apache.lucene.util.automaton.Automaton r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $z0 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmptyString(org.apache.lucene.util.automaton.Automaton)>(r0);

        return $z0;
    }

    public static org.apache.lucene.util.automaton.Automaton minimize(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>(r0);

        return r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Automaton;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.automaton.Automaton: int MINIMIZE_HOPCROFT> = 2;

        $r0 = class "Lorg/apache/lucene/util/automaton/Automaton;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.Automaton: boolean $assertionsDisabled> = $z1;

        <org.apache.lucene.util.automaton.Automaton: int minimization> = 2;

        <org.apache.lucene.util.automaton.Automaton: boolean minimize_always> = 0;

        <org.apache.lucene.util.automaton.Automaton: boolean allow_mutation> = 0;

        return;
    }
}
