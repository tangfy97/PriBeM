interface  com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry extends java.lang.Object
{

    public abstract com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference();

    public abstract void setValueReference(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference);

    public abstract com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext();

    public abstract int getHash();

    public abstract java.lang.Object getKey();

    public abstract long getExpirationTime();

    public abstract void setExpirationTime(long);

    public abstract com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNextExpirable();

    public abstract void setNextExpirable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry);

    public abstract com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getPreviousExpirable();

    public abstract void setPreviousExpirable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry);

    public abstract com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNextEvictable();

    public abstract void setNextEvictable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry);

    public abstract com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable();

    public abstract void setPreviousEvictable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry);
}
