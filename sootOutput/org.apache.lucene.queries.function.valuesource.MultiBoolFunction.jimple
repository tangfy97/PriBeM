public abstract class org.apache.lucene.queries.function.valuesource.MultiBoolFunction extends org.apache.lucene.queries.function.valuesource.BoolFunction
{
    protected final java.util.List sources;

    public void <init>(java.util.List)
    {
        java.util.List r1;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.lucene.queries.function.valuesource.BoolFunction: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources> = r1;

        return;
    }

    protected abstract java.lang.String name();

    protected abstract boolean func(int, org.apache.lucene.queries.function.FunctionValues[]);

    public org.apache.lucene.queries.function.docvalues.BoolDocValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        java.util.Iterator $r4;
        org.apache.lucene.queries.function.FunctionValues[] r2;
        org.apache.lucene.queries.function.ValueSource r7;
        java.util.List $r1, $r3;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction$1 $r5;
        java.util.Map r8;
        int $i0, $i1, i2;
        java.lang.Object $r6;
        org.apache.lucene.queries.function.FunctionValues $r10;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r0;
        org.apache.lucene.index.AtomicReaderContext r9;
        boolean $z0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        r8 := @parameter0: java.util.Map;

        r9 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (org.apache.lucene.queries.function.FunctionValues)[$i0];

        i2 = 0;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.queries.function.ValueSource) $r6;

        $i1 = i2;

        i2 = i2 + 1;

        $r10 = virtualinvoke r7.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r8, r9);

        r2[$i1] = $r10;

        goto label1;

     label2:
        $r5 = new org.apache.lucene.queries.function.valuesource.MultiBoolFunction$1;

        specialinvoke $r5.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction$1: void <init>(org.apache.lucene.queries.function.valuesource.MultiBoolFunction,org.apache.lucene.queries.function.ValueSource,org.apache.lucene.queries.function.FunctionValues[])>(r0, r0, r2);

        return $r5;
    }

    public java.lang.String description()
    {
        java.util.Iterator $r4;
        org.apache.lucene.queries.function.ValueSource r7;
        java.util.List $r3;
        java.lang.StringBuilder $r0;
        java.lang.Object $r6;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r1;
        java.lang.String $r2, $r5, $r8;
        boolean $z0, z1;

        r1 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.lang.String name()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z1 = 1;

        $r3 = r1.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.queries.function.ValueSource) $r6;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r8 = virtualinvoke r7.<org.apache.lucene.queries.function.ValueSource: java.lang.String description()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label1;

     label4:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int hashCode()
    {
        java.util.List $r1;
        int $i0, $i1, $i2;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r0;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.lang.String name()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r5, $r6;
        java.lang.Class $r1, $r3;
        java.lang.Object r2;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r0, r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label1;

        return 0;

     label1:
        r4 = (org.apache.lucene.queries.function.valuesource.MultiBoolFunction) r2;

        $r6 = r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $r5 = r4.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        java.util.Iterator $r2;
        org.apache.lucene.queries.function.ValueSource r4;
        java.util.List $r1;
        java.util.Map r5;
        java.lang.Object $r3;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r0;
        boolean $z0;
        org.apache.lucene.search.IndexSearcher r6;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        r5 := @parameter0: java.util.Map;

        r6 := @parameter1: org.apache.lucene.search.IndexSearcher;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: java.util.List sources>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.queries.function.ValueSource) $r3;

        virtualinvoke r4.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public volatile org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        java.util.Map r1;
        org.apache.lucene.queries.function.docvalues.BoolDocValues $r3;
        org.apache.lucene.queries.function.valuesource.MultiBoolFunction r0;
        org.apache.lucene.index.AtomicReaderContext r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiBoolFunction;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r3 = virtualinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiBoolFunction: org.apache.lucene.queries.function.docvalues.BoolDocValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r1, r2);

        return $r3;
    }
}
