class org.apache.batik.dom.svg.SVGLocatableSupport$4 extends org.apache.batik.dom.svg.AbstractSVGMatrix
{
    private final org.apache.batik.dom.svg.SVGOMElement val$currentElt;
    private final org.apache.batik.dom.svg.SVGOMElement val$targetElt;

    void <init>(org.apache.batik.dom.svg.SVGOMElement, org.apache.batik.dom.svg.SVGOMElement)
    {
        org.apache.batik.dom.svg.SVGLocatableSupport$4 r0;
        org.apache.batik.dom.svg.SVGOMElement r1, r2;

        r0 := @this: org.apache.batik.dom.svg.SVGLocatableSupport$4;

        r1 := @parameter0: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter1: org.apache.batik.dom.svg.SVGOMElement;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGMatrix: void <init>()>();

        r0.<org.apache.batik.dom.svg.SVGLocatableSupport$4: org.apache.batik.dom.svg.SVGOMElement val$currentElt> = r1;

        r0.<org.apache.batik.dom.svg.SVGLocatableSupport$4: org.apache.batik.dom.svg.SVGOMElement val$targetElt> = r2;

        return;
    }

    protected java.awt.geom.AffineTransform getAffineTransform()
    {
        org.apache.batik.dom.svg.SVGContext $r2, $r5;
        org.w3c.dom.svg.SVGException $r13;
        java.awt.geom.NoninvertibleTransformException $r11;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r4, $r12;
        org.apache.batik.dom.svg.SVGLocatableSupport$4 r0;
        java.awt.geom.AffineTransform $r3, $r6, $r7, $r8, $r9, $r10, r14, r15;

        r0 := @this: org.apache.batik.dom.svg.SVGLocatableSupport$4;

        $r1 = r0.<org.apache.batik.dom.svg.SVGLocatableSupport$4: org.apache.batik.dom.svg.SVGOMElement val$currentElt>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getGlobalTransform()>();

        r14 = $r3;

        if $r3 != null goto label1;

        $r10 = new java.awt.geom.AffineTransform;

        specialinvoke $r10.<java.awt.geom.AffineTransform: void <init>()>();

        r14 = $r10;

     label1:
        $r4 = r0.<org.apache.batik.dom.svg.SVGLocatableSupport$4: org.apache.batik.dom.svg.SVGOMElement val$targetElt>;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r6 = interfaceinvoke $r5.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getGlobalTransform()>();

        r15 = $r6;

        if $r6 != null goto label2;

        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        r15 = $r9;

     label2:
        $r7 = new java.awt.geom.AffineTransform;

        specialinvoke $r7.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r14);

     label3:
        $r8 = virtualinvoke r15.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r8);

        return $r7;

     label4:
        $r11 := @caughtexception;

        $r12 = r0.<org.apache.batik.dom.svg.SVGLocatableSupport$4: org.apache.batik.dom.svg.SVGOMElement val$currentElt>;

        $r13 = virtualinvoke $r12.<org.apache.batik.dom.svg.SVGOMElement: org.w3c.dom.svg.SVGException createSVGException(short,java.lang.String,java.lang.Object[])>(2, "noninvertiblematrix", null);

        throw $r13;

        catch java.awt.geom.NoninvertibleTransformException from label3 to label4 with label4;
    }
}
