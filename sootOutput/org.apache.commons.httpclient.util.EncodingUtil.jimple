public class org.apache.commons.httpclient.util.EncodingUtil extends java.lang.Object
{
    private static final java.lang.String DEFAULT_CHARSET;
    private static final org.apache.commons.logging.Log LOG;
    static java.lang.Class class$org$apache$commons$httpclient$util$EncodingUtil;

    public static java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[], java.lang.String)
    {
        org.apache.commons.httpclient.NameValuePair[] r0;
        org.apache.commons.httpclient.HttpClientError $r4;
        java.lang.StringBuffer $r6, $r8, $r9;
        org.apache.commons.logging.Log $r7;
        java.lang.String r1, $r2, $r10, $r11;
        java.io.UnsupportedEncodingException $r3, $r5;

        r0 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.util.EncodingUtil: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Encoding not supported: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r10);

     label4:
        $r11 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>(r0, "ISO-8859-1");

     label5:
        return $r11;

     label6:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.httpclient.HttpClientError;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>("Encoding not supported: ISO-8859-1");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label4 to label5 with label6;
    }

    private static java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[], java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.commons.httpclient.NameValuePair[] r1;
        java.lang.StringBuffer $r0;
        org.apache.commons.codec.net.URLCodec $r3;
        org.apache.commons.httpclient.NameValuePair r4;
        int $i0, i1;
        java.lang.String $r2, $r5, $r6, r7, $r8, $r9, $r10, $r11;

        r1 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        r7 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        $r3 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r3.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r4 = r1[i1];

        $r5 = virtualinvoke r4.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        if $r5 == null goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&");

     label2:
        $r6 = virtualinvoke r4.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r8 = virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>($r6, r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r9 = virtualinvoke r4.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        if $r9 == null goto label3;

        $r10 = virtualinvoke r4.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        $r11 = virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>($r10, r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getString(byte[], int, int, java.lang.String)
    {
        byte[] r0;
        java.lang.StringBuffer $r8, $r10, $r11, $r12;
        int $i0, i1, i2;
        java.lang.String r1, $r3, $r7, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r2, $r4;
        org.apache.commons.logging.Log $r6, $r9;
        java.io.UnsupportedEncodingException $r5;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r4;

     label1:
        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset may not be null or empty");

        throw $r2;

     label3:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i1, i2, r1);

     label4:
        return $r3;

     label5:
        $r5 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.util.EncodingUtil: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label6;

        $r9 = <org.apache.commons.httpclient.util.EncodingUtil: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported encoding: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". System encoding used");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r13);

     label6:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],int,int)>(r0, i1, i2);

        return $r7;

        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public static java.lang.String getString(byte[], java.lang.String)
    {
        byte[] r0;
        int $i0;
        java.lang.String r1, $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        $i0 = lengthof r0;

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>(r0, 0, $i0, r1);

        return $r2;
    }

    public static byte[] getBytes(java.lang.String, java.lang.String)
    {
        byte[] $r3, $r7;
        java.lang.StringBuffer $r8, $r10, $r11, $r12;
        int $i0;
        java.lang.String r0, r1, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r2, $r4;
        org.apache.commons.logging.Log $r6, $r9;
        java.io.UnsupportedEncodingException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data may not be null");

        throw $r4;

     label1:
        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset may not be null or empty");

        throw $r2;

     label3:
        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

     label4:
        return $r3;

     label5:
        $r5 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.util.EncodingUtil: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label6;

        $r9 = <org.apache.commons.httpclient.util.EncodingUtil: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported encoding: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". System encoding used.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r13);

     label6:
        $r7 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        return $r7;

        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public static byte[] getAsciiBytes(java.lang.String)
    {
        org.apache.commons.httpclient.HttpClientError $r4;
        byte[] $r1;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r2;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.httpclient.HttpClientError;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>("HttpClient requires ASCII support");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getAsciiString(byte[], int, int)
    {
        org.apache.commons.httpclient.HttpClientError $r4;
        byte[] r0;
        int i0, i1;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i0, i1, "US-ASCII");

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.httpclient.HttpClientError;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpClientError: void <init>(java.lang.String)>("HttpClient requires ASCII support");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getAsciiString(byte[])
    {
        int $i0;
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    private void <init>()
    {
        org.apache.commons.httpclient.util.EncodingUtil r0;

        r0 := @this: org.apache.commons.httpclient.util.EncodingUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String DEFAULT_CHARSET> = "ISO-8859-1";

        $r0 = <org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$org$apache$commons$httpclient$util$EncodingUtil>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.util.EncodingUtil");

        <org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$org$apache$commons$httpclient$util$EncodingUtil> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.util.EncodingUtil: java.lang.Class class$org$apache$commons$httpclient$util$EncodingUtil>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.util.EncodingUtil: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
