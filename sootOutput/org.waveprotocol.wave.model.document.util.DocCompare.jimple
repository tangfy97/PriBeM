public final class org.waveprotocol.wave.model.document.util.DocCompare extends java.lang.Object
{
    public static final int SHAPE;
    public static final int TYPES;
    public static final int ATTR_NAMES;
    public static final int ATTR_VALUES;
    public static final int TEXT;
    public static final int ANNOTATION_KEYS;
    private static final int ANNOTATION_VALUES;
    public static final int ATTRS;
    public static final int STRUCTURE;
    public static final int ANNOTATIONS;
    public static final int ALL;

    public static boolean equivalent(int, org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument r0, r1;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter2: org.waveprotocol.wave.model.document.ReadableWDocument;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean fungeEquivalent(int,org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.ReadableWDocument)>(i0, r0, r1);

        return $z0;
    }

    private static boolean fungeEquivalent(int, org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        java.lang.AssertionError $r3;
        int i0, $i1, $i2, $i4;
        org.waveprotocol.wave.model.document.ReadableWDocument r0, r1;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter2: org.waveprotocol.wave.model.document.ReadableWDocument;

        $i1 = i0 & 96;

        if $i1 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Annotations comparison not yet implemented");

        throw $r3;

     label1:
        $i4 = (int) -97;

        $i2 = i0 & $i4;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean structureEquivalent(int,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.ReadableDocument)>($i2, r0, r1);

        return $z0;
    }

    public static boolean structureEquivalent(int, org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r4, $r6;
        org.waveprotocol.wave.model.document.ReadableDocument r1, r3;
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView $r0, $r2;
        int i0;
        java.lang.String $r5, $r7;
        boolean $z0;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter2: org.waveprotocol.wave.model.document.ReadableDocument;

        staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: void checkValidFlags(int)>(i0);

        $r0 = new org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,int)>(r1, i0);

        $r2 = new org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,int)>(r3, i0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>($r0);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>($r2);

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z0;
    }

    public static boolean equivalent(int, java.lang.String, org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r1;
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        int i0;
        java.lang.String r0;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r0);

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean structureEquivalent(int,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.ReadableDocument)>(i0, $r2, r3);

        return $z0;
    }

    public static boolean equivalent(int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2, $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r1, $r4;
        int i0;
        java.lang.String r0, r3;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r0);

        $r4 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r3);

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean structureEquivalent(int,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.ReadableDocument)>(i0, $r2, $r5);

        return $z0;
    }

    private static void checkValidFlags(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "flags must be non-empty");

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean implies(int,int,int)>(i0, 2, 1);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "flag TYPES must imply flag SHAPE");

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean implies(int,int,int)>(i0, 4, 1);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "flag ATTR_NAMES must imply flag SHAPE");

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean implies(int,int,int)>(i0, 16, 1);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "flag TEXT must imply flag SHAPE");

        $z3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean implies(int,int,int)>(i0, 8, 4);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "flag ATTR_VALUES must imply flag ATTR_NAMES");

        $z4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean implies(int,int,int)>(i0, 64, 32);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "flag ANNOTATION_VALUES must imply flag ANNOTATION_KEYS");

        return;
    }

    private static boolean implies(int, int, int)
    {
        int i0, i1, $i2, i3, $i4;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        $i2 = i0 & i1;

        if $i2 == 0 goto label1;

        $i4 = i0 & i3;

        if $i4 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.document.util.DocCompare r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.document.util.DocCompare: int ALL> = 127;

        <org.waveprotocol.wave.model.document.util.DocCompare: int ANNOTATIONS> = 96;

        <org.waveprotocol.wave.model.document.util.DocCompare: int STRUCTURE> = 31;

        <org.waveprotocol.wave.model.document.util.DocCompare: int ATTRS> = 12;

        <org.waveprotocol.wave.model.document.util.DocCompare: int ANNOTATION_VALUES> = 64;

        <org.waveprotocol.wave.model.document.util.DocCompare: int ANNOTATION_KEYS> = 32;

        <org.waveprotocol.wave.model.document.util.DocCompare: int TEXT> = 16;

        <org.waveprotocol.wave.model.document.util.DocCompare: int ATTR_VALUES> = 8;

        <org.waveprotocol.wave.model.document.util.DocCompare: int ATTR_NAMES> = 4;

        <org.waveprotocol.wave.model.document.util.DocCompare: int TYPES> = 2;

        <org.waveprotocol.wave.model.document.util.DocCompare: int SHAPE> = 1;

        return;
    }
}
