class org.tukaani.xz.SimpleInputStream extends java.io.InputStream
{
    private static final int FILTER_BUF_SIZE;
    private java.io.InputStream in;
    private final org.tukaani.xz.simple.SimpleFilter simpleFilter;
    private final byte[] filterBuf;
    private int pos;
    private int filtered;
    private int unfiltered;
    private boolean endReached;
    private java.io.IOException exception;
    private final byte[] tempBuf;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$SimpleInputStream;

    static int getMemoryUsage()
    {
        return 5;
    }

    void <init>(java.io.InputStream, org.tukaani.xz.simple.SimpleFilter)
    {
        byte[] $r1, $r2;
        org.tukaani.xz.SimpleInputStream r0;
        java.lang.AssertionError $r5;
        java.lang.NullPointerException $r6;
        org.tukaani.xz.simple.SimpleFilter r4;
        java.io.InputStream r3;
        boolean $z0;

        r0 := @this: org.tukaani.xz.SimpleInputStream;

        r3 := @parameter0: java.io.InputStream;

        r4 := @parameter1: org.tukaani.xz.simple.SimpleFilter;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = newarray (byte)[4096];

        r0.<org.tukaani.xz.SimpleInputStream: byte[] filterBuf> = $r1;

        r0.<org.tukaani.xz.SimpleInputStream: int pos> = 0;

        r0.<org.tukaani.xz.SimpleInputStream: int filtered> = 0;

        r0.<org.tukaani.xz.SimpleInputStream: int unfiltered> = 0;

        r0.<org.tukaani.xz.SimpleInputStream: boolean endReached> = 0;

        r0.<org.tukaani.xz.SimpleInputStream: java.io.IOException exception> = null;

        $r2 = newarray (byte)[1];

        r0.<org.tukaani.xz.SimpleInputStream: byte[] tempBuf> = $r2;

        if r3 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $z0 = <org.tukaani.xz.SimpleInputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r4 != null goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        r0.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in> = r3;

        r0.<org.tukaani.xz.SimpleInputStream: org.tukaani.xz.simple.SimpleFilter simpleFilter> = r4;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        short $s2;
        byte $b1;
        org.tukaani.xz.SimpleInputStream r0;
        int $i0, $i4;

        r0 := @this: org.tukaani.xz.SimpleInputStream;

        $r1 = r0.<org.tukaani.xz.SimpleInputStream: byte[] tempBuf>;

        $i0 = virtualinvoke r0.<org.tukaani.xz.SimpleInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.tukaani.xz.SimpleInputStream: byte[] tempBuf>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0, $r4, $r5, $r7, $r11, $r12;
        java.lang.IndexOutOfBoundsException $r17;
        org.tukaani.xz.simple.SimpleFilter $r8;
        org.tukaani.xz.SimpleInputStream r1;
        java.lang.AssertionError $r19, $r20;
        java.io.IOException $r3, $r13, $r15;
        boolean $z0, $z1, $z2;
        org.tukaani.xz.XZIOException $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, i45, i46, i47, $i48, $i50, $i52;
        java.io.InputStream $r2, $r6;

        r1 := @this: org.tukaani.xz.SimpleInputStream;

        r0 := @parameter0: byte[];

        i45 := @parameter1: int;

        i46 := @parameter2: int;

        if i45 < 0 goto label01;

        if i46 < 0 goto label01;

        $i0 = i45 + i46;

        if $i0 < 0 goto label01;

        $i2 = i45 + i46;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label02;

     label01:
        $r17 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r17.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r17;

     label02:
        if i46 != 0 goto label03;

        return 0;

     label03:
        $r2 = r1.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in>;

        if $r2 != null goto label04;

        $r18 = new org.tukaani.xz.XZIOException;

        specialinvoke $r18.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r18;

     label04:
        $r3 = r1.<org.tukaani.xz.SimpleInputStream: java.io.IOException exception>;

        if $r3 == null goto label05;

        $r13 = r1.<org.tukaani.xz.SimpleInputStream: java.io.IOException exception>;

        throw $r13;

     label05:
        i47 = 0;

     label06:
        $i3 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i46);

        $r4 = r1.<org.tukaani.xz.SimpleInputStream: byte[] filterBuf>;

        $i5 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i5, r0, i45, $i4);

        $i6 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        $i7 = $i6 + $i4;

        r1.<org.tukaani.xz.SimpleInputStream: int pos> = $i7;

        $i8 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i9 = $i8 - $i4;

        r1.<org.tukaani.xz.SimpleInputStream: int filtered> = $i9;

        i45 = i45 + $i4;

        $i34 = i46 - $i4;

        i46 = $i34;

        $i35 = i47 + $i4;

        i47 = $i35;

        $i11 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        $i10 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i13 = $i11 + $i10;

        $i12 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i14 = $i13 + $i12;

        if $i14 != 4096 goto label07;

        $r12 = r1.<org.tukaani.xz.SimpleInputStream: byte[] filterBuf>;

        $i44 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        $r11 = r1.<org.tukaani.xz.SimpleInputStream: byte[] filterBuf>;

        $i42 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i41 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i43 = $i42 + $i41;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i44, $r11, 0, $i43);

        r1.<org.tukaani.xz.SimpleInputStream: int pos> = 0;

     label07:
        if $i34 == 0 goto label08;

        $z0 = r1.<org.tukaani.xz.SimpleInputStream: boolean endReached>;

        if $z0 == 0 goto label11;

     label08:
        if $i35 <= 0 goto label09;

        $i48 = $i35;

        goto label10;

     label09:
        $i50 = (int) -1;

        $i48 = $i50;

     label10:
        return $i48;

     label11:
        $z1 = <org.tukaani.xz.SimpleInputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label12;

        $i39 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        if $i39 == 0 goto label12;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label12:
        $i16 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        $i15 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i18 = $i16 + $i15;

        $i17 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i19 = $i18 + $i17;

        $i40 = 4096 - $i19;

        $r6 = r1.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in>;

        $r5 = r1.<org.tukaani.xz.SimpleInputStream: byte[] filterBuf>;

        $i21 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        $i20 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i23 = $i21 + $i20;

        $i22 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i24 = $i23 + $i22;

        $i25 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r5, $i24, $i40);

        $i52 = (int) -1;

        if $i25 != $i52 goto label13;

        r1.<org.tukaani.xz.SimpleInputStream: boolean endReached> = 1;

        $i38 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        r1.<org.tukaani.xz.SimpleInputStream: int filtered> = $i38;

        r1.<org.tukaani.xz.SimpleInputStream: int unfiltered> = 0;

        goto label15;

     label13:
        $i26 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i27 = $i26 + $i25;

        r1.<org.tukaani.xz.SimpleInputStream: int unfiltered> = $i27;

        $r8 = r1.<org.tukaani.xz.SimpleInputStream: org.tukaani.xz.simple.SimpleFilter simpleFilter>;

        $r7 = r1.<org.tukaani.xz.SimpleInputStream: byte[] filterBuf>;

        $i29 = r1.<org.tukaani.xz.SimpleInputStream: int pos>;

        $i28 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i30 = interfaceinvoke $r8.<org.tukaani.xz.simple.SimpleFilter: int code(byte[],int,int)>($r7, $i29, $i28);

        r1.<org.tukaani.xz.SimpleInputStream: int filtered> = $i30;

        $z2 = <org.tukaani.xz.SimpleInputStream: boolean $assertionsDisabled>;

        if $z2 != 0 goto label14;

        $i37 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i36 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        if $i37 <= $i36 goto label14;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label14:
        $i32 = r1.<org.tukaani.xz.SimpleInputStream: int unfiltered>;

        $i31 = r1.<org.tukaani.xz.SimpleInputStream: int filtered>;

        $i33 = $i32 - $i31;

        r1.<org.tukaani.xz.SimpleInputStream: int unfiltered> = $i33;

     label15:
        goto label06;

     label16:
        $r15 := @caughtexception;

        r1.<org.tukaani.xz.SimpleInputStream: java.io.IOException exception> = $r15;

        throw $r15;

        catch java.io.IOException from label05 to label10 with label16;
        catch java.io.IOException from label11 to label16 with label16;
    }

    public int available() throws java.io.IOException
    {
        org.tukaani.xz.SimpleInputStream r0;
        int $i0;
        java.io.IOException $r2, $r3;
        org.tukaani.xz.XZIOException $r4;
        java.io.InputStream $r1;

        r0 := @this: org.tukaani.xz.SimpleInputStream;

        $r1 = r0.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in>;

        if $r1 != null goto label1;

        $r4 = new org.tukaani.xz.XZIOException;

        specialinvoke $r4.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r4;

     label1:
        $r2 = r0.<org.tukaani.xz.SimpleInputStream: java.io.IOException exception>;

        if $r2 == null goto label2;

        $r3 = r0.<org.tukaani.xz.SimpleInputStream: java.io.IOException exception>;

        throw $r3;

     label2:
        $i0 = r0.<org.tukaani.xz.SimpleInputStream: int filtered>;

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.tukaani.xz.SimpleInputStream r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.tukaani.xz.SimpleInputStream;

        $r1 = r0.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in>;

        if $r1 == null goto label5;

     label1:
        $r2 = r0.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        r0.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in> = null;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.tukaani.xz.SimpleInputStream: java.io.InputStream in> = null;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.tukaani.xz.SimpleInputStream: int FILTER_BUF_SIZE> = 4096;

        $r0 = <org.tukaani.xz.SimpleInputStream: java.lang.Class class$org$tukaani$xz$SimpleInputStream>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.SimpleInputStream: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.SimpleInputStream");

        <org.tukaani.xz.SimpleInputStream: java.lang.Class class$org$tukaani$xz$SimpleInputStream> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.SimpleInputStream: java.lang.Class class$org$tukaani$xz$SimpleInputStream>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.SimpleInputStream: boolean $assertionsDisabled> = $z1;

        return;
    }
}
