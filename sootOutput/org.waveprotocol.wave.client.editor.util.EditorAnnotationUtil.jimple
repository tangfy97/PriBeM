public class org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.String getFirstAnnotationOverSelection(org.waveprotocol.wave.client.editor.EditorContext, java.lang.String[])
    {
        org.waveprotocol.wave.client.editor.EditorContext r0;
        java.lang.String[] r8;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r7;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2, $r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Range $r5;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        java.lang.Object $r3;
        java.lang.String $r9;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        r8 := @parameter1: java.lang.String[];

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Editor must have selection");

        $r4 = (org.waveprotocol.wave.model.document.util.FocusedRange) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range asRange()>();

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()>();

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: java.lang.String getFirstCoveringAnnotationOverRange(org.waveprotocol.wave.model.document.MutableAnnotationSet,org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations,java.lang.String[],int,int)>($r6, $r7, r8, $i0, $i1);

        return $r9;
    }

    public static java.lang.String getFirstCoveringAnnotationOverRange(org.waveprotocol.wave.model.document.MutableAnnotationSet, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations, java.lang.String[], int, int)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet r2;
        java.lang.String[] r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r3;
        int i0, i1, i2, i3;
        java.lang.String r1, $r4;

        r2 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r0 := @parameter2: java.lang.String[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r1 = r0[i3];

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: java.lang.String getAnnotationOverRangeIfFull(org.waveprotocol.wave.model.document.MutableAnnotationSet,org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations,java.lang.String,int,int)>(r2, r3, r1, i1, i2);

        if $r4 == null goto label2;

        return $r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return null;
    }

    public static java.lang.String getAnnotationOverSelectionIfFull(org.waveprotocol.wave.client.editor.EditorContext, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.EditorContext r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r7;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2, $r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Range $r5;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        java.lang.Object $r3;
        java.lang.String r8, $r9;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        r8 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Editor must have selection");

        $r4 = (org.waveprotocol.wave.model.document.util.FocusedRange) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range asRange()>();

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()>();

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: java.lang.String getAnnotationOverRangeIfFull(org.waveprotocol.wave.model.document.MutableAnnotationSet,org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations,java.lang.String,int,int)>($r6, $r7, r8, $i0, $i1);

        return $r9;
    }

    public static java.lang.String getAnnotationOverRangeIfFull(org.waveprotocol.wave.model.document.MutableAnnotationSet, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations, java.lang.String, int, int)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r4;
        int i0, i1, $i2, $i4;
        java.lang.Object $r2;
        java.lang.String r1, r3, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        if i0 != i1 goto label1;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.lang.String getAnnotation(java.lang.String)>(r1);

        return $r5;

     label1:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: java.lang.Object getAnnotation(int,java.lang.String)>(i0, r1);

        r3 = (java.lang.String) $r2;

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r3);

        $i4 = (int) -1;

        if $i2 != $i4 goto label2;

        return r3;

     label2:
        return null;
    }

    public static void setAnnotationOverSelection(org.waveprotocol.wave.client.editor.EditorContext, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.EditorContext r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r7;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2, $r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Range $r5;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        java.lang.Object $r3;
        java.lang.String r8, r9;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Editor must have selection");

        $r4 = (org.waveprotocol.wave.model.document.util.FocusedRange) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range asRange()>();

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()>();

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        staticinvoke <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: void setAnnotationOverRange(org.waveprotocol.wave.model.document.MutableAnnotationSet,org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations,java.lang.String,java.lang.String,int,int)>($r6, $r7, r8, r9, $i0, $i1);

        return;
    }

    public static void setAnnotationOverRange(org.waveprotocol.wave.model.document.MutableAnnotationSet, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations, java.lang.String, java.lang.String, int, int)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r3;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        if i0 != i1 goto label1;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotation(java.lang.String,java.lang.String)>(r1, r2);

        goto label2;

     label1:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableAnnotationSet: void setAnnotation(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

     label2:
        return;
    }

    public static transient boolean clearAnnotationsOverSelection(org.waveprotocol.wave.client.editor.EditorContext, java.lang.String[])
    {
        org.waveprotocol.wave.client.editor.EditorContext r0;
        java.lang.String[] r8;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r7;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2, $r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Range $r5;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorContext;

        r8 := @parameter1: java.lang.String[];

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Editor must have selection");

        $r4 = (org.waveprotocol.wave.model.document.util.FocusedRange) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range asRange()>();

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()>();

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: boolean clearAnnotationsOverRange(org.waveprotocol.wave.model.document.MutableAnnotationSet,org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations,java.lang.String[],int,int)>($r6, $r7, r8, $i0, $i1);

        return $z0;
    }

    public static boolean clearAnnotationsOverRange(org.waveprotocol.wave.model.document.MutableAnnotationSet, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations, java.lang.String[], int, int)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet r1;
        java.lang.String[] r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r2;
        int i0, i1, $i2, i3, i4, i5, i6, $i8;
        java.lang.String $r3, r4, r5;
        boolean z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r0 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 = 0;

        if i0 != i1 goto label4;

        i3 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i3 goto label3;

        r4 = r0[i4];

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: java.lang.String getAnnotation(java.lang.String)>(r4);

        if $r3 == null goto label2;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotation(java.lang.String,java.lang.String)>(r4, null);

        z0 = 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i5 = lengthof r0;

        i6 = 0;

     label5:
        if i6 >= i5 goto label7;

        r5 = r0[i6];

        $i2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.MutableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r5, null);

        $i8 = (int) -1;

        if $i2 == $i8 goto label6;

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.MutableAnnotationSet: void setAnnotation(int,int,java.lang.String,java.lang.Object)>(i0, i1, r5, null);

        z0 = 1;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        return z0;
    }

    public static org.waveprotocol.wave.model.document.util.Range getEncompassingAnnotationRange(org.waveprotocol.wave.model.document.ReadableAnnotationSet, java.lang.String, int)
    {
        org.waveprotocol.wave.model.document.ReadableAnnotationSet r0;
        java.lang.AssertionError $r4;
        int i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.util.Range $r3;
        java.lang.Object $r2, r5;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableAnnotationSet;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: java.lang.Object getAnnotation(int,java.lang.String)>(i0, r1);

        r5 = $r2;

        if $r2 != null goto label1;

        if i0 <= 0 goto label1;

        $i4 = i0 - 1;

        r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: java.lang.Object getAnnotation(int,java.lang.String)>($i4, r1);

     label1:
        if r5 != null goto label2;

        return null;

     label2:
        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: int lastAnnotationChange(int,int,java.lang.String,java.lang.Object)>(0, i0, r1, r5);

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: int size()>();

        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, $i2, r1, r5);

        $z0 = <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if $i1 < $i3 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Range should not be collapsed");

        throw $r4;

     label3:
        $r3 = new org.waveprotocol.wave.model.document.util.Range;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>($i1, $i3);

        return $r3;
    }

    public static void supplementAnnotations(org.waveprotocol.wave.model.document.MutableAnnotationSet, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations, org.waveprotocol.wave.model.util.ReadableStringSet, int, boolean)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        org.waveprotocol.wave.model.document.MutableAnnotationSet r3;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r2;
        int i0;
        boolean z0;
        org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil$1 $r1;

        r3 := @parameter0: org.waveprotocol.wave.model.document.MutableAnnotationSet;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r0 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        if z0 == 0 goto label1;

        return;

     label1:
        $r1 = new org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil$1: void <init>(org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations,org.waveprotocol.wave.model.document.MutableAnnotationSet,int,boolean)>(r2, r3, i0, z0);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/util/EditorAnnotationUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.util.EditorAnnotationUtil: boolean $assertionsDisabled> = $z1;

        return;
    }
}
