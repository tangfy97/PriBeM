public abstract class org.apache.batik.svggen.ImageCacher extends java.lang.Object implements org.apache.batik.svggen.SVGSyntax, org.apache.batik.svggen.ErrorConstants
{
    org.apache.batik.svggen.DOMTreeManager domTreeManager;
    java.util.Map imageCache;
    java.util.zip.Checksum checkSum;

    public void <init>()
    {
        java.util.HashMap $r1;
        java.util.zip.Adler32 $r2;
        org.apache.batik.svggen.ImageCacher r0;

        r0 := @this: org.apache.batik.svggen.ImageCacher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.svggen.ImageCacher: org.apache.batik.svggen.DOMTreeManager domTreeManager> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.svggen.ImageCacher: java.util.Map imageCache> = $r1;

        $r2 = new java.util.zip.Adler32;

        specialinvoke $r2.<java.util.zip.Adler32: void <init>()>();

        r0.<org.apache.batik.svggen.ImageCacher: java.util.zip.Checksum checkSum> = $r2;

        return;
    }

    public void <init>(org.apache.batik.svggen.DOMTreeManager)
    {
        org.apache.batik.svggen.DOMTreeManager r1;
        org.apache.batik.svggen.ImageCacher r0;

        r0 := @this: org.apache.batik.svggen.ImageCacher;

        r1 := @parameter0: org.apache.batik.svggen.DOMTreeManager;

        specialinvoke r0.<org.apache.batik.svggen.ImageCacher: void <init>()>();

        virtualinvoke r0.<org.apache.batik.svggen.ImageCacher: void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager)>(r1);

        return;
    }

    public void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager)
    {
        org.apache.batik.svggen.DOMTreeManager r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.batik.svggen.ImageCacher r1;

        r1 := @this: org.apache.batik.svggen.ImageCacher;

        r0 := @parameter0: org.apache.batik.svggen.DOMTreeManager;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r1.<org.apache.batik.svggen.ImageCacher: org.apache.batik.svggen.DOMTreeManager domTreeManager> = r0;

        return;
    }

    public org.apache.batik.svggen.DOMTreeManager getDOMTreeManager()
    {
        org.apache.batik.svggen.DOMTreeManager $r1;
        org.apache.batik.svggen.ImageCacher r0;

        r0 := @this: org.apache.batik.svggen.ImageCacher;

        $r1 = r0.<org.apache.batik.svggen.ImageCacher: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        return $r1;
    }

    public java.lang.String lookup(java.io.ByteArrayOutputStream, int, int, org.apache.batik.svggen.SVGGeneratorContext) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream r1;
        java.util.ListIterator $r7;
        java.lang.Integer $r3;
        org.apache.batik.svggen.ImageCacher$ImageCacheEntry r9, $r12;
        java.util.Map $r5, $r14;
        int $i0, $i1, i2, i3;
        java.lang.String r15;
        java.util.LinkedList $r13, r16;
        boolean $z0, $z1;
        org.apache.batik.svggen.SVGGeneratorContext r11;
        org.apache.batik.svggen.ImageCacher r0;
        java.lang.Object $r4, $r6, $r8, $r10;

        r0 := @this: org.apache.batik.svggen.ImageCacher;

        r1 := @parameter0: java.io.ByteArrayOutputStream;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        r11 := @parameter3: org.apache.batik.svggen.SVGGeneratorContext;

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = virtualinvoke r0.<org.apache.batik.svggen.ImageCacher: int getChecksum(byte[])>($r2);

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        r15 = null;

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.ImageCacher: java.lang.Object getCacheableData(java.io.ByteArrayOutputStream)>(r1);

        $r5 = r0.<org.apache.batik.svggen.ImageCacher: java.util.Map imageCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r16 = (java.util.LinkedList) $r6;

        if r16 != null goto label1;

        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        r16 = $r13;

        $r14 = r0.<org.apache.batik.svggen.ImageCacher: java.util.Map imageCache>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r13);

        goto label4;

     label1:
        $r7 = virtualinvoke r16.<java.util.LinkedList: java.util.ListIterator listIterator(int)>(0);

        goto label3;

     label2:
        $r8 = interfaceinvoke $r7.<java.util.ListIterator: java.lang.Object next()>();

        r9 = (org.apache.batik.svggen.ImageCacher$ImageCacheEntry) $r8;

        $i1 = r9.<org.apache.batik.svggen.ImageCacher$ImageCacheEntry: int checksum>;

        if $i1 != $i0 goto label3;

        $r10 = r9.<org.apache.batik.svggen.ImageCacher$ImageCacheEntry: java.lang.Object src>;

        $z0 = virtualinvoke r0.<org.apache.batik.svggen.ImageCacher: boolean imagesMatch(java.lang.Object,java.lang.Object)>($r10, $r4);

        if $z0 == 0 goto label3;

        r15 = r9.<org.apache.batik.svggen.ImageCacher$ImageCacheEntry: java.lang.String href>;

        goto label4;

     label3:
        $z1 = interfaceinvoke $r7.<java.util.ListIterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        if r15 != null goto label5;

        $r12 = virtualinvoke r0.<org.apache.batik.svggen.ImageCacher: org.apache.batik.svggen.ImageCacher$ImageCacheEntry createEntry(int,java.lang.Object,int,int,org.apache.batik.svggen.SVGGeneratorContext)>($i0, $r4, i2, i3, r11);

        virtualinvoke r16.<java.util.LinkedList: boolean add(java.lang.Object)>($r12);

        r15 = $r12.<org.apache.batik.svggen.ImageCacher$ImageCacheEntry: java.lang.String href>;

     label5:
        return r15;
    }

    abstract java.lang.Object getCacheableData(java.io.ByteArrayOutputStream);

    abstract boolean imagesMatch(java.lang.Object, java.lang.Object) throws org.apache.batik.svggen.SVGGraphics2DIOException;

    abstract org.apache.batik.svggen.ImageCacher$ImageCacheEntry createEntry(int, java.lang.Object, int, int, org.apache.batik.svggen.SVGGeneratorContext) throws org.apache.batik.svggen.SVGGraphics2DIOException;

    int getChecksum(byte[])
    {
        byte[] r2;
        long $l1;
        java.util.zip.Checksum $r1, $r3, $r4;
        org.apache.batik.svggen.ImageCacher r0;
        int $i0, $i2;

        r0 := @this: org.apache.batik.svggen.ImageCacher;

        r2 := @parameter0: byte[];

        $r1 = r0.<org.apache.batik.svggen.ImageCacher: java.util.zip.Checksum checkSum>;

        interfaceinvoke $r1.<java.util.zip.Checksum: void reset()>();

        $r3 = r0.<org.apache.batik.svggen.ImageCacher: java.util.zip.Checksum checkSum>;

        $i0 = lengthof r2;

        interfaceinvoke $r3.<java.util.zip.Checksum: void update(byte[],int,int)>(r2, 0, $i0);

        $r4 = r0.<org.apache.batik.svggen.ImageCacher: java.util.zip.Checksum checkSum>;

        $l1 = interfaceinvoke $r4.<java.util.zip.Checksum: long getValue()>();

        $i2 = (int) $l1;

        return $i2;
    }
}
