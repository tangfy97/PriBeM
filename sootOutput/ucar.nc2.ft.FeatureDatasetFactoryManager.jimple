public class ucar.nc2.ft.FeatureDatasetFactoryManager extends java.lang.Object
{
    private static java.util.List factoryList;
    private static boolean userMode;
    private static boolean debug;

    public void <init>()
    {
        ucar.nc2.ft.FeatureDatasetFactoryManager r0;

        r0 := @this: ucar.nc2.ft.FeatureDatasetFactoryManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerFactory(ucar.nc2.constants.FeatureType, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r1;
        java.lang.String r0;
        ucar.nc2.constants.FeatureType r2;

        r2 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>(r2, $r1);

        return;
    }

    public static void registerFactory(ucar.nc2.constants.FeatureType, java.lang.Class)
    {
        java.lang.InstantiationException $r25;
        ucar.nc2.constants.FeatureType r4;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r17;
        java.util.List $r6, $r9;
        ucar.nc2.ft.FeatureDatasetFactory $r5, $r8;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r19, $r20, $r22, $r23, $r27, $r28, $r30, $r31;
        java.lang.String $r13, $r16, $r21, $r24, $r29, $r32;
        java.lang.IllegalArgumentException $r10, $r18, $r26;
        ucar.nc2.ft.FeatureDatasetFactoryManager$Factory $r3, $r7;
        java.lang.Class r0, $r1;
        java.lang.Object $r2;

        r4 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: java.lang.Class;

        $r1 = class "Lucar/nc2/ft/FeatureDatasetFactory;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must implement FeatureDatasetFactory");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label5;

     label3:
        $r25 := @caughtexception;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r29 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot instantiate, probably need default Constructor");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r26;

     label4:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r21 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label5:
        $z1 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean userMode>;

        if $z1 == 0 goto label6;

        $r9 = <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList>;

        $r7 = new ucar.nc2.ft.FeatureDatasetFactoryManager$Factory;

        $r8 = (ucar.nc2.ft.FeatureDatasetFactory) $r2;

        specialinvoke $r7.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: void <init>(ucar.nc2.constants.FeatureType,java.lang.Class,ucar.nc2.ft.FeatureDatasetFactory)>(r4, r0, $r8);

        interfaceinvoke $r9.<java.util.List: void add(int,java.lang.Object)>(0, $r7);

        goto label7;

     label6:
        $r6 = <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList>;

        $r3 = new ucar.nc2.ft.FeatureDatasetFactoryManager$Factory;

        $r5 = (ucar.nc2.ft.FeatureDatasetFactory) $r2;

        specialinvoke $r3.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: void <init>(ucar.nc2.constants.FeatureType,java.lang.Class,ucar.nc2.ft.FeatureDatasetFactory)>(r4, r0, $r5);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r3);

     label7:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public static void registerFactory(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: void registerFactory(java.lang.Class)>($r1);

        return;
    }

    public static void registerFactory(java.lang.Class)
    {
        java.lang.InstantiationException $r39;
        java.lang.reflect.Method $r4;
        ucar.nc2.constants.FeatureType r9;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r31;
        java.lang.Exception $r23;
        java.util.List $r12, $r15;
        ucar.nc2.ft.FeatureDatasetFactory $r11, $r14;
        java.lang.StringBuilder $r17, $r18, $r20, $r21, $r25, $r26, $r28, $r29, $r33, $r34, $r36, $r37, $r41, $r42, $r44, $r45;
        java.lang.Object[] $r5;
        int i0, i1;
        java.lang.String $r19, $r22, $r27, $r30, $r35, $r38, $r43, $r46;
        ucar.nc2.constants.FeatureType[] $r7, r8;
        java.lang.Class[] $r3;
        java.lang.IllegalArgumentException $r16, $r24, $r32, $r40;
        ucar.nc2.ft.FeatureDatasetFactoryManager$Factory $r10, $r13;
        java.lang.Class r0, $r1;
        java.lang.Object $r2, $r6;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lucar/nc2/ft/FeatureDatasetFactory;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r19 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must implement FeatureDatasetFactory");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label01:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label02:
        goto label05;

     label03:
        $r39 := @caughtexception;

        $r40 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r43 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot instantiate, probably need default Constructor");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r46);

        throw $r40;

     label04:
        $r31 := @caughtexception;

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r35 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r32;

     label05:
        $r3 = newarray (java.lang.Class)[0];

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getFeatureType", $r3);

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r5);

        $r7 = (ucar.nc2.constants.FeatureType[]) $r6;

        r8 = (ucar.nc2.constants.FeatureType[]) $r7;

        i0 = lengthof r8;

        i1 = 0;

     label06:
        if i1 >= i0 goto label09;

        r9 = r8[i1];

        $z1 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean userMode>;

        if $z1 == 0 goto label07;

        $r15 = <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList>;

        $r13 = new ucar.nc2.ft.FeatureDatasetFactoryManager$Factory;

        $r14 = (ucar.nc2.ft.FeatureDatasetFactory) $r2;

        specialinvoke $r13.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: void <init>(ucar.nc2.constants.FeatureType,java.lang.Class,ucar.nc2.ft.FeatureDatasetFactory)>(r9, r0, $r14);

        interfaceinvoke $r15.<java.util.List: void add(int,java.lang.Object)>(0, $r13);

        goto label08;

     label07:
        $r12 = <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList>;

        $r10 = new ucar.nc2.ft.FeatureDatasetFactoryManager$Factory;

        $r11 = (ucar.nc2.ft.FeatureDatasetFactory) $r2;

        specialinvoke $r10.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: void <init>(ucar.nc2.constants.FeatureType,java.lang.Class,ucar.nc2.ft.FeatureDatasetFactory)>(r9, r0, $r11);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r10);

     label08:
        i1 = i1 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FeatureDatasetFactoryManager Class ");

        $r27 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed invoking getFeatureType()");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r23);

        throw $r24;

     label11:
        return;

        catch java.lang.InstantiationException from label01 to label02 with label03;
        catch java.lang.IllegalAccessException from label01 to label02 with label04;
        catch java.lang.Exception from label05 to label09 with label10;
    }

    public static ucar.nc2.ft.FeatureDataset open(ucar.nc2.constants.FeatureType, java.lang.String, ucar.nc2.util.CancelTask, java.util.Formatter) throws java.io.IOException
    {
        java.lang.Object[] $r13, $r17;
        ucar.nc2.thredds.ThreddsDataFactory$Result $r12;
        ucar.nc2.thredds.ThreddsDataFactory $r11;
        java.util.Formatter r4, $r14;
        thredds.inventory.DatasetCollectionManager $r8;
        ucar.nc2.util.CancelTask r1;
        int $i0;
        java.lang.String r0, $r6, $r7;
        ucar.nc2.constants.FeatureType r3, $r15, $r18;
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.dataset.NetcdfDataset $r2;
        ucar.nc2.ft.FeatureDataset $r5, $r9, $r10, $r16;

        r3 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: ucar.nc2.util.CancelTask;

        r4 := @parameter3: java.util.Formatter;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("thredds:");

        if $z0 == 0 goto label2;

        $r11 = new ucar.nc2.thredds.ThreddsDataFactory;

        specialinvoke $r11.<ucar.nc2.thredds.ThreddsDataFactory: void <init>()>();

        $r12 = virtualinvoke $r11.<ucar.nc2.thredds.ThreddsDataFactory: ucar.nc2.thredds.ThreddsDataFactory$Result openFeatureDataset(ucar.nc2.constants.FeatureType,java.lang.String,ucar.nc2.util.CancelTask)>(r3, r0, r1);

        $r13 = newarray (java.lang.Object)[1];

        $r14 = $r12.<ucar.nc2.thredds.ThreddsDataFactory$Result: java.util.Formatter errLog>;

        $r13[0] = $r14;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r13);

        $r15 = $r12.<ucar.nc2.thredds.ThreddsDataFactory$Result: ucar.nc2.constants.FeatureType featureType>;

        $z3 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean featureTypeOk(ucar.nc2.constants.FeatureType,ucar.nc2.constants.FeatureType)>(r3, $r15);

        if $z3 != 0 goto label1;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r3;

        $r18 = $r12.<ucar.nc2.thredds.ThreddsDataFactory$Result: ucar.nc2.constants.FeatureType featureType>;

        $r17[1] = $r18;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("wanted %s but dataset is of type %s%n", $r17);

        return null;

     label1:
        $r16 = $r12.<ucar.nc2.thredds.ThreddsDataFactory$Result: ucar.nc2.ft.FeatureDataset featureDataset>;

        return $r16;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("cdmrFeature:");

        if $z1 == 0 goto label3;

        $r10 = staticinvoke <ucar.nc2.stream.CdmrFeatureDataset: ucar.nc2.ft.FeatureDataset factory(ucar.nc2.constants.FeatureType,java.lang.String)>(r3, r0);

        return $r10;

     label3:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("collection:");

        if $z2 == 0 goto label4;

        $r6 = "collection:";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r8 = staticinvoke <thredds.inventory.DatasetCollectionManager: thredds.inventory.DatasetCollectionManager open(java.lang.String,java.lang.String,java.util.Formatter)>($r7, null, r4);

        $r9 = staticinvoke <ucar.nc2.ft.point.collection.CompositeDatasetFactory: ucar.nc2.ft.FeatureDataset factory(java.lang.String,ucar.nc2.constants.FeatureType,thredds.inventory.DatasetCollectionManager,java.util.Formatter)>(r0, r3, $r8, r4);

        return $r9;

     label4:
        $r2 = staticinvoke <ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.NetcdfDataset acquireDataset(java.lang.String,ucar.nc2.util.CancelTask)>(r0, r1);

        $r5 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.ft.FeatureDataset wrap(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.util.Formatter)>(r3, $r2, r1, r4);

        return $r5;
    }

    public static ucar.nc2.ft.FeatureDataset wrap(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.util.Formatter) throws java.io.IOException
    {
        java.util.Formatter r3;
        ucar.nc2.util.CancelTask r2;
        ucar.nc2.constants.FeatureType r0, $r4, $r5, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r6;
        ucar.nc2.ft.FeatureDatasetFactory $r12, $r17, r32;
        java.lang.StringBuilder $r14, $r16, $r20, $r22, $r24, $r26, $r27, $r28;
        java.lang.String $r19, $r21, $r25, $r29;
        java.io.PrintStream $r15, $r23;
        java.util.Iterator $r7;
        ucar.nc2.ft.FeatureDatasetFactoryManager$Factory r10;
        java.lang.Object $r9, $r13, r31;
        java.lang.Class $r18;
        ucar.nc2.dataset.NetcdfDataset r1;
        ucar.nc2.ft.FeatureDataset $r8, $r30;

        r0 := @parameter0: ucar.nc2.constants.FeatureType;

        r1 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter2: ucar.nc2.util.CancelTask;

        r3 := @parameter3: java.util.Formatter;

        $z0 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug>;

        if $z0 == 0 goto label1;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrap ");

        $r25 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getLocation()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" want = ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r29);

     label1:
        if r0 == null goto label2;

        $r4 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType NONE>;

        if r0 == $r4 goto label2;

        $r5 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType ANY>;

        if r0 != $r5 goto label3;

     label2:
        $r30 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.ft.FeatureDataset wrapUnknown(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.util.Formatter)>(r1, r2, r3);

        return $r30;

     label3:
        r31 = null;

        r32 = null;

        $r6 = <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (ucar.nc2.ft.FeatureDatasetFactoryManager$Factory) $r9;

        $r11 = r10.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.constants.FeatureType featureType>;

        $z1 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean featureTypeOk(ucar.nc2.constants.FeatureType,ucar.nc2.constants.FeatureType)>(r0, $r11);

        if $z1 != 0 goto label5;

        goto label4;

     label5:
        $z2 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug>;

        if $z2 == 0 goto label6;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wrap try factory ");

        $r17 = r10.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.ft.FeatureDatasetFactory factory>;

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label6:
        $r12 = r10.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.ft.FeatureDatasetFactory factory>;

        $r13 = interfaceinvoke $r12.<ucar.nc2.ft.FeatureDatasetFactory: java.lang.Object isMine(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>(r0, r1, r3);

        r31 = $r13;

        if $r13 == null goto label7;

        r32 = r10.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.ft.FeatureDatasetFactory factory>;

        goto label8;

     label7:
        goto label4;

     label8:
        if null != r32 goto label9;

        return null;

     label9:
        $r8 = interfaceinvoke r32.<ucar.nc2.ft.FeatureDatasetFactory: ucar.nc2.ft.FeatureDataset open(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.lang.Object,ucar.nc2.util.CancelTask,java.util.Formatter)>(r0, r1, r31, r2, r3);

        return $r8;
    }

    private static ucar.nc2.ft.FeatureDataset wrapUnknown(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.util.Formatter) throws java.io.IOException
    {
        java.util.Formatter r6;
        ucar.nc2.util.CancelTask r5;
        ucar.nc2.constants.FeatureType $r1, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.nc2.dt.grid.GridDataset $r8, $r23;
        java.util.List $r2, $r3, $r9, $r24;
        ucar.nc2.ft.FeatureDatasetFactory $r13, $r18, r28;
        java.lang.StringBuilder $r15, $r17, $r21;
        int $i0, $i1;
        java.lang.String $r20, $r22;
        java.io.PrintStream $r16, $r25;
        java.util.Iterator $r4;
        ucar.nc2.ft.FeatureDatasetFactoryManager$Factory r11;
        java.lang.Object $r10, $r14, r27;
        java.lang.Class $r19;
        ucar.nc2.dataset.NetcdfDataset r0;
        ucar.nc2.ft.FeatureDataset $r7, $r26;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r5 := @parameter1: ucar.nc2.util.CancelTask;

        r6 := @parameter2: java.util.Formatter;

        $r1 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.constants.FeatureType findFeatureType(ucar.nc2.dataset.NetcdfDataset)>(r0);

        if $r1 == null goto label01;

        $r26 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.ft.FeatureDataset wrap(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.util.Formatter)>($r1, r0, r5, r6);

        return $r26;

     label01:
        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateSystems()>();

        $z0 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean isGrid(java.util.List)>($r2);

        if $z0 == 0 goto label03;

        $r23 = new ucar.nc2.dt.grid.GridDataset;

        specialinvoke $r23.<ucar.nc2.dt.grid.GridDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r0);

        $r24 = virtualinvoke $r23.<ucar.nc2.dt.grid.GridDataset: java.util.List getGrids()>();

        $i1 = interfaceinvoke $r24.<java.util.List: int size()>();

        if $i1 <= 0 goto label03;

        $z3 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug>;

        if $z3 == 0 goto label02;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>(" wrapUnknown found grids ");

     label02:
        return $r23;

     label03:
        r27 = null;

        r28 = null;

        $r3 = <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label08;

        $r10 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (ucar.nc2.ft.FeatureDatasetFactoryManager$Factory) $r10;

        $r12 = r11.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.constants.FeatureType featureType>;

        $z1 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean featureTypeOk(ucar.nc2.constants.FeatureType,ucar.nc2.constants.FeatureType)>(null, $r12);

        if $z1 != 0 goto label05;

        goto label04;

     label05:
        $z2 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug>;

        if $z2 == 0 goto label06;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wrapUnknown try factory ");

        $r18 = r11.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.ft.FeatureDatasetFactory factory>;

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label06:
        $r13 = r11.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.ft.FeatureDatasetFactory factory>;

        $r14 = interfaceinvoke $r13.<ucar.nc2.ft.FeatureDatasetFactory: java.lang.Object isMine(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>(null, r0, r6);

        r27 = $r14;

        if null == $r14 goto label07;

        r28 = r11.<ucar.nc2.ft.FeatureDatasetFactoryManager$Factory: ucar.nc2.ft.FeatureDatasetFactory factory>;

        goto label08;

     label07:
        goto label04;

     label08:
        if null != r28 goto label09;

        $r8 = new ucar.nc2.dt.grid.GridDataset;

        specialinvoke $r8.<ucar.nc2.dt.grid.GridDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r0);

        $r9 = virtualinvoke $r8.<ucar.nc2.dt.grid.GridDataset: java.util.List getGrids()>();

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 <= 0 goto label09;

        return $r8;

     label09:
        if null != r28 goto label10;

        return null;

     label10:
        $r7 = interfaceinvoke r28.<ucar.nc2.ft.FeatureDatasetFactory: ucar.nc2.ft.FeatureDataset open(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.lang.Object,ucar.nc2.util.CancelTask,java.util.Formatter)>(null, r0, r27, r5, r6);

        return $r7;
    }

    private static boolean isGrid(java.util.List)
    {
        long $l3, $l5;
        ucar.nc2.dataset.CoordinateAxis $r2, $r3;
        byte $b4, $b6;
        int $i0, $i1, $i2, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.util.List r0, $r5, $r6;
        java.lang.Object $r4;
        ucar.nc2.dataset.CoordinateSystem r7, r8;

        r0 := @parameter0: java.util.List;

        r7 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.dataset.CoordinateSystem) $r4;

        if r7 != null goto label2;

        r7 = r8;

        goto label3;

     label2:
        $r5 = virtualinvoke r8.<ucar.nc2.dataset.CoordinateSystem: java.util.List getCoordinateAxes()>();

        $i7 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateSystem: java.util.List getCoordinateAxes()>();

        $i8 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i7 <= $i8 goto label3;

        r7 = r8;

     label3:
        goto label1;

     label4:
        if r7 != null goto label5;

        return 0;

     label5:
        $r2 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateSystem: ucar.nc2.dataset.CoordinateAxis getLatAxis()>();

        $r3 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateSystem: ucar.nc2.dataset.CoordinateAxis getLonAxis()>();

        if $r2 == null goto label6;

        $l5 = virtualinvoke $r2.<ucar.nc2.dataset.CoordinateAxis: long getSize()>();

        $b6 = $l5 cmp 1L;

        $i9 = (int) $b6;

        if $i9 > 0 goto label6;

        return 0;

     label6:
        if $r3 == null goto label7;

        $l3 = virtualinvoke $r3.<ucar.nc2.dataset.CoordinateAxis: long getSize()>();

        $b4 = $l3 cmp 1L;

        $i10 = (int) $b4;

        if $i10 > 0 goto label7;

        return 0;

     label7:
        $i0 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateSystem: int getRankDomain()>();

        if $i0 <= 2 goto label8;

        $i1 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateSystem: int getRankDomain()>();

        $i2 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateSystem: int getRankRange()>();

        if $i1 > $i2 goto label8;

        $z1 = 1;

        goto label9;

     label8:
        $z1 = 0;

     label9:
        return $z1;
    }

    public static boolean featureTypeOk(ucar.nc2.constants.FeatureType, ucar.nc2.constants.FeatureType)
    {
        ucar.nc2.constants.FeatureType r0, r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: ucar.nc2.constants.FeatureType;

        r1 := @parameter1: ucar.nc2.constants.FeatureType;

        if r0 != null goto label1;

        return 1;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $r2 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType ANY_POINT>;

        if r0 != $r2 goto label3;

        $z2 = virtualinvoke r1.<ucar.nc2.constants.FeatureType: boolean isPointFeatureType()>();

        return $z2;

     label3:
        $r3 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType ANY_POINT>;

        if r1 != $r3 goto label4;

        $z1 = virtualinvoke r0.<ucar.nc2.constants.FeatureType: boolean isPointFeatureType()>();

        return $z1;

     label4:
        $r4 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType GRID>;

        if r0 != $r4 goto label5;

        $z0 = virtualinvoke r1.<ucar.nc2.constants.FeatureType: boolean isGridFeatureType()>();

        return $z0;

     label5:
        return 0;
    }

    public static ucar.nc2.constants.FeatureType findFeatureType(ucar.nc2.dataset.NetcdfDataset)
    {
        int i0, i1;
        java.lang.String $r1, $r2, $r8, $r11, $r16, r17, r18;
        ucar.nc2.constants.FeatureType $r3, r10;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r5, $r13;
        ucar.nc2.constants.FeatureType[] $r9;
        java.lang.StringBuilder $r4, $r6, $r7, $r12, $r14, $r15;
        ucar.nc2.dataset.NetcdfDataset r0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "cdm_data_type", null);

        r17 = $r1;

        if $r1 != null goto label1;

        r17 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "cdm_datatype", null);

     label1:
        if r17 != null goto label2;

        r17 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "thredds_data_type", null);

     label2:
        if r17 == null goto label6;

        $r9 = staticinvoke <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType[] values()>();

        i0 = lengthof $r9;

        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r10 = $r9[i1];

        $r11 = virtualinvoke r10.<ucar.nc2.constants.FeatureType: java.lang.String name()>();

        $z1 = virtualinvoke r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z1 == 0 goto label5;

        $z2 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug>;

        if $z2 == 0 goto label4;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wrapUnknown found cdm_datatype ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label4:
        return r10;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "CF:featureType", null);

        r18 = $r2;

        if $r2 != null goto label7;

        r18 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "CFfeatureType", null);

     label7:
        if r18 == null goto label9;

        $z0 = <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug>;

        if $z0 == 0 goto label8;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wrapUnknown found cf_datatype ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label8:
        $r3 = staticinvoke <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType getType(java.lang.String)>(r17);

        return $r3;

     label9:
        return null;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.io.PrintStream $r8;
        java.lang.Object[] $r7;
        java.lang.String[] r9;
        java.util.Formatter $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r5;
        ucar.nc2.constants.FeatureType $r2;
        ucar.nc2.ft.FeatureDataset $r6;

        r9 := @parameter0: java.lang.String[];

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r2 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType GRID>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://motherlode:8080/");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/thredds/dodsC/fmrc/NCEP/GFS/Global_0p5deg/runs/NCEP-GFS-Global_0p5deg_RUN_2009-05-13T12:00:00Z");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.ft.FeatureDataset open(ucar.nc2.constants.FeatureType,java.lang.String,ucar.nc2.util.CancelTask,java.util.Formatter)>($r2, $r5, null, $r0);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r6;

        virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%s%n", $r7);

        return;
    }

    static void <clinit>()
    {
        ucar.nc2.constants.FeatureType $r1, $r2, $r3;
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <ucar.nc2.ft.FeatureDatasetFactoryManager: java.util.List factoryList> = $r0;

        <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean userMode> = 0;

        <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean debug> = 0;

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType ANY_POINT>;

        staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r1, class "Lucar/nc2/ft/point/standard/PointDatasetStandardFactory;");

        $r2 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType GRID>;

        staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r2, class "Lucar/nc2/ft/grid/GridDatasetStandardFactory;");

        $r3 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r3, class "Lucar/nc2/ft/radial/RadialDatasetStandardFactory;");

        <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean userMode> = 1;

        return;
    }
}
