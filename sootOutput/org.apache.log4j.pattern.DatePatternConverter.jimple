public final class org.apache.log4j.pattern.DatePatternConverter extends org.apache.log4j.pattern.LoggingEventPatternConverter
{
    private static final java.lang.String ABSOLUTE_FORMAT;
    private static final java.lang.String ABSOLUTE_TIME_PATTERN;
    private static final java.lang.String DATE_AND_TIME_FORMAT;
    private static final java.lang.String DATE_AND_TIME_PATTERN;
    private static final java.lang.String ISO8601_FORMAT;
    private static final java.lang.String ISO8601_PATTERN;
    private final org.apache.log4j.pattern.CachedDateFormat df;

    private void <init>(java.lang.String[])
    {
        java.text.SimpleDateFormat $r10, $r13;
        java.lang.String[] r1;
        org.apache.log4j.pattern.CachedDateFormat $r15;
        java.lang.StringBuffer $r6, $r7, $r8;
        int $i0, $i1, i2;
        org.apache.log4j.pattern.DatePatternConverter$DefaultZoneDateFormat $r2;
        java.lang.String $r3, $r9, r11, r12;
        java.text.DateFormat r14;
        boolean $z0, $z1, $z2;
        java.util.TimeZone $r4;
        org.apache.log4j.pattern.DatePatternConverter r0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.log4j.pattern.DatePatternConverter;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<org.apache.log4j.pattern.LoggingEventPatternConverter: void <init>(java.lang.String,java.lang.String)>("Date", "date");

        if r1 == null goto label01;

        $i1 = lengthof r1;

        if $i1 != 0 goto label02;

     label01:
        r11 = null;

        goto label03;

     label02:
        r11 = r1[0];

     label03:
        if r11 == null goto label04;

        $z0 = virtualinvoke r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ISO8601");

        if $z0 == 0 goto label05;

     label04:
        r12 = "yyyy-MM-dd HH:mm:ss,SSS";

        goto label08;

     label05:
        $z1 = virtualinvoke r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ABSOLUTE");

        if $z1 == 0 goto label06;

        r12 = "HH:mm:ss,SSS";

        goto label08;

     label06:
        $z2 = virtualinvoke r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("DATE");

        if $z2 == 0 goto label07;

        r12 = "dd MMM yyyy HH:mm:ss,SSS";

        goto label08;

     label07:
        r12 = r11;

     label08:
        i2 = 1000;

     label09:
        $r13 = new java.text.SimpleDateFormat;

        specialinvoke $r13.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r12);

        r14 = $r13;

        i2 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int getMaximumCacheValidity(java.lang.String)>(r12);

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate SimpleDateFormat with pattern ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r9, $r5);

        $r10 = new java.text.SimpleDateFormat;

        specialinvoke $r10.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss,SSS");

        r14 = $r10;

     label12:
        if r1 == null goto label13;

        $i0 = lengthof r1;

        if $i0 <= 1 goto label13;

        $r3 = r1[1];

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r3);

        virtualinvoke r14.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        goto label14;

     label13:
        $r2 = new org.apache.log4j.pattern.DatePatternConverter$DefaultZoneDateFormat;

        specialinvoke $r2.<org.apache.log4j.pattern.DatePatternConverter$DefaultZoneDateFormat: void <init>(java.text.DateFormat)>(r14);

        r14 = $r2;

     label14:
        $r15 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r15.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>(r14, i2);

        r0.<org.apache.log4j.pattern.DatePatternConverter: org.apache.log4j.pattern.CachedDateFormat df> = $r15;

        return;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    public static org.apache.log4j.pattern.DatePatternConverter newInstance(java.lang.String[])
    {
        org.apache.log4j.pattern.DatePatternConverter $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.log4j.pattern.DatePatternConverter;

        specialinvoke $r0.<org.apache.log4j.pattern.DatePatternConverter: void <init>(java.lang.String[])>(r1);

        return $r0;
    }

    public void format(org.apache.log4j.spi.LoggingEvent, java.lang.StringBuffer)
    {
        java.lang.Throwable $r4;
        java.lang.StringBuffer r2;
        org.apache.log4j.spi.LoggingEvent r1;
        org.apache.log4j.pattern.DatePatternConverter r0;
        long $l0;
        org.apache.log4j.pattern.CachedDateFormat $r3;

        r0 := @this: org.apache.log4j.pattern.DatePatternConverter;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        r2 := @parameter1: java.lang.StringBuffer;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.log4j.pattern.DatePatternConverter: org.apache.log4j.pattern.CachedDateFormat df>;

        $l0 = r1.<org.apache.log4j.spi.LoggingEvent: long timeStamp>;

        virtualinvoke $r3.<org.apache.log4j.pattern.CachedDateFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer)>($l0, r2);

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void format(java.lang.Object, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r2;
        java.util.Date $r3;
        java.lang.Object r0;
        org.apache.log4j.pattern.DatePatternConverter r1;
        boolean $z0;

        r1 := @this: org.apache.log4j.pattern.DatePatternConverter;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.StringBuffer;

        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Date) r0;

        virtualinvoke r1.<org.apache.log4j.pattern.DatePatternConverter: void format(java.util.Date,java.lang.StringBuffer)>($r3, r2);

     label1:
        specialinvoke r1.<org.apache.log4j.pattern.LoggingEventPatternConverter: void format(java.lang.Object,java.lang.StringBuffer)>(r0, r2);

        return;
    }

    public void format(java.util.Date, java.lang.StringBuffer)
    {
        java.lang.Throwable $r4;
        java.util.Date r1;
        java.lang.StringBuffer r3;
        org.apache.log4j.pattern.DatePatternConverter r0;
        long $l0;
        org.apache.log4j.pattern.CachedDateFormat $r2;

        r0 := @this: org.apache.log4j.pattern.DatePatternConverter;

        r1 := @parameter0: java.util.Date;

        r3 := @parameter1: java.lang.StringBuffer;

        entermonitor r0;

     label1:
        $r2 = r0.<org.apache.log4j.pattern.DatePatternConverter: org.apache.log4j.pattern.CachedDateFormat df>;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        virtualinvoke $r2.<org.apache.log4j.pattern.CachedDateFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer)>($l0, r3);

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.pattern.DatePatternConverter: java.lang.String ISO8601_PATTERN> = "yyyy-MM-dd HH:mm:ss,SSS";

        <org.apache.log4j.pattern.DatePatternConverter: java.lang.String ISO8601_FORMAT> = "ISO8601";

        <org.apache.log4j.pattern.DatePatternConverter: java.lang.String DATE_AND_TIME_PATTERN> = "dd MMM yyyy HH:mm:ss,SSS";

        <org.apache.log4j.pattern.DatePatternConverter: java.lang.String DATE_AND_TIME_FORMAT> = "DATE";

        <org.apache.log4j.pattern.DatePatternConverter: java.lang.String ABSOLUTE_TIME_PATTERN> = "HH:mm:ss,SSS";

        <org.apache.log4j.pattern.DatePatternConverter: java.lang.String ABSOLUTE_FORMAT> = "ABSOLUTE";

        return;
    }
}
