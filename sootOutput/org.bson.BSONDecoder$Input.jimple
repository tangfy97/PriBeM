class org.bson.BSONDecoder$Input extends java.lang.Object
{
    int _read;
    final java.io.InputStream _in;
    final org.bson.BSONDecoder this$0;

    void <init>(org.bson.BSONDecoder, java.io.InputStream)
    {
        org.bson.BSONDecoder$Input r0;
        org.bson.BSONDecoder r1;
        java.io.InputStream r2;

        r0 := @this: org.bson.BSONDecoder$Input;

        r1 := @parameter0: org.bson.BSONDecoder;

        r2 := @parameter1: java.io.InputStream;

        r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bson.BSONDecoder$Input: java.io.InputStream _in> = r2;

        r0.<org.bson.BSONDecoder$Input: int _read> = 0;

        return;
    }

    int readInt() throws java.io.IOException
    {
        org.bson.BSONDecoder$Input r0;
        int $i0, $i1, $i2;
        java.io.InputStream $r1;

        r0 := @this: org.bson.BSONDecoder$Input;

        $i0 = r0.<org.bson.BSONDecoder$Input: int _read>;

        $i1 = $i0 + 4;

        r0.<org.bson.BSONDecoder$Input: int _read> = $i1;

        $r1 = r0.<org.bson.BSONDecoder$Input: java.io.InputStream _in>;

        $i2 = staticinvoke <org.bson.io.Bits: int readInt(java.io.InputStream)>($r1);

        return $i2;
    }

    long readLong() throws java.io.IOException
    {
        org.bson.BSONDecoder$Input r0;
        int $i0, $i1;
        long $l2;
        java.io.InputStream $r1;

        r0 := @this: org.bson.BSONDecoder$Input;

        $i0 = r0.<org.bson.BSONDecoder$Input: int _read>;

        $i1 = $i0 + 8;

        r0.<org.bson.BSONDecoder$Input: int _read> = $i1;

        $r1 = r0.<org.bson.BSONDecoder$Input: java.io.InputStream _in>;

        $l2 = staticinvoke <org.bson.io.Bits: long readLong(java.io.InputStream)>($r1);

        return $l2;
    }

    double readDouble() throws java.io.IOException
    {
        long $l0;
        org.bson.BSONDecoder$Input r0;
        double $d0;

        r0 := @this: org.bson.BSONDecoder$Input;

        $l0 = virtualinvoke r0.<org.bson.BSONDecoder$Input: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    byte read() throws java.io.IOException
    {
        byte $b4;
        org.bson.BSONDecoder$Input r0;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r1;

        r0 := @this: org.bson.BSONDecoder$Input;

        $i0 = r0.<org.bson.BSONDecoder$Input: int _read>;

        $i1 = $i0 + 1;

        r0.<org.bson.BSONDecoder$Input: int _read> = $i1;

        $r1 = r0.<org.bson.BSONDecoder$Input: java.io.InputStream _in>;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i3 = $i2 & 255;

        $b4 = (byte) $i3;

        return $b4;
    }

    void fill(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.bson.BSONDecoder$Input r0;

        r0 := @this: org.bson.BSONDecoder$Input;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.bson.BSONDecoder$Input: void fill(byte[],int)>(r1, $i0);

        return;
    }

    void fill(byte[], int) throws java.io.IOException
    {
        byte[] r1;
        org.bson.BSONDecoder$Input r0;
        int $i0, $i1, $i2, i3, i4;
        java.io.InputStream $r2;

        r0 := @this: org.bson.BSONDecoder$Input;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i4 = 0;

     label1:
        if i3 <= 0 goto label2;

        $r2 = r0.<org.bson.BSONDecoder$Input: java.io.InputStream _in>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i4, i3);

        $i1 = r0.<org.bson.BSONDecoder$Input: int _read>;

        $i2 = $i1 + $i0;

        r0.<org.bson.BSONDecoder$Input: int _read> = $i2;

        i4 = i4 + $i0;

        i3 = i3 - $i0;

        goto label1;

     label2:
        return;
    }

    java.lang.String readCStr() throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r10;
        java.lang.RuntimeException $r12;
        org.bson.io.PoolOutputBuffer $r2, $r4, $r6, $r9;
        byte $b0;
        org.bson.BSONDecoder$Input r0;
        org.bson.BSONDecoder $r1, $r3, $r5, $r8;
        int $i1;
        java.lang.String $r7;

        r0 := @this: org.bson.BSONDecoder$Input;

        $r1 = r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0>;

        $r2 = staticinvoke <org.bson.BSONDecoder: org.bson.io.PoolOutputBuffer access$000(org.bson.BSONDecoder)>($r1);

        virtualinvoke $r2.<org.bson.io.PoolOutputBuffer: void reset()>();

     label1:
        $b0 = virtualinvoke r0.<org.bson.BSONDecoder$Input: byte read()>();

        if $b0 != 0 goto label2;

        goto label3;

     label2:
        $r3 = r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0>;

        $r4 = staticinvoke <org.bson.BSONDecoder: org.bson.io.PoolOutputBuffer access$000(org.bson.BSONDecoder)>($r3);

        $i1 = (int) $b0;

        virtualinvoke $r4.<org.bson.io.PoolOutputBuffer: void write(int)>($i1);

        goto label1;

     label3:
        $r5 = r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0>;

        $r6 = staticinvoke <org.bson.BSONDecoder: org.bson.io.PoolOutputBuffer access$000(org.bson.BSONDecoder)>($r5);

        $r7 = virtualinvoke $r6.<org.bson.io.PoolOutputBuffer: java.lang.String asString(java.lang.String)>("UTF-8");

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("impossible", $r10);

        throw $r12;

     label6:
        $r8 = r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0>;

        $r9 = staticinvoke <org.bson.BSONDecoder: org.bson.io.PoolOutputBuffer access$000(org.bson.BSONDecoder)>($r8);

        virtualinvoke $r9.<org.bson.io.PoolOutputBuffer: void reset()>();

        return $r7;

        catch java.lang.UnsupportedOperationException from label3 to label4 with label5;
    }

    java.lang.String readUTF8String() throws java.io.IOException
    {
        byte[] $r7, $r12;
        org.bson.BSONDecoder$Input r0;
        int $i0, $i1, $i2;
        java.lang.String $r5, $r8;
        java.lang.RuntimeException $r1, $r11;
        org.bson.BSONDecoder $r6, $r9;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.io.UnsupportedEncodingException $r10;

        r0 := @this: org.bson.BSONDecoder$Input;

        $i0 = virtualinvoke r0.<org.bson.BSONDecoder$Input: int readInt()>();

        if $i0 < 0 goto label1;

        if $i0 <= 3145728 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad string size: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0>;

        $r7 = staticinvoke <org.bson.BSONDecoder: byte[] access$100(org.bson.BSONDecoder)>($r6);

        $i1 = lengthof $r7;

        if $i0 >= $i1 goto label3;

        $r9 = r0.<org.bson.BSONDecoder$Input: org.bson.BSONDecoder this$0>;

        $r12 = staticinvoke <org.bson.BSONDecoder: byte[] access$100(org.bson.BSONDecoder)>($r9);

        goto label4;

     label3:
        $r12 = newarray (byte)[$i0];

     label4:
        virtualinvoke r0.<org.bson.BSONDecoder$Input: void fill(byte[],int)>($r12, $i0);

     label5:
        $r8 = new java.lang.String;

        $i2 = $i0 - 1;

        specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r12, 0, $i2, "UTF-8");

     label6:
        return $r8;

     label7:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("impossible", $r10);

        throw $r11;

        catch java.io.UnsupportedEncodingException from label5 to label6 with label7;
    }
}
