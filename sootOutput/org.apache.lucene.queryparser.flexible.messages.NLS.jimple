public class org.apache.lucene.queryparser.flexible.messages.NLS extends java.lang.Object
{
    private static java.util.Map bundles;

    protected void <init>()
    {
        org.apache.lucene.queryparser.flexible.messages.NLS r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.messages.NLS;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getLocalizedMessage(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Locale $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: java.lang.String getLocalizedMessage(java.lang.String,java.util.Locale)>(r0, $r1);

        return $r2;
    }

    public static java.lang.String getLocalizedMessage(java.lang.String, java.util.Locale)
    {
        java.util.Locale r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String r0, $r3, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: java.lang.Object getResourceBundleObject(java.lang.String,java.util.Locale)>(r0, r1);

        if $r2 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message with key:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and locale: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public static transient java.lang.String getLocalizedMessage(java.lang.String, java.util.Locale, java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.util.Locale r1;
        int $i0;
        java.lang.String r0, $r2, r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: java.lang.String getLocalizedMessage(java.lang.String,java.util.Locale)>(r0, r1);

        r4 = $r2;

        $i0 = lengthof r3;

        if $i0 <= 0 goto label1;

        r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, r3);

     label1:
        return r4;
    }

    public static transient java.lang.String getLocalizedMessage(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r2;
        java.util.Locale $r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: java.lang.String getLocalizedMessage(java.lang.String,java.util.Locale,java.lang.Object[])>(r0, $r1, r2);

        return $r3;
    }

    protected static void initializeMessages(java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r4;
        java.util.Map $r2, $r3;
        java.lang.Class r0;
        java.lang.String r1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

     label1:
        staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: void load(java.lang.Class)>(r0);

        $r2 = <org.apache.lucene.queryparser.flexible.messages.NLS: java.util.Map bundles>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r3 = <org.apache.lucene.queryparser.flexible.messages.NLS: java.util.Map bundles>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.Object getResourceBundleObject(java.lang.String, java.util.Locale)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.MissingResourceException $r12;
        java.util.ResourceBundle $r9;
        java.util.Locale r8;
        java.util.Map $r0, $r3;
        java.lang.Object $r4, $r5, $r11;
        java.lang.Class r6;
        java.lang.String $r7, r10;
        boolean $z0;

        r10 := @parameter0: java.lang.String;

        r8 := @parameter1: java.util.Locale;

        $r0 = <org.apache.lucene.queryparser.flexible.messages.NLS: java.util.Map bundles>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = <org.apache.lucene.queryparser.flexible.messages.NLS: java.util.Map bundles>;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.lang.Class) $r5;

        $r7 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $r9 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>($r7, r8);

        if $r9 == null goto label6;

     label2:
        $r11 = virtualinvoke $r9.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r10);

        if $r11 == null goto label4;

     label3:
        return $r11;

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

     label6:
        goto label1;

     label7:
        return null;

        catch java.util.MissingResourceException from label2 to label3 with label5;
    }

    private static void load(java.lang.Class)
    {
        java.util.HashMap $r2;
        java.lang.reflect.Field $r3, $r5, $r6;
        java.lang.reflect.Field[] $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Class r0;
        java.lang.String $r4;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $i3 = lengthof $r1;

        $r2 = new java.util.HashMap;

        $i2 = $i3 * 2;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i2);

        i4 = 0;

     label3:
        if i4 >= $i3 goto label4;

        $r3 = $r1[i4];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $r5 = $r1[i4];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = $r1[i4];

        staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: void loadfieldValue(java.lang.reflect.Field,boolean,java.lang.Class)>($r6, z0, r0);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    private static void loadfieldValue(java.lang.reflect.Field, boolean, java.lang.Class)
    {
        java.lang.IllegalAccessException $r4;
        java.lang.reflect.Field r0;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1;
        java.lang.Class r3;
        java.lang.String $r1, $r2;
        boolean z0;

        r0 := @parameter0: java.lang.reflect.Field;

        z0 := @parameter1: boolean;

        r3 := @parameter2: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $i1 = $i0 & 25;

        if $i1 == 9 goto label1;

        return;

     label1:
        if z0 != 0 goto label2;

        staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: void makeAccessible(java.lang.reflect.Field)>(r0);

     label2:
        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, $r1);

        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: void validateMessage(java.lang.String,java.lang.Class)>($r2, r3);

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
    }

    private static void validateMessage(java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r5;
        java.util.ResourceBundle $r3;
        java.util.Locale $r2;
        java.util.MissingResourceException $r6;
        java.lang.Class r0;
        java.lang.String $r1, r4;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>($r1, $r2);

        if $r3 == null goto label2;

        virtualinvoke $r3.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r4);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return;

        catch java.util.MissingResourceException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static void makeAccessible(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r2;
        java.lang.SecurityManager $r0;
        org.apache.lucene.queryparser.flexible.messages.NLS$1 $r1;

        r2 := @parameter0: java.lang.reflect.Field;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 != null goto label1;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        goto label2;

     label1:
        $r1 = new org.apache.lucene.queryparser.flexible.messages.NLS$1;

        specialinvoke $r1.<org.apache.lucene.queryparser.flexible.messages.NLS$1: void <init>(java.lang.reflect.Field)>(r2);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(0);

        <org.apache.lucene.queryparser.flexible.messages.NLS: java.util.Map bundles> = $r0;

        return;
    }
}
