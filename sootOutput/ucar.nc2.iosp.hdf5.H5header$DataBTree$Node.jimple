class ucar.nc2.iosp.hdf5.H5header$DataBTree$Node extends java.lang.Object
{
    private long address;
    private int level;
    private int nentries;
    private ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode;
    private java.util.List myEntries;
    private int[][] offset;
    private long[] childPointer;
    private int currentEntry;
    static final boolean $assertionsDisabled;
    final ucar.nc2.iosp.hdf5.H5header$DataBTree this$1;

    void <init>(ucar.nc2.iosp.hdf5.H5header$DataBTree, long, long) throws java.io.IOException
    {
        byte[] $r108;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$Node r0;
        byte $b2, $b3, $b6, $b10, $b36;
        ucar.nc2.iosp.hdf5.H5header $r2, $r4, $r6, $r7, $r10, $r12, $r14, $r16, $r17, $r18, $r19, $r22, $r24, $r26, $r38, $r40, $r46, $r54, $r56, $r70, $r82, $r96;
        java.lang.StringBuilder $r29, $r31, $r32, $r35, $r43, $r44, $r59, $r60, $r61, $r63, $r64, $r65, $r66, $r68, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r85, $r87, $r88, $r92, $r93, $r99, $r100, $r101, $r102, $r103, $r106, $r110, $r113, $r115, $r116, $r117, $r121, $r122;
        long l0, $l1, l17, $l18, $l19, $l29, $l30, l32, $l34, l43, $l47;
        short $s4;
        int[] $r49, r109;
        long[] $r21, $r25, $r30, $r33;
        int $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i33, $i35, $i37, $i38, $i39, $i40, $i41, $i42, i44, i45, i46, i48, i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;
        ucar.nc2.Variable $r86, $r104;
        java.io.PrintStream $r27, $r39, $r41, $r55, $r57, $r71, $r97;
        java.lang.AssertionError $r120;
        java.util.ArrayList $r118;
        java.lang.String $r34, $r36, $r45, $r62, $r67, $r69, $r81, $r89, $r94, $r105, $r107, $r111;
        ucar.nc2.iosp.hdf5.H5header$DataBTree r1;
        java.lang.IllegalStateException $r112, $r114;
        ucar.unidata.io.RandomAccessFile $r3, $r5, $r8, $r11, $r13, $r15, $r23, $r47;
        int[][] $r20, $r37, $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List $r53;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk $r119;
        ucar.nc2.iosp.hdf5.H5header$MemTracker $r83;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        r1 := @parameter0: ucar.nc2.iosp.hdf5.H5header$DataBTree;

        l0 := @parameter1: long;

        l43 := @parameter2: long;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$5300()>();

        if $z0 == 0 goto label01;

        $r96 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r97 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r96);

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n--> DataBTree read tree at address=");

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parent= ");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l43);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" owner= ");

        $r104 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.Variable access$6000(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $r105 = virtualinvoke $r104.<ucar.nc2.Variable: java.lang.String getNameAndDimensions()>();

        $r106 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r97.<java.io.PrintStream: void println(java.lang.String)>($r107);

     label01:
        $r2 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r3 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r2);

        virtualinvoke $r3.<ucar.unidata.io.RandomAccessFile: void order(int)>(1);

        $r4 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r5 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r4);

        $r6 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $l1 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$100(ucar.nc2.iosp.hdf5.H5header,long)>($r6, l0);

        virtualinvoke $r5.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l1);

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long address> = l0;

        $r108 = newarray (byte)[4];

        $r7 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r8 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r7);

        virtualinvoke $r8.<ucar.unidata.io.RandomAccessFile: int read(byte[])>($r108);

        $r111 = new java.lang.String;

        specialinvoke $r111.<java.lang.String: void <init>(byte[])>($r108);

        $z1 = virtualinvoke $r111.<java.lang.String: boolean equals(java.lang.Object)>("TREE");

        if $z1 != 0 goto label02;

        $r112 = new java.lang.IllegalStateException;

        specialinvoke $r112.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DataBTree doesnt start with TREE");

        throw $r112;

     label02:
        $r10 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r11 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r10);

        $b2 = virtualinvoke $r11.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $r12 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r13 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r12);

        $b3 = virtualinvoke $r13.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $i50 = (int) $b3;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int level> = $i50;

        $r14 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r15 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r14);

        $s4 = virtualinvoke $r15.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        $i51 = (int) $s4;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries> = $i51;

        $i5 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: int access$6100(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $i52 = (int) $b2;

        if $i52 == $i5 goto label03;

        $r114 = new java.lang.IllegalStateException;

        $r113 = new java.lang.StringBuilder;

        specialinvoke $r113.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataBTree must be type ");

        $i42 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: int access$6100(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i42);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r114.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r94);

        throw $r114;

     label03:
        $r16 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $b6 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: byte access$5100(ucar.nc2.iosp.hdf5.H5header)>($r16);

        $i53 = (int) $b6;

        $i7 = 2 * $i53;

        $i8 = 8 + $i7;

        $i9 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $r17 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $b10 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: byte access$5100(ucar.nc2.iosp.hdf5.H5header)>($r17);

        $i54 = (int) $b10;

        $i11 = 8 + $i54;

        $i12 = $i11 + 8;

        $i13 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: int access$6200(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $i14 = $i12 + $i13;

        $i15 = $i9 * $i14;

        $i16 = $i8 + $i15;

        l17 = (long) $i16;

        $z2 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$1700()>();

        if $z2 == 0 goto label04;

        $r82 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r83 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.nc2.iosp.hdf5.H5header$MemTracker access$1800(ucar.nc2.iosp.hdf5.H5header)>($r82);

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data BTree (");

        $r86 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.Variable access$6000(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r83.<ucar.nc2.iosp.hdf5.H5header$MemTracker: void addByLen(java.lang.String,long,long)>($r89, l0, l17);

     label04:
        $z3 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$5300()>();

        if $z3 == 0 goto label05;

        $r70 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r71 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r70);

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    type=");

        $i55 = (int) $b2;

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i55);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" level=");

        $i40 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int level>;

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i40);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nentries=");

        $i41 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i41);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size = ");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.PrintStream: void println(java.lang.String)>($r81);

     label05:
        $r18 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $l18 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$4000(ucar.nc2.iosp.hdf5.H5header)>($r18);

        $r19 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $l19 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$4000(ucar.nc2.iosp.hdf5.H5header)>($r19);

        $z4 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$5300()>();

        if $z4 == 0 goto label06;

        $r56 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r57 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r56);

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    leftAddress=");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l18);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" =0x");

        $r62 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l18);

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rightAddress=");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l19);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" =0x");

        $r67 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l19);

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.io.PrintStream: void println(java.lang.String)>($r69);

     label06:
        $i20 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int level>;

        if $i20 != 0 goto label12;

        $r118 = new java.util.ArrayList;

        specialinvoke $r118.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: java.util.List myEntries> = $r118;

        i44 = 0;

     label07:
        $i37 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if i44 > $i37 goto label11;

        $r119 = new ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk;

        $i38 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: int access$6200(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $i39 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if i44 != $i39 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        specialinvoke $r119.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: void <init>(ucar.nc2.iosp.hdf5.H5header$DataBTree,int,boolean)>(r1, $i38, $z8);

        $r53 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: java.util.List myEntries>;

        interfaceinvoke $r53.<java.util.List: boolean add(java.lang.Object)>($r119);

        $z7 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$6300()>();

        if $z7 == 0 goto label10;

        $r54 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r55 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r54);

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.Object)>($r119);

     label10:
        i44 = i44 + 1;

        goto label07;

     label11:
        goto label22;

     label12:
        $i21 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $i22 = $i21 + 1;

        $i23 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: int access$6200(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $r20 = newmultiarray (int)[$i22][$i23];

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int[][] offset> = $r20;

        $i24 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $i25 = $i24 + 1;

        $r21 = newarray (long)[$i25];

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer> = $r21;

        i45 = 0;

     label13:
        $i26 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if i45 > $i26 goto label22;

        $r22 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r23 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r22);

        virtualinvoke $r23.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(8);

        i46 = 0;

     label14:
        $i27 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: int access$6200(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        if i46 >= $i27 goto label16;

        $r46 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r47 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r46);

        $l34 = virtualinvoke $r47.<ucar.unidata.io.RandomAccessFile: long readLong()>();

        $z6 = <ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: boolean $assertionsDisabled>;

        if $z6 != 0 goto label15;

        $b36 = $l34 cmp 2147483647L;

        $i56 = (int) $b36;

        if $i56 < 0 goto label15;

        $r120 = new java.lang.AssertionError;

        specialinvoke $r120.<java.lang.AssertionError: void <init>()>();

        throw $r120;

     label15:
        $r48 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int[][] offset>;

        $r49 = $r48[i45];

        $i35 = (int) $l34;

        $r49[i46] = $i35;

        i46 = i46 + 1;

        goto label14;

     label16:
        $r25 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer>;

        $i33 = i45;

        $i28 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if i45 != $i28 goto label17;

        $l47 = -1L;

        goto label18;

     label17:
        $r24 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $l47 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$4000(ucar.nc2.iosp.hdf5.H5header)>($r24);

     label18:
        $r25[$i33] = $l47;

        $z5 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$5300()>();

        if $z5 == 0 goto label21;

        $r26 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r27 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r26);

        $r121 = new java.lang.StringBuilder;

        specialinvoke $r121.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    childPointer=");

        $r30 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer>;

        $l29 = $r30[i45];

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l29);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" =0x");

        $r33 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer>;

        $l30 = $r33[i45];

        $r34 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l30);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void print(java.lang.String)>($r36);

        $r37 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int[][] offset>;

        r109 = $r37[i45];

        i48 = lengthof r109;

        i49 = 0;

     label19:
        if i49 >= i48 goto label20;

        $i31 = r109[i49];

        l32 = (long) $i31;

        $r40 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r41 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r40);

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l32);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void print(java.lang.String)>($r45);

        i49 = i49 + 1;

        goto label19;

     label20:
        $r38 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r39 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: java.io.PrintStream access$400(ucar.nc2.iosp.hdf5.H5header)>($r38);

        virtualinvoke $r39.<java.io.PrintStream: void println()>();

     label21:
        i45 = i45 + 1;

        goto label13;

     label22:
        return;
    }

    void first(int[]) throws java.io.IOException
    {
        int[][] $r19;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$Node r0, $r1, $r8, $r12, $r13, $r16;
        int[] r11, $r20, $r26;
        ucar.nc2.iosp.hdf5.Tiling $r18, $r25;
        boolean $z0;
        java.util.List $r21;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk r23;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        long $l11, $l12, $l14, $l15;
        java.lang.AssertionError $r2;
        long[] $r9, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        java.lang.String $r7;
        ucar.nc2.iosp.hdf5.H5header$DataBTree $r10, $r15, $r17, $r24;
        java.lang.Object $r22;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        r11 := @parameter0: int[];

        $i0 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int level>;

        if $i0 != 0 goto label3;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = 0;

     label1:
        $i23 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i21 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $i22 = $i21 - 1;

        if $i23 >= $i22 goto label8;

        $r21 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: java.util.List myEntries>;

        $i24 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i25 = $i24 + 1;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>($i25);

        r23 = (ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk) $r22;

        if r11 == null goto label8;

        $r24 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1>;

        $r25 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.Tiling access$6400(ucar.nc2.iosp.hdf5.H5header$DataBTree)>($r24);

        $r26 = r23.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int[] offset>;

        $i26 = virtualinvoke $r25.<ucar.nc2.iosp.hdf5.Tiling: int compare(int[],int[])>(r11, $r26);

        if $i26 >= 0 goto label2;

        goto label8;

     label2:
        $i27 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i28 = $i27 + 1;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = $i28;

        goto label1;

     label3:
        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode> = null;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = 0;

     label4:
        $i2 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i1 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if $i2 >= $i1 goto label7;

        if r11 == null goto label5;

        $r17 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1>;

        $r18 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.Tiling access$6400(ucar.nc2.iosp.hdf5.H5header$DataBTree)>($r17);

        $r19 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int[][] offset>;

        $i16 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i17 = $i16 + 1;

        $r20 = $r19[$i17];

        $i18 = virtualinvoke $r18.<ucar.nc2.iosp.hdf5.Tiling: int compare(int[],int[])>(r11, $r20);

        if $i18 >= 0 goto label6;

     label5:
        $r13 = new ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        $r15 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1>;

        $r14 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer>;

        $i13 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $l15 = $r14[$i13];

        $l14 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long address>;

        specialinvoke $r13.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: void <init>(ucar.nc2.iosp.hdf5.H5header$DataBTree,long,long)>($r15, $l15, $l14);

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode> = $r13;

        $r16 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        virtualinvoke $r16.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: void first(int[])>(r11);

        goto label7;

     label6:
        $i19 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i20 = $i19 + 1;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = $i20;

        goto label4;

     label7:
        $r1 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        if $r1 != null goto label8;

        $i8 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $i9 = $i8 - 1;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = $i9;

        $r8 = new ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        $r10 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1>;

        $r9 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer>;

        $i10 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $l12 = $r9[$i10];

        $l11 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long address>;

        specialinvoke $r8.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: void <init>(ucar.nc2.iosp.hdf5.H5header$DataBTree,long,long)>($r10, $l12, $l11);

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode> = $r8;

        $r12 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        virtualinvoke $r12.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: void first(int[])>(r11);

     label8:
        $z0 = <ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label9;

        $i3 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if $i3 == 0 goto label9;

        $i5 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i4 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if $i5 < $i4 goto label9;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i6 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $i7 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label9:
        return;
    }

    boolean hasNext()
    {
        ucar.nc2.iosp.hdf5.H5header$DataBTree$Node r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        $i0 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int level>;

        if $i0 != 0 goto label3;

        $i5 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i4 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        if $i5 >= $i4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $r1 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        $z0 = virtualinvoke $r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: boolean hasNext()>();

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i3 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i1 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int nentries>;

        $i2 = $i1 - 1;

        if $i3 >= $i2 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk next() throws java.io.IOException
    {
        long $l4, $l5;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$Node r0, $r1, $r2, $r5, $r6, $r8;
        long[] $r3;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        boolean $z0;
        ucar.nc2.iosp.hdf5.H5header$DataBTree $r4;
        java.util.List $r10;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk $r7, $r9, $r12;
        java.lang.Object $r11;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        $i0 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int level>;

        if $i0 != 0 goto label1;

        $r10 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: java.util.List myEntries>;

        $i6 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i7 = $i6 + 1;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = $i7;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i6);

        $r12 = (ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk) $r11;

        return $r12;

     label1:
        $r1 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        $z0 = virtualinvoke $r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        $r9 = virtualinvoke $r8.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk next()>();

        return $r9;

     label2:
        $i1 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $i2 = $i1 + 1;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry> = $i2;

        $r2 = new ucar.nc2.iosp.hdf5.H5header$DataBTree$Node;

        $r4 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1>;

        $r3 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long[] childPointer>;

        $i3 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: int currentEntry>;

        $l5 = $r3[$i3];

        $l4 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: long address>;

        specialinvoke $r2.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: void <init>(ucar.nc2.iosp.hdf5.H5header$DataBTree,long,long)>($r4, $l5, $l4);

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode> = $r2;

        $r5 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        virtualinvoke $r5.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: void first(int[])>(null);

        $r6 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$Node currentNode>;

        $r7 = virtualinvoke $r6.<ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk next()>();

        return $r7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/hdf5/H5header;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.hdf5.H5header$DataBTree$Node: boolean $assertionsDisabled> = $z1;

        return;
    }
}
