public class org.apache.jena.atlas.io.BlockUTF8 extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.atlas.io.BlockUTF8 r0;

        r0 := @this: org.apache.jena.atlas.io.BlockUTF8;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void toChars(java.nio.ByteBuffer, java.nio.CharBuffer)
    {
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.CharBuffer;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void toCharsBuffer(java.nio.ByteBuffer,java.nio.CharBuffer)>(r0, r1);

        return;
    }

    public static void fromChars(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        java.nio.CharBuffer r0;
        java.nio.ByteBuffer r1;

        r0 := @parameter0: java.nio.CharBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void fromCharsBuffer(java.nio.CharBuffer,java.nio.ByteBuffer)>(r0, r1);

        return;
    }

    public static java.lang.String toString(java.nio.ByteBuffer)
    {
        java.nio.CharBuffer $r1;
        int $i0, $i1;
        char[] $r3;
        java.lang.String $r2;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $r1 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i0);

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void toChars(java.nio.ByteBuffer,java.nio.CharBuffer)>(r0, $r1);

        $r2 = new java.lang.String;

        $r3 = virtualinvoke $r1.<java.nio.CharBuffer: char[] array()>();

        $i1 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, 0, $i1);

        return $r2;
    }

    private static void toCharsBuffer(java.nio.ByteBuffer, java.nio.CharBuffer)
    {
        java.lang.Integer $r2, $r6;
        java.nio.ByteBuffer r0;
        byte $b1, $b5, $b7, $b10, $b12, $b13;
        java.nio.CharBuffer r4;
        java.lang.Object[] $r1, $r5;
        short $s2, $s3, $s4, $s11, $s22, $s24, $s29, $s32;
        int $i0, $i6, $i8, $i14, $i16, i19, $i20, $i21, $i23, $i25, $i26, $i27, $i28, $i30, $i31, $i33, $i34, $i35;
        char $c9, $c15, $c17, $c18;
        char[] $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        r4 := @parameter1: java.nio.CharBuffer;

        i19 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

     label1:
        if i19 >= $i0 goto label9;

        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i20 = (int) $b1;

        if $i20 <= 0 goto label2;

        $i21 = (int) $b1;

        if $i21 > 127 goto label2;

        $c18 = (char) $b1;

        virtualinvoke r4.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c18);

        i19 = i19 + 1;

        goto label8;

     label2:
        if $b1 != 0 goto label3;

        $c17 = (char) $b1;

        virtualinvoke r4.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c17);

        i19 = i19 + 1;

        goto label8;

     label3:
        $s22 = (short) $b1;

        $s2 = $s22 & 224;

        $i23 = (int) $s2;

        if $i23 != 192 goto label5;

        $b10 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $s24 = (short) $b10;

        $s11 = $s24 & 192;

        $i25 = (int) $s11;

        if $i25 == 128 goto label4;

        $r5 = newarray (java.lang.Object)[1];

        $i26 = (int) $b10;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i26);

        $r5[0] = $r6;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void exception(java.lang.String,java.lang.Object[])>("Illegal UTF-8 processing character: 0x%04X", $r5);

     label4:
        $b12 = $b1 & 31;

        $i27 = (int) $b12;

        $i14 = $i27 << 6;

        $b13 = $b10 & 63;

        $i28 = (int) $b13;

        $i16 = $i14 | $i28;

        $c15 = (char) $i16;

        virtualinvoke r4.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c15);

        i19 = i19 + 2;

        goto label8;

     label5:
        $s29 = (short) $b1;

        $s3 = $s29 & 240;

        $i30 = (int) $s3;

        if $i30 != 224 goto label6;

        $b7 = $b1 & 15;

        $i31 = (int) $b7;

        $i8 = staticinvoke <org.apache.jena.atlas.io.BlockUTF8: int readMultiBytes(java.nio.ByteBuffer,int,int)>(r0, $i31, 3);

        $c9 = (char) $i8;

        virtualinvoke r4.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c9);

        i19 = i19 + 3;

        goto label8;

     label6:
        $s32 = (short) $b1;

        $s4 = $s32 & 248;

        $i33 = (int) $s4;

        if $i33 != 240 goto label7;

        $b5 = $b1 & 8;

        $i34 = (int) $b5;

        $i6 = staticinvoke <org.apache.jena.atlas.io.BlockUTF8: int readMultiBytes(java.nio.ByteBuffer,int,int)>(r0, $i34, 4);

        $r3 = staticinvoke <java.lang.Character: char[] toChars(int)>($i6);

        virtualinvoke r4.<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>($r3);

        i19 = i19 + 4;

        goto label8;

     label7:
        $r1 = newarray (java.lang.Object)[1];

        $i35 = (int) $b1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i35);

        $r1[0] = $r2;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void exception(java.lang.String,java.lang.Object[])>("Illegal UTF-8: 0x%04X", $r1);

        return;

     label8:
        goto label1;

     label9:
        return;
    }

    private static void toCharsArray(byte[], char[])
    {
        byte[] r1;
        char[] r2;
        org.apache.jena.atlas.lib.NotImplemented $r0;

        r1 := @parameter0: byte[];

        r2 := @parameter1: char[];

        $r0 = new org.apache.jena.atlas.lib.NotImplemented;

        specialinvoke $r0.<org.apache.jena.atlas.lib.NotImplemented: void <init>()>();

        throw $r0;
    }

    private static void fromCharsBuffer(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r1;
        byte $b14, $b15, $b16, $b20, $b21, $b22;
        java.nio.CharBuffer r0;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i17, $i18, i23, i24, i26, i27, i28, i29, i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47;
        char $c1, $c12, c13, $c19, c25;

        r0 := @parameter0: java.nio.CharBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        i23 = virtualinvoke r0.<java.nio.CharBuffer: int position()>();

        $i0 = virtualinvoke r0.<java.nio.CharBuffer: int limit()>();

     label1:
        if i23 >= $i0 goto label9;

        $c1 = virtualinvoke r0.<java.nio.CharBuffer: char get()>();

        if $c1 == 0 goto label2;

        $i31 = (int) $c1;

        if $i31 > 127 goto label2;

        $b22 = (byte) $c1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b22);

        goto label8;

     label2:
        if $c1 != 0 goto label3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

        goto label8;

     label3:
        $i32 = (int) $c1;

        if $i32 > 2047 goto label4;

        $i33 = (int) $c1;

        $i17 = $i33 >> 6;

        $i18 = $i17 & 31;

        i24 = $i18 | 192;

        $c19 = $c1 & 63;

        c25 = $c19 | 128;

        $b20 = (byte) i24;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b20);

        $b21 = (byte) c25;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b21);

        goto label8;

     label4:
        $i34 = (int) $c1;

        $i36 = (int) 65535;

        if $i34 > $i36 goto label5;

        $i37 = (int) $c1;

        $i8 = $i37 >> 12;

        $i9 = $i8 & 15;

        i26 = $i9 | 224;

        $i38 = (int) $c1;

        $i10 = $i38 >> 6;

        $i11 = $i10 & 63;

        i27 = $i11 | 128;

        $c12 = $c1 & 63;

        c13 = $c12 | 128;

        $b14 = (byte) i26;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b14);

        $b15 = (byte) i27;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b15);

        $b16 = (byte) c13;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b16);

        goto label8;

     label5:
        $i39 = (int) $c1;

        if $i39 > 2097151 goto label6;

        $i40 = (int) $c1;

        $i6 = $i40 >> 18;

        $i7 = $i6 & 7;

        i28 = $i7 | 240;

        $i41 = (int) $c1;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void outputBytes(java.nio.ByteBuffer,int,int,int)>(r1, i28, 4, $i41);

        goto label8;

     label6:
        $i42 = (int) $c1;

        if $i42 > 67108863 goto label7;

        $i43 = (int) $c1;

        $i4 = $i43 >> 24;

        $i5 = $i4 & 3;

        i29 = $i5 | 248;

        $i44 = (int) $c1;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void outputBytes(java.nio.ByteBuffer,int,int,int)>(r1, i29, 5, $i44);

        goto label8;

     label7:
        $i45 = (int) $c1;

        if $i45 > 2147483647 goto label8;

        $i46 = (int) $c1;

        $i2 = $i46 >> 31;

        $i3 = $i2 & 1;

        i30 = $i3 | 252;

        $i47 = (int) $c1;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void outputBytes(java.nio.ByteBuffer,int,int,int)>(r1, i30, 6, $i47);

     label8:
        i23 = i23 + 1;

        goto label1;

     label9:
        return;
    }

    private static void fromCharsArray(char[], byte[])
    {
        char[] r1;
        byte[] r2;
        org.apache.jena.atlas.lib.NotImplemented $r0;

        r1 := @parameter0: char[];

        r2 := @parameter1: byte[];

        $r0 = new org.apache.jena.atlas.lib.NotImplemented;

        specialinvoke $r0.<org.apache.jena.atlas.lib.NotImplemented: void <init>()>();

        throw $r0;
    }

    public static void fromChars(java.lang.CharSequence, java.nio.ByteBuffer)
    {
        java.lang.CharSequence r0;
        java.nio.CharBuffer $r1;
        java.nio.ByteBuffer r2;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r1 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r0);

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void fromChars(java.nio.CharBuffer,java.nio.ByteBuffer)>($r1, r2);

        return;
    }

    private static int readMultiBytes(java.nio.ByteBuffer, int, int)
    {
        java.lang.Object[] $r1, $r3;
        java.lang.Integer $r2;
        java.nio.ByteBuffer r0;
        short $s5, $s11;
        byte $b4, $b6;
        int $i0, i1, $i2, i3, $i7, i8, i9, $i10, $i12, $i13, $i14;

        r0 := @parameter0: java.nio.ByteBuffer;

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i2 = i1 - 1;

        if $i0 >= $i2 goto label1;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void exception(java.lang.String,java.lang.Object[])>("Premature end to UTF-8 sequence at end of input", $r3);

     label1:
        i8 = i3;

        i9 = 0;

     label2:
        $i10 = i1 - 1;

        if i9 >= $i10 goto label4;

        $b4 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $s11 = (short) $b4;

        $s5 = $s11 & 192;

        $i12 = (int) $s5;

        if $i12 == 128 goto label3;

        $r1 = newarray (java.lang.Object)[1];

        $i13 = (int) $b4;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r1[0] = $r2;

        staticinvoke <org.apache.jena.atlas.io.BlockUTF8: void exception(java.lang.String,java.lang.Object[])>("Illegal UTF-8 processing character: 0x%04X", $r1);

     label3:
        $i7 = i8 << 6;

        $b6 = $b4 & 63;

        $i14 = (int) $b6;

        i8 = $i7 | $i14;

        i9 = i9 + 1;

        goto label2;

     label4:
        return i8;
    }

    private static void outputBytes(java.nio.ByteBuffer, int, int, int)
    {
        java.nio.ByteBuffer r0;
        byte $b1, $b7;
        int i0, $i2, $i3, i4, i5, $i6, i8, i9, i10, i11, i12, $i14;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i8 := @parameter2: int;

        i5 := @parameter3: int;

        $b1 = (byte) i0;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b1);

        $i14 = (int) -1;

        i9 = i8 + $i14;

        i10 = 0;

     label1:
        if i10 >= i9 goto label2;

        $i2 = i9 - i10;

        $i3 = $i2 - 1;

        i4 = 6 * $i3;

        $i6 = i5 >> i4;

        i11 = $i6 & 63;

        i12 = i11 | 128;

        $b7 = (byte) i12;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b7);

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    private static transient void exception(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r1;
        java.io.IOException $r3;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r3);

        return;
    }
}
