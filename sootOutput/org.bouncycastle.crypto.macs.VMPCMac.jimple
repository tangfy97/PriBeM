public class org.bouncycastle.crypto.macs.VMPCMac extends java.lang.Object implements org.bouncycastle.crypto.Mac
{
    private byte g;
    private byte n;
    private byte[] P;
    private byte s;
    private byte[] T;
    private byte[] workingIV;
    private byte[] workingKey;
    private byte x1;
    private byte x2;
    private byte x3;
    private byte x4;

    public void <init>()
    {
        org.bouncycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n> = 0;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P> = null;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = 0;

        return;
    }

    public int doFinal(byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        byte[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, r36;
        byte $b4, $b5, $b8, $b9, $b11, $b13, $b16, b18, $b19, $b21, $b23, $b26, $b27, $b29, $b33, $b35, $b37, $b39, $b41, $b43, $b44, $b47, $b48, $b49, $b53, $b54, $b55, $b59, $b60, $b61, $b65, $b66, $b67, $b71, $b72, $b73, $b74, $b75, $b76, $b77, $b78, $b79, $b80, $b82, $b85, $b86, $b87, $b88, $b90, $b92, $b95, $b96, $b97, $b98, $b100, $b102, $b105, $b106, $b107, $b108, $b110, $b113, $b114, $b116, $b117, $b119, $b121, $b123, $b126, b128, b130;
        short $s10, $s12, $s20, $s24, $s36, $s40, $s42, $s115, $s118, $s120, $s122, $s132, $s153, $s155, $s156, $s159, $s165, $s167, $s171, $s173, $s176, $s178;
        int i0, $i1, $i2, $i3, $i6, $i7, $i14, $i15, $i17, $i22, $i25, $i28, $i30, $i31, $i32, $i34, $i38, $i45, $i46, $i50, $i51, $i52, $i56, $i57, $i58, $i62, $i63, $i64, $i68, $i69, $i70, $i81, $i83, $i84, $i89, $i91, $i93, $i94, $i99, $i101, $i103, $i104, $i109, $i111, $i112, $i124, $i125, i127, i129, i131, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i154, $i157, $i158, $i160, $i161, $i162, $i163, $i164, $i166, $i168, $i169, $i170, $i172, $i174, $i175, $i177, $i179;
        org.bouncycastle.crypto.macs.VMPCMac r1;

        r1 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i127 = 1;

     label1:
        if i127 >= 25 goto label2;

        $r19 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b44 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $r18 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b41 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $s132 = (short) $b41;

        $s42 = $s132 & 255;

        $i133 = (int) $s42;

        $b43 = $r18[$i133];

        $i134 = (int) $b44;

        $i135 = (int) $b43;

        $i45 = $i134 + $i135;

        $i46 = $i45 & 255;

        $b47 = $r19[$i46];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = $b47;

        $r20 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b49 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x4>;

        $b48 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x3>;

        $i136 = (int) $b49;

        $i137 = (int) $b48;

        $i50 = $i136 + $i137;

        $i51 = $i50 + i127;

        $i52 = $i51 & 255;

        $b53 = $r20[$i52];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x4> = $b53;

        $r21 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b55 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x3>;

        $b54 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x2>;

        $i138 = (int) $b55;

        $i139 = (int) $b54;

        $i56 = $i138 + $i139;

        $i57 = $i56 + i127;

        $i58 = $i57 & 255;

        $b59 = $r21[$i58];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x3> = $b59;

        $r22 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b61 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x2>;

        $b60 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x1>;

        $i140 = (int) $b61;

        $i141 = (int) $b60;

        $i62 = $i140 + $i141;

        $i63 = $i62 + i127;

        $i64 = $i63 & 255;

        $b65 = $r22[$i64];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x2> = $b65;

        $r23 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b67 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x1>;

        $b66 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $i142 = (int) $b67;

        $i143 = (int) $b66;

        $i68 = $i142 + $i143;

        $i69 = $i68 + i127;

        $i70 = $i69 & 255;

        $b71 = $r23[$i70];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x1> = $b71;

        $r25 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b72 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $b79 = $b72 & 31;

        $r24 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b73 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $b74 = $b73 & 31;

        $i144 = (int) $b74;

        $b76 = $r24[$i144];

        $b75 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x1>;

        $b77 = $b76 ^ $b75;

        $b78 = (byte) $b77;

        $i145 = (int) $b79;

        $r25[$i145] = $b78;

        $r27 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b80 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i146 = (int) $b80;

        $i81 = $i146 + 1;

        $i89 = $i81 & 31;

        $r26 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b82 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i147 = (int) $b82;

        $i83 = $i147 + 1;

        $i84 = $i83 & 31;

        $b86 = $r26[$i84];

        $b85 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x2>;

        $b87 = $b86 ^ $b85;

        $b88 = (byte) $b87;

        $r27[$i89] = $b88;

        $r29 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b90 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i148 = (int) $b90;

        $i91 = $i148 + 2;

        $i99 = $i91 & 31;

        $r28 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b92 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i149 = (int) $b92;

        $i93 = $i149 + 2;

        $i94 = $i93 & 31;

        $b96 = $r28[$i94];

        $b95 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x3>;

        $b97 = $b96 ^ $b95;

        $b98 = (byte) $b97;

        $r29[$i99] = $b98;

        $r31 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b100 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i150 = (int) $b100;

        $i101 = $i150 + 3;

        $i109 = $i101 & 31;

        $r30 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b102 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i151 = (int) $b102;

        $i103 = $i151 + 3;

        $i104 = $i103 & 31;

        $b106 = $r30[$i104];

        $b105 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte x4>;

        $b107 = $b106 ^ $b105;

        $b108 = (byte) $b107;

        $r31[$i109] = $b108;

        $b110 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i152 = (int) $b110;

        $i111 = $i152 + 4;

        $i112 = $i111 & 31;

        $b113 = (byte) $i112;

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte g> = $b113;

        $r32 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b114 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $s153 = (short) $b114;

        $s115 = $s153 & 255;

        $i154 = (int) $s115;

        b128 = $r32[$i154];

        $r34 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b116 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $s155 = (short) $b116;

        $s120 = $s155 & 255;

        $r33 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b117 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s156 = (short) $b117;

        $s118 = $s156 & 255;

        $i157 = (int) $s118;

        $b119 = $r33[$i157];

        $i158 = (int) $s120;

        $r34[$i158] = $b119;

        $r35 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b121 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s159 = (short) $b121;

        $s122 = $s159 & 255;

        $i160 = (int) $s122;

        $r35[$i160] = b128;

        $b123 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $i161 = (int) $b123;

        $i124 = $i161 + 1;

        $i125 = $i124 & 255;

        $b126 = (byte) $i125;

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte n> = $b126;

        i127 = i127 + 1;

        goto label1;

     label2:
        i129 = 0;

     label3:
        if i129 >= 768 goto label4;

        $r13 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b27 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $r11 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i25 = i129 & 255;

        $b26 = $r11[$i25];

        $i162 = (int) $b27;

        $i163 = (int) $b26;

        $i30 = $i162 + $i163;

        $r12 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $i28 = i129 & 31;

        $b29 = $r12[$i28];

        $i164 = (int) $b29;

        $i31 = $i30 + $i164;

        $i32 = $i31 & 255;

        $b33 = $r13[$i32];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = $b33;

        $r14 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i34 = i129 & 255;

        b130 = $r14[$i34];

        $r16 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i38 = i129 & 255;

        $r15 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b35 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s165 = (short) $b35;

        $s36 = $s165 & 255;

        $i166 = (int) $s36;

        $b37 = $r15[$i166];

        $r16[$i38] = $b37;

        $r17 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b39 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s167 = (short) $b39;

        $s40 = $s167 & 255;

        $i168 = (int) $s40;

        $r17[$i168] = b130;

        i129 = i129 + 1;

        goto label3;

     label4:
        r36 = newarray (byte)[20];

        i131 = 0;

     label5:
        if i131 >= 20 goto label6;

        $r3 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b5 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $r2 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i3 = i131 & 255;

        $b4 = $r2[$i3];

        $i169 = (int) $b5;

        $i170 = (int) $b4;

        $i6 = $i169 + $i170;

        $i7 = $i6 & 255;

        $b8 = $r3[$i7];

        r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = $b8;

        $r6 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $r5 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $r4 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b9 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s171 = (short) $b9;

        $s10 = $s171 & 255;

        $i172 = (int) $s10;

        $b11 = $r4[$i172];

        $s173 = (short) $b11;

        $s12 = $s173 & 255;

        $i174 = (int) $s12;

        $b13 = $r5[$i174];

        $i175 = (int) $b13;

        $i14 = $i175 + 1;

        $i15 = $i14 & 255;

        $b16 = $r6[$i15];

        r36[i131] = $b16;

        $r7 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i17 = i131 & 255;

        b18 = $r7[$i17];

        $r9 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i22 = i131 & 255;

        $r8 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b19 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s176 = (short) $b19;

        $s20 = $s176 & 255;

        $i177 = (int) $s20;

        $b21 = $r8[$i177];

        $r9[$i22] = $b21;

        $r10 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b23 = r1.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s178 = (short) $b23;

        $s24 = $s178 & 255;

        $i179 = (int) $s24;

        $r10[$i179] = b18;

        i131 = i131 + 1;

        goto label5;

     label6:
        $i1 = lengthof r36;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r36, 0, r0, i0, $i1);

        virtualinvoke r1.<org.bouncycastle.crypto.macs.VMPCMac: void reset()>();

        $i2 = lengthof r36;

        return $i2;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        return "VMPC-MAC";
    }

    public int getMacSize()
    {
        org.bouncycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        return 20;
    }

    public void init(org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        byte[] $r6, $r7, $r8, $r9, $r10;
        org.bouncycastle.crypto.params.ParametersWithIV r1;
        int $i0, $i1;
        org.bouncycastle.crypto.params.KeyParameter r3;
        org.bouncycastle.crypto.CipherParameters r0, $r2, $r4;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r11, $r12, $r13;
        org.bouncycastle.crypto.macs.VMPCMac r5;

        r5 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        r0 := @parameter0: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC-MAC Init parameters must include an IV");

        throw $r12;

     label1:
        r1 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        $r2 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r3 = (org.bouncycastle.crypto.params.KeyParameter) $r2;

        $r4 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $z1 = $r4 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC-MAC Init parameters must include a key");

        throw $r11;

     label2:
        $r6 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r5.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingIV> = $r6;

        $r7 = r5.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        if $r7 == null goto label3;

        $r8 = r5.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        $i0 = lengthof $r8;

        if $i0 < 1 goto label3;

        $r9 = r5.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        $i1 = lengthof $r9;

        if $i1 <= 768 goto label4;

     label3:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC-MAC requires 1 to 768 bytes of IV");

        throw $r13;

     label4:
        $r10 = virtualinvoke r3.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r5.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingKey> = $r10;

        virtualinvoke r5.<org.bouncycastle.crypto.macs.VMPCMac: void reset()>();

        return;
    }

    private void initKey(byte[], byte[])
    {
        byte[] $r1, $r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, r10, $r11, $r12, $r13, $r14, $r15, $r16;
        byte $b1, $b2, $b5, $b9, $b11, $b13, $b15, $b18, $b19, $b22, $b26, $b28, $b30, $b32, $b34, b37, b39;
        short $s12, $s16, $s29, $s33, $s43, $s45, $s50, $s52;
        org.bouncycastle.crypto.macs.VMPCMac r0;
        int $i0, $i3, $i4, $i6, $i7, $i8, $i10, $i14, $i17, $i20, $i21, $i23, $i24, $i25, $i27, $i31, i35, i36, i38, $i40, $i41, $i42, $i44, $i46, $i47, $i48, $i49, $i51, $i53;

        r0 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        r10 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = 0;

        $r1 = newarray (byte)[256];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P> = $r1;

        i35 = 0;

     label1:
        if i35 >= 256 goto label2;

        $r16 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b34 = (byte) i35;

        $r16[i35] = $b34;

        i35 = i35 + 1;

        goto label1;

     label2:
        i36 = 0;

     label3:
        if i36 >= 768 goto label4;

        $r11 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b19 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $r9 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i17 = i36 & 255;

        $b18 = $r9[$i17];

        $i40 = (int) $b19;

        $i41 = (int) $b18;

        $i23 = $i40 + $i41;

        $i20 = lengthof r10;

        $i21 = i36 % $i20;

        $b22 = r10[$i21];

        $i42 = (int) $b22;

        $i24 = $i23 + $i42;

        $i25 = $i24 & 255;

        $b26 = $r11[$i25];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = $b26;

        $r12 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i27 = i36 & 255;

        b37 = $r12[$i27];

        $r14 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i31 = i36 & 255;

        $r13 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b28 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s43 = (short) $b28;

        $s29 = $s43 & 255;

        $i44 = (int) $s29;

        $b30 = $r13[$i44];

        $r14[$i31] = $b30;

        $r15 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b32 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s45 = (short) $b32;

        $s33 = $s45 & 255;

        $i46 = (int) $s33;

        $r15[$i46] = b37;

        i36 = i36 + 1;

        goto label3;

     label4:
        i38 = 0;

     label5:
        if i38 >= 768 goto label6;

        $r4 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $r2 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i0 = i38 & 255;

        $b1 = $r2[$i0];

        $i47 = (int) $b2;

        $i48 = (int) $b1;

        $i6 = $i47 + $i48;

        $i3 = lengthof r3;

        $i4 = i38 % $i3;

        $b5 = r3[$i4];

        $i49 = (int) $b5;

        $i7 = $i6 + $i49;

        $i8 = $i7 & 255;

        $b9 = $r4[$i8];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = $b9;

        $r5 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i10 = i38 & 255;

        b39 = $r5[$i10];

        $r7 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $i14 = i38 & 255;

        $r6 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b11 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s50 = (short) $b11;

        $s12 = $s50 & 255;

        $i51 = (int) $s12;

        $b13 = $r6[$i51];

        $r7[$i14] = $b13;

        $r8 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b15 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s52 = (short) $b15;

        $s16 = $s52 & 255;

        $i53 = (int) $s16;

        $r8[$i53] = b39;

        i38 = i38 + 1;

        goto label5;

     label6:
        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n> = 0;

        return;
    }

    public void reset()
    {
        byte[] $r1, $r2, $r3, $r4;
        int i0;
        org.bouncycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        $r2 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingKey>;

        $r1 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        specialinvoke r0.<org.bouncycastle.crypto.macs.VMPCMac: void initKey(byte[],byte[])>($r2, $r1);

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n> = 0;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x4> = 0;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x3> = 0;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x2> = 0;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x1> = 0;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g> = 0;

        $r3 = newarray (byte)[32];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T> = $r3;

        i0 = 0;

     label1:
        if i0 >= 32 goto label2;

        $r4 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $r4[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void update(byte) throws java.lang.IllegalStateException
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        byte $b0, $b2, $b3, $b6, b7, $b8, $b10, $b12, $b15, $b16, b17, $b18, $b19, $b22, $b23, $b24, $b27, $b28, $b29, $b32, $b33, $b34, $b38, $b39, $b40, $b41, $b42, $b43, $b44, $b45, $b46, $b47, $b49, $b52, $b53, $b54, $b55, $b57, $b59, $b62, $b63, $b64, $b65, $b67, $b69, $b72, $b73, $b74, $b75, $b77, $b80, $b81, b83, $b84, $b85, $b87, $b89, $b91, $b94;
        short $s1, $s9, $s11, $s82, $s86, $s88, $s90, $s95, $s99, $s101, $s122, $s124, $s125, $s128;
        int $i4, $i5, $i13, $i14, $i20, $i21, $i25, $i26, $i30, $i31, $i35, $i36, $i37, $i48, $i50, $i51, $i56, $i58, $i60, $i61, $i66, $i68, $i70, $i71, $i76, $i78, $i79, $i92, $i93, $i96, $i97, $i98, $i100, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i123, $i126, $i127, $i129, $i130;
        org.bouncycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        b7 := @parameter0: byte;

        $r2 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $r1 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b0 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $s95 = (short) $b0;

        $s1 = $s95 & 255;

        $i96 = (int) $s1;

        $b2 = $r1[$i96];

        $i97 = (int) $b3;

        $i98 = (int) $b2;

        $i4 = $i97 + $i98;

        $i5 = $i4 & 255;

        $b6 = $r2[$i5];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s> = $b6;

        $r5 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $r4 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $r3 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b8 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s99 = (short) $b8;

        $s9 = $s99 & 255;

        $i100 = (int) $s9;

        $b10 = $r3[$i100];

        $s101 = (short) $b10;

        $s11 = $s101 & 255;

        $i102 = (int) $s11;

        $b12 = $r4[$i102];

        $i103 = (int) $b12;

        $i13 = $i103 + 1;

        $i14 = $i13 & 255;

        $b15 = $r5[$i14];

        $b16 = b7 ^ $b15;

        b17 = (byte) $b16;

        $r6 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b19 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x4>;

        $b18 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x3>;

        $i104 = (int) $b19;

        $i105 = (int) $b18;

        $i20 = $i104 + $i105;

        $i21 = $i20 & 255;

        $b22 = $r6[$i21];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x4> = $b22;

        $r7 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b24 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x3>;

        $b23 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x2>;

        $i106 = (int) $b24;

        $i107 = (int) $b23;

        $i25 = $i106 + $i107;

        $i26 = $i25 & 255;

        $b27 = $r7[$i26];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x3> = $b27;

        $r8 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b29 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x2>;

        $b28 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x1>;

        $i108 = (int) $b29;

        $i109 = (int) $b28;

        $i30 = $i108 + $i109;

        $i31 = $i30 & 255;

        $b32 = $r8[$i31];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x2> = $b32;

        $r9 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b34 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x1>;

        $b33 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $i110 = (int) $b34;

        $i111 = (int) $b33;

        $i35 = $i110 + $i111;

        $i112 = (int) b17;

        $i36 = $i35 + $i112;

        $i37 = $i36 & 255;

        $b38 = $r9[$i37];

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x1> = $b38;

        $r11 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b39 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $b46 = $b39 & 31;

        $r10 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b40 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $b41 = $b40 & 31;

        $i113 = (int) $b41;

        $b43 = $r10[$i113];

        $b42 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x1>;

        $b44 = $b43 ^ $b42;

        $b45 = (byte) $b44;

        $i114 = (int) $b46;

        $r11[$i114] = $b45;

        $r13 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b47 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i115 = (int) $b47;

        $i48 = $i115 + 1;

        $i56 = $i48 & 31;

        $r12 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b49 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i116 = (int) $b49;

        $i50 = $i116 + 1;

        $i51 = $i50 & 31;

        $b53 = $r12[$i51];

        $b52 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x2>;

        $b54 = $b53 ^ $b52;

        $b55 = (byte) $b54;

        $r13[$i56] = $b55;

        $r15 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b57 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i117 = (int) $b57;

        $i58 = $i117 + 2;

        $i66 = $i58 & 31;

        $r14 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b59 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i118 = (int) $b59;

        $i60 = $i118 + 2;

        $i61 = $i60 & 31;

        $b63 = $r14[$i61];

        $b62 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x3>;

        $b64 = $b63 ^ $b62;

        $b65 = (byte) $b64;

        $r15[$i66] = $b65;

        $r17 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b67 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i119 = (int) $b67;

        $i68 = $i119 + 3;

        $i76 = $i68 & 31;

        $r16 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] T>;

        $b69 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i120 = (int) $b69;

        $i70 = $i120 + 3;

        $i71 = $i70 & 31;

        $b73 = $r16[$i71];

        $b72 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte x4>;

        $b74 = $b73 ^ $b72;

        $b75 = (byte) $b74;

        $r17[$i76] = $b75;

        $b77 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g>;

        $i121 = (int) $b77;

        $i78 = $i121 + 4;

        $i79 = $i78 & 31;

        $b80 = (byte) $i79;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte g> = $b80;

        $r18 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b81 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $s122 = (short) $b81;

        $s82 = $s122 & 255;

        $i123 = (int) $s82;

        b83 = $r18[$i123];

        $r20 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b84 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $s124 = (short) $b84;

        $s88 = $s124 & 255;

        $r19 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b85 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s125 = (short) $b85;

        $s86 = $s125 & 255;

        $i126 = (int) $s86;

        $b87 = $r19[$i126];

        $i127 = (int) $s88;

        $r20[$i127] = $b87;

        $r21 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte[] P>;

        $b89 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte s>;

        $s128 = (short) $b89;

        $s90 = $s128 & 255;

        $i129 = (int) $s90;

        $r21[$i129] = b83;

        $b91 = r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n>;

        $i130 = (int) $b91;

        $i92 = $i130 + 1;

        $i93 = $i92 & 255;

        $b94 = (byte) $i93;

        r0.<org.bouncycastle.crypto.macs.VMPCMac: byte n> = $b94;

        return;
    }

    public void update(byte[], int, int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        byte[] r0;
        org.bouncycastle.crypto.DataLengthException $r2;
        byte $b4;
        int i0, i1, $i2, $i3, i5;
        org.bouncycastle.crypto.macs.VMPCMac r1;

        r1 := @this: org.bouncycastle.crypto.macs.VMPCMac;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label1;

        $r2 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r2.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r2;

     label1:
        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $b4 = r0[i5];

        virtualinvoke r1.<org.bouncycastle.crypto.macs.VMPCMac: void update(byte)>($b4);

        i5 = i5 + 1;

        goto label2;

     label3:
        return;
    }
}
