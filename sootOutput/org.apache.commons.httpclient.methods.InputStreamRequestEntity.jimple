public class org.apache.commons.httpclient.methods.InputStreamRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
{
    public static final int CONTENT_LENGTH_AUTO;
    private static final org.apache.commons.logging.Log LOG;
    private long contentLength;
    private java.io.InputStream content;
    private byte[] buffer;
    private java.lang.String contentType;
    static java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity;

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        java.lang.String r2;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>(r1, -2L, r2);

        return;
    }

    public void <init>(java.io.InputStream, long)
    {
        long l0;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>(r1, l0, null);

        return;
    }

    public void <init>(java.io.InputStream, long, java.lang.String)
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        long l0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer> = null;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content> = r1;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength> = l0;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String contentType> = r2;

        return;
    }

    public java.lang.String getContentType()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String contentType>;

        return $r1;
    }

    private void bufferContent()
    {
        byte[] $r1, r4, $r6, $r7;
        java.io.ByteArrayOutputStream $r3;
        long $l2;
        java.io.IOException $r8;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        int $i0, $i1;
        org.apache.commons.logging.Log $r9;
        java.lang.String $r10;
        java.io.InputStream $r2, $r5;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        if $r2 == null goto label7;

     label2:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r4 = newarray (byte)[4096];

     label3:
        $r5 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r4);

        if $i0 < 0 goto label4;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r4, 0, $i0);

        goto label3;

     label4:
        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer> = $r6;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content> = null;

        $r7 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        $i1 = lengthof $r7;

        $l2 = (long) $i1;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength> = $l2;

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        $r9 = <org.apache.commons.httpclient.methods.InputStreamRequestEntity: org.apache.commons.logging.Log LOG>;

        $r10 = virtualinvoke $r8.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r10, $r8);

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer> = null;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content> = null;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength> = 0L;

     label7:
        return;

        catch java.io.IOException from label2 to label5 with label6;
    }

    public boolean isRepeatable()
    {
        byte[] $r1;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r4;
        byte[] $r2, $r5, r6;
        java.lang.IllegalStateException $r3;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        int $i0;
        java.io.InputStream $r1, $r7;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r4 := @parameter0: java.io.OutputStream;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        if $r1 == null goto label3;

        r6 = newarray (byte)[4096];

     label1:
        $r7 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        $i0 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r6);

        if $i0 < 0 goto label2;

        virtualinvoke r4.<java.io.OutputStream: void write(byte[],int,int)>(r6, 0, $i0);

        goto label1;

     label2:
        goto label5;

     label3:
        $r2 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if $r2 == null goto label4;

        $r5 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5);

        goto label5;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Content must be set before entity is written");

        throw $r3;

     label5:
        return;
    }

    public long getContentLength()
    {
        byte[] $r1;
        byte $b1;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        long $l0, $l2;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $l0 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength>;

        $b1 = $l0 cmp -2L;

        if $b1 != 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>();

     label1:
        $l2 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength>;

        return $l2;
    }

    public java.io.InputStream getContent()
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.methods.InputStreamRequestEntity: int CONTENT_LENGTH_AUTO> = -2;

        $r0 = <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.InputStreamRequestEntity");

        <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.methods.InputStreamRequestEntity: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
