public class org.apache.xmlbeans.impl.tool.CommandLine extends java.lang.Object
{
    private java.util.Map _options;
    private java.lang.String[] _badopts;
    private java.lang.String[] _args;
    private java.util.List _files;
    private java.util.List _urls;
    private java.io.File _baseDir;
    private static final java.io.File[] EMPTY_FILEARRAY;
    private static final java.net.URL[] EMPTY_URLARRAY;
    static java.lang.Class class$org$apache$xmlbeans$impl$tool$CommandLine;

    public void <init>(java.lang.String[], java.util.Collection, java.util.Collection)
    {
        java.util.Map $r22;
        boolean $z0, $z1;
        java.util.Collection r1, r3;
        org.apache.xmlbeans.impl.tool.CommandLine r0;
        java.lang.Object[] $r9, $r13;
        java.lang.String[] r7, $r8, $r10, $r11, $r12, $r14, $r15;
        java.util.ArrayList $r5, $r6;
        java.util.LinkedHashMap $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r16, $r17, $r18, $r19, $r20, r21;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        r7 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.util.Collection;

        r3 := @parameter2: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label01;

        if r3 != null goto label02;

     label01:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("collection required (use Collections.EMPTY_SET if no options)");

        throw $r2;

     label02:
        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.Map _options> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label03:
        $i0 = lengthof r7;

        if i6 >= $i0 goto label10;

        $r16 = r7[i6];

        $i3 = virtualinvoke $r16.<java.lang.String: int indexOf(int)>(45);

        if $i3 != 0 goto label08;

        $r18 = r7[i6];

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>(1);

        r21 = null;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r19);

        if $z0 == 0 goto label04;

        r21 = "";

        goto label07;

     label04:
        $z1 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>($r19);

        if $z1 == 0 goto label06;

        $i5 = i6 + 1;

        $i4 = lengthof r7;

        if $i5 >= $i4 goto label05;

        i6 = i6 + 1;

        r21 = r7[i6];

        goto label07;

     label05:
        r21 = "";

        goto label07;

     label06:
        $r20 = r7[i6];

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

     label07:
        $r22 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.Map _options>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r21);

        goto label09;

     label08:
        $r17 = r7[i6];

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

     label09:
        i6 = i6 + 1;

        goto label03;

     label10:
        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r8 = newarray (java.lang.String)[$i1];

        $r9 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.String[]) $r9;

        $r11 = (java.lang.String[]) $r10;

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] _badopts> = $r11;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r12 = newarray (java.lang.String)[$i2];

        $r13 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (java.lang.String[]) $r13;

        $r15 = (java.lang.String[]) $r14;

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] _args> = $r15;

        return;
    }

    public static void printLicense()
    {
        java.io.PrintStream $r3, $r5;
        java.lang.Class $r0, $r6;
        java.lang.ClassLoader $r1;
        java.lang.Exception $r4;
        java.io.InputStream $r2;

     label1:
        $r0 = <org.apache.xmlbeans.impl.tool.CommandLine: java.lang.Class class$org$apache$xmlbeans$impl$tool$CommandLine>;

        if $r0 != null goto label2;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.tool.CommandLine");

        <org.apache.xmlbeans.impl.tool.CommandLine: java.lang.Class class$org$apache$xmlbeans$impl$tool$CommandLine> = $r6;

        goto label3;

     label2:
        $r6 = <org.apache.xmlbeans.impl.tool.CommandLine: java.lang.Class class$org$apache$xmlbeans$impl$tool$CommandLine>;

     label3:
        $r1 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("LICENSE.txt");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>($r2, $r3);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("License available in this JAR in LICENSE.txt");

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public static void printVersion()
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r2, $r5, $r8, $r10;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String getVendor()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r5 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String getTitle()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".XmlBeans version ");

        $r8 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String getVersion()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    public java.lang.String[] args()
    {
        int $i0, $i1;
        java.lang.String[] $r1, r2, $r3, $r4;
        org.apache.xmlbeans.impl.tool.CommandLine r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] _args>;

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.String)[$i0];

        $r4 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] _args>;

        $r3 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] _args>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    public java.lang.String[] getBadOpts()
    {
        java.lang.String[] $r1;
        org.apache.xmlbeans.impl.tool.CommandLine r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] _badopts>;

        return $r1;
    }

    public java.lang.String getOpt(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r4;
        org.apache.xmlbeans.impl.tool.CommandLine r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.Map _options>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private static java.util.List collectFiles(java.io.File[])
    {
        java.io.File r2;
        java.util.ArrayList $r0;
        java.util.List $r4;
        int $i0, i1;
        java.io.File[] r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.io.File[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label3;

     label2:
        $r3 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: java.util.List collectFiles(java.io.File[])>($r3);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r4);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return $r0;
    }

    private java.util.List getFileList()
    {
        java.lang.String[] $r3;
        int $i0, $i1, i2;
        java.lang.String $r8;
        java.net.URI $r10, $r13, $r14;
        boolean $z0, $z1, z2;
        org.apache.xmlbeans.impl.tool.CommandLine r0;
        java.io.File $r7, $r9, $r11, $r12, $r15, $r16, $r17, $r18, $r19;
        java.util.List $r1, $r2, $r5, $r6;
        java.io.File[] r4;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List _files>;

        if $r1 != null goto label6;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] args()>();

        $i0 = lengthof $r3;

        r4 = newarray (java.io.File)[$i0];

        z2 = 0;

        i2 = 0;

     label1:
        $i1 = lengthof $r3;

        if i2 >= $i1 goto label5;

        $r7 = new java.io.File;

        $r8 = $r3[i2];

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        r4[i2] = $r7;

        if z2 != 0 goto label3;

        $r15 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir>;

        if $r15 != null goto label3;

        $r16 = r4[i2];

        $z1 = virtualinvoke $r16.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r19 = r4[i2];

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir> = $r19;

        goto label4;

     label2:
        $r17 = r4[i2];

        $r18 = virtualinvoke $r17.<java.io.File: java.io.File getParentFile()>();

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir> = $r18;

        goto label4;

     label3:
        $r9 = r4[i2];

        $r10 = virtualinvoke $r9.<java.io.File: java.net.URI toURI()>();

        $r11 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir>;

        if $r11 == null goto label4;

        $r12 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir>;

        $r13 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>();

        $r14 = virtualinvoke $r13.<java.net.URI: java.net.URI relativize(java.net.URI)>($r10);

        $z0 = virtualinvoke $r14.<java.net.URI: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label4;

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir> = null;

        z2 = 1;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: java.util.List collectFiles(java.io.File[])>(r4);

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List _files> = $r6;

     label6:
        $r2 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List _files>;

        return $r2;
    }

    private java.util.List getUrlList()
    {
        java.net.URL $r7;
        java.lang.String[] $r3;
        java.util.ArrayList $r4;
        java.lang.StringBuffer $r10, $r12, $r14, $r15, $r17;
        int $i0, i1;
        java.lang.String $r6, $r8, $r13, $r16, $r18;
        boolean $z0;
        java.io.PrintStream $r11;
        java.net.MalformedURLException $r9;
        org.apache.xmlbeans.impl.tool.CommandLine r0;
        java.util.List $r1, $r2, $r5;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List _urls>;

        if $r1 != null goto label7;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] args()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label6;

        $r6 = $r3[i1];

        $z0 = staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: boolean looksLikeURL(java.lang.String)>($r6);

        if $z0 == 0 goto label5;

     label2:
        $r7 = new java.net.URL;

        $r8 = $r3[i1];

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r8);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ignoring invalid url: ");

        $r13 = $r3[i1];

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r16 = virtualinvoke $r9.<java.net.MalformedURLException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List _urls> = $r5;

     label7:
        $r2 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List _urls>;

        return $r2;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    private static boolean looksLikeURL(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("https:");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("ftp:");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public java.net.URL[] getURLs()
    {
        java.net.URL[] $r2, $r4, $r5;
        java.util.List $r1;
        java.lang.Object[] $r3;
        org.apache.xmlbeans.impl.tool.CommandLine r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = specialinvoke r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List getUrlList()>();

        $r2 = <org.apache.xmlbeans.impl.tool.CommandLine: java.net.URL[] EMPTY_URLARRAY>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.net.URL[]) $r3;

        $r5 = (java.net.URL[]) $r4;

        return $r5;
    }

    public java.io.File[] getFiles()
    {
        java.util.List $r1;
        java.lang.Object[] $r3;
        org.apache.xmlbeans.impl.tool.CommandLine r0;
        java.io.File[] $r2, $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = specialinvoke r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List getFileList()>();

        $r2 = <org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] EMPTY_FILEARRAY>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.io.File[]) $r3;

        $r5 = (java.io.File[]) $r4;

        return $r5;
    }

    public java.io.File getBaseDir()
    {
        org.apache.xmlbeans.impl.tool.CommandLine r0;
        java.io.File $r1;

        r0 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File _baseDir>;

        return $r1;
    }

    public java.io.File[] filesEndingWith(java.lang.String)
    {
        java.lang.Object[] $r5;
        java.util.ArrayList $r0;
        java.lang.String $r10, r11, $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        org.apache.xmlbeans.impl.tool.CommandLine r1;
        java.io.File r9;
        java.util.List $r2;
        java.lang.Object $r8;
        java.io.File[] $r4, $r6, $r7;

        r1 := @this: org.apache.xmlbeans.impl.tool.CommandLine;

        r11 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.util.List getFileList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.io.File) $r8;

        $r10 = virtualinvoke r9.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean endsWith(java.lang.String)>(r11);

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r9.<java.io.File: java.lang.String getPath()>();

        $z2 = staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: boolean looksLikeURL(java.lang.String)>($r12);

        if $z2 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r9);

     label2:
        goto label1;

     label3:
        $r4 = <org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] EMPTY_FILEARRAY>;

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.io.File[]) $r5;

        $r7 = (java.io.File[]) $r6;

        return $r7;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.net.URL[] $r1;
        java.io.File[] $r0;

        $r0 = newarray (java.io.File)[0];

        <org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] EMPTY_FILEARRAY> = $r0;

        $r1 = newarray (java.net.URL)[0];

        <org.apache.xmlbeans.impl.tool.CommandLine: java.net.URL[] EMPTY_URLARRAY> = $r1;

        return;
    }
}
