public class org.apache.batik.dom.events.DOMUIEvent extends org.apache.batik.dom.events.AbstractEvent implements org.w3c.dom.events.UIEvent
{
    private org.w3c.dom.views.AbstractView view;
    private int detail;

    public void <init>()
    {
        org.apache.batik.dom.events.DOMUIEvent r0;

        r0 := @this: org.apache.batik.dom.events.DOMUIEvent;

        specialinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void <init>()>();

        return;
    }

    public org.w3c.dom.views.AbstractView getView()
    {
        org.apache.batik.dom.events.DOMUIEvent r0;
        org.w3c.dom.views.AbstractView $r1;

        r0 := @this: org.apache.batik.dom.events.DOMUIEvent;

        $r1 = r0.<org.apache.batik.dom.events.DOMUIEvent: org.w3c.dom.views.AbstractView view>;

        return $r1;
    }

    public int getDetail()
    {
        org.apache.batik.dom.events.DOMUIEvent r0;
        int $i0;

        r0 := @this: org.apache.batik.dom.events.DOMUIEvent;

        $i0 = r0.<org.apache.batik.dom.events.DOMUIEvent: int detail>;

        return $i0;
    }

    public void initUIEvent(java.lang.String, boolean, boolean, org.w3c.dom.views.AbstractView, int)
    {
        org.apache.batik.dom.events.DOMUIEvent r0;
        org.w3c.dom.views.AbstractView r2;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: org.apache.batik.dom.events.DOMUIEvent;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: org.w3c.dom.views.AbstractView;

        i0 := @parameter4: int;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void initEvent(java.lang.String,boolean,boolean)>(r1, z0, z1);

        r0.<org.apache.batik.dom.events.DOMUIEvent: org.w3c.dom.views.AbstractView view> = r2;

        r0.<org.apache.batik.dom.events.DOMUIEvent: int detail> = i0;

        return;
    }

    public void initUIEventNS(java.lang.String, java.lang.String, boolean, boolean, org.w3c.dom.views.AbstractView, int)
    {
        org.apache.batik.dom.events.DOMUIEvent r0;
        org.w3c.dom.views.AbstractView r3;
        int i0;
        java.lang.String r1, r2;
        boolean z0, z1;

        r0 := @this: org.apache.batik.dom.events.DOMUIEvent;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: org.w3c.dom.views.AbstractView;

        i0 := @parameter5: int;

        virtualinvoke r0.<org.apache.batik.dom.events.AbstractEvent: void initEventNS(java.lang.String,java.lang.String,boolean,boolean)>(r1, r2, z0, z1);

        r0.<org.apache.batik.dom.events.DOMUIEvent: org.w3c.dom.views.AbstractView view> = r3;

        r0.<org.apache.batik.dom.events.DOMUIEvent: int detail> = i0;

        return;
    }

    protected java.lang.String[] split(java.lang.String)
    {
        org.apache.batik.dom.events.DOMUIEvent r8;
        java.lang.Object[] $r6;
        java.lang.String[] $r5, $r7;
        java.util.ArrayList $r0;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i3, $i5, i6;
        java.lang.String r1, $r3, $r4;
        boolean $z0, $z1;
        char $c2, $c4;

        r8 := @this: org.apache.batik.dom.events.DOMUIEvent;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(8);

        i6 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        goto label7;

     label1:
        $i1 = i6;

        i6 = i6 + 1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c2);

        if $z0 == 0 goto label2;

        goto label7;

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label5;

     label3:
        $i3 = i6;

        i6 = i6 + 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c4);

        if $z1 == 0 goto label4;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label6;

     label4:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

     label5:
        if i6 < $i0 goto label3;

     label6:
        if i6 != $i0 goto label7;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label7:
        if i6 < $i0 goto label1;

        $i5 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i5];

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }
}
