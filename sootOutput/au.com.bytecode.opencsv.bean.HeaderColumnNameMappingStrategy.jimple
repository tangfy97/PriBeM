public class au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy extends java.lang.Object implements au.com.bytecode.opencsv.bean.MappingStrategy
{
    protected java.lang.String[] header;
    protected java.util.Map descriptorMap;
    protected java.lang.Class type;

    public void <init>()
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.util.Map descriptorMap> = null;

        return;
    }

    public void captureHeader(au.com.bytecode.opencsv.CSVReader) throws java.io.IOException
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        java.lang.String[] $r2;
        au.com.bytecode.opencsv.CSVReader r1;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        r1 := @parameter0: au.com.bytecode.opencsv.CSVReader;

        $r2 = virtualinvoke r1.<au.com.bytecode.opencsv.CSVReader: java.lang.String[] readNext()>();

        r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.String[] header> = $r2;

        return;
    }

    public java.beans.PropertyDescriptor findDescriptor(int) throws java.beans.IntrospectionException
    {
        java.beans.PropertyDescriptor $r3;
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        int i0, $i1;
        java.lang.String $r1, $r2;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.String getColumnName(int)>(i0);

        if null == $r1 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $r3 = virtualinvoke r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.beans.PropertyDescriptor findDescriptor(java.lang.String)>($r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    protected java.lang.String getColumnName(int)
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        int i0, $i1;
        java.lang.String[] $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        i0 := @parameter0: int;

        $r1 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.String[] header>;

        if null == $r1 goto label1;

        $r2 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.String[] header>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label1;

        $r3 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.String[] header>;

        $r4 = $r3[i0];

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    protected java.beans.PropertyDescriptor findDescriptor(java.lang.String) throws java.beans.IntrospectionException
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        java.beans.PropertyDescriptor $r7;
        java.util.Map $r1, $r3, $r9;
        java.lang.Object $r6;
        java.lang.Class $r8;
        java.lang.String r2, $r4, $r5;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.util.Map descriptorMap>;

        if null != $r1 goto label1;

        $r8 = virtualinvoke r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.Class getType()>();

        $r9 = virtualinvoke r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.util.Map loadDescriptorMap(java.lang.Class)>($r8);

        r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.util.Map descriptorMap> = $r9;

     label1:
        $r3 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.util.Map descriptorMap>;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.beans.PropertyDescriptor) $r6;

        return $r7;
    }

    protected boolean matches(java.lang.String, java.beans.PropertyDescriptor)
    {
        java.beans.PropertyDescriptor r0;
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r4;
        java.lang.String $r1, r2, $r3;
        boolean $z0;

        r4 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.beans.PropertyDescriptor;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    protected java.util.Map loadDescriptorMap(java.lang.Class) throws java.beans.IntrospectionException
    {
        java.beans.PropertyDescriptor[] $r3;
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r1;
        java.util.HashMap $r0;
        java.beans.PropertyDescriptor r4;
        int i0, i1;
        java.lang.Class $r2, r8;
        java.lang.String $r5, $r6, $r7;

        r1 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        r8 := @parameter0: java.lang.Class;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.Class getType()>();

        $r3 = specialinvoke r1.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.beans.PropertyDescriptor[] loadDescriptors(java.lang.Class)>($r2);

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = $r3[i1];

        $r5 = virtualinvoke r4.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private java.beans.PropertyDescriptor[] loadDescriptors(java.lang.Class) throws java.beans.IntrospectionException
    {
        java.beans.BeanInfo $r1;
        java.beans.PropertyDescriptor[] $r2;
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r3;
        java.lang.Class r0;

        r3 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>(r0);

        $r2 = interfaceinvoke $r1.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        return $r2;
    }

    public java.lang.Object createBean() throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        $r1 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.Class type>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        return $r2;
    }

    public java.lang.Class getType()
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        java.lang.Class $r1;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        $r1 = r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.Class type>;

        return $r1;
    }

    public void setType(java.lang.Class)
    {
        au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy r0;
        java.lang.Class r1;

        r0 := @this: au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;

        r1 := @parameter0: java.lang.Class;

        r0.<au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy: java.lang.Class type> = r1;

        return;
    }
}
