public class org.apache.batik.util.ClassFileUtilities extends java.lang.Object
{
    public static final byte CONSTANT_UTF8_INFO;
    public static final byte CONSTANT_INTEGER_INFO;
    public static final byte CONSTANT_FLOAT_INFO;
    public static final byte CONSTANT_LONG_INFO;
    public static final byte CONSTANT_DOUBLE_INFO;
    public static final byte CONSTANT_CLASS_INFO;
    public static final byte CONSTANT_STRING_INFO;
    public static final byte CONSTANT_FIELDREF_INFO;
    public static final byte CONSTANT_METHODREF_INFO;
    public static final byte CONSTANT_INTERFACEMETHODREF_INFO;
    public static final byte CONSTANT_NAMEANDTYPE_INFO;

    protected void <init>()
    {
        org.apache.batik.util.ClassFileUtilities r0;

        r0 := @this: org.apache.batik.util.ClassFileUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Integer $r34, $r36, $r49, r99;
        java.util.Map $r32, $r35, $r37, $r42, $r47;
        java.lang.StringBuffer $r52, $r54, $r55, $r58, $r59, $r62, $r76, $r78, $r80, $r81, $r83;
        java.io.IOException $r89;
        java.util.Collection $r8, $r13, $r22, $r39;
        java.util.HashSet $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.io.PrintStream $r4, $r53, $r77, $r85, $r86, $r87;
        java.lang.Object $r10, $r15, $r19, $r20, $r24, $r27, $r33, $r41, $r45, $r48, $r51, $r67, $r70;
        org.apache.batik.util.ClassFileUtilities$ClassFile r93, r94, r95, r96, r103, r104;
        org.apache.batik.util.ClassFileUtilities$Triple $r46, r102;
        java.util.Set $r17, $r31, $r43, $r65, $r75;
        java.util.ArrayList $r38;
        java.lang.String $r1, $r3, $r28, $r29, $r30, $r57, $r61, $r63, $r74, $r79, $r82, $r84, $r88;
        java.io.File $r2, $r90, r91;
        java.util.jar.JarFile $r12;
        org.apache.batik.util.ClassFileUtilities$Jar $r11, $r56, $r60, $r64, $r71, $r72, $r73, r97, r98, r100, r101;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z14, $z15, $z16, $z17;
        java.util.List $r21, $r25, $r68;
        java.lang.String[] r0, $r92;
        java.util.HashMap $r5, $r6;
        java.util.Iterator $r9, $r14, $r18, $r23, $r26, $r40, $r44, $r50, $r66, $r69;
        java.io.InputStream $r16;

        r0 := @parameter0: java.lang.String[];

        z13 = 0;

        $i0 = lengthof r0;

        if $i0 != 1 goto label01;

        $r88 = r0[0];

        $z12 = virtualinvoke $r88.<java.lang.String: boolean equals(java.lang.Object)>("-f");

        if $z12 == 0 goto label01;

        z13 = 1;

        goto label02;

     label01:
        $i1 = lengthof r0;

        if $i1 == 0 goto label02;

        $r85 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r85.<java.io.PrintStream: void println(java.lang.String)>("usage: org.apache.batik.util.ClassFileUtilities [-f]");

        $r86 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r86.<java.io.PrintStream: void println()>();

        $r87 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r87.<java.io.PrintStream: void println(java.lang.String)>("  -f    list files that cause each jar file dependency");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label02:
        $r90 = new java.io.File;

        specialinvoke $r90.<java.io.File: void <init>(java.lang.String)>(".");

        r91 = null;

        $r92 = virtualinvoke $r90.<java.io.File: java.lang.String[] list()>();

        i6 = 0;

        goto label05;

     label03:
        $r1 = $r92[i6];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("batik-");

        if $z0 == 0 goto label04;

        $r2 = new java.io.File;

        $r3 = $r92[i6];

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        r91 = $r2;

        $z1 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label06;

        r91 = null;

     label04:
        i6 = i6 + 1;

     label05:
        $i7 = lengthof $r92;

        if i6 < $i7 goto label03;

     label06:
        if r91 == null goto label07;

        $z2 = virtualinvoke r91.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label08;

     label07:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Directory \'batik-xxx\' not found in current directory!");

        return;

     label08:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        staticinvoke <org.apache.batik.util.ClassFileUtilities: void collectJars(java.io.File,java.util.Map,java.util.Map)>(r91, $r6, $r5);

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        goto label10;

     label09:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.batik.util.ClassFileUtilities$Jar) $r10;

        $r12 = $r11.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.jar.JarFile jarFile>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label10:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label09;

        $r13 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

        goto label14;

     label11:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r93 = (org.apache.batik.util.ClassFileUtilities$ClassFile) $r15;

        $r16 = virtualinvoke r93.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.io.InputStream getInputStream()>();

        $r17 = staticinvoke <org.apache.batik.util.ClassFileUtilities: java.util.Set getClassDependencies(java.io.InputStream,java.util.Set,boolean)>($r16, $r7, 0);

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

        goto label13;

     label12:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r94 = (org.apache.batik.util.ClassFileUtilities$ClassFile) $r20;

        if r93 == r94 goto label13;

        if r94 == null goto label13;

        $r21 = r93.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.util.List deps>;

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>(r94);

     label13:
        $z14 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label12;

     label14:
        $z4 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label11;

        $r22 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r23 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();

        goto label20;

     label15:
        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r95 = (org.apache.batik.util.ClassFileUtilities$ClassFile) $r24;

        $r25 = r95.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.util.List deps>;

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

        goto label19;

     label16:
        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r96 = (org.apache.batik.util.ClassFileUtilities$ClassFile) $r27;

        r97 = r95.<org.apache.batik.util.ClassFileUtilities$ClassFile: org.apache.batik.util.ClassFileUtilities$Jar jar>;

        r98 = r96.<org.apache.batik.util.ClassFileUtilities$ClassFile: org.apache.batik.util.ClassFileUtilities$Jar jar>;

        $r29 = r95.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $r28 = r96.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $z6 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z6 != 0 goto label19;

        if r98 == r97 goto label19;

        $r31 = r97.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Set files>;

        $r30 = r96.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $z7 = interfaceinvoke $r31.<java.util.Set: boolean contains(java.lang.Object)>($r30);

        if $z7 == 0 goto label17;

        goto label19;

     label17:
        $r32 = r97.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Map deps>;

        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r98);

        r99 = (java.lang.Integer) $r33;

        if r99 != null goto label18;

        $r37 = r97.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Map deps>;

        $r36 = new java.lang.Integer;

        specialinvoke $r36.<java.lang.Integer: void <init>(int)>(1);

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r98, $r36);

        goto label19;

     label18:
        $r35 = r97.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Map deps>;

        $r34 = new java.lang.Integer;

        $i2 = virtualinvoke r99.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        specialinvoke $r34.<java.lang.Integer: void <init>(int)>($i3);

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r98, $r34);

     label19:
        $z15 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z15 != 0 goto label16;

     label20:
        $z5 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label15;

        $r38 = new java.util.ArrayList;

        specialinvoke $r38.<java.util.ArrayList: void <init>(int)>(10);

        $r39 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r40 = interfaceinvoke $r39.<java.util.Collection: java.util.Iterator iterator()>();

        goto label24;

     label21:
        $r41 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r100 = (org.apache.batik.util.ClassFileUtilities$Jar) $r41;

        $r42 = r100.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Map deps>;

        $r43 = interfaceinvoke $r42.<java.util.Map: java.util.Set keySet()>();

        $r44 = interfaceinvoke $r43.<java.util.Set: java.util.Iterator iterator()>();

        goto label23;

     label22:
        $r45 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        r101 = (org.apache.batik.util.ClassFileUtilities$Jar) $r45;

        $r46 = new org.apache.batik.util.ClassFileUtilities$Triple;

        specialinvoke $r46.<org.apache.batik.util.ClassFileUtilities$Triple: void <init>()>();

        $r46.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'from'> = r100;

        $r46.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'to'> = r101;

        $r47 = r100.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Map deps>;

        $r48 = interfaceinvoke $r47.<java.util.Map: java.lang.Object get(java.lang.Object)>(r101);

        $r49 = (java.lang.Integer) $r48;

        $i4 = virtualinvoke $r49.<java.lang.Integer: int intValue()>();

        $r46.<org.apache.batik.util.ClassFileUtilities$Triple: int count> = $i4;

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>($r46);

     label23:
        $z9 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label22;

     label24:
        $z8 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z8 != 0 goto label21;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r38);

        $r50 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

        goto label30;

     label25:
        $r51 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r102 = (org.apache.batik.util.ClassFileUtilities$Triple) $r51;

        $r53 = <java.lang.System: java.io.PrintStream out>;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $i5 = r102.<org.apache.batik.util.ClassFileUtilities$Triple: int count>;

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r56 = r102.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'from'>;

        $r57 = $r56.<org.apache.batik.util.ClassFileUtilities$Jar: java.lang.String name>;

        $r58 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r60 = r102.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'to'>;

        $r61 = $r60.<org.apache.batik.util.ClassFileUtilities$Jar: java.lang.String name>;

        $r62 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r53.<java.io.PrintStream: void println(java.lang.String)>($r63);

        if z13 == 0 goto label30;

        $r64 = r102.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'from'>;

        $r65 = $r64.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Set files>;

        $r66 = interfaceinvoke $r65.<java.util.Set: java.util.Iterator iterator()>();

        goto label29;

     label26:
        $r67 = interfaceinvoke $r66.<java.util.Iterator: java.lang.Object next()>();

        r103 = (org.apache.batik.util.ClassFileUtilities$ClassFile) $r67;

        $r68 = r103.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.util.List deps>;

        $r69 = interfaceinvoke $r68.<java.util.List: java.util.Iterator iterator()>();

        goto label28;

     label27:
        $r70 = interfaceinvoke $r69.<java.util.Iterator: java.lang.Object next()>();

        r104 = (org.apache.batik.util.ClassFileUtilities$ClassFile) $r70;

        $r72 = r104.<org.apache.batik.util.ClassFileUtilities$ClassFile: org.apache.batik.util.ClassFileUtilities$Jar jar>;

        $r71 = r102.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'to'>;

        if $r72 != $r71 goto label28;

        $r73 = r102.<org.apache.batik.util.ClassFileUtilities$Triple: org.apache.batik.util.ClassFileUtilities$Jar 'from'>;

        $r75 = $r73.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Set files>;

        $r74 = r104.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $z11 = interfaceinvoke $r75.<java.util.Set: boolean contains(java.lang.Object)>($r74);

        if $z11 != 0 goto label28;

        $r77 = <java.lang.System: java.io.PrintStream out>;

        $r76 = new java.lang.StringBuffer;

        specialinvoke $r76.<java.lang.StringBuffer: void <init>()>();

        $r78 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        $r79 = r103.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $r80 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r79);

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        $r82 = r104.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r77.<java.io.PrintStream: void println(java.lang.String)>($r84);

     label28:
        $z16 = interfaceinvoke $r69.<java.util.Iterator: boolean hasNext()>();

        if $z16 != 0 goto label27;

     label29:
        $z10 = interfaceinvoke $r66.<java.util.Iterator: boolean hasNext()>();

        if $z10 != 0 goto label26;

     label30:
        $z17 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z17 != 0 goto label25;

     label31:
        goto label33;

     label32:
        $r89 := @caughtexception;

        virtualinvoke $r89.<java.lang.Throwable: void printStackTrace()>();

     label33:
        return;

        catch java.io.IOException from label08 to label31 with label32;
    }

    private static void collectJars(java.io.File, java.util.Map, java.util.Map) throws java.io.IOException
    {
        org.apache.batik.util.ClassFileUtilities$ClassFile $r21;
        java.util.Enumeration $r17;
        java.util.jar.JarFile $r13, $r16;
        org.apache.batik.util.ClassFileUtilities$Jar $r9;
        java.util.Map r5, r6;
        java.util.zip.ZipEntry r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r29;
        java.lang.StringBuffer $r22, $r24, $r25, $r27;
        int i0, $i1;
        java.lang.String $r3, $r11, $r15, $r20, $r23, $r26, $r28;
        java.io.File r0, $r2, $r4, $r7, $r8, $r10, $r12, $r14;
        java.lang.Object $r18;
        java.io.File[] $r1;

        r0 := @parameter0: java.io.File;

        r5 := @parameter1: java.util.Map;

        r6 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = 0;

        goto label6;

     label1:
        $r2 = $r1[i0];

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z0 == 0 goto label4;

        $r8 = $r1[i0];

        $z2 = virtualinvoke $r8.<java.io.File: boolean isFile()>();

        if $z2 == 0 goto label4;

        $r9 = new org.apache.batik.util.ClassFileUtilities$Jar;

        specialinvoke $r9.<org.apache.batik.util.ClassFileUtilities$Jar: void <init>()>();

        $r10 = $r1[i0];

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getPath()>();

        $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.lang.String name> = $r11;

        $r12 = $r1[i0];

        $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.io.File file> = $r12;

        $r13 = new java.util.jar.JarFile;

        $r14 = $r1[i0];

        specialinvoke $r13.<java.util.jar.JarFile: void <init>(java.io.File)>($r14);

        $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.jar.JarFile jarFile> = $r13;

        $r15 = $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.lang.String name>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r9);

        $r16 = $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.jar.JarFile jarFile>;

        $r17 = virtualinvoke $r16.<java.util.jar.JarFile: java.util.Enumeration entries()>();

        goto label3;

     label2:
        $r18 = interfaceinvoke $r17.<java.util.Enumeration: java.lang.Object nextElement()>();

        r19 = (java.util.zip.ZipEntry) $r18;

        $r20 = virtualinvoke r19.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z3 == 0 goto label3;

        $r21 = new org.apache.batik.util.ClassFileUtilities$ClassFile;

        specialinvoke $r21.<org.apache.batik.util.ClassFileUtilities$ClassFile: void <init>()>();

        $r21.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name> = $r20;

        $r21.<org.apache.batik.util.ClassFileUtilities$ClassFile: org.apache.batik.util.ClassFileUtilities$Jar jar> = $r9;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.lang.String name>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(33);

        $r26 = $r21.<org.apache.batik.util.ClassFileUtilities$ClassFile: java.lang.String name>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r21);

        $r29 = $r9.<org.apache.batik.util.ClassFileUtilities$Jar: java.util.Set files>;

        interfaceinvoke $r29.<java.util.Set: boolean add(java.lang.Object)>($r21);

     label3:
        $z4 = interfaceinvoke $r17.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 != 0 goto label2;

        goto label5;

     label4:
        $r4 = $r1[i0];

        $z1 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label5;

        $r7 = $r1[i0];

        staticinvoke <org.apache.batik.util.ClassFileUtilities: void collectJars(java.io.File,java.util.Map,java.util.Map)>($r7, r5, r6);

     label5:
        i0 = i0 + 1;

     label6:
        $i1 = lengthof $r1;

        if i0 < $i1 goto label1;

        return;
    }

    public static java.util.Set getClassDependencies(java.lang.String, java.util.Set, boolean) throws java.io.IOException
    {
        java.util.Set r2, $r3;
        java.io.FileInputStream $r0;
        java.lang.String r1;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.batik.util.ClassFileUtilities: java.util.Set getClassDependencies(java.io.InputStream,java.util.Set,boolean)>($r0, r2, z0);

        return $r3;
    }

    public static java.util.Set getClassDependencies(java.io.InputStream, java.util.Set, boolean) throws java.io.IOException
    {
        java.util.HashSet $r0, $r1;
        java.util.Set r3;
        java.io.InputStream r2;
        boolean z0;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        staticinvoke <org.apache.batik.util.ClassFileUtilities: void computeClassDependencies(java.io.InputStream,java.util.Set,java.util.Set,java.util.Set,boolean)>(r2, r3, $r1, $r0, z0);

        return $r0;
    }

    private static void computeClassDependencies(java.io.InputStream, java.util.Set, java.util.Set, java.util.Set, boolean) throws java.io.IOException
    {
        java.util.jar.JarFile r31;
        java.util.zip.ZipEntry $r23;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.util.Set $r1, r5, r6, r17;
        java.lang.StringBuffer $r9, $r11, $r12, $r13, $r14, $r19, $r20, $r21, $r24, $r26, $r27, $r28;
        java.lang.String r4, $r10, $r15, $r22, $r25, r30;
        java.util.Iterator $r2, $r7;
        java.io.FileInputStream $r18;
        java.io.File $r16;
        java.lang.Object $r3, $r8;
        java.io.InputStream r0, r29;

        r0 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.util.Set;

        r5 := @parameter2: java.util.Set;

        r17 := @parameter3: java.util.Set;

        z3 := @parameter4: boolean;

        $r1 = staticinvoke <org.apache.batik.util.ClassFileUtilities: java.util.Set getClassDependencies(java.io.InputStream)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z0 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label7;

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>(r4);

        $r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label2:
        r29 = null;

        r30 = null;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r8 instanceof java.util.jar.JarFile;

        if $z1 == 0 goto label4;

        r31 = (java.util.jar.JarFile) $r8;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23 = virtualinvoke r31.<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r22);

        if $r23 == null goto label3;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke r31.<java.util.zip.ZipFile: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(33);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        r29 = virtualinvoke r31.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r23);

     label3:
        goto label5;

     label4:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = (java.lang.String) $r8;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        r30 = $r15;

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r15);

        $z2 = virtualinvoke $r16.<java.io.File: boolean isFile()>();

        if $z2 == 0 goto label5;

        $r18 = new java.io.FileInputStream;

        specialinvoke $r18.<java.io.FileInputStream: void <init>(java.io.File)>($r16);

        r29 = $r18;

     label5:
        if r29 == null goto label6;

        interfaceinvoke r17.<java.util.Set: boolean add(java.lang.Object)>(r30);

        if z3 == 0 goto label6;

        staticinvoke <org.apache.batik.util.ClassFileUtilities: void computeClassDependencies(java.io.InputStream,java.util.Set,java.util.Set,java.util.Set,boolean)>(r29, r6, r5, r17, z3);

     label6:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label2;

     label7:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

        return;
    }

    public static java.util.Set getClassDependencies(java.io.InputStream) throws java.io.IOException
    {
        java.lang.Integer $r16, $r20, $r28, $r29;
        byte $b2;
        boolean $z0, $z1;
        java.util.Set $r22;
        java.io.DataInputStream $r24;
        java.lang.String[] r2;
        java.util.HashSet $r26, $r27, $r32;
        short $s1, $s3, $s5, s10, $s12;
        java.lang.StringBuffer $r10, $r11, $r30;
        int $i0, $i4, $i6, $i7, $i8, i9, $i11, $i13, $i14, $i16, $i17, $i19, $i20, $i21;
        java.lang.String $r7, $r12, $r17, $r21;
        java.util.Iterator $r14, $r18;
        java.io.IOException $r25;
        java.lang.RuntimeException $r31;
        java.lang.Object $r15, $r19;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r24 = new java.io.DataInputStream;

        specialinvoke $r24.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

        $i0 = virtualinvoke $r24.<java.io.DataInputStream: int readInt()>();

        if $i0 == -889275714 goto label01;

        $r25 = new java.io.IOException;

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>("Invalid classfile");

        throw $r25;

     label01:
        virtualinvoke $r24.<java.io.DataInputStream: int readInt()>();

        $s1 = virtualinvoke $r24.<java.io.DataInputStream: short readShort()>();

        $i11 = (int) $s1;

        r2 = newarray (java.lang.String)[$i11];

        $r26 = new java.util.HashSet;

        specialinvoke $r26.<java.util.HashSet: void <init>()>();

        $r27 = new java.util.HashSet;

        specialinvoke $r27.<java.util.HashSet: void <init>()>();

        i9 = 1;

        goto label11;

     label02:
        $b2 = virtualinvoke $r24.<java.io.DataInputStream: byte readByte()>();

        $s12 = (short) $b2;

        s10 = $s12 & 255;

        $i13 = (int) s10;

        tableswitch($i13)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label03;
            case 6: goto label03;
            case 7: goto label05;
            case 8: goto label06;
            case 9: goto label04;
            case 10: goto label04;
            case 11: goto label04;
            case 12: goto label07;
            default: goto label09;
        };

     label03:
        virtualinvoke $r24.<java.io.DataInputStream: long readLong()>();

        i9 = i9 + 1;

        goto label10;

     label04:
        virtualinvoke $r24.<java.io.DataInputStream: int readInt()>();

        goto label10;

     label05:
        $r28 = new java.lang.Integer;

        $s5 = virtualinvoke $r24.<java.io.DataInputStream: short readShort()>();

        $i14 = (int) $s5;

        $i16 = (int) 65535;

        $i6 = $i14 & $i16;

        specialinvoke $r28.<java.lang.Integer: void <init>(int)>($i6);

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>($r28);

        goto label10;

     label06:
        virtualinvoke $r24.<java.io.DataInputStream: short readShort()>();

        goto label10;

     label07:
        virtualinvoke $r24.<java.io.DataInputStream: short readShort()>();

        $r29 = new java.lang.Integer;

        $s3 = virtualinvoke $r24.<java.io.DataInputStream: short readShort()>();

        $i17 = (int) $s3;

        $i19 = (int) 65535;

        $i4 = $i17 & $i19;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>($i4);

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>($r29);

        goto label10;

     label08:
        $r7 = virtualinvoke $r24.<java.io.DataInputStream: java.lang.String readUTF()>();

        r2[i9] = $r7;

        goto label10;

     label09:
        $r31 = new java.lang.RuntimeException;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected data in constant-pool:");

        $i20 = (int) s10;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i20);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r31;

     label10:
        i9 = i9 + 1;

     label11:
        $i21 = (int) $s1;

        if i9 < $i21 goto label02;

        $r32 = new java.util.HashSet;

        specialinvoke $r32.<java.util.HashSet: void <init>()>();

        $r14 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>();

        goto label13;

     label12:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.lang.Integer) $r15;

        $i7 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        $r17 = r2[$i7];

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>($r17);

     label13:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label12;

        $r18 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

        goto label15;

     label14:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.Integer) $r19;

        $i8 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $r21 = r2[$i8];

        $r22 = staticinvoke <org.apache.batik.util.ClassFileUtilities: java.util.Set getDescriptorClasses(java.lang.String)>($r21);

        interfaceinvoke $r32.<java.util.Set: boolean addAll(java.util.Collection)>($r22);

     label15:
        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label14;

        return $r32;
    }

    protected static java.util.Set getDescriptorClasses(java.lang.String)
    {
        java.util.HashSet $r8;
        java.lang.StringBuffer $r9, $r10, $r11;
        int i6, i8, i9, i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String r1, $r3, $r5, $r7;
        char $c0, $c1, $c2, $c3, $c4, $c5, c7, c10, c12;

        r1 := @parameter0: java.lang.String;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        i6 = 0;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i13 = (int) $c0;

        lookupswitch($i13)
        {
            case 40: goto label01;
            case 76: goto label17;
            case 91: goto label16;
            default: goto label20;
        };

     label01:
        goto label02;

     label02:
        i6 = i6 + 1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i14 = (int) $c2;

        lookupswitch($i14)
        {
            case 41: goto label08;
            case 76: goto label04;
            case 91: goto label03;
            default: goto label07;
        };

     label03:
        i6 = i6 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i15 = (int) $c3;

        if $i15 == 91 goto label03;

        $i16 = (int) $c3;

        if $i16 == 76 goto label04;

        goto label09;

     label04:
        i6 = i6 + 1;

        c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        goto label06;

     label05:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c7);

        i6 = i6 + 1;

        c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

     label06:
        $i17 = (int) c7;

        if $i17 != 59 goto label05;

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label09;

     label07:
        goto label09;

     label08:
        goto label10;

     label09:
        goto label02;

     label10:
        i8 = i6 + 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i8);

        $i18 = (int) $c4;

        lookupswitch($i18)
        {
            case 76: goto label12;
            case 86: goto label15;
            case 91: goto label11;
            default: goto label15;
        };

     label11:
        i8 = i8 + 1;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i8);

        $i19 = (int) $c5;

        if $i19 == 91 goto label11;

        $i20 = (int) $c5;

        if $i20 == 76 goto label12;

        goto label20;

     label12:
        i9 = i8 + 1;

        c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        goto label14;

     label13:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c10);

        i9 = i9 + 1;

        c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

     label14:
        $i21 = (int) c10;

        if $i21 != 59 goto label13;

        $r7 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label20;

     label15:
        goto label20;

     label16:
        i6 = i6 + 1;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i22 = (int) $c1;

        if $i22 == 91 goto label16;

        $i23 = (int) $c1;

        if $i23 == 76 goto label17;

        goto label20;

     label17:
        i11 = i6 + 1;

        c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        goto label19;

     label18:
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c12);

        i11 = i11 + 1;

        c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

     label19:
        $i24 = (int) c12;

        if $i24 != 59 goto label18;

        $r3 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r3);

        goto label20;

     label20:
        return $r8;
    }

    public static void <clinit>()
    {
        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_NAMEANDTYPE_INFO> = 12;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_INTERFACEMETHODREF_INFO> = 11;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_METHODREF_INFO> = 10;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_FIELDREF_INFO> = 9;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_STRING_INFO> = 8;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_CLASS_INFO> = 7;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_DOUBLE_INFO> = 6;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_LONG_INFO> = 5;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_FLOAT_INFO> = 4;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_INTEGER_INFO> = 3;

        <org.apache.batik.util.ClassFileUtilities: byte CONSTANT_UTF8_INFO> = 1;

        return;
    }
}
