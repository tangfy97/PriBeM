public class org.apache.http.impl.conn.DefaultClientConnectionOperator extends java.lang.Object implements org.apache.http.conn.ClientConnectionOperator
{
    private final org.apache.commons.logging.Log log;
    protected final org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    protected final org.apache.http.conn.DnsResolver dnsResolver;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.conn.scheme.SchemeRegistry r3;
        org.apache.http.impl.conn.SystemDefaultDnsResolver $r4;
        org.apache.http.impl.conn.DefaultClientConnectionOperator r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        r3 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.commons.logging.Log log> = $r2;

        if r3 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme registry amy not be null");

        throw $r5;

     label1:
        r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r3;

        $r4 = new org.apache.http.impl.conn.SystemDefaultDnsResolver;

        specialinvoke $r4.<org.apache.http.impl.conn.SystemDefaultDnsResolver: void <init>()>();

        r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.DnsResolver dnsResolver> = $r4;

        return;
    }

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, org.apache.http.conn.DnsResolver)
    {
        org.apache.http.conn.scheme.SchemeRegistry r3;
        org.apache.http.conn.DnsResolver r4;
        org.apache.http.impl.conn.DefaultClientConnectionOperator r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        r3 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        r4 := @parameter1: org.apache.http.conn.DnsResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.commons.logging.Log log> = $r2;

        if r3 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme registry may not be null");

        throw $r6;

     label1:
        if r4 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DNS resolver may not be null");

        throw $r5;

     label2:
        r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r3;

        r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.DnsResolver dnsResolver> = r4;

        return;
    }

    public org.apache.http.conn.OperatedClientConnection createConnection()
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator r1;
        org.apache.http.impl.conn.DefaultClientConnection $r0;

        r1 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r0 = new org.apache.http.impl.conn.DefaultClientConnection;

        specialinvoke $r0.<org.apache.http.impl.conn.DefaultClientConnection: void <init>()>();

        return $r0;
    }

    public void openConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.lang.IllegalStateException $r23;
        java.net.InetAddress[] $r9;
        org.apache.http.conn.HttpHostConnectException $r37;
        java.net.InetAddress r10, r13;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.apache.http.conn.HttpInetSocketAddress $r12;
        org.apache.http.conn.scheme.SchemeSocketFactory $r7;
        java.net.InetSocketAddress $r22, r39;
        org.apache.http.conn.OperatedClientConnection r0;
        org.apache.http.conn.scheme.Scheme $r6;
        java.lang.StringBuilder $r17, $r19, $r20, $r29, $r31, $r32, $r33, $r34;
        java.net.Socket $r11, $r15, r38;
        org.apache.http.conn.ConnectTimeoutException $r27;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.net.ConnectException $r36;
        java.lang.String $r5, $r8, $r21, $r35;
        org.apache.http.conn.scheme.SchemeRegistry $r4;
        java.lang.IllegalArgumentException $r24, $r25, $r26;
        org.apache.http.protocol.HttpContext r16;
        org.apache.http.params.HttpParams r2;
        org.apache.http.impl.conn.DefaultClientConnectionOperator r3;
        org.apache.commons.logging.Log $r14, $r18, $r28, $r30;
        org.apache.http.HttpHost r1;

        r3 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        r0 := @parameter0: org.apache.http.conn.OperatedClientConnection;

        r1 := @parameter1: org.apache.http.HttpHost;

        r13 := @parameter2: java.net.InetAddress;

        r16 := @parameter3: org.apache.http.protocol.HttpContext;

        r2 := @parameter4: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection may not be null");

        throw $r26;

     label01:
        if r1 != null goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null");

        throw $r25;

     label02:
        if r2 != null goto label03;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r24;

     label03:
        $z0 = interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label04;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection must not be open");

        throw $r23;

     label04:
        $r4 = r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r5 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r6 = virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SchemeSocketFactory getSchemeSocketFactory()>();

        $r8 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $r9 = virtualinvoke r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: java.net.InetAddress[] resolveHostname(java.lang.String)>($r8);

        $i0 = virtualinvoke r1.<org.apache.http.HttpHost: int getPort()>();

        $i1 = virtualinvoke $r6.<org.apache.http.conn.scheme.Scheme: int resolvePort(int)>($i0);

        i5 = 0;

     label05:
        $i2 = lengthof $r9;

        if i5 >= $i2 goto label17;

        r10 = $r9[i5];

        $i3 = lengthof $r9;

        $i4 = $i3 - 1;

        if i5 != $i4 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        z1 = $z5;

        $r11 = interfaceinvoke $r7.<org.apache.http.conn.scheme.SchemeSocketFactory: java.net.Socket createSocket(org.apache.http.params.HttpParams)>(r2);

        r38 = $r11;

        interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: void opening(java.net.Socket,org.apache.http.HttpHost)>($r11, r1);

        $r12 = new org.apache.http.conn.HttpInetSocketAddress;

        specialinvoke $r12.<org.apache.http.conn.HttpInetSocketAddress: void <init>(org.apache.http.HttpHost,java.net.InetAddress,int)>(r1, r10, $i1);

        r39 = null;

        if r13 == null goto label08;

        $r22 = new java.net.InetSocketAddress;

        specialinvoke $r22.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r13, 0);

        r39 = $r22;

     label08:
        $r14 = r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label09;

        $r18 = r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.commons.logging.Log log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21);

     label09:
        $r15 = interfaceinvoke $r7.<org.apache.http.conn.scheme.SchemeSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>($r11, $r12, r39, r2);

        if $r11 == $r15 goto label10;

        r38 = $r15;

        interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: void opening(java.net.Socket,org.apache.http.HttpHost)>($r15, r1);

     label10:
        virtualinvoke r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>(r38, r16, r2);

        $z3 = interfaceinvoke $r7.<org.apache.http.conn.scheme.SchemeSocketFactory: boolean isSecure(java.net.Socket)>(r38);

        interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>($z3, r2);

     label11:
        return;

     label12:
        $r36 := @caughtexception;

        if z1 == 0 goto label13;

        $r37 = new org.apache.http.conn.HttpHostConnectException;

        specialinvoke $r37.<org.apache.http.conn.HttpHostConnectException: void <init>(org.apache.http.HttpHost,java.net.ConnectException)>(r1, $r36);

        throw $r37;

     label13:
        goto label15;

     label14:
        $r27 := @caughtexception;

        if z1 == 0 goto label15;

        throw $r27;

     label15:
        $r28 = r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.commons.logging.Log log>;

        $z4 = interfaceinvoke $r28.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label16;

        $r30 = r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.commons.logging.Log log>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out. ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection will be retried using another IP address");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r35);

     label16:
        i5 = i5 + 1;

        goto label05;

     label17:
        return;

        catch java.net.ConnectException from label09 to label11 with label12;
        catch org.apache.http.conn.ConnectTimeoutException from label09 to label11 with label14;
    }

    public void updateSecureConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.lang.IllegalStateException $r21;
        java.net.Socket $r10, $r12;
        org.apache.http.conn.scheme.SchemeLayeredSocketFactory r9;
        org.apache.http.conn.HttpHostConnectException $r26;
        int $i0;
        java.net.ConnectException $r25;
        java.lang.String $r5, $r11, $r17, $r20;
        boolean $z0, $z1, $z2;
        org.apache.http.conn.scheme.SchemeRegistry $r4;
        org.apache.http.conn.scheme.SchemeSocketFactory $r7, $r8;
        java.lang.IllegalArgumentException $r14, $r22, $r23, $r24;
        org.apache.http.conn.OperatedClientConnection r0;
        org.apache.http.conn.scheme.Scheme $r6;
        org.apache.http.protocol.HttpContext r13;
        org.apache.http.params.HttpParams r2;
        org.apache.http.impl.conn.DefaultClientConnectionOperator r3;
        java.lang.StringBuilder $r15, $r16, $r18, $r19;
        org.apache.http.HttpHost r1;

        r3 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        r0 := @parameter0: org.apache.http.conn.OperatedClientConnection;

        r1 := @parameter1: org.apache.http.HttpHost;

        r13 := @parameter2: org.apache.http.protocol.HttpContext;

        r2 := @parameter3: org.apache.http.params.HttpParams;

        if r0 != null goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection may not be null");

        throw $r24;

     label1:
        if r1 != null goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null");

        throw $r23;

     label2:
        if r2 != null goto label3;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r22;

     label3:
        $z0 = interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        if $z0 != 0 goto label4;

        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection must be open");

        throw $r21;

     label4:
        $r4 = r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r5 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r6 = virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SchemeSocketFactory getSchemeSocketFactory()>();

        $z1 = $r7 instanceof org.apache.http.conn.scheme.SchemeLayeredSocketFactory;

        if $z1 != 0 goto label5;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target scheme (");

        $r17 = virtualinvoke $r6.<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must have layered socket factory.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label5:
        $r8 = virtualinvoke $r6.<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SchemeSocketFactory getSchemeSocketFactory()>();

        r9 = (org.apache.http.conn.scheme.SchemeLayeredSocketFactory) $r8;

     label6:
        $r10 = interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>();

        $r11 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke r1.<org.apache.http.HttpHost: int getPort()>();

        $r12 = interfaceinvoke r9.<org.apache.http.conn.scheme.SchemeLayeredSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams)>($r10, $r11, $i0, r2);

     label7:
        goto label9;

     label8:
        $r25 := @caughtexception;

        $r26 = new org.apache.http.conn.HttpHostConnectException;

        specialinvoke $r26.<org.apache.http.conn.HttpHostConnectException: void <init>(org.apache.http.HttpHost,java.net.ConnectException)>(r1, $r25);

        throw $r26;

     label9:
        virtualinvoke r3.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r12, r13, r2);

        $z2 = interfaceinvoke r9.<org.apache.http.conn.scheme.SchemeLayeredSocketFactory: boolean isSecure(java.net.Socket)>($r12);

        interfaceinvoke r0.<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>($r12, r1, $z2, r2);

        return;

        catch java.net.ConnectException from label6 to label7 with label8;
    }

    protected void prepareSocket(java.net.Socket, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.net.Socket r0;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.params.HttpParams r1;
        int $i0, $i1;
        org.apache.http.impl.conn.DefaultClientConnectionOperator r2;
        boolean $z0, $z1;

        r2 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        r0 := @parameter0: java.net.Socket;

        r3 := @parameter1: org.apache.http.protocol.HttpContext;

        r1 := @parameter2: org.apache.http.params.HttpParams;

        $z0 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>(r1);

        virtualinvoke r0.<java.net.Socket: void setTcpNoDelay(boolean)>($z0);

        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>(r1);

        virtualinvoke r0.<java.net.Socket: void setSoTimeout(int)>($i0);

        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>(r1);

        if $i1 < 0 goto label3;

        if $i1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r0.<java.net.Socket: void setSoLinger(boolean,int)>($z1, $i1);

     label3:
        return;
    }

    protected java.net.InetAddress[] resolveHostname(java.lang.String) throws java.net.UnknownHostException
    {
        java.net.InetAddress[] $r3;
        org.apache.http.conn.DnsResolver $r2;
        org.apache.http.impl.conn.DefaultClientConnectionOperator r0;
        java.lang.String r1;

        r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.DnsResolver dnsResolver>;

        $r3 = interfaceinvoke $r2.<org.apache.http.conn.DnsResolver: java.net.InetAddress[] resolve(java.lang.String)>(r1);

        return $r3;
    }
}
