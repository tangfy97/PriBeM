public class org.springframework.aop.aspectj.'annotation'.PrototypeAspectInstanceFactory extends org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectInstanceFactory
{

    public void <init>(org.springframework.beans.factory.BeanFactory, java.lang.String)
    {
        java.lang.IllegalArgumentException $r3;
        org.springframework.aop.aspectj.'annotation'.PrototypeAspectInstanceFactory r0;
        org.springframework.beans.factory.BeanFactory r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r2, $r7;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.PrototypeAspectInstanceFactory;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectInstanceFactory: void <init>(org.springframework.beans.factory.BeanFactory,java.lang.String)>(r1, r2);

        $z0 = interfaceinvoke r1.<org.springframework.beans.factory.BeanFactory: boolean isPrototype(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot use PrototypeAspectInstanceFactory with bean named \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': not a prototype");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }
}
