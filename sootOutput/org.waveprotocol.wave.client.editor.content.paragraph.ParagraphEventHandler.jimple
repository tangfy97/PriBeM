public class org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler extends org.waveprotocol.wave.client.editor.NodeEventHandlerImpl
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: void <init>()>();

        return;
    }

    public boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: org.waveprotocol.wave.model.document.util.Point maybeSplitForNewline(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentPoint)>(r1, $r3);

        return 1;
    }

    protected org.waveprotocol.wave.model.document.util.Point maybeSplitForNewline(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentPoint)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r2;
        org.waveprotocol.wave.model.document.util.Point $r3, $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: org.waveprotocol.wave.model.document.util.Point maybeSplitForNewline(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.model.document.util.Point)>(r1, $r3);

        return $r4;
    }

    protected org.waveprotocol.wave.model.document.util.Point maybeSplitForNewline(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        org.waveprotocol.wave.model.document.util.Point r3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No more paragraphs");

        throw $r0;
    }

    static boolean attributeKeptOnNewline(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = "t";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r3 = "li";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    protected boolean canJoin(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private int maxJoinLevels(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r5, r6;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1, $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r0;
        int i0;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r5 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r6 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        i0 = 0;

     label1:
        if r5 == null goto label2;

        if r6 == null goto label2;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: boolean canJoin(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode)>(r5, r6);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        $r1 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r6);

        r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r2;

        $r3 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getLastChild(java.lang.Object)>(r5);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        goto label1;

     label2:
        return i0;
    }

    static void indent(org.waveprotocol.wave.client.editor.content.ContentElement, int)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        int $i0, i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        i1 := @parameter1: int;

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int getIndent(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $i2 = $i0 + i1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        if $i3 != 0 goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>(r0, "i", $r5);

        return;
    }

    public boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No more paragraphs");

        throw $r0;
    }

    public boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No more paragraphs");

        throw $r0;
    }

    static org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour getBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("t");

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour of(java.lang.String)>($r1);

        return $r2;
    }
}
