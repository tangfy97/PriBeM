public abstract class org.codehaus.jackson.map.introspect.AnnotatedMember extends org.codehaus.jackson.map.introspect.Annotated
{
    protected final org.codehaus.jackson.map.introspect.AnnotationMap _annotations;

    protected void <init>(org.codehaus.jackson.map.introspect.AnnotationMap)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        org.codehaus.jackson.map.introspect.AnnotationMap r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: org.codehaus.jackson.map.introspect.AnnotationMap _annotations> = r1;

        return;
    }

    public abstract java.lang.Class getDeclaringClass();

    public abstract java.lang.reflect.Member getMember();

    protected org.codehaus.jackson.map.introspect.AnnotationMap getAllAnnotations()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: org.codehaus.jackson.map.introspect.AnnotationMap _annotations>;

        return $r1;
    }

    public final void fixAccess()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        java.lang.reflect.Member $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.reflect.Member getMember()>();

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member)>($r1);

        return;
    }

    public abstract void setValue(java.lang.Object, java.lang.Object) throws java.lang.UnsupportedOperationException, java.lang.IllegalArgumentException;
}
