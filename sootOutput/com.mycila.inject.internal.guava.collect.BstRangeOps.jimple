final class com.mycila.inject.internal.guava.collect.BstRangeOps extends java.lang.Object
{

    public static int totalInRange(com.mycila.inject.internal.guava.collect.BstAggregate, com.mycila.inject.internal.guava.collect.GeneralRange, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r1;
        com.mycila.inject.internal.guava.collect.BstAggregate r0;
        com.mycila.inject.internal.guava.collect.BstNode r2;
        com.mycila.inject.internal.guava.collect.BstSide $r3, $r4;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstAggregate;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.GeneralRange;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>(r2);

        i3 = $i0;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z1 == 0 goto label3;

        $r4 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: int totalBeyondRangeToSide(com.mycila.inject.internal.guava.collect.BstAggregate,com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r0, r1, $r4, r2);

        i3 = $i0 - $i2;

     label3:
        $z2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z2 == 0 goto label4;

        $r3 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: int totalBeyondRangeToSide(com.mycila.inject.internal.guava.collect.BstAggregate,com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r0, r1, $r3, r2);

        i3 = i3 - $i1;

     label4:
        return i3;
    }

    private static int totalBeyondRangeToSide(com.mycila.inject.internal.guava.collect.BstAggregate, com.mycila.inject.internal.guava.collect.GeneralRange, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.collect.BstAggregate r3;
        com.mycila.inject.internal.guava.collect.BstNode $r4, r6;
        com.mycila.inject.internal.guava.collect.BstSide r2, $r5;
        int $i0, $i1, i2, i3;
        java.lang.Object $r1;
        boolean $z0;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.BstAggregate;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.GeneralRange;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstSide;

        r6 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        i2 = 0;

     label1:
        if r6 == null goto label3;

        $r1 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: boolean beyond(com.mycila.inject.internal.guava.collect.GeneralRange,java.lang.Object,com.mycila.inject.internal.guava.collect.BstSide)>(r0, $r1, r2);

        if $z0 == 0 goto label2;

        $i0 = interfaceinvoke r3.<com.mycila.inject.internal.guava.collect.BstAggregate: int entryValue(com.mycila.inject.internal.guava.collect.BstNode)>(r6);

        i3 = i2 + $i0;

        $r4 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>(r2);

        $i1 = interfaceinvoke r3.<com.mycila.inject.internal.guava.collect.BstAggregate: int treeValue(com.mycila.inject.internal.guava.collect.BstNode)>($r4);

        i2 = i3 + $i1;

        $r5 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide other()>();

        r6 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r5);

        goto label1;

     label2:
        r6 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>(r2);

        goto label1;

     label3:
        return i2;
    }

    public static com.mycila.inject.internal.guava.collect.BstNode minusRange(com.mycila.inject.internal.guava.collect.GeneralRange, com.mycila.inject.internal.guava.collect.BstBalancePolicy, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.collect.BstNodeFactory r2;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r1;
        com.mycila.inject.internal.guava.collect.BstNode r3, $r4, r5, $r8, $r9;
        com.mycila.inject.internal.guava.collect.BstSide $r6, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r5 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 == 0 goto label1;

        $r7 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstNode subTreeBeyondRangeToSide(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r0, r1, r2, $r7, r5);

        goto label2;

     label1:
        $r8 = null;

     label2:
        r3 = $r8;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean hasLowerBound()>();

        if $z1 == 0 goto label3;

        $r6 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstNode subTreeBeyondRangeToSide(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r0, r1, r2, $r6, r5);

        goto label4;

     label3:
        $r9 = null;

     label4:
        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode combine(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r2, $r9, r3);

        return $r4;
    }

    private static com.mycila.inject.internal.guava.collect.BstNode subTreeBeyondRangeToSide(com.mycila.inject.internal.guava.collect.GeneralRange, com.mycila.inject.internal.guava.collect.BstBalancePolicy, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r5;
        java.lang.AssertionError $r16;
        int[] $r12;
        int $i0, $i1;
        boolean $z0;
        com.mycila.inject.internal.guava.collect.GeneralRange r1;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r4;
        com.mycila.inject.internal.guava.collect.BstNode r0, $r6, $r7, $r9, $r11, $r14, r17, r18;
        com.mycila.inject.internal.guava.collect.BstSide r3, $r8, $r10, $r13, $r15;
        java.lang.Object $r2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        r4 := @parameter1: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        r5 := @parameter2: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r3 := @parameter3: com.mycila.inject.internal.guava.collect.BstSide;

        r0 := @parameter4: com.mycila.inject.internal.guava.collect.BstNode;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: boolean beyond(com.mycila.inject.internal.guava.collect.GeneralRange,java.lang.Object,com.mycila.inject.internal.guava.collect.BstSide)>(r1, $r2, r3);

        if $z0 == 0 goto label6;

        $r8 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r8);

        r17 = $r9;

        $r10 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r11 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r10);

        r18 = $r11;

        $r12 = <com.mycila.inject.internal.guava.collect.BstRangeOps$1: int[] $SwitchMap$com$google$common$collect$BstSide>;

        $i0 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstSide: int ordinal()>();

        $i1 = $r12[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r15 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        r18 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstNode subTreeBeyondRangeToSide(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r1, r4, r5, $r15, $r11);

        goto label5;

     label3:
        $r13 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        r17 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstNode subTreeBeyondRangeToSide(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r1, r4, r5, $r13, $r9);

        goto label5;

     label4:
        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label5:
        $r14 = interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode balance(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r5, r0, r17, r18);

        return $r14;

     label6:
        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>(r3);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstNode subTreeBeyondRangeToSide(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstNode)>(r1, r4, r5, r3, $r6);

        return $r7;
    }

    public static com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstPathFactory, com.mycila.inject.internal.guava.collect.BstNode)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        com.mycila.inject.internal.guava.collect.BstPathFactory r1;
        com.mycila.inject.internal.guava.collect.BstSide r2;
        com.mycila.inject.internal.guava.collect.BstPath $r4, $r5;
        com.mycila.inject.internal.guava.collect.BstNode r3;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        r1 := @parameter2: com.mycila.inject.internal.guava.collect.BstPathFactory;

        r3 := @parameter3: com.mycila.inject.internal.guava.collect.BstNode;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        if r3 != null goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.BstPathFactory: com.mycila.inject.internal.guava.collect.BstPath initialPath(com.mycila.inject.internal.guava.collect.BstNode)>(r3);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstPathFactory,com.mycila.inject.internal.guava.collect.BstPath)>(r0, r2, r1, $r4);

        return $r5;
    }

    private static com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstPathFactory, com.mycila.inject.internal.guava.collect.BstPath)
    {
        com.mycila.inject.internal.guava.collect.BstPath $r6, $r7, $r10, $r11, r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.guava.collect.GeneralRange r2;
        com.mycila.inject.internal.guava.collect.BstNode $r0;
        com.mycila.inject.internal.guava.collect.BstPathFactory r5;
        com.mycila.inject.internal.guava.collect.BstSide r3, $r4, $r8, $r9;
        java.lang.Object $r1;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        r5 := @parameter2: com.mycila.inject.internal.guava.collect.BstPathFactory;

        r12 := @parameter3: com.mycila.inject.internal.guava.collect.BstPath;

        $r0 = virtualinvoke r12.<com.mycila.inject.internal.guava.collect.BstPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $r1 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: boolean beyond(com.mycila.inject.internal.guava.collect.GeneralRange,java.lang.Object,com.mycila.inject.internal.guava.collect.BstSide)>(r2, $r1, r3);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide other()>();

        $z3 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>($r8);

        if $z3 == 0 goto label1;

        $r9 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide other()>();

        $r10 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.BstPathFactory: com.mycila.inject.internal.guava.collect.BstPath extension(com.mycila.inject.internal.guava.collect.BstPath,com.mycila.inject.internal.guava.collect.BstSide)>(r12, $r9);

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstPathFactory,com.mycila.inject.internal.guava.collect.BstPath)>(r2, r3, r5, $r10);

        return $r11;

     label1:
        return null;

     label2:
        $z1 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>(r3);

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.BstPathFactory: com.mycila.inject.internal.guava.collect.BstPath extension(com.mycila.inject.internal.guava.collect.BstPath,com.mycila.inject.internal.guava.collect.BstSide)>(r12, r3);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstPathFactory,com.mycila.inject.internal.guava.collect.BstPath)>(r2, r3, r5, $r6);

        if $r7 == null goto label3;

        return $r7;

     label3:
        $r4 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide other()>();

        $z2 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: boolean beyond(com.mycila.inject.internal.guava.collect.GeneralRange,java.lang.Object,com.mycila.inject.internal.guava.collect.BstSide)>(r2, $r1, $r4);

        if $z2 == 0 goto label4;

        $r13 = null;

        goto label5;

     label4:
        $r13 = r12;

     label5:
        return $r13;
    }

    public static boolean beyond(com.mycila.inject.internal.guava.collect.GeneralRange, java.lang.Object, com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r0;
        java.lang.AssertionError $r4;
        int[] $r3;
        com.mycila.inject.internal.guava.collect.BstSide r2;
        int $i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.BstSide;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = <com.mycila.inject.internal.guava.collect.BstRangeOps$1: int[] $SwitchMap$com$google$common$collect$BstSide>;

        $i0 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.BstSide: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean tooLow(java.lang.Object)>(r1);

        return $z1;

     label2:
        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean tooHigh(java.lang.Object)>(r1);

        return $z0;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;
    }

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.BstRangeOps r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstRangeOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
