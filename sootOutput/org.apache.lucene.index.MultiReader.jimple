public class org.apache.lucene.index.MultiReader extends org.apache.lucene.index.BaseCompositeReader
{
    private final boolean closeSubReaders;

    public transient void <init>(org.apache.lucene.index.IndexReader[])
    {
        org.apache.lucene.index.MultiReader r0;
        org.apache.lucene.index.IndexReader[] r1;

        r0 := @this: org.apache.lucene.index.MultiReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader[];

        specialinvoke r0.<org.apache.lucene.index.MultiReader: void <init>(org.apache.lucene.index.IndexReader[],boolean)>(r1, 1);

        return;
    }

    public void <init>(org.apache.lucene.index.IndexReader[], boolean)
    {
        org.apache.lucene.index.MultiReader r0;
        org.apache.lucene.index.IndexReader[] r1, $r3;
        int $i0, i1;
        java.lang.Object $r2;
        org.apache.lucene.index.IndexReader $r4;
        boolean z0;

        r0 := @this: org.apache.lucene.index.MultiReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader[];

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.lucene.index.IndexReader[]) $r2;

        specialinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void <init>(org.apache.lucene.index.IndexReader[])>($r3);

        r0.<org.apache.lucene.index.MultiReader: boolean closeSubReaders> = z0;

        if z0 != 0 goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r4 = r1[i1];

        virtualinvoke $r4.<org.apache.lucene.index.IndexReader: void incRef()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected synchronized void doClose() throws java.io.IOException
    {
        org.apache.lucene.index.MultiReader r0;
        java.util.Iterator $r2;
        java.io.IOException $r5, r6;
        java.util.List $r1;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.MultiReader;

        r6 = null;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.MultiReader: java.util.List getSequentialSubReaders()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

     label2:
        $z1 = r0.<org.apache.lucene.index.MultiReader: boolean closeSubReaders>;

        if $z1 == 0 goto label3;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void close()>();

        goto label4;

     label3:
        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void decRef()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        if r6 != null goto label6;

        r6 = $r5;

     label6:
        goto label1;

     label7:
        if r6 == null goto label8;

        throw r6;

     label8:
        return;

        catch java.io.IOException from label2 to label4 with label5;
    }
}
