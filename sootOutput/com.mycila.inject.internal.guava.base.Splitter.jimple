public final class com.mycila.inject.internal.guava.base.Splitter extends java.lang.Object
{
    private final com.mycila.inject.internal.guava.base.CharMatcher trimmer;
    private final boolean omitEmptyStrings;
    private final com.mycila.inject.internal.guava.base.Splitter$Strategy strategy;
    private final int limit;

    private void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy)
    {
        com.mycila.inject.internal.guava.base.Splitter$Strategy r1;
        com.mycila.inject.internal.guava.base.Splitter r0;
        com.mycila.inject.internal.guava.base.CharMatcher $r2;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Splitter$Strategy;

        $r2 = <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher NONE>;

        specialinvoke r0.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy,boolean,com.mycila.inject.internal.guava.base.CharMatcher,int)>(r1, 0, $r2, 2147483647);

        return;
    }

    private void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy, boolean, com.mycila.inject.internal.guava.base.CharMatcher, int)
    {
        com.mycila.inject.internal.guava.base.Splitter$Strategy r1;
        int i0;
        com.mycila.inject.internal.guava.base.Splitter r0;
        boolean z0;
        com.mycila.inject.internal.guava.base.CharMatcher r2;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Splitter$Strategy;

        z0 := @parameter1: boolean;

        r2 := @parameter2: com.mycila.inject.internal.guava.base.CharMatcher;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter$Strategy strategy> = r1;

        r0.<com.mycila.inject.internal.guava.base.Splitter: boolean omitEmptyStrings> = z0;

        r0.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.CharMatcher trimmer> = r2;

        r0.<com.mycila.inject.internal.guava.base.Splitter: int limit> = i0;

        return;
    }

    public static com.mycila.inject.internal.guava.base.Splitter on(char)
    {
        char c0;
        com.mycila.inject.internal.guava.base.Splitter $r1;
        com.mycila.inject.internal.guava.base.CharMatcher $r0;

        c0 := @parameter0: char;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher is(char)>(c0);

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter on(com.mycila.inject.internal.guava.base.CharMatcher)>($r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.base.Splitter on(com.mycila.inject.internal.guava.base.CharMatcher)
    {
        com.mycila.inject.internal.guava.base.Splitter$1 $r2;
        com.mycila.inject.internal.guava.base.Splitter $r1;
        com.mycila.inject.internal.guava.base.CharMatcher r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.CharMatcher;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.base.Splitter;

        $r2 = new com.mycila.inject.internal.guava.base.Splitter$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.base.Splitter$1: void <init>(com.mycila.inject.internal.guava.base.CharMatcher)>(r0);

        specialinvoke $r1.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy)>($r2);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.base.Splitter on(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        com.mycila.inject.internal.guava.base.Splitter$2 $r2;
        com.mycila.inject.internal.guava.base.Splitter $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The separator may not be the empty string.");

        $r1 = new com.mycila.inject.internal.guava.base.Splitter;

        $r2 = new com.mycila.inject.internal.guava.base.Splitter$2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.base.Splitter$2: void <init>(java.lang.String)>(r0);

        specialinvoke $r1.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy)>($r2);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.base.Splitter on(java.util.regex.Pattern)
    {
        java.util.regex.Matcher $r1;
        java.lang.Object[] $r2;
        java.util.regex.Pattern r0;
        com.mycila.inject.internal.guava.base.Splitter$3 $r4;
        com.mycila.inject.internal.guava.base.Splitter $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.regex.Pattern;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("");

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "The pattern may not match the empty string: %s", $r2);

        $r3 = new com.mycila.inject.internal.guava.base.Splitter;

        $r4 = new com.mycila.inject.internal.guava.base.Splitter$3;

        specialinvoke $r4.<com.mycila.inject.internal.guava.base.Splitter$3: void <init>(java.util.regex.Pattern)>(r0);

        specialinvoke $r3.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy)>($r4);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.base.Splitter onPattern(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        com.mycila.inject.internal.guava.base.Splitter $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter on(java.util.regex.Pattern)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.base.Splitter fixedLength(int)
    {
        int i0;
        com.mycila.inject.internal.guava.base.Splitter $r0;
        com.mycila.inject.internal.guava.base.Splitter$4 $r1;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The length may not be less than 1");

        $r0 = new com.mycila.inject.internal.guava.base.Splitter;

        $r1 = new com.mycila.inject.internal.guava.base.Splitter$4;

        specialinvoke $r1.<com.mycila.inject.internal.guava.base.Splitter$4: void <init>(int)>(i0);

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy)>($r1);

        return $r0;
    }

    public com.mycila.inject.internal.guava.base.Splitter omitEmptyStrings()
    {
        com.mycila.inject.internal.guava.base.Splitter$Strategy $r3;
        int $i0;
        com.mycila.inject.internal.guava.base.Splitter $r0, r1;
        com.mycila.inject.internal.guava.base.CharMatcher $r2;

        r1 := @this: com.mycila.inject.internal.guava.base.Splitter;

        $r0 = new com.mycila.inject.internal.guava.base.Splitter;

        $r3 = r1.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter$Strategy strategy>;

        $r2 = r1.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.CharMatcher trimmer>;

        $i0 = r1.<com.mycila.inject.internal.guava.base.Splitter: int limit>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy,boolean,com.mycila.inject.internal.guava.base.CharMatcher,int)>($r3, 1, $r2, $i0);

        return $r0;
    }

    public com.mycila.inject.internal.guava.base.Splitter limit(int)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.base.Splitter$Strategy $r5;
        java.lang.Integer $r1;
        com.mycila.inject.internal.guava.base.Splitter $r2, r3;
        com.mycila.inject.internal.guava.base.CharMatcher $r4;
        int i0;
        boolean $z0, $z1;

        r3 := @this: com.mycila.inject.internal.guava.base.Splitter;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "must be greater then zero: %s", $r0);

        $r2 = new com.mycila.inject.internal.guava.base.Splitter;

        $r5 = r3.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter$Strategy strategy>;

        $z0 = r3.<com.mycila.inject.internal.guava.base.Splitter: boolean omitEmptyStrings>;

        $r4 = r3.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.CharMatcher trimmer>;

        specialinvoke $r2.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy,boolean,com.mycila.inject.internal.guava.base.CharMatcher,int)>($r5, $z0, $r4, i0);

        return $r2;
    }

    public com.mycila.inject.internal.guava.base.Splitter trimResults()
    {
        com.mycila.inject.internal.guava.base.Splitter r0, $r2;
        com.mycila.inject.internal.guava.base.CharMatcher $r1;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter;

        $r1 = <com.mycila.inject.internal.guava.base.CharMatcher: com.mycila.inject.internal.guava.base.CharMatcher WHITESPACE>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter trimResults(com.mycila.inject.internal.guava.base.CharMatcher)>($r1);

        return $r2;
    }

    public com.mycila.inject.internal.guava.base.Splitter trimResults(com.mycila.inject.internal.guava.base.CharMatcher)
    {
        com.mycila.inject.internal.guava.base.Splitter$Strategy $r3;
        int $i0;
        com.mycila.inject.internal.guava.base.Splitter $r1, r2;
        com.mycila.inject.internal.guava.base.CharMatcher r0;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.CharMatcher;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.base.Splitter;

        $r3 = r2.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter$Strategy strategy>;

        $z0 = r2.<com.mycila.inject.internal.guava.base.Splitter: boolean omitEmptyStrings>;

        $i0 = r2.<com.mycila.inject.internal.guava.base.Splitter: int limit>;

        specialinvoke $r1.<com.mycila.inject.internal.guava.base.Splitter: void <init>(com.mycila.inject.internal.guava.base.Splitter$Strategy,boolean,com.mycila.inject.internal.guava.base.CharMatcher,int)>($r3, $z0, r0, $i0);

        return $r1;
    }

    public java.lang.Iterable split(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        com.mycila.inject.internal.guava.base.Splitter$5 $r1;
        com.mycila.inject.internal.guava.base.Splitter r2;

        r2 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.base.Splitter$5;

        specialinvoke $r1.<com.mycila.inject.internal.guava.base.Splitter$5: void <init>(com.mycila.inject.internal.guava.base.Splitter,java.lang.CharSequence)>(r2, r0);

        return $r1;
    }

    private java.util.Iterator spliterator(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.mycila.inject.internal.guava.base.Splitter$Strategy $r2;
        java.util.Iterator $r3;
        com.mycila.inject.internal.guava.base.Splitter r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter$Strategy strategy>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Splitter$Strategy: java.util.Iterator iterator(com.mycila.inject.internal.guava.base.Splitter,java.lang.CharSequence)>(r0, r1);

        return $r3;
    }

    public com.mycila.inject.internal.guava.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String)
    {
        java.lang.String r1;
        com.mycila.inject.internal.guava.base.Splitter$MapSplitter $r3;
        com.mycila.inject.internal.guava.base.Splitter r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter on(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.Splitter$MapSplitter withKeyValueSeparator(com.mycila.inject.internal.guava.base.Splitter)>($r2);

        return $r3;
    }

    public com.mycila.inject.internal.guava.base.Splitter$MapSplitter withKeyValueSeparator(com.mycila.inject.internal.guava.base.Splitter)
    {
        com.mycila.inject.internal.guava.base.Splitter$MapSplitter $r0;
        com.mycila.inject.internal.guava.base.Splitter r1, r2;

        r1 := @this: com.mycila.inject.internal.guava.base.Splitter;

        r2 := @parameter0: com.mycila.inject.internal.guava.base.Splitter;

        $r0 = new com.mycila.inject.internal.guava.base.Splitter$MapSplitter;

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.Splitter$MapSplitter: void <init>(com.mycila.inject.internal.guava.base.Splitter,com.mycila.inject.internal.guava.base.Splitter,com.mycila.inject.internal.guava.base.Splitter$1)>(r1, r2, null);

        return $r0;
    }

    static java.util.Iterator access$000(com.mycila.inject.internal.guava.base.Splitter, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.base.Splitter r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.Splitter;

        r1 := @parameter1: java.lang.CharSequence;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.base.Splitter: java.util.Iterator spliterator(java.lang.CharSequence)>(r1);

        return $r2;
    }

    static com.mycila.inject.internal.guava.base.CharMatcher access$300(com.mycila.inject.internal.guava.base.Splitter)
    {
        com.mycila.inject.internal.guava.base.Splitter r0;
        com.mycila.inject.internal.guava.base.CharMatcher $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.Splitter;

        $r1 = r0.<com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.CharMatcher trimmer>;

        return $r1;
    }

    static boolean access$400(com.mycila.inject.internal.guava.base.Splitter)
    {
        com.mycila.inject.internal.guava.base.Splitter r0;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.Splitter;

        $z0 = r0.<com.mycila.inject.internal.guava.base.Splitter: boolean omitEmptyStrings>;

        return $z0;
    }

    static int access$500(com.mycila.inject.internal.guava.base.Splitter)
    {
        int $i0;
        com.mycila.inject.internal.guava.base.Splitter r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.Splitter;

        $i0 = r0.<com.mycila.inject.internal.guava.base.Splitter: int limit>;

        return $i0;
    }
}
