public abstract class org.apache.batik.dom.svg.SVGOMElement extends org.apache.batik.dom.svg.AbstractElement implements org.w3c.dom.svg.SVGElement, org.apache.batik.dom.svg.ExtendedTraitAccess, org.apache.batik.dom.anim.AnimationTarget
{
    protected static org.apache.batik.util.DoublyIndexedTable xmlTraitInformation;
    protected transient boolean readonly;
    protected java.lang.String prefix;
    protected transient org.apache.batik.dom.svg.SVGContext svgContext;
    protected org.apache.batik.util.DoublyIndexedTable targetListeners;
    protected org.apache.batik.parser.UnitProcessor$Context unitContext;

    protected void <init>()
    {
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: void <init>(java.lang.String,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        return;
    }

    protected void initializeAllLiveAttributes()
    {
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        return;
    }

    public java.lang.String getId()
    {
        org.apache.batik.dom.AbstractDocument $r1;
        java.lang.String $r3, $r5;
        org.w3c.dom.Attr $r4;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.svg.SVGOMDocument $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $z0 = $r2.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12>;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "id");

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "id");

        return $r3;
    }

    public void setId(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument $r1;
        java.lang.String r3;
        org.w3c.dom.Attr $r4;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.svg.SVGOMDocument $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $z0 = $r2.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "id", r3);

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>(null, "id");

        if $r4 == null goto label1;

        interfaceinvoke $r4.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>(r3);

     label1:
        goto label3;

     label2:
        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "id", r3);

     label3:
        return;
    }

    public java.lang.String getXMLbase()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "base");

        return $r1;
    }

    public void setXMLbase(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "xml:base", r1);

        return;
    }

    public org.w3c.dom.svg.SVGSVGElement getOwnerSVGElement()
    {
        org.apache.batik.css.engine.CSSStylableElement r2;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean $z0;
        org.w3c.dom.svg.SVGSVGElement $r1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSStylableElement getParentCSSStylableElement(org.w3c.dom.Element)>(r0);

        goto label3;

     label1:
        $z0 = r2 instanceof org.w3c.dom.svg.SVGSVGElement;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.svg.SVGSVGElement) r2;

        return $r1;

     label2:
        r2 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSStylableElement getParentCSSStylableElement(org.w3c.dom.Element)>(r2);

     label3:
        if r2 != null goto label1;

        return null;
    }

    public org.w3c.dom.svg.SVGElement getViewportElement()
    {
        org.w3c.dom.svg.SVGElement $r1;
        org.apache.batik.css.engine.CSSStylableElement r2;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSStylableElement getParentCSSStylableElement(org.w3c.dom.Element)>(r0);

        goto label3;

     label1:
        $z0 = r2 instanceof org.w3c.dom.svg.SVGFitToViewBox;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.svg.SVGElement) r2;

        return $r1;

     label2:
        r2 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSStylableElement getParentCSSStylableElement(org.w3c.dom.Element)>(r2);

     label3:
        if r2 != null goto label1;

        return null;
    }

    public java.lang.String getNodeName()
    {
        java.lang.StringBuffer $r4, $r6, $r7, $r9;
        java.lang.String $r1, $r2, $r3, $r5, $r8, $r10;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getLocalName()>();

        return $r2;

     label2:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getLocalName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        return "http://www.w3.org/2000/svg";
    }

    public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r2, $r6;
        java.lang.Integer $r10, $r11;
        short $s0, $s1;
        org.w3c.dom.DOMException $r5, $r9;
        int $i2, $i3;
        java.lang.String r1, $r4, $r8;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r10 = new java.lang.Integer;

        $s1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: short getNodeType()>();

        $i2 = (int) $s1;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i2);

        $r6[0] = $r10;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String getNodeName()>();

        $r6[1] = $r8;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r6);

        throw $r9;

     label1:
        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName(java.lang.String)>(r1);

        if $z2 != 0 goto label2;

        $r2 = newarray (java.lang.Object)[3];

        $r11 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: short getNodeType()>();

        $i3 = (int) $s0;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i3);

        $r2[0] = $r11;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String getNodeName()>();

        $r2[1] = $r4;

        $r2[2] = r1;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(5, "prefix", $r2);

        throw $r5;

     label2:
        r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix> = r1;

        return;
    }

    protected java.lang.String getCascadedXMLBase(org.w3c.dom.Node)
    {
        org.w3c.dom.Attr $r2;
        short $s0, $s1, $s2;
        org.w3c.dom.Document $r5;
        org.w3c.dom.Node r6, r8;
        int $i3;
        java.lang.String $r4, r7;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean $z0;
        org.apache.batik.css.engine.CSSNavigableNode $r0;
        org.apache.batik.dom.AbstractDocument r9;
        org.w3c.dom.Element r10;
        org.apache.batik.util.ParsedURL $r11;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r6 := @parameter0: org.w3c.dom.Node;

        r7 = null;

        r8 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label04;

     label01:
        $s0 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label02;

        r7 = virtualinvoke r1.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String getCascadedXMLBase(org.w3c.dom.Node)>(r8);

        goto label05;

     label02:
        $z0 = r8 instanceof org.apache.batik.css.engine.CSSNavigableNode;

        if $z0 == 0 goto label03;

        $r0 = (org.apache.batik.css.engine.CSSNavigableNode) r8;

        r8 = interfaceinvoke $r0.<org.apache.batik.css.engine.CSSNavigableNode: org.w3c.dom.Node getCSSParentNode()>();

        goto label04;

     label03:
        r8 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label04:
        if r8 != null goto label01;

     label05:
        if r7 != null goto label09;

        $s2 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s2;

        if $i3 != 9 goto label06;

        r9 = (org.apache.batik.dom.AbstractDocument) r6;

        goto label07;

     label06:
        $r5 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r9 = (org.apache.batik.dom.AbstractDocument) $r5;

     label07:
        r7 = virtualinvoke r9.<org.apache.batik.dom.AbstractDocument: java.lang.String getDocumentURI()>();

        goto label09;

     label08:
        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label09:
        if r6 == null goto label10;

        $s1 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label08;

     label10:
        if r6 != null goto label11;

        return r7;

     label11:
        r10 = (org.w3c.dom.Element) r6;

        $r2 = interfaceinvoke r10.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "base");

        if $r2 == null goto label13;

        if r7 != null goto label12;

        r7 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label13;

     label12:
        $r11 = new org.apache.batik.util.ParsedURL;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        specialinvoke $r11.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>(r7, $r4);

        r7 = virtualinvoke $r11.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

     label13:
        return r7;
    }

    public void setSVGContext(org.apache.batik.dom.svg.SVGContext)
    {
        org.apache.batik.dom.svg.SVGContext r1;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: org.apache.batik.dom.svg.SVGContext;

        r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext svgContext> = r1;

        return;
    }

    public org.apache.batik.dom.svg.SVGContext getSVGContext()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext svgContext>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGException createSVGException(short, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r4;
        org.apache.batik.dom.AbstractDocument $r2;
        java.lang.Exception $r6;
        short s0;
        org.apache.batik.dom.svg.SVGOMException $r0, $r7;
        java.lang.String r3, $r5;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        s0 := @parameter0: short;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

     label1:
        $r0 = new org.apache.batik.dom.svg.SVGOMException;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r5 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r3, r4);

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMException: void <init>(short,java.lang.String)>(s0, $r5);

        return $r0;

     label2:
        $r6 := @caughtexception;

        $r7 = new org.apache.batik.dom.svg.SVGOMException;

        specialinvoke $r7.<org.apache.batik.dom.svg.SVGOMException: void <init>(short,java.lang.String)>(s0, r3);

        return $r7;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    public boolean isReadonly()
    {
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $z0 = r0.<org.apache.batik.dom.svg.SVGOMElement: boolean readonly>;

        return $z0;
    }

    public void setReadonly(boolean)
    {
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.dom.svg.SVGOMElement: boolean readonly> = z0;

        return;
    }

    protected org.apache.batik.util.DoublyIndexedTable getTraitInformationTable()
    {
        org.apache.batik.util.DoublyIndexedTable $r0;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $r0 = <org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation>;

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedTransformList createLiveAnimatedTransformList(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedTransformList $r0;
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedTransformList;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedTransformList: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedBoolean createLiveAnimatedBoolean(java.lang.String, java.lang.String, boolean)
    {
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.util.DoublyIndexedTable $r4;
        org.apache.batik.dom.svg.SVGOMDocument $r6;
        org.apache.batik.dom.svg.SVGOMAnimatedBoolean $r0;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r7;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean z0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedBoolean;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedBoolean: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, z0);

        $r4 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r5 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r7);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedString createLiveAnimatedString(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.util.DoublyIndexedTable $r4;
        org.apache.batik.dom.svg.SVGOMAnimatedString $r0;
        org.apache.batik.dom.svg.SVGOMDocument $r6;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r7;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedString;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedString: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r4 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r5 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r7);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio createLiveAnimatedPreserveAspectRatio()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio $r0;
        org.apache.batik.dom.AbstractDocument $r3;
        org.apache.batik.util.DoublyIndexedTable $r2;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r5;
        org.apache.batik.dom.svg.SVGOMElement r1;
        org.apache.batik.dom.svg.SVGOMDocument $r4;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio: void <init>(org.apache.batik.dom.svg.AbstractElement)>(r1);

        $r2 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r2.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "preserveAspectRatio", $r0);

        $r3 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r4 = (org.apache.batik.dom.svg.SVGOMDocument) $r3;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r5);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedMarkerOrientValue createLiveAnimatedMarkerOrientValue(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.util.DoublyIndexedTable $r4;
        org.apache.batik.dom.svg.SVGOMDocument $r6;
        org.apache.batik.dom.svg.SVGOMAnimatedMarkerOrientValue $r0;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r7;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedMarkerOrientValue;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedMarkerOrientValue: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r4 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r5 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r7);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedPathData createLiveAnimatedPathData(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedPathData $r0;
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedPathData;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedPathData: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedNumber createLiveAnimatedNumber(java.lang.String, java.lang.String, float)
    {
        float f0;
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMAnimatedNumber $r3;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedNumber createLiveAnimatedNumber(java.lang.String,java.lang.String,float,boolean)>(r1, r2, f0, 0);

        return $r3;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedNumber createLiveAnimatedNumber(java.lang.String, java.lang.String, float, boolean)
    {
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.dom.svg.SVGOMAnimatedNumber $r0;
        org.apache.batik.util.DoublyIndexedTable $r4;
        org.apache.batik.dom.svg.SVGOMDocument $r6;
        float f0;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r7;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean z0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        z0 := @parameter3: boolean;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedNumber;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedNumber: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,float,boolean)>(r1, r2, r3, f0, z0);

        $r4 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r5 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r7);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedNumberList createLiveAnimatedNumberList(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        org.apache.batik.dom.svg.SVGOMAnimatedNumberList $r0;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean z0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedNumberList;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedNumberList: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, z0);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedPoints createLiveAnimatedPoints(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        org.apache.batik.dom.svg.SVGOMAnimatedPoints $r0;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedPoints;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedPoints: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedLengthList createLiveAnimatedLengthList(java.lang.String, java.lang.String, java.lang.String, boolean, short)
    {
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        short s0;
        org.apache.batik.dom.svg.SVGOMAnimatedLengthList $r0;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean z0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        s0 := @parameter4: short;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedLengthList;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String,boolean,short)>(r1, r2, r3, r4, z0, s0);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedInteger createLiveAnimatedInteger(java.lang.String, java.lang.String, int)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger $r0;
        org.apache.batik.dom.AbstractDocument $r5;
        org.apache.batik.util.DoublyIndexedTable $r4;
        org.apache.batik.dom.svg.SVGOMDocument $r6;
        int i0;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r7;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,int)>(r1, r2, r3, i0);

        $r4 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r5 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r7);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedEnumeration createLiveAnimatedEnumeration(java.lang.String, java.lang.String, java.lang.String[], short)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedEnumeration $r0;
        java.lang.String[] r4;
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        short s0;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String[];

        s0 := @parameter3: short;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedEnumeration;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedEnumeration: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String[],short)>(r1, r2, r3, r4, s0);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedLength createLiveAnimatedLength(java.lang.String, java.lang.String, java.lang.String, short, boolean)
    {
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        short s0;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMAnimatedLength $r0;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean z0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        s0 := @parameter3: short;

        z0 := @parameter4: boolean;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedLength;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedLength: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String,short,boolean)>(r1, r2, r3, r4, s0, z0);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGOMAnimatedRect createLiveAnimatedRect(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument $r6;
        org.apache.batik.util.DoublyIndexedTable $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        java.lang.String r2, r3, r4;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r8;
        org.apache.batik.dom.svg.SVGOMAnimatedRect $r0;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new org.apache.batik.dom.svg.SVGOMAnimatedRect;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAnimatedRect: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.util.DoublyIndexedTable liveAttributeValues>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r0);

        $r6 = r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r6;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.AnimatedAttributeListener getAnimatedAttributeListener()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r8);

        return $r0;
    }

    public boolean hasProperty(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.css.engine.CSSEngine $r3;
        int $i0, $i1, $i3, $i5;
        java.lang.String r4;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.AbstractStylableDocument r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        r2 = (org.apache.batik.dom.AbstractStylableDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $i0 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>(r4);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $i1 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getShorthandIndex(java.lang.String)>(r4);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasTrait(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isPropertyAnimatable(java.lang.String)
    {
        org.apache.batik.css.engine.value.ShorthandManager[] $r5;
        org.apache.batik.css.engine.value.ValueManager[] $r7;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.css.engine.CSSEngine $r3;
        org.apache.batik.css.engine.value.ShorthandManager $r6;
        org.apache.batik.css.engine.value.ValueManager $r8;
        int $i0, $i1, $i3, $i5;
        java.lang.String r4;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.AbstractStylableDocument r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        r2 = (org.apache.batik.dom.AbstractStylableDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $i0 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>(r4);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r7 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        $r8 = $r7[$i0];

        $z1 = interfaceinvoke $r8.<org.apache.batik.css.engine.value.ValueManager: boolean isAnimatableProperty()>();

        return $z1;

     label1:
        $i1 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getShorthandIndex(java.lang.String)>(r4);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        $r5 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ShorthandManager[] getShorthandManagers()>();

        $r6 = $r5[$i1];

        $z0 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.ShorthandManager: boolean isAnimatableProperty()>();

        return $z0;

     label2:
        return 0;
    }

    public final boolean isAttributeAnimatable(java.lang.String, java.lang.String)
    {
        java.lang.Object $r4;
        org.apache.batik.util.DoublyIndexedTable $r1;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.svg.TraitInformation r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable getTraitInformationTable()>();

        $r4 = virtualinvoke $r1.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r2, r3);

        r5 = (org.apache.batik.dom.svg.TraitInformation) $r4;

        if r5 == null goto label1;

        $z0 = virtualinvoke r5.<org.apache.batik.dom.svg.TraitInformation: boolean isAnimatable()>();

        return $z0;

     label1:
        return 0;
    }

    public boolean isPropertyAdditive(java.lang.String)
    {
        org.apache.batik.css.engine.value.ShorthandManager[] $r5;
        org.apache.batik.css.engine.value.ValueManager[] $r7;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.css.engine.CSSEngine $r3;
        org.apache.batik.css.engine.value.ShorthandManager $r6;
        org.apache.batik.css.engine.value.ValueManager $r8;
        int $i0, $i1, $i3, $i5;
        java.lang.String r4;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.AbstractStylableDocument r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        r2 = (org.apache.batik.dom.AbstractStylableDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $i0 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>(r4);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r7 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        $r8 = $r7[$i0];

        $z1 = interfaceinvoke $r8.<org.apache.batik.css.engine.value.ValueManager: boolean isAdditiveProperty()>();

        return $z1;

     label1:
        $i1 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getShorthandIndex(java.lang.String)>(r4);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        $r5 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ShorthandManager[] getShorthandManagers()>();

        $r6 = $r5[$i1];

        $z0 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.ShorthandManager: boolean isAdditiveProperty()>();

        return $z0;

     label2:
        return 0;
    }

    public boolean isAttributeAdditive(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 1;
    }

    public boolean isTraitAnimatable(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isTraitAdditive(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public int getPropertyType(java.lang.String)
    {
        org.apache.batik.css.engine.value.ValueManager[] $r5;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.css.engine.CSSEngine $r3;
        org.apache.batik.css.engine.value.ValueManager $r6;
        int $i0, $i1, $i3;
        java.lang.String r4;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.AbstractStylableDocument r2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        r2 = (org.apache.batik.dom.AbstractStylableDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $i0 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>(r4);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r5 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        $r6 = $r5[$i0];

        $i1 = interfaceinvoke $r6.<org.apache.batik.css.engine.value.ValueManager: int getPropertyType()>();

        return $i1;

     label1:
        return 0;
    }

    public final int getAttributeType(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.Object $r4;
        org.apache.batik.util.DoublyIndexedTable $r1;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.dom.svg.TraitInformation r5;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable getTraitInformationTable()>();

        $r4 = virtualinvoke $r1.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r2, r3);

        r5 = (org.apache.batik.dom.svg.TraitInformation) $r4;

        if r5 == null goto label1;

        $i0 = virtualinvoke r5.<org.apache.batik.dom.svg.TraitInformation: int getType()>();

        return $i0;

     label1:
        return 0;
    }

    public org.w3c.dom.Element getElement()
    {
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        return r0;
    }

    public void updatePropertyValue(java.lang.String, org.apache.batik.anim.values.AnimatableValue)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.anim.values.AnimatableValue r2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.anim.values.AnimatableValue;

        return;
    }

    public void updateAttributeValue(java.lang.String, java.lang.String, org.apache.batik.anim.values.AnimatableValue)
    {
        org.apache.batik.dom.svg.LiveAttributeValue $r3;
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.AbstractSVGAnimatedValue $r5;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.anim.values.AnimatableValue r4;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: org.apache.batik.anim.values.AnimatableValue;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = (org.apache.batik.dom.svg.AbstractSVGAnimatedValue) $r3;

        virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void updateAnimatedValue(org.apache.batik.anim.values.AnimatableValue)>(r4);

        return;
    }

    public void updateOtherValue(java.lang.String, org.apache.batik.anim.values.AnimatableValue)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.anim.values.AnimatableValue r2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.anim.values.AnimatableValue;

        return;
    }

    public org.apache.batik.anim.values.AnimatableValue getUnderlyingValue(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.AnimatedLiveAttributeValue $r4;
        org.apache.batik.dom.svg.LiveAttributeValue $r3;
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMElement r0;
        org.apache.batik.anim.values.AnimatableValue $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = $r3 instanceof org.apache.batik.dom.svg.AnimatedLiveAttributeValue;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = (org.apache.batik.dom.svg.AnimatedLiveAttributeValue) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: org.apache.batik.anim.values.AnimatableValue getUnderlyingValue(org.apache.batik.dom.anim.AnimationTarget)>(r0);

        return $r5;
    }

    protected org.apache.batik.anim.values.AnimatableValue getBaseValue(org.w3c.dom.svg.SVGAnimatedInteger, org.w3c.dom.svg.SVGAnimatedInteger)
    {
        org.apache.batik.anim.values.AnimatableNumberOptionalNumberValue $r0;
        org.w3c.dom.svg.SVGAnimatedInteger r2, r3;
        int $i0, $i1;
        float $f0, $f1;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: org.w3c.dom.svg.SVGAnimatedInteger;

        r3 := @parameter1: org.w3c.dom.svg.SVGAnimatedInteger;

        $r0 = new org.apache.batik.anim.values.AnimatableNumberOptionalNumberValue;

        $i0 = interfaceinvoke r2.<org.w3c.dom.svg.SVGAnimatedInteger: int getBaseVal()>();

        $f0 = (float) $i0;

        $i1 = interfaceinvoke r3.<org.w3c.dom.svg.SVGAnimatedInteger: int getBaseVal()>();

        $f1 = (float) $i1;

        specialinvoke $r0.<org.apache.batik.anim.values.AnimatableNumberOptionalNumberValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,float,float)>(r1, $f0, $f1);

        return $r0;
    }

    protected org.apache.batik.anim.values.AnimatableValue getBaseValue(org.w3c.dom.svg.SVGAnimatedNumber, org.w3c.dom.svg.SVGAnimatedNumber)
    {
        org.w3c.dom.svg.SVGAnimatedNumber r2, r3;
        org.apache.batik.anim.values.AnimatableNumberOptionalNumberValue $r0;
        float $f0, $f1;
        org.apache.batik.dom.svg.SVGOMElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: org.w3c.dom.svg.SVGAnimatedNumber;

        r3 := @parameter1: org.w3c.dom.svg.SVGAnimatedNumber;

        $r0 = new org.apache.batik.anim.values.AnimatableNumberOptionalNumberValue;

        $f0 = interfaceinvoke r2.<org.w3c.dom.svg.SVGAnimatedNumber: float getBaseVal()>();

        $f1 = interfaceinvoke r3.<org.w3c.dom.svg.SVGAnimatedNumber: float getBaseVal()>();

        specialinvoke $r0.<org.apache.batik.anim.values.AnimatableNumberOptionalNumberValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,float,float)>(r1, $f0, $f1);

        return $r0;
    }

    public short getPercentageInterpretation(java.lang.String, java.lang.String, boolean)
    {
        org.apache.batik.util.DoublyIndexedTable $r2;
        short $s0;
        java.lang.Object $r4;
        java.lang.String r0, r3;
        org.apache.batik.dom.svg.SVGOMElement r1;
        boolean z0, $z1, $z2;
        org.apache.batik.dom.svg.TraitInformation r5;

        r1 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        if r3 != null goto label3;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("baseline-shift");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("font-size");

        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        if z0 != 0 goto label5;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable getTraitInformationTable()>();

        $r4 = virtualinvoke $r2.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r3, r0);

        r5 = (org.apache.batik.dom.svg.TraitInformation) $r4;

        if r5 == null goto label4;

        $s0 = virtualinvoke r5.<org.apache.batik.dom.svg.TraitInformation: short getPercentageInterpretation()>();

        return $s0;

     label4:
        return 3;

     label5:
        return 3;
    }

    protected final short getAttributePercentageInterpretation(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 3;
    }

    public boolean useLinearRGBColorInterpolation()
    {
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        return 0;
    }

    public float svgToUserSpace(float, short, short)
    {
        org.apache.batik.parser.UnitProcessor$Context $r1, $r2;
        org.apache.batik.dom.svg.SVGOMElement$UnitContext $r4;
        short s0, s1, $s3;
        int $i2, $i4, $i5;
        float f0, $f1;
        org.apache.batik.dom.svg.SVGOMElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        f0 := @parameter0: float;

        s1 := @parameter1: short;

        s0 := @parameter2: short;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.parser.UnitProcessor$Context unitContext>;

        if $r1 != null goto label1;

        $r4 = new org.apache.batik.dom.svg.SVGOMElement$UnitContext;

        specialinvoke $r4.<org.apache.batik.dom.svg.SVGOMElement$UnitContext: void <init>(org.apache.batik.dom.svg.SVGOMElement)>(r0);

        r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.parser.UnitProcessor$Context unitContext> = $r4;

     label1:
        if s0 != 0 goto label2;

        $i4 = (int) s1;

        if $i4 != 2 goto label2;

        return 0.0F;

     label2:
        $i5 = (int) s0;

        $i2 = 3 - $i5;

        $s3 = (short) $i2;

        $r2 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.parser.UnitProcessor$Context unitContext>;

        $f1 = staticinvoke <org.apache.batik.parser.UnitProcessor: float svgToUserSpace(float,short,short,org.apache.batik.parser.UnitProcessor$Context)>(f0, s1, $s3, $r2);

        return $f1;
    }

    public void addTargetListener(java.lang.String, java.lang.String, boolean, org.apache.batik.dom.anim.AnimationTargetListener)
    {
        org.apache.batik.dom.anim.AnimationTargetListener r6;
        org.apache.batik.util.DoublyIndexedTable $r1, $r4, $r8, $r9;
        java.lang.Object $r5;
        java.lang.String r2, r3;
        java.util.LinkedList $r7, $r10, r11;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r6 := @parameter3: org.apache.batik.dom.anim.AnimationTargetListener;

        if z0 != 0 goto label3;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners>;

        if $r1 != null goto label1;

        $r9 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r9.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners> = $r9;

     label1:
        $r4 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners>;

        $r5 = virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r2, r3);

        $r10 = (java.util.LinkedList) $r5;

        r11 = $r10;

        if $r10 != null goto label2;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r11 = $r7;

        $r8 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners>;

        virtualinvoke $r8.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, $r7);

     label2:
        virtualinvoke r11.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

     label3:
        return;
    }

    public void removeTargetListener(java.lang.String, java.lang.String, boolean, org.apache.batik.dom.anim.AnimationTargetListener)
    {
        org.apache.batik.dom.anim.AnimationTargetListener r6;
        org.apache.batik.util.DoublyIndexedTable $r3;
        java.lang.Object $r4;
        java.lang.String r1, r2;
        java.util.LinkedList r5;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r6 := @parameter3: org.apache.batik.dom.anim.AnimationTargetListener;

        if z0 != 0 goto label1;

        $r3 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r2);

        r5 = (java.util.LinkedList) $r4;

        virtualinvoke r5.<java.util.LinkedList: boolean remove(java.lang.Object)>(r6);

     label1:
        return;
    }

    void fireBaseAttributeListeners(java.lang.String, java.lang.String)
    {
        java.util.Iterator $r7;
        org.apache.batik.dom.anim.AnimationTargetListener r9;
        org.apache.batik.util.DoublyIndexedTable $r1, $r4;
        java.lang.Object $r5, $r8;
        java.lang.String r2, r3;
        java.util.LinkedList r6;
        org.apache.batik.dom.svg.SVGOMElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable targetListeners>;

        $r5 = virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r2, r3);

        r6 = (java.util.LinkedList) $r5;

        $r7 = virtualinvoke r6.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.batik.dom.anim.AnimationTargetListener) $r8;

        interfaceinvoke r9.<org.apache.batik.dom.anim.AnimationTargetListener: void baseValueChanged(org.apache.batik.dom.anim.AnimationTarget,java.lang.String,java.lang.String,boolean)>(r0, r2, r3, 0);

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;
        org.apache.batik.dom.svg.SVGOMElement r0, r3;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        $r4 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        r3.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix> = $r4;

        virtualinvoke r3.<org.apache.batik.dom.svg.SVGOMElement: void initializeAllLiveAttributes()>();

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;
        org.apache.batik.dom.svg.SVGOMElement r0, r3;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        $r4 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        r3.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix> = $r4;

        virtualinvoke r3.<org.apache.batik.dom.svg.SVGOMElement: void initializeAllLiveAttributes()>();

        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        java.lang.String $r3;
        org.apache.batik.dom.svg.SVGOMElement r0, r2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        $r3 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        r2.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix> = $r3;

        virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMElement: void initializeAllLiveAttributes()>();

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        java.lang.String $r3;
        org.apache.batik.dom.svg.SVGOMElement r0, r2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMElement;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        $r3 = r0.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix>;

        r2.<org.apache.batik.dom.svg.SVGOMElement: java.lang.String prefix> = $r3;

        virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMElement: void initializeAllLiveAttributes()>();

        return r1;
    }

    static void <clinit>()
    {
        org.apache.batik.util.DoublyIndexedTable $r0;
        org.apache.batik.dom.svg.TraitInformation $r1, $r2, $r3, $r4, $r5;

        $r0 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        $r1 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r1.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(0, 16);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "id", $r1);

        $r2 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r2.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(0, 10);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>("http://www.w3.org/XML/1998/namespace", "base", $r2);

        $r3 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r3.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(0, 15);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>("http://www.w3.org/XML/1998/namespace", "space", $r3);

        $r4 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r4.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(0, 16);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>("http://www.w3.org/XML/1998/namespace", "id", $r4);

        $r5 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r5.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(0, 45);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>("http://www.w3.org/XML/1998/namespace", "lang", $r5);

        <org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation> = $r0;

        return;
    }
}
