public class org.springframework.web.context.support.ServletContextResourcePatternResolver extends org.springframework.core.io.support.PathMatchingResourcePatternResolver
{
    private static final org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/web/context/support/ServletContextResourcePatternResolver;");

        <org.springframework.web.context.support.ServletContextResourcePatternResolver: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(javax.servlet.ServletContext)
    {
        javax.servlet.ServletContext r2;
        org.springframework.web.context.support.ServletContextResourcePatternResolver r0;
        org.springframework.web.context.support.ServletContextResourceLoader $r1;

        r0 := @this: org.springframework.web.context.support.ServletContextResourcePatternResolver;

        r2 := @parameter0: javax.servlet.ServletContext;

        $r1 = new org.springframework.web.context.support.ServletContextResourceLoader;

        specialinvoke $r1.<org.springframework.web.context.support.ServletContextResourceLoader: void <init>(javax.servlet.ServletContext)>(r2);

        specialinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>(org.springframework.core.io.ResourceLoader)>($r1);

        return;
    }

    public void <init>(org.springframework.core.io.ResourceLoader)
    {
        org.springframework.core.io.ResourceLoader r1;
        org.springframework.web.context.support.ServletContextResourcePatternResolver r0;

        r0 := @this: org.springframework.web.context.support.ServletContextResourcePatternResolver;

        r1 := @parameter0: org.springframework.core.io.ResourceLoader;

        specialinvoke r0.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>(org.springframework.core.io.ResourceLoader)>(r1);

        return;
    }

    protected java.util.Set doFindPathMatchingFileResources(org.springframework.core.io.Resource, java.lang.String) throws java.io.IOException
    {
        org.springframework.web.context.support.ServletContextResourcePatternResolver r1;
        java.util.Set $r3;
        org.springframework.web.context.support.ServletContextResource r4;
        javax.servlet.ServletContext $r5;
        java.lang.StringBuilder $r6, $r9;
        java.lang.String r2, $r7, $r8, $r10, $r12;
        java.util.LinkedHashSet $r11;
        org.springframework.core.io.Resource r0;
        boolean $z0;

        r1 := @this: org.springframework.web.context.support.ServletContextResourcePatternResolver;

        r0 := @parameter0: org.springframework.core.io.Resource;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof org.springframework.web.context.support.ServletContextResource;

        if $z0 == 0 goto label1;

        r4 = (org.springframework.web.context.support.ServletContextResource) r0;

        $r5 = virtualinvoke r4.<org.springframework.web.context.support.ServletContextResource: javax.servlet.ServletContext getServletContext()>();

        $r6 = new java.lang.StringBuilder;

        $r7 = virtualinvoke r4.<org.springframework.web.context.support.ServletContextResource: java.lang.String getPath()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.util.LinkedHashSet;

        specialinvoke $r11.<java.util.LinkedHashSet: void <init>(int)>(8);

        $r12 = virtualinvoke r4.<org.springframework.web.context.support.ServletContextResource: java.lang.String getPath()>();

        virtualinvoke r1.<org.springframework.web.context.support.ServletContextResourcePatternResolver: void doRetrieveMatchingServletContextResources(javax.servlet.ServletContext,java.lang.String,java.lang.String,java.util.Set)>($r5, $r10, $r12, $r11);

        return $r11;

     label1:
        $r3 = specialinvoke r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindPathMatchingFileResources(org.springframework.core.io.Resource,java.lang.String)>(r0, r2);

        return $r3;
    }

    protected void doRetrieveMatchingServletContextResources(javax.servlet.ServletContext, java.lang.String, java.lang.String, java.util.Set) throws java.io.IOException
    {
        org.springframework.web.context.support.ServletContextResource $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r2, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String r1, r3, $r9, $r10, $r11, r12, r13, r15;
        java.util.Iterator $r14;
        org.springframework.util.PathMatcher $r8, $r16;
        org.springframework.web.context.support.ServletContextResourcePatternResolver r5;
        javax.servlet.ServletContext r0;
        java.lang.Object $r4;

        r5 := @this: org.springframework.web.context.support.ServletContextResourcePatternResolver;

        r0 := @parameter0: javax.servlet.ServletContext;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.util.Set;

        $r2 = interfaceinvoke r0.<javax.servlet.ServletContext: java.util.Set getResourcePaths(java.lang.String)>(r1);

        if $r2 == null goto label8;

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("**");

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>("!/");

        r12 = null;

        r13 = null;

        if $i0 <= 0 goto label1;

        $r10 = "!/";

        $i4 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i5 = $i0 + $i4;

        $i6 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i5 >= $i6 goto label1;

        r12 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r11 = "!/";

        $i7 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i8 = $i0 + $i7;

        r13 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i8);

     label1:
        $r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label2:
        $r4 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r4;

        $z1 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z1 != 0 goto label3;

        $i3 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i10 = (int) -1;

        if $i3 == $i10 goto label3;

        r15 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i3);

     label3:
        $z3 = virtualinvoke r15.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z3 == 0 goto label5;

        if $z0 != 0 goto label4;

        $i1 = staticinvoke <org.springframework.util.StringUtils: int countOccurrencesOf(java.lang.String,java.lang.String)>(r15, "/");

        $i2 = staticinvoke <org.springframework.util.StringUtils: int countOccurrencesOf(java.lang.String,java.lang.String)>(r3, "/");

        if $i1 > $i2 goto label5;

     label4:
        virtualinvoke r5.<org.springframework.web.context.support.ServletContextResourcePatternResolver: void doRetrieveMatchingServletContextResources(javax.servlet.ServletContext,java.lang.String,java.lang.String,java.util.Set)>(r0, r3, r15, r6);

     label5:
        if r12 == null goto label6;

        $r8 = virtualinvoke r5.<org.springframework.web.context.support.ServletContextResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $z2 = interfaceinvoke $r8.<org.springframework.util.PathMatcher: boolean match(java.lang.String,java.lang.String)>(r12, r15);

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getRealPath(java.lang.String)>(r15);

        if $r9 == null goto label6;

        specialinvoke r5.<org.springframework.web.context.support.ServletContextResourcePatternResolver: void doRetrieveMatchingJarEntries(java.lang.String,java.lang.String,java.util.Set)>($r9, r13, r6);

     label6:
        $r16 = virtualinvoke r5.<org.springframework.web.context.support.ServletContextResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $z4 = interfaceinvoke $r16.<org.springframework.util.PathMatcher: boolean match(java.lang.String,java.lang.String)>(r3, r15);

        if $z4 == 0 goto label7;

        $r17 = new org.springframework.web.context.support.ServletContextResource;

        specialinvoke $r17.<org.springframework.web.context.support.ServletContextResource: void <init>(javax.servlet.ServletContext,java.lang.String)>(r0, r15);

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r17);

     label7:
        $z5 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label2;

     label8:
        return;
    }

    private void doRetrieveMatchingJarEntries(java.lang.String, java.lang.String, java.util.Set)
    {
        java.util.Enumeration $r3;
        java.util.jar.JarFile $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r26, $r28, $r29;
        org.springframework.core.io.UrlResource $r11;
        java.util.jar.JarEntry r5;
        java.lang.String r2, $r6, r9, $r16, $r23, $r30;
        org.springframework.util.PathMatcher $r8;
        org.springframework.web.context.support.ServletContextResourcePatternResolver r7;
        java.io.IOException $r24;
        org.apache.commons.logging.Log $r0, $r18, $r25, $r27;
        java.lang.Object $r4;

        r7 := @this: org.springframework.web.context.support.ServletContextResourcePatternResolver;

        r2 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.util.Set;

        $r0 = <org.springframework.web.context.support.ServletContextResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r18 = <org.springframework.web.context.support.ServletContextResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Searching jar file [");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for entries matching [");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r23);

     label1:
        $r1 = new java.util.jar.JarFile;

        specialinvoke $r1.<java.util.jar.JarFile: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke $r1.<java.util.jar.JarFile: java.util.Enumeration entries()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.util.jar.JarEntry) $r4;

        $r6 = virtualinvoke r5.<java.util.jar.JarEntry: java.lang.String getName()>();

        $r8 = virtualinvoke r7.<org.springframework.web.context.support.ServletContextResourcePatternResolver: org.springframework.util.PathMatcher getPathMatcher()>();

        $z1 = interfaceinvoke $r8.<org.springframework.util.PathMatcher: boolean match(java.lang.String,java.lang.String)>(r9, $r6);

        if $z1 == 0 goto label3;

        $r11 = new org.springframework.core.io.UrlResource;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("jar:file:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.springframework.core.io.UrlResource: void <init>(java.lang.String)>($r16);

        interfaceinvoke r10.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label3:
        $z3 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 != 0 goto label2;

     label4:
        goto label6;

     label5:
        $r24 := @caughtexception;

        $r25 = <org.springframework.web.context.support.ServletContextResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r25.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label6;

        $r27 = <org.springframework.web.context.support.ServletContextResourcePatternResolver: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot search for matching resources in jar file [");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] because the jar cannot be opened through the file system");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r30, $r24);

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
