public final class org.codehaus.jackson.map.type.ArrayType extends org.codehaus.jackson.map.type.TypeBase
{
    protected final org.codehaus.jackson.type.JavaType _componentType;
    protected final java.lang.Object _emptyArray;

    private void <init>(org.codehaus.jackson.type.JavaType, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.codehaus.jackson.type.JavaType r3;
        java.lang.Object r1, r4, r5;
        java.lang.Class $r2;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke r3.<org.codehaus.jackson.type.JavaType: int hashCode()>();

        specialinvoke r0.<org.codehaus.jackson.map.type.TypeBase: void <init>(java.lang.Class,int,java.lang.Object,java.lang.Object)>($r2, $i0, r4, r5);

        r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType> = r3;

        r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray> = r1;

        return;
    }

    public static org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.type.ArrayType $r1;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>(r0, null, null);

        return $r1;
    }

    public static org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType, java.lang.Object, java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1;
        java.lang.Object $r2, r4, r5;
        org.codehaus.jackson.map.type.ArrayType $r3;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, 0);

        $r3 = new org.codehaus.jackson.map.type.ArrayType;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r2, null, null);

        return $r3;
    }

    public org.codehaus.jackson.map.type.ArrayType withTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r6;
        java.lang.Object r0, $r2, $r4, $r5;
        org.codehaus.jackson.map.type.ArrayType r1, $r3;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        if r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.codehaus.jackson.map.type.ArrayType;

        $r6 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r5 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray>;

        $r4 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r5, $r4, r0);

        return $r3;
    }

    public org.codehaus.jackson.map.type.ArrayType withContentTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r2, $r5, $r6;
        java.lang.Object r0, $r3, $r7, $r8, $r9;
        org.codehaus.jackson.map.type.ArrayType r1, $r4;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = new org.codehaus.jackson.map.type.ArrayType;

        $r5 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>(r0);

        $r9 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray>;

        $r8 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        $r7 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r9, $r8, $r7);

        return $r4;
    }

    public org.codehaus.jackson.map.type.ArrayType withValueHandler(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r6;
        java.lang.Object r0, $r2, $r4, $r5;
        org.codehaus.jackson.map.type.ArrayType r1, $r3;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        if r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.codehaus.jackson.map.type.ArrayType;

        $r6 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r5 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray>;

        $r4 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r5, r0, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.type.ArrayType withContentValueHandler(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r2, $r5, $r6;
        java.lang.Object r0, $r3, $r7, $r8, $r9;
        org.codehaus.jackson.map.type.ArrayType r1, $r4;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = new org.codehaus.jackson.map.type.ArrayType;

        $r5 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)>(r0);

        $r9 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray>;

        $r8 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        $r7 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r9, $r8, $r7);

        return $r4;
    }

    protected java.lang.String buildCanonicalName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 = r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.Class _class>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    protected org.codehaus.jackson.type.JavaType _narrow(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.String $r11, $r14, $r16;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.Class r0, $r1;
        java.lang.Object $r5, $r6;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15;
        org.codehaus.jackson.map.type.ArrayType r4, $r7;

        r4 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible narrowing operation: trying to narrow ");

        $r11 = virtualinvoke r4.<org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to class ");

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r1);

        $r6 = r4.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        $r5 = r4.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        $r7 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r3, $r6, $r5);

        return $r7;
    }

    public org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.type.JavaType $r2, $r4, $r5;
        java.lang.Class r0, $r3;
        java.lang.Object $r6, $r7;
        org.codehaus.jackson.map.type.ArrayType r1, $r8;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>(r0);

        $r7 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        $r6 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        $r8 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r5, $r7, $r6);

        return $r8;
    }

    public org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.type.JavaType $r2, $r4, $r5;
        java.lang.Class r0, $r3;
        java.lang.Object $r6, $r7;
        org.codehaus.jackson.map.type.ArrayType r1, $r8;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>(r0);

        $r7 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _valueHandler>;

        $r6 = r1.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _typeHandler>;

        $r8 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r5, $r7, $r6);

        return $r8;
    }

    public boolean isArrayType()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public boolean isAbstract()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 0;
    }

    public boolean isConcrete()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public boolean hasGenericTypes()
    {
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.type.ArrayType r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        return $z0;
    }

    public java.lang.String containedTypeName(int)
    {
        int i0;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return "E";

     label1:
        return null;
    }

    public boolean isContainerType()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public org.codehaus.jackson.type.JavaType getContentType()
    {
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        return $r1;
    }

    public int containedTypeCount()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public org.codehaus.jackson.type.JavaType containedType(int)
    {
        int i0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.StringBuilder r0, $r3;
        org.codehaus.jackson.map.type.ArrayType r1;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>(r0);

        return $r3;
    }

    public java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.StringBuilder r0, $r3;
        org.codehaus.jackson.map.type.ArrayType r1;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>(r0);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r6;
        org.codehaus.jackson.map.type.ArrayType r2;

        r2 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[array type, component type: ");

        $r3 = r2.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r5, $r6;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.map.type.ArrayType r1, r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.type.ArrayType;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.codehaus.jackson.map.type.ArrayType) r0;

        $r6 = r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r5 = r4.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.ArrayType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType withContentValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.ArrayType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType withValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.ArrayType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType withContentTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.ArrayType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType withTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }
}
