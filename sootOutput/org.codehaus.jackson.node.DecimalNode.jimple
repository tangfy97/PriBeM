public final class org.codehaus.jackson.node.DecimalNode extends org.codehaus.jackson.node.NumericNode
{
    protected final java.math.BigDecimal _value;

    public void <init>(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        r1 := @parameter0: java.math.BigDecimal;

        specialinvoke r0.<org.codehaus.jackson.node.NumericNode: void <init>()>();

        r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value> = r1;

        return;
    }

    public static org.codehaus.jackson.node.DecimalNode valueOf(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        org.codehaus.jackson.node.DecimalNode $r0;

        r1 := @parameter0: java.math.BigDecimal;

        $r0 = new org.codehaus.jackson.node.DecimalNode;

        specialinvoke $r0.<org.codehaus.jackson.node.DecimalNode: void <init>(java.math.BigDecimal)>(r1);

        return $r0;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.JsonToken $r0;
        org.codehaus.jackson.node.DecimalNode r1;

        r1 := @this: org.codehaus.jackson.node.DecimalNode;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        return $r0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType()
    {
        org.codehaus.jackson.JsonParser$NumberType $r0;
        org.codehaus.jackson.node.DecimalNode r1;

        r1 := @this: org.codehaus.jackson.node.DecimalNode;

        $r0 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_DECIMAL>;

        return $r0;
    }

    public boolean isFloatingPointNumber()
    {
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        return 1;
    }

    public boolean isBigDecimal()
    {
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        return 1;
    }

    public java.lang.Number getNumberValue()
    {
        java.math.BigDecimal $r1;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        return $r1;
    }

    public int getIntValue()
    {
        int $i0;
        java.math.BigDecimal $r1;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $i0 = virtualinvoke $r1.<java.math.BigDecimal: int intValue()>();

        return $i0;
    }

    public long getLongValue()
    {
        java.math.BigDecimal $r1;
        long $l0;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $l0 = virtualinvoke $r1.<java.math.BigDecimal: long longValue()>();

        return $l0;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        java.math.BigDecimal $r1;
        java.math.BigInteger $r2;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r2;
    }

    public double getDoubleValue()
    {
        java.math.BigDecimal $r1;
        org.codehaus.jackson.node.DecimalNode r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $d0 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

        return $d0;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        java.math.BigDecimal $r1;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        return $r1;
    }

    public java.lang.String asText()
    {
        java.math.BigDecimal $r1;
        java.lang.String $r2;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.lang.String toString()>();

        return $r2;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.math.BigDecimal $r2;
        org.codehaus.jackson.JsonGenerator r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.node.DecimalNode r1;

        r1 := @this: org.codehaus.jackson.node.DecimalNode;

        r0 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r2 = r1.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.math.BigDecimal $r5, $r6;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.node.DecimalNode r1, $r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.DecimalNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        $r4 = (org.codehaus.jackson.node.DecimalNode) r0;

        $r6 = $r4.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $r5 = r1.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $z0 = virtualinvoke $r6.<java.math.BigDecimal: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        java.math.BigDecimal $r1;
        org.codehaus.jackson.node.DecimalNode r0;

        r0 := @this: org.codehaus.jackson.node.DecimalNode;

        $r1 = r0.<org.codehaus.jackson.node.DecimalNode: java.math.BigDecimal _value>;

        $i0 = virtualinvoke $r1.<java.math.BigDecimal: int hashCode()>();

        return $i0;
    }
}
