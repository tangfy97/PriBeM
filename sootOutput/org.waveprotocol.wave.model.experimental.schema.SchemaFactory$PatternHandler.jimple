abstract class org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler extends org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementCollectionHandler
{
    private static final java.lang.String PROLOGUE_TYPE_NAME;
    private static final java.lang.String ATTRIBUTE_TYPE_NAME;
    private static final java.lang.String ELEMENT_TYPE_NAME;
    private static final java.lang.String TEXT_TYPE_NAME;
    private static final java.lang.String REFERENCE_TYPE_NAME;
    private static final java.lang.String REQUIRED_ATTRIBUTE_NAME;
    private static final java.lang.String VALUES_ATTRIBUTE_NAME;
    private static final java.lang.String TRUE_ATTRIBUTE_VALUE;
    private static final java.lang.String FALSE_ATTRIBUTE_VALUE;
    private static final java.lang.String TYPE_ATTRIBUTE_NAME;
    private static final java.lang.String CHARACTERS_ATTRIBUTE_NAME;
    private static final java.lang.String BLACKLIST_ATTRIBUTE_VALUE;
    private static final java.lang.String WHITELIST_ATTRIBUTE_VALUE;
    private final org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern;
    private final java.util.List prologueFragments;
    private final java.util.Map freeElements;
    private final java.util.Set references;
    private final org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern;

    private void <init>()
    {
        java.util.TreeMap $r3;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r0;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder $r5;
        java.util.TreeSet $r4;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementCollectionHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

        $r1 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.List prologueFragments> = $r2;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Map freeElements> = $r3;

        $r4 = new java.util.TreeSet;

        specialinvoke $r4.<java.util.TreeSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Set references> = $r4;

        $r5 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern> = $r5;

        return;
    }

    final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler pushHandler(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler $r8, $r9, $r18;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler $r19;
        java.util.Map $r11;
        java.lang.String r0, $r5, $r10, $r17;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1, $r13;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementHandler $r12;
        org.waveprotocol.wave.model.document.operation.Attributes r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r14, $r15, $r16;

        r6 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r0 := @parameter0: java.lang.String;

        r7 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("prologue");

        if $z0 == 0 goto label1;

        $r19 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler;

        specialinvoke $r19.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PrologueHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler)>(r6);

        return $r19;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("attribute");

        if $z1 == 0 goto label2;

        virtualinvoke r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: void handleAttribute(org.waveprotocol.wave.model.document.operation.Attributes)>(r7);

        $r18 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        specialinvoke $r18.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler)>(r6);

        return $r18;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("element");

        if $z2 == 0 goto label4;

        $r10 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String access$100(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("element", r7);

        $r11 = r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Map freeElements>;

        $z5 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

        if $z5 == 0 goto label3;

        $r13 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element pattern defined more than once: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label3:
        $r12 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementHandler;

        specialinvoke $r12.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementHandler: void <init>(java.lang.String,org.waveprotocol.wave.model.experimental.schema.SchemaFactory$ElementCollectionHandler)>($r10, r6);

        return $r12;

     label4:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z3 == 0 goto label5;

        virtualinvoke r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: void handleText(org.waveprotocol.wave.model.document.operation.Attributes)>(r7);

        $r9 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        specialinvoke $r9.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler)>(r6);

        return $r9;

     label5:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("reference");

        if $z4 == 0 goto label6;

        virtualinvoke r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: void handleReference(org.waveprotocol.wave.model.document.operation.Attributes)>(r7);

        $r8 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        specialinvoke $r8.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler)>(r6);

        return $r8;

     label6:
        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized element type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    final void registerElement(java.lang.String, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment)
    {
        java.util.Map $r3;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r2;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Map freeElements>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    final void registerPrologue(java.util.List)
    {
        java.util.List r2, $r3;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r0;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DirectPrologueFragment $r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r2 := @parameter0: java.util.List;

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.List prologueFragments>;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DirectPrologueFragment;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DirectPrologueFragment: void <init>(java.util.List)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    final org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment extractPattern()
    {
        java.util.List $r5;
        java.util.Map $r4;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder $r6;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment $r0;
        java.util.Set $r3;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r1;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder $r2;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        $r6 = r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        $r5 = r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.List prologueFragments>;

        $r4 = r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Map freeElements>;

        $r3 = r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Set references>;

        $r2 = r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: void <init>(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder,java.util.List,java.util.Map,java.util.Set,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder)>($r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

    final void handleAttribute(org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder $r8, $r14;
        int $i0;
        java.lang.String r2, r4, r6, $r13;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r7;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r9, $r15, $r16, $r17, $r18;
        org.waveprotocol.wave.model.document.operation.Attributes r0;
        java.lang.Object $r1, $r3, $r5;
        java.lang.StringBuilder $r10, $r11, $r12;

        r7 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>("name");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>("values");

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>("required");

        r6 = (java.lang.String) $r5;

        if r2 != null goto label1;

        $r18 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r18.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Missing attribute: name");

        throw $r18;

     label1:
        if r4 != null goto label2;

        $r17 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r17.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Missing attribute: values");

        throw $r17;

     label2:
        if r6 != null goto label3;

        $r16 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r16.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Missing attribute: required");

        throw $r16;

     label3:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: int size()>();

        if $i0 == 3 goto label4;

        $r15 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r15.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Encountered more attributes than the expected three");

        throw $r15;

     label4:
        staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: void access$300(java.lang.String)>(r2);

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label5;

        $r14 = r7.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        virtualinvoke $r14.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: void addRequired(java.lang.String)>(r2);

        goto label6;

     label5:
        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 != 0 goto label6;

        $r9 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for attribute required: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label6:
        staticinvoke <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: void checkRegularExpression(java.lang.String)>(r4);

        $r8 = r7.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        virtualinvoke $r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: void addValuePattern(java.lang.String,java.lang.String)>(r2, r4);

        return;
    }

    final void handleText(org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        int $i0;
        java.lang.String r2, r4, $r9;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r10;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder $r11, $r13;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r5, $r15, $r16, $r17;
        org.waveprotocol.wave.model.document.operation.Attributes r0;
        java.util.List $r12, $r14;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r6, $r7, $r8;

        r10 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>("type");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>("characters");

        r4 = (java.lang.String) $r3;

        if r2 != null goto label1;

        $r17 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r17.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Missing attribute: type");

        throw $r17;

     label1:
        if r4 != null goto label2;

        $r16 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r16.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Missing attribute: characters");

        throw $r16;

     label2:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: int size()>();

        if $i0 == 2 goto label3;

        $r15 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r15.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Encountered more attributes than the expected two");

        throw $r15;

     label3:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("blacklist");

        if $z0 == 0 goto label4;

        $r13 = r10.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        $r14 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.util.List access$400(java.lang.String)>(r4);

        virtualinvoke $r13.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: void blacklistCharacters(java.util.Collection)>($r14);

        goto label6;

     label4:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("whitelist");

        if $z1 == 0 goto label5;

        $r11 = r10.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.util.List access$400(java.lang.String)>(r4);

        virtualinvoke $r11.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: void whitelistCharacters(java.util.Collection)>($r12);

        goto label6;

     label5:
        $r5 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for attribute type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label6:
        return;
    }

    final void handleReference(org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        java.util.List $r4;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferencePrologueFragment $r3;
        java.util.Set $r5;
        java.lang.String $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r2;
        org.waveprotocol.wave.model.document.operation.Attributes r0;

        r2 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String access$100(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("reference", r0);

        $r4 = r2.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.List prologueFragments>;

        $r3 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferencePrologueFragment;

        specialinvoke $r3.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferencePrologueFragment: void <init>(java.lang.String)>($r1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r5 = r2.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.util.Set references>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }

    void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1 r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String WHITELIST_ATTRIBUTE_VALUE> = "whitelist";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String BLACKLIST_ATTRIBUTE_VALUE> = "blacklist";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String CHARACTERS_ATTRIBUTE_NAME> = "characters";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String TYPE_ATTRIBUTE_NAME> = "type";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String FALSE_ATTRIBUTE_VALUE> = "false";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String TRUE_ATTRIBUTE_VALUE> = "true";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String VALUES_ATTRIBUTE_NAME> = "values";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String REQUIRED_ATTRIBUTE_NAME> = "required";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String REFERENCE_TYPE_NAME> = "reference";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String TEXT_TYPE_NAME> = "text";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String ELEMENT_TYPE_NAME> = "element";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String ATTRIBUTE_TYPE_NAME> = "attribute";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$PatternHandler: java.lang.String PROLOGUE_TYPE_NAME> = "prologue";

        return;
    }
}
