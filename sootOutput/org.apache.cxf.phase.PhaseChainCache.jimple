public final class org.apache.cxf.phase.PhaseChainCache extends java.lang.Object
{
    java.util.concurrent.atomic.AtomicReference lastData;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicReference $r1;
        org.apache.cxf.phase.PhaseChainCache r0;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.cxf.phase.PhaseChainCache: java.util.concurrent.atomic.AtomicReference lastData> = $r1;

        return;
    }

    public org.apache.cxf.phase.PhaseInterceptorChain get(java.util.SortedSet, java.util.List)
    {
        java.util.List r3;
        java.util.SortedSet r1;
        java.util.List[] $r2;
        org.apache.cxf.phase.PhaseChainCache r0;
        org.apache.cxf.phase.PhaseInterceptorChain $r4;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        r1 := @parameter0: java.util.SortedSet;

        r3 := @parameter1: java.util.List;

        $r2 = newarray (java.util.List)[1];

        $r2[0] = r3;

        $r4 = specialinvoke r0.<org.apache.cxf.phase.PhaseChainCache: org.apache.cxf.phase.PhaseInterceptorChain getChain(java.util.SortedSet,java.util.List[])>(r1, $r2);

        return $r4;
    }

    public org.apache.cxf.phase.PhaseInterceptorChain get(java.util.SortedSet, java.util.List, java.util.List)
    {
        java.util.List r3, r4;
        java.util.SortedSet r1;
        java.util.List[] $r2;
        org.apache.cxf.phase.PhaseChainCache r0;
        org.apache.cxf.phase.PhaseInterceptorChain $r5;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        r1 := @parameter0: java.util.SortedSet;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.util.List;

        $r2 = newarray (java.util.List)[2];

        $r2[0] = r3;

        $r2[1] = r4;

        $r5 = specialinvoke r0.<org.apache.cxf.phase.PhaseChainCache: org.apache.cxf.phase.PhaseInterceptorChain getChain(java.util.SortedSet,java.util.List[])>(r1, $r2);

        return $r5;
    }

    public org.apache.cxf.phase.PhaseInterceptorChain get(java.util.SortedSet, java.util.List, java.util.List, java.util.List)
    {
        java.util.List r3, r4, r5;
        java.util.SortedSet r1;
        java.util.List[] $r2;
        org.apache.cxf.phase.PhaseChainCache r0;
        org.apache.cxf.phase.PhaseInterceptorChain $r6;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        r1 := @parameter0: java.util.SortedSet;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.List;

        $r2 = newarray (java.util.List)[3];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        $r6 = specialinvoke r0.<org.apache.cxf.phase.PhaseChainCache: org.apache.cxf.phase.PhaseInterceptorChain getChain(java.util.SortedSet,java.util.List[])>(r1, $r2);

        return $r6;
    }

    public org.apache.cxf.phase.PhaseInterceptorChain get(java.util.SortedSet, java.util.List, java.util.List, java.util.List, java.util.List)
    {
        java.util.SortedSet r1;
        java.util.List[] $r2;
        java.util.List r3, r4, r5, r6;
        org.apache.cxf.phase.PhaseChainCache r0;
        org.apache.cxf.phase.PhaseInterceptorChain $r7;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        r1 := @parameter0: java.util.SortedSet;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.List;

        r6 := @parameter4: java.util.List;

        $r2 = newarray (java.util.List)[4];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        $r2[3] = r6;

        $r7 = specialinvoke r0.<org.apache.cxf.phase.PhaseChainCache: org.apache.cxf.phase.PhaseInterceptorChain getChain(java.util.SortedSet,java.util.List[])>(r1, $r2);

        return $r7;
    }

    public org.apache.cxf.phase.PhaseInterceptorChain get(java.util.SortedSet, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List)
    {
        java.util.SortedSet r1;
        java.util.List[] $r2;
        java.util.List r3, r4, r5, r6, r7;
        org.apache.cxf.phase.PhaseChainCache r0;
        org.apache.cxf.phase.PhaseInterceptorChain $r8;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        r1 := @parameter0: java.util.SortedSet;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.List;

        r6 := @parameter4: java.util.List;

        r7 := @parameter5: java.util.List;

        $r2 = newarray (java.util.List)[5];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        $r2[3] = r6;

        $r2[4] = r7;

        $r8 = specialinvoke r0.<org.apache.cxf.phase.PhaseChainCache: org.apache.cxf.phase.PhaseInterceptorChain getChain(java.util.SortedSet,java.util.List[])>(r1, $r2);

        return $r8;
    }

    private transient org.apache.cxf.phase.PhaseInterceptorChain getChain(java.util.SortedSet, java.util.List[])
    {
        java.util.SortedSet r4;
        java.util.List[] r6;
        java.util.concurrent.atomic.AtomicReference $r1, $r8;
        java.util.ArrayList $r5;
        org.apache.cxf.phase.PhaseChainCache r0;
        int $i0, $i1, i2;
        org.apache.cxf.common.util.ModCountCopyOnWriteArrayList $r12;
        boolean $z0;
        org.apache.cxf.phase.PhaseChainCache$ChainHolder $r7, r13;
        java.util.List r11;
        org.apache.cxf.phase.PhaseInterceptorChain $r3, $r9, $r10;
        java.lang.Object $r2;

        r0 := @this: org.apache.cxf.phase.PhaseChainCache;

        r4 := @parameter0: java.util.SortedSet;

        r6 := @parameter1: java.util.List[];

        $r1 = r0.<org.apache.cxf.phase.PhaseChainCache: java.util.concurrent.atomic.AtomicReference lastData>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r13 = (org.apache.cxf.phase.PhaseChainCache$ChainHolder) $r2;

        if r13 == null goto label1;

        $z0 = virtualinvoke r13.<org.apache.cxf.phase.PhaseChainCache$ChainHolder: boolean matches(java.util.List[])>(r6);

        if $z0 != 0 goto label4;

     label1:
        $r3 = new org.apache.cxf.phase.PhaseInterceptorChain;

        specialinvoke $r3.<org.apache.cxf.phase.PhaseInterceptorChain: void <init>(java.util.SortedSet)>(r4);

        $r5 = new java.util.ArrayList;

        $i0 = lengthof r6;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = lengthof r6;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label3;

        r11 = r6[i2];

        $r12 = new org.apache.cxf.common.util.ModCountCopyOnWriteArrayList;

        specialinvoke $r12.<org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: void <init>(java.util.Collection)>(r11);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        virtualinvoke $r3.<org.apache.cxf.phase.PhaseInterceptorChain: void add(java.util.Collection)>(r11);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r7 = new org.apache.cxf.phase.PhaseChainCache$ChainHolder;

        specialinvoke $r7.<org.apache.cxf.phase.PhaseChainCache$ChainHolder: void <init>(org.apache.cxf.phase.PhaseInterceptorChain,java.util.List)>($r3, $r5);

        r13 = $r7;

        $r8 = r0.<org.apache.cxf.phase.PhaseChainCache: java.util.concurrent.atomic.AtomicReference lastData>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r7);

     label4:
        $r9 = r13.<org.apache.cxf.phase.PhaseChainCache$ChainHolder: org.apache.cxf.phase.PhaseInterceptorChain chain>;

        $r10 = virtualinvoke $r9.<org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.phase.PhaseInterceptorChain cloneChain()>();

        return $r10;
    }
}
