public class org.springframework.web.client.HttpMessageConverterExtractor extends java.lang.Object implements org.springframework.web.client.ResponseExtractor
{
    private final java.lang.Class responseType;
    private final java.util.List messageConverters;
    private final org.apache.commons.logging.Log logger;

    public void <init>(java.lang.Class, java.util.List)
    {
        java.util.List r2;
        org.springframework.web.client.HttpMessageConverterExtractor r0;
        java.lang.Class r1;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.springframework.web.client.HttpMessageConverterExtractor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/web/client/HttpMessageConverterExtractor;");

        specialinvoke r0.<org.springframework.web.client.HttpMessageConverterExtractor: void <init>(java.lang.Class,java.util.List,org.apache.commons.logging.Log)>(r1, r2, $r3);

        return;
    }

    void <init>(java.lang.Class, java.util.List, org.apache.commons.logging.Log)
    {
        java.util.List r2;
        org.springframework.web.client.HttpMessageConverterExtractor r0;
        java.lang.Class r1;
        org.apache.commons.logging.Log r3;

        r0 := @this: org.springframework.web.client.HttpMessageConverterExtractor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.commons.logging.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'responseType\' must not be null");

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r2, "\'messageConverters\' must not be empty");

        r0.<org.springframework.web.client.HttpMessageConverterExtractor: java.lang.Class responseType> = r1;

        r0.<org.springframework.web.client.HttpMessageConverterExtractor: java.util.List messageConverters> = r2;

        r0.<org.springframework.web.client.HttpMessageConverterExtractor: org.apache.commons.logging.Log logger> = r3;

        return;
    }

    public java.lang.Object extractData(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException
    {
        boolean $z0, $z1, $z2;
        org.springframework.web.client.RestClientException $r23, $r32;
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType $r2;
        java.util.List $r4;
        org.springframework.http.converter.HttpMessageConverter r7;
        java.lang.StringBuilder $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r27, $r28, $r29, $r30;
        java.lang.String $r15, $r22, $r26, $r31;
        org.springframework.http.client.ClientHttpResponse r0;
        java.util.Iterator $r5;
        org.springframework.web.client.HttpMessageConverterExtractor r3;
        java.lang.Object $r6, $r11;
        java.lang.Class $r8, $r10, $r14, $r25;
        org.apache.commons.logging.Log $r9, $r13;

        r3 := @this: org.springframework.web.client.HttpMessageConverterExtractor;

        r0 := @parameter0: org.springframework.http.client.ClientHttpResponse;

        $r1 = interfaceinvoke r0.<org.springframework.http.client.ClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()>();

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        if $r2 != null goto label1;

        $r32 = new org.springframework.web.client.RestClientException;

        specialinvoke $r32.<org.springframework.web.client.RestClientException: void <init>(java.lang.String)>("Cannot extract response: no Content-Type found");

        throw $r32;

     label1:
        $r4 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: java.util.List messageConverters>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.http.converter.HttpMessageConverter) $r6;

        $r8 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: java.lang.Class responseType>;

        $z1 = interfaceinvoke r7.<org.springframework.http.converter.HttpMessageConverter: boolean canRead(java.lang.Class,org.springframework.http.MediaType)>($r8, $r2);

        if $z1 == 0 goto label4;

        $r9 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label3;

        $r13 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Reading [");

        $r14 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: java.lang.Class responseType>;

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as \"");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" using [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label3:
        $r10 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: java.lang.Class responseType>;

        $r11 = interfaceinvoke r7.<org.springframework.http.converter.HttpMessageConverter: java.lang.Object read(java.lang.Class,org.springframework.http.HttpInputMessage)>($r10, r0);

        return $r11;

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r23 = new org.springframework.web.client.RestClientException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not extract response: no suitable HttpMessageConverter found for response type [");

        $r25 = r3.<org.springframework.web.client.HttpMessageConverterExtractor: java.lang.Class responseType>;

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] and content type [");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.springframework.web.client.RestClientException: void <init>(java.lang.String)>($r31);

        throw $r23;
    }
}
