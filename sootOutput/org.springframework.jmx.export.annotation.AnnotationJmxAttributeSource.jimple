public class org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource extends java.lang.Object implements org.springframework.jmx.export.metadata.JmxAttributeSource
{

    public void <init>()
    {
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r0;

        r0 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class) throws org.springframework.jmx.export.metadata.InvalidMetadataException
    {
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r9;
        java.lang.String[] $r4;
        org.springframework.jmx.export.metadata.ManagedResource $r3;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0;
        java.lang.String $r5, $r6, $r7, $r8;
        org.springframework.jmx.export.'annotation'.ManagedResource r2;
        boolean $z0, $z1;

        r9 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/springframework/jmx/export/annotation/ManagedResource;");

        r2 = (org.springframework.jmx.export.'annotation'.ManagedResource) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new org.springframework.jmx.export.metadata.ManagedResource;

        specialinvoke $r3.<org.springframework.jmx.export.metadata.ManagedResource: void <init>()>();

        $r4 = newarray (java.lang.String)[0];

        staticinvoke <org.springframework.beans.'annotation'.AnnotationBeanUtils: void copyPropertiesToBean(java.lang.'annotation'.Annotation,java.lang.Object,java.lang.String[])>(r2, $r3, $r4);

        $r5 = "";

        $r6 = interfaceinvoke r2.<org.springframework.jmx.export.'annotation'.ManagedResource: java.lang.String value()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $r7 = virtualinvoke $r3.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getObjectName()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r7);

        if $z1 != 0 goto label2;

        $r8 = interfaceinvoke r2.<org.springframework.jmx.export.'annotation'.ManagedResource: java.lang.String value()>();

        virtualinvoke $r3.<org.springframework.jmx.export.metadata.ManagedResource: void setObjectName(java.lang.String)>($r8);

     label2:
        return $r3;
    }

    public org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException
    {
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r7;
        org.springframework.jmx.export.metadata.ManagedAttribute $r3;
        java.lang.String[] $r4;
        java.lang.'annotation'.Annotation $r1;
        int $i0;
        java.lang.String $r5, $r6;
        org.springframework.jmx.export.'annotation'.ManagedAttribute r2;
        java.lang.reflect.Method r0;

        r7 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, class "Lorg/springframework/jmx/export/annotation/ManagedAttribute;");

        r2 = (org.springframework.jmx.export.'annotation'.ManagedAttribute) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new org.springframework.jmx.export.metadata.ManagedAttribute;

        specialinvoke $r3.<org.springframework.jmx.export.metadata.ManagedAttribute: void <init>()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "defaultValue";

        staticinvoke <org.springframework.beans.'annotation'.AnnotationBeanUtils: void copyPropertiesToBean(java.lang.'annotation'.Annotation,java.lang.Object,java.lang.String[])>(r2, $r3, $r4);

        $r5 = interfaceinvoke r2.<org.springframework.jmx.export.'annotation'.ManagedAttribute: java.lang.String defaultValue()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r6 = interfaceinvoke r2.<org.springframework.jmx.export.'annotation'.ManagedAttribute: java.lang.String defaultValue()>();

        virtualinvoke $r3.<org.springframework.jmx.export.metadata.ManagedAttribute: void setDefaultValue(java.lang.Object)>($r6);

     label2:
        return $r3;
    }

    public org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException
    {
        org.springframework.jmx.export.'annotation'.ManagedMetric r2;
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r5;
        java.lang.'annotation'.Annotation $r1;
        java.lang.String[] $r4;
        java.lang.reflect.Method r0;
        org.springframework.jmx.export.metadata.ManagedMetric $r3;

        r5 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, class "Lorg/springframework/jmx/export/annotation/ManagedMetric;");

        r2 = (org.springframework.jmx.export.'annotation'.ManagedMetric) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new org.springframework.jmx.export.metadata.ManagedMetric;

        specialinvoke $r3.<org.springframework.jmx.export.metadata.ManagedMetric: void <init>()>();

        $r4 = newarray (java.lang.String)[0];

        staticinvoke <org.springframework.beans.'annotation'.AnnotationBeanUtils: void copyPropertiesToBean(java.lang.'annotation'.Annotation,java.lang.Object,java.lang.String[])>(r2, $r3, $r4);

        return $r3;
    }

    public org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException
    {
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r4;
        org.springframework.jmx.export.metadata.ManagedOperation $r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.String[] $r3;
        java.lang.reflect.Method r0;

        r4 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, class "Lorg/springframework/jmx/export/annotation/ManagedOperation;");

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.springframework.jmx.export.metadata.ManagedOperation;

        specialinvoke $r2.<org.springframework.jmx.export.metadata.ManagedOperation: void <init>()>();

        $r3 = newarray (java.lang.String)[0];

        staticinvoke <org.springframework.beans.'annotation'.AnnotationBeanUtils: void copyPropertiesToBean(java.lang.'annotation'.Annotation,java.lang.Object,java.lang.String[])>($r1, $r2, $r3);

        return $r2;
    }

    public org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException
    {
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r7;
        org.springframework.jmx.export.'annotation'.ManagedOperationParameters r2;
        java.lang.String[] $r6;
        org.springframework.jmx.export.'annotation'.ManagedOperationParameter r4;
        org.springframework.jmx.export.metadata.ManagedOperationParameter $r5;
        java.lang.'annotation'.Annotation $r1;
        int $i0, $i1, i2;
        org.springframework.jmx.export.metadata.ManagedOperationParameter[] r8;
        java.lang.reflect.Method r0;
        org.springframework.jmx.export.'annotation'.ManagedOperationParameter[] $r3;

        r7 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, class "Lorg/springframework/jmx/export/annotation/ManagedOperationParameters;");

        r2 = (org.springframework.jmx.export.'annotation'.ManagedOperationParameters) $r1;

        if r2 != null goto label1;

        r8 = newarray (org.springframework.jmx.export.metadata.ManagedOperationParameter)[0];

        goto label4;

     label1:
        $r3 = interfaceinvoke r2.<org.springframework.jmx.export.'annotation'.ManagedOperationParameters: org.springframework.jmx.export.'annotation'.ManagedOperationParameter[] value()>();

        $i0 = lengthof $r3;

        r8 = newarray (org.springframework.jmx.export.metadata.ManagedOperationParameter)[$i0];

        i2 = 0;

        goto label3;

     label2:
        r4 = $r3[i2];

        $r5 = new org.springframework.jmx.export.metadata.ManagedOperationParameter;

        specialinvoke $r5.<org.springframework.jmx.export.metadata.ManagedOperationParameter: void <init>()>();

        $r6 = newarray (java.lang.String)[0];

        staticinvoke <org.springframework.beans.'annotation'.AnnotationBeanUtils: void copyPropertiesToBean(java.lang.'annotation'.Annotation,java.lang.Object,java.lang.String[])>(r4, $r5, $r6);

        r8[i2] = $r5;

        i2 = i2 + 1;

     label3:
        $i1 = lengthof $r3;

        if i2 < $i1 goto label2;

     label4:
        return r8;
    }

    public org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(java.lang.Class) throws org.springframework.jmx.export.metadata.InvalidMetadataException
    {
        org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource r9;
        org.springframework.jmx.export.'annotation'.ManagedNotifications r2;
        org.springframework.jmx.export.'annotation'.ManagedNotification r5;
        org.springframework.jmx.export.metadata.ManagedNotification[] r4, $r8;
        java.lang.String[] $r7;
        org.springframework.jmx.export.'annotation'.ManagedNotification[] $r3;
        java.lang.'annotation'.Annotation $r1;
        int $i0, $i1, i2;
        java.lang.Class r0;
        org.springframework.jmx.export.metadata.ManagedNotification $r6;

        r9 := @this: org.springframework.jmx.export.'annotation'.AnnotationJmxAttributeSource;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/springframework/jmx/export/annotation/ManagedNotifications;");

        r2 = (org.springframework.jmx.export.'annotation'.ManagedNotifications) $r1;

        if r2 != null goto label1;

        $r8 = newarray (org.springframework.jmx.export.metadata.ManagedNotification)[0];

        return $r8;

     label1:
        $r3 = interfaceinvoke r2.<org.springframework.jmx.export.'annotation'.ManagedNotifications: org.springframework.jmx.export.'annotation'.ManagedNotification[] value()>();

        $i0 = lengthof $r3;

        r4 = newarray (org.springframework.jmx.export.metadata.ManagedNotification)[$i0];

        i2 = 0;

        goto label3;

     label2:
        r5 = $r3[i2];

        $r6 = new org.springframework.jmx.export.metadata.ManagedNotification;

        specialinvoke $r6.<org.springframework.jmx.export.metadata.ManagedNotification: void <init>()>();

        $r7 = newarray (java.lang.String)[0];

        staticinvoke <org.springframework.beans.'annotation'.AnnotationBeanUtils: void copyPropertiesToBean(java.lang.'annotation'.Annotation,java.lang.Object,java.lang.String[])>(r5, $r6, $r7);

        r4[i2] = $r6;

        i2 = i2 + 1;

     label3:
        $i1 = lengthof $r3;

        if i2 < $i1 goto label2;

        return r4;
    }
}
