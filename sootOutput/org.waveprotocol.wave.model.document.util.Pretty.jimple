public class org.waveprotocol.wave.model.document.util.Pretty extends java.lang.Object
{
    private java.lang.StringBuilder builder;
    private int indent;
    private org.waveprotocol.wave.model.document.util.Point$El selStartEl;
    private org.waveprotocol.wave.model.document.util.Point$El selEndEl;
    private org.waveprotocol.wave.model.document.util.Point$Tx selStartTx;
    private org.waveprotocol.wave.model.document.util.Point$Tx selEndTx;
    private boolean collapsed;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        java.lang.StringBuilder $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder> = $r1;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent> = 0;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selStartEl> = null;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selEndEl> = null;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selStartTx> = null;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selEndTx> = null;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean collapsed> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Pretty select(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.Point$El $r3, $r5;
        org.waveprotocol.wave.model.document.util.Point$Tx $r4, $r6;
        org.waveprotocol.wave.model.document.util.Pretty r0;
        org.waveprotocol.wave.model.document.util.Point r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        if r1 == null goto label01;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        goto label02;

     label01:
        $r3 = null;

     label02:
        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selStartEl> = $r3;

        if r1 == null goto label03;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        goto label04;

     label03:
        $r4 = null;

     label04:
        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selStartTx> = $r4;

        if r2 == null goto label05;

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        goto label06;

     label05:
        $r5 = null;

     label06:
        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selEndEl> = $r5;

        if r2 == null goto label07;

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        goto label08;

     label07:
        $r6 = null;

     label08:
        r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selEndTx> = $r6;

        if r1 == null goto label09;

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean collapsed> = $z1;

        return r0;
    }

    public org.waveprotocol.wave.model.document.util.Pretty noselect()
    {
        org.waveprotocol.wave.model.document.util.Pretty r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Pretty select(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(null, null);

        return $r1;
    }

    public java.lang.String print(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void clear()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendDocument(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String print(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void clear()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendNode(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        $r3 = r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void clear()
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        int $i0;
        java.lang.StringBuilder $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent> = 0;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder> = $r2;

     label1:
        return;
    }

    private void append(java.lang.CharSequence)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        java.lang.StringBuilder $r2;
        java.lang.CharSequence r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);

        return;
    }

    private void append(char)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        char c0;
        java.lang.StringBuilder $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        c0 := @parameter0: char;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.Pretty: java.lang.StringBuilder builder>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        return;
    }

    private void appendNewLine()
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        int $i0, i1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>("\n");

        i1 = 0;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent>;

        if i1 >= $i0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>("  ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void appendDocument(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, $r2);

        return;
    }

    private boolean isInline(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.model.document.util.Pretty r12;
        java.lang.Object r1, $r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r9, $r10;
        java.lang.String $r5, $r7, $r8, $r11;
        boolean $z0, $z1;

        r12 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r5 = "|b|u|i|";

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>($r11);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private void appendNode(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Pretty r5;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2, $r3;
        java.lang.AssertionError $r4;
        boolean $z0;

        r5 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        specialinvoke r5.<org.waveprotocol.wave.model.document.util.Pretty: void appendElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r2);

        return;

     label1:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r1);

        if $r3 == null goto label2;

        specialinvoke r5.<org.waveprotocol.wave.model.document.util.Pretty: void appendText(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r3);

        return;

     label2:
        $z0 = <org.waveprotocol.wave.model.document.util.Pretty: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        return;
    }

    private void appendTagName(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r4);

        return;
    }

    private void appendAttributes(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.util.Map $r2;
        boolean $z0;
        java.util.Set $r3;
        java.lang.Exception $r18;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r15, $r16, $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.String[] $r19;
        org.waveprotocol.wave.model.document.util.Pretty r6;
        int $i0, i1, i2;
        java.lang.String $r10, $r14, $r17, r20, $r21, $r28;
        java.util.Map$Entry r29;
        java.util.Iterator $r4;
        java.lang.Object r1, $r5, $r9, $r13;

        r6 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

     label1:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.util.Map getAttributes(java.lang.Object)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.util.Map$Entry) $r5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = interfaceinvoke r29.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r13 = interfaceinvoke r29.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.String) $r13;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r6.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r17);

        goto label2;

     label3:
        goto label7;

     label4:
        $r18 := @caughtexception;

        $r19 = newarray (java.lang.String)[8];

        $r19[0] = "class";

        $r19[1] = "src";

        $r19[2] = "id";

        $r19[3] = "type";

        $r19[4] = "name";

        $r19[5] = "for";

        $r19[6] = "href";

        $r19[7] = "target";

        i1 = lengthof $r19;

        i2 = 0;

     label5:
        if i2 >= i1 goto label7;

        r20 = $r19[i2];

        $r21 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r1, r20);

        if $r21 == null goto label6;

        $i0 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r6.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r28);

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,boolean)>(r1, r2, 0);

        return;
    }

    private void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>("<");

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendAttributes(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        if z0 == 0 goto label1;

        $r3 = "/>";

        goto label2;

     label1:
        $r3 = ">";

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r3);

        return;
    }

    private void appendEndTag(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Pretty r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>("</");

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>(">");

        return;
    }

    private void appendElement(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14;
        org.waveprotocol.wave.model.document.util.Point$El $r1, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        org.waveprotocol.wave.model.document.util.Pretty r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2, $r22, $r23;
        java.lang.Object r4, $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r18, r21;

        r0 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selStartEl>;

        if $r1 == null goto label01;

        $r17 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selStartEl>;

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $z10 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r18, r4);

        if $z10 == 0 goto label01;

        $z11 = 1;

        goto label02;

     label01:
        $z11 = 0;

     label02:
        z0 = $z11;

        $r19 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selEndEl>;

        if $r19 == null goto label03;

        $z8 = r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean collapsed>;

        if $z8 != 0 goto label03;

        $r15 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selEndEl>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $z9 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r16, r4);

        if $z9 == 0 goto label03;

        $z12 = 1;

        goto label04;

     label03:
        $z12 = 0;

     label04:
        z1 = $z12;

        $z13 = r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean collapsed>;

        if $z13 == 0 goto label05;

        $r23 = "|";

        $r22 = "|";

        goto label06;

     label05:
        $r23 = "[";

        $r22 = "[";

     label06:
        r2 = $r22;

        $r5 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r4);

        if $r5 != null goto label09;

        if z0 == 0 goto label07;

        $r13 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selStartEl>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        if $r14 != null goto label07;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r23);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendEndTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        goto label19;

     label07:
        if z1 == 0 goto label08;

        $r11 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selEndEl>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        if $r12 != null goto label08;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>("]");

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendEndTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        goto label19;

     label08:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,boolean)>(r3, r4, 1);

        goto label19;

     label09:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendStartTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        r21 = $r5;

        z14 = 1;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent> = $i1;

     label10:
        if r21 == null goto label16;

        $r6 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r21);

        if z14 == 0 goto label11;

        $z7 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean isInline(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        if $z7 == 0 goto label12;

     label11:
        $z4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean isInline(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r21);

        if $z4 != 0 goto label13;

     label12:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendNewLine()>();

     label13:
        if z0 == 0 goto label14;

        $r9 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selStartEl>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        $z6 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r10, r21);

        if $z6 == 0 goto label14;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>(r2);

     label14:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendNode(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r21);

        if z1 == 0 goto label15;

        $r7 = r0.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$El selEndEl>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        $z5 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r8, $r6);

        if $z5 == 0 goto label15;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>("]");

     label15:
        z14 = 0;

        r21 = $r6;

        goto label10;

     label16:
        $i2 = r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent>;

        $i3 = $i2 - 1;

        r0.<org.waveprotocol.wave.model.document.util.Pretty: int indent> = $i3;

        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean isInline(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

        if $z2 == 0 goto label17;

        $z3 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: boolean isInline(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r5);

        if $z3 != 0 goto label18;

     label17:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendNewLine()>();

     label18:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.Pretty: void appendEndTag(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, r4);

     label19:
        return;
    }

    private void appendText(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$Tx $r5, $r11, $r12, $r13, $r15, $r17;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.model.document.util.Pretty r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r2, $r3, r6, r7, $r8, $r9, $r10, $r18, $r19;
        java.lang.Object r1, $r14, $r16;

        r4 := @this: org.waveprotocol.wave.model.document.util.Pretty;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Pretty: java.lang.String displayWhitespace(java.lang.String)>($r2);

        $r5 = r4.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selStartTx>;

        if $r5 == null goto label01;

        $r15 = r4.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selStartTx>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $z5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r16, r1);

        if $z5 == 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        $r17 = r4.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selEndTx>;

        if $r17 == null goto label03;

        $z3 = r4.<org.waveprotocol.wave.model.document.util.Pretty: boolean collapsed>;

        if $z3 != 0 goto label03;

        $r13 = r4.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selEndTx>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $z4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r14, r1);

        if $z4 == 0 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        z1 = $z7;

        if z0 == 0 goto label06;

        $z2 = r4.<org.waveprotocol.wave.model.document.util.Pretty: boolean collapsed>;

        if $z2 == 0 goto label05;

        $r18 = "|";

        goto label07;

     label05:
        $r18 = "[";

        goto label07;

     label06:
        $r18 = "";

     label07:
        r6 = $r18;

        if z1 == 0 goto label08;

        $r19 = "]";

        goto label09;

     label08:
        $r19 = "";

     label09:
        r7 = $r19;

        if z0 == 0 goto label10;

        $r12 = r4.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selStartTx>;

        $i4 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.util.Point$Tx: int getTextOffset()>();

        $i5 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        goto label11;

     label10:
        $i6 = 0;

     label11:
        i0 = $i6;

        if z1 == 0 goto label12;

        $r11 = r4.<org.waveprotocol.wave.model.document.util.Pretty: org.waveprotocol.wave.model.document.util.Point$Tx selEndTx>;

        $i2 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.Point$Tx: int getTextOffset()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        goto label13;

     label12:
        $i7 = virtualinvoke $r3.<java.lang.String: int length()>();

     label13:
        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(char)>(39);

        $r8 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r8);

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>(r6);

        $r9 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i0, $i7);

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r9);

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>(r7);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r10 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i7, $i1);

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(java.lang.CharSequence)>($r10);

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.Pretty: void append(char)>(39);

        return;
    }

    public static java.lang.String xmlEscape(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        return $r3;
    }

    public static java.lang.String xmlUnescape(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&lt;", "<");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&gt;", ">");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&quot;", "\"");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&apos;", "\'");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&amp;", "&");

        return $r5;
    }

    public static java.lang.String attrEscape(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Pretty: java.lang.String xmlEscape(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&apos;");

        return $r3;
    }

    public static java.lang.String stringToHtml(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Pretty: java.lang.String xmlEscape(java.lang.String)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Pretty: java.lang.String displayWhitespace(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String displayWhitespace(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\u00a0", "\u25aa");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "\u25ab");

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/Pretty;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.Pretty: boolean $assertionsDisabled> = $z1;

        return;
    }
}
