public class org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler extends java.lang.Object implements org.waveprotocol.wave.model.document.AnnotationMutationHandler
{
    public static final java.lang.String PREFIX;
    private final org.waveprotocol.wave.client.editor.content.AnnotationPainter painter;
    private static final org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction renderFunc;
    public static final org.waveprotocol.wave.model.util.ReadableStringSet KEYS;

    private static final java.lang.String suffix(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = "style";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;
    }

    public static final java.lang.String key(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("style/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static void register(org.waveprotocol.wave.client.editor.content.Registries)
    {
        org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler $r2;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$DefaultAnnotationBehaviour $r6;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction $r8;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter $r3;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r4, $r5;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$AnnotationFamily $r7;
        org.waveprotocol.wave.model.util.ReadableStringSet $r9;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r1;
        org.waveprotocol.wave.client.editor.content.Registries r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.content.PainterRegistry getPaintRegistry()>();

        $r2 = new org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.PainterRegistry: org.waveprotocol.wave.client.editor.content.AnnotationPainter getPainter()>();

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: void <init>(org.waveprotocol.wave.client.editor.content.AnnotationPainter)>($r3);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.model.document.util.AnnotationRegistry getAnnotationHandlerRegistry()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.AnnotationRegistry: void registerHandler(java.lang.String,org.waveprotocol.wave.model.document.AnnotationMutationHandler)>("style", $r2);

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.model.document.util.AnnotationRegistry getAnnotationHandlerRegistry()>();

        $r6 = new org.waveprotocol.wave.model.document.AnnotationBehaviour$DefaultAnnotationBehaviour;

        $r7 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$AnnotationFamily: org.waveprotocol.wave.model.document.AnnotationBehaviour$AnnotationFamily CONTENT>;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.AnnotationBehaviour$DefaultAnnotationBehaviour: void <init>(org.waveprotocol.wave.model.document.AnnotationBehaviour$AnnotationFamily)>($r7);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.util.AnnotationRegistry: void registerBehaviour(java.lang.String,org.waveprotocol.wave.model.document.AnnotationBehaviour)>("style", $r6);

        $r9 = <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: org.waveprotocol.wave.model.util.ReadableStringSet KEYS>;

        $r8 = <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction renderFunc>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.PainterRegistry: void registerPaintFunction(org.waveprotocol.wave.model.util.ReadableStringSet,org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction)>($r9, $r8);

        return;
    }

    public void <init>(org.waveprotocol.wave.client.editor.content.AnnotationPainter)
    {
        org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler r0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: org.waveprotocol.wave.client.editor.content.AnnotationPainter painter> = r1;

        return;
    }

    public void handleAnnotationChange(org.waveprotocol.wave.model.document.util.DocumentContext, int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler r0;
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter $r2;
        org.waveprotocol.wave.model.document.util.DocumentContext r1;
        java.lang.Object r4;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: org.waveprotocol.wave.client.editor.content.AnnotationPainter painter>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.AnnotationPainter: void scheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext,int,int)>(r1, i0, i1);

        return;
    }

    static java.lang.String access$000(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: java.lang.String suffix(java.lang.String)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler$1 $r0;
        java.lang.String[] $r1;
        org.waveprotocol.wave.model.util.StringSet $r2;

        <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: java.lang.String PREFIX> = "style";

        $r0 = new org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction renderFunc> = $r0;

        $r1 = newarray (java.lang.String)[8];

        $r1[0] = "style/backgroundColor";

        $r1[1] = "style/color";

        $r1[2] = "style/fontFamily";

        $r1[3] = "style/fontSize";

        $r1[4] = "style/fontStyle";

        $r1[5] = "style/fontWeight";

        $r1[6] = "style/textDecoration";

        $r1[7] = "style/verticalAlign";

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r1);

        <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: org.waveprotocol.wave.model.util.ReadableStringSet KEYS> = $r2;

        return;
    }
}
