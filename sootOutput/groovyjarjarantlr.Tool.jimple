public class groovyjarjarantlr.Tool extends java.lang.Object
{
    public static java.lang.String version;
    groovyjarjarantlr.ToolErrorHandler errorHandler;
    protected boolean hasError;
    boolean genDiagnostics;
    boolean genDocBook;
    boolean genHTML;
    protected java.lang.String outputDir;
    protected java.lang.String grammarFile;
    transient java.io.Reader f;
    protected java.lang.String literalsPrefix;
    protected boolean upperCaseMangledLiterals;
    protected groovyjarjarantlr.NameSpace nameSpace;
    protected java.lang.String namespaceAntlr;
    protected java.lang.String namespaceStd;
    protected boolean genHashLines;
    protected boolean noConstructors;
    private groovyjarjarantlr.collections.impl.BitSet cmdLineArgValid;

    public void <init>()
    {
        groovyjarjarantlr.Tool r0;
        groovyjarjarantlr.DefaultToolErrorHandler $r4;
        java.io.InputStreamReader $r1;
        groovyjarjarantlr.collections.impl.BitSet $r3;
        java.io.InputStream $r2;

        r0 := @this: groovyjarjarantlr.Tool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.Tool: boolean hasError> = 0;

        r0.<groovyjarjarantlr.Tool: boolean genDiagnostics> = 0;

        r0.<groovyjarjarantlr.Tool: boolean genDocBook> = 0;

        r0.<groovyjarjarantlr.Tool: boolean genHTML> = 0;

        r0.<groovyjarjarantlr.Tool: java.lang.String outputDir> = ".";

        $r1 = new java.io.InputStreamReader;

        $r2 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2);

        r0.<groovyjarjarantlr.Tool: java.io.Reader f> = $r1;

        r0.<groovyjarjarantlr.Tool: java.lang.String literalsPrefix> = "LITERAL_";

        r0.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals> = 0;

        r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.NameSpace nameSpace> = null;

        r0.<groovyjarjarantlr.Tool: java.lang.String namespaceAntlr> = null;

        r0.<groovyjarjarantlr.Tool: java.lang.String namespaceStd> = null;

        r0.<groovyjarjarantlr.Tool: boolean genHashLines> = 1;

        r0.<groovyjarjarantlr.Tool: boolean noConstructors> = 0;

        $r3 = new groovyjarjarantlr.collections.impl.BitSet;

        specialinvoke $r3.<groovyjarjarantlr.collections.impl.BitSet: void <init>()>();

        r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.collections.impl.BitSet cmdLineArgValid> = $r3;

        $r4 = new groovyjarjarantlr.DefaultToolErrorHandler;

        specialinvoke $r4.<groovyjarjarantlr.DefaultToolErrorHandler: void <init>(groovyjarjarantlr.Tool)>(r0);

        r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.ToolErrorHandler errorHandler> = $r4;

        return;
    }

    public java.lang.String getGrammarFile()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        return $r1;
    }

    public boolean hasError()
    {
        groovyjarjarantlr.Tool r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Tool;

        $z0 = r0.<groovyjarjarantlr.Tool: boolean hasError>;

        return $z0;
    }

    public groovyjarjarantlr.NameSpace getNameSpace()
    {
        groovyjarjarantlr.Tool r0;
        groovyjarjarantlr.NameSpace $r1;

        r0 := @this: groovyjarjarantlr.Tool;

        $r1 = r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.NameSpace nameSpace>;

        return $r1;
    }

    public java.lang.String getNamespaceStd()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String namespaceStd>;

        return $r1;
    }

    public java.lang.String getNamespaceAntlr()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String namespaceAntlr>;

        return $r1;
    }

    public boolean getGenHashLines()
    {
        groovyjarjarantlr.Tool r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Tool;

        $z0 = r0.<groovyjarjarantlr.Tool: boolean genHashLines>;

        return $z0;
    }

    public java.lang.String getLiteralsPrefix()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String literalsPrefix>;

        return $r1;
    }

    public boolean getUpperCaseMangledLiterals()
    {
        groovyjarjarantlr.Tool r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Tool;

        $z0 = r0.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals>;

        return $z0;
    }

    public void setFileLineFormatter(groovyjarjarantlr.FileLineFormatter)
    {
        groovyjarjarantlr.FileLineFormatter r0;
        groovyjarjarantlr.Tool r1;

        r1 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: groovyjarjarantlr.FileLineFormatter;

        staticinvoke <groovyjarjarantlr.FileLineFormatter: void setFormatter(groovyjarjarantlr.FileLineFormatter)>(r0);

        return;
    }

    protected void checkForInvalidArguments(java.lang.String[], groovyjarjarantlr.collections.impl.BitSet)
    {
        java.lang.String[] r0;
        groovyjarjarantlr.collections.impl.BitSet r1;
        groovyjarjarantlr.Tool r2;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, i1;
        java.lang.String $r5, $r8;
        boolean $z0;

        r2 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $z0 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.BitSet: boolean member(int)>(i1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid command-line argument: ");

        $r5 = r0[i1];

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ignored");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.Tool: void warning(java.lang.String)>($r8);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void copyFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        groovyjarjarantlr.FileCopyException $r53, $r55, $r58, $r60, $r62, $r64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Throwable $r47;
        java.io.DataInputStream $r56;
        groovyjarjarantlr.Tool r9;
        java.lang.StringBuffer $r6, $r7, $r17, $r18, $r22, $r23, $r27, $r28, $r35, $r36, $r40, $r41, $r52, $r54, $r57, $r59, $r61, $r63;
        int $i0, $i2;
        java.lang.String r1, r3, $r8, $r19, $r24, $r29, $r37, $r42;
        java.io.BufferedWriter r49, $r68;
        java.io.FileWriter $r67;
        java.io.IOException $r43, $r44, $r45, $r46;
        java.io.File $r10, $r50, $r51;
        char[] $r32;
        java.io.BufferedReader r48, $r66;
        java.io.FileReader $r65;
        java.io.InputStream $r31;

        r9 := @this: groovyjarjarantlr.Tool;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r50 = new java.io.File;

        specialinvoke $r50.<java.io.File: void <init>(java.lang.String)>(r1);

        $r51 = new java.io.File;

        specialinvoke $r51.<java.io.File: void <init>(java.lang.String)>(r3);

        r48 = null;

        r49 = null;

     label01:
        $z0 = virtualinvoke $r50.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label02;

        $z1 = virtualinvoke $r50.<java.io.File: boolean isFile()>();

        if $z1 != 0 goto label03;

     label02:
        $r53 = new groovyjarjarantlr.FileCopyException;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileCopy: no such source file: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r53.<groovyjarjarantlr.FileCopyException: void <init>(java.lang.String)>($r8);

        throw $r53;

     label03:
        $z2 = virtualinvoke $r50.<java.io.File: boolean canRead()>();

        if $z2 != 0 goto label04;

        $r55 = new groovyjarjarantlr.FileCopyException;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileCopy: source file is unreadable: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r55.<groovyjarjarantlr.FileCopyException: void <init>(java.lang.String)>($r42);

        throw $r55;

     label04:
        $z3 = virtualinvoke $r51.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label06;

        $z6 = virtualinvoke $r51.<java.io.File: boolean isFile()>();

        if $z6 == 0 goto label05;

        $r56 = new java.io.DataInputStream;

        $r31 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r56.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r31);

        $z7 = virtualinvoke $r51.<java.io.File: boolean canWrite()>();

        if $z7 != 0 goto label08;

        $r58 = new groovyjarjarantlr.FileCopyException;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileCopy: destination file is unwriteable: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r58.<groovyjarjarantlr.FileCopyException: void <init>(java.lang.String)>($r37);

        throw $r58;

     label05:
        $r60 = new groovyjarjarantlr.FileCopyException;

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileCopy: destination is not a file: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r60.<groovyjarjarantlr.FileCopyException: void <init>(java.lang.String)>($r29);

        throw $r60;

     label06:
        $r10 = virtualinvoke r9.<groovyjarjarantlr.Tool: java.io.File parent(java.io.File)>($r51);

        $z4 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label07;

        $r62 = new groovyjarjarantlr.FileCopyException;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileCopy: destination directory doesn\'t exist: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r62.<groovyjarjarantlr.FileCopyException: void <init>(java.lang.String)>($r24);

        throw $r62;

     label07:
        $z5 = virtualinvoke $r10.<java.io.File: boolean canWrite()>();

        if $z5 != 0 goto label08;

        $r64 = new groovyjarjarantlr.FileCopyException;

        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileCopy: destination directory is unwriteable: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r64.<groovyjarjarantlr.FileCopyException: void <init>(java.lang.String)>($r19);

        throw $r64;

     label08:
        $r66 = new java.io.BufferedReader;

        $r65 = new java.io.FileReader;

        specialinvoke $r65.<java.io.FileReader: void <init>(java.io.File)>($r50);

        specialinvoke $r66.<java.io.BufferedReader: void <init>(java.io.Reader)>($r65);

        r48 = $r66;

        $r68 = new java.io.BufferedWriter;

        $r67 = new java.io.FileWriter;

        specialinvoke $r67.<java.io.FileWriter: void <init>(java.io.File)>($r51);

        specialinvoke $r68.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r67);

        r49 = $r68;

        $r32 = newarray (char)[1024];

     label09:
        $i0 = virtualinvoke $r66.<java.io.Reader: int read(char[],int,int)>($r32, 0, 1024);

        $i2 = (int) -1;

        if $i0 != $i2 goto label10;

        goto label11;

     label10:
        virtualinvoke $r68.<java.io.Writer: void write(char[],int,int)>($r32, 0, $i0);

        goto label09;

     label11:
        goto label16;

     label12:
        goto label15;

     label13:
        $r47 := @caughtexception;

        goto label25;

     label14:
        throw $r47;

     label15:
        return;

     label16:
        if $r66 == null goto label20;

     label17:
        virtualinvoke $r66.<java.io.Reader: void close()>();

     label18:
        goto label20;

     label19:
        $r46 := @caughtexception;

     label20:
        if $r68 == null goto label24;

     label21:
        virtualinvoke $r68.<java.io.Writer: void close()>();

     label22:
        goto label24;

     label23:
        $r45 := @caughtexception;

     label24:
        goto label12;

     label25:
        if r48 == null goto label29;

     label26:
        virtualinvoke r48.<java.io.Reader: void close()>();

     label27:
        goto label29;

     label28:
        $r44 := @caughtexception;

     label29:
        if r49 == null goto label33;

     label30:
        virtualinvoke r49.<java.io.Writer: void close()>();

     label31:
        goto label33;

     label32:
        $r43 := @caughtexception;

     label33:
        goto label14;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.io.IOException from label30 to label31 with label32;
    }

    public void doEverythingWrapper(java.lang.String[])
    {
        int $i0;
        java.lang.String[] r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        r1 := @parameter0: java.lang.String[];

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Tool: int doEverything(java.lang.String[])>(r1);

        staticinvoke <java.lang.System: void exit(int)>($i0);

        return;
    }

    public int doEverything(java.lang.String[])
    {
        groovyjarjarantlr.ANTLRParser $r10;
        groovyjarjarantlr.TokenBuffer $r7;
        groovyjarjarantlr.preprocessor.Tool $r0;
        java.lang.InstantiationException $r44;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r33;
        java.io.Reader $r4, $r6;
        groovyjarjarantlr.collections.impl.BitSet $r12;
        groovyjarjarantlr.CodeGenerator $r20;
        groovyjarjarantlr.MakeGrammar $r9;
        groovyjarjarantlr.RecognitionException $r27;
        java.lang.String[] r2, $r3;
        groovyjarjarantlr.Tool r1;
        java.lang.StringBuffer $r13, $r14, $r16, $r17, $r22, $r23, $r25, $r28, $r29, $r31, $r34, $r35, $r36, $r37, $r40, $r41, $r42, $r45, $r46, $r47, $r50, $r51, $r52;
        groovyjarjarantlr.LLkAnalyzer $r8;
        java.lang.String $r11, $r15, $r18, $r24, $r26, $r30, $r32, $r38, $r43, $r48, $r53;
        java.lang.IllegalArgumentException $r39;
        java.lang.Object $r19;
        java.lang.ClassNotFoundException $r49;
        groovyjarjarantlr.ANTLRLexer $r5;
        groovyjarjarantlr.TokenStreamException $r21;

        r1 := @this: groovyjarjarantlr.Tool;

        r2 := @parameter0: java.lang.String[];

        $r0 = new groovyjarjarantlr.preprocessor.Tool;

        specialinvoke $r0.<groovyjarjarantlr.preprocessor.Tool: void <init>(groovyjarjarantlr.Tool,java.lang.String[])>(r1, r2);

        $z0 = virtualinvoke $r0.<groovyjarjarantlr.preprocessor.Tool: boolean preprocess()>();

        $r3 = virtualinvoke $r0.<groovyjarjarantlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void processArguments(java.lang.String[])>($r3);

        if $z0 != 0 goto label01;

        return 1;

     label01:
        $r4 = virtualinvoke r1.<groovyjarjarantlr.Tool: java.io.Reader getGrammarReader()>();

        r1.<groovyjarjarantlr.Tool: java.io.Reader f> = $r4;

        $r5 = new groovyjarjarantlr.ANTLRLexer;

        $r6 = r1.<groovyjarjarantlr.Tool: java.io.Reader f>;

        specialinvoke $r5.<groovyjarjarantlr.ANTLRLexer: void <init>(java.io.Reader)>($r6);

        $r7 = new groovyjarjarantlr.TokenBuffer;

        specialinvoke $r7.<groovyjarjarantlr.TokenBuffer: void <init>(groovyjarjarantlr.TokenStream)>($r5);

        $r8 = new groovyjarjarantlr.LLkAnalyzer;

        specialinvoke $r8.<groovyjarjarantlr.LLkAnalyzer: void <init>(groovyjarjarantlr.Tool)>(r1);

        $r9 = new groovyjarjarantlr.MakeGrammar;

        specialinvoke $r9.<groovyjarjarantlr.MakeGrammar: void <init>(groovyjarjarantlr.Tool,java.lang.String[],groovyjarjarantlr.LLkAnalyzer)>(r1, r2, $r8);

     label02:
        $r10 = new groovyjarjarantlr.ANTLRParser;

        specialinvoke $r10.<groovyjarjarantlr.ANTLRParser: void <init>(groovyjarjarantlr.TokenBuffer,groovyjarjarantlr.ANTLRGrammarParseBehavior,groovyjarjarantlr.Tool)>($r7, $r9, r1);

        $r11 = r1.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        virtualinvoke $r10.<groovyjarjarantlr.ANTLRParser: void setFilename(java.lang.String)>($r11);

        virtualinvoke $r10.<groovyjarjarantlr.ANTLRParser: void grammar()>();

        $z1 = virtualinvoke r1.<groovyjarjarantlr.Tool: boolean hasError()>();

        if $z1 == 0 goto label03;

        virtualinvoke r1.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>("Exiting due to errors.");

     label03:
        $r12 = r1.<groovyjarjarantlr.Tool: groovyjarjarantlr.collections.impl.BitSet cmdLineArgValid>;

        virtualinvoke r1.<groovyjarjarantlr.Tool: void checkForInvalidArguments(java.lang.String[],groovyjarjarantlr.collections.impl.BitSet)>($r3, $r12);

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r15 = virtualinvoke r1.<groovyjarjarantlr.Tool: java.lang.String getLanguage(groovyjarjarantlr.MakeGrammar)>($r9);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CodeGenerator");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r19 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Object createInstanceOf(java.lang.String)>($r18);

        $r20 = (groovyjarjarantlr.CodeGenerator) $r19;

        virtualinvoke $r20.<groovyjarjarantlr.CodeGenerator: void setBehavior(groovyjarjarantlr.DefineGrammarSymbols)>($r9);

        virtualinvoke $r20.<groovyjarjarantlr.CodeGenerator: void setAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)>($r8);

        virtualinvoke $r20.<groovyjarjarantlr.CodeGenerator: void setTool(groovyjarjarantlr.Tool)>(r1);

        virtualinvoke $r20.<groovyjarjarantlr.CodeGenerator: void gen()>();

     label05:
        goto label10;

     label06:
        $r49 := @caughtexception;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot instantiate code-generator: ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r53);

        goto label10;

     label07:
        $r44 := @caughtexception;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot instantiate code-generator: ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r48);

        goto label10;

     label08:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot instantiate code-generator: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r43);

        goto label10;

     label09:
        $r33 := @caughtexception;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("code-generator class \'");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not accessible");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r38);

     label10:
        goto label13;

     label11:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unhandled parser error: ");

        $r30 = virtualinvoke $r27.<groovyjarjarantlr.RecognitionException: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>($r32);

        goto label13;

     label12:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TokenStreamException: ");

        $r24 = virtualinvoke $r21.<groovyjarjarantlr.TokenStreamException: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>($r26);

     label13:
        return 0;

        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.InstantiationException from label04 to label05 with label07;
        catch java.lang.IllegalArgumentException from label04 to label05 with label08;
        catch java.lang.IllegalAccessException from label04 to label05 with label09;
        catch groovyjarjarantlr.RecognitionException from label02 to label10 with label11;
        catch groovyjarjarantlr.TokenStreamException from label02 to label10 with label12;
    }

    public void error(java.lang.String)
    {
        java.io.PrintStream $r2;
        groovyjarjarantlr.Tool r0;
        java.lang.StringBuffer $r1, $r3, $r5;
        java.lang.String r4, $r6;

        r0 := @this: groovyjarjarantlr.Tool;

        r4 := @parameter0: java.lang.String;

        r0.<groovyjarjarantlr.Tool: boolean hasError> = 1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public void error(java.lang.String, java.lang.String, int, int)
    {
        java.io.PrintStream $r2;
        groovyjarjarantlr.FileLineFormatter $r3;
        groovyjarjarantlr.Tool r0;
        java.lang.StringBuffer $r1, $r6, $r8;
        int i0, i1;
        java.lang.String r4, $r5, r7, $r9;

        r0 := @this: groovyjarjarantlr.Tool;

        r7 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r0.<groovyjarjarantlr.Tool: boolean hasError> = 1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = staticinvoke <groovyjarjarantlr.FileLineFormatter: groovyjarjarantlr.FileLineFormatter getFormatter()>();

        $r5 = virtualinvoke $r3.<groovyjarjarantlr.FileLineFormatter: java.lang.String getFormatString(java.lang.String,int,int)>(r4, i0, i1);

        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    public java.lang.String fileMinusPath(java.lang.String)
    {
        groovyjarjarantlr.Tool r3;
        int $i0, $i1, $i3;
        java.lang.String $r0, r1, $r2;

        r3 := @this: groovyjarjarantlr.Tool;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator");

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>($r0);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return r1;

     label1:
        $i1 = $i0 + 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;
    }

    public java.lang.String getLanguage(groovyjarjarantlr.MakeGrammar)
    {
        groovyjarjarantlr.MakeGrammar r1;
        groovyjarjarantlr.Tool r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: groovyjarjarantlr.Tool;

        r1 := @parameter0: groovyjarjarantlr.MakeGrammar;

        $z0 = r0.<groovyjarjarantlr.Tool: boolean genDiagnostics>;

        if $z0 == 0 goto label1;

        return "Diagnostic";

     label1:
        $z1 = r0.<groovyjarjarantlr.Tool: boolean genHTML>;

        if $z1 == 0 goto label2;

        return "HTML";

     label2:
        $z2 = r0.<groovyjarjarantlr.Tool: boolean genDocBook>;

        if $z2 == 0 goto label3;

        return "DocBook";

     label3:
        $r2 = r1.<groovyjarjarantlr.MakeGrammar: java.lang.String language>;

        return $r2;
    }

    public java.lang.String getOutputDirectory()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String outputDir>;

        return $r1;
    }

    private static void help()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: java antlr.Tool [args] file.g");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("  -o outputDir       specify output directory where all output generated.");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("  -glib superGrammar specify location of supergrammar file.");

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("  -debug             launch the ParseView debugger upon parser invocation.");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  -html              generate a html file from your grammar.");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("  -docbook           generate a docbook sgml file from your grammar.");

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("  -diagnostic        generate a textfile with diagnostics.");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("  -trace             have all rules call traceIn/traceOut.");

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("  -traceLexer        have lexer rules call traceIn/traceOut.");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("  -traceParser       have parser rules call traceIn/traceOut.");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("  -traceTreeParser   have tree parser rules call traceIn/traceOut.");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("  -h|-help|--help    this message");

        return;
    }

    public static void main(java.lang.String[])
    {
        boolean $z0, $z1, $z2, z3;
        java.lang.Exception $r6;
        java.lang.String[] r1;
        groovyjarjarantlr.Tool $r2;
        java.lang.StringBuffer $r7, $r10, $r12, $r14, $r16, $r18, $r22, $r24, $r26;
        int $i0, $i1, i2;
        java.lang.String $r3, $r4, $r5, $r9, $r11, $r13, $r17, $r19, $r25, $r27;
        java.io.PrintStream $r0, $r8, $r15, $r20, $r21, $r23;

        r1 := @parameter0: java.lang.String[];

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("ANTLR Parser Generator   Version 2.7.6 (2005-12-22)   1989-2005");

        <groovyjarjarantlr.Tool: java.lang.String version> = "2.7.6 (2005-12-22)";

     label01:
        z3 = 0;

        $i0 = lengthof r1;

        if $i0 != 0 goto label02;

        z3 = 1;

        goto label06;

     label02:
        i2 = 0;

     label03:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label06;

        $r3 = r1[i2];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-h");

        if $z0 != 0 goto label04;

        $r4 = r1[i2];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-help");

        if $z1 != 0 goto label04;

        $r5 = r1[i2];

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("--help");

        if $z2 == 0 goto label05;

     label04:
        z3 = 1;

        goto label06;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        if z3 == 0 goto label07;

        staticinvoke <groovyjarjarantlr.Tool: void help()>();

        goto label08;

     label07:
        $r2 = new groovyjarjarantlr.Tool;

        specialinvoke $r2.<groovyjarjarantlr.Tool: void <init>()>();

        virtualinvoke $r2.<groovyjarjarantlr.Tool: int doEverything(java.lang.String[])>(r1);

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#$%%*&@# internal error: ");

        $r17 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("[complain to nearest government official");

        $r21 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>(" or send hate-mail to parrt@antlr.org;");

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" please send stack trace with report.]");

        $r25 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r27);

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label10:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
    }

    public java.io.PrintWriter openOutputFile(java.lang.String) throws java.io.IOException
    {
        java.io.PrintWriter $r5;
        java.io.File $r3;
        groovyjarjarantlr.Tool r0;
        java.lang.StringBuffer $r7, $r9, $r11, $r12;
        groovyjarjarantlr.PreservingFileWriter $r6;
        java.lang.String $r1, r2, $r4, $r8, $r10, $r13;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Tool;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String outputDir>;

        if $r1 == "." goto label1;

        $r3 = new java.io.File;

        $r4 = r0.<groovyjarjarantlr.Tool: java.lang.String outputDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

     label1:
        $r5 = new java.io.PrintWriter;

        $r6 = new groovyjarjarantlr.PreservingFileWriter;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = r0.<groovyjarjarantlr.Tool: java.lang.String outputDir>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator");

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<groovyjarjarantlr.PreservingFileWriter: void <init>(java.lang.String)>($r13);

        specialinvoke $r5.<java.io.PrintWriter: void <init>(java.io.Writer)>($r6);

        return $r5;
    }

    public java.io.Reader getGrammarReader()
    {
        java.io.IOException $r5;
        groovyjarjarantlr.Tool r0;
        java.lang.StringBuffer $r6, $r7, $r9;
        java.lang.String $r1, $r4, $r8, $r10;
        java.io.BufferedReader $r2, r11;
        java.io.FileReader $r3;

        r0 := @this: groovyjarjarantlr.Tool;

        r11 = null;

     label1:
        $r1 = r0.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        if $r1 == null goto label2;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.FileReader;

        $r4 = r0.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        specialinvoke $r3.<java.io.FileReader: void <init>(java.lang.String)>($r4);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        r11 = $r2;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot open grammar file ");

        $r8 = r0.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>($r10);

     label4:
        return r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void reportException(java.lang.Exception, java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.Exception r5;
        groovyjarjarantlr.Tool r8;
        java.lang.StringBuffer $r1, $r3, $r4, $r7;
        java.lang.String r0, $r6, $r9;

        r8 := @this: groovyjarjarantlr.Tool;

        r5 := @parameter0: java.lang.Exception;

        r0 := @parameter1: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        if r0 != null goto label1;

        $r9 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>();

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    public void reportProgress(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        groovyjarjarantlr.Tool r2;

        r2 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    public void fatalError(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        groovyjarjarantlr.Tool r2;

        r2 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        staticinvoke <groovyjarjarantlr.Utils: void error(java.lang.String)>(r0);

        return;
    }

    public void panic()
    {
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        virtualinvoke r0.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>("panic");

        return;
    }

    public void panic(java.lang.String)
    {
        groovyjarjarantlr.Tool r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r0 := @this: groovyjarjarantlr.Tool;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("panic: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>($r5);

        return;
    }

    public java.io.File parent(java.io.File)
    {
        java.io.File r0, $r2, $r3, $r5;
        groovyjarjarantlr.Tool r7;
        java.lang.String $r1, $r4, $r6;
        boolean $z0;

        r7 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getParent()>();

        if $r1 != null goto label2;

        $z0 = virtualinvoke r0.<java.io.File: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r5 = new java.io.File;

        $r6 = <java.io.File: java.lang.String separator>;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        return $r5;

     label1:
        $r3 = new java.io.File;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        return $r3;

     label2:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r2;
    }

    public static groovyjarjarantlr.collections.impl.Vector parseSeparatedList(java.lang.String, char)
    {
        char c0;
        java.util.StringTokenizer $r0;
        int $i1;
        java.lang.String r1, $r2, $r4;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r0 = new java.util.StringTokenizer;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, $r2);

        $r3 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: void <init>(int)>(10);

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>($r4);

        goto label1;

     label2:
        $i1 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i1 != 0 goto label3;

        return null;

     label3:
        return $r3;
    }

    public java.lang.String pathToFile(java.lang.String)
    {
        groovyjarjarantlr.Tool r8;
        java.lang.StringBuffer $r4, $r6, $r9;
        int $i0, $i1, $i3;
        java.lang.String $r0, r1, $r2, $r5, $r7;

        r8 := @this: groovyjarjarantlr.Tool;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator");

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>($r0);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label1:
        $i1 = $i0 + 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r2;
    }

    protected void processArguments(java.lang.String[])
    {
        java.lang.String[] r0;
        groovyjarjarantlr.Tool r6;
        int $i0, $i2, $i3, i4, $i5;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        char $c1;

        r6 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: java.lang.String[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label8;

        $r1 = r0[i4];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-diagnostic");

        if $z0 == 0 goto label2;

        r6.<groovyjarjarantlr.Tool: boolean genDiagnostics> = 1;

        r6.<groovyjarjarantlr.Tool: boolean genHTML> = 0;

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i4);

        goto label7;

     label2:
        $r2 = r0[i4];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-o");

        if $z1 == 0 goto label4;

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i4);

        $i3 = i4 + 1;

        $i2 = lengthof r0;

        if $i3 < $i2 goto label3;

        virtualinvoke r6.<groovyjarjarantlr.Tool: void error(java.lang.String)>("missing output directory with -o option; ignoring");

        goto label7;

     label3:
        i4 = i4 + 1;

        $r8 = r0[i4];

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setOutputDirectory(java.lang.String)>($r8);

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i4);

        goto label7;

     label4:
        $r3 = r0[i4];

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-html");

        if $z2 == 0 goto label5;

        r6.<groovyjarjarantlr.Tool: boolean genHTML> = 1;

        r6.<groovyjarjarantlr.Tool: boolean genDiagnostics> = 0;

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i4);

        goto label7;

     label5:
        $r4 = r0[i4];

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-docbook");

        if $z3 == 0 goto label6;

        r6.<groovyjarjarantlr.Tool: boolean genDocBook> = 1;

        r6.<groovyjarjarantlr.Tool: boolean genDiagnostics> = 0;

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i4);

        goto label7;

     label6:
        $r5 = r0[i4];

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c1;

        if $i5 == 45 goto label7;

        $r7 = r0[i4];

        r6.<groovyjarjarantlr.Tool: java.lang.String grammarFile> = $r7;

        virtualinvoke r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i4);

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return;
    }

    public void setArgOK(int)
    {
        int i0;
        groovyjarjarantlr.Tool r0;
        groovyjarjarantlr.collections.impl.BitSet $r1;

        r0 := @this: groovyjarjarantlr.Tool;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.collections.impl.BitSet cmdLineArgValid>;

        virtualinvoke $r1.<groovyjarjarantlr.collections.impl.BitSet: void add(int)>(i0);

        return;
    }

    public void setOutputDirectory(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Tool r0;

        r0 := @this: groovyjarjarantlr.Tool;

        r1 := @parameter0: java.lang.String;

        r0.<groovyjarjarantlr.Tool: java.lang.String outputDir> = r1;

        return;
    }

    public void toolError(java.lang.String)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.Tool r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: groovyjarjarantlr.Tool;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void warning(java.lang.String)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.Tool r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: groovyjarjarantlr.Tool;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void warning(java.lang.String, java.lang.String, int, int)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.FileLineFormatter $r2;
        groovyjarjarantlr.Tool r10;
        java.lang.StringBuffer $r0, $r5, $r6, $r8;
        int i0, i1;
        java.lang.String r3, $r4, r7, $r9;

        r10 := @this: groovyjarjarantlr.Tool;

        r7 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <groovyjarjarantlr.FileLineFormatter: groovyjarjarantlr.FileLineFormatter getFormatter()>();

        $r4 = virtualinvoke $r2.<groovyjarjarantlr.FileLineFormatter: java.lang.String getFormatString(java.lang.String,int,int)>(r3, i0, i1);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning:");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    public void warning(java.lang.String[], java.lang.String, int, int)
    {
        groovyjarjarantlr.FileLineFormatter $r5, $r14;
        java.lang.String[] r0;
        groovyjarjarantlr.Tool r1;
        java.lang.StringBuffer $r3, $r7, $r8, $r10, $r13, $r16, $r17, $r19;
        int i0, i1, $i2, i3, $i4;
        java.lang.String r2, $r6, $r9, $r11, $r15, $r18, $r20;
        java.io.PrintStream $r4, $r12;

        r1 := @this: groovyjarjarantlr.Tool;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 == null goto label1;

        $i2 = lengthof r0;

        if $i2 != 0 goto label2;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("bad multi-line message to Tool.warning");

     label2:
        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = staticinvoke <groovyjarjarantlr.FileLineFormatter: groovyjarjarantlr.FileLineFormatter getFormatter()>();

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.FileLineFormatter: java.lang.String getFormatString(java.lang.String,int,int)>(r2, i0, i1);

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning:");

        $r18 = r0[0];

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r20);

        i3 = 1;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label4;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = staticinvoke <groovyjarjarantlr.FileLineFormatter: groovyjarjarantlr.FileLineFormatter getFormatter()>();

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.FileLineFormatter: java.lang.String getFormatString(java.lang.String,int,int)>(r2, i0, i1);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    ");

        $r9 = r0[i3];

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r11);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public void setNameSpace(java.lang.String)
    {
        groovyjarjarantlr.Tool r0;
        java.lang.String r3, $r4;
        groovyjarjarantlr.NameSpace $r1, $r2;

        r0 := @this: groovyjarjarantlr.Tool;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.NameSpace nameSpace>;

        if null != $r1 goto label1;

        $r2 = new groovyjarjarantlr.NameSpace;

        $r4 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>(r3, "\"", "\"");

        specialinvoke $r2.<groovyjarjarantlr.NameSpace: void <init>(java.lang.String)>($r4);

        r0.<groovyjarjarantlr.Tool: groovyjarjarantlr.NameSpace nameSpace> = $r2;

     label1:
        return;
    }

    static void <clinit>()
    {
        <groovyjarjarantlr.Tool: java.lang.String version> = "";

        return;
    }
}
