public abstract class org.dom4j.tree.AbstractAttribute extends org.dom4j.tree.AbstractNode implements org.dom4j.Attribute
{

    public void <init>()
    {
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        return 2;
    }

    public void setNamespace(org.dom4j.Namespace)
    {
        java.lang.UnsupportedOperationException $r0;
        org.dom4j.tree.AbstractAttribute r1;
        org.dom4j.Namespace r2;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        r2 := @parameter0: org.dom4j.Namespace;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This Attribute is read only and cannot be changed");

        throw $r0;
    }

    public java.lang.String getText()
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getValue()>();

        return $r1;
    }

    public void setText(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: void setValue(java.lang.String)>(r1);

        return;
    }

    public void setValue(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.dom4j.tree.AbstractAttribute r1;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This Attribute is read only and cannot be changed");

        throw $r0;
    }

    public java.lang.Object getData()
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getValue()>();

        return $r1;
    }

    public void setData(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: void setValue(java.lang.String)>($r2);

        return;
    }

    public java.lang.String toString()
    {
        org.dom4j.tree.AbstractAttribute r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r2, $r5, $r8, $r11;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [Attribute: name ");

        $r5 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value \"");

        $r8 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getValue()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String asXML()
    {
        org.dom4j.tree.AbstractAttribute r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r5 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getValue()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public void write(java.io.Writer) throws java.io.IOException
    {
        org.dom4j.tree.AbstractAttribute r1;
        java.io.Writer r0;
        java.lang.String $r2, $r3;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        r0 := @parameter0: java.io.Writer;

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("=\"");

        $r3 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getValue()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r3);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("\"");

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.Visitor r0;
        org.dom4j.tree.AbstractAttribute r1;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        r0 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke r0.<org.dom4j.Visitor: void visit(org.dom4j.Attribute)>(r1);

        return;
    }

    public org.dom4j.Namespace getNamespace()
    {
        org.dom4j.QName $r1;
        org.dom4j.tree.AbstractAttribute r0;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.Namespace getNamespace()>();

        return $r2;
    }

    public java.lang.String getName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getNamespacePrefix()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getQualifiedName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        return $r2;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractAttribute r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        org.dom4j.Element $r2, r5;
        java.lang.String $r3, $r4, $r6, $r7, $r8, $r9;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        r5 := @parameter0: org.dom4j.Element;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: org.dom4j.Element getParent()>();

        if $r2 == null goto label1;

        if $r2 == r5 goto label1;

        $r6 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getPath(org.dom4j.Element)>(r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r7 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespacePrefix()>();

        if $r7 == null goto label2;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        if $r8 == null goto label2;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        $r9 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        goto label4;

     label3:
        $r4 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractAttribute r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        org.dom4j.Element $r2, r5;
        java.lang.String $r3, $r4, $r6, $r7, $r8, $r9;

        r1 := @this: org.dom4j.tree.AbstractAttribute;

        r5 := @parameter0: org.dom4j.Element;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: org.dom4j.Element getParent()>();

        if $r2 == null goto label1;

        if $r2 == r5 goto label1;

        $r6 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getUniquePath(org.dom4j.Element)>(r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r7 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespacePrefix()>();

        if $r7 == null goto label2;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        if $r8 == null goto label2;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        $r9 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        goto label4;

     label3:
        $r4 = virtualinvoke r1.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected org.dom4j.Node createXPathResult(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractAttribute r2;
        org.dom4j.tree.DefaultAttribute $r0;
        org.dom4j.Element r1;
        org.dom4j.QName $r3;
        java.lang.String $r4;

        r2 := @this: org.dom4j.tree.AbstractAttribute;

        r1 := @parameter0: org.dom4j.Element;

        $r0 = new org.dom4j.tree.DefaultAttribute;

        $r3 = virtualinvoke r2.<org.dom4j.tree.AbstractAttribute: org.dom4j.QName getQName()>();

        $r4 = virtualinvoke r2.<org.dom4j.tree.AbstractAttribute: java.lang.String getValue()>();

        specialinvoke $r0.<org.dom4j.tree.DefaultAttribute: void <init>(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r1, $r3, $r4);

        return $r0;
    }
}
