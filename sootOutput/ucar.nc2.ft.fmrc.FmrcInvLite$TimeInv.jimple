class ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv extends java.lang.Object implements java.lang.Comparable
{
    int runIdx;
    int timeIdx;
    double offset;
    double startIntv;
    boolean isInterval;
    final ucar.nc2.ft.fmrc.FmrcInvLite this$0;

    void <init>(ucar.nc2.ft.fmrc.FmrcInvLite, int, int, double, double)
    {
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv r0;
        int i0, i1;
        double d0, d1;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv;

        r1 := @parameter0: ucar.nc2.ft.fmrc.FmrcInvLite;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: ucar.nc2.ft.fmrc.FmrcInvLite this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double startIntv> = #NaN;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: boolean isInterval> = 0;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int runIdx> = i0;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int timeIdx> = i1;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double startIntv> = d0;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double offset> = d1;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: boolean isInterval> = 1;

        return;
    }

    void <init>(ucar.nc2.ft.fmrc.FmrcInvLite, int, int, double)
    {
        ucar.nc2.ft.fmrc.FmrcInvLite r1;
        ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv r0;
        int i0, i1;
        double d0;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv;

        r1 := @parameter0: ucar.nc2.ft.fmrc.FmrcInvLite;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: ucar.nc2.ft.fmrc.FmrcInvLite this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double startIntv> = #NaN;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: boolean isInterval> = 0;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int runIdx> = i0;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int timeIdx> = i1;

        r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double offset> = d0;

        return;
    }

    public int compareTo(ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv)
    {
        ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv r0, r1;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv;

        r1 := @parameter0: ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv;

        $d1 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double offset>;

        $d0 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double offset>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        if $i0 != 0 goto label1;

        $z0 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: boolean isInterval>;

        if $z0 == 0 goto label1;

        $d3 = r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double startIntv>;

        $d2 = r1.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: double startIntv>;

        $i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d3, $d2);

        return $i1;

     label1:
        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv;

        r1 := @parameter0: java.lang.Object;

        $r2 = (ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv) r1;

        $i0 = virtualinvoke r0.<ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv: int compareTo(ucar.nc2.ft.fmrc.FmrcInvLite$TimeInv)>($r2);

        return $i0;
    }
}
