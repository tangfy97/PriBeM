class org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.WaveletDataListener
{
    final org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0;

    void <init>(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onParticipantAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.WaveletListener r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1, $r7;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.WaveletData r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r8 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.WaveletListener) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r5.<org.waveprotocol.wave.model.wave.WaveletListener: void onParticipantAdded(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.ParticipantId)>($r7, r6);

        goto label1;

     label2:
        return;
    }

    public void onParticipantRemoved(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.WaveletListener r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1, $r7;
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.WaveletData r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r8 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.WaveletListener) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r5.<org.waveprotocol.wave.model.wave.WaveletListener: void onParticipantRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.ParticipantId)>($r7, r6);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener r8;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r4, $r9;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.Object $r7;
        org.waveprotocol.wave.model.wave.data.WaveletData r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r10 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.wave.WaveletListener) $r7;

        $r9 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r8.<org.waveprotocol.wave.model.wave.WaveletListener: void onBlipAdded(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip)>($r9, $r3);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataSubmitted(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener r8;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r4, $r9;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.Object $r7;
        org.waveprotocol.wave.model.wave.data.WaveletData r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r10 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.wave.WaveletListener) $r7;

        $r9 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r8.<org.waveprotocol.wave.model.wave.WaveletListener: void onBlipSubmitted(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip)>($r9, $r3);

        goto label1;

     label2:
        return;
    }

    public void onLastModifiedTimeChanged(org.waveprotocol.wave.model.wave.data.WaveletData, long, long)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.WaveletListener r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1, $r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.WaveletData r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r7 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.WaveletListener) $r4;

        $r6 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r5.<org.waveprotocol.wave.model.wave.WaveletListener: void onLastModifiedTimeChanged(org.waveprotocol.wave.model.wave.ObservableWavelet,long,long)>($r6, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData, long, long)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.WaveletListener r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1, $r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.WaveletData r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r7 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.WaveletListener) $r4;

        $r6 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r5.<org.waveprotocol.wave.model.wave.WaveletListener: void onVersionChanged(org.waveprotocol.wave.model.wave.ObservableWavelet,long,long)>($r6, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onHashedVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.WaveletListener r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1, $r8;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.version.HashedVersion r6, r7;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.WaveletData r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r9 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r7 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.WaveletListener) $r4;

        $r8 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r5.<org.waveprotocol.wave.model.wave.WaveletListener: void onHashedVersionChanged(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r8, r6, r7);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataTimestampModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, long, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener r8;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r4, $r9;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.Object $r7;
        org.waveprotocol.wave.model.wave.data.WaveletData r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r10 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.wave.WaveletListener) $r7;

        $r9 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r8.<org.waveprotocol.wave.model.wave.WaveletListener: void onBlipTimestampModified(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip,long,long)>($r9, $r3, l0, l1);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataVersionModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, long, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r4, $r9;
        java.lang.Long $r10, $r11;
        org.waveprotocol.wave.model.wave.data.WaveletData r12;
        boolean $z0;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener r8;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.Object $r7;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r12 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.wave.WaveletListener) $r7;

        $r9 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke r8.<org.waveprotocol.wave.model.wave.WaveletListener: void onBlipVersionModified(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip,java.lang.Long,java.lang.Long)>($r9, $r3, $r10, $r11);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataContributorAdded(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener r8;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r4, $r10;
        org.waveprotocol.wave.model.wave.ParticipantId r9;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.Object $r7;
        org.waveprotocol.wave.model.wave.data.WaveletData r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r11 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r9 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.wave.WaveletListener) $r7;

        $r10 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r8.<org.waveprotocol.wave.model.wave.WaveletListener: void onBlipContributorAdded(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip,org.waveprotocol.wave.model.wave.ParticipantId)>($r10, $r3, r9);

        goto label1;

     label2:
        return;
    }

    public void onBlipDataContributorRemoved(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener r8;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r4, $r10;
        org.waveprotocol.wave.model.wave.ParticipantId r9;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.Object $r7;
        org.waveprotocol.wave.model.wave.data.WaveletData r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r11 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        r9 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.wave.WaveletListener) $r7;

        $r10 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        interfaceinvoke r8.<org.waveprotocol.wave.model.wave.WaveletListener: void onBlipContributorRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip,org.waveprotocol.wave.model.wave.ParticipantId)>($r10, $r3, r9);

        goto label1;

     label2:
        return;
    }

    public void onRemoteBlipDataContentModified(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.WaveletListener r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1, $r7, $r8;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r9;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.WaveletData r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        r10 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.WaveletListener) $r4;

        $r8 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r7 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>(r6);

        interfaceinvoke r5.<org.waveprotocol.wave.model.wave.WaveletListener: void onRemoteBlipContentModified(org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.wave.Blip)>($r8, $r9);

        goto label1;

     label2:
        return;
    }
}
