public class org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback extends java.lang.Object implements org.apache.cxf.io.CachedOutputStreamCallback
{
    private final javax.xml.transform.Templates xsltTemplate;
    private final java.io.OutputStream origStream;

    public void <init>(javax.xml.transform.Templates, java.io.OutputStream)
    {
        java.io.OutputStream r2;
        org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback r0;
        javax.xml.transform.Templates r1;

        r0 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback;

        r1 := @parameter0: javax.xml.transform.Templates;

        r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: javax.xml.transform.Templates xsltTemplate> = r1;

        r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: java.io.OutputStream origStream> = r2;

        return;
    }

    public void onFlush(org.apache.cxf.io.CachedOutputStream)
    {
        org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback r0;
        org.apache.cxf.io.CachedOutputStream r1;

        r0 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback;

        r1 := @parameter0: org.apache.cxf.io.CachedOutputStream;

        return;
    }

    public void onClose(org.apache.cxf.io.CachedOutputStream)
    {
        java.lang.Throwable $r14;
        javax.xml.transform.Templates $r2;
        java.lang.Object[] $r19;
        org.apache.cxf.interceptor.Fault $r17;
        java.lang.String $r11, $r13, $r20, $r25, $r27;
        java.io.OutputStream $r5, $r6, $r15;
        org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback r0;
        java.io.IOException $r7, $r16, $r21;
        java.util.logging.Logger $r8, $r18, $r22;
        java.lang.StringBuilder $r9, $r10, $r12, $r23, $r24, $r26;
        org.apache.cxf.io.CachedOutputStream r1;
        java.io.InputStream $r3, $r4;

        r0 := @this: org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback;

        r1 := @parameter0: org.apache.cxf.io.CachedOutputStream;

     label01:
        $r2 = r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: javax.xml.transform.Templates xsltTemplate>;

        $r3 = virtualinvoke r1.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <org.apache.cxf.feature.transform.XSLTUtils: java.io.InputStream transform(javax.xml.transform.Templates,java.io.InputStream)>($r2, $r3);

        $r5 = r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: java.io.OutputStream origStream>;

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>($r4, $r5);

     label02:
        $r6 = r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: java.io.OutputStream origStream>;

        virtualinvoke $r6.<java.io.OutputStream: void close()>();

     label03:
        goto label11;

     label04:
        $r21 := @caughtexception;

        $r22 = staticinvoke <org.apache.cxf.feature.transform.XSLTOutInterceptor: java.util.logging.Logger access$000()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r25 = virtualinvoke $r21.<java.io.IOException: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.util.logging.Logger: void warning(java.lang.String)>($r27);

        goto label11;

     label05:
        $r16 := @caughtexception;

        $r17 = new org.apache.cxf.interceptor.Fault;

        $r18 = staticinvoke <org.apache.cxf.feature.transform.XSLTOutInterceptor: java.util.logging.Logger access$000()>();

        $r19 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke $r16.<java.io.IOException: java.lang.String getMessage()>();

        $r19[0] = $r20;

        specialinvoke $r17.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("STREAM_COPY", $r18, $r16, $r19);

        throw $r17;

     label06:
        $r14 := @caughtexception;

     label07:
        $r15 = r0.<org.apache.cxf.feature.transform.XSLTOutInterceptor$XSLTCachedOutputStreamCallback: java.io.OutputStream origStream>;

        virtualinvoke $r15.<java.io.OutputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $r8 = staticinvoke <org.apache.cxf.feature.transform.XSLTOutInterceptor: java.util.logging.Logger access$000()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r11 = virtualinvoke $r7.<java.io.IOException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void warning(java.lang.String)>($r13);

     label10:
        throw $r14;

     label11:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label05 to label07 with label06;
    }
}
