class org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber extends org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter
{
    protected final int iMinPrintedDigits;

    protected void <init>(org.joda.time.DateTimeFieldType, int, boolean, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber r0;
        int i0, i1;
        org.joda.time.DateTimeFieldType r1;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r1, i0, z0);

        r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> = i1;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits>;

        return $i0;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber r0;
        org.joda.time.DateTimeZone r6;
        org.joda.time.Chronology r1;
        long l0;
        java.lang.RuntimeException $r5;
        java.lang.StringBuffer r4;
        java.util.Locale r7;
        int $i1, $i2, $i3, i4;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        r4 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        i4 := @parameter3: int;

        r6 := @parameter4: org.joda.time.DateTimeZone;

        r7 := @parameter5: java.util.Locale;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0);

        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r4, $i1, $i2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.StringBuffer,int)>(r4, $i3);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber r0;
        org.joda.time.DateTimeZone r6;
        org.joda.time.Chronology r1;
        long l0;
        java.lang.RuntimeException $r5;
        java.util.Locale r7;
        java.io.Writer r4;
        int $i1, $i2, $i3, i4;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        r4 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        i4 := @parameter3: int;

        r6 := @parameter4: org.joda.time.DateTimeZone;

        r7 := @parameter5: java.util.Locale;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0);

        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r4, $i1, $i2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void printUnknownString(java.io.Writer,int)>(r4, $i3);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber r1;
        java.lang.RuntimeException $r5;
        java.lang.StringBuffer r3;
        java.util.Locale r6;
        org.joda.time.ReadablePartial r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r2, $r4;
        boolean $z0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        r3 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.joda.time.ReadablePartial;

        r6 := @parameter2: java.util.Locale;

        $r2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>;

        $z0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label4;

     label1:
        $r4 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>;

        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r4);

        $i2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r3, $i1, $i2);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $i3 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.StringBuffer,int)>(r3, $i3);

        goto label5;

     label4:
        $i0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.StringBuffer,int)>(r3, $i0);

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber r1;
        java.lang.RuntimeException $r5;
        java.util.Locale r6;
        org.joda.time.ReadablePartial r0;
        java.io.Writer r3;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r2, $r4;
        boolean $z0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        r3 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.joda.time.ReadablePartial;

        r6 := @parameter2: java.util.Locale;

        $r2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>;

        $z0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label4;

     label1:
        $r4 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>;

        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r4);

        $i2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r3, $i1, $i2);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $i3 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void printUnknownString(java.io.Writer,int)>(r3, $i3);

        goto label5;

     label4:
        $i0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void printUnknownString(java.io.Writer,int)>(r3, $i0);

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
}
