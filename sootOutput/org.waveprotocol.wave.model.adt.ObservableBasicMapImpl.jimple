public class org.waveprotocol.wave.model.adt.ObservableBasicMapImpl extends java.lang.Object implements org.waveprotocol.wave.model.adt.ObservableBasicMap
{
    private final java.util.Map data;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    public void <init>()
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: java.util.Map data> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        return;
    }

    public void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r3;
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        java.lang.Object r1, r2, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: java.util.Map data>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r4, r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: void fireOnEntrySet(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, $r4, r2);

        return 1;
    }

    public java.util.Set keySet()
    {
        java.util.Map $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        $r1 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: java.util.Map data>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public void remove(java.lang.Object)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: void fireOnEntrySet(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, $r3, null);

     label1:
        return;
    }

    private void fireOnEntrySet(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicMapImpl r0;
        java.lang.Object $r3, r5, r6, r7;
        org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicMapImpl;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicMapImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener: void onEntrySet(java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r6, r7);

        goto label1;

     label2:
        return;
    }
}
