public class com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables extends java.lang.Object implements com.hp.hpl.jena.sparql.graph.NodeTransform
{
    private com.hp.hpl.jena.sparql.core.VarAlloc varAlloc;
    private java.util.Map mapping;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.VarAlloc $r1;
        java.util.HashMap $r2;
        com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>("~");

        r0.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: java.util.Map mapping> = $r2;

        return;
    }

    public com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r7;
        com.hp.hpl.jena.sparql.core.Var $r5;
        com.hp.hpl.jena.sparql.core.VarAlloc $r4;
        java.util.Map $r2, $r6;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r2 = r1.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: java.util.Map mapping>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (com.hp.hpl.jena.graph.Node) $r3;

        if r7 != null goto label2;

        $r4 = r1.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        $r6 = r1.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: java.util.Map mapping>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        r7 = $r5;

     label2:
        return r7;
    }

    public volatile java.lang.Object convert(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Node) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }
}
