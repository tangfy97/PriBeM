public class org.springframework.expression.spel.ast.MethodReference extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private final java.lang.String name;
    private final boolean nullSafe;
    private volatile org.springframework.expression.MethodExecutor cachedExecutor;

    public transient void <init>(boolean, java.lang.String, int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        org.springframework.expression.spel.ast.MethodReference r0;
        int i0;
        java.lang.String r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;
        boolean z0;

        r0 := @this: org.springframework.expression.spel.ast.MethodReference;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        r0.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name> = r2;

        r0.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe> = z0;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        boolean $z0;
        org.springframework.expression.AccessException $r28, $r38;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r5;
        org.springframework.expression.EvaluationContext $r13, $r17;
        org.springframework.expression.spel.ast.MethodReference r2;
        java.util.List $r11, $r25;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;
        org.springframework.expression.spel.SpelEvaluationException $r21, $r29;
        java.lang.Throwable $r39;
        java.lang.Object[] r3, $r22, $r30;
        org.springframework.expression.MethodExecutor $r12, r40;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r10, $r24, $r26, $r31, $r36, $r37;
        org.springframework.expression.TypedValue $r1, $r4, $r7, $r14, $r16, $r18, $r20, $r27, $r33;
        org.springframework.expression.spel.SpelMessage $r23, $r32;
        java.lang.Object $r8, $r9, $r15, $r19, $r34;
        java.lang.Class $r35;

        r2 := @this: org.springframework.expression.spel.ast.MethodReference;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $i0 = virtualinvoke r2.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>();

        r3 = newarray (java.lang.Object)[$i0];

        i4 = 0;

        goto label04;

     label01:
        $r4 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4);

        $r5 = r2.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r6 = $r5[i4];

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        $r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r3[i4] = $r8;

        goto label03;

     label02:
        $r39 := @caughtexception;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r39;

     label03:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        i4 = i4 + 1;

     label04:
        $i1 = lengthof r3;

        if i4 < $i1 goto label01;

        $r9 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r9 != null goto label06;

        $z0 = r2.<org.springframework.expression.spel.ast.MethodReference: boolean nullSafe>;

        if $z0 == 0 goto label05;

        $r27 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r27;

     label05:
        $r21 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r2.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>();

        $r23 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_CALL_ON_NULL_OBJECT_NOT_ALLOWED>;

        $r22 = newarray (java.lang.Object)[1];

        $r24 = r2.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>;

        $r25 = specialinvoke r2.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3);

        $r26 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>($r24, $r25);

        $r22[0] = $r26;

        specialinvoke $r21.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r23, $r22);

        throw $r21;

     label06:
        r40 = r2.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor>;

        if r40 == null goto label10;

     label07:
        $r17 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r18 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r19 = virtualinvoke $r18.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r20 = interfaceinvoke r40.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r17, $r19, r3);

     label08:
        return $r20;

     label09:
        $r38 := @caughtexception;

        specialinvoke r2.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r0, $r38);

        r2.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = null;

     label10:
        $r10 = r2.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>;

        $r11 = specialinvoke r2.<org.springframework.expression.spel.ast.MethodReference: java.util.List getTypes(java.lang.Object[])>(r3);

        $r12 = specialinvoke r2.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String,java.util.List,org.springframework.expression.spel.ExpressionState)>($r10, $r11, r0);

        r2.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.MethodExecutor cachedExecutor> = $r12;

     label11:
        $r13 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r14 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r15 = virtualinvoke $r14.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r16 = interfaceinvoke $r12.<org.springframework.expression.MethodExecutor: org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Object[])>($r13, $r15, r3);

     label12:
        return $r16;

     label13:
        $r28 := @caughtexception;

        specialinvoke r2.<org.springframework.expression.spel.ast.MethodReference: void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState,org.springframework.expression.AccessException)>(r0, $r28);

        $r29 = new org.springframework.expression.spel.SpelEvaluationException;

        $i3 = virtualinvoke r2.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>();

        $r32 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_METHOD_INVOCATION>;

        $r30 = newarray (java.lang.Object)[3];

        $r31 = r2.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>;

        $r30[0] = $r31;

        $r33 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r34 = virtualinvoke $r33.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r35 = virtualinvoke $r34.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r30[1] = $r36;

        $r37 = virtualinvoke $r28.<org.springframework.expression.AccessException: java.lang.String getMessage()>();

        $r30[2] = $r37;

        specialinvoke $r29.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r28, $r32, $r30);

        throw $r29;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch org.springframework.expression.AccessException from label07 to label08 with label09;
        catch org.springframework.expression.AccessException from label11 to label12 with label13;
    }

    private void throwSimpleExceptionIfPossible(org.springframework.expression.spel.ExpressionState, org.springframework.expression.AccessException)
    {
        java.lang.Throwable $r1, $r17;
        org.springframework.expression.ExpressionInvocationTargetException $r2;
        int $i0;
        java.lang.String $r5, $r12, $r15;
        org.springframework.expression.TypedValue $r9;
        boolean $z0;
        java.lang.RuntimeException $r16;
        org.springframework.expression.AccessException r0;
        org.springframework.expression.spel.ast.MethodReference r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r13, $r14;
        org.springframework.expression.spel.ExpressionState r8;
        java.lang.Object $r10;
        java.lang.Class $r11;

        r3 := @this: org.springframework.expression.spel.ast.MethodReference;

        r8 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r0 := @parameter1: org.springframework.expression.AccessException;

        $r1 = virtualinvoke r0.<org.springframework.expression.AccessException: java.lang.Throwable getCause()>();

        if $r1 != null goto label1;

        $r17 = null;

        goto label2;

     label1:
        $r17 = virtualinvoke $r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label2:
        if $r17 == null goto label4;

        $z0 = $r17 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label3;

        $r16 = (java.lang.RuntimeException) $r17;

        throw $r16;

     label3:
        $r2 = new org.springframework.expression.ExpressionInvocationTargetException;

        $i0 = virtualinvoke r3.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("A problem occurred when trying to execute method \'");

        $r5 = r3.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on object of type \'");

        $r9 = virtualinvoke r8.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r10 = virtualinvoke $r9.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.springframework.expression.ExpressionInvocationTargetException: void <init>(int,java.lang.String,java.lang.Throwable)>($i0, $r15, $r17);

        throw $r2;

     label4:
        return;
    }

    private transient java.util.List getTypes(java.lang.Object[])
    {
        java.lang.Object[] r1;
        java.util.ArrayList $r0;
        org.springframework.expression.spel.ast.MethodReference r4;
        org.springframework.core.convert.TypeDescriptor $r3;
        int $i0, i1, i2;
        java.lang.Object r2;

        r4 := @this: org.springframework.expression.spel.ast.MethodReference;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof r1;

        i2 = 0;

        goto label2;

     label1:
        r2 = r1[i2];

        $r3 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        i2 = i2 + 1;

     label2:
        if i2 < i1 goto label1;

        return $r0;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.MethodReference r1;
        int i0, $i1;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r2, $r5, $r6;
        org.springframework.expression.spel.SpelNode $r4;

        r1 := @this: org.springframework.expression.spel.ast.MethodReference;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.springframework.expression.spel.ast.MethodReference: java.lang.String name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i0 = 0;

        goto label3;

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r4 = virtualinvoke r1.<org.springframework.expression.spel.ast.MethodReference: org.springframework.expression.spel.SpelNode getChild(int)>(i0);

        $r5 = interfaceinvoke $r4.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke r1.<org.springframework.expression.spel.ast.MethodReference: int getChildCount()>();

        if i0 < $i1 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private org.springframework.expression.MethodExecutor findAccessorForMethod(java.lang.String, java.util.List, org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r5, $r19;
        java.lang.Object[] $r7, $r20;
        org.springframework.expression.MethodResolver r15;
        org.springframework.expression.MethodExecutor $r17;
        int $i0, $i1;
        java.lang.String r8, $r11, $r12;
        org.springframework.expression.TypedValue $r1;
        boolean $z0, $z1;
        org.springframework.expression.spel.SpelMessage $r10, $r21;
        java.util.Iterator $r13;
        org.springframework.expression.AccessException $r18;
        org.springframework.expression.EvaluationContext $r3, $r16;
        java.util.List $r4, r9;
        org.springframework.expression.spel.ast.MethodReference r6;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r2, $r14;
        java.lang.Class $r22, $r23;

        r6 := @this: org.springframework.expression.spel.ast.MethodReference;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.util.List;

        r0 := @parameter2: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = interfaceinvoke $r3.<org.springframework.expression.EvaluationContext: java.util.List getMethodResolvers()>();

        if $r4 == null goto label6;

        $r13 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.springframework.expression.MethodResolver) $r14;

     label2:
        $r16 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r17 = interfaceinvoke r15.<org.springframework.expression.MethodResolver: org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.util.List)>($r16, $r2, r8, r9);

        if $r17 == null goto label5;

     label3:
        return $r17;

     label4:
        $r18 := @caughtexception;

        $r19 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke r6.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>();

        $r21 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROBLEM_LOCATING_METHOD>;

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = r8;

        $r22 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r20[1] = $r22;

        specialinvoke $r19.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r18, $r21, $r20);

        throw $r19;

     label5:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

     label6:
        $r5 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r6.<org.springframework.expression.spel.ast.MethodReference: int getStartPosition()>();

        $r10 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage METHOD_NOT_FOUND>;

        $r7 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatMethodForMessage(java.lang.String,java.util.List)>(r8, r9);

        $r7[0] = $r11;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label7;

        $r23 = (java.lang.Class) $r2;

        goto label8;

     label7:
        $r23 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

     label8:
        $r12 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatClassNameForMessage(java.lang.Class)>($r23);

        $r7[1] = $r12;

        specialinvoke $r5.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r10, $r7);

        throw $r5;

        catch org.springframework.expression.AccessException from label2 to label3 with label4;
    }
}
