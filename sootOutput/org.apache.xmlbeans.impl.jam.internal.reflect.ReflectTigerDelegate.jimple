public abstract class org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate extends org.apache.xmlbeans.impl.jam.internal.TigerDelegate
{
    private static final java.lang.String IMPL_NAME;

    public static org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate create(org.apache.xmlbeans.impl.jam.provider.JamLogger)
    {
        java.lang.IllegalAccessException $r4;
        org.apache.xmlbeans.impl.jam.provider.JamLogger r0;
        java.lang.InstantiationException $r3;
        org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate r6;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.ClassNotFoundException $r5;
        boolean $z0;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamLogger;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: boolean isTigerReflectionAvailable(org.apache.xmlbeans.impl.jam.provider.JamLogger)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegateImpl_150");

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r6 = (org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate) $r2;

        virtualinvoke r6.<org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: void init(org.apache.xmlbeans.impl.jam.provider.JamLogger)>(r0);

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: void issue14BuildWarning(java.lang.Throwable,org.apache.xmlbeans.impl.jam.provider.JamLogger)>($r5, r0);

        goto label6;

     label4:
        $r4 := @caughtexception;

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r4);

        goto label6;

     label5:
        $r3 := @caughtexception;

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r3);

     label6:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
    }

    public static org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate create(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)
    {
        java.lang.IllegalAccessException $r6;
        org.apache.xmlbeans.impl.jam.provider.JamLogger $r1, $r5, $r7, $r9;
        java.lang.InstantiationException $r4;
        org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate r10;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.ClassNotFoundException $r8;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext r0;
        boolean $z0;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.ElementContext: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z0 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: boolean isTigerReflectionAvailable(org.apache.xmlbeans.impl.jam.provider.JamLogger)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegateImpl_150");

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        r10 = (org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate) $r3;

        virtualinvoke r10.<org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: void init(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>(r0);

     label2:
        return r10;

     label3:
        $r8 := @caughtexception;

        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.ElementContext: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        staticinvoke <org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: void issue14BuildWarning(java.lang.Throwable,org.apache.xmlbeans.impl.jam.provider.JamLogger)>($r8, $r9);

        goto label6;

     label4:
        $r6 := @caughtexception;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.ElementContext: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r7.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r6);

        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.ElementContext: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r5.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r4);

     label6:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
    }

    protected void <init>()
    {
        org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.TigerDelegate: void <init>()>();

        return;
    }

    public abstract void populateAnnotationTypeIfNecessary(java.lang.Class, org.apache.xmlbeans.impl.jam.mutable.MClass, org.apache.xmlbeans.impl.jam.internal.reflect.ReflectClassBuilder);

    public abstract boolean isEnum(java.lang.Class);

    public abstract java.lang.reflect.Constructor getEnclosingConstructor(java.lang.Class);

    public abstract java.lang.reflect.Method getEnclosingMethod(java.lang.Class);

    public abstract void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MMember, java.lang.reflect.Method);

    public abstract void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MConstructor, java.lang.reflect.Constructor);

    public abstract void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MField, java.lang.reflect.Field);

    public abstract void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MClass, java.lang.Class);

    public abstract void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MParameter, java.lang.reflect.Method, int);

    public abstract void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MParameter, java.lang.reflect.Constructor, int);

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegate: java.lang.String IMPL_NAME> = "org.apache.xmlbeans.impl.jam.internal.reflect.ReflectTigerDelegateImpl_150";

        return;
    }
}
