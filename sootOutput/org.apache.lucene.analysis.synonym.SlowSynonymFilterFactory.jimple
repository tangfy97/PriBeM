final class org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    private final java.lang.String synonyms;
    private final boolean ignoreCase;
    private final boolean expand;
    private final java.lang.String tf;
    private final java.util.Map tokArgs;
    private org.apache.lucene.analysis.synonym.SlowSynonymMap synMap;

    public void <init>(java.util.Map)
    {
        java.util.HashMap $r2;
        java.util.Map r1, $r11, $r18;
        java.lang.String $r3, $r4, $r5, $r10, $r13, r17, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r15;
        java.util.Set $r14;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r0;
        org.apache.lucene.util.Version $r12;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.Object $r16, $r20;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.Map tokArgs> = $r2;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, "synonyms");

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String synonyms> = $r3;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "ignoreCase", 0);

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: boolean ignoreCase> = $z0;

        $z1 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "expand", 1);

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: boolean expand> = $z1;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "tokenizerFactory");

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String tf> = $r4;

        $r5 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String tf>;

        if $r5 == null goto label2;

        virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: void assureMatchVersion()>();

        $r11 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.Map tokArgs>;

        $r12 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.util.Version getLuceneMatchVersion()>();

        $r13 = virtualinvoke $r12.<org.apache.lucene.util.Version: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("luceneMatchVersion", $r13);

        $r14 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $r18 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.Map tokArgs>;

        $r19 = virtualinvoke r17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^tokenizerFactory\\.", "");

        $r20 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

        interfaceinvoke $r15.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory r8;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r0;
        java.lang.Iterable $r4;
        org.apache.lucene.analysis.synonym.SlowSynonymMap $r5, $r6;
        org.apache.lucene.analysis.util.ResourceLoader r2;
        java.lang.String $r1, $r3, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r8 = null;

        $r1 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String tf>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String tf>;

        r8 = specialinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.util.TokenizerFactory loadTokenizerFactory(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r2, $r7);

     label1:
        $r3 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.String synonyms>;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.lang.Iterable loadRules(java.lang.String,org.apache.lucene.analysis.util.ResourceLoader)>($r3, r2);

        $r5 = new org.apache.lucene.analysis.synonym.SlowSynonymMap;

        $z0 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: boolean ignoreCase>;

        specialinvoke $r5.<org.apache.lucene.analysis.synonym.SlowSynonymMap: void <init>(boolean)>($z0);

        r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.synonym.SlowSynonymMap synMap> = $r5;

        $r6 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.synonym.SlowSynonymMap synMap>;

        $z1 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: boolean expand>;

        staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: void parseRules(java.lang.Iterable,org.apache.lucene.analysis.synonym.SlowSynonymMap,java.lang.String,java.lang.String,boolean,org.apache.lucene.analysis.util.TokenizerFactory)>($r4, $r6, "=>", ",", $z1, r8);

        return;
    }

    protected java.lang.Iterable loadRules(java.lang.String, org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        java.util.Iterator $r5;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r2;
        java.io.File $r0;
        java.util.ArrayList $r4;
        java.util.List $r3, $r10, r11;
        org.apache.lucene.analysis.util.ResourceLoader r8;
        java.lang.Object $r6;
        java.lang.String r1, r7, $r9;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: org.apache.lucene.analysis.util.ResourceLoader;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        r11 = virtualinvoke r2.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r8, r1);

        goto label3;

     label1:
        $r3 = virtualinvoke r2.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List splitFileNames(java.lang.String)>(r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r11 = $r4;

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r9 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke r2.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r8, $r9);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        goto label2;

     label3:
        return r11;
    }

    static void parseRules(java.lang.Iterable, org.apache.lucene.analysis.synonym.SlowSynonymMap, java.lang.String, java.lang.String, boolean, org.apache.lucene.analysis.util.TokenizerFactory) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory r8;
        boolean $z0, z1, $z2, $z3;
        java.util.List $r5, $r10, r14, r17, $r19, r29, r30;
        java.lang.StringBuilder $r25, $r26, $r27;
        java.lang.Iterable r0;
        java.util.ArrayList $r11;
        int $i0, $i1;
        java.lang.String r3, r4, r7, $r9, $r21, $r23, $r28;
        java.util.Iterator $r1, $r15, $r31;
        java.lang.IllegalArgumentException $r24;
        org.apache.lucene.analysis.synonym.SlowSynonymMap r18;
        java.lang.Object $r2, $r6, $r12, $r13, $r16, $r20, $r22;

        r0 := @parameter0: java.lang.Iterable;

        r18 := @parameter1: org.apache.lucene.analysis.synonym.SlowSynonymMap;

        r4 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        r8 := @parameter5: org.apache.lucene.analysis.util.TokenizerFactory;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r5 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List splitSmart(java.lang.String,java.lang.String,boolean)>(r3, r4, 0);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 2 goto label02;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Synonym Rule:");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label02:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 != 2 goto label03;

        $r20 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (java.lang.String) $r20;

        r29 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List getSynList(java.lang.String,java.lang.String,org.apache.lucene.analysis.util.TokenizerFactory)>($r21, r7, r8);

        $r22 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(1);

        $r23 = (java.lang.String) $r22;

        r30 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List getSynList(java.lang.String,java.lang.String,org.apache.lucene.analysis.util.TokenizerFactory)>($r23, r7, r8);

        goto label05;

     label03:
        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.lang.String) $r6;

        $r10 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List getSynList(java.lang.String,java.lang.String,org.apache.lucene.analysis.util.TokenizerFactory)>($r9, r7, r8);

        r29 = $r10;

        if z1 == 0 goto label04;

        r30 = $r10;

        goto label05;

     label04:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(1);

        r30 = $r11;

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

     label05:
        $r31 = interfaceinvoke r29.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r13 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.List) $r13;

        $r15 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.List) $r16;

        $r19 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymMap: java.util.List makeTokens(java.util.List)>(r17);

        virtualinvoke r18.<org.apache.lucene.analysis.synonym.SlowSynonymMap: void add(java.util.List,java.util.List,boolean,boolean)>(r14, $r19, 0, 1);

        goto label07;

     label08:
        goto label06;

     label09:
        goto label01;

     label10:
        return;
    }

    private static java.util.List getSynList(java.lang.String, java.lang.String, org.apache.lucene.analysis.util.TokenizerFactory) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory r7;
        java.util.Iterator $r4;
        java.util.ArrayList $r3;
        java.util.List $r2, $r8;
        java.lang.Object $r5;
        java.lang.String r0, r1, r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: org.apache.lucene.analysis.util.TokenizerFactory;

        $r2 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List splitSmart(java.lang.String,java.lang.String,boolean)>(r0, r1, 0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        if r7 != null goto label2;

        $r8 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List splitWS(java.lang.String,boolean)>(r6, 1);

        goto label3;

     label2:
        $r8 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.List splitByTokenizer(java.lang.String,org.apache.lucene.analysis.util.TokenizerFactory)>(r6, r7);

     label3:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label4:
        return $r3;
    }

    private static java.util.List splitByTokenizer(java.lang.String, org.apache.lucene.analysis.util.TokenizerFactory) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory r2;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute r6;
        java.lang.Throwable $r8;
        org.apache.lucene.analysis.TokenStream $r3;
        java.util.ArrayList $r4;
        java.io.StringReader $r0;
        int $i0;
        java.lang.String r1, $r7;
        org.apache.lucene.util.Attribute $r5;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.analysis.util.TokenizerFactory;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.TokenStream loadTokenizer(org.apache.lucene.analysis.util.TokenizerFactory,java.io.Reader)>(r2, $r0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        $r5 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        r6 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r5;

     label2:
        $z0 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke r6.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        if $i0 <= 0 goto label2;

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        virtualinvoke $r0.<java.io.StringReader: void close()>();

        goto label6;

     label4:
        $r8 := @caughtexception;

     label5:
        virtualinvoke $r0.<java.io.StringReader: void close()>();

        throw $r8;

     label6:
        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private org.apache.lucene.analysis.util.TokenizerFactory loadTokenizerFactory(org.apache.lucene.analysis.util.ResourceLoader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.TokenizerFactory r12;
        java.lang.Object[] $r5;
        java.lang.Class[] $r3;
        java.lang.RuntimeException $r11;
        java.lang.reflect.Constructor $r4;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r6;
        org.apache.lucene.analysis.util.ResourceLoaderAware $r9;
        java.lang.Exception $r10;
        java.util.Map $r7;
        org.apache.lucene.analysis.util.ResourceLoader r0;
        java.lang.Class $r2;
        java.lang.Object $r8;
        java.lang.String r1;
        boolean $z0;

        r6 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        r0 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.apache.lucene.analysis.util.ResourceLoader: java.lang.Class findClass(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/lucene/analysis/util/TokenizerFactory;");

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/util/Map;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r7 = r6.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: java.util.Map tokArgs>;

        $r5[0] = $r7;

        $r8 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        r12 = (org.apache.lucene.analysis.util.TokenizerFactory) $r8;

        $z0 = r12 instanceof org.apache.lucene.analysis.util.ResourceLoaderAware;

        if $z0 == 0 goto label2;

        $r9 = (org.apache.lucene.analysis.util.ResourceLoaderAware) r12;

        interfaceinvoke $r9.<org.apache.lucene.analysis.util.ResourceLoaderAware: void inform(org.apache.lucene.analysis.util.ResourceLoader)>(r0);

     label2:
        return r12;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static org.apache.lucene.analysis.TokenStream loadTokenizer(org.apache.lucene.analysis.util.TokenizerFactory, java.io.Reader)
    {
        org.apache.lucene.analysis.util.TokenizerFactory r0;
        java.io.Reader r1;
        org.apache.lucene.analysis.Tokenizer $r2;

        r0 := @parameter0: org.apache.lucene.analysis.util.TokenizerFactory;

        r1 := @parameter1: java.io.Reader;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.util.TokenizerFactory: org.apache.lucene.analysis.Tokenizer create(java.io.Reader)>(r1);

        return $r2;
    }

    public org.apache.lucene.analysis.synonym.SlowSynonymMap getSynonymMap()
    {
        org.apache.lucene.analysis.synonym.SlowSynonymMap $r1;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        $r1 = r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.synonym.SlowSynonymMap synMap>;

        return $r1;
    }

    public org.apache.lucene.analysis.synonym.SlowSynonymFilter create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.synonym.SlowSynonymFilter $r0;
        org.apache.lucene.analysis.synonym.SlowSynonymMap $r3;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r2;

        r2 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r0 = new org.apache.lucene.analysis.synonym.SlowSynonymFilter;

        $r3 = r2.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.synonym.SlowSynonymMap synMap>;

        specialinvoke $r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilter: void <init>(org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.synonym.SlowSynonymMap)>(r1, $r3);

        return $r0;
    }

    public static java.util.List splitWS(java.lang.String, boolean)
    {
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, $i4, $i6, i7, $i9, $i10;
        java.lang.String r2, $r3, $r4;
        boolean $z0, z1;
        char $c3, $c5, c8;
        java.lang.StringBuilder r6, $r8, $r9;

        r2 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r6 = $r8;

        i7 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label01:
        if i7 >= $i0 goto label11;

        $i2 = i7;

        i7 = i7 + 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i2);

        c8 = $c3;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label02;

        $i6 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label01;

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r6 = $r9;

        goto label01;

     label02:
        $i9 = (int) $c3;

        if $i9 != 92 goto label10;

        if z1 != 0 goto label03;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label03:
        if i7 < $i0 goto label04;

        goto label11;

     label04:
        $i4 = i7;

        i7 = i7 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        c8 = $c5;

        if z1 == 0 goto label10;

        $i10 = (int) $c5;

        lookupswitch($i10)
        {
            case 98: goto label08;
            case 102: goto label09;
            case 110: goto label05;
            case 114: goto label07;
            case 116: goto label06;
            default: goto label10;
        };

     label05:
        c8 = 10;

        goto label10;

     label06:
        c8 = 9;

        goto label10;

     label07:
        c8 = 13;

        goto label10;

     label08:
        c8 = 8;

        goto label10;

     label09:
        c8 = 12;

     label10:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c8);

        goto label01;

     label11:
        $i1 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label12;

        $r3 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label12:
        return $r7;
    }

    public static java.util.List splitSmart(java.lang.String, java.lang.String, boolean)
    {
        java.util.ArrayList $r8;
        int $i0, $i1, $i2, $i4, $i6, $i7, i8, $i10, $i11;
        java.lang.String r2, $r3, r4, $r5;
        boolean $z0, z1;
        char $c3, $c5, c9;
        java.lang.StringBuilder r7, $r9, $r10;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r7 = $r9;

        i8 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label01:
        if i8 >= $i0 goto label12;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String,int)>(r4, i8);

        if $z0 == 0 goto label03;

        $i6 = virtualinvoke r7.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label02;

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r7 = $r10;

     label02:
        $i7 = virtualinvoke r4.<java.lang.String: int length()>();

        i8 = i8 + $i7;

        goto label01;

     label03:
        $i2 = i8;

        i8 = i8 + 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i2);

        c9 = $c3;

        $i10 = (int) $c3;

        if $i10 != 92 goto label11;

        if z1 != 0 goto label04;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label04:
        if i8 < $i0 goto label05;

        goto label12;

     label05:
        $i4 = i8;

        i8 = i8 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        c9 = $c5;

        if z1 == 0 goto label11;

        $i11 = (int) $c5;

        lookupswitch($i11)
        {
            case 98: goto label09;
            case 102: goto label10;
            case 110: goto label06;
            case 114: goto label08;
            case 116: goto label07;
            default: goto label11;
        };

     label06:
        c9 = 10;

        goto label11;

     label07:
        c9 = 9;

        goto label11;

     label08:
        c9 = 13;

        goto label11;

     label09:
        c9 = 8;

        goto label11;

     label10:
        c9 = 12;

     label11:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9);

        goto label01;

     label12:
        $i1 = virtualinvoke r7.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label13;

        $r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label13:
        return $r8;
    }

    public volatile org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.synonym.SlowSynonymFilter $r2;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.synonym.SlowSynonymFilterFactory: org.apache.lucene.analysis.synonym.SlowSynonymFilter create(org.apache.lucene.analysis.TokenStream)>(r1);

        return $r2;
    }
}
