public final class com.mycila.inject.internal.guava.collect.SortedMaps extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.SortedMaps r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedMaps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.SortedMap transformValues(java.util.SortedMap, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.SortedMaps$1 $r1;
        com.mycila.inject.internal.guava.base.Function r0;
        java.util.SortedMap r2, $r3;

        r2 := @parameter0: java.util.SortedMap;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.SortedMaps$1;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SortedMaps$1: void <init>(com.mycila.inject.internal.guava.base.Function)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedMaps: java.util.SortedMap transformEntries(java.util.SortedMap,com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)>(r2, $r1);

        return $r3;
    }

    public static java.util.SortedMap transformEntries(java.util.SortedMap, com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)
    {
        com.mycila.inject.internal.guava.collect.SortedMaps$TransformedEntriesSortedMap $r0;
        com.mycila.inject.internal.guava.collect.Maps$EntryTransformer r2;
        java.util.SortedMap r1;

        r1 := @parameter0: java.util.SortedMap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Maps$EntryTransformer;

        $r0 = new com.mycila.inject.internal.guava.collect.SortedMaps$TransformedEntriesSortedMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SortedMaps$TransformedEntriesSortedMap: void <init>(java.util.SortedMap,com.mycila.inject.internal.guava.collect.Maps$EntryTransformer)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.SortedMapDifference difference(java.util.SortedMap, java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference $r15;
        java.util.Map r5;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.util.Map$Entry r11;
        java.util.Iterator $r9;
        java.util.Set $r8;
        java.util.TreeMap $r3, $r4, $r6, $r7;
        java.lang.Object $r10, $r12, $r13, $r14;
        java.util.Comparator $r1, $r2;
        java.util.SortedMap r0;
        com.mycila.inject.internal.guava.collect.SortedMapDifference $r16;

        r0 := @parameter0: java.util.SortedMap;

        r5 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.SortedMap: java.util.Comparator comparator()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedMaps: java.util.Comparator orNaturalOrder(java.util.Comparator)>($r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        interfaceinvoke $r4.<java.util.SortedMap: void putAll(java.util.Map)>(r5);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        z4 = 1;

        $r8 = interfaceinvoke r0.<java.util.SortedMap: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z2 == 0 goto label4;

        $r14 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>($r12);

        $z3 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14);

        if $z3 == 0 goto label2;

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        goto label3;

     label2:
        z4 = 0;

        $r15 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object)>($r13, $r14);

        interfaceinvoke $r7.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r15);

     label3:
        goto label5;

     label4:
        z4 = 0;

        interfaceinvoke $r3.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

     label5:
        goto label1;

     label6:
        if z4 == 0 goto label7;

        $z1 = interfaceinvoke $r4.<java.util.SortedMap: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        $r16 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedMaps: com.mycila.inject.internal.guava.collect.SortedMapDifference sortedMapDifference(boolean,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)>($z5, $r3, $r4, $r6, $r7);

        return $r16;
    }

    private static com.mycila.inject.internal.guava.collect.SortedMapDifference sortedMapDifference(boolean, java.util.SortedMap, java.util.SortedMap, java.util.SortedMap, java.util.SortedMap)
    {
        com.mycila.inject.internal.guava.collect.SortedMaps$SortedMapDifferenceImpl $r0;
        java.util.SortedMap r1, $r2, r3, $r4, r5, $r6, r7, $r8;
        boolean z0;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.SortedMap;

        r3 := @parameter2: java.util.SortedMap;

        r5 := @parameter3: java.util.SortedMap;

        r7 := @parameter4: java.util.SortedMap;

        $r0 = new com.mycila.inject.internal.guava.collect.SortedMaps$SortedMapDifferenceImpl;

        $r2 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r3);

        $r6 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r5);

        $r8 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>(r7);

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SortedMaps$SortedMapDifferenceImpl: void <init>(boolean,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)>(z0, $r2, $r4, $r6, $r8);

        return $r0;
    }

    static java.util.Comparator orNaturalOrder(java.util.Comparator)
    {
        java.util.Comparator r0;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        r0 := @parameter0: java.util.Comparator;

        if r0 == null goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        return $r1;
    }

    public static java.util.SortedMap filterKeys(java.util.SortedMap, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r0;
        com.mycila.inject.internal.guava.collect.SortedMaps$2 $r1;
        java.util.SortedMap r2, $r3;

        r2 := @parameter0: java.util.SortedMap;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.SortedMaps$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SortedMaps$2: void <init>(com.mycila.inject.internal.guava.base.Predicate)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedMaps: java.util.SortedMap filterEntries(java.util.SortedMap,com.mycila.inject.internal.guava.base.Predicate)>(r2, $r1);

        return $r3;
    }

    public static java.util.SortedMap filterValues(java.util.SortedMap, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r0;
        java.util.SortedMap r2, $r3;
        com.mycila.inject.internal.guava.collect.SortedMaps$3 $r1;

        r2 := @parameter0: java.util.SortedMap;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.SortedMaps$3;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SortedMaps$3: void <init>(com.mycila.inject.internal.guava.base.Predicate)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedMaps: java.util.SortedMap filterEntries(java.util.SortedMap,com.mycila.inject.internal.guava.base.Predicate)>(r2, $r1);

        return $r3;
    }

    public static java.util.SortedMap filterEntries(java.util.SortedMap, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r0;
        com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap $r4, $r6;
        java.lang.Object $r2;
        java.util.SortedMap r1, $r3, $r5;
        boolean $z0;

        r1 := @parameter0: java.util.SortedMap;

        r0 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r1 instanceof com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap;

        if $z0 == 0 goto label1;

        $r4 = (com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap) r1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedMaps: java.util.SortedMap filterFiltered(com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap,com.mycila.inject.internal.guava.base.Predicate)>($r4, r0);

        goto label2;

     label1:
        $r6 = new com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap;

        $r5 = $r6;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.SortedMap) $r2;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap: void <init>(java.util.SortedMap,com.mycila.inject.internal.guava.base.Predicate)>($r3, r0);

     label2:
        return $r5;
    }

    private static java.util.SortedMap filterFiltered(com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r1, $r2, $r3;
        com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap r0, $r4;
        java.util.SortedMap $r5;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap;

        r1 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Predicates: com.mycila.inject.internal.guava.base.Predicate and(com.mycila.inject.internal.guava.base.Predicate,com.mycila.inject.internal.guava.base.Predicate)>($r2, r1);

        $r4 = new com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap: java.util.SortedMap sortedMap()>();

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.SortedMaps$FilteredSortedMap: void <init>(java.util.SortedMap,com.mycila.inject.internal.guava.base.Predicate)>($r5, $r3);

        return $r4;
    }
}
