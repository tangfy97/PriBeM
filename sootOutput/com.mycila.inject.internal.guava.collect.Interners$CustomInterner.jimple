class com.mycila.inject.internal.guava.collect.Interners$CustomInterner extends java.lang.Object implements com.mycila.inject.internal.guava.collect.Interner
{
    private final com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map;

    void <init>(com.mycila.inject.internal.guava.collect.GenericMapMaker)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r3;
        com.mycila.inject.internal.guava.collect.Interners$CustomInterner r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap $r5;
        com.mycila.inject.internal.guava.collect.GenericMapMaker r1, $r2, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Interners$CustomInterner;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.GenericMapMaker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GenericMapMaker: com.mycila.inject.internal.guava.collect.GenericMapMaker strongValues()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Equivalences: com.mycila.inject.internal.guava.base.Equivalence equals()>();

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.GenericMapMaker: com.mycila.inject.internal.guava.collect.GenericMapMaker keyEquivalence(com.mycila.inject.internal.guava.base.Equivalence)>($r3);

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.GenericMapMaker: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap makeCustomMap()>();

        r0.<com.mycila.inject.internal.guava.collect.Interners$CustomInterner: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map> = $r5;

        return;
    }

    public java.lang.Object intern(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry $r3;
        com.mycila.inject.internal.guava.collect.Interners$CustomInterner r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap $r2, $r5;
        java.lang.Object r1, $r6, $r7;
        com.mycila.inject.internal.guava.collect.Interners$CustomInterner$Dummy $r4, $r8;

        r0 := @this: com.mycila.inject.internal.guava.collect.Interners$CustomInterner;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Interners$CustomInterner: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getEntry(java.lang.Object)>(r1);

        if $r3 == null goto label2;

        $r7 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        if $r7 == null goto label2;

        return $r7;

     label2:
        $r5 = r0.<com.mycila.inject.internal.guava.collect.Interners$CustomInterner: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map>;

        $r4 = <com.mycila.inject.internal.guava.collect.Interners$CustomInterner$Dummy: com.mycila.inject.internal.guava.collect.Interners$CustomInterner$Dummy VALUE>;

        $r6 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r4);

        $r8 = (com.mycila.inject.internal.guava.collect.Interners$CustomInterner$Dummy) $r6;

        if $r8 != null goto label3;

        return r1;

     label3:
        goto label1;
    }
}
