public class org.slf4j.impl.Log4jMDCAdapter extends java.lang.Object implements org.slf4j.spi.MDCAdapter
{

    public void <init>()
    {
        org.slf4j.impl.Log4jMDCAdapter r0;

        r0 := @this: org.slf4j.impl.Log4jMDCAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void clear()
    {
        org.slf4j.impl.Log4jMDCAdapter r1;
        java.util.Hashtable $r0;

        r1 := @this: org.slf4j.impl.Log4jMDCAdapter;

        $r0 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if $r0 == null goto label1;

        interfaceinvoke $r0.<java.util.Map: void clear()>();

     label1:
        return;
    }

    public java.lang.String get(java.lang.String)
    {
        org.slf4j.impl.Log4jMDCAdapter r3;
        java.lang.Object $r1;
        java.lang.String r0, $r2;

        r3 := @this: org.slf4j.impl.Log4jMDCAdapter;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.MDC: java.lang.Object get(java.lang.String)>(r0);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public void put(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        org.slf4j.impl.Log4jMDCAdapter r2;

        r2 := @this: org.slf4j.impl.Log4jMDCAdapter;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>(r0, r1);

        return;
    }

    public void remove(java.lang.String)
    {
        java.lang.String r0;
        org.slf4j.impl.Log4jMDCAdapter r1;

        r1 := @this: org.slf4j.impl.Log4jMDCAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>(r0);

        return;
    }

    public java.util.Map getCopyOfContextMap()
    {
        java.util.HashMap $r1;
        org.slf4j.impl.Log4jMDCAdapter r2;
        java.util.Hashtable $r0;

        r2 := @this: org.slf4j.impl.Log4jMDCAdapter;

        $r0 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if $r0 == null goto label1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r0);

        return $r1;

     label1:
        return null;
    }

    public void setContextMap(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.slf4j.impl.Log4jMDCAdapter r9;
        java.util.Map r1;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String $r7;
        java.util.Hashtable $r0;
        boolean $z0;

        r9 := @this: org.slf4j.impl.Log4jMDCAdapter;

        r1 := @parameter0: java.util.Map;

        $r0 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if $r0 != null goto label3;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        goto label4;

     label3:
        interfaceinvoke $r0.<java.util.Map: void clear()>();

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>(r1);

     label4:
        return;
    }
}
