public class com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection extends com.sun.xml.bind.v2.runtime.reflect.Accessor
{
    public final java.lang.reflect.Method getter;
    public final java.lang.reflect.Method setter;
    private static final java.util.logging.Logger logger;

    public void <init>(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection r0;
        java.lang.Class[] $r3;
        java.lang.Class $r4;
        java.lang.reflect.Method r1, r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r4 = $r3[0];

     label2:
        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void <init>(java.lang.Class)>($r4);

        r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method getter> = r1;

        r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method setter> = r2;

        if r1 == null goto label3;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: void makeAccessible(java.lang.reflect.Method)>(r1);

     label3:
        if r2 == null goto label4;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: void makeAccessible(java.lang.reflect.Method)>(r2);

     label4:
        return;
    }

    private void makeAccessible(java.lang.reflect.Method)
    {
        java.lang.Object[] $r3;
        java.util.logging.Level $r5;
        com.sun.xml.bind.v2.runtime.reflect.Messages $r6;
        int $i0, $i1;
        java.lang.SecurityException $r2;
        java.lang.String $r8, $r9, $r10;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection r11;
        java.util.logging.Logger $r4;
        java.lang.Class $r1, $r7;

        r11 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label5;

     label1:
        virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $z2 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean access$000()>();

        if $z2 != 0 goto label4;

        $r4 = <com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.util.logging.Logger logger>;

        $r5 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r6 = <com.sun.xml.bind.v2.runtime.reflect.Messages: com.sun.xml.bind.v2.runtime.reflect.Messages UNABLE_TO_ACCESS_NON_PUBLIC_FIELD>;

        $r3 = newarray (java.lang.Object)[2];

        $r7 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r8;

        $r9 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3[1] = $r9;

        $r10 = virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.reflect.Messages: java.lang.String format(java.lang.Object[])>($r3);

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r5, $r10, $r2);

     label4:
        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean access$002(boolean)>(1);

     label5:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public java.lang.Object get(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] $r2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection r0;
        java.lang.reflect.InvocationTargetException $r5;
        java.lang.IllegalAccessError $r8;
        java.lang.Object r1, $r4;
        java.lang.String $r9;
        java.lang.reflect.Method $r3;
        com.sun.xml.bind.api.AccessorException $r6;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method getter>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalAccessError;

        $r9 = virtualinvoke $r7.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.IllegalAccessError: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: com.sun.xml.bind.api.AccessorException handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r5);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public void set(java.lang.Object, java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.lang.IllegalAccessException $r8;
        java.lang.Object[] $r2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection r0;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.IllegalAccessError $r9;
        java.util.Map $r4;
        java.lang.Object r1, r11;
        java.lang.Class $r5;
        java.lang.String $r10;
        java.lang.reflect.Method $r3;
        com.sun.xml.bind.api.AccessorException $r7;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection;

        r1 := @parameter0: java.lang.Object;

        r11 := @parameter1: java.lang.Object;

     label1:
        if r11 != null goto label2;

        $r4 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map access$100()>();

        $r5 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.Class valueType>;

        r11 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

     label2:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method setter>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r11;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalAccessError;

        $r10 = virtualinvoke $r8.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.lang.IllegalAccessError: void <init>(java.lang.String)>($r10);

        throw $r9;

     label5:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: com.sun.xml.bind.api.AccessorException handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r6);

        throw $r7;

     label6:
        return;

        catch java.lang.IllegalAccessException from label1 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label5;
    }

    private com.sun.xml.bind.api.AccessorException handleInvocationTargetException(java.lang.reflect.InvocationTargetException)
    {
        java.lang.Throwable $r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection r5;
        java.lang.Error $r3;
        java.lang.RuntimeException $r4;
        java.lang.reflect.InvocationTargetException r0;
        com.sun.xml.bind.api.AccessorException $r2;
        boolean $z0, $z1;

        r5 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection;

        r0 := @parameter0: java.lang.reflect.InvocationTargetException;

        $r1 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r1 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.RuntimeException) $r1;

        throw $r4;

     label1:
        $z1 = $r1 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.Error) $r1;

        throw $r3;

     label2:
        $r2 = new com.sun.xml.bind.api.AccessorException;

        specialinvoke $r2.<com.sun.xml.bind.api.AccessorException: void <init>(java.lang.Throwable)>($r1);

        return $r2;
    }

    public com.sun.xml.bind.v2.runtime.reflect.Accessor optimize(com.sun.xml.bind.v2.runtime.JAXBContextImpl)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection r0;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r6;
        java.lang.reflect.Method $r1, $r2, $r4, $r5;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r3;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection;

        r3 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method getter>;

        if $r1 == null goto label1;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method setter>;

        if $r2 != null goto label2;

     label1:
        return r0;

     label2:
        if r3 == null goto label3;

        $z0 = r3.<com.sun.xml.bind.v2.runtime.JAXBContextImpl: boolean fastBoot>;

        if $z0 == 0 goto label3;

        return r0;

     label3:
        $r5 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method getter>;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.lang.reflect.Method setter>;

        $r6 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor get(java.lang.reflect.Method,java.lang.reflect.Method)>($r5, $r4);

        if $r6 == null goto label4;

        return $r6;

     label4:
        return r0;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.runtime.reflect.Accessor$GetterSetterReflection: java.util.logging.Logger logger> = $r0;

        return;
    }
}
