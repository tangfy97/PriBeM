public abstract class kodkod.engine.bool.Operator$Nary extends kodkod.engine.bool.Operator
{

    private void <init>(int)
    {
        int i0;
        kodkod.engine.bool.Operator$Nary r0;

        r0 := @this: kodkod.engine.bool.Operator$Nary;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.engine.bool.Operator: void <init>(int,kodkod.engine.bool.Operator)>(i0, null);

        return;
    }

    int hash(kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r1;
        kodkod.engine.bool.BooleanFormula r0, r2;
        int $i0, $i1, $i2;

        r1 := @this: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter0: kodkod.engine.bool.BooleanFormula;

        r2 := @parameter1: kodkod.engine.bool.BooleanFormula;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r1);

        $i1 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r1);

        $i2 = $i0 + $i1;

        return $i2;
    }

    int hash(java.util.Iterator)
    {
        kodkod.engine.bool.Operator$Nary r2;
        java.util.Iterator r0;
        kodkod.engine.bool.BooleanFormula $r3;
        int $i0, i1;
        java.lang.Object $r1;
        boolean $z0;

        r2 := @this: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter0: java.util.Iterator;

        i1 = 0;

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.engine.bool.BooleanFormula) $r1;

        $i0 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r2);

        i1 = i1 + $i0;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return i1;
    }

    public abstract kodkod.engine.bool.BooleanConstant identity();

    public abstract kodkod.engine.bool.BooleanConstant shortCircuit();

    public abstract kodkod.engine.bool.Operator$Nary complement();

    void <init>(int, kodkod.engine.bool.Operator$Nary)
    {
        int i0;
        kodkod.engine.bool.Operator$Nary r0, r1;

        r0 := @this: kodkod.engine.bool.Operator$Nary;

        i0 := @parameter0: int;

        r1 := @parameter1: kodkod.engine.bool.Operator$Nary;

        specialinvoke r0.<kodkod.engine.bool.Operator$Nary: void <init>(int)>(i0);

        return;
    }
}
