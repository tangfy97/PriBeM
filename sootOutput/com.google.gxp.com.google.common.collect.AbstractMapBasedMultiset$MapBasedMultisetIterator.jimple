class com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator extends java.lang.Object implements java.util.Iterator
{
    final java.util.Iterator entryIterator;
    java.util.Map$Entry currentEntry;
    int occurrencesLeft;
    boolean canRemove;
    final com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset this$0;

    void <init>(com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset)
    {
        com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator r0;
        com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset r1;
        java.util.Iterator $r4;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator;

        r1 := @parameter0: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset;

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Iterator entryIterator> = $r4;

        return;
    }

    public boolean hasNext()
    {
        com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator r0;
        java.util.Iterator $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator;

        $i0 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: int occurrencesLeft>;

        if $i0 > 0 goto label1;

        $r1 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Iterator entryIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object next()
    {
        java.util.Map$Entry $r1, $r5, $r6;
        java.util.Iterator $r3;
        com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator r0;
        java.util.concurrent.atomic.AtomicInteger $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r4, $r7;

        r0 := @this: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator;

        $i0 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: int occurrencesLeft>;

        if $i0 != 0 goto label1;

        $r3 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Iterator entryIterator>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Map$Entry currentEntry> = $r5;

        $r6 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Map$Entry currentEntry>;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.concurrent.atomic.AtomicInteger) $r7;

        $i3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: int occurrencesLeft> = $i3;

     label1:
        $i1 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: int occurrencesLeft>;

        $i2 = $i1 - 1;

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: int occurrencesLeft> = $i2;

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: boolean canRemove> = 1;

        $r1 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Map$Entry currentEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r2;
    }

    public void remove()
    {
        java.util.Map$Entry $r1, $r4;
        java.util.Iterator $r8;
        com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator r0;
        com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset $r7;
        java.util.concurrent.atomic.AtomicInteger $r3, $r6;
        int $i0, $i1, $i3;
        java.lang.Object $r2, $r5;
        java.util.ConcurrentModificationException $r10;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator;

        $z0 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: boolean canRemove>;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "no calls to next() since the last call to remove()");

        $r1 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Map$Entry currentEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.util.concurrent.atomic.AtomicInteger) $r2;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 > 0 goto label1;

        $r10 = new java.util.ConcurrentModificationException;

        specialinvoke $r10.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r10;

     label1:
        $r4 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Map$Entry currentEntry>;

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.util.concurrent.atomic.AtomicInteger) $r5;

        $i3 = (int) -1;

        $i1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>($i3);

        if $i1 != 0 goto label2;

        $r8 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: java.util.Iterator entryIterator>;

        interfaceinvoke $r8.<java.util.Iterator: void remove()>();

     label2:
        $r7 = r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset this$0>;

        staticinvoke <com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset: long access$210(com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset)>($r7);

        r0.<com.google.gxp.com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: boolean canRemove> = 0;

        return;
    }
}
