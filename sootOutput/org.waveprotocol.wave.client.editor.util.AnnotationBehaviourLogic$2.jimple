class org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringMap$ProcV
{
    final org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection val$bias;
    final org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType val$type;
    final int val$location;
    final org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0;

    void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic, org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection, org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType, int)
    {
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType r3;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r1;
        int i0;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2 r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r2;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r2 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r3 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType;

        i0 := @parameter3: int;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection val$bias> = r2;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType val$type> = r3;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: int val$location> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringMap $r11, $r12;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2 r0;
        boolean $z0, $z1, $z2, $z3, z4;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r1, $r4, $r8, $r9, $r16, $r18, $r21, $r23, $r27, $r31;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r15, $r33, $r34;
        org.waveprotocol.wave.model.document.AnnotationBehaviour $r13;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r5;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r2, $r22, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r3, r26, r30;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.document.MutableDocument $r19, $r24, $r28;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r10;
        java.lang.Object $r7, $r20, $r25, $r29, r35;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection $r14, $r17, r36;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2;

        r3 := @parameter0: java.lang.String;

        r35 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$100(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: boolean hasAnnotation(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        r36 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection INSIDE>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.util.AnnotationRegistry access$000(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r4);

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.util.AnnotationRegistry: java.util.Iterator getBehaviours(java.lang.String)>(r3);

        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        $r34 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection val$bias>;

        $r33 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        if $r34 != $r33 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z4 = $z3;

        goto label5;

     label4:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (org.waveprotocol.wave.model.document.AnnotationBehaviour) $r7;

        $r8 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r12 = $r8.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap rightSide>;

        $r9 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r11 = $r9.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap leftSide>;

        $r10 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType val$type>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.AnnotationBehaviour: org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection replace(org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>($r12, $r11, $r10);

        r36 = $r14;

        $r16 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r15 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection val$bias>;

        z4 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: boolean access$200(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection)>($r16, $r15, $r14);

     label5:
        if z4 == 0 goto label7;

        $r23 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r24 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument access$300(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r23);

        $i3 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: int val$location>;

        $r25 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: java.lang.Object getAlignedAnnotation(org.waveprotocol.wave.model.document.MutableAnnotationSet,int,java.lang.String,boolean)>($r24, $i3, r3, 0);

        r26 = (java.lang.String) $r25;

        $r27 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r28 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument access$300(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r27);

        $i4 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: int val$location>;

        $i5 = $i4 - 1;

        $r29 = interfaceinvoke $r28.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getAnnotation(int,java.lang.String)>($i5, r3);

        r30 = (java.lang.String) $r29;

        $z2 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>(r26, r30);

        if $z2 != 0 goto label6;

        $r31 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r32 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$100(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r31);

        virtualinvoke $r32.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotation(java.lang.String,java.lang.String)>(r3, r26);

     label6:
        goto label8;

     label7:
        $r17 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection NEITHER>;

        if r36 != $r17 goto label8;

        $i0 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: int val$location>;

        if $i0 <= 0 goto label8;

        $r18 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.document.MutableDocument access$300(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r18);

        $i1 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: int val$location>;

        $i2 = $i1 - 1;

        $r20 = interfaceinvoke $r19.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getAnnotation(int,java.lang.String)>($i2, r3);

        if $r20 == null goto label8;

        $r21 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$2: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r22 = staticinvoke <org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$100(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic)>($r21);

        virtualinvoke $r22.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotation(java.lang.String,java.lang.String)>(r3, null);

     label8:
        return;
    }
}
