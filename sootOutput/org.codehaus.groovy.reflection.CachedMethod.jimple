public class org.codehaus.groovy.reflection.CachedMethod extends groovy.lang.MetaMethod implements java.lang.Comparable
{
    public final org.codehaus.groovy.reflection.CachedClass cachedClass;
    private final java.lang.reflect.Method cachedMethod;
    private volatile boolean alreadySetAccessible;
    private int methodIndex;
    private int hashCode;
    private static org.codehaus.groovy.reflection.CachedMethod$MyComparator comparator;

    public void <init>(org.codehaus.groovy.reflection.CachedClass, java.lang.reflect.Method)
    {
        org.codehaus.groovy.reflection.CachedMethod r0;
        org.codehaus.groovy.reflection.CachedClass r2;
        int $i0, $i1;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r2 := @parameter0: org.codehaus.groovy.reflection.CachedClass;

        r1 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<groovy.lang.MetaMethod: void <init>()>();

        r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod> = r1;

        r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass cachedClass> = r2;

        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r2.<org.codehaus.groovy.reflection.CachedClass: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<org.codehaus.groovy.reflection.CachedMethod: boolean alreadySetAccessible> = $z2;

        return;
    }

    public void <init>(java.lang.reflect.Method)
    {
        org.codehaus.groovy.reflection.CachedClass $r3;
        java.lang.Class $r2;
        java.lang.reflect.Method r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <org.codehaus.groovy.reflection.ReflectionCache: org.codehaus.groovy.reflection.CachedClass getCachedClass(java.lang.Class)>($r2);

        specialinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: void <init>(org.codehaus.groovy.reflection.CachedClass,java.lang.reflect.Method)>($r3, r1);

        return;
    }

    public static org.codehaus.groovy.reflection.CachedMethod find(java.lang.reflect.Method)
    {
        org.codehaus.groovy.reflection.CachedClass $r2;
        org.codehaus.groovy.reflection.CachedMethod[] $r3;
        int $i0;
        java.lang.Class $r1;
        org.codehaus.groovy.reflection.CachedMethod$MyComparator $r4;
        java.lang.reflect.Method r0;
        org.codehaus.groovy.reflection.CachedMethod $r5;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r2 = staticinvoke <org.codehaus.groovy.reflection.ReflectionCache: org.codehaus.groovy.reflection.CachedClass getCachedClass(java.lang.Class)>($r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.reflection.CachedClass: org.codehaus.groovy.reflection.CachedMethod[] getMethods()>();

        $r4 = <org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedMethod$MyComparator comparator>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>($r3, r0, $r4);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r5 = $r3[$i0];

        return $r5;
    }

    protected java.lang.Class[] getPT()
    {
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        return $r2;
    }

    public java.lang.String getName()
    {
        java.lang.String $r2;
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getDescriptor()
    {
        java.lang.Class[] $r2;
        java.lang.Class $r1;
        java.lang.String $r3;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.Class getReturnType()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.Class[] getNativeParameterTypes()>();

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getMethodDescriptor(java.lang.Class,java.lang.Class[])>($r1, $r2);

        return $r3;
    }

    public org.codehaus.groovy.reflection.CachedClass getDeclaringClass()
    {
        org.codehaus.groovy.reflection.CachedClass $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass cachedClass>;

        return $r1;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.Object[])
    {
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] r3;
        java.lang.IllegalArgumentException $r9;
        org.codehaus.groovy.reflection.CachedMethod r0;
        java.lang.reflect.InvocationTargetException $r5;
        java.lang.Object r2, $r4;
        org.codehaus.groovy.runtime.InvokerInvocationException $r6, $r8, $r10;
        java.lang.reflect.Method $r1;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object[];

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method setAccessible()>();

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r3);

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.codehaus.groovy.runtime.InvokerInvocationException;

        specialinvoke $r10.<org.codehaus.groovy.runtime.InvokerInvocationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.codehaus.groovy.runtime.InvokerInvocationException;

        specialinvoke $r8.<org.codehaus.groovy.runtime.InvokerInvocationException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.codehaus.groovy.runtime.InvokerInvocationException;

        specialinvoke $r6.<org.codehaus.groovy.runtime.InvokerInvocationException: void <init>(java.lang.reflect.InvocationTargetException)>($r5);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public org.codehaus.groovy.reflection.ParameterTypes getParamTypes()
    {
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        return null;
    }

    public java.lang.Class getReturnType()
    {
        java.lang.Class $r2;
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        return $r2;
    }

    public int getParamsCount()
    {
        int $i0;
        org.codehaus.groovy.reflection.CachedClass[] $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] getParameterTypes()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getModifiers()
    {
        int $i0;
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        return $i0;
    }

    public java.lang.String getSignature()
    {
        java.lang.StringBuffer $r0, $r3, $r5;
        java.lang.String $r2, $r4, $r6;
        org.codehaus.groovy.reflection.CachedMethod r1;

        r1 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.String getDescriptor()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.reflect.Method setAccessible()
    {
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $z0 = r0.<org.codehaus.groovy.reflection.CachedMethod: boolean alreadySetAccessible>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: void setAccessible0()>();

     label1:
        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        return $r1;
    }

    private synchronized void setAccessible0()
    {
        org.codehaus.groovy.reflection.CachedMethod$1 $r0;
        org.codehaus.groovy.reflection.CachedMethod r1;

        r1 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r0 = new org.codehaus.groovy.reflection.CachedMethod$1;

        specialinvoke $r0.<org.codehaus.groovy.reflection.CachedMethod$1: void <init>(org.codehaus.groovy.reflection.CachedMethod)>(r1);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        r1.<org.codehaus.groovy.reflection.CachedMethod: boolean alreadySetAccessible> = 1;

        return;
    }

    public boolean isStatic()
    {
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MethodHelper: boolean isStatic(java.lang.reflect.Method)>($r1);

        return $z0;
    }

    public void setMethodIndex(int)
    {
        int i0;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        i0 := @parameter0: int;

        r0.<org.codehaus.groovy.reflection.CachedMethod: int methodIndex> = i0;

        return;
    }

    public int getMethodIndex()
    {
        int $i0;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $i0 = r0.<org.codehaus.groovy.reflection.CachedMethod: int methodIndex>;

        return $i0;
    }

    public boolean canBeCalledByReflector()
    {
        org.codehaus.groovy.reflection.CachedClass[] $r2, $r3, $r5;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.reflection.CachedMethod r0;
        org.codehaus.groovy.reflection.CachedClass $r1, $r4, $r6;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass cachedClass>;

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.reflection.CachedClass: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] getParameterTypes()>();

        i4 = 0;

     label3:
        $r2 = r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] parameterTypes>;

        $i2 = lengthof $r2;

        if i4 == $i2 goto label5;

        $r3 = r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] parameterTypes>;

        $r4 = $r3[i4];

        $z2 = $r4.<org.codehaus.groovy.reflection.CachedClass: boolean isPrimitive>;

        if $z2 != 0 goto label4;

        $r5 = r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] parameterTypes>;

        $r6 = $r5[i4];

        $i3 = virtualinvoke $r6.<org.codehaus.groovy.reflection.CachedClass: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z3 != 0 goto label4;

        return 0;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return 1;
    }

    public int compareTo(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.reflect.Method $r2;
        boolean $z0;
        org.codehaus.groovy.reflection.CachedMethod r1, $r3;

        r1 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.codehaus.groovy.reflection.CachedMethod;

        if $z0 == 0 goto label1;

        $r3 = (org.codehaus.groovy.reflection.CachedMethod) r0;

        $i1 = specialinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: int compareToCachedMethod(org.codehaus.groovy.reflection.CachedMethod)>($r3);

        return $i1;

     label1:
        $r2 = (java.lang.reflect.Method) r0;

        $i0 = specialinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: int compareToMethod(java.lang.reflect.Method)>($r2);

        return $i0;
    }

    private int compareToCachedMethod(org.codehaus.groovy.reflection.CachedMethod)
    {
        org.codehaus.groovy.reflection.CachedClass[] $r8, $r9;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i9;
        java.lang.String $r2, $r3, $r5, $r7, $r12, $r14;
        java.lang.RuntimeException $r15;
        org.codehaus.groovy.reflection.CachedMethod r0, r1;
        org.codehaus.groovy.reflection.CachedClass $r11, $r13;
        java.lang.Class $r4, $r6;

        r1 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r0 := @parameter0: org.codehaus.groovy.reflection.CachedMethod;

        if r0 != null goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 == 0 goto label2;

        return $i0;

     label2:
        $r4 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.Class getReturnType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.Class getReturnType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r7);

        if $i1 == 0 goto label3;

        return $i1;

     label3:
        $r8 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] getParameterTypes()>();

        $r9 = virtualinvoke r0.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] getParameterTypes()>();

        $i3 = lengthof $r8;

        $i2 = lengthof $r9;

        i4 = $i3 - $i2;

        if i4 == 0 goto label4;

        return i4;

     label4:
        i7 = 0;

     label5:
        $i5 = lengthof $r8;

        if i7 == $i5 goto label7;

        $r11 = $r8[i7];

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.reflection.CachedClass: java.lang.String getName()>();

        $r13 = $r9[i7];

        $r14 = virtualinvoke $r13.<org.codehaus.groovy.reflection.CachedClass: java.lang.String getName()>();

        $i6 = virtualinvoke $r12.<java.lang.String: int compareTo(java.lang.String)>($r14);

        if $i6 == 0 goto label6;

        return $i6;

     label6:
        i7 = i7 + 1;

        goto label5;

     label7:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("Should never happen");

        throw $r15;
    }

    private int compareToMethod(java.lang.reflect.Method)
    {
        org.codehaus.groovy.reflection.CachedClass[] $r8;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i9;
        java.lang.String $r2, $r3, $r5, $r7, $r11, $r13;
        java.lang.reflect.Method r0;
        java.lang.Class[] $r9;
        org.codehaus.groovy.reflection.CachedMethod r1;
        org.codehaus.groovy.reflection.CachedClass $r10;
        java.lang.Class $r4, $r6, $r12;

        r1 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 != null goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 == 0 goto label2;

        return $i0;

     label2:
        $r4 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.Class getReturnType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r7);

        if $i1 == 0 goto label3;

        return $i1;

     label3:
        $r8 = virtualinvoke r1.<org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedClass[] getParameterTypes()>();

        $r9 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r8;

        $i2 = lengthof $r9;

        i4 = $i3 - $i2;

        if i4 == 0 goto label4;

        return i4;

     label4:
        i7 = 0;

     label5:
        $i5 = lengthof $r8;

        if i7 == $i5 goto label7;

        $r10 = $r8[i7];

        $r11 = virtualinvoke $r10.<org.codehaus.groovy.reflection.CachedClass: java.lang.String getName()>();

        $r12 = $r9[i7];

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $i6 = virtualinvoke $r11.<java.lang.String: int compareTo(java.lang.String)>($r13);

        if $i6 == 0 goto label6;

        return $i6;

     label6:
        i7 = i7 + 1;

        goto label5;

     label7:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.groovy.reflection.CachedMethod r1, $r3;
        java.lang.Object r0;
        java.lang.reflect.Method $r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.codehaus.groovy.reflection.CachedMethod;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.codehaus.groovy.reflection.CachedMethod;

        if $z0 == 0 goto label1;

        $r5 = r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $r3 = (org.codehaus.groovy.reflection.CachedMethod) r0;

        $r4 = $r3.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $z3 = virtualinvoke $r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label2;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Method;

        if $z1 == 0 goto label3;

        $r2 = r1.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $z2 = virtualinvoke $r2.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3;
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $i0 = r0.<org.codehaus.groovy.reflection.CachedMethod: int hashCode>;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $i1 = virtualinvoke $r1.<java.lang.reflect.Method: int hashCode()>();

        r0.<org.codehaus.groovy.reflection.CachedMethod: int hashCode> = $i1;

        $i2 = r0.<org.codehaus.groovy.reflection.CachedMethod: int hashCode>;

        if $i2 != 0 goto label1;

        r0.<org.codehaus.groovy.reflection.CachedMethod: int hashCode> = -889274690;

     label1:
        $i3 = r0.<org.codehaus.groovy.reflection.CachedMethod: int hashCode>;

        return $i3;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @this: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String toString()>();

        return $r2;
    }

    static java.lang.reflect.Method access$100(org.codehaus.groovy.reflection.CachedMethod)
    {
        java.lang.reflect.Method $r1;
        org.codehaus.groovy.reflection.CachedMethod r0;

        r0 := @parameter0: org.codehaus.groovy.reflection.CachedMethod;

        $r1 = r0.<org.codehaus.groovy.reflection.CachedMethod: java.lang.reflect.Method cachedMethod>;

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.reflection.CachedMethod$MyComparator $r0;

        $r0 = new org.codehaus.groovy.reflection.CachedMethod$MyComparator;

        specialinvoke $r0.<org.codehaus.groovy.reflection.CachedMethod$MyComparator: void <init>(org.codehaus.groovy.reflection.CachedMethod$1)>(null);

        <org.codehaus.groovy.reflection.CachedMethod: org.codehaus.groovy.reflection.CachedMethod$MyComparator comparator> = $r0;

        return;
    }
}
