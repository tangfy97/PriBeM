public class org.apache.batik.svggen.SVGTransformDescriptor extends java.lang.Object implements org.apache.batik.svggen.SVGDescriptor, org.apache.batik.svggen.SVGSyntax
{
    private java.lang.String transform;

    public void <init>(java.lang.String)
    {
        org.apache.batik.svggen.SVGTransformDescriptor r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.svggen.SVGTransformDescriptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.svggen.SVGTransformDescriptor: java.lang.String transform> = r1;

        return;
    }

    public java.util.Map getAttributeMap(java.util.Map)
    {
        org.apache.batik.svggen.SVGTransformDescriptor r0;
        java.util.Map r3;
        java.util.HashMap $r2;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.svggen.SVGTransformDescriptor;

        r3 := @parameter0: java.util.Map;

        if r3 != null goto label1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r3 = $r2;

     label1:
        $r1 = r0.<org.apache.batik.svggen.SVGTransformDescriptor: java.lang.String transform>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("transform", $r1);

        return r3;
    }

    public java.util.List getDefinitionSet(java.util.List)
    {
        org.apache.batik.svggen.SVGTransformDescriptor r1;
        java.util.List r2;
        java.util.LinkedList $r0;

        r1 := @this: org.apache.batik.svggen.SVGTransformDescriptor;

        r2 := @parameter0: java.util.List;

        if r2 != null goto label1;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        r2 = $r0;

     label1:
        return r2;
    }
}
