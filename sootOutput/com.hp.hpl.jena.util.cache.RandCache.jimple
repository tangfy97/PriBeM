public class com.hp.hpl.jena.util.cache.RandCache extends java.lang.Object implements com.hp.hpl.jena.util.cache.Cache, com.hp.hpl.jena.util.cache.CacheControl
{
    int size;
    int threshhold;
    boolean enabled;
    java.lang.String name;
    java.util.HashMap map;
    java.util.Collection collection;
    protected static org.slf4j.Logger logger;
    long gets;
    long puts;
    long hits;

    void <init>(java.lang.String, int)
    {
        java.lang.Error $r4;
        java.util.HashMap $r1, $r2, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r8, $r10, $r11, r14;
        boolean $z0;
        com.hp.hpl.jena.util.cache.RandCache r0;
        org.slf4j.Logger $r12;
        java.util.Collection $r3;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        r14 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.util.cache.RandCache: boolean enabled> = 1;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long gets> = 0L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long puts> = 0L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long hits> = 0L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: int size> = i0;

     label1:
        $r1 = new java.util.HashMap;

        $i1 = i0 * 100;

        $i2 = $i1 / 75;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i2);

        r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map> = $r1;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        $r10 = "Illegal load factor: NaN";

        $r11 = virtualinvoke $r9.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        $r12 = <com.hp.hpl.jena.util.cache.RandCache: org.slf4j.Logger logger>;

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String)>("Detected a NaN anomaly believed to be due to use of JDK 1.4.1");

        $r13 = new java.util.HashMap;

        $i4 = i0 * 100;

        $i5 = $i4 / 75;

        specialinvoke $r13.<java.util.HashMap: void <init>(int,float)>($i5, 0.75F);

        r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map> = $r13;

        goto label5;

     label4:
        throw $r9;

     label5:
        r0.<com.hp.hpl.jena.util.cache.RandCache: int threshhold> = i0;

        $i3 = r0.<com.hp.hpl.jena.util.cache.RandCache: int threshhold>;

        if $i3 >= 2 goto label6;

        $r4 = new java.lang.Error;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cache size too small: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.String)>($r8);

        throw $r4;

     label6:
        $r2 = r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.Collection collection> = $r3;

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public synchronized java.lang.Object get(java.lang.Object)
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        long $l0, $l2, $l3, $l4, $l5;
        java.util.HashMap $r2;
        byte $b1;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<com.hp.hpl.jena.util.cache.RandCache: boolean enabled>;

        if $z0 == 0 goto label3;

        $l0 = r0.<com.hp.hpl.jena.util.cache.RandCache: long gets>;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.util.cache.RandCache: void forgetStats()>();

     label1:
        $l2 = r0.<com.hp.hpl.jena.util.cache.RandCache: long gets>;

        $l3 = $l2 + 1L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long gets> = $l3;

        $r2 = r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label2;

        $l4 = r0.<com.hp.hpl.jena.util.cache.RandCache: long hits>;

        $l5 = $l4 + 1L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long hits> = $l5;

     label2:
        return $r3;

     label3:
        return null;
    }

    public synchronized void put(java.lang.Object, java.lang.Object)
    {
        com.hp.hpl.jena.util.cache.RandCache r1;
        long $l0, $l2, $l3;
        java.util.HashMap $r2, $r4;
        java.lang.NullPointerException $r5;
        byte $b1;
        int $i4, $i5;
        java.lang.Object r0, r3;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.util.cache.RandCache;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        $z0 = r1.<com.hp.hpl.jena.util.cache.RandCache: boolean enabled>;

        if $z0 == 0 goto label4;

        $l0 = r1.<com.hp.hpl.jena.util.cache.RandCache: long puts>;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label2;

        virtualinvoke r1.<com.hp.hpl.jena.util.cache.RandCache: void forgetStats()>();

     label2:
        $l2 = r1.<com.hp.hpl.jena.util.cache.RandCache: long puts>;

        $l3 = $l2 + 1L;

        r1.<com.hp.hpl.jena.util.cache.RandCache: long puts> = $l3;

        $r2 = r1.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map>;

        $i4 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        $i5 = r1.<com.hp.hpl.jena.util.cache.RandCache: int threshhold>;

        if $i4 < $i5 goto label3;

        virtualinvoke r1.<com.hp.hpl.jena.util.cache.RandCache: void makeSpace()>();

     label3:
        $r4 = r1.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r0);

     label4:
        return;
    }

    protected void makeSpace()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        int $i0, i1;
        java.util.HashMap $r3;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $r1 = r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.Collection collection>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map>;

        $i0 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        i1 = 3;

     label1:
        if i1 >= $i0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        i1 = i1 + 3;

        goto label1;

     label2:
        return;
    }

    public synchronized boolean getEnabled()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $z0 = r0.<com.hp.hpl.jena.util.cache.RandCache: boolean enabled>;

        return $z0;
    }

    public synchronized boolean setEnabled(boolean)
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.util.cache.RandCache: boolean enabled> = z0;

        return z0;
    }

    public synchronized void clear()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        java.util.HashMap $r1;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $r1 = r0.<com.hp.hpl.jena.util.cache.RandCache: java.util.HashMap map>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public synchronized long getHits()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $l0 = r0.<com.hp.hpl.jena.util.cache.RandCache: long hits>;

        return $l0;
    }

    public synchronized long getGets()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $l0 = r0.<com.hp.hpl.jena.util.cache.RandCache: long gets>;

        return $l0;
    }

    public synchronized long getPuts()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $l0 = r0.<com.hp.hpl.jena.util.cache.RandCache: long puts>;

        return $l0;
    }

    protected void forgetStats()
    {
        com.hp.hpl.jena.util.cache.RandCache r0;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: com.hp.hpl.jena.util.cache.RandCache;

        $l0 = r0.<com.hp.hpl.jena.util.cache.RandCache: long gets>;

        $l1 = $l0 / 2L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long gets> = $l1;

        $l2 = r0.<com.hp.hpl.jena.util.cache.RandCache: long puts>;

        $l3 = $l2 / 2L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long puts> = $l3;

        $l4 = r0.<com.hp.hpl.jena.util.cache.RandCache: long hits>;

        $l5 = $l4 / 2L;

        r0.<com.hp.hpl.jena.util.cache.RandCache: long hits> = $l5;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/util/cache/RandCache;");

        <com.hp.hpl.jena.util.cache.RandCache: org.slf4j.Logger logger> = $r0;

        return;
    }
}
