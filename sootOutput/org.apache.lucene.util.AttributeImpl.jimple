public abstract class org.apache.lucene.util.AttributeImpl extends java.lang.Object implements java.lang.Cloneable, org.apache.lucene.util.Attribute
{

    public void <init>()
    {
        org.apache.lucene.util.AttributeImpl r0;

        r0 := @this: org.apache.lucene.util.AttributeImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract void clear();

    public final java.lang.String reflectAsString(boolean)
    {
        org.apache.lucene.util.AttributeImpl r1;
        java.lang.StringBuilder $r0;
        org.apache.lucene.util.AttributeImpl$1 $r2;
        java.lang.String $r3;
        boolean z0;

        r1 := @this: org.apache.lucene.util.AttributeImpl;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = new org.apache.lucene.util.AttributeImpl$1;

        specialinvoke $r2.<org.apache.lucene.util.AttributeImpl$1: void <init>(org.apache.lucene.util.AttributeImpl,java.lang.StringBuilder,boolean)>(r1, $r0, z0);

        virtualinvoke r1.<org.apache.lucene.util.AttributeImpl: void reflectWith(org.apache.lucene.util.AttributeReflector)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void reflectWith(org.apache.lucene.util.AttributeReflector)
    {
        org.apache.lucene.util.AttributeReflector r9;
        int $i0, $i1, $i2, i3;
        java.lang.String $r10, $r14, $r17;
        java.util.LinkedList $r2;
        java.lang.ref.WeakReference $r4;
        boolean $z0;
        java.lang.UnsupportedOperationException $r12;
        java.lang.IllegalAccessException $r18;
        java.lang.RuntimeException $r19;
        java.lang.reflect.Field r8;
        org.apache.lucene.util.AttributeImpl r0;
        java.lang.reflect.Field[] $r7;
        java.lang.Class $r1, r6;
        java.lang.Object $r3, $r5, $r11;
        java.lang.StringBuilder $r13, $r15, $r16;

        r0 := @this: org.apache.lucene.util.AttributeImpl;

        r9 := @parameter0: org.apache.lucene.util.AttributeReflector;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.lucene.util.AttributeSource: java.util.LinkedList getAttributeInterfaces(java.lang.Class)>($r1);

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i0 == 1 goto label1;

        $r12 = new java.lang.UnsupportedOperationException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label1:
        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r4 = (java.lang.ref.WeakReference) $r3;

        $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (java.lang.Class) $r5;

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

     label2:
        i3 = 0;

     label3:
        $i1 = lengthof $r7;

        if i3 >= $i1 goto label6;

        r8 = $r7[i3];

        $i2 = virtualinvoke r8.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        virtualinvoke r8.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r10 = virtualinvoke r8.<java.lang.reflect.Field: java.lang.String getName()>();

        $r11 = virtualinvoke r8.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        interfaceinvoke r9.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(r6, $r10, $r11);

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

     label8:
        return;

        catch java.lang.IllegalAccessException from label2 to label6 with label7;
    }

    public abstract void copyTo(org.apache.lucene.util.AttributeImpl);

    public org.apache.lucene.util.AttributeImpl clone()
    {
        org.apache.lucene.util.AttributeImpl r0, r4;
        java.lang.Object $r1;
        java.lang.RuntimeException $r3;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: org.apache.lucene.util.AttributeImpl;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r4 = (org.apache.lucene.util.AttributeImpl) $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

     label4:
        return r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.AttributeImpl r0, $r1;

        r0 := @this: org.apache.lucene.util.AttributeImpl;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.AttributeImpl: org.apache.lucene.util.AttributeImpl clone()>();

        return $r1;
    }
}
