public final class org.apache.poi.openxml4j.opc.internal.ContentType extends java.lang.Object
{
    private java.lang.String type;
    private java.lang.String subType;
    private java.util.Hashtable parameters;
    private static final java.util.regex.Pattern patternTypeSubType;
    private static final java.util.regex.Pattern patternTypeSubTypeParams;
    private static final java.util.regex.Pattern patternParams;

    public void <init>(java.lang.String) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.util.regex.Matcher $r3, $r9, r20;
        int $i0, $i1, $i2;
        java.lang.String r1, $r4, $r5, $r8, $r11, $r12, $r18;
        java.util.Hashtable $r6, $r10;
        boolean $z0, $z1, $z2;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.util.regex.Pattern $r2, $r7, $r19;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.poi.openxml4j.opc.internal.ContentType: java.util.regex.Pattern patternTypeSubType>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        r20 = $r3;

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r19 = <org.apache.poi.openxml4j.opc.internal.ContentType: java.util.regex.Pattern patternTypeSubTypeParams>;

        r20 = virtualinvoke $r19.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

     label1:
        $z1 = virtualinvoke r20.<java.util.regex.Matcher: boolean matches()>();

        if $z1 != 0 goto label2;

        $r13 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified content type \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not compliant with RFC 2616: malformed content type.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label2:
        $i0 = virtualinvoke r20.<java.util.regex.Matcher: int groupCount()>();

        if $i0 < 2 goto label4;

        $r4 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String type> = $r4;

        $r5 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String subType> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>(int)>(1);

        r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters> = $r6;

        $i1 = virtualinvoke r20.<java.util.regex.Matcher: int groupCount()>();

        if $i1 < 5 goto label4;

        $r7 = <org.apache.poi.openxml4j.opc.internal.ContentType: java.util.regex.Pattern patternParams>;

        $i2 = virtualinvoke r20.<java.util.regex.Matcher: int end(int)>(2);

        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r9 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r8);

     label3:
        $z2 = virtualinvoke $r9.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label4;

        $r10 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $r11 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r12 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        goto label3;

     label4:
        return;
    }

    public final java.lang.String toString()
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString(boolean)>(1);

        return $r1;
    }

    public final java.lang.String toString(boolean)
    {
        java.util.Iterator $r7;
        org.apache.poi.openxml4j.opc.internal.ContentType r1;
        java.util.Set $r6;
        java.lang.StringBuffer $r0;
        java.lang.Object $r8, $r11;
        java.lang.String $r2, $r3, $r4, r9, $r12;
        java.util.Hashtable $r5, $r10;
        boolean z0, $z1;

        r1 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String getType()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r3 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String getSubType()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        if z0 == 0 goto label2;

        $r5 = r1.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r10 = r1.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $r11 = virtualinvoke $r10.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r9);

        $r12 = (java.lang.String) $r11;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r1;
        java.lang.Object r0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.poi.openxml4j.opc.internal.ContentType;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String getSubType()
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String subType>;

        return $r1;
    }

    public java.lang.String getType()
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String type>;

        return $r1;
    }

    public boolean hasParameters()
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.util.Hashtable $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String[] getParameterKeys()
    {
        java.lang.Object[] $r6;
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.util.Set $r3;
        java.lang.String[] $r5, $r7, $r8;
        int $i0;
        java.util.Hashtable $r1, $r2, $r4;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        if $r1 != null goto label1;

        $r8 = newarray (java.lang.String)[0];

        return $r8;

     label1:
        $r2 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Set keySet()>();

        $r4 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $i0 = virtualinvoke $r4.<java.util.Hashtable: int size()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.lang.Object $r3;
        java.lang.String r1, $r4;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.util.Hashtable parameters>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getParameters(java.lang.String)
    {
        org.apache.poi.openxml4j.opc.internal.ContentType r0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentType;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.internal.ContentType: java.lang.String getParameter(java.lang.String)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String $r6, $r13, $r23, $r28;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r26, $r27;
        java.util.regex.Pattern $r14, $r24, $r29;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\x21-\\x7E&&[^\\(\\)<>@,;:\\\\/\"\\[\\]\\?={}\\x20\\x09]]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+)=(\"?");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\x21-\\x7E&&[^\\(\\)<>@,;:\\\\/\"\\[\\]\\?={}\\x20\\x09]]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+\"?)");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\x21-\\x7E&&[^\\(\\)<>@,;:\\\\/\"\\[\\]\\?={}\\x20\\x09]]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+)/(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\x21-\\x7E&&[^\\(\\)<>@,;:\\\\/\"\\[\\]\\?={}\\x20\\x09]]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+)$");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r13);

        <org.apache.poi.openxml4j.opc.internal.ContentType: java.util.regex.Pattern patternTypeSubType> = $r14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\x21-\\x7E&&[^\\(\\)<>@,;:\\\\/\"\\[\\]\\?={}\\x20\\x09]]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+)/(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\x21-\\x7E&&[^\\(\\)<>@,;:\\\\/\"\\[\\]\\?={}\\x20\\x09]]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+)(;");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")*$");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r23);

        <org.apache.poi.openxml4j.opc.internal.ContentType: java.util.regex.Pattern patternTypeSubTypeParams> = $r24;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r28);

        <org.apache.poi.openxml4j.opc.internal.ContentType: java.util.regex.Pattern patternParams> = $r29;

        return;
    }
}
