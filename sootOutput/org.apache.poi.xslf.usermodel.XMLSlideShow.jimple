public class org.apache.poi.xslf.usermodel.XMLSlideShow extends org.apache.poi.POIXMLDocument
{
    private static org.apache.poi.util.POILogger _logger;
    private org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation;
    private java.util.List _slides;
    private java.util.Map _masters;
    private java.util.List _pictures;
    private org.apache.poi.xslf.usermodel.XSLFTableStyles _tableStyles;
    private org.apache.poi.xslf.usermodel.XSLFNotesMaster _notesMaster;
    private org.apache.poi.xslf.usermodel.XSLFCommentAuthors _commentAuthors;

    public void <init>()
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.apache.poi.openxml4j.opc.OPCPackage $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = staticinvoke <org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.OPCPackage empty()>();

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>($r1);

        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.OPCPackage)
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.lang.Exception $r8;
        org.apache.poi.xslf.usermodel.XSLFFactory $r6;
        org.apache.poi.xslf.usermodel.XSLFRelation $r4;
        org.apache.poi.openxml4j.opc.OPCPackage r1, $r7;
        org.apache.poi.openxml4j.opc.PackagePart $r2;
        java.lang.String $r3, $r5;
        org.apache.poi.POIXMLException $r9;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        specialinvoke r0.<org.apache.poi.POIXMLDocument: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>(r1);

     label1:
        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $r4 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation THEME_MANAGER>;

        $r5 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFRelation: java.lang.String getContentType()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: void rebase(org.apache.poi.openxml4j.opc.OPCPackage)>($r7);

     label2:
        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.XSLFFactory: org.apache.poi.xslf.usermodel.XSLFFactory getInstance()>();

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: void load(org.apache.poi.POIXMLFactory)>($r6);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new org.apache.poi.POIXMLException;

        specialinvoke $r9.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <org.apache.poi.util.PackageHelper: org.apache.poi.openxml4j.opc.OPCPackage open(java.io.InputStream)>(r1);

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>($r2);

        return;
    }

    static final org.apache.poi.openxml4j.opc.OPCPackage empty()
    {
        org.apache.poi.openxml4j.opc.OPCPackage $r2;
        java.lang.Class $r0;
        java.lang.RuntimeException $r3;
        org.apache.poi.POIXMLException $r5;
        java.lang.Exception $r4;
        java.io.InputStream $r1;

        $r0 = class "Lorg/apache/poi/xslf/usermodel/XMLSlideShow;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("empty.pptx");

        if $r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing resource \'empty.pptx\'");

        throw $r3;

     label1:
        $r2 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage open(java.io.InputStream)>($r1);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.poi.POIXMLException;

        specialinvoke $r5.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.poi.xslf.XSLFSlideShow _getXSLFSlideShow() throws org.apache.poi.openxml4j.exceptions.OpenXML4JException, java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.apache.poi.xslf.XSLFSlideShow $r0;
        org.apache.poi.xslf.usermodel.XMLSlideShow r1;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;

        r1 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r0 = new org.apache.poi.xslf.XSLFSlideShow;

        $r2 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        specialinvoke $r0.<org.apache.poi.xslf.XSLFSlideShow: void <init>(org.apache.poi.openxml4j.opc.OPCPackage)>($r2);

        return $r0;
    }

    protected void onDocumentRead() throws java.io.IOException
    {
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r39;
        java.util.Map $r30;
        org.apache.poi.openxml4j.opc.PackagePart $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.poi.util.POILogger $r21;
        java.util.List $r7, $r13, $r19;
        java.lang.StringBuilder $r20, $r22, $r23, $r24;
        org.apache.poi.xslf.usermodel.XSLFSlide r18, $r35;
        java.util.HashMap $r5, $r6;
        long $l0;
        org.apache.poi.openxml4j.opc.PackageRelationship $r31, $r33;
        java.util.ArrayList $r9;
        org.apache.poi.xslf.usermodel.XSLFNotesMaster $r28;
        org.apache.poi.POIXMLDocumentPart r38;
        java.lang.String $r16, $r25, $r32, $r34;
        org.apache.poi.xslf.usermodel.XSLFCommentAuthors $r27;
        org.apache.poi.POIXMLException $r37;
        org.apache.poi.xslf.usermodel.XSLFTableStyles $r29;
        java.util.Iterator $r8, $r14;
        org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument $r3;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList $r12;
        org.apache.xmlbeans.XmlException $r36;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r4, $r10, $r11;
        java.lang.Object $r15, $r17, $r26;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r40;
        java.io.InputStream $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

     label01:
        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.PackagePart getCorePart()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r3 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument parse(java.io.InputStream)>($r2);

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.PresentationDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getPresentation()>();

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.Map _masters> = $r6;

        $r7 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List getRelations()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r26 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.apache.poi.POIXMLDocumentPart) $r26;

        $z2 = r38 instanceof org.apache.poi.xslf.usermodel.XSLFSlide;

        if $z2 == 0 goto label03;

        $r33 = virtualinvoke r38.<org.apache.poi.POIXMLDocumentPart: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r34 = virtualinvoke $r33.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r35 = (org.apache.poi.xslf.usermodel.XSLFSlide) r38;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r35);

        goto label07;

     label03:
        $z3 = r38 instanceof org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        if $z3 == 0 goto label04;

        r39 = (org.apache.poi.xslf.usermodel.XSLFSlideMaster) r38;

        $r30 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.Map _masters>;

        $r31 = virtualinvoke r38.<org.apache.poi.POIXMLDocumentPart: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r32 = virtualinvoke $r31.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r39);

        goto label07;

     label04:
        $z4 = r38 instanceof org.apache.poi.xslf.usermodel.XSLFTableStyles;

        if $z4 == 0 goto label05;

        $r29 = (org.apache.poi.xslf.usermodel.XSLFTableStyles) r38;

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFTableStyles _tableStyles> = $r29;

        goto label07;

     label05:
        $z5 = r38 instanceof org.apache.poi.xslf.usermodel.XSLFNotesMaster;

        if $z5 == 0 goto label06;

        $r28 = (org.apache.poi.xslf.usermodel.XSLFNotesMaster) r38;

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFNotesMaster _notesMaster> = $r28;

        goto label07;

     label06:
        $z6 = r38 instanceof org.apache.poi.xslf.usermodel.XSLFCommentAuthors;

        if $z6 == 0 goto label07;

        $r27 = (org.apache.poi.xslf.usermodel.XSLFCommentAuthors) r38;

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFCommentAuthors _commentAuthors> = $r27;

     label07:
        goto label02;

     label08:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides> = $r9;

        $r10 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $z1 = interfaceinvoke $r10.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: boolean isSetSldIdLst()>();

        if $z1 == 0 goto label11;

        $r11 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r12 = interfaceinvoke $r11.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSldIdLst()>();

        $r13 = interfaceinvoke $r12.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList: java.util.List getSldIdList()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label11;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) $r15;

        $r16 = interfaceinvoke r40.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: java.lang.String getId2()>();

        $r17 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r18 = (org.apache.poi.xslf.usermodel.XSLFSlide) $r17;

        if r18 != null goto label10;

        $r21 = <org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.util.POILogger _logger>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Slide with r:id ");

        $l0 = interfaceinvoke r40.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: long getId()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was defined, but didn\'t exist in package, skipping");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r25);

        goto label09;

     label10:
        $r19 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>(r18);

        goto label09;

     label11:
        goto label13;

     label12:
        $r36 := @caughtexception;

        $r37 = new org.apache.poi.POIXMLException;

        specialinvoke $r37.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r36);

        throw $r37;

     label13:
        return;

        catch org.apache.xmlbeans.XmlException from label01 to label11 with label12;
    }

    protected void commit() throws java.io.IOException
    {
        java.io.OutputStream $r8;
        java.util.HashMap $r2;
        org.apache.poi.xslf.usermodel.XMLSlideShow r6;
        org.apache.xmlbeans.XmlOptions $r0, $r1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r9;
        org.apache.poi.openxml4j.opc.PackagePart $r7;
        javax.xml.namespace.QName $r4;
        java.lang.String $r5;
        org.apache.xmlbeans.SchemaType $r3;

        r6 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r0 = new org.apache.xmlbeans.XmlOptions;

        $r1 = <org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.xmlbeans.XmlOptions DEFAULT_XML_OPTIONS>;

        specialinvoke $r0.<org.apache.xmlbeans.XmlOptions: void <init>(org.apache.xmlbeans.XmlOptions)>($r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = <org.openxmlformats.schemas.officeDocument.x2006.relationships.STRelationshipId: org.apache.xmlbeans.SchemaType type>;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "r");

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveSuggestedPrefixes(java.util.Map)>($r2);

        $r7 = virtualinvoke r6.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r8 = virtualinvoke $r7.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

        $r9 = r6.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        interfaceinvoke $r9.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: void save(java.io.OutputStream,org.apache.xmlbeans.XmlOptions)>($r8, $r0);

        virtualinvoke $r8.<java.io.OutputStream: void close()>();

        return;
    }

    public java.util.List getAllEmbedds() throws org.apache.poi.openxml4j.exceptions.OpenXML4JException
    {
        java.util.List $r3, $r4;
        org.apache.poi.openxml4j.opc.OPCPackage $r1;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.util.regex.Pattern $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("/ppt/embeddings/.*?");

        $r3 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.List getPartsByName(java.util.regex.Pattern)>($r2);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public java.util.List getAllPictures()
    {
        java.util.Iterator $r8;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.util.ArrayList $r7;
        java.util.List $r1, $r2, $r3, $r6, $r12;
        org.apache.poi.openxml4j.opc.OPCPackage $r4;
        int $i0;
        java.lang.Object $r9;
        org.apache.poi.openxml4j.opc.PackagePart r10;
        java.util.regex.Pattern $r5;
        org.apache.poi.xslf.usermodel.XSLFPictureData $r11;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        if $r1 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("/ppt/media/.*?");

        $r6 = virtualinvoke $r4.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.List getPartsByName(java.util.regex.Pattern)>($r5);

        $r7 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures> = $r7;

        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.poi.openxml4j.opc.PackagePart) $r9;

        $r12 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        $r11 = new org.apache.poi.xslf.usermodel.XSLFPictureData;

        specialinvoke $r11.<org.apache.poi.xslf.usermodel.XSLFPictureData: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>(r10, null);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlide createSlide(org.apache.poi.xslf.usermodel.XSLFSlideLayout)
    {
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r12;
        org.apache.poi.openxml4j.opc.PackagePart $r15, $r17;
        boolean $z0, $z1;
        org.apache.poi.openxml4j.opc.PackagePartName $r16;
        java.util.List $r4, $r21;
        org.apache.poi.xslf.usermodel.XSLFSlide $r24;
        long $l0, $l1, $l2, $l3, $l4;
        org.apache.poi.openxml4j.opc.PackageRelationship $r10, $r13, $r19;
        org.apache.poi.xslf.usermodel.XSLFFactory $r7;
        org.apache.poi.POIXMLDocumentPart $r8;
        org.apache.poi.xslf.usermodel.XSLFRelation $r6;
        int i5, i6;
        java.lang.String $r11, $r14, $r20;
        java.util.Iterator $r5;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList $r3, r25;
        org.apache.poi.openxml4j.opc.TargetMode $r18;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r1, $r2, $r23;
        java.lang.Object $r22;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry $r9, r26;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r12 := @parameter0: org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        i5 = 256;

        i6 = 1;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: boolean isSetSldIdLst()>();

        if $z0 != 0 goto label1;

        $r23 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        r25 = interfaceinvoke $r23.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList addNewSldIdLst()>();

        goto label3;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSldIdLst()>();

        r25 = $r3;

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList: java.util.List getSldIdList()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r22 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) $r22;

        $l1 = interfaceinvoke r26.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: long getId()>();

        $l3 = $l1 + 1L;

        $l2 = (long) i5;

        $l4 = staticinvoke <java.lang.Math: long max(long,long)>($l3, $l2);

        i5 = (int) $l4;

        i6 = i6 + 1;

        goto label2;

     label3:
        $r6 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation SLIDE>;

        $r7 = staticinvoke <org.apache.poi.xslf.usermodel.XSLFFactory: org.apache.poi.xslf.usermodel.XSLFFactory getInstance()>();

        $r8 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int)>($r6, $r7, i6);

        $r24 = (org.apache.poi.xslf.usermodel.XSLFSlide) $r8;

        $r9 = interfaceinvoke r25.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry addNewSldId()>();

        $l0 = (long) i5;

        interfaceinvoke $r9.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: void setId(long)>($l0);

        $r10 = virtualinvoke $r24.<org.apache.poi.xslf.usermodel.XSLFSlide: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r11 = virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        interfaceinvoke $r9.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry: void setId2(java.lang.String)>($r11);

        virtualinvoke r12.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: void copyLayout(org.apache.poi.xslf.usermodel.XSLFSlide)>($r24);

        $r13 = virtualinvoke r12.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r14 = virtualinvoke $r13.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        virtualinvoke $r24.<org.apache.poi.xslf.usermodel.XSLFSlide: void addRelation(java.lang.String,org.apache.poi.POIXMLDocumentPart)>($r14, r12);

        $r15 = virtualinvoke r12.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r16 = virtualinvoke $r15.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r17 = virtualinvoke $r24.<org.apache.poi.xslf.usermodel.XSLFSlide: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r18 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        $r19 = virtualinvoke r12.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.openxml4j.opc.PackageRelationship getPackageRelationship()>();

        $r20 = virtualinvoke $r19.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        virtualinvoke $r17.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>($r16, $r18, $r20);

        $r21 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r24);

        return $r24;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlide createSlide()
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.lang.IllegalArgumentException $r11;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r7;
        java.util.Map $r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r1;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout $r9;
        java.lang.Object $r6;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdList $r2;
        java.lang.String $r4;
        org.apache.poi.xslf.usermodel.XSLFSlide $r10;
        org.apache.poi.xslf.usermodel.SlideLayout $r8;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdList getSldMasterIdLst()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdList: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry getSldMasterIdArray(int)>(0);

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterIdListEntry: java.lang.String getId2()>();

        $r5 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.Map _masters>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r7 = (org.apache.poi.xslf.usermodel.XSLFSlideMaster) $r6;

        $r8 = <org.apache.poi.xslf.usermodel.SlideLayout: org.apache.poi.xslf.usermodel.SlideLayout BLANK>;

        $r9 = virtualinvoke r7.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFSlideLayout getLayout(org.apache.poi.xslf.usermodel.SlideLayout)>($r8);

        if $r9 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Blank layout was not found");

        throw $r11;

     label1:
        $r10 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFSlide createSlide(org.apache.poi.xslf.usermodel.XSLFSlideLayout)>($r9);

        return $r10;
    }

    public org.apache.poi.xslf.usermodel.XSLFNotesMaster getNotesMaster()
    {
        org.apache.poi.xslf.usermodel.XSLFNotesMaster $r1;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFNotesMaster _notesMaster>;

        return $r1;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlideMaster[] getSlideMasters()
    {
        java.lang.Object[] $r5;
        java.util.Collection $r2;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.util.Map $r1, $r3;
        int $i0;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster[] $r4, $r6;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.Map _masters>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.Map _masters>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r4 = newarray (org.apache.poi.xslf.usermodel.XSLFSlideMaster)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.poi.xslf.usermodel.XSLFSlideMaster[]) $r5;

        return $r6;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlide[] getSlides()
    {
        org.apache.poi.xslf.usermodel.XSLFSlide[] $r3, $r5;
        java.util.List $r1, $r2;
        java.lang.Object[] $r4;
        int $i0;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.poi.xslf.usermodel.XSLFSlide)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.poi.xslf.usermodel.XSLFSlide[]) $r4;

        return $r5;
    }

    public org.apache.poi.xslf.usermodel.XSLFCommentAuthors getCommentAuthors()
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.apache.poi.xslf.usermodel.XSLFCommentAuthors $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFCommentAuthors _commentAuthors>;

        return $r1;
    }

    public void setSlideOrder(org.apache.poi.xslf.usermodel.XSLFSlide, int)
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.lang.IllegalArgumentException $r12;
        java.util.List $r2, $r3, $r4, $r8;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList $r7;
        int $i0, i1, $i3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r6;
        java.lang.Object $r5, $r9;
        org.apache.poi.xslf.usermodel.XSLFSlide r1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry r10;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r1 := @parameter0: org.apache.poi.xslf.usermodel.XSLFSlide;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slide not found");

        throw $r12;

     label1:
        $r4 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        $r3 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i0);

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(i1, $r5);

        $r6 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSldIdLst()>();

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList: java.util.List getSldIdList()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i0);

        r10 = (org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdListEntry) $r9;

        interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(i1, r10);

        interfaceinvoke $r8.<java.util.List: boolean remove(java.lang.Object)>(r10);

        return;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlide removeSlide(int)
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.util.List $r1, $r6;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList $r5;
        int i0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r4;
        java.lang.Object $r2;
        org.apache.poi.xslf.usermodel.XSLFSlide r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _slides>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        r3 = (org.apache.poi.xslf.usermodel.XSLFSlide) $r2;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: void removeRelation(org.apache.poi.POIXMLDocumentPart)>(r3);

        $r4 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList getSldIdLst()>();

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideIdList: java.util.List getSldIdList()>();

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i0);

        return r3;
    }

    public java.awt.Dimension getPageSize()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize $r2;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        long $l2, $l3;
        java.awt.Dimension $r3;
        int $i0, $i1, $i4, $i5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r1;
        double $d0, $d1;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize getSldSz()>();

        $i0 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize: int getCx()>();

        $i1 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize: int getCy()>();

        $r3 = new java.awt.Dimension;

        $l2 = (long) $i0;

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l2);

        $i4 = (int) $d0;

        $l3 = (long) $i1;

        $d1 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l3);

        $i5 = (int) $d1;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>($i4, $i5);

        return $r3;
    }

    public void setPageSize(java.awt.Dimension)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize $r0;
        org.apache.poi.xslf.usermodel.XMLSlideShow r2;
        java.awt.Dimension r1;
        int $i0, $i1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r3;
        double $d0, $d1;

        r2 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r1 := @parameter0: java.awt.Dimension;

        $r0 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize newInstance()>();

        $d0 = virtualinvoke r1.<java.awt.Dimension: double getWidth()>();

        $i0 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d0);

        interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize: void setCx(int)>($i0);

        $d1 = virtualinvoke r1.<java.awt.Dimension: double getHeight()>();

        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d1);

        interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize: void setCy(int)>($i1);

        $r3 = r2.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: void setSldSz(org.openxmlformats.schemas.presentationml.x2006.main.CTSlideSize)>($r0);

        return;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation getCTPresentation()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r1;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        return $r1;
    }

    public int addPicture(byte[], int)
    {
        byte[] r1;
        org.apache.poi.POIXMLRelation[] $r3, $r7;
        org.apache.poi.xslf.usermodel.XSLFFactory $r9;
        org.apache.poi.POIXMLRelation r4, $r8;
        org.apache.poi.POIXMLDocumentPart $r10;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.poi.openxml4j.opc.PackagePart $r12;
        org.apache.poi.POIXMLException $r16;
        java.io.OutputStream $r13;
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        java.io.IOException $r15;
        java.util.List $r5, $r6, $r11, $r14;
        org.apache.poi.xslf.usermodel.XSLFPictureData $r2, r17;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFPictureData findPictureData(byte[])>(r1);

        $r3 = <org.apache.poi.xslf.usermodel.XSLFPictureData: org.apache.poi.POIXMLRelation[] RELATIONS>;

        r4 = $r3[i0];

        if $r2 != null goto label5;

        $r6 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = <org.apache.poi.xslf.usermodel.XSLFPictureData: org.apache.poi.POIXMLRelation[] RELATIONS>;

        $r8 = $r7[i0];

        $r9 = staticinvoke <org.apache.poi.xslf.usermodel.XSLFFactory: org.apache.poi.xslf.usermodel.XSLFFactory getInstance()>();

        $i3 = $i2 + 1;

        $r10 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.POIXMLDocumentPart createRelationship(org.apache.poi.POIXMLRelation,org.apache.poi.POIXMLFactory,int,boolean)>($r8, $r9, $i3, 1);

        r17 = (org.apache.poi.xslf.usermodel.XSLFPictureData) $r10;

        $r11 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r17);

     label1:
        $r12 = virtualinvoke r17.<org.apache.poi.xslf.usermodel.XSLFPictureData: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r13 = virtualinvoke $r12.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r13.<java.io.OutputStream: void write(byte[])>(r1);

        virtualinvoke $r13.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.apache.poi.POIXMLException;

        specialinvoke $r16.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label4:
        $r14 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        $i4 = interfaceinvoke $r14.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        return $i5;

     label5:
        $r5 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List _pictures>;

        $i1 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>($r2);

        return $i1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    org.apache.poi.xslf.usermodel.XSLFPictureData findPictureData(byte[])
    {
        byte[] r0;
        java.util.Iterator $r3;
        long $l0, $l1;
        org.apache.poi.xslf.usermodel.XMLSlideShow r1;
        java.util.List $r2;
        byte $b2;
        java.lang.Object $r4;
        org.apache.poi.xslf.usermodel.XSLFPictureData r5;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        r0 := @parameter0: byte[];

        $l0 = staticinvoke <org.apache.poi.util.IOUtils: long calculateChecksum(byte[])>(r0);

        $r2 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List getAllPictures()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.poi.xslf.usermodel.XSLFPictureData) $r4;

        $l1 = virtualinvoke r5.<org.apache.poi.xslf.usermodel.XSLFPictureData: long getChecksum()>();

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.apache.poi.xslf.usermodel.XSLFTableStyles getTableStyles()
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.apache.poi.xslf.usermodel.XSLFTableStyles $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.xslf.usermodel.XSLFTableStyles _tableStyles>;

        return $r1;
    }

    org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties getDefaultParagraphStyle(int)
    {
        org.apache.poi.xslf.usermodel.XMLSlideShow r0;
        org.apache.xmlbeans.XmlObject[] $r7;
        int i0, $i1, $i2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation $r2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.xmlbeans.XmlObject $r8;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties $r9;

        r0 := @this: org.apache.poi.xslf.usermodel.XMLSlideShow;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XMLSlideShow: org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation _presentation>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("declare namespace p=\'http://schemas.openxmlformats.org/presentationml/2006/main\' declare namespace a=\'http://schemas.openxmlformats.org/drawingml/2006/main\' .//p:defaultTextStyle/a:lvl");

        $i1 = i0 + 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pPr");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTPresentation: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>($r6);

        $i2 = lengthof $r7;

        if $i2 != 1 goto label1;

        $r8 = $r7[0];

        $r9 = (org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraphProperties) $r8;

        return $r9;

     label1:
        return null;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/xslf/usermodel/XMLSlideShow;");

        <org.apache.poi.xslf.usermodel.XMLSlideShow: org.apache.poi.util.POILogger _logger> = $r0;

        return;
    }
}
