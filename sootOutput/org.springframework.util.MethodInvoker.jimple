public class org.springframework.util.MethodInvoker extends java.lang.Object
{
    private java.lang.Class targetClass;
    private java.lang.Object targetObject;
    private java.lang.String targetMethod;
    private java.lang.String staticMethod;
    private java.lang.Object[] arguments;
    private java.lang.reflect.Method methodObject;

    public void <init>()
    {
        java.lang.Object[] $r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[0];

        r0.<org.springframework.util.MethodInvoker: java.lang.Object[] arguments> = $r1;

        return;
    }

    public void setTargetClass(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.util.MethodInvoker: java.lang.Class targetClass> = r1;

        return;
    }

    public java.lang.Class getTargetClass()
    {
        java.lang.Class $r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.Class targetClass>;

        return $r1;
    }

    public void setTargetObject(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        r1 := @parameter0: java.lang.Object;

        r0.<org.springframework.util.MethodInvoker: java.lang.Object targetObject> = r1;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<org.springframework.util.MethodInvoker: java.lang.Class targetClass> = $r2;

     label1:
        return;
    }

    public java.lang.Object getTargetObject()
    {
        java.lang.Object $r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.Object targetObject>;

        return $r1;
    }

    public void setTargetMethod(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.util.MethodInvoker: java.lang.String targetMethod> = r1;

        return;
    }

    public java.lang.String getTargetMethod()
    {
        java.lang.String $r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.String targetMethod>;

        return $r1;
    }

    public void setStaticMethod(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.util.MethodInvoker: java.lang.String staticMethod> = r1;

        return;
    }

    public void setArguments(java.lang.Object[])
    {
        java.lang.Object[] r1, $r2;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        r1 := @parameter0: java.lang.Object[];

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[0];

     label2:
        r0.<org.springframework.util.MethodInvoker: java.lang.Object[] arguments> = $r2;

        return;
    }

    public java.lang.Object[] getArguments()
    {
        java.lang.Object[] $r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.Object[] arguments>;

        return $r1;
    }

    public void prepare() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException
    {
        java.lang.Object[] $r4;
        java.lang.NoSuchMethodException $r19;
        org.springframework.util.MethodInvoker r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i8;
        java.lang.String $r1, $r3, $r11, $r13, $r14, $r15, $r16, $r17;
        java.lang.reflect.Method $r8, $r20, $r21;
        java.lang.Class[] r5;
        java.lang.IllegalArgumentException $r23, $r24, $r25;
        java.lang.Class $r2, $r18, $r22;
        java.lang.Object $r6, $r7;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.String staticMethod>;

        if $r1 == null goto label03;

        $r11 = r0.<org.springframework.util.MethodInvoker: java.lang.String staticMethod>;

        $i2 = virtualinvoke $r11.<java.lang.String: int lastIndexOf(int)>(46);

        $i8 = (int) -1;

        if $i2 == $i8 goto label01;

        $r13 = r0.<org.springframework.util.MethodInvoker: java.lang.String staticMethod>;

        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i2 != $i3 goto label02;

     label01:
        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("staticMethod must be a fully qualified class plus method name: e.g. \'example.MyExampleClass.myExampleMethod\'");

        throw $r23;

     label02:
        $r14 = r0.<org.springframework.util.MethodInvoker: java.lang.String staticMethod>;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r16 = r0.<org.springframework.util.MethodInvoker: java.lang.String staticMethod>;

        $i4 = $i2 + 1;

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int)>($i4);

        $r18 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Class resolveClassName(java.lang.String)>($r15);

        r0.<org.springframework.util.MethodInvoker: java.lang.Class targetClass> = $r18;

        r0.<org.springframework.util.MethodInvoker: java.lang.String targetMethod> = $r17;

     label03:
        $r2 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Class getTargetClass()>();

        $r3 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.String getTargetMethod()>();

        if $r2 != null goto label04;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Either \'targetClass\' or \'targetObject\' is required");

        throw $r24;

     label04:
        if $r3 != null goto label05;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'targetMethod\' is required");

        throw $r25;

     label05:
        $r4 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Object[] getArguments()>();

        $i0 = lengthof $r4;

        r5 = newarray (java.lang.Class)[$i0];

        i5 = 0;

        goto label09;

     label06:
        $i1 = i5;

        $r6 = $r4[i5];

        if $r6 == null goto label07;

        $r7 = $r4[i5];

        $r22 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        goto label08;

     label07:
        $r22 = class "Ljava/lang/Object;";

     label08:
        r5[$i1] = $r22;

        i5 = i5 + 1;

     label09:
        $i6 = lengthof $r4;

        if i5 < $i6 goto label06;

     label10:
        $r8 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r3, r5);

        r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method methodObject> = $r8;

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;

        $r20 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method findMatchingMethod()>();

        r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method methodObject> = $r20;

        $r21 = r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method methodObject>;

        if $r21 != null goto label13;

        throw $r19;

     label13:
        return;

        catch java.lang.NoSuchMethodException from label10 to label11 with label12;
    }

    protected java.lang.Class resolveClassName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.springframework.util.MethodInvoker r3;
        java.lang.Class $r2;
        java.lang.String r0;
        java.lang.ClassLoader $r1;

        r3 := @this: org.springframework.util.MethodInvoker;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    protected java.lang.reflect.Method findMatchingMethod()
    {
        java.lang.Object[] $r2;
        java.lang.reflect.Method[] $r4;
        org.springframework.util.MethodInvoker r0;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.String $r1, $r6;
        java.lang.reflect.Method r5, r8;
        boolean $z0;
        java.lang.Class[] $r7;
        java.lang.Class $r3;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.String getTargetMethod()>();

        $r2 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Object[] getArguments()>();

        i0 = lengthof $r2;

        $r3 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Class getTargetClass()>();

        $r4 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class)>($r3);

        i4 = 2147483647;

        r8 = null;

        i1 = lengthof $r4;

        i5 = 0;

        goto label3;

     label1:
        r5 = $r4[i5];

        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r7;

        if $i2 != i0 goto label2;

        $i3 = staticinvoke <org.springframework.util.MethodInvoker: int getTypeDifferenceWeight(java.lang.Class[],java.lang.Object[])>($r7, $r2);

        if $i3 >= i4 goto label2;

        i4 = $i3;

        r8 = r5;

     label2:
        i5 = i5 + 1;

     label3:
        if i5 < i1 goto label1;

        return r8;
    }

    public java.lang.reflect.Method getPreparedMethod() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3;
        org.springframework.util.MethodInvoker r0;
        java.lang.reflect.Method $r1, $r2;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method methodObject>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepare() must be called prior to invoke() on MethodInvoker");

        throw $r3;

     label1:
        $r2 = r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method methodObject>;

        return $r2;
    }

    public boolean isPrepared()
    {
        java.lang.reflect.Method $r1;
        org.springframework.util.MethodInvoker r0;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method methodObject>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object invoke() throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        java.lang.Object[] $r3;
        java.lang.IllegalArgumentException $r5;
        org.springframework.util.MethodInvoker r0;
        int $i0;
        java.lang.Object $r1, $r4;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.springframework.util.MethodInvoker;

        $r1 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Object getTargetObject()>();

        $r2 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.reflect.Method getPreparedMethod()>();

        if $r1 != null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target method must not be non-static without a target");

        throw $r5;

     label1:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r2);

        $r3 = virtualinvoke r0.<org.springframework.util.MethodInvoker: java.lang.Object[] getArguments()>();

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

        return $r4;
    }

    public static int getTypeDifferenceWeight(java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r1;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] r0;
        java.lang.Object $r2, $r4, $r6;
        java.lang.Class $r3, r5, $r7, r8;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Object[];

        i0 = 0;

        i1 = 0;

        goto label8;

     label1:
        $r3 = r0[i1];

        $r2 = r1[i1];

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>($r3, $r2);

        if $z0 != 0 goto label2;

        return 2147483647;

     label2:
        $r4 = r1[i1];

        if $r4 == null goto label7;

        r5 = r0[i1];

        $r6 = r1[i1];

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label6;

     label3:
        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label4;

        i0 = i0 + 2;

        r8 = null;

        goto label6;

     label4:
        $z2 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(r5, r8);

        if $z2 == 0 goto label5;

        i0 = i0 + 2;

        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label6;

     label5:
        r8 = null;

     label6:
        if r8 != null goto label3;

        $z3 = virtualinvoke r5.<java.lang.Class: boolean isInterface()>();

        if $z3 == 0 goto label7;

        i0 = i0 + 1;

     label7:
        i1 = i1 + 1;

     label8:
        $i2 = lengthof r0;

        if i1 < $i2 goto label1;

        return i0;
    }
}
