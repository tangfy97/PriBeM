public class org.bouncycastle.crypto.signers.DSADigestSigner extends java.lang.Object implements org.bouncycastle.crypto.Signer
{
    private final org.bouncycastle.crypto.Digest digest;
    private final org.bouncycastle.crypto.DSA dsaSigner;
    private boolean forSigning;

    public void <init>(org.bouncycastle.crypto.DSA, org.bouncycastle.crypto.Digest)
    {
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        org.bouncycastle.crypto.Digest r1;
        org.bouncycastle.crypto.DSA r2;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        r2 := @parameter0: org.bouncycastle.crypto.DSA;

        r1 := @parameter1: org.bouncycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest> = r1;

        r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.DSA dsaSigner> = r2;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter r7;
        java.lang.IllegalArgumentException $r3, $r4;
        org.bouncycastle.crypto.params.ParametersWithRandom $r5;
        org.bouncycastle.crypto.DSA $r2;
        boolean z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.CipherParameters r1, $r6;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r0.<org.bouncycastle.crypto.signers.DSADigestSigner: boolean forSigning> = z0;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        $r5 = (org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r7 = (org.bouncycastle.crypto.params.AsymmetricKeyParameter) $r6;

        goto label2;

     label1:
        r7 = (org.bouncycastle.crypto.params.AsymmetricKeyParameter) r1;

     label2:
        if z0 == 0 goto label3;

        $z3 = virtualinvoke r7.<org.bouncycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z3 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Signing Requires Private Key.");

        throw $r4;

     label3:
        if z0 != 0 goto label4;

        $z2 = virtualinvoke r7.<org.bouncycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z2 == 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Verification Requires Public Key.");

        throw $r3;

     label4:
        virtualinvoke r0.<org.bouncycastle.crypto.signers.DSADigestSigner: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.DSA dsaSigner>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z0, r1);

        return;
    }

    public void update(byte)
    {
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        org.bouncycastle.crypto.Digest $r1;
        byte b0;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        b0 := @parameter0: byte;

        $r1 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: void update(byte)>(b0);

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] r1;
        int i0, i1;
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        org.bouncycastle.crypto.Digest $r2;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public byte[] generateSignature()
    {
        byte[] r2, $r8;
        java.lang.IllegalStateException $r9;
        java.math.BigInteger[] $r5;
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        org.bouncycastle.crypto.Digest $r1, $r3;
        int $i0;
        java.math.BigInteger $r6, $r7;
        org.bouncycastle.crypto.DSA $r4;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        $z0 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DSADigestSigner not initialised for signature generation.");

        throw $r9;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r4 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.DSA dsaSigner>;

        $r5 = interfaceinvoke $r4.<org.bouncycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>(r2);

        $r7 = $r5[0];

        $r6 = $r5[1];

        $r8 = specialinvoke r0.<org.bouncycastle.crypto.signers.DSADigestSigner: byte[] derEncode(java.math.BigInteger,java.math.BigInteger)>($r7, $r6);

        return $r8;
    }

    public boolean verifySignature(byte[])
    {
        byte[] r2, r4;
        java.lang.IllegalStateException $r9;
        java.math.BigInteger[] $r5;
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        java.io.IOException $r10;
        org.bouncycastle.crypto.Digest $r1, $r3;
        int $i0;
        java.math.BigInteger $r6, $r7;
        org.bouncycastle.crypto.DSA $r8;
        boolean $z0, $z1;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        r4 := @parameter0: byte[];

        $z0 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: boolean forSigning>;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DSADigestSigner not initialised for verification");

        throw $r9;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label2:
        $r5 = specialinvoke r0.<org.bouncycastle.crypto.signers.DSADigestSigner: java.math.BigInteger[] derDecode(byte[])>(r4);

        $r8 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.DSA dsaSigner>;

        $r7 = $r5[0];

        $r6 = $r5[1];

        $z1 = interfaceinvoke $r8.<org.bouncycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>(r2, $r7, $r6);

     label3:
        return $z1;

     label4:
        $r10 := @caughtexception;

        return 0;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void reset()
    {
        org.bouncycastle.crypto.signers.DSADigestSigner r0;
        org.bouncycastle.crypto.Digest $r1;

        r0 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        $r1 = r0.<org.bouncycastle.crypto.signers.DSADigestSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: void reset()>();

        return;
    }

    private byte[] derEncode(java.math.BigInteger, java.math.BigInteger)
    {
        byte[] $r6;
        org.bouncycastle.asn1.ASN1EncodableVector $r0;
        org.bouncycastle.crypto.signers.DSADigestSigner r7;
        org.bouncycastle.asn1.DERInteger $r1, $r3;
        org.bouncycastle.asn1.DERSequence $r5;
        java.math.BigInteger r2, r4;

        r7 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        r2 := @parameter0: java.math.BigInteger;

        r4 := @parameter1: java.math.BigInteger;

        $r0 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r1 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r1.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>(r2);

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r1);

        $r3 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r3.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>(r4);

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r3);

        $r5 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r5.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r0);

        $r6 = virtualinvoke $r5.<org.bouncycastle.asn1.DERSequence: byte[] getDEREncoded()>();

        return $r6;
    }

    private java.math.BigInteger[] derDecode(byte[]) throws java.io.IOException
    {
        byte[] r0;
        org.bouncycastle.asn1.ASN1Sequence r2;
        org.bouncycastle.asn1.DEREncodable $r4, $r7;
        java.math.BigInteger[] $r3;
        org.bouncycastle.crypto.signers.DSADigestSigner r10;
        org.bouncycastle.asn1.DERInteger $r5, $r8;
        java.math.BigInteger $r6, $r9;
        org.bouncycastle.asn1.ASN1Object $r1;

        r10 := @this: org.bouncycastle.crypto.signers.DSADigestSigner;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.bouncycastle.asn1.ASN1Object: org.bouncycastle.asn1.ASN1Object fromByteArray(byte[])>(r0);

        r2 = (org.bouncycastle.asn1.ASN1Sequence) $r1;

        $r3 = newarray (java.math.BigInteger)[2];

        $r4 = virtualinvoke r2.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(0);

        $r5 = (org.bouncycastle.asn1.DERInteger) $r4;

        $r6 = virtualinvoke $r5.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $r3[0] = $r6;

        $r7 = virtualinvoke r2.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(1);

        $r8 = (org.bouncycastle.asn1.DERInteger) $r7;

        $r9 = virtualinvoke $r8.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $r3[1] = $r9;

        return $r3;
    }
}
