public class org.apache.xalan.lib.ExsltStrings extends org.apache.xalan.lib.ExsltBase
{

    public void <init>()
    {
        org.apache.xalan.lib.ExsltStrings r0;

        r0 := @this: org.apache.xalan.lib.ExsltStrings;

        specialinvoke r0.<org.apache.xalan.lib.ExsltBase: void <init>()>();

        return;
    }

    public static java.lang.String align(java.lang.String, java.lang.String, java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.StringBuffer $r3, $r4, $r6, $r8, $r10, $r11, $r13, $r15, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r0, r1, r2, $r5, $r7, $r9, $r12, $r14, $r16, $r19, $r20;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        $i12 = virtualinvoke r1.<java.lang.String: int length()>();

        $r20 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i12);

        return $r20;

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("right");

        if $z0 == 0 goto label2;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $i9 = virtualinvoke r1.<java.lang.String: int length()>();

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = $i9 - $i10;

        $r16 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r19;

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("center");

        if $z1 == 0 goto label3;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i3 - $i4;

        i6 = $i5 / 2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = i6 + $i7;

        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i8);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String align(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.xalan.lib.ExsltStrings: java.lang.String align(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "left");

        return $r2;
    }

    public static java.lang.String concat(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r1;
        java.lang.StringBuffer $r0;
        org.w3c.dom.Node $r2;
        int $i0, i1, $i2;
        java.lang.String $r3, $r4;

        r1 := @parameter0: org.w3c.dom.NodeList;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

        goto label3;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r3 = staticinvoke <org.apache.xalan.lib.ExsltBase: java.lang.String toString(org.w3c.dom.Node)>($r2);

        if $r3 == null goto label2;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label2:
        i1 = i1 + 1;

     label3:
        $i2 = interfaceinvoke r1.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label1;

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String padding(double, java.lang.String)
    {
        char $c3;
        java.lang.StringBuffer $r1;
        int $i0, i1, $i2, i4, i5;
        java.lang.String r0, $r2;
        double d0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        i1 = (int) d0;

        i4 = 0;

        i5 = 0;

        goto label5;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 != $i2 goto label4;

        i5 = 0;

     label4:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        i5 = i5 + 1;

        i4 = i4 + 1;

     label5:
        if i4 < i1 goto label3;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String padding(double)
    {
        java.lang.String $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltStrings: java.lang.String padding(double,java.lang.String)>(d0, " ");

        return $r0;
    }

    public static org.w3c.dom.NodeList split(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r6;
        org.w3c.dom.Text $r5;
        org.w3c.dom.Element $r4;
        org.w3c.dom.Document $r3;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, r2, r7;
        org.apache.xpath.NodeSet $r0;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.xpath.NodeSet;

        specialinvoke $r0.<org.apache.xpath.NodeSet: void <init>()>();

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)>(1);

        z0 = 0;

        i3 = 0;

        goto label6;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>(r2, i3);

        if $i1 < 0 goto label2;

        r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, $i1);

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        i3 = $i1 + $i2;

        goto label3;

     label2:
        z0 = 1;

        r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i3);

     label3:
        $r3 = staticinvoke <org.apache.xalan.lib.ExsltStrings$DocumentHolder: org.w3c.dom.Document access$000()>();

        entermonitor $r3;

     label4:
        $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("token");

        $r5 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r7);

        interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void addNode(org.w3c.dom.Node)>($r4);

        exitmonitor $r3;

        goto label6;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r3;

        throw $r6;

     label6:
        if z0 != 0 goto label7;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 < $i0 goto label1;

     label7:
        return $r0;

        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static org.w3c.dom.NodeList split(java.lang.String)
    {
        java.lang.String r0;
        org.w3c.dom.NodeList $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltStrings: org.w3c.dom.NodeList split(java.lang.String,java.lang.String)>(r0, " ");

        return $r1;
    }

    public static org.w3c.dom.NodeList tokenize(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r12, $r13;
        org.w3c.dom.Text $r6, $r11;
        org.w3c.dom.Document $r2, $r8;
        java.util.StringTokenizer $r7;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, r3, $r5, $r10;
        org.apache.xpath.NodeSet $r0;
        boolean $z0;
        org.w3c.dom.Element $r4, $r9;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.apache.xpath.NodeSet;

        specialinvoke $r0.<org.apache.xpath.NodeSet: void <init>()>();

        if r1 == null goto label06;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 0 goto label06;

        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, r1);

        $r8 = staticinvoke <org.apache.xalan.lib.ExsltStrings$DocumentHolder: org.w3c.dom.Document access$000()>();

        entermonitor $r8;

     label01:
        goto label03;

     label02:
        $r9 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("token");

        $r10 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r10);

        interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void addNode(org.w3c.dom.Node)>($r9);

     label03:
        $z0 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label02;

        exitmonitor $r8;

        goto label05;

     label04:
        $r13 := @caughtexception;

        exitmonitor $r8;

        throw $r13;

     label05:
        goto label11;

     label06:
        $r2 = staticinvoke <org.apache.xalan.lib.ExsltStrings$DocumentHolder: org.w3c.dom.Document access$000()>();

        entermonitor $r2;

     label07:
        i3 = 0;

        goto label09;

     label08:
        $r4 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("token");

        $i1 = i3 + 1;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(i3, $i1);

        $r6 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r5);

        interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void addNode(org.w3c.dom.Node)>($r4);

        i3 = i3 + 1;

     label09:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if i3 < $i0 goto label08;

        exitmonitor $r2;

        goto label11;

     label10:
        $r12 := @caughtexception;

        exitmonitor $r2;

        throw $r12;

     label11:
        return $r0;

        catch java.lang.Throwable from label01 to label04 with label04;
        catch java.lang.Throwable from label07 to label10 with label10;
    }

    public static org.w3c.dom.NodeList tokenize(java.lang.String)
    {
        java.lang.String r0;
        org.w3c.dom.NodeList $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltStrings: org.w3c.dom.NodeList tokenize(java.lang.String,java.lang.String)>(r0, " \t\n\r");

        return $r1;
    }
}
