public abstract class com.jhlabs.composite.RGBComposite$RGBCompositeContext extends java.lang.Object implements java.awt.CompositeContext
{
    private float alpha;
    private java.awt.image.ColorModel srcColorModel;
    private java.awt.image.ColorModel dstColorModel;

    public void <init>(float, java.awt.image.ColorModel, java.awt.image.ColorModel)
    {
        com.jhlabs.composite.RGBComposite$RGBCompositeContext r0;
        java.awt.image.ColorModel r1, r2;
        float f0;

        r0 := @this: com.jhlabs.composite.RGBComposite$RGBCompositeContext;

        f0 := @parameter0: float;

        r1 := @parameter1: java.awt.image.ColorModel;

        r2 := @parameter2: java.awt.image.ColorModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.composite.RGBComposite$RGBCompositeContext: float alpha> = f0;

        r0.<com.jhlabs.composite.RGBComposite$RGBCompositeContext: java.awt.image.ColorModel srcColorModel> = r1;

        r0.<com.jhlabs.composite.RGBComposite$RGBCompositeContext: java.awt.image.ColorModel dstColorModel> = r2;

        return;
    }

    public void dispose()
    {
        com.jhlabs.composite.RGBComposite$RGBCompositeContext r0;

        r0 := @this: com.jhlabs.composite.RGBComposite$RGBCompositeContext;

        return;
    }

    static int multiply255(int, int)
    {
        int i0, i1, $i2, i3, $i4, $i5, $i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * i1;

        i3 = $i2 + 128;

        $i4 = i3 >> 8;

        $i5 = $i4 + i3;

        $i6 = $i5 >> 8;

        return $i6;
    }

    static int clamp(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = 0;

        goto label3;

     label1:
        if i0 <= 255 goto label2;

        $i1 = 255;

        goto label3;

     label2:
        $i1 = i0;

     label3:
        return $i1;
    }

    public abstract void composeRGB(int[], int[], float);

    public void compose(java.awt.image.Raster, java.awt.image.Raster, java.awt.image.WritableRaster)
    {
        com.jhlabs.composite.RGBComposite$RGBCompositeContext r0;
        int[] $r3, $r5, r6, r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.awt.image.Raster r2, r4;
        float f0;
        java.awt.image.WritableRaster r1;

        r0 := @this: com.jhlabs.composite.RGBComposite$RGBCompositeContext;

        r2 := @parameter0: java.awt.image.Raster;

        r4 := @parameter1: java.awt.image.Raster;

        r1 := @parameter2: java.awt.image.WritableRaster;

        f0 = r0.<com.jhlabs.composite.RGBComposite$RGBCompositeContext: float alpha>;

        r6 = null;

        r7 = null;

        $i0 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i2 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i3 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        i4 = $i2 + $i3;

        i5 = $i2;

     label1:
        if i5 >= i4 goto label2;

        $r3 = virtualinvoke r2.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i5, $i1, 1, r6);

        r6 = $r3;

        $r5 = virtualinvoke r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i5, $i1, 1, r7);

        r7 = $r5;

        virtualinvoke r0.<com.jhlabs.composite.RGBComposite$RGBCompositeContext: void composeRGB(int[],int[],float)>($r3, $r5, f0);

        virtualinvoke r1.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i0, i5, $i1, 1, $r5);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
}
