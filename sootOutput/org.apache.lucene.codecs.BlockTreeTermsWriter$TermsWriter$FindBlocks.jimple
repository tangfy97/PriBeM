class org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks extends org.apache.lucene.util.fst.Builder$FreezeTail
{
    final org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter this$1;

    private void <init>(org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r1;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks r0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks;

        r1 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter this$1> = r1;

        specialinvoke r0.<org.apache.lucene.util.fst.Builder$FreezeTail: void <init>()>();

        return;
    }

    public void freeze(org.apache.lucene.util.fst.Builder$UnCompiledNode[], int, org.apache.lucene.util.IntsRef) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r2, r13, $r16;
        long $l2, $l5, l7;
        org.apache.lucene.util.IntsRef r0;
        org.apache.lucene.util.fst.Builder$Arc[] $r10, $r14;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter $r4, $r6, $r8;
        byte $b3;
        org.apache.lucene.util.fst.Builder $r9;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks r3;
        int i0, $i1, $i4, i6, i8, $i9, $i10, $i12;
        org.apache.lucene.util.fst.Builder$Arc $r11, $r15;
        org.apache.lucene.util.fst.Builder$UnCompiledNode[] r1;
        boolean $z0;
        org.apache.lucene.codecs.BlockTreeTermsWriter $r5;
        org.apache.lucene.util.fst.Builder$Node $r12;

        r3 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks;

        r1 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode[];

        i0 := @parameter1: int;

        r0 := @parameter2: org.apache.lucene.util.IntsRef;

        i6 = r0.<org.apache.lucene.util.IntsRef: int length>;

     label1:
        if i6 < i0 goto label8;

        r2 = r1[i6];

        l7 = 0L;

        $z0 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal>;

        if $z0 == 0 goto label2;

        l7 = 1L;

     label2:
        i8 = 0;

     label3:
        $i9 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i8 >= $i9 goto label4;

        $r10 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r11 = $r10[i8];

        $r12 = $r11.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        r13 = (org.apache.lucene.util.fst.Builder$UnCompiledNode) $r12;

        $l5 = r13.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        l7 = l7 + $l5;

        virtualinvoke r13.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void clear()>();

        $r14 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r15 = $r14[i8];

        $r15.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target> = null;

        i8 = i8 + 1;

        goto label3;

     label4:
        r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs> = 0;

        $r4 = r3.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter this$1>;

        $r5 = $r4.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $i1 = $r5.<org.apache.lucene.codecs.BlockTreeTermsWriter: int minItemsInBlock>;

        $l2 = (long) $i1;

        $b3 = l7 cmp $l2;

        $i10 = (int) $b3;

        if $i10 >= 0 goto label5;

        if i6 != 0 goto label6;

     label5:
        $r6 = r3.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter this$1>;

        $i4 = (int) l7;

        virtualinvoke $r6.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: void writeBlocks(org.apache.lucene.util.IntsRef,int,int)>(r0, i6, $i4);

        r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount> = 1L;

        goto label7;

     label6:
        r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount> = l7;

     label7:
        $r16 = new org.apache.lucene.util.fst.Builder$UnCompiledNode;

        $r8 = r3.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter this$1>;

        $r9 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.Builder access$000(org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter)>($r8);

        specialinvoke $r16.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void <init>(org.apache.lucene.util.fst.Builder,int)>($r9, i6);

        r1[i6] = $r16;

        $i12 = (int) -1;

        i6 = i6 + $i12;

        goto label1;

     label8:
        return;
    }

    void <init>(org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter, org.apache.lucene.codecs.BlockTreeTermsWriter$1)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r1;
        org.apache.lucene.codecs.BlockTreeTermsWriter$1 r2;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks r0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks;

        r1 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r2 := @parameter1: org.apache.lucene.codecs.BlockTreeTermsWriter$1;

        specialinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks: void <init>(org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter)>(r1);

        return;
    }
}
