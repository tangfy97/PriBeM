public class org.springframework.scripting.support.ScriptFactoryPostProcessor extends org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.DisposableBean, org.springframework.core.Ordered
{
    public static final java.lang.String INLINE_SCRIPT_PREFIX;
    public static final java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE;
    private static final java.lang.String SCRIPT_FACTORY_NAME_PREFIX;
    private static final java.lang.String SCRIPTED_OBJECT_NAME_PREFIX;
    protected final org.apache.commons.logging.Log logger;
    private long defaultRefreshCheckDelay;
    private java.lang.ClassLoader beanClassLoader;
    private org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory;
    private org.springframework.core.io.ResourceLoader resourceLoader;
    final org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory;
    private final java.util.Map scriptSourceCache;

    static void <clinit>()
    {
        java.lang.String $r0;

        <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String SCRIPTED_OBJECT_NAME_PREFIX> = "scriptedObject.";

        <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String SCRIPT_FACTORY_NAME_PREFIX> = "scriptFactory.";

        <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String INLINE_SCRIPT_PREFIX> = "inline:";

        $r0 = staticinvoke <org.springframework.core.Conventions: java.lang.String getQualifiedAttributeName(java.lang.Class,java.lang.String)>(class "Lorg/springframework/scripting/support/ScriptFactoryPostProcessor;", "refreshCheckDelay");

        <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;
        org.springframework.core.io.DefaultResourceLoader $r4;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.HashMap $r6;
        java.lang.ClassLoader $r3;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r5;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        specialinvoke r0.<org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: long defaultRefreshCheckDelay> = -1L;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.ClassLoader beanClassLoader> = $r3;

        $r4 = new org.springframework.core.io.DefaultResourceLoader;

        specialinvoke $r4.<org.springframework.core.io.DefaultResourceLoader: void <init>()>();

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.core.io.ResourceLoader resourceLoader> = $r4;

        $r5 = new org.springframework.beans.factory.support.DefaultListableBeanFactory;

        specialinvoke $r5.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void <init>()>();

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.util.Map scriptSourceCache> = $r6;

        return;
    }

    public void setDefaultRefreshCheckDelay(long)
    {
        long l0;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        l0 := @parameter0: long;

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: long defaultRefreshCheckDelay> = l0;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        java.lang.IllegalStateException $r11;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r1;
        java.lang.String $r15;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9;
        java.util.List $r8;
        org.springframework.beans.factory.BeanFactory r0;
        java.lang.Object $r10;
        java.lang.StringBuilder $r12, $r14;
        java.lang.Class $r13;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r4, $r6, $r7;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r2, $r3, $r5;

        r1 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $z0 = r0 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("ScriptFactoryPostProcessor doesn\'t work with a BeanFactory which does not implement ConfigurableBeanFactory: ");

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r2 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) r0;

        r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory> = $r2;

        $r4 = r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r3 = r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        virtualinvoke $r4.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void setParentBeanFactory(org.springframework.beans.factory.BeanFactory)>($r3);

        $r6 = r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r5 = r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        virtualinvoke $r6.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)>($r5);

        $r7 = r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r8 = virtualinvoke $r7.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r10 instanceof org.springframework.aop.framework.AopInfrastructureBean;

        if $z1 == 0 goto label3;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

     label3:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        return;
    }

    public void setResourceLoader(org.springframework.core.io.ResourceLoader)
    {
        org.springframework.core.io.ResourceLoader r1;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: org.springframework.core.io.ResourceLoader;

        r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.core.io.ResourceLoader resourceLoader> = r1;

        return;
    }

    public int getOrder()
    {
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        return -2147483648;
    }

    public java.lang.Class predictBeanType(java.lang.Class, java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Exception $r22;
        org.springframework.scripting.ScriptSource $r16;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r24, $r26, $r27, $r32, $r34, $r35, $r37;
        java.lang.Throwable $r30;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r2;
        org.springframework.scripting.ScriptFactory r14;
        org.springframework.beans.factory.BeanCreationException $r29;
        int $i0;
        org.springframework.beans.factory.config.BeanDefinition $r5;
        java.lang.String r3, $r8, $r11, $r15, $r28, $r36, $r38;
        java.lang.Class[] $r17;
        java.lang.Class r0, $r1, $r18, $r21, $r39;
        java.lang.Object $r13, $r20;
        org.apache.commons.logging.Log $r23, $r25, $r31, $r33;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r12, $r19;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r4;

        r2 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        $r1 = class "Lorg/springframework/scripting/ScriptFactory;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r4 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        $r5 = interfaceinvoke $r4.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r3);

     label02:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("scriptFactory.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("scriptedObject.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: void prepareScriptBeans(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,java.lang.String)>($r5, $r8, $r11);

        $r12 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r13 = virtualinvoke $r12.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r8, class "Lorg/springframework/scripting/ScriptFactory;");

        r14 = (org.springframework.scripting.ScriptFactory) $r13;

        $r15 = interfaceinvoke r14.<org.springframework.scripting.ScriptFactory: java.lang.String getScriptSourceLocator()>();

        $r16 = virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.scripting.ScriptSource getScriptSource(java.lang.String,java.lang.String)>($r8, $r15);

        $r17 = interfaceinvoke r14.<org.springframework.scripting.ScriptFactory: java.lang.Class[] getScriptInterfaces()>();

        $r18 = interfaceinvoke r14.<org.springframework.scripting.ScriptFactory: java.lang.Class getScriptedObjectType(org.springframework.scripting.ScriptSource)>($r16);

        if $r18 == null goto label04;

     label03:
        return $r18;

     label04:
        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r17);

        if $z1 != 0 goto label07;

        $i0 = lengthof $r17;

        if $i0 != 1 goto label05;

        $r39 = $r17[0];

        goto label06;

     label05:
        $r39 = virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.Class createCompositeInterface(java.lang.Class[])>($r17);

     label06:
        return $r39;

     label07:
        $z2 = interfaceinvoke $r5.<org.springframework.beans.factory.config.BeanDefinition: boolean isSingleton()>();

        if $z2 == 0 goto label11;

        $r19 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r20 = virtualinvoke $r19.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>($r11);

        if $r20 == null goto label11;

        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

     label08:
        return $r21;

     label09:
        $r22 := @caughtexception;

        $z3 = $r22 instanceof org.springframework.beans.factory.BeanCreationException;

        if $z3 == 0 goto label10;

        $r29 = (org.springframework.beans.factory.BeanCreationException) $r22;

        $r30 = virtualinvoke $r29.<org.springframework.beans.factory.BeanCreationException: java.lang.Throwable getMostSpecificCause()>();

        $z5 = $r30 instanceof org.springframework.beans.factory.BeanCurrentlyInCreationException;

        if $z5 == 0 goto label10;

        $r31 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r31.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z6 == 0 goto label11;

        $r33 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.apache.commons.logging.Log logger>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not determine scripted object type for bean \'");

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r36 = virtualinvoke $r22.<java.lang.Exception: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r38);

        goto label11;

     label10:
        $r23 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r23.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label11;

        $r25 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.apache.commons.logging.Log logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not determine scripted object type for bean \'");

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r28, $r22);

     label11:
        return null;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Exception from label04 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    public java.lang.Object postProcessBeforeInstantiation(java.lang.Class, java.lang.String)
    {
        byte $b1;
        boolean $z0, z1;
        java.lang.Exception $r27;
        org.springframework.scripting.support.RefreshableScriptTargetSource $r37;
        org.springframework.scripting.ScriptSource $r16;
        java.lang.StringBuilder $r7, $r10, $r21, $r30, $r33, $r34, $r35, $r38;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r2;
        long $l0;
        org.springframework.scripting.ScriptFactory r14;
        org.springframework.beans.factory.BeanCreationException $r36;
        int $i2;
        org.springframework.beans.factory.config.BeanDefinition $r5;
        java.lang.String r3, $r8, $r11, $r15, $r31, r32;
        java.lang.Class[] $r22;
        java.lang.Class r0, $r1, $r17, $r26;
        java.lang.Object $r13, $r19, $r25;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r12, $r18, $r24;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r4;

        r2 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        $r1 = class "Lorg/springframework/scripting/ScriptFactory;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.ConfigurableBeanFactory beanFactory>;

        $r5 = interfaceinvoke $r4.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r3);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("scriptFactory.");

        $r7 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("scriptedObject.");

        $r10 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r32 = $r11;

        virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: void prepareScriptBeans(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,java.lang.String)>($r5, $r8, $r11);

        $r12 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r13 = virtualinvoke $r12.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r8, class "Lorg/springframework/scripting/ScriptFactory;");

        r14 = (org.springframework.scripting.ScriptFactory) $r13;

        $r15 = interfaceinvoke r14.<org.springframework.scripting.ScriptFactory: java.lang.String getScriptSourceLocator()>();

        $r16 = virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.scripting.ScriptSource getScriptSource(java.lang.String,java.lang.String)>($r8, $r15);

        z1 = 0;

     label2:
        $r17 = interfaceinvoke r14.<org.springframework.scripting.ScriptFactory: java.lang.Class getScriptedObjectType(org.springframework.scripting.ScriptSource)>($r16);

        if $r17 == null goto label5;

        $r26 = class "Lorg/springframework/beans/factory/FactoryBean;";

        z1 = virtualinvoke $r26.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r17);

     label3:
        goto label5;

     label4:
        $r27 := @caughtexception;

        $r36 = new org.springframework.beans.factory.BeanCreationException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not determine scripted object type for ");

        $r30 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>(r3, $r31, $r27);

        throw $r36;

     label5:
        $l0 = virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: long resolveRefreshCheckDelay(org.springframework.beans.factory.config.BeanDefinition)>($r5);

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label6;

        $r22 = interfaceinvoke r14.<org.springframework.scripting.ScriptFactory: java.lang.Class[] getScriptInterfaces()>();

        $r37 = new org.springframework.scripting.support.RefreshableScriptTargetSource;

        $r24 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        specialinvoke $r37.<org.springframework.scripting.support.RefreshableScriptTargetSource: void <init>(org.springframework.beans.factory.BeanFactory,java.lang.String,org.springframework.scripting.ScriptFactory,org.springframework.scripting.ScriptSource,boolean)>($r24, $r11, r14, $r16, z1);

        virtualinvoke $r37.<org.springframework.scripting.support.RefreshableScriptTargetSource: void setRefreshCheckDelay(long)>($l0);

        $r25 = virtualinvoke r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.Object createRefreshableProxy(org.springframework.aop.TargetSource,java.lang.Class[])>($r37, $r22);

        return $r25;

     label6:
        if z1 == 0 goto label7;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r21 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r32 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        $r18 = r2.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r19 = virtualinvoke $r18.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r32);

        return $r19;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void prepareScriptBeans(org.springframework.beans.factory.config.BeanDefinition, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r18;
        java.lang.Object[] $r17;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;
        long $l0;
        org.springframework.scripting.ScriptFactory r10;
        byte $b1;
        int $i2;
        org.springframework.beans.factory.config.BeanDefinition r5, $r7, $r20;
        java.lang.String r2, r4, $r11;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r13, r19;
        org.springframework.beans.MutablePropertyValues $r15;
        org.springframework.scripting.ScriptSource $r12;
        java.lang.Object $r9;
        java.lang.Class $r16;
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r1, $r3, $r6, $r8, $r14;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r5 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r1 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $z0 = virtualinvoke $r3.<org.springframework.beans.factory.support.DefaultListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r2);

        if $z0 != 0 goto label4;

        $r6 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r7 = virtualinvoke r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.BeanDefinition createScriptFactoryBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)>(r5);

        virtualinvoke $r6.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r4, $r7);

        $r8 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        $r9 = virtualinvoke $r8.<org.springframework.beans.factory.support.DefaultListableBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r4, class "Lorg/springframework/scripting/ScriptFactory;");

        r10 = (org.springframework.scripting.ScriptFactory) $r9;

        $r11 = interfaceinvoke r10.<org.springframework.scripting.ScriptFactory: java.lang.String getScriptSourceLocator()>();

        $r12 = virtualinvoke r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.scripting.ScriptSource getScriptSource(java.lang.String,java.lang.String)>(r4, $r11);

        $r13 = interfaceinvoke r10.<org.springframework.scripting.ScriptFactory: java.lang.Class[] getScriptInterfaces()>();

        r19 = $r13;

        $z1 = interfaceinvoke r10.<org.springframework.scripting.ScriptFactory: boolean requiresConfigInterface()>();

        if $z1 == 0 goto label2;

        $r15 = interfaceinvoke r5.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        $z2 = virtualinvoke $r15.<org.springframework.beans.MutablePropertyValues: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $r16 = virtualinvoke r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.Class createConfigInterface(org.springframework.beans.factory.config.BeanDefinition,java.lang.Class[])>(r5, $r13);

        $r17 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.Object[] addObjectToArray(java.lang.Object[],java.lang.Object)>($r13, $r16);

        r19 = (java.lang.Class[]) $r17;

     label2:
        $r20 = virtualinvoke r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.config.BeanDefinition createScriptedObjectBeanDefinition(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,org.springframework.scripting.ScriptSource,java.lang.Class[])>(r5, r4, $r12, r19);

        $l0 = virtualinvoke r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: long resolveRefreshCheckDelay(org.springframework.beans.factory.config.BeanDefinition)>(r5);

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label3;

        interfaceinvoke $r20.<org.springframework.beans.factory.config.BeanDefinition: void setScope(java.lang.String)>("prototype");

     label3:
        $r14 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        virtualinvoke $r14.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r2, $r20);

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r18 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r18;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected long resolveRefreshCheckDelay(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;
        long l0;
        org.springframework.beans.factory.config.BeanDefinition r1;
        java.lang.String $r2, $r6, $r11, $r12;
        java.lang.Number $r13;
        boolean $z0, $z1;
        org.springframework.beans.factory.BeanDefinitionStoreException $r4;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        l0 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: long defaultRefreshCheckDelay>;

        $r2 = <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE>;

        $r3 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: java.lang.Object getAttribute(java.lang.String)>($r2);

        $z0 = $r3 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r13 = (java.lang.Number) $r3;

        l0 = virtualinvoke $r13.<java.lang.Number: long longValue()>();

        goto label3;

     label1:
        $z1 = $r3 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r12 = (java.lang.String) $r3;

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r12);

        goto label3;

     label2:
        if $r3 == null goto label3;

        $r4 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid refresh check delay attribute [");

        $r6 = <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with value [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: needs to be of type Number or String");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        return l0;
    }

    protected org.springframework.beans.factory.config.BeanDefinition createScriptFactoryBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues $r3, $r4;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r5;
        org.springframework.beans.factory.config.BeanDefinition r1;
        java.lang.String $r2;
        org.springframework.beans.factory.support.GenericBeanDefinition $r0;

        r5 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r0 = new org.springframework.beans.factory.support.GenericBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void <init>()>();

        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void setBeanClassName(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        $r4 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        virtualinvoke $r3.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>($r4);

        return $r0;
    }

    protected org.springframework.scripting.ScriptSource getScriptSource(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r9;
        org.springframework.core.io.ResourceLoader $r6;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;
        org.springframework.scripting.ScriptSource $r7, r10;
        java.util.Map $r1, $r3, $r8;
        java.lang.Object $r4;
        java.lang.String r2, r5;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.util.Map scriptSourceCache>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.util.Map scriptSourceCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r10 = (org.springframework.scripting.ScriptSource) $r4;

        if r10 != null goto label2;

        $r6 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.core.io.ResourceLoader resourceLoader>;

        $r7 = virtualinvoke r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.scripting.ScriptSource convertToScriptSource(java.lang.String,java.lang.String,org.springframework.core.io.ResourceLoader)>(r2, r5, $r6);

        r10 = $r7;

        $r8 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.util.Map scriptSourceCache>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

     label2:
        exitmonitor $r1;

     label3:
        return r10;

     label4:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected org.springframework.scripting.ScriptSource convertToScriptSource(java.lang.String, java.lang.String, org.springframework.core.io.ResourceLoader)
    {
        org.springframework.scripting.support.StaticScriptSource $r4;
        org.springframework.core.io.ResourceLoader r2;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r8;
        int $i0;
        java.lang.String r0, $r5, $r6, r7;
        org.springframework.scripting.support.ResourceScriptSource $r1;
        boolean $z0;
        org.springframework.core.io.Resource $r3;

        r8 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: org.springframework.core.io.ResourceLoader;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("inline:");

        if $z0 == 0 goto label1;

        $r4 = new org.springframework.scripting.support.StaticScriptSource;

        $r5 = "inline:";

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        specialinvoke $r4.<org.springframework.scripting.support.StaticScriptSource: void <init>(java.lang.String,java.lang.String)>($r6, r7);

        return $r4;

     label1:
        $r1 = new org.springframework.scripting.support.ResourceScriptSource;

        $r3 = interfaceinvoke r2.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>(r0);

        specialinvoke $r1.<org.springframework.scripting.support.ResourceScriptSource: void <init>(org.springframework.core.io.Resource)>($r3);

        return $r1;
    }

    protected java.lang.Class createConfigInterface(org.springframework.beans.factory.config.BeanDefinition, java.lang.Class[])
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r30;
        org.springframework.beans.PropertyValue[] $r3;
        net.sf.cglib.core.Signature $r11, $r18, $r23;
        boolean $z0;
        net.sf.cglib.proxy.InterfaceMaker $r0;
        java.lang.StringBuilder $r7, $r9;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r28;
        int i0, i1;
        org.springframework.beans.factory.config.BeanDefinition r1;
        java.lang.String $r4, $r8, $r10, $r16, $r17, $r19, $r24;
        net.sf.cglib.asm.Type[] $r12, $r15, $r20, $r22, $r25, $r27;
        org.springframework.beans.PropertyValue r29;
        net.sf.cglib.asm.Type $r13, $r14, $r21, $r26;
        java.lang.Class[] r5;
        org.springframework.beans.MutablePropertyValues $r2;
        java.lang.Class $r6, $r31;

        r28 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r5 := @parameter1: java.lang.Class[];

        $r0 = new net.sf.cglib.proxy.InterfaceMaker;

        specialinvoke $r0.<net.sf.cglib.proxy.InterfaceMaker: void <init>()>();

        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        $r3 = virtualinvoke $r2.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label2;

     label1:
        r29 = $r3[i1];

        $r4 = virtualinvoke r29.<org.springframework.beans.PropertyValue: java.lang.String getName()>();

        $r6 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Class findPropertyType(java.lang.String,java.lang.Class[])>($r4, r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("set");

        $r8 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>($r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new net.sf.cglib.core.Signature;

        $r13 = <net.sf.cglib.asm.Type: net.sf.cglib.asm.Type VOID_TYPE>;

        $r12 = newarray (net.sf.cglib.asm.Type)[1];

        $r14 = staticinvoke <net.sf.cglib.asm.Type: net.sf.cglib.asm.Type getType(java.lang.Class)>($r6);

        $r12[0] = $r14;

        specialinvoke $r11.<net.sf.cglib.core.Signature: void <init>(java.lang.String,net.sf.cglib.asm.Type,net.sf.cglib.asm.Type[])>($r10, $r13, $r12);

        $r15 = newarray (net.sf.cglib.asm.Type)[0];

        virtualinvoke $r0.<net.sf.cglib.proxy.InterfaceMaker: void add(net.sf.cglib.core.Signature,net.sf.cglib.asm.Type[])>($r11, $r15);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        $z0 = r1 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z0 == 0 goto label4;

        r30 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r1;

        $r16 = virtualinvoke r30.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getInitMethodName()>();

        if $r16 == null goto label3;

        $r23 = new net.sf.cglib.core.Signature;

        $r24 = virtualinvoke r30.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getInitMethodName()>();

        $r26 = <net.sf.cglib.asm.Type: net.sf.cglib.asm.Type VOID_TYPE>;

        $r25 = newarray (net.sf.cglib.asm.Type)[0];

        specialinvoke $r23.<net.sf.cglib.core.Signature: void <init>(java.lang.String,net.sf.cglib.asm.Type,net.sf.cglib.asm.Type[])>($r24, $r26, $r25);

        $r27 = newarray (net.sf.cglib.asm.Type)[0];

        virtualinvoke $r0.<net.sf.cglib.proxy.InterfaceMaker: void add(net.sf.cglib.core.Signature,net.sf.cglib.asm.Type[])>($r23, $r27);

     label3:
        $r17 = virtualinvoke r30.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getDestroyMethodName()>();

        if $r17 == null goto label4;

        $r18 = new net.sf.cglib.core.Signature;

        $r19 = virtualinvoke r30.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getDestroyMethodName()>();

        $r21 = <net.sf.cglib.asm.Type: net.sf.cglib.asm.Type VOID_TYPE>;

        $r20 = newarray (net.sf.cglib.asm.Type)[0];

        specialinvoke $r18.<net.sf.cglib.core.Signature: void <init>(java.lang.String,net.sf.cglib.asm.Type,net.sf.cglib.asm.Type[])>($r19, $r21, $r20);

        $r22 = newarray (net.sf.cglib.asm.Type)[0];

        virtualinvoke $r0.<net.sf.cglib.proxy.InterfaceMaker: void add(net.sf.cglib.core.Signature,net.sf.cglib.asm.Type[])>($r18, $r22);

     label4:
        $r31 = virtualinvoke $r0.<net.sf.cglib.proxy.InterfaceMaker: java.lang.Class create()>();

        return $r31;
    }

    protected java.lang.Class createCompositeInterface(java.lang.Class[])
    {
        org.springframework.scripting.support.ScriptFactoryPostProcessor r1;
        java.lang.Class[] r0;
        java.lang.Class $r3;
        java.lang.ClassLoader $r2;

        r1 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r0 := @parameter0: java.lang.Class[];

        $r2 = r1.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.ClassLoader beanClassLoader>;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class createCompositeInterface(java.lang.Class[],java.lang.ClassLoader)>(r0, $r2);

        return $r3;
    }

    protected org.springframework.beans.factory.config.BeanDefinition createScriptedObjectBeanDefinition(org.springframework.beans.factory.config.BeanDefinition, java.lang.String, org.springframework.scripting.ScriptSource, java.lang.Class[])
    {
        org.springframework.scripting.support.ScriptFactoryPostProcessor r8;
        java.lang.Class[] r7;
        org.springframework.beans.factory.support.GenericBeanDefinition $r0;
        org.springframework.scripting.ScriptSource r5;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r3, $r4, $r6;
        org.springframework.beans.factory.config.BeanDefinition r1;
        java.lang.String r2;

        r8 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.springframework.scripting.ScriptSource;

        r7 := @parameter3: java.lang.Class[];

        $r0 = new org.springframework.beans.factory.support.GenericBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void setFactoryBeanName(java.lang.String)>(r2);

        virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: void setFactoryMethodName(java.lang.String)>("getScriptedObject");

        $r3 = virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        virtualinvoke $r3.<org.springframework.beans.factory.config.ConstructorArgumentValues: void clear()>();

        $r4 = virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        virtualinvoke $r4.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>(0, r5);

        $r6 = virtualinvoke $r0.<org.springframework.beans.factory.support.GenericBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        virtualinvoke $r6.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>(1, r7);

        return $r0;
    }

    protected java.lang.Object createRefreshableProxy(org.springframework.aop.TargetSource, java.lang.Class[])
    {
        org.springframework.scripting.support.ScriptFactoryPostProcessor r3;
        org.springframework.aop.TargetSource r1;
        java.lang.Class[] r8;
        org.springframework.aop.support.DelegatingIntroductionInterceptor $r2;
        org.springframework.aop.framework.ProxyFactory $r0;
        java.lang.Object $r5;
        java.lang.Class $r6;
        java.lang.ClassLoader $r4, $r7;

        r3 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        r1 := @parameter0: org.springframework.aop.TargetSource;

        r8 := @parameter1: java.lang.Class[];

        $r0 = new org.springframework.aop.framework.ProxyFactory;

        specialinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void <init>()>();

        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void setTargetSource(org.springframework.aop.TargetSource)>(r1);

        if r8 != null goto label1;

        $r6 = interfaceinvoke r1.<org.springframework.aop.TargetSource: java.lang.Class getTargetClass()>();

        $r7 = r3.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.ClassLoader beanClassLoader>;

        r8 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>($r6, $r7);

     label1:
        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void setInterfaces(java.lang.Class[])>(r8);

        $r2 = new org.springframework.aop.support.DelegatingIntroductionInterceptor;

        specialinvoke $r2.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void <init>(java.lang.Object)>(r1);

        virtualinvoke $r2.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void suppressInterface(java.lang.Class)>(class "Lorg/springframework/aop/TargetSource;");

        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void addAdvice(org.aopalliance.aop.Advice)>($r2);

        $r4 = r3.<org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.ClassLoader beanClassLoader>;

        $r5 = virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy(java.lang.ClassLoader)>($r4);

        return $r5;
    }

    public void destroy()
    {
        org.springframework.beans.factory.support.DefaultListableBeanFactory $r1;
        org.springframework.scripting.support.ScriptFactoryPostProcessor r0;

        r0 := @this: org.springframework.scripting.support.ScriptFactoryPostProcessor;

        $r1 = r0.<org.springframework.scripting.support.ScriptFactoryPostProcessor: org.springframework.beans.factory.support.DefaultListableBeanFactory scriptBeanFactory>;

        virtualinvoke $r1.<org.springframework.beans.factory.support.DefaultListableBeanFactory: void destroySingletons()>();

        return;
    }
}
