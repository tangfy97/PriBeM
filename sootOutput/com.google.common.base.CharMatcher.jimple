public abstract class com.google.common.base.CharMatcher extends java.lang.Object implements com.google.common.base.Predicate
{
    private static final java.lang.String BREAKING_WHITESPACE_CHARS;
    private static final java.lang.String NON_BREAKING_WHITESPACE_CHARS;
    public static final com.google.common.base.CharMatcher WHITESPACE;
    public static final com.google.common.base.CharMatcher BREAKING_WHITESPACE;
    public static final com.google.common.base.CharMatcher ASCII;
    public static final com.google.common.base.CharMatcher DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_WHITESPACE;
    public static final com.google.common.base.CharMatcher JAVA_DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_LETTER;
    public static final com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_UPPER_CASE;
    public static final com.google.common.base.CharMatcher JAVA_LOWER_CASE;
    public static final com.google.common.base.CharMatcher JAVA_ISO_CONTROL;
    public static final com.google.common.base.CharMatcher INVISIBLE;
    public static final com.google.common.base.CharMatcher SINGLE_WIDTH;
    public static final com.google.common.base.CharMatcher ANY;
    public static final com.google.common.base.CharMatcher NONE;

    public void <init>()
    {
        com.google.common.base.CharMatcher r0;

        r0 := @this: com.google.common.base.CharMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.base.CharMatcher is(char)
    {
        char c0;
        com.google.common.base.CharMatcher$8 $r0;

        c0 := @parameter0: char;

        $r0 = new com.google.common.base.CharMatcher$8;

        specialinvoke $r0.<com.google.common.base.CharMatcher$8: void <init>(char)>(c0);

        return $r0;
    }

    public static com.google.common.base.CharMatcher isNot(char)
    {
        char c0;
        com.google.common.base.CharMatcher$9 $r0;

        c0 := @parameter0: char;

        $r0 = new com.google.common.base.CharMatcher$9;

        specialinvoke $r0.<com.google.common.base.CharMatcher$9: void <init>(char)>(c0);

        return $r0;
    }

    public static com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        com.google.common.base.CharMatcher $r2, $r3;
        com.google.common.base.CharMatcher$11 $r6;
        char $c1, $c2, $c3;
        com.google.common.base.CharMatcher$10 $r1;
        int $i0;
        char[] $r5;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r3 = <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher NONE>;

        return $r3;

     label2:
        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $r2 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>($c3);

        return $r2;

     label3:
        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(1);

        $r1 = new com.google.common.base.CharMatcher$10;

        specialinvoke $r1.<com.google.common.base.CharMatcher$10: void <init>(char,char)>($c1, $c2);

        return $r1;

     label4:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        staticinvoke <java.util.Arrays: void sort(char[])>($r5);

        $r6 = new com.google.common.base.CharMatcher$11;

        specialinvoke $r6.<com.google.common.base.CharMatcher$11: void <init>(char[])>($r5);

        return $r6;
    }

    public static com.google.common.base.CharMatcher noneOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher $r1, $r2;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        return $r2;
    }

    public static com.google.common.base.CharMatcher inRange(char, char)
    {
        com.google.common.base.CharMatcher$12 $r1;
        int $i2, $i3;
        char c0, c1;
        boolean $z0;

        c1 := @parameter0: char;

        c0 := @parameter1: char;

        $i2 = (int) c0;

        $i3 = (int) c1;

        if $i2 < $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new com.google.common.base.CharMatcher$12;

        specialinvoke $r1.<com.google.common.base.CharMatcher$12: void <init>(char,char)>(c1, c0);

        return $r1;
    }

    public static com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate r0;
        com.google.common.base.CharMatcher $r2;
        boolean $z0;
        com.google.common.base.CharMatcher$13 $r1;

        r0 := @parameter0: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof com.google.common.base.CharMatcher;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.base.CharMatcher) r0;

        return $r2;

     label1:
        $r1 = new com.google.common.base.CharMatcher$13;

        specialinvoke $r1.<com.google.common.base.CharMatcher$13: void <init>(com.google.common.base.Predicate)>(r0);

        return $r1;
    }

    public abstract boolean matches(char);

    public com.google.common.base.CharMatcher negate()
    {
        com.google.common.base.CharMatcher r0;
        com.google.common.base.CharMatcher$14 $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 = new com.google.common.base.CharMatcher$14;

        specialinvoke $r1.<com.google.common.base.CharMatcher$14: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)>(r0, r0);

        return $r1;
    }

    public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)
    {
        java.util.List $r6;
        com.google.common.base.CharMatcher r2, r3, $r5;
        java.lang.Object $r4;
        com.google.common.base.CharMatcher$And $r0;
        com.google.common.base.CharMatcher[] $r1;

        r2 := @this: com.google.common.base.CharMatcher;

        r3 := @parameter0: com.google.common.base.CharMatcher;

        $r0 = new com.google.common.base.CharMatcher$And;

        $r1 = newarray (com.google.common.base.CharMatcher)[2];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r5 = (com.google.common.base.CharMatcher) $r4;

        $r1[1] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<com.google.common.base.CharMatcher$And: void <init>(java.util.List)>($r6);

        return $r0;
    }

    public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)
    {
        java.util.List $r6;
        com.google.common.base.CharMatcher r2, r3, $r5;
        java.lang.Object $r4;
        com.google.common.base.CharMatcher[] $r1;
        com.google.common.base.CharMatcher$Or $r0;

        r2 := @this: com.google.common.base.CharMatcher;

        r3 := @parameter0: com.google.common.base.CharMatcher;

        $r0 = new com.google.common.base.CharMatcher$Or;

        $r1 = newarray (com.google.common.base.CharMatcher)[2];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r5 = (com.google.common.base.CharMatcher) $r4;

        $r1[1] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<com.google.common.base.CharMatcher$Or: void <init>(java.util.List)>($r6);

        return $r0;
    }

    public com.google.common.base.CharMatcher precomputed()
    {
        com.google.common.base.CharMatcher r0, $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 = staticinvoke <com.google.common.base.Platform: com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher)>(r0);

        return $r1;
    }

    com.google.common.base.CharMatcher precomputedInternal()
    {
        com.google.common.base.CharMatcher r1;
        com.google.common.base.CharMatcher$LookupTable $r0;
        com.google.common.base.CharMatcher$15 $r2;

        r1 := @this: com.google.common.base.CharMatcher;

        $r0 = new com.google.common.base.CharMatcher$LookupTable;

        specialinvoke $r0.<com.google.common.base.CharMatcher$LookupTable: void <init>(com.google.common.base.CharMatcher$1)>(null);

        virtualinvoke r1.<com.google.common.base.CharMatcher: void setBits(com.google.common.base.CharMatcher$LookupTable)>($r0);

        $r2 = new com.google.common.base.CharMatcher$15;

        specialinvoke $r2.<com.google.common.base.CharMatcher$15: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher$LookupTable)>(r1, $r0);

        return $r2;
    }

    void setBits(com.google.common.base.CharMatcher$LookupTable)
    {
        com.google.common.base.CharMatcher$LookupTable r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i1, $i4;
        char c2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: com.google.common.base.CharMatcher$LookupTable;

        c2 = 0;

     label1:
        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>(c2);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<com.google.common.base.CharMatcher$LookupTable: void set(char)>(c2);

     label2:
        $i1 = c2;

        $i0 = c2 + 1;

        c2 = (char) $i0;

        $i4 = (int) 65535;

        if $i1 != $i4 goto label1;

        goto label3;

     label3:
        return;
    }

    public boolean matchesAnyOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.common.base.CharMatcher r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matchesNoneOf(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean matchesAllOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, i2, $i4;
        com.google.common.base.CharMatcher r1;
        char $c1;
        boolean $z0;

        r1 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = virtualinvoke r1.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        return 1;
    }

    public boolean matchesNoneOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexIn(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, i2, $i4;
        com.google.common.base.CharMatcher r1;
        char $c1;
        boolean $z0;

        r1 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = virtualinvoke r1.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 == 0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i4 = (int) -1;

        return $i4;
    }

    public int indexIn(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        com.google.common.base.CharMatcher r1;
        char $c2;
        int $i0, i1, i3, $i5;
        boolean $z0;

        r1 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        i1 := @parameter1: int;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>(i1, $i0);

        i3 = i1;

     label1:
        if i3 >= $i0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = virtualinvoke r1.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 == 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i5 = (int) -1;

        return $i5;
    }

    public int lastIndexIn(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        com.google.common.base.CharMatcher r1;
        char $c1;
        int $i0, i2, $i4, $i6;
        boolean $z0;

        r1 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = virtualinvoke r1.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 == 0 goto label2;

        return i2;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        $i6 = (int) -1;

        return $i6;
    }

    public int countIn(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, i2, i3;
        com.google.common.base.CharMatcher r1;
        char $c1;
        boolean $z0;

        r1 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = virtualinvoke r1.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public java.lang.String removeFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        com.google.common.base.CharMatcher r2;
        char $c1, $c2;
        int $i0, $i3, $i4, i5, i6, $i7, $i9;
        char[] $r3;
        java.lang.String $r1, $r5;
        boolean $z0;

        r2 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke r2.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r1);

        i5 = $i0;

        $i9 = (int) -1;

        if $i0 != $i9 goto label1;

        return $r1;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        i6 = 1;

     label2:
        i5 = i5 + 1;

     label3:
        $i7 = lengthof $r3;

        if i5 != $i7 goto label4;

        goto label7;

     label4:
        $c1 = $r3[i5];

        $z0 = virtualinvoke r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $i3 = i5 - i6;

        $c2 = $r3[i5];

        $r3[$i3] = $c2;

        i5 = i5 + 1;

        goto label3;

     label6:
        i6 = i6 + 1;

        goto label2;

     label7:
        $r5 = new java.lang.String;

        $i4 = i5 - i6;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r3, 0, $i4);

        return $r5;
    }

    public java.lang.String retainFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence r2;
        com.google.common.base.CharMatcher r0, $r1;
        java.lang.String $r3;

        r0 := @this: com.google.common.base.CharMatcher;

        r2 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        $r3 = virtualinvoke $r1.<com.google.common.base.CharMatcher: java.lang.String removeFrom(java.lang.CharSequence)>(r2);

        return $r3;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        com.google.common.base.CharMatcher r2;
        char c1, $c3;
        int $i0, $i2, i4, $i6;
        char[] $r3;
        java.lang.String $r1, $r5;
        boolean $z0;

        r2 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        c1 := @parameter1: char;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke r2.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r1);

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        return $r1;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r3[$i0] = c1;

        i4 = $i0 + 1;

     label2:
        $i2 = lengthof $r3;

        if i4 >= $i2 goto label4;

        $c3 = $r3[i4];

        $z0 = virtualinvoke r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label3;

        $r3[i4] = c1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[])>($r3);

        return $r5;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, $i12, $i14;
        java.lang.String $r2, $r5, $r6, $r7;
        java.lang.CharSequence r0, r1;
        com.google.common.base.CharMatcher r3;
        char $c8;
        java.lang.StringBuilder $r8;

        r3 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $r7 = virtualinvoke r3.<com.google.common.base.CharMatcher: java.lang.String removeFrom(java.lang.CharSequence)>(r1);

        return $r7;

     label1:
        if $i0 != 1 goto label2;

        $c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $r6 = virtualinvoke r3.<com.google.common.base.CharMatcher: java.lang.String replaceFrom(java.lang.CharSequence,char)>(r1, $c8);

        return $r6;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $i1 = virtualinvoke r3.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r2);

        i9 = $i1;

        $i12 = (int) -1;

        if $i1 != $i12 goto label3;

        return $r2;

     label3:
        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r8 = new java.lang.StringBuilder;

        $i3 = $i2 * 3;

        $i4 = $i3 / 2;

        $i5 = $i4 + 16;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i5);

        i10 = 0;

     label4:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, i10, i9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

        $i7 = i9 + 1;

        i10 = $i7;

        $i6 = virtualinvoke r3.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence,int)>($r2, $i7);

        i9 = $i6;

        $i14 = (int) -1;

        if $i6 != $i14 goto label4;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i7, $i2);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String trimFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        com.google.common.base.CharMatcher r3;
        char $c2, $c3;
        int $i0, $i1, i4, i5, $i7;
        java.lang.String $r2;
        boolean $z0, $z1;

        r3 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i4 = 0;

     label1:
        if i4 >= $i0 goto label3;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $z1 = virtualinvoke r3.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z1 != 0 goto label2;

        goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        i5 = $i0 - 1;

     label4:
        if i5 <= i4 goto label6;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $z0 = virtualinvoke r3.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label4;

     label6:
        $i1 = i5 + 1;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i4, $i1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String trimLeadingFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        com.google.common.base.CharMatcher r3;
        char $c1;
        int $i0, i2;
        java.lang.String $r2;
        boolean $z0;

        r3 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = virtualinvoke r3.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i2, $i0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String trimTrailingFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        com.google.common.base.CharMatcher r3;
        char $c2;
        int $i0, $i1, i3, $i5;
        java.lang.String $r2;
        boolean $z0;

        r3 := @this: com.google.common.base.CharMatcher;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = virtualinvoke r3.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label3:
        $i1 = i3 + 1;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String collapseFrom(java.lang.CharSequence, char)
    {
        java.lang.Character $r7;
        int $i0, $i1, $i3, i5, $i7;
        java.lang.String $r6, $r8;
        boolean $z0, z1;
        java.lang.CharSequence r1, $r3;
        com.google.common.base.CharMatcher r0;
        char c2, $c4;
        java.lang.StringBuilder $r4, $r5, $r9;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        c2 := @parameter1: char;

        $i0 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r1);

        $i7 = (int) -1;

        if $i0 != $i7 goto label1;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        return $r8;

     label1:
        $r9 = new java.lang.StringBuilder;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        z1 = 1;

        i5 = $i0 + 1;

     label2:
        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i5 >= $i3 goto label5;

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i5);

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r7);

        if $z0 == 0 goto label3;

        if z1 != 0 goto label4;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        z1 = 1;

        goto label4;

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        z1 = 0;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String trimAndCollapseFrom(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r2;
        com.google.common.base.CharMatcher r0, $r1;
        char $c3, c4;
        java.lang.Character $r5;
        int $i0, $i1, $i2, i5, $i7;
        java.lang.StringBuilder $r6;
        java.lang.String $r4;
        boolean $z0, z1;

        r0 := @this: com.google.common.base.CharMatcher;

        r2 := @parameter0: java.lang.CharSequence;

        c4 := @parameter1: char;

        $r1 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        $i0 = virtualinvoke $r1.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r2);

        $i7 = (int) -1;

        if $i0 != $i7 goto label1;

        return "";

     label1:
        $r6 = new java.lang.StringBuilder;

        $i1 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i1);

        z1 = 0;

        i5 = $i0;

     label2:
        $i2 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i5 >= $i2 goto label6;

        $c3 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i5);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r5);

        if $z0 == 0 goto label3;

        z1 = 1;

        goto label5;

     label3:
        if z1 == 0 goto label4;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        z1 = 0;

     label4:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label5:
        i5 = i5 + 1;

        goto label2;

     label6:
        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public boolean apply(java.lang.Character)
    {
        java.lang.Character r1;
        com.google.common.base.CharMatcher r0;
        char $c0;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c0);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        java.lang.Character $r2;
        com.google.common.base.CharMatcher r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) r1;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String r11;
        com.google.common.base.CharMatcher $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r92, r93;
        com.google.common.base.CharMatcher$5 $r98;
        com.google.common.base.CharMatcher$4 $r97;
        com.google.common.base.CharMatcher$3 $r96;
        com.google.common.base.CharMatcher$2 $r95;
        com.google.common.base.CharMatcher$7 $r100;
        com.google.common.base.CharMatcher$6 $r99;
        char[] $r12;
        com.google.common.base.CharMatcher$1 $r94;
        int i0, $i2, i4, $i5;
        char c1, $c3;

        <com.google.common.base.CharMatcher: java.lang.String NON_BREAKING_WHITESPACE_CHARS> = "\u00a0\u180e\u202f";

        <com.google.common.base.CharMatcher: java.lang.String BREAKING_WHITESPACE_CHARS> = "\t\n\u000b\f\r \u0085\u1680\u2028\u2029\u205f\u3000";

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\t\n\u000b\f\r \u0085\u1680\u2028\u2029\u205f\u3000\u00a0\u180e\u202f");

        $r1 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8202);

        $r2 = virtualinvoke $r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r1);

        $r3 = virtualinvoke $r2.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher WHITESPACE> = $r3;

        $r4 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\t\n\u000b\f\r \u0085\u1680\u2028\u2029\u205f\u3000");

        $r5 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8198);

        $r6 = virtualinvoke $r4.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r5);

        $r7 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8200, 8202);

        $r8 = virtualinvoke $r6.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r7);

        $r9 = virtualinvoke $r8.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher BREAKING_WHITESPACE> = $r9;

        $r10 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 127);

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ASCII> = $r10;

        r93 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(48, 57);

        r11 = "\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6\u0c66\u0ce6\u0d66\u0e50\u0ed0\u0f20\u1040\u1090\u17e0\u1810\u1946\u19d0\u1b50\u1bb0\u1c40\u1c50\ua620\ua8d0\ua900\uaa50\uff10";

        $r12 = virtualinvoke r11.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof $r12;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        c1 = $r12[i4];

        $i5 = (int) c1;

        $i2 = $i5 + 9;

        $c3 = (char) $i2;

        $r92 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(c1, $c3);

        r93 = virtualinvoke r93.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r92);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r13 = virtualinvoke r93.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher DIGIT> = $r13;

        $r14 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(9, 13);

        $r15 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(28, 32);

        $r16 = virtualinvoke $r14.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r15);

        $r17 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(5760);

        $r18 = virtualinvoke $r16.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r17);

        $r19 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(6158);

        $r20 = virtualinvoke $r18.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r19);

        $r21 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8198);

        $r22 = virtualinvoke $r20.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r21);

        $r23 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8200, 8203);

        $r24 = virtualinvoke $r22.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r23);

        $r25 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8232, 8233);

        $r26 = virtualinvoke $r24.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r25);

        $r27 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(8287);

        $r28 = virtualinvoke $r26.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r27);

        $r29 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(12288);

        $r30 = virtualinvoke $r28.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r29);

        $r31 = virtualinvoke $r30.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_WHITESPACE> = $r31;

        $r94 = new com.google.common.base.CharMatcher$1;

        specialinvoke $r94.<com.google.common.base.CharMatcher$1: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_DIGIT> = $r94;

        $r95 = new com.google.common.base.CharMatcher$2;

        specialinvoke $r95.<com.google.common.base.CharMatcher$2: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LETTER> = $r95;

        $r96 = new com.google.common.base.CharMatcher$3;

        specialinvoke $r96.<com.google.common.base.CharMatcher$3: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT> = $r96;

        $r97 = new com.google.common.base.CharMatcher$4;

        specialinvoke $r97.<com.google.common.base.CharMatcher$4: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_UPPER_CASE> = $r97;

        $r98 = new com.google.common.base.CharMatcher$5;

        specialinvoke $r98.<com.google.common.base.CharMatcher$5: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LOWER_CASE> = $r98;

        $r37 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 31);

        $r38 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(127, 159);

        $r39 = virtualinvoke $r37.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r38);

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_ISO_CONTROL> = $r39;

        $r40 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 32);

        $r41 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(127, 160);

        $r42 = virtualinvoke $r40.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r41);

        $r43 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(173);

        $r44 = virtualinvoke $r42.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r43);

        $r45 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1536, 1539);

        $r46 = virtualinvoke $r44.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r45);

        $r47 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\u06dd\u070f\u1680\u17b4\u17b5\u180e");

        $r48 = virtualinvoke $r46.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r47);

        $r49 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8207);

        $r50 = virtualinvoke $r48.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r49);

        $r51 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8232, 8239);

        $r52 = virtualinvoke $r50.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r51);

        $r53 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8287, 8292);

        $r54 = virtualinvoke $r52.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r53);

        $r55 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8298, 8303);

        $r56 = virtualinvoke $r54.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r55);

        $r57 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(12288);

        $r58 = virtualinvoke $r56.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r57);

        $r59 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(55296, 63743);

        $r60 = virtualinvoke $r58.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r59);

        $r61 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\ufeff\ufff9\ufffa\ufffb");

        $r62 = virtualinvoke $r60.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r61);

        $r63 = virtualinvoke $r62.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher INVISIBLE> = $r63;

        $r64 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 1273);

        $r65 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(1470);

        $r66 = virtualinvoke $r64.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r65);

        $r67 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1488, 1514);

        $r68 = virtualinvoke $r66.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r67);

        $r69 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(1523);

        $r70 = virtualinvoke $r68.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r69);

        $r71 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(1524);

        $r72 = virtualinvoke $r70.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r71);

        $r73 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1536, 1791);

        $r74 = virtualinvoke $r72.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r73);

        $r75 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1872, 1919);

        $r76 = virtualinvoke $r74.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r75);

        $r77 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(3584, 3711);

        $r78 = virtualinvoke $r76.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r77);

        $r79 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(7680, 8367);

        $r80 = virtualinvoke $r78.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r79);

        $r81 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8448, 8506);

        $r82 = virtualinvoke $r80.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r81);

        $r83 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(64336, 65023);

        $r84 = virtualinvoke $r82.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r83);

        $r85 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(65136, 65279);

        $r86 = virtualinvoke $r84.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r85);

        $r87 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(65377, 65500);

        $r88 = virtualinvoke $r86.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r87);

        $r89 = virtualinvoke $r88.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher SINGLE_WIDTH> = $r89;

        $r99 = new com.google.common.base.CharMatcher$6;

        specialinvoke $r99.<com.google.common.base.CharMatcher$6: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ANY> = $r99;

        $r100 = new com.google.common.base.CharMatcher$7;

        specialinvoke $r100.<com.google.common.base.CharMatcher$7: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher NONE> = $r100;

        return;
    }
}
