final class org.junit.experimental.ParallelComputer$1 extends java.lang.Object implements org.junit.runners.model.RunnerScheduler
{
    private final java.util.concurrent.ExecutorService fService;

    void <init>()
    {
        org.junit.experimental.ParallelComputer$1 r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: org.junit.experimental.ParallelComputer$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        r0.<org.junit.experimental.ParallelComputer$1: java.util.concurrent.ExecutorService fService> = $r1;

        return;
    }

    public void schedule(java.lang.Runnable)
    {
        org.junit.experimental.ParallelComputer$1 r0;
        java.lang.Runnable r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: org.junit.experimental.ParallelComputer$1;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.junit.experimental.ParallelComputer$1: java.util.concurrent.ExecutorService fService>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1);

        return;
    }

    public void finished()
    {
        java.util.concurrent.TimeUnit $r2;
        java.io.PrintStream $r5;
        org.junit.experimental.ParallelComputer$1 r0;
        java.lang.InterruptedException $r4;
        java.util.concurrent.ExecutorService $r1, $r3;

        r0 := @this: org.junit.experimental.ParallelComputer$1;

     label1:
        $r1 = r0.<org.junit.experimental.ParallelComputer$1: java.util.concurrent.ExecutorService fService>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r3 = r0.<org.junit.experimental.ParallelComputer$1: java.util.concurrent.ExecutorService fService>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.lang.InterruptedException: void printStackTrace(java.io.PrintStream)>($r5);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
