public final class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView
{
    private final org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view;
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer pipe;
    private final org.waveprotocol.wave.model.id.IdFilter waveletFilter;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory muxListenerFactory;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets;

    public static org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView create(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory, org.waveprotocol.wave.model.schema.SchemaProvider, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer, org.waveprotocol.wave.model.id.IdFilter, org.waveprotocol.wave.model.id.IdGenerator, org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory, org.waveprotocol.wave.model.wave.ParticipationHelper, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler, org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator, org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory r9;
        org.waveprotocol.wave.model.wave.ParticipantId r13;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder $r10;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory $r4;
        org.waveprotocol.wave.model.wave.ParticipationHelper r7;
        org.waveprotocol.wave.model.id.IdFilter r20;
        org.waveprotocol.wave.model.id.WaveId r5;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator r14;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r15;
        org.waveprotocol.wave.common.logging.LoggerBundle r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer r3;
        org.waveprotocol.wave.model.id.IdGenerator r12;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1 $r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory r6;
        org.waveprotocol.wave.model.schema.SchemaProvider r21;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4 $r18;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl $r19;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory r8;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3 $r16;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets $r17;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2 $r11;

        r8 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory;

        r21 := @parameter1: org.waveprotocol.wave.model.schema.SchemaProvider;

        r5 := @parameter2: org.waveprotocol.wave.model.id.WaveId;

        r13 := @parameter3: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer;

        r20 := @parameter5: org.waveprotocol.wave.model.id.IdFilter;

        r12 := @parameter6: org.waveprotocol.wave.model.id.IdGenerator;

        r1 := @parameter7: org.waveprotocol.wave.common.logging.LoggerBundle;

        r6 := @parameter8: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory;

        r7 := @parameter9: org.waveprotocol.wave.model.wave.ParticipationHelper;

        r2 := @parameter10: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler;

        r14 := @parameter11: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator;

        r9 := @parameter12: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1: void <init>(org.waveprotocol.wave.common.logging.LoggerBundle,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer)>(r1, r2, r3);

        $r4 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory;

        specialinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler,org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory)>(r5, r6, r7, r8, $r0, r9);

        $r10 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: void <init>()>();

        $r11 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2;

        specialinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer)>($r10, r3);

        $r15 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl create(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdGenerator,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletConfigurator)>($r11, r5, r12, r13, r14);

        $r16 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3;

        specialinvoke $r16.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: void <init>(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl,org.waveprotocol.wave.common.logging.LoggerBundle,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder)>($r15, r1, $r10);

        $r17 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        specialinvoke $r17.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1)>(null);

        $r18 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4;

        specialinvoke $r18.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets)>($r4, r2, $r16, $r17);

        $r19 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        specialinvoke $r19.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer,org.waveprotocol.wave.model.id.IdFilter,org.waveprotocol.wave.model.wave.opbased.WaveViewImpl,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets)>(r3, r20, $r15, $r18, $r17);

        return $r19;
    }

    private void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer, org.waveprotocol.wave.model.id.IdFilter, org.waveprotocol.wave.model.wave.opbased.WaveViewImpl, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r5;
        org.waveprotocol.wave.model.id.IdFilter r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer;

        r2 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r4 := @parameter3: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory;

        r5 := @parameter4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer pipe> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.id.IdFilter waveletFilter> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory muxListenerFactory> = r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets> = r5;

        return;
    }

    public void open(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener $r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener r1;
        org.waveprotocol.wave.model.id.IdFilter $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer pipe>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory muxListenerFactory>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener create(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener)>(r1);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.id.IdFilter waveletFilter>;

        interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer: void open(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener,org.waveprotocol.wave.model.id.IdFilter)>($r4, $r5);

        return;
    }

    public void close()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer pipe>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer: void close()>();

        return;
    }

    public boolean isTerminal(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: boolean isTerminal(org.waveprotocol.wave.model.wave.Wavelet)>(r1);

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createRoot()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createWavelet()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createUserData()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getRoot()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getUserData()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r2;

        return $r3;
    }

    public java.lang.Iterable getWavelets()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.lang.Iterable getWavelets()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        return $r2;
    }

    public void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)>(r1);

        return;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createWavelet()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createUserData()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getUserData()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createRoot()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getRoot()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createWavelet()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet createWavelet()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl r0;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl: void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }
}
