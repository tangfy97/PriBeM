public class org.bouncycastle.crypto.macs.CMac extends java.lang.Object implements org.bouncycastle.crypto.Mac
{
    private static final byte CONSTANT_128;
    private static final byte CONSTANT_64;
    private byte[] ZEROES;
    private byte[] mac;
    private byte[] buf;
    private int bufOff;
    private org.bouncycastle.crypto.BlockCipher cipher;
    private int macSize;
    private byte[] L;
    private byte[] Lu;
    private byte[] Lu2;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        int $i0, $i1;
        org.bouncycastle.crypto.macs.CMac r0;
        org.bouncycastle.crypto.BlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = $i0 * 8;

        specialinvoke r0.<org.bouncycastle.crypto.macs.CMac: void <init>(org.bouncycastle.crypto.BlockCipher,int)>(r1, $i1);

        return;
    }

    public void <init>(org.bouncycastle.crypto.BlockCipher, int)
    {
        byte[] $r3, $r4, $r5;
        org.bouncycastle.crypto.modes.CBCBlockCipher $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r11;
        java.lang.IllegalArgumentException $r6, $r7, $r12;
        org.bouncycastle.crypto.BlockCipher r1;
        java.lang.StringBuilder $r8, $r9, $r10;
        org.bouncycastle.crypto.macs.CMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = i0 % 8;

        if $i1 == 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MAC size must be multiple of 8");

        throw $r12;

     label1:
        $i2 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i3 = $i2 * 8;

        if i0 <= $i3 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAC size must be less or equal to ");

        $i10 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i11 = $i10 * 8;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $i4 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        if $i4 == 8 goto label3;

        $i9 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        if $i9 == 16 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Block size must be either 64 or 128 bits");

        throw $r6;

     label3:
        $r2 = new org.bouncycastle.crypto.modes.CBCBlockCipher;

        specialinvoke $r2.<org.bouncycastle.crypto.modes.CBCBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r1);

        r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher> = $r2;

        $i5 = i0 / 8;

        r0.<org.bouncycastle.crypto.macs.CMac: int macSize> = $i5;

        $i6 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r3 = newarray (byte)[$i6];

        r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac> = $r3;

        $i7 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i7];

        r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf> = $r4;

        $i8 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r5 = newarray (byte)[$i8];

        r0.<org.bouncycastle.crypto.macs.CMac: byte[] ZEROES> = $r5;

        r0.<org.bouncycastle.crypto.macs.CMac: int bufOff> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        java.lang.String $r2;
        org.bouncycastle.crypto.macs.CMac r0;
        org.bouncycastle.crypto.BlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        $r1 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r2 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r2;
    }

    private byte[] doubleLu(byte[])
    {
        byte[] r0, r1;
        byte $b0, $b9, $b11, $b16, $b17, $b18, $b19, $b21, $b26, $b28;
        short $s1, $s22, $s29, $s32;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i20, $i23, $i24, $i25, i27, $i30, $i31, $i33, $i34;
        org.bouncycastle.crypto.macs.CMac r2;

        r2 := @this: org.bouncycastle.crypto.macs.CMac;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        $s29 = (short) $b0;

        $s1 = $s29 & 255;

        $i30 = (int) $s1;

        i2 = $i30 >> 7;

        $i3 = lengthof r0;

        r1 = newarray (byte)[$i3];

        i27 = 0;

     label1:
        $i4 = lengthof r0;

        $i5 = $i4 - 1;

        if i27 >= $i5 goto label2;

        $b19 = r0[i27];

        $i31 = (int) $b19;

        $i24 = $i31 << 1;

        $i20 = i27 + 1;

        $b21 = r0[$i20];

        $s32 = (short) $b21;

        $s22 = $s32 & 255;

        $i33 = (int) $s22;

        $i23 = $i33 >> 7;

        $i25 = $i24 + $i23;

        $b26 = (byte) $i25;

        r1[i27] = $b26;

        i27 = i27 + 1;

        goto label1;

     label2:
        $i6 = lengthof r0;

        $i12 = $i6 - 1;

        $i7 = lengthof r0;

        $i8 = $i7 - 1;

        $b9 = r0[$i8];

        $i34 = (int) $b9;

        $i10 = $i34 << 1;

        $b11 = (byte) $i10;

        r1[$i12] = $b11;

        if i2 != 1 goto label5;

        $i13 = lengthof r0;

        $i14 = $i13 - 1;

        $b16 = r1[$i14];

        $i15 = lengthof r0;

        if $i15 != 16 goto label3;

        $b28 = -121;

        goto label4;

     label3:
        $b28 = 27;

     label4:
        $b17 = $b16 ^ $b28;

        $b18 = (byte) $b17;

        r1[$i14] = $b18;

     label5:
        return r1;
    }

    public void init(org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11;
        org.bouncycastle.crypto.BlockCipher $r2, $r7, $r12;
        int $i0;
        org.bouncycastle.crypto.macs.CMac r0;
        org.bouncycastle.crypto.CipherParameters r1;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        r1 := @parameter0: org.bouncycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.bouncycastle.crypto.macs.CMac: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r1);

        $r3 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] ZEROES>;

        $i0 = lengthof $r3;

        $r4 = newarray (byte)[$i0];

        r0.<org.bouncycastle.crypto.macs.CMac: byte[] L> = $r4;

        $r7 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] ZEROES>;

        $r5 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] L>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, $r5, 0);

        $r8 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] L>;

        $r9 = specialinvoke r0.<org.bouncycastle.crypto.macs.CMac: byte[] doubleLu(byte[])>($r8);

        r0.<org.bouncycastle.crypto.macs.CMac: byte[] Lu> = $r9;

        $r10 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] Lu>;

        $r11 = specialinvoke r0.<org.bouncycastle.crypto.macs.CMac: byte[] doubleLu(byte[])>($r10);

        r0.<org.bouncycastle.crypto.macs.CMac: byte[] Lu2> = $r11;

        $r12 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r12.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r1);

        return;
    }

    public int getMacSize()
    {
        int $i0;
        org.bouncycastle.crypto.macs.CMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        $i0 = r0.<org.bouncycastle.crypto.macs.CMac: int macSize>;

        return $i0;
    }

    public void update(byte)
    {
        byte[] $r1, $r2, $r3, $r4;
        org.bouncycastle.crypto.BlockCipher $r5;
        byte b4;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.macs.CMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        b4 := @parameter0: byte;

        $i1 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        $r1 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r5 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $r3 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r3, 0);

        r0.<org.bouncycastle.crypto.macs.CMac: int bufOff> = 0;

     label1:
        $r2 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        $i3 = $i2 + 1;

        r0.<org.bouncycastle.crypto.macs.CMac: int bufOff> = $i3;

        $r2[$i2] = b4;

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] r2, $r3, $r4, $r5, $r6, $r8;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.IllegalArgumentException $r10;
        org.bouncycastle.crypto.BlockCipher $r1, $r7, $r9;
        org.bouncycastle.crypto.macs.CMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        r2 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i8 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r10;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        i2 = $i0 - $i1;

        if i8 <= i2 goto label3;

        $r4 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $i6 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r4, $i6, i2);

        $r7 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $r5 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, $r5, 0);

        r0.<org.bouncycastle.crypto.macs.CMac: int bufOff> = 0;

        i8 = i8 - i2;

        i7 = i7 + i2;

     label2:
        if i8 <= $i0 goto label3;

        $r9 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r8 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r9.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, i7, $r8, 0);

        i8 = i8 - $i0;

        i7 = i7 + $i0;

        goto label2;

     label3:
        $r3 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $i3 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r3, $i3, i8);

        $i4 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        $i5 = $i4 + i8;

        r0.<org.bouncycastle.crypto.macs.CMac: int bufOff> = $i5;

        return;
    }

    public int doFinal(byte[], int)
    {
        byte[] $r3, $r4, $r5, r7, $r8, $r9, r10, $r11;
        byte $b6, $b7, $b8, $b9;
        int $i0, $i1, $i2, i3, $i4, $i5, i10, $i11;
        org.bouncycastle.crypto.BlockCipher $r1, $r6;
        org.bouncycastle.crypto.paddings.ISO7816d4Padding $r2;
        org.bouncycastle.crypto.macs.CMac r0;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        r7 := @parameter0: byte[];

        i3 := @parameter1: int;

        $r1 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        if $i1 != $i0 goto label1;

        r10 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] Lu>;

        goto label2;

     label1:
        $r2 = new org.bouncycastle.crypto.paddings.ISO7816d4Padding;

        specialinvoke $r2.<org.bouncycastle.crypto.paddings.ISO7816d4Padding: void <init>()>();

        $r3 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.macs.CMac: int bufOff>;

        virtualinvoke $r2.<org.bouncycastle.crypto.paddings.ISO7816d4Padding: int addPadding(byte[],int)>($r3, $i2);

        r10 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] Lu2>;

     label2:
        i10 = 0;

     label3:
        $r11 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac>;

        $i11 = lengthof $r11;

        if i10 >= $i11 goto label4;

        $r9 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $b7 = $r9[i10];

        $b6 = r10[i10];

        $b8 = $b7 ^ $b6;

        $b9 = (byte) $b8;

        $r9[i10] = $b9;

        i10 = i10 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $r4 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r4, 0);

        $r8 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] mac>;

        $i4 = r0.<org.bouncycastle.crypto.macs.CMac: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r7, i3, $i4);

        virtualinvoke r0.<org.bouncycastle.crypto.macs.CMac: void reset()>();

        $i5 = r0.<org.bouncycastle.crypto.macs.CMac: int macSize>;

        return $i5;
    }

    public void reset()
    {
        byte[] $r1, $r3;
        int $i0, i1;
        org.bouncycastle.crypto.macs.CMac r0;
        org.bouncycastle.crypto.BlockCipher $r2;

        r0 := @this: org.bouncycastle.crypto.macs.CMac;

        i1 = 0;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.bouncycastle.crypto.macs.CMac: byte[] buf>;

        $r3[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.bouncycastle.crypto.macs.CMac: int bufOff> = 0;

        $r2 = r0.<org.bouncycastle.crypto.macs.CMac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void reset()>();

        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.macs.CMac: byte CONSTANT_64> = 27;

        <org.bouncycastle.crypto.macs.CMac: byte CONSTANT_128> = -121;

        return;
    }
}
