public class com.jhlabs.image.LevelsFilter extends com.jhlabs.image.WholeImageFilter
{
    protected int[][] lut;
    protected float lowLevel;
    protected float highLevel;
    protected float lowOutputLevel;
    protected float highOutputLevel;

    public void <init>()
    {
        com.jhlabs.image.LevelsFilter r0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.LevelsFilter: float lowLevel> = 0.0F;

        r0.<com.jhlabs.image.LevelsFilter: float highLevel> = 1.0F;

        r0.<com.jhlabs.image.LevelsFilter: float lowOutputLevel> = 0.0F;

        r0.<com.jhlabs.image.LevelsFilter: float highOutputLevel> = 1.0F;

        return;
    }

    public void setLowLevel(float)
    {
        com.jhlabs.image.LevelsFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LevelsFilter: float lowLevel> = f0;

        return;
    }

    public float getLowLevel()
    {
        com.jhlabs.image.LevelsFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        $f0 = r0.<com.jhlabs.image.LevelsFilter: float lowLevel>;

        return $f0;
    }

    public void setHighLevel(float)
    {
        com.jhlabs.image.LevelsFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LevelsFilter: float highLevel> = f0;

        return;
    }

    public float getHighLevel()
    {
        com.jhlabs.image.LevelsFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        $f0 = r0.<com.jhlabs.image.LevelsFilter: float highLevel>;

        return $f0;
    }

    public void setLowOutputLevel(float)
    {
        com.jhlabs.image.LevelsFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LevelsFilter: float lowOutputLevel> = f0;

        return;
    }

    public float getLowOutputLevel()
    {
        com.jhlabs.image.LevelsFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        $f0 = r0.<com.jhlabs.image.LevelsFilter: float lowOutputLevel>;

        return $f0;
    }

    public void setHighOutputLevel(float)
    {
        com.jhlabs.image.LevelsFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LevelsFilter: float highOutputLevel> = f0;

        return;
    }

    public float getHighOutputLevel()
    {
        com.jhlabs.image.LevelsFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        $f0 = r0.<com.jhlabs.image.LevelsFilter: float highOutputLevel>;

        return $f0;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        int[][] $r3, $r4, $r5, $r6;
        byte $b6;
        int[] r1, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, f14, f15, f16;
        java.awt.Rectangle r8;
        com.jhlabs.image.LevelsFilter r2;
        com.jhlabs.image.Histogram $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, i9, i10, i11, i12, i13;

        r2 := @this: com.jhlabs.image.LevelsFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r8 := @parameter3: java.awt.Rectangle;

        $r0 = new com.jhlabs.image.Histogram;

        specialinvoke $r0.<com.jhlabs.image.Histogram: void <init>(int[],int,int,int,int)>(r1, i0, i1, 0, i0);

        $i2 = virtualinvoke $r0.<com.jhlabs.image.Histogram: int getNumSamples()>();

        if $i2 <= 0 goto label06;

        $i5 = virtualinvoke $r0.<com.jhlabs.image.Histogram: int getNumSamples()>();

        $f0 = (float) $i5;

        f14 = 255.0F / $f0;

        $r5 = newmultiarray (int)[3][256];

        r2.<com.jhlabs.image.LevelsFilter: int[][] lut> = $r5;

        $f1 = r2.<com.jhlabs.image.LevelsFilter: float lowLevel>;

        f15 = $f1 * 255.0F;

        $f2 = r2.<com.jhlabs.image.LevelsFilter: float highLevel>;

        f16 = $f2 * 255.0F;

        $b6 = f15 cmpl f16;

        if $b6 != 0 goto label01;

        f16 = f16 + 1.0F;

     label01:
        i9 = 0;

     label02:
        if i9 >= 3 goto label05;

        i10 = 0;

     label03:
        if i10 >= 256 goto label04;

        $r6 = r2.<com.jhlabs.image.LevelsFilter: int[][] lut>;

        $r7 = $r6[i9];

        $f11 = r2.<com.jhlabs.image.LevelsFilter: float lowOutputLevel>;

        $f4 = r2.<com.jhlabs.image.LevelsFilter: float highOutputLevel>;

        $f3 = r2.<com.jhlabs.image.LevelsFilter: float lowOutputLevel>;

        $f7 = $f4 - $f3;

        $f5 = (float) i10;

        $f6 = $f5 - f15;

        $f9 = $f7 * $f6;

        $f8 = f16 - f15;

        $f10 = $f9 / $f8;

        $f12 = $f11 + $f10;

        $f13 = 255.0F * $f12;

        $i7 = (int) $f13;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $r7[i10] = $i8;

        i10 = i10 + 1;

        goto label03;

     label04:
        i9 = i9 + 1;

        goto label02;

     label05:
        goto label07;

     label06:
        $r3 = (int[][]) null;

        r2.<com.jhlabs.image.LevelsFilter: int[][] lut> = $r3;

     label07:
        i11 = 0;

        i12 = 0;

     label08:
        if i12 >= i1 goto label11;

        i13 = 0;

     label09:
        if i13 >= i0 goto label10;

        $i3 = r1[i11];

        $i4 = virtualinvoke r2.<com.jhlabs.image.LevelsFilter: int filterRGB(int,int,int)>(i13, i12, $i3);

        r1[i11] = $i4;

        i11 = i11 + 1;

        i13 = i13 + 1;

        goto label09;

     label10:
        i12 = i12 + 1;

        goto label08;

     label11:
        $r4 = (int[][]) null;

        r2.<com.jhlabs.image.LevelsFilter: int[][] lut> = $r4;

        return r1;
    }

    public int filterRGB(int, int, int)
    {
        int[][] $r1, $r2, $r4, $r6;
        com.jhlabs.image.LevelsFilter r0;
        int[] $r3, $r5, $r7;
        int i0, i1, $i2, $i3, i4, $i5, $i6, i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, i15, i16;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        i15 := @parameter0: int;

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<com.jhlabs.image.LevelsFilter: int[][] lut>;

        if $r1 == null goto label1;

        i1 = i0 & -16777216;

        $r2 = r0.<com.jhlabs.image.LevelsFilter: int[][] lut>;

        $r3 = $r2[0];

        $i2 = i0 >> 16;

        $i3 = $i2 & 255;

        i4 = $r3[$i3];

        $r4 = r0.<com.jhlabs.image.LevelsFilter: int[][] lut>;

        $r5 = $r4[1];

        $i5 = i0 >> 8;

        $i6 = $i5 & 255;

        i7 = $r5[$i6];

        $r6 = r0.<com.jhlabs.image.LevelsFilter: int[][] lut>;

        $r7 = $r6[2];

        $i8 = i0 & 255;

        i9 = $r7[$i8];

        $i10 = i4 << 16;

        $i12 = i1 | $i10;

        $i11 = i7 << 8;

        $i13 = $i12 | $i11;

        $i14 = $i13 | i9;

        return $i14;

     label1:
        return i0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.LevelsFilter r0;

        r0 := @this: com.jhlabs.image.LevelsFilter;

        return "Colors/Levels...";
    }
}
