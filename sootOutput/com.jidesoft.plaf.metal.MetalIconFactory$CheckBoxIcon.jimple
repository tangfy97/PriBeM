class com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon extends java.lang.Object implements javax.swing.Icon, javax.swing.plaf.UIResource, java.io.Serializable
{

    private void <init>()
    {
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected int getControlSize()
    {
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        return 13;
    }

    private void paintOceanIcon(java.awt.Component, java.awt.Graphics, int, int)
    {
        javax.swing.ButtonModel $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.jidesoft.swing.TristateButtonModel $r6;
        javax.swing.plaf.ColorUIResource $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        java.awt.Component r0;
        javax.swing.JCheckBox $r1;
        java.awt.Graphics r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r4;

        r4 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        r0 := @parameter0: java.awt.Component;

        r3 := @parameter1: java.awt.Graphics;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = (javax.swing.JCheckBox) r0;

        $r2 = virtualinvoke $r1.<javax.swing.JCheckBox: javax.swing.ButtonModel getModel()>();

        virtualinvoke r3.<java.awt.Graphics: void translate(int,int)>(i0, i1);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getIconWidth()>();

        $i3 = virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getIconHeight()>();

        $z0 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z0 == 0 goto label4;

        $z4 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z4 == 0 goto label1;

        $z6 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z6 == 0 goto label1;

        $r10 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlShadow()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r10);

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i2, $i3);

        $r11 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlDarkShadow()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r11);

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i2, 2);

        $i16 = $i3 - 2;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 2, 2, $i16);

        $i18 = $i2 - 1;

        $i17 = $i3 - 1;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>($i18, 1, 1, $i17);

        $i20 = $i3 - 1;

        $i19 = $i2 - 2;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>(1, $i20, $i19, 1);

        goto label3;

     label1:
        $z5 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z5 == 0 goto label2;

        staticinvoke <com.jidesoft.plaf.metal.MetalUtils: boolean drawGradient(java.awt.Component,java.awt.Graphics,java.lang.String,int,int,int,int,boolean)>(r0, r3, "CheckBox.gradient", 0, 0, $i2, $i3, 1);

        $r8 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlDarkShadow()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r8);

        $i11 = $i2 - 1;

        $i10 = $i3 - 1;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>(0, 0, $i11, $i10);

        $r9 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getPrimaryControl()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r9);

        $i13 = $i2 - 3;

        $i12 = $i3 - 3;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>(1, 1, $i13, $i12);

        $i15 = $i2 - 5;

        $i14 = $i3 - 5;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>(2, 2, $i15, $i14);

        goto label3;

     label2:
        staticinvoke <com.jidesoft.plaf.metal.MetalUtils: boolean drawGradient(java.awt.Component,java.awt.Graphics,java.lang.String,int,int,int,int,boolean)>(r0, r3, "CheckBox.gradient", 0, 0, $i2, $i3, 1);

        $r7 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlDarkShadow()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        $i9 = $i2 - 1;

        $i8 = $i3 - 1;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>(0, 0, $i9, $i8);

     label3:
        $r12 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlInfo()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r12);

        goto label5;

     label4:
        $r5 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlDarkShadow()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        $i5 = $i2 - 1;

        $i4 = $i3 - 1;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>(0, 0, $i5, $i4);

     label5:
        $i7 = neg i0;

        $i6 = neg i1;

        virtualinvoke r3.<java.awt.Graphics: void translate(int,int)>($i7, $i6);

        $z1 = $r2 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z1 == 0 goto label6;

        $r6 = (com.jidesoft.swing.TristateButtonModel) $r2;

        $z3 = virtualinvoke $r6.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z3 == 0 goto label6;

        virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: void drawSquare(java.awt.Component,java.awt.Graphics,int,int)>(r0, r3, i0, i1);

        goto label7;

     label6:
        $z2 = interfaceinvoke $r2.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z2 == 0 goto label7;

        virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: void drawCheck(java.awt.Component,java.awt.Graphics,int,int)>(r0, r3, i0, i1);

     label7:
        return;
    }

    public void paintIcon(java.awt.Component, java.awt.Graphics, int, int)
    {
        java.awt.Color $r9;
        int $i0, i1, i2, $i3, $i4, $i5, $i6;
        javax.swing.ButtonModel $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.jidesoft.swing.TristateButtonModel $r7;
        javax.swing.plaf.ColorUIResource $r6, $r8;
        java.awt.Component r1;
        javax.swing.plaf.metal.MetalTheme $r0;
        javax.swing.JCheckBox $r2;
        java.awt.Graphics r5;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r4;

        r4 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        r1 := @parameter0: java.awt.Component;

        r5 := @parameter1: java.awt.Graphics;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r0 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.metal.MetalTheme getCurrentTheme()>();

        $z0 = $r0 instanceof javax.swing.plaf.metal.OceanTheme;

        if $z0 == 0 goto label1;

        specialinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: void paintOceanIcon(java.awt.Component,java.awt.Graphics,int,int)>(r1, r5, i1, i2);

        return;

     label1:
        $r2 = (javax.swing.JCheckBox) r1;

        $r3 = virtualinvoke $r2.<javax.swing.JCheckBox: javax.swing.ButtonModel getModel()>();

        $i0 = virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getControlSize()>();

        $z1 = interfaceinvoke $r3.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z1 == 0 goto label4;

        $z5 = interfaceinvoke $r3.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z5 == 0 goto label2;

        $z6 = interfaceinvoke $r3.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z6 == 0 goto label2;

        $r8 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlShadow()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r8);

        $i6 = $i0 - 1;

        $i5 = $i0 - 1;

        virtualinvoke r5.<java.awt.Graphics: void fillRect(int,int,int,int)>(i1, i2, $i6, $i5);

        staticinvoke <com.jidesoft.plaf.metal.MetalUtils: void drawPressed3DBorder(java.awt.Graphics,int,int,int,int)>(r5, i1, i2, $i0, $i0);

        goto label3;

     label2:
        staticinvoke <com.jidesoft.plaf.metal.MetalUtils: void drawFlush3DBorder(java.awt.Graphics,int,int,int,int)>(r5, i1, i2, $i0, $i0);

     label3:
        $r9 = virtualinvoke r1.<java.awt.Component: java.awt.Color getForeground()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r9);

        goto label5;

     label4:
        $r6 = staticinvoke <javax.swing.plaf.metal.MetalLookAndFeel: javax.swing.plaf.ColorUIResource getControlShadow()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $i4 = $i0 - 2;

        $i3 = $i0 - 2;

        virtualinvoke r5.<java.awt.Graphics: void drawRect(int,int,int,int)>(i1, i2, $i4, $i3);

     label5:
        $z2 = $r3 instanceof com.jidesoft.swing.TristateButtonModel;

        if $z2 == 0 goto label6;

        $r7 = (com.jidesoft.swing.TristateButtonModel) $r3;

        $z4 = virtualinvoke $r7.<com.jidesoft.swing.TristateButtonModel: boolean isMixed()>();

        if $z4 == 0 goto label6;

        virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: void drawSquare(java.awt.Component,java.awt.Graphics,int,int)>(r1, r5, i1, i2);

        goto label7;

     label6:
        $z3 = interfaceinvoke $r3.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z3 == 0 goto label7;

        virtualinvoke r4.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: void drawCheck(java.awt.Component,java.awt.Graphics,int,int)>(r1, r5, i1, i2);

     label7:
        return;
    }

    protected void drawCheck(java.awt.Component, java.awt.Graphics, int, int)
    {
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.awt.Component r2;
        java.awt.Graphics r1;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Graphics;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getControlSize()>();

        $i5 = i1 + 3;

        $i4 = i2 + 5;

        $i3 = $i0 - 8;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i5, $i4, 2, $i3);

        $i6 = $i0 - 4;

        $i11 = i1 + $i6;

        $i10 = i2 + 3;

        $i9 = i1 + 5;

        $i7 = $i0 - 6;

        $i8 = i2 + $i7;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i11, $i10, $i9, $i8);

        $i12 = $i0 - 4;

        $i17 = i1 + $i12;

        $i16 = i2 + 4;

        $i15 = i1 + 5;

        $i13 = $i0 - 5;

        $i14 = i2 + $i13;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i17, $i16, $i15, $i14);

        return;
    }

    protected void drawSquare(java.awt.Component, java.awt.Graphics, int, int)
    {
        java.awt.Component r2;
        int $i0, i1, i2, $i3, $i4, $i5, $i6;
        java.awt.Graphics r1;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Graphics;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getControlSize()>();

        $i6 = i1 + 3;

        $i5 = i2 + 3;

        $i4 = $i0 - 6;

        $i3 = $i0 - 6;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i6, $i5, $i4, $i3);

        return;
    }

    public int getIconWidth()
    {
        int $i0;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getControlSize()>();

        return $i0;
    }

    public int getIconHeight()
    {
        int $i0;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: int getControlSize()>();

        return $i0;
    }

    void <init>(com.jidesoft.plaf.metal.MetalIconFactory$1)
    {
        com.jidesoft.plaf.metal.MetalIconFactory$1 r1;
        com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon r0;

        r0 := @this: com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon;

        r1 := @parameter0: com.jidesoft.plaf.metal.MetalIconFactory$1;

        specialinvoke r0.<com.jidesoft.plaf.metal.MetalIconFactory$CheckBoxIcon: void <init>()>();

        return;
    }
}
