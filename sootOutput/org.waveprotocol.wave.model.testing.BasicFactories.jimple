public class org.waveprotocol.wave.model.testing.BasicFactories extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.document.util.DocumentProvider DOC_PROVIDER;
    private static final org.waveprotocol.wave.model.document.util.DocumentProvider OBS_DOC_PROVIDER;
    private static org.waveprotocol.wave.model.schema.SchemaProvider schemas;

    public static void setSchemaProvider(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r0;

        r0 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = r0;

        return;
    }

    protected static org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;

        $r0 = <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.testing.FakeWaveView$Builder fakeWaveViewBuilder()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.testing.FakeWaveView$Builder builder(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder opBasedWaveletFactoryBuilder()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$Builder builder(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory waveletDataImplFactory()
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r1;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.wave.data.DocumentFactory observablePluggableMutableDocumentFactory()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.wave.data.MuteDocumentFactory muteDocumentFactory()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r1;
        org.waveprotocol.wave.model.wave.data.MuteDocumentFactory $r0;

        $r0 = new org.waveprotocol.wave.model.wave.data.MuteDocumentFactory;

        $r1 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.MuteDocumentFactory: void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)>($r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.testing.FakeDocument$Factory fakeDocumentFactory()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.testing.FakeDocument$Factory: org.waveprotocol.wave.model.testing.FakeDocument$Factory create(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.wave.data.DocumentFactory pluggableMutableDocumentFactory()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.wave.data.DocumentFactory observablePluggableMutableDocumentFactory()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider getSchemas()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.document.util.DocumentProvider documentProvider()
    {
        org.waveprotocol.wave.model.document.util.DocumentProvider $r0;

        $r0 = <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.util.DocumentProvider DOC_PROVIDER>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.DocumentProvider observableDocumentProvider()
    {
        org.waveprotocol.wave.model.document.util.DocumentProvider $r0;

        $r0 = <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.util.DocumentProvider OBS_DOC_PROVIDER>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, java.lang.String, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r6;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r4;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument $r5;

        r6 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: org.waveprotocol.wave.model.operation.SilentOperationSink;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Sink can\'t be null");

        $r2 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r1);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r5 = new org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.DocInitialization)>(r6, $r4);

        virtualinvoke $r5.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: void init(org.waveprotocol.wave.model.operation.SilentOperationSink)>(r0);

        return $r5;
    }

    public static org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r0;
        org.waveprotocol.wave.model.operation.SilentOperationSink r1;
        org.waveprotocol.wave.model.document.ObservableDocument $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        $r2 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,java.lang.String,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r0, "", r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r0;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1;
        org.waveprotocol.wave.model.document.ObservableDocument $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        $r1 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,java.lang.String,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r0, "", $r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, java.lang.String)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.ObservableDocument $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.ObservableDocument createDocument(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,java.lang.String,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r0, r1, $r2);

        return $r3;
    }

    protected void <init>()
    {
        org.waveprotocol.wave.model.testing.BasicFactories r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.testing.BasicFactories$1 $r0;
        org.waveprotocol.wave.model.testing.BasicFactories$2 $r1;
        org.waveprotocol.wave.model.schema.SchemaCollection $r2;

        $r0 = new org.waveprotocol.wave.model.testing.BasicFactories$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.BasicFactories$1: void <init>()>();

        <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.util.DocumentProvider DOC_PROVIDER> = $r0;

        $r1 = new org.waveprotocol.wave.model.testing.BasicFactories$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.testing.BasicFactories$2: void <init>()>();

        <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.document.util.DocumentProvider OBS_DOC_PROVIDER> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        <org.waveprotocol.wave.model.testing.BasicFactories: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = $r2;

        return;
    }
}
