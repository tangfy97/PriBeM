public final class org.apache.xmlbeans.impl.util.XsTypeConverter extends java.lang.Object
{
    private static final java.lang.String POS_INF_LEX;
    private static final java.lang.String NEG_INF_LEX;
    private static final java.lang.String NAN_LEX;
    private static final char NAMESPACE_SEP;
    private static final java.lang.String EMPTY_PREFIX;
    private static final java.math.BigDecimal DECIMAL__ZERO;
    private static final java.lang.String[] URI_CHARS_TO_BE_REPLACED;
    private static final java.lang.String[] URI_CHARS_REPLACED_WITH;
    private static final char[] CH_ZEROS;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$util$XsTypeConverter;

    public void <init>()
    {
        org.apache.xmlbeans.impl.util.XsTypeConverter r0;

        r0 := @this: org.apache.xmlbeans.impl.util.XsTypeConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float lexFloat(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r9;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9;
        java.lang.String $r1, $r7;
        boolean $z0, $z1, $z2;
        java.lang.CharSequence r0;
        char $c3, $c6;
        java.lang.NumberFormatException $r8, $r10;
        float $f0;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label3;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - 1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $i7 = (int) $c3;

        if $i7 == 102 goto label2;

        $i8 = (int) $c3;

        if $i8 != 70 goto label3;

     label2:
        $i4 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i5 = $i4 - 2;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i5);

        $i9 = (int) $c6;

        if $i9 == 78 goto label3;

        $r10 = new java.lang.NumberFormatException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid char \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' in float.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label3:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);

     label4:
        return $f0;

     label5:
        $r8 := @caughtexception;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z0 == 0 goto label6;

        return #InfinityF;

     label6:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z1 == 0 goto label7;

        return #-InfinityF;

     label7:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z2 == 0 goto label8;

        return #NaNF;

     label8:
        throw $r8;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    public static float lexFloat(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r6;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        float $f0;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r6 := @parameter1: java.util.Collection;

     label1:
        $f0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: float lexFloat(java.lang.CharSequence)>(r0);

     label2:
        return $f0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid float: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        return #NaNF;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printFloat(float)
    {
        byte $b0, $b1;
        float f0;
        java.lang.String $r0;
        boolean $z0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl #InfinityF;

        if $b0 != 0 goto label1;

        return "INF";

     label1:
        $b1 = f0 cmpl #-InfinityF;

        if $b1 != 0 goto label2;

        return "-INF";

     label2:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label3;

        return "NaN";

     label3:
        $r0 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        return $r0;
    }

    public static double lexDouble(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r9;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.String $r1, $r7;
        double $d0;
        boolean $z0, $z1, $z2;
        java.lang.CharSequence r0;
        char $c3;
        java.lang.NumberFormatException $r8, $r10;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label3;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - 1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $i4 = (int) $c3;

        if $i4 == 100 goto label2;

        $i5 = (int) $c3;

        if $i5 != 68 goto label3;

     label2:
        $r10 = new java.lang.NumberFormatException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid char \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' in double.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label3:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

     label4:
        return $d0;

     label5:
        $r8 := @caughtexception;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z0 == 0 goto label6;

        return #Infinity;

     label6:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z1 == 0 goto label7;

        return #-Infinity;

     label7:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z2 == 0 goto label8;

        return #NaN;

     label8:
        throw $r8;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    public static double lexDouble(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r6;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r5;
        double $d0;

        r0 := @parameter0: java.lang.CharSequence;

        r6 := @parameter1: java.util.Collection;

     label1:
        $d0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: double lexDouble(java.lang.CharSequence)>(r0);

     label2:
        return $d0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid double: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        return #NaN;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printDouble(double)
    {
        byte $b0, $b1;
        java.lang.String $r0;
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl #Infinity;

        if $b0 != 0 goto label1;

        return "INF";

     label1:
        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label2;

        return "-INF";

     label2:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label3;

        return "NaN";

     label3:
        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        return $r0;
    }

    public static java.math.BigDecimal lexDecimal(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        java.math.BigDecimal $r2;
        java.lang.CharSequence r0;
        java.lang.String $r1, $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = new java.math.BigDecimal;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String trimTrailingZeros(java.lang.String)>($r1);

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r3);

        return $r2;
    }

    public static java.math.BigDecimal lexDecimal(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r7;
        java.lang.NumberFormatException $r2;
        java.math.BigDecimal $r1, $r9;
        java.lang.StringBuffer $r3, $r4, $r5;
        org.apache.xmlbeans.XmlError $r8;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        r7 := @parameter1: java.util.Collection;

     label1:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigDecimal lexDecimal(java.lang.CharSequence)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid long: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r6);

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r9 = <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigDecimal DECIMAL__ZERO>;

        return $r9;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        byte $b2, b4, $b20;
        java.math.BigInteger $r1;
        boolean $z1;
        long $l1;
        java.lang.StringBuffer $r3;
        int $i0, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19;
        java.lang.String $r2, $r4, $r9, $r10, $r13, $r16;
        char[] $r5, $r6, $r7, $r8, $r11, $r12, $r14, $r15;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.lang.String toString()>();

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int scale()>();

        if $i0 == 0 goto label01;

        $l1 = virtualinvoke r0.<java.math.BigDecimal: long longValue()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label02;

        if $i0 >= 0 goto label02;

     label01:
        return $r2;

     label02:
        $i3 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        if $i3 >= 0 goto label03;

        $z1 = 1;

        $b20 = 1;

        goto label04;

     label03:
        $z1 = 0;

        $b20 = 0;

     label04:
        b4 = $b20;

        i17 = $i0;

        $r3 = new java.lang.StringBuffer;

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i6 = $i5 + 1;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i8 = $i6 + $i7;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i8);

        if $z1 != 1 goto label05;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label05:
        if $i0 <= 0 goto label09;

        $i13 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i14 = $i13 - b4;

        i18 = $i0 - $i14;

        if i18 < 0 goto label08;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0.");

     label06:
        $r11 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        $i15 = lengthof $r11;

        if i18 <= $i15 goto label07;

        $r14 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r14);

        $r15 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        $i16 = lengthof $r15;

        i18 = i18 - $i16;

        goto label06;

     label07:
        $r12 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r12, 0, i18);

        $r13 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(b4);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        goto label12;

     label08:
        i19 = b4 - i18;

        $r9 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(b4, i19);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r10 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i19);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label12;

     label09:
        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(b4);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label10:
        $r5 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        $i9 = lengthof $r5;

        $i10 = neg $i9;

        if i17 >= $i10 goto label11;

        $r7 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7);

        $r8 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        $i12 = lengthof $r8;

        i17 = i17 + $i12;

        goto label10;

     label11:
        $r6 = <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS>;

        $i11 = neg i17;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r6, 0, $i11);

     label12:
        $r16 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    public static java.math.BigInteger lexInteger(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        java.lang.CharSequence r0;
        char $c1, $c2;
        java.lang.NumberFormatException $r5;
        int $i0, $i3, $i4;
        java.math.BigInteger $r6;
        java.lang.String $r2, $r4;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 1 goto label1;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $i3 = (int) $c1;

        if $i3 != 43 goto label1;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(1);

        $i4 = (int) $c2;

        if $i4 != 45 goto label1;

        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Illegal char sequence \'+-\'");

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r6 = new java.math.BigInteger;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String trimInitialPlus(java.lang.String)>($r2);

        specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r4);

        return $r6;
    }

    public static java.math.BigInteger lexInteger(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r7;
        java.lang.NumberFormatException $r2;
        java.lang.StringBuffer $r3, $r4, $r5;
        org.apache.xmlbeans.XmlError $r8;
        java.math.BigInteger $r1, $r9;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        r7 := @parameter1: java.util.Collection;

     label1:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigInteger lexInteger(java.lang.CharSequence)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid long: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r6);

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r9;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printInteger(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.String $r1;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString()>();

        return $r1;
    }

    public static long lexLong(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        java.lang.CharSequence r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String trimInitialPlus(java.lang.String)>($r1);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        return $l0;
    }

    public static long lexLong(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r6;
        long $l0;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r6 := @parameter1: java.util.Collection;

     label1:
        $l0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: long lexLong(java.lang.CharSequence)>(r0);

     label2:
        return $l0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid long: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        return 0L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printLong(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        return $r0;
    }

    public static short lexShort(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        short $s0;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        $s0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: short parseShort(java.lang.CharSequence)>(r0);

        return $s0;
    }

    public static short lexShort(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r6;
        java.lang.NumberFormatException $r1;
        short $s0;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r6 := @parameter1: java.util.Collection;

     label1:
        $s0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: short lexShort(java.lang.CharSequence)>(r0);

     label2:
        return $s0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid short: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printShort(short)
    {
        short s0;
        java.lang.String $r0;

        s0 := @parameter0: short;

        $r0 = staticinvoke <java.lang.Short: java.lang.String toString(short)>(s0);

        return $r0;
    }

    public static int lexInt(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        int $i0;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int parseInt(java.lang.CharSequence)>(r0);

        return $i0;
    }

    public static int lexInt(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r6;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        int $i0;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r6 := @parameter1: java.util.Collection;

     label1:
        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int lexInt(java.lang.CharSequence)>(r0);

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid int:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printInt(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    public static byte lexByte(java.lang.CharSequence) throws java.lang.NumberFormatException
    {
        java.lang.CharSequence r0;
        byte $b0;

        r0 := @parameter0: java.lang.CharSequence;

        $b0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: byte parseByte(java.lang.CharSequence)>(r0);

        return $b0;
    }

    public static byte lexByte(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r6;
        java.lang.NumberFormatException $r1;
        byte $b0;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r6 := @parameter1: java.util.Collection;

     label1:
        $b0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: byte lexByte(java.lang.CharSequence)>(r0);

     label2:
        return $b0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid byte: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String printByte(byte)
    {
        java.lang.String $r0;
        byte b0;

        b0 := @parameter0: byte;

        $r0 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(b0);

        return $r0;
    }

    public static boolean lexBoolean(java.lang.CharSequence)
    {
        java.lang.StringBuffer $r2, $r3, $r6;
        int $i0, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r7;
        java.lang.String $r4;
        java.lang.CharSequence r0;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label5;
        };

     label1:
        $c10 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $i11 = (int) $c10;

        if 48 != $i11 goto label2;

        return 0;

     label2:
        $i12 = (int) $c10;

        if 49 != $i12 goto label5;

        return 1;

     label3:
        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $i13 = (int) $c6;

        if 116 != $i13 goto label5;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(1);

        $i14 = (int) $c7;

        if 114 != $i14 goto label5;

        $c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(2);

        $i15 = (int) $c8;

        if 117 != $i15 goto label5;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(3);

        $i16 = (int) $c9;

        if 101 != $i16 goto label5;

        return 1;

     label4:
        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $i17 = (int) $c1;

        if 102 != $i17 goto label5;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(1);

        $i18 = (int) $c2;

        if 97 != $i18 goto label5;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(2);

        $i19 = (int) $c3;

        if 108 != $i19 goto label5;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(3);

        $i20 = (int) $c4;

        if 115 != $i20 goto label5;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(4);

        $i21 = (int) $c5;

        if 101 != $i21 goto label5;

        return 0;

     label5:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid boolean: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String)>($r4);

        throw $r7;
    }

    public static boolean lexBoolean(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.CharSequence r0;
        java.util.Collection r2;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r1;
        org.apache.xmlbeans.XmlError $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.util.Collection;

     label1:
        $z0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: boolean lexBoolean(java.lang.CharSequence)>(r0);

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        $r3 = virtualinvoke $r1.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: java.lang.String getMessage()>();

        $r4 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        return 0;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public static java.lang.String printBoolean(boolean)
    {
        java.lang.String $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = "true";

        goto label2;

     label1:
        $r0 = "false";

     label2:
        return $r0;
    }

    public static java.lang.String lexString(java.lang.CharSequence, java.util.Collection)
    {
        java.lang.String $r1;
        java.lang.CharSequence r0;
        java.util.Collection r2;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.util.Collection;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String lexString(java.lang.CharSequence)
    {
        java.lang.String $r1;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String printString(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public static javax.xml.namespace.QName lexQName(java.lang.CharSequence, javax.xml.namespace.NamespaceContext)
    {
        java.lang.StringBuffer $r5, $r6, $r12, $r14, $r15, $r21, $r23;
        int $i0, $i1, $i2, $i3, i5, $i6;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r22, $r24;
        javax.xml.namespace.NamespaceContext r1;
        java.lang.String $r2, $r7, $r13, $r16, r17, r18, r19;
        boolean z0;
        java.lang.CharSequence r0, $r8, $r9;
        char $c4;
        javax.xml.namespace.QName $r25;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: javax.xml.namespace.NamespaceContext;

        z0 = 0;

        i5 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i5 >= $i0 goto label3;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if $i6 != 58 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $r8 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i5);

        r17 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $i2 = i5 + 1;

        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r9 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i2, $i3);

        r18 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        if i5 != 0 goto label5;

        $r22 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid xsd:QName \'");

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String)>($r16);

        throw $r22;

     label4:
        r17 = "";

        r18 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label5:
        $r2 = interfaceinvoke r1.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r17);

        r19 = $r2;

        if $r2 != null goto label7;

        if r17 == null goto label6;

        $i1 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i1 <= 0 goto label6;

        $r24 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t resolve prefix: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String)>($r7);

        throw $r24;

     label6:
        r19 = "";

     label7:
        $r25 = new javax.xml.namespace.QName;

        specialinvoke $r25.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r19, r18);

        return $r25;
    }

    public static javax.xml.namespace.QName lexQName(java.lang.String, java.util.Collection, javax.xml.namespace.NamespaceContext)
    {
        java.util.Collection r4;
        int $i0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r3;
        org.apache.xmlbeans.XmlError $r6;
        javax.xml.namespace.NamespaceContext r1;
        java.lang.String r0, $r5, $r8;
        javax.xml.namespace.QName $r2, $r7;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.Collection;

        r1 := @parameter2: javax.xml.namespace.NamespaceContext;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: javax.xml.namespace.QName lexQName(java.lang.CharSequence,javax.xml.namespace.NamespaceContext)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r5 = virtualinvoke $r3.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: java.lang.String getMessage()>();

        $r6 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r5);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $r7 = new javax.xml.namespace.QName;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        specialinvoke $r7.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(null, $r8);

        return $r7;

        catch org.apache.xmlbeans.impl.common.InvalidLexicalValueException from label1 to label2 with label3;
    }

    public static java.lang.String printQName(javax.xml.namespace.QName, javax.xml.namespace.NamespaceContext, java.util.Collection)
    {
        java.lang.AssertionError $r10;
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0;
        javax.xml.namespace.NamespaceContext r2;
        java.lang.String $r1, $r3, $r7, r11, $r12, $r13;
        boolean $z0;
        java.util.Collection r8;
        org.apache.xmlbeans.XmlError $r9;
        javax.xml.namespace.QName r0;

        r0 := @parameter0: javax.xml.namespace.QName;

        r2 := @parameter1: javax.xml.namespace.NamespaceContext;

        r8 := @parameter2: java.util.Collection;

        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z0 = <org.apache.xmlbeans.impl.util.XsTypeConverter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r1 != null goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r3 = interfaceinvoke r2.<javax.xml.namespace.NamespaceContext: java.lang.String getPrefix(java.lang.String)>($r1);

        r11 = $r3;

        if $r3 != null goto label3;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NamespaceContext does not provide prefix for namespaceURI ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r7);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label3;

     label2:
        r11 = null;

     label3:
        $r12 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r13 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String getQNameString(java.lang.String,java.lang.String,java.lang.String)>($r1, $r12, r11);

        return $r13;
    }

    public static java.lang.String getQNameString(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        int $i0, $i1;
        java.lang.String r0, r1, r2, $r7;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label1:
        return r1;
    }

    public static org.apache.xmlbeans.GDate lexGDate(java.lang.CharSequence)
    {
        org.apache.xmlbeans.GDate $r0;
        java.lang.CharSequence r1;

        r1 := @parameter0: java.lang.CharSequence;

        $r0 = new org.apache.xmlbeans.GDate;

        specialinvoke $r0.<org.apache.xmlbeans.GDate: void <init>(java.lang.CharSequence)>(r1);

        return $r0;
    }

    public static org.apache.xmlbeans.GDate lexGDate(java.lang.String, java.util.Collection)
    {
        org.apache.xmlbeans.GDateBuilder $r6;
        java.util.Collection r3;
        java.lang.IllegalArgumentException $r2;
        org.apache.xmlbeans.XmlError $r5;
        org.apache.xmlbeans.GDate $r1, $r7;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Collection;

     label1:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: org.apache.xmlbeans.GDate lexGDate(java.lang.CharSequence)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r4 = virtualinvoke $r2.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r5 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forMessage(java.lang.String)>($r4);

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r6 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r6.<org.apache.xmlbeans.GDateBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.GDate toGDate()>();

        return $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static java.lang.String printGDate(org.apache.xmlbeans.GDate, java.util.Collection)
    {
        org.apache.xmlbeans.GDate r0;
        java.lang.String $r1;
        java.util.Collection r2;

        r0 := @parameter0: org.apache.xmlbeans.GDate;

        r2 := @parameter1: java.util.Collection;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.GDate: java.lang.String toString()>();

        return $r1;
    }

    public static org.apache.xmlbeans.XmlCalendar lexDateTime(java.lang.CharSequence)
    {
        org.apache.xmlbeans.XmlCalendar $r2;
        java.lang.CharSequence r0;
        org.apache.xmlbeans.GDateSpecification $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: org.apache.xmlbeans.GDateSpecification getGDateValue(java.lang.CharSequence,int)>(r0, 14);

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.GDateSpecification: org.apache.xmlbeans.XmlCalendar getCalendar()>();

        return $r2;
    }

    public static java.lang.String printDateTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String printDateTime(java.util.Calendar,int)>(r0, 14);

        return $r1;
    }

    public static java.lang.String printTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String printDateTime(java.util.Calendar,int)>(r0, 15);

        return $r1;
    }

    public static java.lang.String printDate(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String printDateTime(java.util.Calendar,int)>(r0, 16);

        return $r1;
    }

    public static java.lang.String printDate(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r0;
        org.apache.xmlbeans.GDateSpecification $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: org.apache.xmlbeans.GDateSpecification getGDateValue(java.util.Date,int)>(r0, 16);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String printDateTime(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        org.apache.xmlbeans.GDateSpecification $r1;
        int i0;
        java.lang.String $r2;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: org.apache.xmlbeans.GDateSpecification getGDateValue(java.util.Calendar,int)>(r0, i0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String printDateTime(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r0;
        org.apache.xmlbeans.GDateSpecification $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: org.apache.xmlbeans.GDateSpecification getGDateValue(java.util.Date,int)>(r0, 14);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.CharSequence printHexBinary(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: java.lang.String bytesToString(byte[])>(r0);

        return $r1;
    }

    public static byte[] lexHexBinary(java.lang.CharSequence)
    {
        byte[] $r2, $r3;
        java.lang.CharSequence r0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: byte[] decode(byte[])>($r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String)>("invalid hexBinary value");

        throw $r4;
    }

    public static java.lang.CharSequence printBase64Binary(byte[])
    {
        byte[] r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] encode(byte[])>(r0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r1);

        return $r2;
    }

    public static byte[] lexBase64Binary(java.lang.CharSequence)
    {
        byte[] $r2, $r3;
        java.lang.CharSequence r0;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r4;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] decode(byte[])>($r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String)>("invalid base64Binary value");

        throw $r4;
    }

    public static org.apache.xmlbeans.GDateSpecification getGDateValue(java.util.Date, int)
    {
        org.apache.xmlbeans.GDateBuilder $r0;
        java.util.Date r1;
        int i0;
        org.apache.xmlbeans.GDate $r2;

        r1 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r0 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void <init>(java.util.Date)>(r1);

        virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void setBuiltinTypeCode(int)>(i0);

        $r2 = virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.GDate toGDate()>();

        return $r2;
    }

    public static org.apache.xmlbeans.GDateSpecification getGDateValue(java.util.Calendar, int)
    {
        java.util.Calendar r1;
        org.apache.xmlbeans.GDateBuilder $r0;
        int i0;
        org.apache.xmlbeans.GDate $r2;

        r1 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $r0 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void <init>(java.util.Calendar)>(r1);

        virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void setBuiltinTypeCode(int)>(i0);

        $r2 = virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.GDate toGDate()>();

        return $r2;
    }

    public static org.apache.xmlbeans.GDateSpecification getGDateValue(java.lang.CharSequence, int)
    {
        org.apache.xmlbeans.GDateBuilder $r0;
        java.lang.CharSequence r1;
        int i0;
        org.apache.xmlbeans.GDate $r2;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r0 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void <init>(java.lang.CharSequence)>(r1);

        virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: void setBuiltinTypeCode(int)>(i0);

        $r2 = virtualinvoke $r0.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.GDate toGDate()>();

        return $r2;
    }

    private static java.lang.String trimInitialPlus(java.lang.String)
    {
        int $i0, $i2;
        char $c1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 != 43 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        return $r1;

     label1:
        return r0;
    }

    private static java.lang.String trimTrailingZeros(java.lang.String)
    {
        char $c2, $c4;
        int $i0, i1, $i3, $i5, i6, $i7, $i8, $i10;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = $i0 - 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $i7 = (int) $c2;

        if $i7 != 48 goto label4;

        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i3 < 0 goto label4;

        i6 = i1;

     label1:
        if i6 <= $i3 goto label3;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i8 = (int) $c4;

        if $i8 == 48 goto label2;

        $i5 = i6 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        return $r2;

     label2:
        $i10 = (int) -1;

        i6 = i6 + $i10;

        goto label1;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        return $r1;

     label4:
        return r0;
    }

    private static int parseInt(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int parseIntXsdNumber(java.lang.CharSequence,int,int)>(r0, -2147483648, 2147483647);

        return $i0;
    }

    private static short parseShort(java.lang.CharSequence)
    {
        short $s1;
        java.lang.CharSequence r0;
        int $i0, $i3;

        r0 := @parameter0: java.lang.CharSequence;

        $i3 = (int) -32768;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int parseIntXsdNumber(java.lang.CharSequence,int,int)>(r0, $i3, 32767);

        $s1 = (short) $i0;

        return $s1;
    }

    private static byte parseByte(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        byte $b1;
        int $i0, $i3;

        r0 := @parameter0: java.lang.CharSequence;

        $i3 = (int) -128;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int parseIntXsdNumber(java.lang.CharSequence,int,int)>(r0, $i3, 127);

        $b1 = (byte) $i0;

        return $b1;
    }

    private static int parseIntXsdNumber(java.lang.CharSequence, int, int)
    {
        byte b12;
        boolean z0, z1, z2;
        java.lang.CharSequence r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r10, $r12, $r13, $r17, $r19, $r20, $r22, $r24, $r26;
        int $i0, i2, $i3, $i4, $i5, $i7, $i8, $i9, i10, $i11, i13, i14, i15, i16, $i17, $i18, $i19;
        java.lang.String $r4, $r7, $r11, $r14, $r18, $r21;
        char $c1, $c6;
        java.lang.NumberFormatException $r23, $r25, $r27;

        r0 := @parameter0: java.lang.CharSequence;

        i10 := @parameter1: int;

        i2 := @parameter2: int;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 >= 1 goto label1;

        $r23 = new java.lang.NumberFormatException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("For input string: \"");

        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r21);

        throw $r23;

     label1:
        b12 = 1;

        i13 = 0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $i18 = (int) $c1;

        if $i18 != 45 goto label2;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        i14 = i10 / 10;

        $i11 = i10 % 10;

        i15 = neg $i11;

        goto label4;

     label2:
        $i19 = (int) $c1;

        if $i19 != 43 goto label3;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        b12 = -1;

        $i9 = i2 / 10;

        i14 = neg $i9;

        i15 = i2 % 10;

        goto label4;

     label3:
        b12 = -1;

        $i3 = i2 / 10;

        i14 = neg $i3;

        i15 = i2 % 10;

     label4:
        i16 = 0;

     label5:
        $i17 = $i0 - z1;

        if i16 >= $i17 goto label9;

        $i5 = i16 + z2;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i5);

        $i7 = staticinvoke <java.lang.Character: int digit(char,int)>($c6, 10);

        if $i7 >= 0 goto label6;

        $r25 = new java.lang.NumberFormatException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("For input string: \"");

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r14);

        throw $r25;

     label6:
        if i13 < i14 goto label7;

        if i13 != i14 goto label8;

        if $i7 <= i15 goto label8;

     label7:
        $r27 = new java.lang.NumberFormatException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("For input string: \"");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r27;

     label8:
        $i8 = i13 * 10;

        i13 = $i8 - $i7;

        i16 = i16 + 1;

        goto label5;

     label9:
        $i4 = b12 * i13;

        return $i4;
    }

    public static java.lang.CharSequence printAnyURI(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        return r0;
    }

    public static java.lang.CharSequence lexAnyURI(java.lang.CharSequence)
    {
        java.lang.String[] $r3, $r5, $r7;
        java.lang.StringBuffer $r0, $r11, $r12, $r13;
        int $i0, $i1, $i2, i3, i4;
        org.apache.xmlbeans.impl.common.InvalidLexicalValueException $r10;
        java.lang.String $r2, $r4, $r6, $r8, $r14;
        java.lang.CharSequence r1;
        java.lang.IllegalArgumentException $r9;

        r1 := @parameter0: java.lang.CharSequence;

        $r0 = new java.lang.StringBuffer;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        i3 = 0;

     label1:
        $r3 = <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String[] URI_CHARS_TO_BE_REPLACED>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label4;

        i4 = 0;

     label2:
        $r5 = <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String[] URI_CHARS_TO_BE_REPLACED>;

        $r6 = $r5[i3];

        $i1 = virtualinvoke $r0.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>($r6, i4);

        if $i1 < 0 goto label3;

        $i2 = $i1 + 1;

        $r7 = <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String[] URI_CHARS_REPLACED_WITH>;

        $r8 = $r7[i3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i1, $i2, $r8);

        i4 = $i1 + 3;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r4);

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        $r10 = new org.apache.xmlbeans.impl.common.InvalidLexicalValueException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid anyURI value: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.xmlbeans.impl.common.InvalidLexicalValueException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r10;

     label7:
        return r1;

        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r2, $r3;
        java.math.BigDecimal $r1;
        char[] $r4;
        java.lang.Class $r0, $r5;
        boolean $z0, $z1;

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String EMPTY_PREFIX> = "";

        <org.apache.xmlbeans.impl.util.XsTypeConverter: char NAMESPACE_SEP> = 58;

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String NAN_LEX> = "NaN";

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String NEG_INF_LEX> = "-INF";

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String POS_INF_LEX> = "INF";

        $r0 = <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.Class class$org$apache$xmlbeans$impl$util$XsTypeConverter>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.util.XsTypeConverter");

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.Class class$org$apache$xmlbeans$impl$util$XsTypeConverter> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.Class class$org$apache$xmlbeans$impl$util$XsTypeConverter>;

     label2:
        $z0 = virtualinvoke $r5.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.util.XsTypeConverter: boolean $assertionsDisabled> = $z1;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(double)>(0.0);

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.math.BigDecimal DECIMAL__ZERO> = $r1;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = " ";

        $r2[1] = "{";

        $r2[2] = "}";

        $r2[3] = "|";

        $r2[4] = "\\";

        $r2[5] = "^";

        $r2[6] = "[";

        $r2[7] = "]";

        $r2[8] = "`";

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String[] URI_CHARS_TO_BE_REPLACED> = $r2;

        $r3 = newarray (java.lang.String)[9];

        $r3[0] = "%20";

        $r3[1] = "%7b";

        $r3[2] = "%7d";

        $r3[3] = "%7c";

        $r3[4] = "%5c";

        $r3[5] = "%5e";

        $r3[6] = "%5b";

        $r3[7] = "%5d";

        $r3[8] = "%60";

        <org.apache.xmlbeans.impl.util.XsTypeConverter: java.lang.String[] URI_CHARS_REPLACED_WITH> = $r3;

        $r4 = newarray (char)[19];

        $r4[0] = 48;

        $r4[1] = 48;

        $r4[2] = 48;

        $r4[3] = 48;

        $r4[4] = 48;

        $r4[5] = 48;

        $r4[6] = 48;

        $r4[7] = 48;

        $r4[8] = 48;

        $r4[9] = 48;

        $r4[10] = 48;

        $r4[11] = 48;

        $r4[12] = 48;

        $r4[13] = 48;

        $r4[14] = 48;

        $r4[15] = 48;

        $r4[16] = 48;

        $r4[17] = 48;

        $r4[18] = 48;

        <org.apache.xmlbeans.impl.util.XsTypeConverter: char[] CH_ZEROS> = $r4;

        return;
    }
}
