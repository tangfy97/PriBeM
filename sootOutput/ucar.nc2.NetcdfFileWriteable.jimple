public class ucar.nc2.NetcdfFileWriteable extends ucar.nc2.NetcdfFile
{
    private static org.slf4j.Logger log;
    private static java.util.Set valid;
    private ucar.nc2.iosp.IOServiceProviderWriter spiw;
    private boolean defineMode;
    private boolean isNewFile;
    private boolean isLargeFile;
    private boolean fill;
    private int extraHeader;
    private long preallocateSize;

    public static ucar.nc2.NetcdfFileWriteable openExisting(java.lang.String) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new ucar.nc2.NetcdfFileWriteable;

        specialinvoke $r0.<ucar.nc2.NetcdfFileWriteable: void <init>(java.lang.String,boolean,boolean)>(r1, 1, 1);

        return $r0;
    }

    public static ucar.nc2.NetcdfFileWriteable openExisting(java.lang.String, boolean) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r0;
        java.lang.String r1;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new ucar.nc2.NetcdfFileWriteable;

        specialinvoke $r0.<ucar.nc2.NetcdfFileWriteable: void <init>(java.lang.String,boolean,boolean)>(r1, z0, 1);

        return $r0;
    }

    public static ucar.nc2.NetcdfFileWriteable createNew(java.lang.String) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new ucar.nc2.NetcdfFileWriteable;

        specialinvoke $r0.<ucar.nc2.NetcdfFileWriteable: void <init>(java.lang.String,boolean,boolean)>(r1, 1, 0);

        return $r0;
    }

    public static ucar.nc2.NetcdfFileWriteable createNew(java.lang.String, boolean) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r0;
        java.lang.String r1;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new ucar.nc2.NetcdfFileWriteable;

        specialinvoke $r0.<ucar.nc2.NetcdfFileWriteable: void <init>(java.lang.String,boolean,boolean)>(r1, z0, 0);

        return $r0;
    }

    private void <init>(java.lang.String, boolean, boolean) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.unidata.io.RandomAccessFile $r2;
        ucar.nc2.iosp.IOServiceProviderWriter $r5, $r6, $r7;
        ucar.nc2.iosp.IOServiceProvider $r3, $r4;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void <init>()>();

        r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location> = r1;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean fill> = z0;

        if z1 == 0 goto label1;

        $r2 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r2.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r1, "rw");

        $r3 = staticinvoke <ucar.nc2.iosp.netcdf3.SPFactory: ucar.nc2.iosp.IOServiceProvider getServiceProvider()>();

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi> = $r3;

        $r4 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi>;

        $r5 = (ucar.nc2.iosp.IOServiceProviderWriter) $r4;

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw> = $r5;

        $r6 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r6.<ucar.nc2.iosp.IOServiceProviderWriter: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>($r2, r0, null);

        $r7 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r7.<ucar.nc2.iosp.IOServiceProviderWriter: void setFill(boolean)>(z0);

        goto label2;

     label1:
        r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode> = 1;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean isNewFile> = 1;

     label2:
        return;
    }

    public void setFill(boolean)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.iosp.IOServiceProviderWriter $r1, $r2;
        boolean z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        z0 := @parameter0: boolean;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean fill> = z0;

        $r1 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProviderWriter: void setFill(boolean)>(z0);

     label1:
        return;
    }

    public void setLength(long)
    {
        java.lang.UnsupportedOperationException $r1;
        ucar.nc2.NetcdfFileWriteable r0;
        long l0;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        l0 := @parameter0: long;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r1;

     label1:
        r0.<ucar.nc2.NetcdfFileWriteable: long preallocateSize> = l0;

        return;
    }

    public void setLargeFile(boolean)
    {
        java.lang.UnsupportedOperationException $r1;
        ucar.nc2.NetcdfFileWriteable r0;
        boolean $z0, z1;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        z1 := @parameter0: boolean;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r1;

     label1:
        r0.<ucar.nc2.NetcdfFileWriteable: boolean isLargeFile> = z1;

        return;
    }

    public void setExtraHeaderBytes(int)
    {
        java.lang.UnsupportedOperationException $r1;
        ucar.nc2.NetcdfFileWriteable r0;
        int i0;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r1;

     label1:
        r0.<ucar.nc2.NetcdfFileWriteable: int extraHeader> = i0;

        return;
    }

    public boolean isDefineMode()
    {
        ucar.nc2.NetcdfFileWriteable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        return $z0;
    }

    public ucar.nc2.Dimension addDimension(java.lang.String, int)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        int i0;
        java.lang.String r1, $r7, $r12;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r13;
        java.lang.IllegalArgumentException $r3, $r8;
        ucar.nc2.Dimension $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r13 = new java.lang.UnsupportedOperationException;

        specialinvoke $r13.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r13;

     label1:
        if i0 > 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dimension length must be > 0 :");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: boolean isValidNetcdf3ObjectName(java.lang.String)>(r1);

        if $z1 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal netCDF-3 dimension name: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        $r2 = new ucar.nc2.Dimension;

        specialinvoke $r2.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>(r1, i0, 1, 0, 0);

        specialinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r2);

        return $r2;
    }

    public ucar.nc2.Dimension addDimension(java.lang.String, int, boolean, boolean, boolean)
    {
        java.lang.UnsupportedOperationException $r8;
        ucar.nc2.NetcdfFileWriteable r0;
        java.lang.IllegalArgumentException $r3;
        int i0;
        ucar.nc2.Dimension $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r1, $r7;
        boolean $z0, $z1, z2, z3, z4;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        z4 := @parameter4: boolean;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r8;

     label1:
        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: boolean isValidNetcdf3ObjectName(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal netCDF-3 dimension name ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r2 = new ucar.nc2.Dimension;

        specialinvoke $r2.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>(r1, i0, z2, z3, z4);

        specialinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r2);

        return $r2;
    }

    public ucar.nc2.Dimension addUnlimitedDimension(java.lang.String)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Dimension $r2;
        java.lang.String r1;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int,boolean,boolean,boolean)>(r1, 0, 1, 1, 0);

        return $r2;
    }

    public ucar.nc2.Dimension renameDimension(java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Dimension $r2;
        java.lang.String r1, r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension findDimension(java.lang.String)>(r1);

        if null == $r2 goto label2;

        virtualinvoke $r2.<ucar.nc2.Dimension: void setName(java.lang.String)>(r3);

     label2:
        return $r2;
    }

    public ucar.nc2.Attribute addGlobalAttribute(ucar.nc2.Attribute)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        java.lang.String $r1, $r3, $r4, $r8, $r12;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r15;
        org.slf4j.Logger $r6;
        ucar.ma2.Array $r14;
        ucar.nc2.Attribute $r2, $r13, r16;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r11;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r16 := @parameter0: ucar.nc2.Attribute;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r15 = new java.lang.UnsupportedOperationException;

        specialinvoke $r15.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r15;

     label1:
        $r1 = virtualinvoke r16.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: boolean isValidNetcdf3ObjectName(java.lang.String)>($r1);

        if $z1 != 0 goto label2;

        $r3 = virtualinvoke r16.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r4 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String createValidNetcdf3ObjectName(java.lang.String)>($r3);

        $r6 = <ucar.nc2.NetcdfFileWriteable: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal netCDF-3 attribute name= ");

        $r8 = virtualinvoke r16.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" change to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>($r12);

        $r13 = new ucar.nc2.Attribute;

        $r14 = virtualinvoke r16.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        specialinvoke $r13.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>($r4, $r14);

        r16 = $r13;

     label2:
        $r2 = specialinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, r16);

        return $r2;
    }

    public ucar.nc2.Attribute addGlobalAttribute(java.lang.String, java.lang.String)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r1, $r4;
        java.lang.String r2, r3;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new ucar.nc2.Attribute;

        specialinvoke $r1.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r4 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(ucar.nc2.Attribute)>($r1);

        return $r4;
    }

    public ucar.nc2.Attribute addGlobalAttribute(java.lang.String, java.lang.Number)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r1, $r4;
        java.lang.String r2;
        java.lang.Number r3;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Number;

        $r1 = new ucar.nc2.Attribute;

        specialinvoke $r1.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>(r2, r3);

        $r4 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(ucar.nc2.Attribute)>($r1);

        return $r4;
    }

    public ucar.nc2.Attribute addGlobalAttribute(java.lang.String, ucar.ma2.Array)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r1, $r4;
        java.lang.String r2;
        ucar.ma2.Array r3;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: ucar.ma2.Array;

        $r1 = new ucar.nc2.Attribute;

        specialinvoke $r1.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>(r2, r3);

        $r4 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(ucar.nc2.Attribute)>($r1);

        return $r4;
    }

    public ucar.nc2.Attribute deleteGlobalAttribute(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r2;
        java.lang.String r1;
        ucar.nc2.Group $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>(r1);

        if null != $r2 goto label2;

        return null;

     label2:
        $r3 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        virtualinvoke $r3.<ucar.nc2.Group: boolean remove(ucar.nc2.Attribute)>($r2);

        return $r2;
    }

    public ucar.nc2.Attribute renameGlobalAttribute(java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r8;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Group $r3, $r7;
        ucar.ma2.Array $r6;
        ucar.nc2.Attribute $r2, $r4;
        java.lang.String r1, r5;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>(r1);

        if null != $r2 goto label2;

        return null;

     label2:
        $r3 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        virtualinvoke $r3.<ucar.nc2.Group: boolean remove(ucar.nc2.Attribute)>($r2);

        $r4 = new ucar.nc2.Attribute;

        $r6 = virtualinvoke $r2.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        specialinvoke $r4.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>(r5, $r6);

        $r7 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        virtualinvoke $r7.<ucar.nc2.Group: void addAttribute(ucar.nc2.Attribute)>($r4);

        return $r4;
    }

    public ucar.nc2.Variable addVariable(java.lang.String, ucar.ma2.DataType, ucar.nc2.Dimension[])
    {
        java.util.List $r2;
        ucar.nc2.NetcdfFileWriteable r3;
        ucar.ma2.DataType r5;
        ucar.nc2.Variable $r6;
        java.lang.String r4;
        ucar.nc2.Dimension[] r1;
        java.util.ArrayList $r0;

        r3 := @this: ucar.nc2.NetcdfFileWriteable;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: ucar.ma2.DataType;

        r1 := @parameter2: ucar.nc2.Dimension[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2);

        $r6 = virtualinvoke r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.util.List)>(r4, r5, $r0);

        return $r6;
    }

    public ucar.nc2.Variable addVariable(java.lang.String, ucar.ma2.DataType, java.lang.String)
    {
        ucar.nc2.NetcdfFileWriteable r3;
        java.util.ArrayList $r0;
        java.util.StringTokenizer $r1;
        ucar.nc2.Variable $r6;
        java.lang.String r2, r4, $r7, $r14;
        boolean $z0;
        ucar.ma2.DataType r5;
        java.lang.IllegalArgumentException $r10;
        ucar.nc2.Group $r8;
        ucar.nc2.Dimension $r9;
        java.lang.StringBuilder $r11, $r12, $r13;

        r3 := @this: ucar.nc2.NetcdfFileWriteable;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: ucar.ma2.DataType;

        r2 := @parameter2: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r2);

     label1:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        $r9 = virtualinvoke $r8.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r7);

        if null != $r9 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find dimension ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label1;

     label3:
        $r6 = virtualinvoke r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.util.List)>(r4, r5, $r0);

        return $r6;
    }

    public ucar.nc2.Variable addVariable(java.lang.String, ucar.ma2.DataType, java.util.List)
    {
        byte $b3;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.ma2.DataType r2;
        java.util.Set $r3;
        ucar.nc2.Group $r7;
        java.util.List r4;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r18, $r19, $r20, $r21, $r25, $r26, $r30, $r31, $r36, $r38, $r40, $r43;
        ucar.nc2.NetcdfFileWriteable r0;
        long $l0, $l2, l5;
        int $i1, i4, $i6;
        ucar.nc2.Variable $r42;
        java.lang.String r1, $r14, $r22, $r27, $r32;
        java.lang.UnsupportedOperationException $r35;
        java.util.Iterator $r5;
        java.lang.IllegalArgumentException $r37, $r39, $r41, $r44;
        java.lang.Object $r15;
        ucar.nc2.Dimension r34;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ucar.ma2.DataType;

        r4 := @parameter2: java.util.List;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r35 = new java.lang.UnsupportedOperationException;

        specialinvoke $r35.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r35;

     label1:
        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: boolean isValidNetcdf3ObjectName(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        $r37 = new java.lang.IllegalArgumentException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal netCDF-3 variable name: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r37;

     label2:
        $r3 = <ucar.nc2.NetcdfFileWriteable: java.util.Set valid>;

        $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z2 != 0 goto label3;

        $r39 = new java.lang.IllegalArgumentException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal dataType for netcdf-3 format: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r39;

     label3:
        i4 = 0;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r15 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r34 = (ucar.nc2.Dimension) $r15;

        $z4 = virtualinvoke r34.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z4 == 0 goto label5;

        if i4 == 0 goto label5;

        $r41 = new java.lang.IllegalArgumentException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unlimited dimension ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be first instead its  =");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r41;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        $r42 = new ucar.nc2.Variable;

        $r7 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        specialinvoke $r42.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r0, $r7, null, r1);

        virtualinvoke $r42.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>(r2);

        virtualinvoke $r42.<ucar.nc2.Variable: void setDimensions(java.util.List)>(r4);

        $l0 = virtualinvoke $r42.<ucar.nc2.Variable: long getSize()>();

        $i1 = virtualinvoke $r42.<ucar.nc2.Variable: int getElementSize()>();

        $l2 = (long) $i1;

        l5 = $l0 * $l2;

        $b3 = l5 cmp 4294967292L;

        $i6 = (int) $b3;

        if $i6 <= 0 goto label7;

        $r44 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable size in bytes ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" may not exceed ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(4294967292L);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r44;

     label7:
        specialinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r42);

        return $r42;
    }

    public ucar.nc2.Variable addStringVariable(java.lang.String, java.util.List, int)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        java.util.ArrayList $r10;
        int i0;
        ucar.nc2.Variable $r2;
        java.lang.String r1, $r8, $r16;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r17;
        ucar.ma2.DataType $r4;
        java.lang.IllegalArgumentException $r12;
        ucar.nc2.Group $r3;
        java.util.List r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r13, $r14, $r15;
        ucar.nc2.Dimension $r9;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r17 = new java.lang.UnsupportedOperationException;

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r17;

     label1:
        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: boolean isValidNetcdf3ObjectName(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal netCDF-3 variable name: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        $r2 = new ucar.nc2.Variable;

        $r3 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        specialinvoke $r2.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r0, $r3, null, r1);

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        virtualinvoke $r2.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_strlen");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int)>($r8, i0);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r11);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        virtualinvoke $r2.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r10);

        specialinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r2);

        return $r2;
    }

    public ucar.nc2.Variable renameVariable(java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Variable $r2;
        java.lang.String r1, r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        if null == $r2 goto label2;

        virtualinvoke $r2.<ucar.nc2.Variable: void setName(java.lang.String)>(r3);

     label2:
        return $r2;
    }

    public void addVariableAttribute(java.lang.String, ucar.nc2.Attribute)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Variable $r4;
        java.lang.String $r1, r2, $r10, $r11, $r12, $r16, $r20;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r23;
        org.slf4j.Logger $r14;
        java.lang.IllegalArgumentException $r5;
        ucar.nc2.Group $r3;
        ucar.ma2.Array $r22;
        ucar.nc2.Attribute $r21, r24;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r13, $r15, $r17, $r18, $r19;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r2 := @parameter0: java.lang.String;

        r24 := @parameter1: ucar.nc2.Attribute;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r23 = new java.lang.UnsupportedOperationException;

        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r23;

     label1:
        $r1 = virtualinvoke r24.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: boolean isValidNetcdf3ObjectName(java.lang.String)>($r1);

        if $z1 != 0 goto label2;

        $r11 = virtualinvoke r24.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r12 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String createValidNetcdf3ObjectName(java.lang.String)>($r11);

        $r14 = <ucar.nc2.NetcdfFileWriteable: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal netCDF-3 attribute name= ");

        $r16 = virtualinvoke r24.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" change to ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String)>($r20);

        $r21 = new ucar.nc2.Attribute;

        $r22 = virtualinvoke r24.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        specialinvoke $r21.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>($r12, $r22);

        r24 = $r21;

     label2:
        $r3 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Group rootGroup>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>(r2);

        if null != $r4 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addVariableAttribute variable name not found = <");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        virtualinvoke $r4.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>(r24);

        return;
    }

    public void addVariableAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r2;
        java.lang.String r1, r3, r4;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = new ucar.nc2.Attribute;

        specialinvoke $r2.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>(r3, r4);

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,ucar.nc2.Attribute)>(r1, $r2);

        return;
    }

    public void addVariableAttribute(java.lang.String, java.lang.String, java.lang.Number)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r2;
        java.lang.String r1, r3;
        java.lang.Number r4;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Number;

        $r2 = new ucar.nc2.Attribute;

        specialinvoke $r2.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>(r3, r4);

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,ucar.nc2.Attribute)>(r1, $r2);

        return;
    }

    public void addVariableAttribute(java.lang.String, java.lang.String, ucar.ma2.Array)
    {
        ucar.nc2.NetcdfFileWriteable r3;
        ucar.nc2.Attribute $r0;
        java.lang.String r1, r4;
        ucar.ma2.Array r2;

        r3 := @this: ucar.nc2.NetcdfFileWriteable;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: ucar.ma2.Array;

        $r0 = new ucar.nc2.Attribute;

        specialinvoke $r0.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>(r1, r2);

        virtualinvoke r3.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,ucar.nc2.Attribute)>(r4, $r0);

        return;
    }

    public ucar.nc2.Attribute deleteVariableAttribute(java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r5;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute $r4;
        ucar.nc2.Variable $r2;
        java.lang.String r1, r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        if $r2 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>(r3);

        if null != $r4 goto label3;

        return null;

     label3:
        virtualinvoke $r2.<ucar.nc2.Variable: boolean remove(ucar.nc2.Attribute)>($r4);

        return $r4;
    }

    public ucar.nc2.Attribute renameVariableAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r8;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.ma2.Array $r7;
        ucar.nc2.Attribute $r4, $r5;
        ucar.nc2.Variable $r2;
        java.lang.String r1, r3, r6;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        if $r2 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke $r2.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>(r3);

        if null != $r4 goto label3;

        return null;

     label3:
        virtualinvoke $r2.<ucar.nc2.Variable: boolean remove(ucar.nc2.Attribute)>($r4);

        $r5 = new ucar.nc2.Attribute;

        $r7 = virtualinvoke $r4.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        specialinvoke $r5.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>(r6, $r7);

        virtualinvoke $r2.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r5);

        return $r5;
    }

    public void updateAttribute(ucar.nc2.Variable, ucar.nc2.Attribute) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.Attribute r2;
        ucar.nc2.iosp.IOServiceProviderWriter $r3;
        ucar.nc2.Variable r1;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: ucar.nc2.Variable;

        r2 := @parameter1: ucar.nc2.Attribute;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("in define mode");

        throw $r4;

     label1:
        $r3 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r3.<ucar.nc2.iosp.IOServiceProviderWriter: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(r1, r2);

        return;
    }

    public void create() throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r7;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.iosp.IOServiceProviderWriter $r3, $r4, $r6;
        long $l0;
        ucar.nc2.iosp.IOServiceProvider $r1, $r2;
        int $i1;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not in define mode");

        throw $r7;

     label1:
        $r1 = staticinvoke <ucar.nc2.iosp.netcdf3.SPFactory: ucar.nc2.iosp.IOServiceProvider getServiceProvider()>();

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi> = $r1;

        $r2 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi>;

        $r3 = (ucar.nc2.iosp.IOServiceProviderWriter) $r2;

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw> = $r3;

        $r4 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $z1 = r0.<ucar.nc2.NetcdfFileWriteable: boolean fill>;

        interfaceinvoke $r4.<ucar.nc2.iosp.IOServiceProviderWriter: void setFill(boolean)>($z1);

        $r6 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $r5 = r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location>;

        $i1 = r0.<ucar.nc2.NetcdfFileWriteable: int extraHeader>;

        $l0 = r0.<ucar.nc2.NetcdfFileWriteable: long preallocateSize>;

        $z2 = r0.<ucar.nc2.NetcdfFileWriteable: boolean isLargeFile>;

        interfaceinvoke $r6.<ucar.nc2.iosp.IOServiceProviderWriter: void create(java.lang.String,ucar.nc2.NetcdfFile,int,long,boolean)>($r5, r0, $i1, $l0, $z2);

        r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode> = 0;

        return;
    }

    public boolean setRedefineMode(boolean) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.iosp.IOServiceProviderWriter $r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z4 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z4 != 0 goto label1;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode> = 1;

        goto label5;

     label1:
        if z0 != 0 goto label5;

        $z1 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z1 == 0 goto label5;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode> = 0;

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void finish()>();

        $r1 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $z2 = r0.<ucar.nc2.NetcdfFileWriteable: boolean isLargeFile>;

        $z3 = interfaceinvoke $r1.<ucar.nc2.iosp.IOServiceProviderWriter: boolean rewriteHeader(boolean)>($z2);

        if $z3 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.NetcdfFileWriteable: void rewrite()>();

     label2:
        if $z3 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;

     label5:
        return 0;
    }

    private void rewrite() throws java.io.IOException
    {
        java.lang.StringBuilder $r6, $r8, $r9, $r17, $r18, $r20, $r29, $r32, $r33, $r34, $r35, $r36, $r38, $r41, $r42, $r43, $r44, $r45, $r48, $r49, $r51, $r52, $r54;
        ucar.nc2.NetcdfFileWriteable r0;
        long $l0;
        ucar.nc2.Structure r56;
        java.util.ArrayList $r58;
        java.lang.String $r4, $r7, $r10, $r11, $r13, $r19, $r21, $r24, $r31, $r37, $r40, $r46, $r50, $r53, $r55;
        java.lang.RuntimeException $r16, $r47;
        java.io.File $r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        ucar.nc2.iosp.IOServiceProviderWriter $r1, $r2, $r14, $r15, $r26;
        java.util.List $r59, $r60;
        ucar.nc2.NetcdfFile $r12;
        int $i1, $i2;
        java.lang.Boolean r57;
        ucar.nc2.Variable r23, $r25, $r28;
        java.io.PrintStream $r30, $r39;
        java.util.Iterator $r61;
        java.lang.Object $r22, $r27;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        $r1 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r1.<ucar.nc2.iosp.IOServiceProviderWriter: void flush()>();

        $r2 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProviderWriter: void close()>();

        $r3 = new java.io.File;

        $r4 = r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r10);

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

     label1:
        $z1 = virtualinvoke $r3.<java.io.File: boolean renameTo(java.io.File)>($r5);

        if $z1 != 0 goto label2;

        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" prevFile.exists ");

        $z7 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" canRead = ");

        $z8 = virtualinvoke $r3.<java.io.File: boolean canRead()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r37);

        $r39 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tmpFile.exists ");

        $z9 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" canWrite ");

        $z10 = virtualinvoke $r5.<java.io.File: boolean canWrite()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.String)>($r46);

        $r47 = new java.lang.RuntimeException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant rename ");

        $r50 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r53 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.RuntimeException: void <init>(java.lang.String)>($r55);

        throw $r47;

     label2:
        $r11 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        $r12 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String)>($r11);

        r56 = null;

        $z2 = virtualinvoke $r12.<ucar.nc2.NetcdfFile: boolean hasUnlimitedDimension()>();

        if $z2 == 0 goto label3;

        virtualinvoke $r12.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        $r28 = virtualinvoke $r12.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        r56 = (ucar.nc2.Structure) $r28;

     label3:
        $r14 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $r13 = r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location>;

        $i1 = r0.<ucar.nc2.NetcdfFileWriteable: int extraHeader>;

        $l0 = r0.<ucar.nc2.NetcdfFileWriteable: long preallocateSize>;

        $z3 = r0.<ucar.nc2.NetcdfFileWriteable: boolean isLargeFile>;

        interfaceinvoke $r14.<ucar.nc2.iosp.IOServiceProviderWriter: void create(java.lang.String,ucar.nc2.NetcdfFile,int,long,boolean)>($r13, r0, $i1, $l0, $z3);

        $r15 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $z4 = r0.<ucar.nc2.NetcdfFileWriteable: boolean fill>;

        interfaceinvoke $r15.<ucar.nc2.iosp.IOServiceProviderWriter: void setFill(boolean)>($z4);

        if r56 == null goto label4;

        $r26 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $r27 = interfaceinvoke $r26.<ucar.nc2.iosp.IOServiceProviderWriter: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        r57 = (java.lang.Boolean) $r27;

        $z6 = virtualinvoke r57.<java.lang.Boolean: boolean booleanValue()>();

        if $z6 != 0 goto label4;

        r56 = null;

     label4:
        $r58 = new java.util.ArrayList;

        $r59 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: java.util.List getVariables()>();

        $i2 = interfaceinvoke $r59.<java.util.List: int size()>();

        specialinvoke $r58.<java.util.ArrayList: void <init>(int)>($i2);

        $r60 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: java.util.List getVariables()>();

        $r61 = interfaceinvoke $r60.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z11 = interfaceinvoke $r61.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label7;

        $r22 = interfaceinvoke $r61.<java.util.Iterator: java.lang.Object next()>();

        r23 = (ucar.nc2.Variable) $r22;

        $r24 = virtualinvoke r23.<ucar.nc2.Variable: java.lang.String getName()>();

        $r25 = virtualinvoke $r12.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r24);

        if $r25 == null goto label6;

        interfaceinvoke $r58.<java.util.List: boolean add(java.lang.Object)>($r25);

     label6:
        goto label5;

     label7:
        staticinvoke <ucar.nc2.FileWriter: double copyVarData(ucar.nc2.NetcdfFileWriteable,java.util.List,ucar.nc2.Structure,long)>(r0, $r58, r56, 0L);

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void flush()>();

        virtualinvoke $r12.<ucar.nc2.NetcdfFile: void close()>();

        $z5 = virtualinvoke $r5.<java.io.File: boolean delete()>();

        if $z5 != 0 goto label8;

        $r16 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant delete ");

        $r19 = r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label8:
        return;
    }

    public void write(java.lang.String, ucar.ma2.Array) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        int[] $r3;
        int $i0;
        java.lang.String r1;
        ucar.ma2.Array r2;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ucar.ma2.Array;

        $i0 = virtualinvoke r2.<ucar.ma2.Array: int getRank()>();

        $r3 = newarray (int)[$i0];

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>(r1, $r3, r2);

        return;
    }

    public void write(java.lang.String, int[], ucar.ma2.Array) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.UnsupportedOperationException $r13;
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.ma2.Section $r3;
        ucar.nc2.iosp.IOServiceProviderWriter $r6;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array r5;
        int[] r4, $r7;
        ucar.nc2.Variable $r2;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String r1, $r12;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: int[];

        r5 := @parameter2: ucar.ma2.Array;

        $z0 = r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode>;

        if $z0 == 0 goto label1;

        $r13 = new java.lang.UnsupportedOperationException;

        specialinvoke $r13.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("in define mode");

        throw $r13;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        if $r2 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetcdfFileWriteable.write illegal variable name = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        $r6 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        $r3 = new ucar.ma2.Section;

        $r7 = virtualinvoke r5.<ucar.ma2.Array: int[] getShape()>();

        specialinvoke $r3.<ucar.ma2.Section: void <init>(int[],int[])>(r4, $r7);

        interfaceinvoke $r6.<ucar.nc2.iosp.IOServiceProviderWriter: void writeData(ucar.nc2.Variable,ucar.ma2.Section,ucar.ma2.Array)>($r2, $r3, r5);

        virtualinvoke $r2.<ucar.nc2.Variable: void invalidateCache()>();

        return;
    }

    public void writeStringData(java.lang.String, ucar.ma2.Array) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        int[] $r3;
        int $i0;
        java.lang.String r1;
        ucar.ma2.Array r2;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ucar.ma2.Array;

        $i0 = virtualinvoke r2.<ucar.ma2.Array: int getRank()>();

        $r3 = newarray (int)[$i0];

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void writeStringData(java.lang.String,int[],ucar.ma2.Array)>(r1, $r3, r2);

        return;
    }

    public void writeStringData(java.lang.String, int[], ucar.ma2.Array) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.NetcdfFileWriteable r2;
        ucar.ma2.ArrayChar $r8;
        int[] r9, r10;
        int $i0, $i1, $i2, $i3;
        ucar.nc2.Variable $r4;
        java.lang.String r3, $r16, $r21;
        ucar.ma2.ArrayObject $r7;
        ucar.ma2.DataType $r5, $r6;
        java.lang.IllegalArgumentException $r11, $r17, $r22;
        ucar.ma2.Array r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r18, $r19, $r20;

        r2 := @this: ucar.nc2.NetcdfFileWriteable;

        r3 := @parameter0: java.lang.String;

        r10 := @parameter1: int[];

        r0 := @parameter2: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        if $r1 == class "Ljava/lang/String;" goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be ArrayObject of String ");

        throw $r22;

     label1:
        $r4 = virtualinvoke r2.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>(r3);

        if $r4 != null goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal variable name = ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label2:
        $r5 = virtualinvoke $r4.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r5 == $r6 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("variable ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not type CHAR");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label3:
        $i0 = virtualinvoke $r4.<ucar.nc2.Variable: int getRank()>();

        $i1 = $i0 - 1;

        $i2 = virtualinvoke $r4.<ucar.nc2.Variable: int getShape(int)>($i1);

        $r7 = (ucar.ma2.ArrayObject) r0;

        $r8 = staticinvoke <ucar.ma2.ArrayChar: ucar.ma2.ArrayChar makeFromStringArray(ucar.ma2.ArrayObject,int)>($r7, $i2);

        r9 = newarray (int)[$i0];

        $i3 = $i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r9, 0, $i3);

        virtualinvoke r2.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>(r3, r9, $r8);

        return;
    }

    public void flush() throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.iosp.IOServiceProviderWriter $r1;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        $r1 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r1.<ucar.nc2.iosp.IOServiceProviderWriter: void flush()>();

        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.nc2.iosp.IOServiceProviderWriter $r1, $r2;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        $r1 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        if $r1 == null goto label1;

        virtualinvoke r0.<ucar.nc2.NetcdfFileWriteable: void flush()>();

        $r2 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProviderWriter: void close()>();

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw> = null;

     label1:
        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi> = null;

        return;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.NetcdfFileWriteable r0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        return "netCDF";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.NetcdfFileWriteable r0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        return "netCDF classic format - writer";
    }

    public void <init>(java.lang.String, boolean)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void <init>()>();

        r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location> = r1;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean fill> = z0;

        r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode> = 1;

        return;
    }

    public void <init>()
    {
        ucar.nc2.NetcdfFileWriteable r0;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void <init>()>();

        r0.<ucar.nc2.NetcdfFileWriteable: boolean defineMode> = 1;

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        ucar.unidata.io.RandomAccessFile $r2;
        ucar.nc2.iosp.IOServiceProviderWriter $r5, $r6;
        ucar.nc2.iosp.IOServiceProvider $r3, $r4;
        java.lang.String r1;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void <init>()>();

        r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location> = r1;

        $r2 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r2.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r1, "rw");

        $r3 = staticinvoke <ucar.nc2.iosp.netcdf3.SPFactory: ucar.nc2.iosp.IOServiceProvider getServiceProvider()>();

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi> = $r3;

        $r4 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProvider spi>;

        $r5 = (ucar.nc2.iosp.IOServiceProviderWriter) $r4;

        r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw> = $r5;

        $r6 = r0.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.iosp.IOServiceProviderWriter spiw>;

        interfaceinvoke $r6.<ucar.nc2.iosp.IOServiceProviderWriter: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>($r2, r0, null);

        return;
    }

    public void setName(java.lang.String)
    {
        ucar.nc2.NetcdfFileWriteable r0;
        java.lang.String r1;

        r0 := @this: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter0: java.lang.String;

        r0.<ucar.nc2.NetcdfFileWriteable: java.lang.String location> = r1;

        return;
    }

    public ucar.nc2.Variable addVariable(java.lang.String, java.lang.Class, ucar.nc2.Dimension[])
    {
        ucar.nc2.NetcdfFileWriteable r3;
        ucar.ma2.DataType $r6;
        ucar.nc2.Dimension[] r1;
        java.util.ArrayList $r0;
        java.util.List $r2;
        java.lang.Class r5;
        ucar.nc2.Variable $r7;
        java.lang.String r4;

        r3 := @this: ucar.nc2.NetcdfFileWriteable;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        r1 := @parameter2: ucar.nc2.Dimension[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r6 = staticinvoke <ucar.ma2.DataType: ucar.ma2.DataType getType(java.lang.Class)>(r5);

        $r7 = virtualinvoke r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.util.List)>(r4, $r6, $r0);

        return $r7;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        ucar.ma2.DataType $r2, $r3, $r4, $r5, $r6, $r7;
        ucar.ma2.DataType[] $r1;
        java.util.EnumSet $r8;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/NetcdfFileWriteable;");

        <ucar.nc2.NetcdfFileWriteable: org.slf4j.Logger log> = $r0;

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        $r1 = newarray (ucar.ma2.DataType)[5];

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r1[0] = $r2;

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        $r1[1] = $r3;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        $r1[2] = $r4;

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r1[3] = $r5;

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        $r1[4] = $r6;

        $r8 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>($r7, $r1);

        <ucar.nc2.NetcdfFileWriteable: java.util.Set valid> = $r8;

        return;
    }
}
