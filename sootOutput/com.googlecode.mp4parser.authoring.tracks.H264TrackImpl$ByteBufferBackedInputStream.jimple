public class com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream extends java.io.InputStream
{
    private final java.nio.ByteBuffer buf;
    final com.googlecode.mp4parser.authoring.tracks.H264TrackImpl this$0;

    public void <init>(com.googlecode.mp4parser.authoring.tracks.H264TrackImpl, java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r1;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream r0;
        java.nio.ByteBuffer r2, $r3;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r2 := @parameter1: java.nio.ByteBuffer;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl this$0> = r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r3 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: java.nio.ByteBuffer buf> = $r3;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.nio.ByteBuffer $r1, $r2;
        short $s1, $s4;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream r0;
        byte $b0;
        int $i3, $i5;
        boolean $z0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: java.nio.ByteBuffer buf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: java.nio.ByteBuffer buf>;

        $b0 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get()>();

        $s4 = (short) $b0;

        $s1 = $s4 & 255;

        $i5 = (int) $s1;

        return $i5;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r3;
        java.nio.ByteBuffer $r1, $r2, $r4;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream r0;
        int $i0, $i1, i2, i3, $i5;
        boolean $z0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream;

        r3 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: java.nio.ByteBuffer buf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: java.nio.ByteBuffer buf>;

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i0);

        $r4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ByteBufferBackedInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r3, i2, $i1);

        return $i1;
    }
}
