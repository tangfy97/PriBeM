public class org.apache.solr.client.solrj.util.ClientUtils extends java.lang.Object
{
    public static final java.lang.String TEXT_XML;
    public static final java.util.Collection fmts;
    public static java.util.TimeZone UTC;

    public void <init>()
    {
        org.apache.solr.client.solrj.util.ClientUtils r0;

        r0 := @this: org.apache.solr.client.solrj.util.ClientUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection toContentStreams(java.lang.String, java.lang.String)
    {
        org.apache.solr.common.util.ContentStreamBase$StringStream $r2;
        java.lang.String r0, r3;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1);

        $r2 = new org.apache.solr.common.util.ContentStreamBase$StringStream;

        specialinvoke $r2.<org.apache.solr.common.util.ContentStreamBase$StringStream: void <init>(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.solr.common.util.ContentStreamBase: void setContentType(java.lang.String)>(r3);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return $r1;
    }

    public static org.apache.solr.common.SolrInputDocument toSolrInputDocument(org.apache.solr.common.SolrDocument)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.solr.common.SolrDocument r1;
        java.lang.Object $r4, $r6;
        java.lang.String r5;
        org.apache.solr.common.SolrInputDocument $r0;
        boolean $z0;

        r1 := @parameter0: org.apache.solr.common.SolrDocument;

        $r0 = new org.apache.solr.common.SolrInputDocument;

        specialinvoke $r0.<org.apache.solr.common.SolrInputDocument: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.solr.common.SolrDocument: java.util.Collection getFieldNames()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r1.<org.apache.solr.common.SolrDocument: java.lang.Object getFieldValue(java.lang.String)>(r5);

        virtualinvoke $r0.<org.apache.solr.common.SolrInputDocument: void addField(java.lang.String,java.lang.Object,float)>(r5, $r6, 1.0F);

        goto label1;

     label2:
        return $r0;
    }

    public static org.apache.solr.common.SolrDocument toSolrDocument(org.apache.solr.common.SolrInputDocument)
    {
        java.util.Iterator $r2;
        org.apache.solr.common.SolrInputField r4;
        org.apache.solr.common.SolrDocument $r0;
        java.lang.Object $r3, $r6;
        java.lang.String $r5;
        org.apache.solr.common.SolrInputDocument r1;
        boolean $z0;

        r1 := @parameter0: org.apache.solr.common.SolrInputDocument;

        $r0 = new org.apache.solr.common.SolrDocument;

        specialinvoke $r0.<org.apache.solr.common.SolrDocument: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.solr.common.SolrInputDocument: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.solr.common.SolrInputField) $r3;

        $r5 = virtualinvoke r4.<org.apache.solr.common.SolrInputField: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<org.apache.solr.common.SolrInputField: java.lang.Object getValue()>();

        virtualinvoke $r0.<org.apache.solr.common.SolrDocument: void setField(java.lang.String,java.lang.Object)>($r5, $r6);

        goto label1;

     label2:
        return $r0;
    }

    public static void writeXML(org.apache.solr.common.SolrInputDocument, java.io.Writer) throws java.io.IOException
    {
        org.apache.solr.common.SolrInputField r9;
        java.util.Map $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Collection r21;
        java.util.Set $r14;
        java.io.Writer r0;
        float $f0, f1;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        org.apache.solr.common.SolrInputDocument r3;
        java.lang.String $r6, $r10, $r19;
        java.util.Map$Entry r17;
        java.util.Iterator $r7, $r11, $r15, $r22;
        java.lang.Object $r8, $r12, $r16, $r18, $r20, $r23;

        r3 := @parameter0: org.apache.solr.common.SolrInputDocument;

        r0 := @parameter1: java.io.Writer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<doc boost=\"");

        $f0 = virtualinvoke r3.<org.apache.solr.common.SolrInputDocument: float getDocumentBoost()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r6);

        $r7 = virtualinvoke r3.<org.apache.solr.common.SolrInputDocument: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.solr.common.SolrInputField) $r8;

        f1 = virtualinvoke r9.<org.apache.solr.common.SolrInputField: float getBoost()>();

        $r10 = virtualinvoke r9.<org.apache.solr.common.SolrInputField: java.lang.String getName()>();

        $r11 = virtualinvoke r9.<org.apache.solr.common.SolrInputField: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r12 instanceof java.util.Map;

        if $z2 == 0 goto label09;

        $r13 = (java.util.Map) $r12;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r18 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        $r20 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z4 = $r20 instanceof java.util.Collection;

        if $z4 == 0 goto label06;

        r21 = (java.util.Collection) $r20;

        $r22 = interfaceinvoke r21.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.apache.solr.client.solrj.util.ClientUtils: void writeVal(java.io.Writer,float,java.lang.String,java.lang.Object,java.lang.String)>(r0, f1, $r10, $r23, $r19);

        f1 = 1.0F;

        goto label04;

     label05:
        goto label07;

     label06:
        staticinvoke <org.apache.solr.client.solrj.util.ClientUtils: void writeVal(java.io.Writer,float,java.lang.String,java.lang.Object,java.lang.String)>(r0, f1, $r10, $r20, $r19);

        f1 = 1.0F;

     label07:
        goto label03;

     label08:
        goto label10;

     label09:
        staticinvoke <org.apache.solr.client.solrj.util.ClientUtils: void writeVal(java.io.Writer,float,java.lang.String,java.lang.Object,java.lang.String)>(r0, f1, $r10, $r12, null);

        f1 = 1.0F;

     label10:
        goto label02;

     label11:
        goto label01;

     label12:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("</doc>");

        return;
    }

    private static void writeVal(java.io.Writer, float, java.lang.String, java.lang.Object, java.lang.String) throws java.io.IOException
    {
        java.lang.Float $r9, $r14;
        byte[] $r15, $r16, r20;
        java.util.Date $r18;
        java.nio.ByteBuffer r21;
        byte $b0, $b1;
        java.text.DateFormat $r17;
        boolean $z0, $z1, $z2;
        java.io.Writer r1;
        float f0;
        java.lang.Object[] $r3, $r5, $r8, $r11, $r13;
        int $i2, $i3, $i4, $i5, $i6;
        java.lang.Boolean $r6;
        java.lang.String r0, $r2, r4, $r7, $r10, $r12;
        java.lang.Object r19;

        r1 := @parameter0: java.io.Writer;

        f0 := @parameter1: float;

        r4 := @parameter2: java.lang.String;

        r19 := @parameter3: java.lang.Object;

        r0 := @parameter4: java.lang.String;

        $z0 = r19 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r17 = staticinvoke <org.apache.solr.common.util.DateUtil: java.text.DateFormat getThreadLocalDateFormat()>();

        $r18 = (java.util.Date) r19;

        r19 = virtualinvoke $r17.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r18);

        goto label3;

     label1:
        $z1 = r19 instanceof byte[];

        if $z1 == 0 goto label2;

        $r16 = (byte[]) r19;

        r20 = (byte[]) $r16;

        $i6 = lengthof r20;

        r19 = staticinvoke <org.apache.solr.common.util.Base64: java.lang.String byteArrayToBase64(byte[],int,int)>(r20, 0, $i6);

        goto label3;

     label2:
        $z2 = r19 instanceof java.nio.ByteBuffer;

        if $z2 == 0 goto label3;

        r21 = (java.nio.ByteBuffer) r19;

        $r15 = virtualinvoke r21.<java.nio.ByteBuffer: byte[] array()>();

        $i2 = virtualinvoke r21.<java.nio.ByteBuffer: int position()>();

        $i3 = virtualinvoke r21.<java.nio.ByteBuffer: int limit()>();

        $i4 = virtualinvoke r21.<java.nio.ByteBuffer: int position()>();

        $i5 = $i3 - $i4;

        r19 = staticinvoke <org.apache.solr.common.util.Base64: java.lang.String byteArrayToBase64(byte[],int,int)>($r15, $i2, $i5);

     label3:
        if r0 != null goto label5;

        $b1 = f0 cmpl 1.0F;

        if $b1 == 0 goto label4;

        $r12 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        $r13 = newarray (java.lang.Object)[4];

        $r13[0] = "name";

        $r13[1] = r4;

        $r13[2] = "boost";

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r13[3] = $r14;

        staticinvoke <org.apache.solr.common.util.XML: void writeXML(java.io.Writer,java.lang.String,java.lang.String,java.lang.Object[])>(r1, "field", $r12, $r13);

        goto label8;

     label4:
        if r19 == null goto label8;

        $r10 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "name";

        $r11[1] = r4;

        staticinvoke <org.apache.solr.common.util.XML: void writeXML(java.io.Writer,java.lang.String,java.lang.String,java.lang.Object[])>(r1, "field", $r10, $r11);

        goto label8;

     label5:
        $b0 = f0 cmpl 1.0F;

        if $b0 == 0 goto label6;

        $r7 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[6];

        $r8[0] = "name";

        $r8[1] = r4;

        $r8[2] = "boost";

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r8[3] = $r9;

        $r8[4] = "update";

        $r8[5] = r0;

        staticinvoke <org.apache.solr.common.util.XML: void writeXML(java.io.Writer,java.lang.String,java.lang.String,java.lang.Object[])>(r1, "field", $r7, $r8);

        goto label8;

     label6:
        if r19 != null goto label7;

        $r5 = newarray (java.lang.Object)[6];

        $r5[0] = "name";

        $r5[1] = r4;

        $r5[2] = "update";

        $r5[3] = r0;

        $r5[4] = "null";

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r5[5] = $r6;

        staticinvoke <org.apache.solr.common.util.XML: void writeXML(java.io.Writer,java.lang.String,java.lang.String,java.lang.Object[])>(r1, "field", null, $r5);

        goto label8;

     label7:
        $r2 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = "name";

        $r3[1] = r4;

        $r3[2] = "update";

        $r3[3] = r0;

        staticinvoke <org.apache.solr.common.util.XML: void writeXML(java.io.Writer,java.lang.String,java.lang.String,java.lang.Object[])>(r1, "field", $r2, $r3);

     label8:
        return;
    }

    public static java.lang.String toXML(org.apache.solr.common.SolrInputDocument)
    {
        java.io.StringWriter $r0;
        java.lang.String $r2;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrInputDocument r1;

        r1 := @parameter0: org.apache.solr.common.SolrInputDocument;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        staticinvoke <org.apache.solr.client.solrj.util.ClientUtils: void writeXML(org.apache.solr.common.SolrInputDocument,java.io.Writer)>(r1, $r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        $r2 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.util.Date parseDate(java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0;
        java.util.Date $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.solr.common.util.DateUtil: java.util.Date parseDate(java.lang.String)>(r0);

        return $r1;
    }

    public static java.text.DateFormat getThreadLocalDateFormat()
    {
        java.text.DateFormat $r0;

        $r0 = staticinvoke <org.apache.solr.common.util.DateUtil: java.text.DateFormat getThreadLocalDateFormat()>();

        return $r0;
    }

    public static java.lang.String escapeQueryChars(java.lang.String)
    {
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.lang.String r1, $r2;
        boolean $z0;
        char $c1;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 == 92 goto label2;

        $i4 = (int) $c1;

        if $i4 == 43 goto label2;

        $i5 = (int) $c1;

        if $i5 == 45 goto label2;

        $i6 = (int) $c1;

        if $i6 == 33 goto label2;

        $i7 = (int) $c1;

        if $i7 == 40 goto label2;

        $i8 = (int) $c1;

        if $i8 == 41 goto label2;

        $i9 = (int) $c1;

        if $i9 == 58 goto label2;

        $i10 = (int) $c1;

        if $i10 == 94 goto label2;

        $i11 = (int) $c1;

        if $i11 == 91 goto label2;

        $i12 = (int) $c1;

        if $i12 == 93 goto label2;

        $i13 = (int) $c1;

        if $i13 == 34 goto label2;

        $i14 = (int) $c1;

        if $i14 == 123 goto label2;

        $i15 = (int) $c1;

        if $i15 == 125 goto label2;

        $i16 = (int) $c1;

        if $i16 == 126 goto label2;

        $i17 = (int) $c1;

        if $i17 == 42 goto label2;

        $i18 = (int) $c1;

        if $i18 == 63 goto label2;

        $i19 = (int) $c1;

        if $i19 == 124 goto label2;

        $i20 = (int) $c1;

        if $i20 == 38 goto label2;

        $i21 = (int) $c1;

        if $i21 == 59 goto label2;

        $i22 = (int) $c1;

        if $i22 == 47 goto label2;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toQueryString(org.apache.solr.common.params.SolrParams, boolean)
    {
        java.lang.String[] $r6;
        org.apache.solr.common.params.SolrParams r1;
        int i0, i1;
        java.lang.String $r3, r5, r7, $r8, $r11, r12, $r13, $r14;
        boolean z0, z1, $z2, z3, z4;
        java.util.Iterator $r2;
        java.io.IOException $r9;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r0;
        java.lang.Object $r4;

        r1 := @parameter0: org.apache.solr.common.params.SolrParams;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128);

     label01:
        if z0 == 0 goto label02;

        $r11 = "&amp;";

        goto label03;

     label02:
        $r11 = "&";

     label03:
        r12 = $r11;

        z1 = 1;

        z4 = 1;

        z3 = 1;

        $r2 = virtualinvoke r1.<org.apache.solr.common.params.SolrParams: java.util.Iterator getParameterNamesIterator()>();

     label04:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r1.<org.apache.solr.common.params.SolrParams: java.lang.String[] getParams(java.lang.String)>(r5);

        if $r6 != null goto label07;

        if z3 == 0 goto label05;

        $r13 = "?";

        goto label06;

     label05:
        $r13 = r12;

     label06:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        z1 = 0;

        z4 = 0;

        z3 = 0;

        goto label12;

     label07:
        i0 = lengthof $r6;

        i1 = 0;

     label08:
        if i1 >= i0 goto label12;

        r7 = $r6[i1];

        if z4 == 0 goto label09;

        $r14 = "?";

        goto label10;

     label09:
        $r14 = r12;

     label10:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        if r7 == null goto label11;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r8 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r7, "UTF-8");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label11:
        z1 = 0;

        z4 = 0;

        z3 = 0;

        i1 = i1 + 1;

        goto label08;

     label12:
        goto label04;

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label15:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label01 to label13 with label14;
    }

    public static void addSlices(java.util.Map, java.lang.String, java.util.Collection, boolean)
    {
        org.apache.solr.common.cloud.Slice r3;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.util.Map r5;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.String $r4, r7, r11;
        boolean $z0, z1;

        r5 := @parameter0: java.util.Map;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Collection;

        z1 := @parameter3: boolean;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.solr.common.cloud.Slice) $r2;

        $r4 = virtualinvoke r3.<org.apache.solr.common.cloud.Slice: java.lang.String getName()>();

        r11 = $r4;

        if z1 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r3);

        goto label1;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r1;
        java.util.Collection $r0;

        <org.apache.solr.client.solrj.util.ClientUtils: java.lang.String TEXT_XML> = "application/xml; charset=UTF-8";

        $r0 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        <org.apache.solr.client.solrj.util.ClientUtils: java.util.Collection fmts> = $r0;

        $r1 = <org.apache.solr.common.util.DateUtil: java.util.TimeZone UTC>;

        <org.apache.solr.client.solrj.util.ClientUtils: java.util.TimeZone UTC> = $r1;

        return;
    }
}
