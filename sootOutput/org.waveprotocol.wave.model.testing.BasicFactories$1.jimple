final class org.waveprotocol.wave.model.testing.BasicFactories$1 extends java.lang.Object implements org.waveprotocol.wave.model.document.util.DocumentProvider
{

    void <init>()
    {
        org.waveprotocol.wave.model.testing.BasicFactories$1 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.document.Document create(java.lang.String, java.util.Map)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3;
        org.waveprotocol.wave.model.document.util.DocumentImpl $r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r2;
        java.util.Map r1;
        org.waveprotocol.wave.model.operation.OperationSequencer $r5;
        java.lang.String r0;
        org.waveprotocol.wave.model.testing.BasicFactories$1 r6;

        r6 := @this: org.waveprotocol.wave.model.testing.BasicFactories$1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        $r2 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument create(java.lang.String,java.util.Map)>(r0, r1);

        $r4 = new org.waveprotocol.wave.model.document.util.DocumentImpl;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.operation.OperationSequencer createTrivialSequencer(org.waveprotocol.wave.model.document.indexed.IndexedDocument)>($r3);

        specialinvoke $r4.<org.waveprotocol.wave.model.document.util.DocumentImpl: void <init>(org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.model.document.ReadableWDocument)>($r5, $r3);

        return $r4;
    }

    public org.waveprotocol.wave.model.document.Document parse(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.util.DocumentImpl $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r1;
        org.waveprotocol.wave.model.operation.OperationSequencer $r4;
        java.lang.String r0;
        org.waveprotocol.wave.model.testing.BasicFactories$1 r5;

        r5 := @this: org.waveprotocol.wave.model.testing.BasicFactories$1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r0);

        $r3 = new org.waveprotocol.wave.model.document.util.DocumentImpl;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.operation.OperationSequencer createTrivialSequencer(org.waveprotocol.wave.model.document.indexed.IndexedDocument)>($r2);

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.DocumentImpl: void <init>(org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.model.document.ReadableWDocument)>($r4, $r2);

        return $r3;
    }

    public volatile java.lang.Object parse(java.lang.String)
    {
        org.waveprotocol.wave.model.document.Document $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.testing.BasicFactories$1 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$1;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.BasicFactories$1: org.waveprotocol.wave.model.document.Document parse(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.Object create(java.lang.String, java.util.Map)
    {
        java.util.Map r2;
        org.waveprotocol.wave.model.document.Document $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.testing.BasicFactories$1 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.BasicFactories$1: org.waveprotocol.wave.model.document.Document create(java.lang.String,java.util.Map)>(r1, r2);

        return $r3;
    }
}
