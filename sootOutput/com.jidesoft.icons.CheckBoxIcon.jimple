public class com.jidesoft.icons.CheckBoxIcon extends java.lang.Object implements javax.swing.Icon
{
    private com.jidesoft.swing.TristateCheckBox _checkBox;
    private javax.swing.Icon _checkBoxIcon;
    private java.awt.image.BufferedImage _uncheckImage;
    private java.awt.image.BufferedImage _checkedImage;
    private java.awt.image.BufferedImage _mixedImage;
    private int _state;

    public void <init>()
    {
        com.jidesoft.icons.CheckBoxIcon r0;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void validateCheckBox()
    {
        com.jidesoft.icons.CheckBoxIcon r0;
        javax.swing.UIDefaults $r4, $r7;
        javax.swing.Icon $r5, $r6, $r8;
        com.jidesoft.swing.TristateCheckBox $r1, $r2, $r3;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        $r1 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        if $r1 == null goto label1;

        $r6 = r0.<com.jidesoft.icons.CheckBoxIcon: javax.swing.Icon _checkBoxIcon>;

        $r7 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r8 = virtualinvoke $r7.<javax.swing.UIDefaults: javax.swing.Icon getIcon(java.lang.Object)>("CheckBox.icon");

        if $r6 == $r8 goto label2;

     label1:
        $r2 = new com.jidesoft.swing.TristateCheckBox;

        specialinvoke $r2.<com.jidesoft.swing.TristateCheckBox: void <init>()>();

        r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox> = $r2;

        $r3 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke $r3.<com.jidesoft.swing.TristateCheckBox: void setOpaque(boolean)>(0);

        $r4 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r5 = virtualinvoke $r4.<javax.swing.UIDefaults: javax.swing.Icon getIcon(java.lang.Object)>("CheckBox.icon");

        r0.<com.jidesoft.icons.CheckBoxIcon: javax.swing.Icon _checkBoxIcon> = $r5;

        r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _uncheckImage> = null;

        r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _checkedImage> = null;

        r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _mixedImage> = null;

     label2:
        return;
    }

    public void paintIcon(java.awt.Component, java.awt.Graphics, int, int)
    {
        com.jidesoft.icons.CheckBoxIcon r0;
        java.awt.GraphicsConfiguration $r7;
        java.awt.image.BufferedImage $r1, $r3, $r4, $r5, $r8, $r11, $r14, $r17, $r20, $r23;
        java.awt.Component r26;
        com.jidesoft.swing.TristateCheckBox $r9, $r10, $r12, $r15, $r16, $r18, $r21, $r22, $r24;
        java.awt.Graphics r2, $r13, $r19, $r25;
        java.awt.Graphics2D $r6;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        r26 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.Graphics;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        specialinvoke r0.<com.jidesoft.icons.CheckBoxIcon: void validateCheckBox()>();

        $r1 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _uncheckImage>;

        if $r1 != null goto label1;

        $r6 = (java.awt.Graphics2D) r2;

        $r7 = virtualinvoke $r6.<java.awt.Graphics2D: java.awt.GraphicsConfiguration getDeviceConfiguration()>();

        $i5 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconWidth()>();

        $i6 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconHeight()>();

        $r8 = virtualinvoke $r7.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>($i5, $i6, 3);

        r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _uncheckImage> = $r8;

        $r9 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke $r9.<com.jidesoft.swing.TristateCheckBox: void setState(int)>(0);

        $r10 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $i7 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconWidth()>();

        $i8 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconHeight()>();

        virtualinvoke $r10.<com.jidesoft.swing.TristateCheckBox: void setBounds(int,int,int,int)>(0, 0, $i7, $i8);

        $r12 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $r11 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _uncheckImage>;

        $r13 = virtualinvoke $r11.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke $r12.<com.jidesoft.swing.TristateCheckBox: void paint(java.awt.Graphics)>($r13);

        $i9 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconWidth()>();

        $i10 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconHeight()>();

        $r14 = virtualinvoke $r7.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>($i9, $i10, 3);

        r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _checkedImage> = $r14;

        $r15 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke $r15.<com.jidesoft.swing.TristateCheckBox: void setState(int)>(1);

        $r16 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $i11 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconWidth()>();

        $i12 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconHeight()>();

        virtualinvoke $r16.<com.jidesoft.swing.TristateCheckBox: void setBounds(int,int,int,int)>(0, 0, $i11, $i12);

        $r18 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $r17 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _checkedImage>;

        $r19 = virtualinvoke $r17.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke $r18.<com.jidesoft.swing.TristateCheckBox: void paint(java.awt.Graphics)>($r19);

        $i13 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconWidth()>();

        $i14 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconHeight()>();

        $r20 = virtualinvoke $r7.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>($i13, $i14, 3);

        r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _mixedImage> = $r20;

        $r21 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        virtualinvoke $r21.<com.jidesoft.swing.TristateCheckBox: void setState(int)>(2);

        $r22 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $i15 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconWidth()>();

        $i16 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getIconHeight()>();

        virtualinvoke $r22.<com.jidesoft.swing.TristateCheckBox: void setBounds(int,int,int,int)>(0, 0, $i15, $i16);

        $r24 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $r23 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _mixedImage>;

        $r25 = virtualinvoke $r23.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke $r24.<com.jidesoft.swing.TristateCheckBox: void paint(java.awt.Graphics)>($r25);

     label1:
        $i0 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getState()>();

        if $i0 != 1 goto label2;

        $r5 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _checkedImage>;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r5, i3, i4, null);

        goto label4;

     label2:
        $i1 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getState()>();

        if $i1 != 0 goto label3;

        $r4 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _uncheckImage>;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r4, i3, i4, null);

        goto label4;

     label3:
        $i2 = virtualinvoke r0.<com.jidesoft.icons.CheckBoxIcon: int getState()>();

        if $i2 != 2 goto label4;

        $r3 = r0.<com.jidesoft.icons.CheckBoxIcon: java.awt.image.BufferedImage _mixedImage>;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r3, i3, i4, null);

     label4:
        return;
    }

    public int getIconWidth()
    {
        java.awt.Dimension $r2;
        com.jidesoft.icons.CheckBoxIcon r0;
        com.jidesoft.swing.TristateCheckBox $r1;
        int $i0;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        specialinvoke r0.<com.jidesoft.icons.CheckBoxIcon: void validateCheckBox()>();

        $r1 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.TristateCheckBox: java.awt.Dimension getPreferredSize()>();

        $i0 = $r2.<java.awt.Dimension: int width>;

        return $i0;
    }

    public int getIconHeight()
    {
        java.awt.Dimension $r2;
        com.jidesoft.icons.CheckBoxIcon r0;
        com.jidesoft.swing.TristateCheckBox $r1;
        int $i0;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        specialinvoke r0.<com.jidesoft.icons.CheckBoxIcon: void validateCheckBox()>();

        $r1 = r0.<com.jidesoft.icons.CheckBoxIcon: com.jidesoft.swing.TristateCheckBox _checkBox>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.TristateCheckBox: java.awt.Dimension getPreferredSize()>();

        $i0 = $r2.<java.awt.Dimension: int height>;

        return $i0;
    }

    public void setState(int)
    {
        int i0;
        com.jidesoft.icons.CheckBoxIcon r0;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        i0 := @parameter0: int;

        r0.<com.jidesoft.icons.CheckBoxIcon: int _state> = i0;

        return;
    }

    public int getState()
    {
        int $i0;
        com.jidesoft.icons.CheckBoxIcon r0;

        r0 := @this: com.jidesoft.icons.CheckBoxIcon;

        $i0 = r0.<com.jidesoft.icons.CheckBoxIcon: int _state>;

        return $i0;
    }
}
