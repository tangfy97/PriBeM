public class com.jidesoft.plaf.xerto.SlidingFrameBorder extends java.lang.Object implements javax.swing.border.Border, javax.swing.plaf.UIResource
{
    public static final int SHADOW_SIZE;
    protected java.awt.Color _highlight;
    protected java.awt.Color _lightHighlight;
    protected java.awt.Color _shadow;
    protected java.awt.Color _darkShadow;
    protected java.awt.Insets _insets;
    private static double LOG10;

    public void <init>(java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Insets)
    {
        java.awt.Color r1, r2, r3, r4;
        com.jidesoft.plaf.xerto.SlidingFrameBorder r0;
        java.awt.Insets r5;

        r0 := @this: com.jidesoft.plaf.xerto.SlidingFrameBorder;

        r1 := @parameter0: java.awt.Color;

        r2 := @parameter1: java.awt.Color;

        r3 := @parameter2: java.awt.Color;

        r4 := @parameter3: java.awt.Color;

        r5 := @parameter4: java.awt.Insets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight> = r1;

        r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _lightHighlight> = r2;

        r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _shadow> = r3;

        r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _darkShadow> = r4;

        r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets> = r5;

        return;
    }

    public java.awt.Insets getBorderInsets(java.awt.Component)
    {
        com.jidesoft.plaf.xerto.SlidingFrameBorder r0;
        java.awt.Insets $r1;
        java.awt.Component r2;

        r0 := @this: com.jidesoft.plaf.xerto.SlidingFrameBorder;

        r2 := @parameter0: java.awt.Component;

        $r1 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        return $r1;
    }

    public boolean isBorderOpaque()
    {
        com.jidesoft.plaf.xerto.SlidingFrameBorder r0;

        r0 := @this: com.jidesoft.plaf.xerto.SlidingFrameBorder;

        return 1;
    }

    public void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int)
    {
        java.awt.Color $r6, $r8, $r13, $r16, $r22, $r24, $r29, $r32, $r38, $r41, $r44, $r47, $r54, $r57, $r60, $r63;
        java.awt.Insets $r1, $r2, $r3, $r4, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r25, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r37, $r39, $r40, $r42, $r43, $r45, $r46, $r48, $r49, $r50, $r51, $r53, $r55, $r56, $r58, $r59, $r61, $r62, $r64, $r65, $r66, $r67, $r69;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166;
        java.awt.Component r70;
        com.jidesoft.plaf.xerto.SlidingFrameBorder r0;
        java.awt.Graphics r5;
        java.awt.Rectangle $r19, $r35, $r52, $r68;

        r0 := @this: com.jidesoft.plaf.xerto.SlidingFrameBorder;

        r70 := @parameter0: java.awt.Component;

        r5 := @parameter1: java.awt.Graphics;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        i6 := @parameter4: int;

        i8 := @parameter5: int;

        $r1 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i0 = $r1.<java.awt.Insets: int top>;

        if $i0 < 10 goto label1;

        $r54 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r54);

        $r55 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i131 = $r55.<java.awt.Insets: int top>;

        $i132 = i5 + $i131;

        $i136 = $i132 - 1;

        $r56 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i133 = $r56.<java.awt.Insets: int top>;

        $i134 = i8 - $i133;

        $i135 = $i134 + 1;

        virtualinvoke r5.<java.awt.Graphics: void drawRect(int,int,int,int)>(i4, $i136, i6, $i135);

        $r57 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r57);

        $r58 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i137 = $r58.<java.awt.Insets: int top>;

        $i138 = i5 + $i137;

        $i143 = $i138 - 5;

        $i142 = i4 + i6;

        $r59 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i139 = $r59.<java.awt.Insets: int top>;

        $i140 = i5 + $i139;

        $i141 = $i140 - 5;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i143, $i142, $i141);

        $r60 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _lightHighlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r60);

        $r61 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i144 = $r61.<java.awt.Insets: int top>;

        $i145 = i5 + $i144;

        $i150 = $i145 - 4;

        $i149 = i4 + i6;

        $r62 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i146 = $r62.<java.awt.Insets: int top>;

        $i147 = i5 + $i146;

        $i148 = $i147 - 4;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i150, $i149, $i148);

        $r63 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r63);

        $r64 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i151 = $r64.<java.awt.Insets: int top>;

        $i152 = i5 + $i151;

        $i157 = $i152 - 3;

        $i156 = i4 + i6;

        $r65 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i153 = $r65.<java.awt.Insets: int top>;

        $i154 = i5 + $i153;

        $i155 = $i154 - 3;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i157, $i156, $i155);

        $r66 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i158 = $r66.<java.awt.Insets: int top>;

        $i159 = i5 + $i158;

        $i164 = $i159 - 2;

        $i163 = i4 + i6;

        $r67 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i160 = $r67.<java.awt.Insets: int top>;

        $i161 = i5 + $i160;

        $i162 = $i161 - 2;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i164, $i163, $i162);

        $r68 = new java.awt.Rectangle;

        $r69 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i165 = $r69.<java.awt.Insets: int top>;

        $i166 = $i165 - 5;

        specialinvoke $r68.<java.awt.Rectangle: void <init>(int,int,int,int)>(i4, i5, i6, $i166);

        staticinvoke <com.jidesoft.plaf.xerto.SlidingFrameBorder: void paintGradient(java.awt.Graphics,java.awt.Rectangle,boolean,int,boolean)>(r5, $r68, 1, 40, 0);

     label1:
        $r2 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i1 = $r2.<java.awt.Insets: int left>;

        if $i1 < 10 goto label2;

        $r38 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r38);

        $r39 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i96 = $r39.<java.awt.Insets: int left>;

        $i97 = i4 + $i96;

        $i100 = $i97 - 1;

        $r40 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i98 = $r40.<java.awt.Insets: int left>;

        $i99 = i6 - $i98;

        virtualinvoke r5.<java.awt.Graphics: void drawRect(int,int,int,int)>($i100, i5, $i99, i8);

        $r41 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r41);

        $r42 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i101 = $r42.<java.awt.Insets: int left>;

        $i102 = i4 + $i101;

        $i107 = $i102 - 5;

        $r43 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i103 = $r43.<java.awt.Insets: int left>;

        $i104 = i4 + $i103;

        $i106 = $i104 - 5;

        $i105 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i107, i5, $i106, $i105);

        $r44 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _lightHighlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r44);

        $r45 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i108 = $r45.<java.awt.Insets: int left>;

        $i109 = i4 + $i108;

        $i114 = $i109 - 4;

        $r46 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i110 = $r46.<java.awt.Insets: int left>;

        $i111 = i4 + $i110;

        $i113 = $i111 - 4;

        $i112 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i114, i5, $i113, $i112);

        $r47 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r47);

        $r48 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i115 = $r48.<java.awt.Insets: int left>;

        $i116 = i4 + $i115;

        $i121 = $i116 - 3;

        $r49 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i117 = $r49.<java.awt.Insets: int left>;

        $i118 = i4 + $i117;

        $i120 = $i118 - 3;

        $i119 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i121, i5, $i120, $i119);

        $r50 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i122 = $r50.<java.awt.Insets: int left>;

        $i123 = i4 + $i122;

        $i128 = $i123 - 2;

        $r51 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i124 = $r51.<java.awt.Insets: int left>;

        $i125 = i4 + $i124;

        $i127 = $i125 - 2;

        $i126 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i128, i5, $i127, $i126);

        $r52 = new java.awt.Rectangle;

        $r53 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i129 = $r53.<java.awt.Insets: int left>;

        $i130 = $i129 - 5;

        specialinvoke $r52.<java.awt.Rectangle: void <init>(int,int,int,int)>(i4, i5, $i130, i8);

        staticinvoke <com.jidesoft.plaf.xerto.SlidingFrameBorder: void paintGradient(java.awt.Graphics,java.awt.Rectangle,boolean,int,boolean)>(r5, $r52, 0, 40, 0);

     label2:
        $r3 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i2 = $r3.<java.awt.Insets: int bottom>;

        if $i2 < 10 goto label3;

        $r22 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r22);

        $r23 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i52 = $r23.<java.awt.Insets: int bottom>;

        $i53 = i8 - $i52;

        virtualinvoke r5.<java.awt.Graphics: void drawRect(int,int,int,int)>(i4, i5, i6, $i53);

        $r24 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r24);

        $i55 = i5 + i8;

        $r25 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i54 = $r25.<java.awt.Insets: int bottom>;

        $i56 = $i55 - $i54;

        $i62 = $i56 + 1;

        $i61 = i4 + i6;

        $i58 = i5 + i8;

        $r26 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i57 = $r26.<java.awt.Insets: int bottom>;

        $i59 = $i58 - $i57;

        $i60 = $i59 + 1;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i62, $i61, $i60);

        $i64 = i5 + i8;

        $r27 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i63 = $r27.<java.awt.Insets: int bottom>;

        $i65 = $i64 - $i63;

        $i71 = $i65 + 2;

        $i70 = i4 + i6;

        $i67 = i5 + i8;

        $r28 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i66 = $r28.<java.awt.Insets: int bottom>;

        $i68 = $i67 - $i66;

        $i69 = $i68 + 2;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i71, $i70, $i69);

        $r29 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _shadow>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r29);

        $i73 = i5 + i8;

        $r30 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i72 = $r30.<java.awt.Insets: int bottom>;

        $i74 = $i73 - $i72;

        $i80 = $i74 + 3;

        $i79 = i4 + i6;

        $i76 = i5 + i8;

        $r31 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i75 = $r31.<java.awt.Insets: int bottom>;

        $i77 = $i76 - $i75;

        $i78 = $i77 + 3;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i80, $i79, $i78);

        $r32 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _darkShadow>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r32);

        $i82 = i5 + i8;

        $r33 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i81 = $r33.<java.awt.Insets: int bottom>;

        $i83 = $i82 - $i81;

        $i89 = $i83 + 4;

        $i88 = i4 + i6;

        $i85 = i5 + i8;

        $r34 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i84 = $r34.<java.awt.Insets: int bottom>;

        $i86 = $i85 - $i84;

        $i87 = $i86 + 4;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>(i4, $i89, $i88, $i87);

        $r35 = new java.awt.Rectangle;

        $i91 = i5 + i8;

        $r36 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i90 = $r36.<java.awt.Insets: int bottom>;

        $i92 = $i91 - $i90;

        $i95 = $i92 + 4;

        $r37 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i93 = $r37.<java.awt.Insets: int bottom>;

        $i94 = $i93 - 5;

        specialinvoke $r35.<java.awt.Rectangle: void <init>(int,int,int,int)>(i4, $i95, i6, $i94);

        staticinvoke <com.jidesoft.plaf.xerto.SlidingFrameBorder: void paintGradient(java.awt.Graphics,java.awt.Rectangle,boolean,int,boolean)>(r5, $r35, 1, 100, 1);

     label3:
        $r4 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i3 = $r4.<java.awt.Insets: int right>;

        if $i3 < 10 goto label4;

        $r6 = staticinvoke <com.jidesoft.plaf.xerto.XertoUtils: java.awt.Color getFrameBorderColor()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $r7 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i7 = $r7.<java.awt.Insets: int right>;

        $i9 = i6 - $i7;

        virtualinvoke r5.<java.awt.Graphics: void drawRect(int,int,int,int)>(i4, i5, $i9, i8);

        $r8 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _highlight>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r8);

        $i11 = i4 + i6;

        $r9 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i10 = $r9.<java.awt.Insets: int right>;

        $i12 = $i11 - $i10;

        $i18 = $i12 + 1;

        $i14 = i4 + i6;

        $r10 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i13 = $r10.<java.awt.Insets: int right>;

        $i15 = $i14 - $i13;

        $i17 = $i15 + 1;

        $i16 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i18, i5, $i17, $i16);

        $i20 = i4 + i6;

        $r11 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i19 = $r11.<java.awt.Insets: int right>;

        $i21 = $i20 - $i19;

        $i27 = $i21 + 2;

        $i23 = i4 + i6;

        $r12 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i22 = $r12.<java.awt.Insets: int right>;

        $i24 = $i23 - $i22;

        $i26 = $i24 + 2;

        $i25 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i27, i5, $i26, $i25);

        $r13 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _shadow>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r13);

        $i29 = i4 + i6;

        $r14 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i28 = $r14.<java.awt.Insets: int right>;

        $i30 = $i29 - $i28;

        $i36 = $i30 + 3;

        $i32 = i4 + i6;

        $r15 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i31 = $r15.<java.awt.Insets: int right>;

        $i33 = $i32 - $i31;

        $i35 = $i33 + 3;

        $i34 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i36, i5, $i35, $i34);

        $r16 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Color _darkShadow>;

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r16);

        $i38 = i4 + i6;

        $r17 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i37 = $r17.<java.awt.Insets: int right>;

        $i39 = $i38 - $i37;

        $i45 = $i39 + 4;

        $i41 = i4 + i6;

        $r18 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i40 = $r18.<java.awt.Insets: int right>;

        $i42 = $i41 - $i40;

        $i44 = $i42 + 4;

        $i43 = i5 + i8;

        virtualinvoke r5.<java.awt.Graphics: void drawLine(int,int,int,int)>($i45, i5, $i44, $i43);

        $r19 = new java.awt.Rectangle;

        $i47 = i4 + i6;

        $r20 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i46 = $r20.<java.awt.Insets: int right>;

        $i48 = $i47 - $i46;

        $i51 = $i48 + 4;

        $r21 = r0.<com.jidesoft.plaf.xerto.SlidingFrameBorder: java.awt.Insets _insets>;

        $i49 = $r21.<java.awt.Insets: int right>;

        $i50 = $i49 - 5;

        specialinvoke $r19.<java.awt.Rectangle: void <init>(int,int,int,int)>($i51, i5, $i50, i8);

        staticinvoke <com.jidesoft.plaf.xerto.SlidingFrameBorder: void paintGradient(java.awt.Graphics,java.awt.Rectangle,boolean,int,boolean)>(r5, $r19, 0, 100, 1);

     label4:
        return;
    }

    public static void paintGradient(java.awt.Graphics, java.awt.Rectangle, boolean, int, boolean)
    {
        java.awt.Color $r2, $r3;
        boolean z0, z1;
        java.awt.Graphics r1;
        java.awt.Rectangle r0;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, i44, i45, i46;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r1 := @parameter0: java.awt.Graphics;

        r0 := @parameter1: java.awt.Rectangle;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        z1 := @parameter4: boolean;

        if z0 == 0 goto label5;

        i43 = 1;

     label1:
        $i22 = r0.<java.awt.Rectangle: int height>;

        if i43 >= $i22 goto label4;

        $d7 = (double) i43;

        $d8 = staticinvoke <java.lang.Math: double log(double)>($d7);

        $d9 = <com.jidesoft.plaf.xerto.SlidingFrameBorder: double LOG10>;

        $d10 = $d8 / $d9;

        $d12 = 1.0 - $d10;

        $d11 = (double) i1;

        $d13 = $d12 * $d11;

        i44 = (int) $d13;

        $r3 = new java.awt.Color;

        specialinvoke $r3.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, i44);

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        if z1 == 0 goto label2;

        $i42 = r0.<java.awt.Rectangle: int x>;

        $i35 = r0.<java.awt.Rectangle: int y>;

        $i41 = $i35 + i43;

        $i37 = r0.<java.awt.Rectangle: int x>;

        $i36 = r0.<java.awt.Rectangle: int width>;

        $i40 = $i37 + $i36;

        $i38 = r0.<java.awt.Rectangle: int y>;

        $i39 = $i38 + i43;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i42, $i41, $i40, $i39);

        goto label3;

     label2:
        $i34 = r0.<java.awt.Rectangle: int x>;

        $i24 = r0.<java.awt.Rectangle: int y>;

        $i23 = r0.<java.awt.Rectangle: int height>;

        $i25 = $i24 + $i23;

        $i33 = $i25 - i43;

        $i27 = r0.<java.awt.Rectangle: int x>;

        $i26 = r0.<java.awt.Rectangle: int width>;

        $i32 = $i27 + $i26;

        $i29 = r0.<java.awt.Rectangle: int y>;

        $i28 = r0.<java.awt.Rectangle: int height>;

        $i30 = $i29 + $i28;

        $i31 = $i30 - i43;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i34, $i33, $i32, $i31);

     label3:
        i43 = i43 + 1;

        goto label1;

     label4:
        goto label9;

     label5:
        i45 = 1;

     label6:
        $i0 = r0.<java.awt.Rectangle: int width>;

        if i45 >= $i0 goto label9;

        $d0 = (double) i45;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = <com.jidesoft.plaf.xerto.SlidingFrameBorder: double LOG10>;

        $d3 = $d1 / $d2;

        $d5 = 1.0 - $d3;

        $d4 = (double) i1;

        $d6 = $d5 * $d4;

        i46 = (int) $d6;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, i46);

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        if z1 == 0 goto label7;

        $i14 = r0.<java.awt.Rectangle: int x>;

        $i21 = $i14 + i45;

        $i20 = r0.<java.awt.Rectangle: int y>;

        $i15 = r0.<java.awt.Rectangle: int x>;

        $i19 = $i15 + i45;

        $i17 = r0.<java.awt.Rectangle: int y>;

        $i16 = r0.<java.awt.Rectangle: int height>;

        $i18 = $i17 + $i16;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i21, $i20, $i19, $i18);

        goto label8;

     label7:
        $i3 = r0.<java.awt.Rectangle: int x>;

        $i2 = r0.<java.awt.Rectangle: int width>;

        $i4 = $i3 + $i2;

        $i13 = $i4 - i45;

        $i12 = r0.<java.awt.Rectangle: int y>;

        $i6 = r0.<java.awt.Rectangle: int x>;

        $i5 = r0.<java.awt.Rectangle: int width>;

        $i7 = $i6 + $i5;

        $i11 = $i7 - i45;

        $i9 = r0.<java.awt.Rectangle: int y>;

        $i8 = r0.<java.awt.Rectangle: int height>;

        $i10 = $i9 + $i8;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i13, $i12, $i11, $i10);

     label8:
        i45 = i45 + 1;

        goto label6;

     label9:
        return;
    }

    static void <clinit>()
    {
        double $d0;

        <com.jidesoft.plaf.xerto.SlidingFrameBorder: int SHADOW_SIZE> = 10;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        <com.jidesoft.plaf.xerto.SlidingFrameBorder: double LOG10> = $d0;

        return;
    }
}
