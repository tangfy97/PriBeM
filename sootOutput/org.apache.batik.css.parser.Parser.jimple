public class org.apache.batik.css.parser.Parser extends java.lang.Object implements org.apache.batik.css.parser.ExtendedParser, org.apache.batik.i18n.Localizable
{
    public static final java.lang.String BUNDLE_CLASSNAME;
    protected org.apache.batik.i18n.LocalizableSupport localizableSupport;
    protected org.apache.batik.css.parser.Scanner scanner;
    protected int current;
    protected org.w3c.css.sac.DocumentHandler documentHandler;
    protected org.w3c.css.sac.SelectorFactory selectorFactory;
    protected org.w3c.css.sac.ConditionFactory conditionFactory;
    protected org.w3c.css.sac.ErrorHandler errorHandler;
    protected java.lang.String pseudoElement;
    protected java.lang.String documentURI;
    static java.lang.Class class$org$apache$batik$css$parser$Parser;

    public void <init>()
    {
        org.w3c.css.sac.ErrorHandler $r7;
        org.w3c.css.sac.DocumentHandler $r4;
        org.apache.batik.css.parser.Parser r0;
        org.apache.batik.i18n.LocalizableSupport $r1;
        org.w3c.css.sac.ConditionFactory $r6;
        java.lang.Class $r2, $r8;
        java.lang.ClassLoader $r3;
        org.w3c.css.sac.SelectorFactory $r5;

        r0 := @this: org.apache.batik.css.parser.Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = <org.apache.batik.css.parser.Parser: java.lang.Class class$org$apache$batik$css$parser$Parser>;

        if $r2 != null goto label1;

        $r8 = staticinvoke <org.apache.batik.css.parser.Parser: java.lang.Class class$(java.lang.String)>("org.apache.batik.css.parser.Parser");

        <org.apache.batik.css.parser.Parser: java.lang.Class class$org$apache$batik$css$parser$Parser> = $r8;

        goto label2;

     label1:
        $r8 = <org.apache.batik.css.parser.Parser: java.lang.Class class$org$apache$batik$css$parser$Parser>;

     label2:
        $r3 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.css.parser.resources.Messages", $r3);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        $r4 = <org.apache.batik.css.parser.DefaultDocumentHandler: org.w3c.css.sac.DocumentHandler INSTANCE>;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler> = $r4;

        $r5 = <org.apache.batik.css.parser.DefaultSelectorFactory: org.w3c.css.sac.SelectorFactory INSTANCE>;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory> = $r5;

        $r6 = <org.apache.batik.css.parser.DefaultConditionFactory: org.w3c.css.sac.ConditionFactory INSTANCE>;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory> = $r6;

        $r7 = <org.apache.batik.css.parser.DefaultErrorHandler: org.w3c.css.sac.ErrorHandler INSTANCE>;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ErrorHandler errorHandler> = $r7;

        return;
    }

    public java.lang.String getParserVersion()
    {
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        return "http://www.w3.org/TR/REC-CSS2";
    }

    public void setLocale(java.util.Locale) throws org.w3c.css.sac.CSSException
    {
        org.apache.batik.css.parser.Parser r0;
        java.util.Locale r1;
        org.apache.batik.i18n.LocalizableSupport $r2;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        virtualinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.batik.css.parser.Parser r0;
        java.util.Locale $r2;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r2 = virtualinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: java.util.Locale getLocale()>();

        return $r2;
    }

    public java.lang.String formatMessage(java.lang.String, java.lang.Object[]) throws java.util.MissingResourceException
    {
        java.lang.Object[] r2;
        java.lang.String r1, $r4;
        org.apache.batik.css.parser.Parser r0;
        org.apache.batik.i18n.LocalizableSupport $r3;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r4 = virtualinvoke $r3.<org.apache.batik.i18n.LocalizableSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    public void setDocumentHandler(org.w3c.css.sac.DocumentHandler)
    {
        org.w3c.css.sac.DocumentHandler r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.DocumentHandler;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler> = r1;

        return;
    }

    public void setSelectorFactory(org.w3c.css.sac.SelectorFactory)
    {
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.SelectorFactory r1;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.SelectorFactory;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory> = r1;

        return;
    }

    public void setConditionFactory(org.w3c.css.sac.ConditionFactory)
    {
        org.w3c.css.sac.ConditionFactory r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.ConditionFactory;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory> = r1;

        return;
    }

    public void setErrorHandler(org.w3c.css.sac.ErrorHandler)
    {
        org.w3c.css.sac.ErrorHandler r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.ErrorHandler;

        r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ErrorHandler errorHandler> = r1;

        return;
    }

    public void parseStyleSheet(org.w3c.css.sac.InputSource) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        java.lang.Throwable $r9;
        org.apache.batik.css.parser.Scanner $r2, $r4, $r6;
        org.w3c.css.sac.DocumentHandler $r3, $r5, $r7, $r10;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r8;
        org.w3c.css.sac.InputSource r1;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r2;

     label01:
        $r3 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r3.<org.w3c.css.sac.DocumentHandler: void startDocument(org.w3c.css.sac.InputSource)>(r1);

        $r4 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $i0 = virtualinvoke $r4.<org.apache.batik.css.parser.Scanner: int next()>();

        r0.<org.apache.batik.css.parser.Parser: int current> = $i0;

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i1)
        {
            case 18: goto label05;
            case 30: goto label02;
            default: goto label06;
        };

     label02:
        $i2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        if $i2 == 19 goto label03;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("charset.string");

        goto label06;

     label03:
        $i3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        if $i3 == 8 goto label04;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("semicolon");

     label04:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label06;

     label05:
        $r7 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        $r6 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r8 = virtualinvoke $r6.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        interfaceinvoke $r7.<org.w3c.css.sac.DocumentHandler: void comment(java.lang.String)>($r8);

     label06:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int skipSpacesAndCDOCDC()>();

        goto label07;

     label07:
        $i4 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i4 != 28 goto label08;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseImportRule()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label07;

     label08:
        $i5 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i5)
        {
            case 0: goto label13;
            case 29: goto label12;
            case 31: goto label11;
            case 32: goto label10;
            case 33: goto label09;
            default: goto label14;
        };

     label09:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parsePageRule()>();

        goto label15;

     label10:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseMediaRule()>();

        goto label15;

     label11:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseFontFaceRule()>();

        goto label15;

     label12:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseAtRule()>();

        goto label15;

     label13:
        goto label16;

     label14:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseRuleSet()>();

     label15:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int skipSpacesAndCDOCDC()>();

        goto label08;

     label16:
        goto label21;

     label17:
        goto label20;

     label18:
        $r9 := @caughtexception;

        goto label22;

     label19:
        throw $r9;

     label20:
        return;

     label21:
        $r5 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r5.<org.w3c.css.sac.DocumentHandler: void endDocument(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        goto label17;

     label22:
        $r10 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r10.<org.w3c.css.sac.DocumentHandler: void endDocument(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        goto label19;

        catch java.lang.Throwable from label01 to label18 with label18;
    }

    public void parseStyleSheet(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.w3c.css.sac.InputSource $r1;
        java.lang.String r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.w3c.css.sac.InputSource;

        specialinvoke $r1.<org.w3c.css.sac.InputSource: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleSheet(org.w3c.css.sac.InputSource)>($r1);

        return;
    }

    public void parseStyleDeclaration(org.w3c.css.sac.InputSource) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.w3c.css.sac.InputSource r1;
        org.apache.batik.css.parser.Scanner $r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r2;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleDeclarationInternal()>();

        return;
    }

    protected void parseStyleDeclarationInternal() throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        java.lang.Throwable $r1;
        org.w3c.css.sac.CSSParseException $r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label01:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleDeclaration(boolean)>(0);

     label02:
        goto label09;

     label03:
        goto label08;

     label04:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r2);

        goto label10;

     label05:
        goto label08;

     label06:
        $r1 := @caughtexception;

        goto label11;

     label07:
        throw $r1;

     label08:
        return;

     label09:
        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        goto label03;

     label10:
        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        goto label05;

     label11:
        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        goto label07;

        catch org.w3c.css.sac.CSSParseException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label06 with label06;
    }

    public void parseRule(org.w3c.css.sac.InputSource) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.w3c.css.sac.InputSource r1;
        org.apache.batik.css.parser.Scanner $r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r2;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseRuleInternal()>();

        return;
    }

    protected void parseRuleInternal() throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseRule()>();

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        return;
    }

    public org.w3c.css.sac.SelectorList parseSelectors(org.w3c.css.sac.InputSource) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Scanner $r2;
        org.w3c.css.sac.SelectorList $r3;
        org.w3c.css.sac.InputSource r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r2;

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorList parseSelectorsInternal()>();

        return $r3;
    }

    protected org.w3c.css.sac.SelectorList parseSelectorsInternal() throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.w3c.css.sac.SelectorList $r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorList parseSelectorList()>();

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        return $r1;
    }

    public org.w3c.css.sac.LexicalUnit parsePropertyValue(org.w3c.css.sac.InputSource) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Scanner $r2;
        org.w3c.css.sac.LexicalUnit $r3;
        org.w3c.css.sac.InputSource r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r2;

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parsePropertyValueInternal()>();

        return $r3;
    }

    protected org.w3c.css.sac.LexicalUnit parsePropertyValueInternal() throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.w3c.css.sac.ErrorHandler $r2;
        org.w3c.css.sac.LexicalUnit $r1;
        int $i0;
        org.w3c.css.sac.CSSParseException $r3, r4;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseExpression(boolean)>(0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r3);

        throw $r3;

     label4:
        r4 = null;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 == 0 goto label5;

        r4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("eof.expected");

     label5:
        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        if r4 == null goto label6;

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ErrorHandler errorHandler>;

        interfaceinvoke $r2.<org.w3c.css.sac.ErrorHandler: void fatalError(org.w3c.css.sac.CSSParseException)>(r4);

     label6:
        return $r1;

        catch org.w3c.css.sac.CSSParseException from label1 to label2 with label3;
    }

    public boolean parsePriority(org.w3c.css.sac.InputSource) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Scanner $r2;
        org.w3c.css.sac.InputSource r1;
        org.apache.batik.css.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)>(r1);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r2;

        $z0 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: boolean parsePriorityInternal()>();

        return $z0;
    }

    protected boolean parsePriorityInternal() throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = null;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 28: goto label2;
            default: goto label3;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = new java.lang.Integer;

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r2;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String,java.lang.Object[])>("token", $r1);

        return 0;
    }

    protected void parseRule()
    {
        int $i0;
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $i0 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: int getType()>();

        tableswitch($i0)
        {
            case 28: goto label1;
            case 29: goto label2;
            case 30: goto label6;
            case 31: goto label3;
            case 32: goto label4;
            case 33: goto label5;
            default: goto label6;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseImportRule()>();

        goto label7;

     label2:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseAtRule()>();

        goto label7;

     label3:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseFontFaceRule()>();

        goto label7;

     label4:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseMediaRule()>();

        goto label7;

     label5:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parsePageRule()>();

        goto label7;

     label6:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseRuleSet()>();

     label7:
        return;
    }

    protected void parseAtRule()
    {
        org.apache.batik.css.parser.Scanner $r1, $r2;
        java.lang.String $r4;
        org.w3c.css.sac.DocumentHandler $r3;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: void scanAtRule()>();

        $r3 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r4 = virtualinvoke $r2.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        interfaceinvoke $r3.<org.w3c.css.sac.DocumentHandler: void ignorableAtRule(java.lang.String)>($r4);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        return;
    }

    protected void parseImportRule()
    {
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.CSSSACMediaList $r4, r5;
        org.w3c.css.sac.DocumentHandler $r3;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i0)
        {
            case 19: goto label2;
            case 51: goto label2;
            default: goto label1;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("string.or.uri");

        return;

     label2:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r2 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 == 20 goto label3;

        $r4 = new org.apache.batik.css.parser.CSSSACMediaList;

        specialinvoke $r4.<org.apache.batik.css.parser.CSSSACMediaList: void <init>()>();

        r5 = $r4;

        virtualinvoke $r4.<org.apache.batik.css.parser.CSSSACMediaList: void append(java.lang.String)>("all");

        goto label4;

     label3:
        r5 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.CSSSACMediaList parseMediaList()>();

     label4:
        $r3 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r3.<org.w3c.css.sac.DocumentHandler: void importStyle(java.lang.String,org.w3c.css.sac.SACMediaList,java.lang.String)>($r2, r5, null);

        $i2 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i2 == 8 goto label5;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("semicolon");

        goto label6;

     label5:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

     label6:
        return;
    }

    protected org.apache.batik.css.parser.CSSSACMediaList parseMediaList()
    {
        org.apache.batik.css.parser.Scanner $r2, $r4;
        org.apache.batik.css.parser.CSSSACMediaList $r0;
        org.apache.batik.css.parser.Parser r1;
        int $i0, $i1;
        java.lang.String $r3, $r5;

        r1 := @this: org.apache.batik.css.parser.Parser;

        $r0 = new org.apache.batik.css.parser.CSSSACMediaList;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSSACMediaList: void <init>()>();

        $r2 = r1.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r3 = virtualinvoke $r2.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke $r0.<org.apache.batik.css.parser.CSSSACMediaList: void append(java.lang.String)>($r3);

        virtualinvoke r1.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label4;

     label1:
        virtualinvoke r1.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $i0 = r1.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i0)
        {
            case 20: goto label3;
            default: goto label2;
        };

     label2:
        virtualinvoke r1.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("identifier");

        goto label4;

     label3:
        $r4 = r1.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r5 = virtualinvoke $r4.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke $r0.<org.apache.batik.css.parser.CSSSACMediaList: void append(java.lang.String)>($r5);

        virtualinvoke r1.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label4:
        $i1 = r1.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 == 6 goto label1;

        return $r0;
    }

    protected void parseFontFaceRule()
    {
        java.lang.Throwable $r3;
        int $i0;
        org.w3c.css.sac.CSSParseException $r5;
        org.w3c.css.sac.DocumentHandler $r1, $r2, $r4;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

     label01:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r1.<org.w3c.css.sac.DocumentHandler: void startFontFace()>();

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 == 1 goto label02;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("left.curly.brace");

        goto label06;

     label02:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label03:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleDeclaration(boolean)>(1);

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r5);

     label06:
        goto label11;

     label07:
        goto label10;

     label08:
        $r3 := @caughtexception;

        goto label12;

     label09:
        throw $r3;

     label10:
        return;

     label11:
        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r2.<org.w3c.css.sac.DocumentHandler: void endFontFace()>();

        goto label07;

     label12:
        $r4 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r4.<org.w3c.css.sac.DocumentHandler: void endFontFace()>();

        goto label09;

        catch org.w3c.css.sac.CSSParseException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label08;
    }

    protected void parsePageRule()
    {
        java.lang.Throwable $r4;
        org.apache.batik.css.parser.Scanner $r2, $r3;
        org.w3c.css.sac.CSSParseException $r6;
        org.w3c.css.sac.DocumentHandler $r1, $r5, $r9;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String r7, r8;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r7 = null;

        r8 = null;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 != 20 goto label02;

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        r7 = virtualinvoke $r2.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 != 16 goto label02;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $i2 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i2 == 20 goto label01;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("identifier");

        return;

     label01:
        $r3 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        r8 = virtualinvoke $r3.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label02:
        $r9 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r9.<org.w3c.css.sac.DocumentHandler: void startPage(java.lang.String,java.lang.String)>(r7, r8);

        $i3 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i3 == 1 goto label03;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("left.curly.brace");

        goto label07;

     label03:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label04:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleDeclaration(boolean)>(1);

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r6);

     label07:
        goto label12;

     label08:
        goto label11;

     label09:
        $r4 := @caughtexception;

        goto label13;

     label10:
        throw $r4;

     label11:
        return;

     label12:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r1.<org.w3c.css.sac.DocumentHandler: void endPage(java.lang.String,java.lang.String)>(r7, r8);

        goto label08;

     label13:
        $r5 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r5.<org.w3c.css.sac.DocumentHandler: void endPage(java.lang.String,java.lang.String)>(r7, r8);

        goto label10;

        catch org.w3c.css.sac.CSSParseException from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label09 with label09;
    }

    protected void parseMediaRule()
    {
        java.lang.Throwable $r4;
        org.apache.batik.css.parser.CSSSACMediaList $r1;
        org.w3c.css.sac.DocumentHandler $r2, $r3, $r5;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 == 20 goto label01;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("identifier");

        return;

     label01:
        $r1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.CSSSACMediaList parseMediaList()>();

     label02:
        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r2.<org.w3c.css.sac.DocumentHandler: void startMedia(org.w3c.css.sac.SACMediaList)>($r1);

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 == 1 goto label03;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("left.curly.brace");

        goto label08;

     label03:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label04;

     label04:
        $i2 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i2)
        {
            case 0: goto label05;
            case 2: goto label05;
            default: goto label06;
        };

     label05:
        goto label07;

     label06:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseRuleSet()>();

        goto label04;

     label07:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label08:
        goto label13;

     label09:
        goto label12;

     label10:
        $r4 := @caughtexception;

        goto label14;

     label11:
        throw $r4;

     label12:
        return;

     label13:
        $r3 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r3.<org.w3c.css.sac.DocumentHandler: void endMedia(org.w3c.css.sac.SACMediaList)>($r1);

        goto label09;

     label14:
        $r5 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r5.<org.w3c.css.sac.DocumentHandler: void endMedia(org.w3c.css.sac.SACMediaList)>($r1);

        goto label11;

        catch java.lang.Throwable from label02 to label10 with label10;
    }

    protected void parseRuleSet()
    {
        java.lang.Throwable $r4;
        org.w3c.css.sac.SelectorList $r1;
        org.w3c.css.sac.CSSParseException $r6, $r7;
        org.w3c.css.sac.DocumentHandler $r2, $r3, $r5;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1;

        r0 := @this: org.apache.batik.css.parser.Parser;

     label01:
        $r1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorList parseSelectorList()>();

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r7);

        return;

     label04:
        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r2.<org.w3c.css.sac.DocumentHandler: void startSelector(org.w3c.css.sac.SelectorList)>($r1);

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 == 1 goto label05;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>("left.curly.brace");

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 != 2 goto label09;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label09;

     label05:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label06:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleDeclaration(boolean)>(1);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r6);

     label09:
        goto label14;

     label10:
        goto label13;

     label11:
        $r4 := @caughtexception;

        goto label15;

     label12:
        throw $r4;

     label13:
        return;

     label14:
        $r3 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r3.<org.w3c.css.sac.DocumentHandler: void endSelector(org.w3c.css.sac.SelectorList)>($r1);

        goto label10;

     label15:
        $r5 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r5.<org.w3c.css.sac.DocumentHandler: void endSelector(org.w3c.css.sac.SelectorList)>($r1);

        goto label12;

        catch org.w3c.css.sac.CSSParseException from label01 to label02 with label03;
        catch org.w3c.css.sac.CSSParseException from label06 to label07 with label08;
        catch java.lang.Throwable from label04 to label11 with label11;
    }

    protected org.w3c.css.sac.SelectorList parseSelectorList()
    {
        int $i0;
        org.w3c.css.sac.Selector $r2, $r3;
        org.apache.batik.css.parser.CSSSelectorList $r0;
        org.apache.batik.css.parser.Parser r1;

        r1 := @this: org.apache.batik.css.parser.Parser;

        $r0 = new org.apache.batik.css.parser.CSSSelectorList;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSSelectorList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.Selector parseSelector()>();

        virtualinvoke $r0.<org.apache.batik.css.parser.CSSSelectorList: void append(org.w3c.css.sac.Selector)>($r2);

        goto label1;

     label1:
        $i0 = r1.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 == 6 goto label2;

        return $r0;

     label2:
        virtualinvoke r1.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r3 = virtualinvoke r1.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.Selector parseSelector()>();

        virtualinvoke $r0.<org.apache.batik.css.parser.CSSSelectorList: void append(org.w3c.css.sac.Selector)>($r3);

        goto label1;
    }

    protected org.w3c.css.sac.Selector parseSelector()
    {
        org.w3c.css.sac.CSSParseException $r4, $r8, $r12;
        org.w3c.css.sac.ElementSelector $r17;
        org.w3c.css.sac.Selector r18;
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.SimpleSelector $r3, $r7, $r11;
        int $i0;
        java.lang.String $r1, $r5, $r9, $r13, $r14;
        org.w3c.css.sac.SelectorFactory $r2, $r6, $r10, $r15, $r16;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement> = null;

        r18 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SimpleSelector parseSimpleSelector()>();

        goto label01;

     label01:
        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        tableswitch($i0)
        {
            case 4: goto label05;
            case 5: goto label02;
            case 6: goto label02;
            case 7: goto label03;
            case 8: goto label02;
            case 9: goto label07;
            case 10: goto label02;
            case 11: goto label03;
            case 12: goto label02;
            case 13: goto label03;
            case 14: goto label02;
            case 15: goto label02;
            case 16: goto label03;
            case 17: goto label02;
            case 18: goto label02;
            case 19: goto label02;
            case 20: goto label03;
            case 21: goto label02;
            case 22: goto label02;
            case 23: goto label02;
            case 24: goto label02;
            case 25: goto label02;
            case 26: goto label02;
            case 27: goto label03;
            default: goto label02;
        };

     label02:
        goto label09;

     label03:
        $r5 = r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement>;

        if $r5 == null goto label04;

        $r8 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("pseudo.element.position");

        throw $r8;

     label04:
        $r6 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        $r7 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SimpleSelector parseSimpleSelector()>();

        r18 = interfaceinvoke $r6.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.DescendantSelector createDescendantSelector(org.w3c.css.sac.Selector,org.w3c.css.sac.SimpleSelector)>(r18, $r7);

        goto label01;

     label05:
        $r9 = r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement>;

        if $r9 == null goto label06;

        $r12 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("pseudo.element.position");

        throw $r12;

     label06:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r10 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        $r11 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SimpleSelector parseSimpleSelector()>();

        r18 = interfaceinvoke $r10.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.SiblingSelector createDirectAdjacentSelector(short,org.w3c.css.sac.Selector,org.w3c.css.sac.SimpleSelector)>(1, r18, $r11);

        goto label01;

     label07:
        $r1 = r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement>;

        if $r1 == null goto label08;

        $r4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("pseudo.element.position");

        throw $r4;

     label08:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SimpleSelector parseSimpleSelector()>();

        r18 = interfaceinvoke $r2.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.DescendantSelector createChildSelector(org.w3c.css.sac.Selector,org.w3c.css.sac.SimpleSelector)>(r18, $r3);

        goto label01;

     label09:
        $r13 = r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement>;

        if $r13 == null goto label10;

        $r16 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        $r15 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        $r14 = r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement>;

        $r17 = interfaceinvoke $r15.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.ElementSelector createPseudoElementSelector(java.lang.String,java.lang.String)>(null, $r14);

        r18 = interfaceinvoke $r16.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.DescendantSelector createChildSelector(org.w3c.css.sac.Selector,org.w3c.css.sac.SimpleSelector)>(r18, $r17);

     label10:
        return r18;
    }

    protected org.w3c.css.sac.SimpleSelector parseSimpleSelector()
    {
        org.w3c.css.sac.CSSParseException $r13, $r14, $r15, $r20, $r21, $r30, $r31, $r32, $r33, $r37;
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.Condition r41, r42;
        boolean $z0, $z1;
        org.w3c.css.sac.ConditionFactory $r5, $r7, $r12, $r18, $r24, $r27, $r28, $r29, $r35;
        org.apache.batik.css.parser.Scanner $r1, $r4, $r8, $r10, $r16, $r22, $r25, $r34;
        org.w3c.css.sac.SimpleSelector r40;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r3, $r6, $r9, $r11, $r17, $r19, $r23, $r26, $r36;
        org.w3c.css.sac.SelectorFactory $r2, $r38, $r39;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i0)
        {
            case 13: goto label02;
            case 20: goto label01;
            default: goto label03;
        };

     label01:
        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r3 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        r40 = interfaceinvoke $r2.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.ElementSelector createElementSelector(java.lang.String,java.lang.String)>(null, $r3);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label04;

     label02:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

     label03:
        $r39 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        r40 = interfaceinvoke $r39.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.ElementSelector createElementSelector(java.lang.String,java.lang.String)>(null, null);

     label04:
        r41 = null;

        goto label05;

     label05:
        r42 = null;

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i1)
        {
            case 7: goto label07;
            case 11: goto label09;
            case 16: goto label20;
            case 27: goto label06;
            default: goto label30;
        };

     label06:
        $r5 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        $r4 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r6 = virtualinvoke $r4.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        r42 = interfaceinvoke $r5.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createIdCondition(java.lang.String)>($r6);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label31;

     label07:
        $i9 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        if $i9 == 20 goto label08;

        $r37 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("identifier");

        throw $r37;

     label08:
        $r35 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        $r34 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r36 = virtualinvoke $r34.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        r42 = interfaceinvoke $r35.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createClassCondition(java.lang.String,java.lang.String)>(null, $r36);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label31;

     label09:
        $i5 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        if $i5 == 20 goto label10;

        $r33 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("identifier");

        throw $r33;

     label10:
        $r22 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r23 = virtualinvoke $r22.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        $i6 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        lookupswitch($i6)
        {
            case 3: goto label13;
            case 12: goto label12;
            case 25: goto label13;
            case 26: goto label13;
            default: goto label11;
        };

     label11:
        $r32 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("right.bracket");

        throw $r32;

     label12:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r24 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r42 = interfaceinvoke $r24.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createAttributeCondition(java.lang.String,java.lang.String,boolean,java.lang.String)>($r23, null, 0, null);

        goto label31;

     label13:
        $i7 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        lookupswitch($i7)
        {
            case 19: goto label15;
            case 20: goto label15;
            default: goto label14;
        };

     label14:
        $r31 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("identifier.or.string");

        throw $r31;

     label15:
        $r25 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r26 = virtualinvoke $r25.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $i8 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i8 == 12 goto label16;

        $r30 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("right.bracket");

        throw $r30;

     label16:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        lookupswitch($i6)
        {
            case 3: goto label17;
            case 26: goto label18;
            default: goto label19;
        };

     label17:
        $r28 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r42 = interfaceinvoke $r28.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createAttributeCondition(java.lang.String,java.lang.String,boolean,java.lang.String)>($r23, null, 0, $r26);

        goto label31;

     label18:
        $r27 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r42 = interfaceinvoke $r27.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createOneOfAttributeCondition(java.lang.String,java.lang.String,boolean,java.lang.String)>($r23, null, 0, $r26);

        goto label31;

     label19:
        $r29 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r42 = interfaceinvoke $r29.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createBeginHyphenAttributeCondition(java.lang.String,java.lang.String,boolean,java.lang.String)>($r23, null, 0, $r26);

        goto label31;

     label20:
        $i2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        lookupswitch($i2)
        {
            case 20: goto label21;
            case 52: goto label25;
            default: goto label29;
        };

     label21:
        $r16 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r17 = virtualinvoke $r16.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        $z1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: boolean isPseudoElement(java.lang.String)>($r17);

        if $z1 == 0 goto label23;

        $r19 = r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement>;

        if $r19 == null goto label22;

        $r20 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("duplicate.pseudo.element");

        throw $r20;

     label22:
        r0.<org.apache.batik.css.parser.Parser: java.lang.String pseudoElement> = $r17;

        goto label24;

     label23:
        $r18 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r42 = interfaceinvoke $r18.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.AttributeCondition createPseudoClassCondition(java.lang.String,java.lang.String)>(null, $r17);

     label24:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label31;

     label25:
        $r8 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r9 = virtualinvoke $r8.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        $i3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        if $i3 == 20 goto label26;

        $r15 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("identifier");

        throw $r15;

     label26:
        $r10 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r11 = virtualinvoke $r10.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        $i4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        if $i4 == 15 goto label27;

        $r14 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("right.brace");

        throw $r14;

     label27:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("lang");

        if $z0 != 0 goto label28;

        $r13 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("pseudo.function");

        throw $r13;

     label28:
        $r12 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r42 = interfaceinvoke $r12.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.LangCondition createLangCondition(java.lang.String)>($r11);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label31;

     label29:
        $r21 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("identifier");

        throw $r21;

     label30:
        goto label34;

     label31:
        if r42 == null goto label33;

        if r41 != null goto label32;

        r41 = r42;

        goto label33;

     label32:
        $r7 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ConditionFactory conditionFactory>;

        r41 = interfaceinvoke $r7.<org.w3c.css.sac.ConditionFactory: org.w3c.css.sac.CombinatorCondition createAndCondition(org.w3c.css.sac.Condition,org.w3c.css.sac.Condition)>(r41, r42);

     label33:
        goto label05;

     label34:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int skipSpaces()>();

        if r41 == null goto label35;

        $r38 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorFactory selectorFactory>;

        r40 = interfaceinvoke $r38.<org.w3c.css.sac.SelectorFactory: org.w3c.css.sac.ConditionalSelector createConditionalSelector(org.w3c.css.sac.SimpleSelector,org.w3c.css.sac.Condition)>(r40, r41);

     label35:
        return r40;
    }

    protected boolean isPseudoElement(java.lang.String)
    {
        char $c0;
        org.apache.batik.css.parser.Parser r1;
        int $i1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.apache.batik.css.parser.Parser;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 65: goto label1;
            case 66: goto label2;
            case 70: goto label3;
            case 97: goto label1;
            case 98: goto label2;
            case 102: goto label3;
            default: goto label7;
        };

     label1:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("after");

        return $z3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("before");

        return $z2;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("first-letter");

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("first-line");

        if $z1 == 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;

     label7:
        return 0;
    }

    protected void parseStyleDeclaration(boolean) throws org.w3c.css.sac.CSSException
    {
        org.apache.batik.css.parser.Scanner $r1;
        org.w3c.css.sac.CSSParseException $r4, $r5, $r6, $r7, $r8;
        org.w3c.css.sac.DocumentHandler $r3;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2;
        org.w3c.css.sac.LexicalUnit r9;
        java.lang.String $r2;
        boolean z0, z1;

        r0 := @this: org.apache.batik.css.parser.Parser;

        z0 := @parameter0: boolean;

        goto label01;

     label01:
        $i2 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i2)
        {
            case 0: goto label02;
            case 2: goto label04;
            case 8: goto label06;
            case 20: goto label08;
            default: goto label07;
        };

     label02:
        if z0 == 0 goto label03;

        $r6 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("eof");

        throw $r6;

     label03:
        return;

     label04:
        if z0 != 0 goto label05;

        $r5 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("eof.expected");

        throw $r5;

     label05:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        return;

     label06:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label01;

     label07:
        $r7 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("identifier");

        throw $r7;

     label08:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r2 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        $i0 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        if $i0 == 16 goto label09;

        $r4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("colon");

        throw $r4;

     label09:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        r9 = null;

     label10:
        r9 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseExpression(boolean)>(0);

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r8);

     label13:
        if r9 == null goto label15;

        z1 = 0;

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 != 23 goto label14;

        z1 = 1;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label14:
        $r3 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        interfaceinvoke $r3.<org.w3c.css.sac.DocumentHandler: void property(java.lang.String,org.w3c.css.sac.LexicalUnit,boolean)>($r2, r9, z1);

     label15:
        goto label01;

        catch org.w3c.css.sac.CSSParseException from label10 to label11 with label12;
    }

    protected org.w3c.css.sac.LexicalUnit parseExpression(boolean)
    {
        java.lang.Object[] $r2, $r5;
        org.w3c.css.sac.CSSParseException $r4, $r7;
        java.lang.Integer $r3, $r6;
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.LexicalUnit $r1, r8;
        int $i0, $i1, $i2, $i3, $i4;
        boolean z0, z1, z2, z3;

        r0 := @this: org.apache.batik.css.parser.Parser;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseTerm(org.w3c.css.sac.LexicalUnit)>(null);

        r8 = $r1;

        goto label01;

     label01:
        z1 = 0;

        z3 = 0;

        z2 = 0;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i0)
        {
            case 6: goto label02;
            case 10: goto label03;
            default: goto label04;
        };

     label02:
        z1 = 1;

        z3 = 1;

        z2 = 1;

        r8 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(0, r8);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label04;

     label03:
        z1 = 1;

        z3 = 1;

        z2 = 1;

        r8 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(4, r8);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

     label04:
        if z0 == 0 goto label07;

        $i3 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i3 != 15 goto label06;

        if z2 == 0 goto label05;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.Integer;

        $i4 = r0.<org.apache.batik.css.parser.Parser: int current>;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i4);

        $r5[0] = $r6;

        $r7 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("token", $r5);

        throw $r7;

     label05:
        return $r1;

     label06:
        r8 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseTerm(org.w3c.css.sac.LexicalUnit)>(r8);

        goto label11;

     label07:
        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i1)
        {
            case 0: goto label08;
            case 2: goto label08;
            case 8: goto label08;
            case 23: goto label08;
            default: goto label10;
        };

     label08:
        if z3 == 0 goto label09;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = new java.lang.Integer;

        $i2 = r0.<org.apache.batik.css.parser.Parser: int current>;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("token", $r2);

        throw $r4;

     label09:
        return $r1;

     label10:
        r8 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseTerm(org.w3c.css.sac.LexicalUnit)>(r8);

     label11:
        goto label01;
    }

    protected org.w3c.css.sac.LexicalUnit parseTerm(org.w3c.css.sac.LexicalUnit)
    {
        java.lang.Integer $r46, $r47;
        byte $b2, $b3;
        java.lang.Object[] $r37, $r40;
        org.apache.batik.css.parser.Scanner $r20, $r26, $r30, $r34;
        org.apache.batik.css.parser.CSSLexicalUnit $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r28, $r32, $r33, $r36, $r44;
        long $l1;
        java.lang.StringBuffer $r24, $r25, $r45;
        java.lang.String $r21, $r27, $r31, $r35, r43;
        org.w3c.css.sac.CSSParseException $r39, $r42;
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.LexicalUnit r1, $r2, $r19, $r29;
        boolean $z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20, z21, z22;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        int $i0, $i4, $i5, $i6, $i7, i8, $i9, $i10;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.LexicalUnit;

        z1 = 1;

        z22 = 1;

        z21 = 1;

        z20 = 1;

        z19 = 1;

        z18 = 1;

        z17 = 1;

        z16 = 1;

        z15 = 1;

        z14 = 1;

        z13 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        z2 = 0;

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i0)
        {
            case 4: goto label02;
            case 5: goto label01;
            default: goto label03;
        };

     label01:
        z1 = 0;

        z22 = 0;

        z21 = 0;

        z20 = 0;

        z19 = 0;

        z18 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

        z14 = 0;

        z13 = 0;

        z12 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

     label02:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        z2 = 1;

     label03:
        $i7 = r0.<org.apache.batik.css.parser.Parser: int current>;

        tableswitch($i7)
        {
            case 24: goto label04;
            case 25: goto label25;
            case 26: goto label25;
            case 27: goto label25;
            case 28: goto label25;
            case 29: goto label25;
            case 30: goto label25;
            case 31: goto label25;
            case 32: goto label25;
            case 33: goto label25;
            case 34: goto label23;
            case 35: goto label15;
            case 36: goto label14;
            case 37: goto label11;
            case 38: goto label12;
            case 39: goto label13;
            case 40: goto label20;
            case 41: goto label21;
            case 42: goto label07;
            case 43: goto label19;
            case 44: goto label09;
            case 45: goto label08;
            case 46: goto label10;
            case 47: goto label16;
            case 48: goto label17;
            case 49: goto label18;
            case 50: goto label22;
            case 51: goto label25;
            case 52: goto label24;
            case 53: goto label25;
            case 54: goto label06;
            default: goto label25;
        };

     label04:
        $r20 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r21 = virtualinvoke $r20.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        r43 = $r21;

        if z9 != 0 goto label05;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        r43 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

     label05:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r43);

        $b2 = $l1 cmp -2147483648L;

        $i9 = (int) $b2;

        if $i9 < 0 goto label06;

        $b3 = $l1 cmp 2147483647L;

        $i10 = (int) $b3;

        if $i10 > 0 goto label06;

        i8 = (int) $l1;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r22 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>(i8, r1);

        return $r22;

     label06:
        $f16 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z14);

        $r44 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(14, $f16, r1);

        return $r44;

     label07:
        $f8 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z6);

        $r11 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(23, $f8, r1);

        return $r11;

     label08:
        $f5 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z8);

        $r8 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(21, $f5, r1);

        return $r8;

     label09:
        $f6 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z17);

        $r9 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(22, $f6, r1);

        return $r9;

     label10:
        $f4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z7);

        $r7 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(17, $f4, r1);

        return $r7;

     label11:
        $f13 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z11);

        $r16 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(19, $f13, r1);

        return $r16;

     label12:
        $f12 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z19);

        $r15 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(20, $f12, r1);

        return $r15;

     label13:
        $f11 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z18);

        $r14 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(18, $f11, r1);

        return $r14;

     label14:
        $f14 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z4);

        $r17 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(15, $f14, r1);

        return $r17;

     label15:
        $f15 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z10);

        $r18 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(16, $f15, r1);

        return $r18;

     label16:
        $f3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z21);

        $r6 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(28, $f3, r1);

        return $r6;

     label17:
        $f2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z13);

        $r5 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(30, $f2, r1);

        return $r5;

     label18:
        $f1 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z20);

        $r4 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(29, $f1, r1);

        return $r4;

     label19:
        $f7 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z15);

        $r10 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(32, $f7, r1);

        return $r10;

     label20:
        $f10 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z3);

        $r13 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(31, $f10, r1);

        return $r13;

     label21:
        $f9 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z16);

        $r12 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(33, $f9, r1);

        return $r12;

     label22:
        $f0 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: float number(boolean)>(z22);

        $r3 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFloat(short,float,org.w3c.css.sac.LexicalUnit)>(34, $f0, r1);

        return $r3;

     label23:
        $r19 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit dimension(boolean,org.w3c.css.sac.LexicalUnit)>(z5, r1);

        return $r19;

     label24:
        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseFunction(boolean,org.w3c.css.sac.LexicalUnit)>(z12, r1);

        return $r2;

     label25:
        if z2 == 0 goto label26;

        $r40 = newarray (java.lang.Object)[1];

        $r46 = new java.lang.Integer;

        $i6 = r0.<org.apache.batik.css.parser.Parser: int current>;

        specialinvoke $r46.<java.lang.Integer: void <init>(int)>($i6);

        $r40[0] = $r46;

        $r42 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("token", $r40);

        throw $r42;

     label26:
        $i4 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i4)
        {
            case 19: goto label27;
            case 20: goto label28;
            case 27: goto label31;
            case 51: goto label30;
            default: goto label32;
        };

     label27:
        $r34 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r35 = virtualinvoke $r34.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r36 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createString(short,java.lang.String,org.w3c.css.sac.LexicalUnit)>(36, $r35, r1);

        return $r36;

     label28:
        $r30 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r31 = virtualinvoke $r30.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $z0 = virtualinvoke $r31.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("inherit");

        if $z0 == 0 goto label29;

        $r33 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(12, r1);

        return $r33;

     label29:
        $r32 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createString(short,java.lang.String,org.w3c.css.sac.LexicalUnit)>(35, $r31, r1);

        return $r32;

     label30:
        $r26 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r27 = virtualinvoke $r26.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r28 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createString(short,java.lang.String,org.w3c.css.sac.LexicalUnit)>(24, $r27, r1);

        return $r28;

     label31:
        $r29 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit hexcolor(org.w3c.css.sac.LexicalUnit)>(r1);

        return $r29;

     label32:
        $r37 = newarray (java.lang.Object)[1];

        $r47 = new java.lang.Integer;

        $i5 = r0.<org.apache.batik.css.parser.Parser: int current>;

        specialinvoke $r47.<java.lang.Integer: void <init>(int)>($i5);

        $r37[0] = $r47;

        $r39 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("token", $r37);

        throw $r39;
    }

    protected org.w3c.css.sac.LexicalUnit parseFunction(boolean, org.w3c.css.sac.LexicalUnit)
    {
        java.lang.Integer $r40;
        java.lang.Object[] $r32;
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.CSSLexicalUnit $r12, $r18, $r24, $r28, $r31, $r39;
        short $s2, $s3, $s4, $s5, $s6, $s7, $s8, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23, $s24, $s25, $s26;
        java.lang.String $r2, $r5, $r7, $r9, $r11, $r30;
        org.w3c.css.sac.CSSParseException $r34;
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.LexicalUnit $r3, r4, $r6, $r8, $r10, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r29, r35, r36, r37, r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        int $i0, $i9, $i10, $i11, $i12, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49;
        char $c1;

        r0 := @this: org.apache.batik.css.parser.Parser;

        z9 := @parameter0: boolean;

        r4 := @parameter1: org.w3c.css.sac.LexicalUnit;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r2 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parseExpression(boolean)>(1);

        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i0 == 15 goto label01;

        $r32 = newarray (java.lang.Object)[1];

        $r40 = new java.lang.Integer;

        $i27 = r0.<org.apache.batik.css.parser.Parser: int current>;

        specialinvoke $r40.<java.lang.Integer: void <init>(int)>($i27);

        $r32[0] = $r40;

        $r34 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("token", $r32);

        throw $r34;

     label01:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i28 = (int) $c1;

        lookupswitch($i28)
        {
            case 65: goto label90;
            case 67: goto label62;
            case 82: goto label02;
            case 97: goto label90;
            case 99: goto label62;
            case 114: goto label02;
            default: goto label95;
        };

     label02:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("rgb");

        if $z0 == 0 goto label19;

        if $r3 != null goto label03;

        goto label95;

     label03:
        $s13 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i29 = (int) $s13;

        lookupswitch($i29)
        {
            case 13: goto label05;
            case 23: goto label05;
            default: goto label04;
        };

     label04:
        goto label95;

     label05:
        $r13 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r13 != null goto label06;

        goto label95;

     label06:
        $s14 = interfaceinvoke $r13.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i30 = (int) $s14;

        lookupswitch($i30)
        {
            case 0: goto label08;
            default: goto label07;
        };

     label07:
        goto label95;

     label08:
        $r14 = interfaceinvoke $r13.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r14 != null goto label09;

        goto label95;

     label09:
        $s15 = interfaceinvoke $r14.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i31 = (int) $s15;

        lookupswitch($i31)
        {
            case 13: goto label11;
            case 23: goto label11;
            default: goto label10;
        };

     label10:
        goto label95;

     label11:
        $r15 = interfaceinvoke $r14.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r15 != null goto label12;

        goto label95;

     label12:
        $s16 = interfaceinvoke $r15.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i32 = (int) $s16;

        lookupswitch($i32)
        {
            case 0: goto label14;
            default: goto label13;
        };

     label13:
        goto label95;

     label14:
        $r16 = interfaceinvoke $r15.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r16 != null goto label15;

        goto label95;

     label15:
        $s17 = interfaceinvoke $r16.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i33 = (int) $s17;

        lookupswitch($i33)
        {
            case 13: goto label17;
            case 23: goto label17;
            default: goto label16;
        };

     label16:
        goto label95;

     label17:
        $r17 = interfaceinvoke $r16.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r17 == null goto label18;

        goto label95;

     label18:
        $r18 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createPredefinedFunction(short,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(27, $r3, r4);

        return $r18;

     label19:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("rect");

        if $z1 == 0 goto label95;

        if $r3 != null goto label20;

        goto label95;

     label20:
        $s2 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i34 = (int) $s2;

        tableswitch($i34)
        {
            case 13: goto label22;
            case 14: goto label21;
            case 15: goto label26;
            case 16: goto label26;
            case 17: goto label26;
            case 18: goto label26;
            case 19: goto label26;
            case 20: goto label26;
            case 21: goto label26;
            case 22: goto label26;
            case 23: goto label26;
            case 24: goto label21;
            case 25: goto label21;
            case 26: goto label21;
            case 27: goto label21;
            case 28: goto label21;
            case 29: goto label21;
            case 30: goto label21;
            case 31: goto label21;
            case 32: goto label21;
            case 33: goto label21;
            case 34: goto label21;
            case 35: goto label24;
            default: goto label21;
        };

     label21:
        goto label95;

     label22:
        $i12 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: int getIntegerValue()>();

        if $i12 == 0 goto label23;

        goto label95;

     label23:
        r35 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label27;

     label24:
        $r5 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("auto");

        if $z2 != 0 goto label25;

        goto label95;

     label25:
        r35 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label27;

     label26:
        r35 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

     label27:
        if r35 != null goto label28;

        goto label95;

     label28:
        $s3 = interfaceinvoke r35.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i35 = (int) $s3;

        lookupswitch($i35)
        {
            case 0: goto label30;
            default: goto label29;
        };

     label29:
        goto label95;

     label30:
        $r6 = interfaceinvoke r35.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r6 != null goto label31;

        goto label95;

     label31:
        $s4 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i36 = (int) $s4;

        tableswitch($i36)
        {
            case 13: goto label33;
            case 14: goto label32;
            case 15: goto label37;
            case 16: goto label37;
            case 17: goto label37;
            case 18: goto label37;
            case 19: goto label37;
            case 20: goto label37;
            case 21: goto label37;
            case 22: goto label37;
            case 23: goto label37;
            case 24: goto label32;
            case 25: goto label32;
            case 26: goto label32;
            case 27: goto label32;
            case 28: goto label32;
            case 29: goto label32;
            case 30: goto label32;
            case 31: goto label32;
            case 32: goto label32;
            case 33: goto label32;
            case 34: goto label32;
            case 35: goto label35;
            default: goto label32;
        };

     label32:
        goto label95;

     label33:
        $i11 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: int getIntegerValue()>();

        if $i11 == 0 goto label34;

        goto label95;

     label34:
        r36 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label38;

     label35:
        $r7 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("auto");

        if $z3 != 0 goto label36;

        goto label95;

     label36:
        r36 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label38;

     label37:
        r36 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

     label38:
        if r36 != null goto label39;

        goto label95;

     label39:
        $s5 = interfaceinvoke r36.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i37 = (int) $s5;

        lookupswitch($i37)
        {
            case 0: goto label41;
            default: goto label40;
        };

     label40:
        goto label95;

     label41:
        $r8 = interfaceinvoke r36.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r8 != null goto label42;

        goto label95;

     label42:
        $s6 = interfaceinvoke $r8.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i38 = (int) $s6;

        tableswitch($i38)
        {
            case 13: goto label44;
            case 14: goto label43;
            case 15: goto label48;
            case 16: goto label48;
            case 17: goto label48;
            case 18: goto label48;
            case 19: goto label48;
            case 20: goto label48;
            case 21: goto label48;
            case 22: goto label48;
            case 23: goto label48;
            case 24: goto label43;
            case 25: goto label43;
            case 26: goto label43;
            case 27: goto label43;
            case 28: goto label43;
            case 29: goto label43;
            case 30: goto label43;
            case 31: goto label43;
            case 32: goto label43;
            case 33: goto label43;
            case 34: goto label43;
            case 35: goto label46;
            default: goto label43;
        };

     label43:
        goto label95;

     label44:
        $i10 = interfaceinvoke $r8.<org.w3c.css.sac.LexicalUnit: int getIntegerValue()>();

        if $i10 == 0 goto label45;

        goto label95;

     label45:
        r37 = interfaceinvoke $r8.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label49;

     label46:
        $r9 = interfaceinvoke $r8.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("auto");

        if $z4 != 0 goto label47;

        goto label95;

     label47:
        r37 = interfaceinvoke $r8.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label49;

     label48:
        r37 = interfaceinvoke $r8.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

     label49:
        if r37 != null goto label50;

        goto label95;

     label50:
        $s7 = interfaceinvoke r37.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i39 = (int) $s7;

        lookupswitch($i39)
        {
            case 0: goto label52;
            default: goto label51;
        };

     label51:
        goto label95;

     label52:
        $r10 = interfaceinvoke r37.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r10 != null goto label53;

        goto label95;

     label53:
        $s8 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i40 = (int) $s8;

        tableswitch($i40)
        {
            case 13: goto label55;
            case 14: goto label54;
            case 15: goto label59;
            case 16: goto label59;
            case 17: goto label59;
            case 18: goto label59;
            case 19: goto label59;
            case 20: goto label59;
            case 21: goto label59;
            case 22: goto label59;
            case 23: goto label59;
            case 24: goto label54;
            case 25: goto label54;
            case 26: goto label54;
            case 27: goto label54;
            case 28: goto label54;
            case 29: goto label54;
            case 30: goto label54;
            case 31: goto label54;
            case 32: goto label54;
            case 33: goto label54;
            case 34: goto label54;
            case 35: goto label57;
            default: goto label54;
        };

     label54:
        goto label95;

     label55:
        $i9 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: int getIntegerValue()>();

        if $i9 == 0 goto label56;

        goto label95;

     label56:
        r38 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label60;

     label57:
        $r11 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("auto");

        if $z5 != 0 goto label58;

        goto label95;

     label58:
        r38 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label60;

     label59:
        r38 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

     label60:
        if r38 == null goto label61;

        goto label95;

     label61:
        $r12 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createPredefinedFunction(short,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(38, $r3, r4);

        return $r12;

     label62:
        $z6 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("counter");

        if $z6 == 0 goto label73;

        if $r3 != null goto label63;

        goto label95;

     label63:
        $s23 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i41 = (int) $s23;

        lookupswitch($i41)
        {
            case 35: goto label65;
            default: goto label64;
        };

     label64:
        goto label95;

     label65:
        $r25 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r25 != null goto label66;

        goto label95;

     label66:
        $s24 = interfaceinvoke $r25.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i42 = (int) $s24;

        lookupswitch($i42)
        {
            case 0: goto label68;
            default: goto label67;
        };

     label67:
        goto label95;

     label68:
        $r26 = interfaceinvoke $r25.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r26 != null goto label69;

        goto label95;

     label69:
        $s25 = interfaceinvoke $r26.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i43 = (int) $s25;

        lookupswitch($i43)
        {
            case 35: goto label71;
            default: goto label70;
        };

     label70:
        goto label95;

     label71:
        $r27 = interfaceinvoke $r26.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r27 == null goto label72;

        goto label95;

     label72:
        $r28 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createPredefinedFunction(short,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(25, $r3, r4);

        return $r28;

     label73:
        $z7 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("counters");

        if $z7 == 0 goto label95;

        if $r3 != null goto label74;

        goto label95;

     label74:
        $s18 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i44 = (int) $s18;

        lookupswitch($i44)
        {
            case 35: goto label76;
            default: goto label75;
        };

     label75:
        goto label95;

     label76:
        $r19 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r19 != null goto label77;

        goto label95;

     label77:
        $s19 = interfaceinvoke $r19.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i45 = (int) $s19;

        lookupswitch($i45)
        {
            case 0: goto label79;
            default: goto label78;
        };

     label78:
        goto label95;

     label79:
        $r20 = interfaceinvoke $r19.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r20 != null goto label80;

        goto label95;

     label80:
        $s20 = interfaceinvoke $r20.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i46 = (int) $s20;

        lookupswitch($i46)
        {
            case 36: goto label82;
            default: goto label81;
        };

     label81:
        goto label95;

     label82:
        $r21 = interfaceinvoke $r20.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r21 != null goto label83;

        goto label95;

     label83:
        $s21 = interfaceinvoke $r21.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i47 = (int) $s21;

        lookupswitch($i47)
        {
            case 0: goto label85;
            default: goto label84;
        };

     label84:
        goto label95;

     label85:
        $r22 = interfaceinvoke $r21.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r22 != null goto label86;

        goto label95;

     label86:
        $s22 = interfaceinvoke $r22.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i48 = (int) $s22;

        lookupswitch($i48)
        {
            case 35: goto label88;
            default: goto label87;
        };

     label87:
        goto label95;

     label88:
        $r23 = interfaceinvoke $r22.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r23 == null goto label89;

        goto label95;

     label89:
        $r24 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createPredefinedFunction(short,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(26, $r3, r4);

        return $r24;

     label90:
        $z8 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("attr");

        if $z8 == 0 goto label95;

        if $r3 != null goto label91;

        goto label95;

     label91:
        $s26 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i49 = (int) $s26;

        lookupswitch($i49)
        {
            case 35: goto label93;
            default: goto label92;
        };

     label92:
        goto label95;

     label93:
        $r29 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r29 == null goto label94;

        goto label95;

     label94:
        $r30 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r31 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createString(short,java.lang.String,org.w3c.css.sac.LexicalUnit)>(37, $r30, r4);

        return $r31;

     label95:
        $r39 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createFunction(java.lang.String,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>($r2, $r3, r4);

        return $r39;
    }

    protected org.w3c.css.sac.LexicalUnit hexcolor(org.w3c.css.sac.LexicalUnit)
    {
        java.lang.Object[] $r5, $r7;
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.CSSLexicalUnit $r4, $r9, r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18;
        java.lang.String $r2;
        org.w3c.css.sac.CSSParseException $r6, $r8, $r14;
        org.apache.batik.css.parser.Parser r0;
        org.w3c.css.sac.LexicalUnit r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i13, $i14, $i15, $i16, $i17, $i18, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11, $c12, $c19, $c20, $c21, $c22, $c23, $c24;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r3 := @parameter0: org.w3c.css.sac.LexicalUnit;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r2 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        lookupswitch($i0)
        {
            case 3: goto label01;
            case 6: goto label10;
            default: goto label25;
        };

     label01:
        $c19 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $c20 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c19);

        $c21 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        $c22 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c21);

        $c23 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(2);

        $c24 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c23);

        $z6 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c20);

        if $z6 == 0 goto label02;

        $z7 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c22);

        if $z7 == 0 goto label02;

        $z8 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c24);

        if $z8 != 0 goto label03;

     label02:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        $r8 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("rgb.color", $r7);

        throw $r8;

     label03:
        $i49 = (int) $c20;

        if $i49 < 48 goto label04;

        $i50 = (int) $c20;

        if $i50 > 57 goto label04;

        $i51 = (int) $c20;

        $i28 = $i51 - 48;

        goto label05;

     label04:
        $i52 = (int) $c20;

        $i25 = $i52 - 97;

        $i28 = $i25 + 10;

     label05:
        $i29 = $i28 << 4;

        $i30 = $i28 | $i29;

        $i53 = (int) $c22;

        if $i53 < 48 goto label06;

        $i54 = (int) $c22;

        if $i54 > 57 goto label06;

        $i55 = (int) $c22;

        $i31 = $i55 - 48;

        goto label07;

     label06:
        $i56 = (int) $c22;

        $i26 = $i56 - 97;

        $i31 = $i26 + 10;

     label07:
        $i32 = $i31 << 4;

        $i33 = $i31 | $i32;

        $i57 = (int) $c24;

        if $i57 < 48 goto label08;

        $i58 = (int) $c24;

        if $i58 > 57 goto label08;

        $i59 = (int) $c24;

        $i34 = $i59 - 48;

        goto label09;

     label08:
        $i60 = (int) $c24;

        $i27 = $i60 - 97;

        $i34 = $i27 + 10;

     label09:
        $i35 = $i34 << 4;

        $i36 = $i34 | $i35;

        $r9 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>($i30, null);

        r10 = $r9;

        $r11 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(0, $r9);

        $r12 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>($i33, $r11);

        $r13 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(0, $r12);

        staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>($i36, $r13);

        goto label26;

     label10:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $c2 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(2);

        $c6 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        $c7 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(3);

        $c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c7);

        $c9 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(4);

        $c10 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c9);

        $c11 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(5);

        $c12 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c11);

        $z0 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c2);

        if $z0 == 0 goto label11;

        $z1 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c4);

        if $z1 == 0 goto label11;

        $z2 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c6);

        if $z2 == 0 goto label11;

        $z3 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c8);

        if $z3 == 0 goto label11;

        $z4 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c10);

        if $z4 == 0 goto label11;

        $z5 = staticinvoke <org.apache.batik.css.parser.ScannerUtilities: boolean isCSSHexadecimalCharacter(char)>($c12);

        if $z5 != 0 goto label12;

     label11:
        $r14 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("rgb.color");

        throw $r14;

     label12:
        $i61 = (int) $c2;

        if $i61 < 48 goto label13;

        $i62 = (int) $c2;

        if $i62 > 57 goto label13;

        $i63 = (int) $c2;

        $i37 = $i63 - 48;

        goto label14;

     label13:
        $i64 = (int) $c2;

        $i13 = $i64 - 97;

        $i37 = $i13 + 10;

     label14:
        $i38 = $i37 << 4;

        $i65 = (int) $c4;

        if $i65 < 48 goto label15;

        $i66 = (int) $c4;

        if $i66 > 57 goto label15;

        $i67 = (int) $c4;

        $i39 = $i67 - 48;

        goto label16;

     label15:
        $i68 = (int) $c4;

        $i14 = $i68 - 97;

        $i39 = $i14 + 10;

     label16:
        $i40 = $i38 | $i39;

        $i69 = (int) $c6;

        if $i69 < 48 goto label17;

        $i70 = (int) $c6;

        if $i70 > 57 goto label17;

        $i71 = (int) $c6;

        $i41 = $i71 - 48;

        goto label18;

     label17:
        $i72 = (int) $c6;

        $i15 = $i72 - 97;

        $i41 = $i15 + 10;

     label18:
        $i42 = $i41 << 4;

        $i73 = (int) $c8;

        if $i73 < 48 goto label19;

        $i74 = (int) $c8;

        if $i74 > 57 goto label19;

        $i75 = (int) $c8;

        $i43 = $i75 - 48;

        goto label20;

     label19:
        $i76 = (int) $c8;

        $i16 = $i76 - 97;

        $i43 = $i16 + 10;

     label20:
        $i44 = $i42 | $i43;

        $i77 = (int) $c10;

        if $i77 < 48 goto label21;

        $i78 = (int) $c10;

        if $i78 > 57 goto label21;

        $i79 = (int) $c10;

        $i45 = $i79 - 48;

        goto label22;

     label21:
        $i80 = (int) $c10;

        $i17 = $i80 - 97;

        $i45 = $i17 + 10;

     label22:
        $i46 = $i45 << 4;

        $i81 = (int) $c12;

        if $i81 < 48 goto label23;

        $i82 = (int) $c12;

        if $i82 > 57 goto label23;

        $i83 = (int) $c12;

        $i47 = $i83 - 48;

        goto label24;

     label23:
        $i84 = (int) $c12;

        $i18 = $i84 - 97;

        $i47 = $i18 + 10;

     label24:
        $i48 = $i46 | $i47;

        $r15 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>($i40, null);

        r10 = $r15;

        $r16 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(0, $r15);

        $r17 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>($i44, $r16);

        $r18 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createSimple(short,org.w3c.css.sac.LexicalUnit)>(0, $r17);

        staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createInteger(int,org.w3c.css.sac.LexicalUnit)>($i48, $r18);

        goto label26;

     label25:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        $r6 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>("rgb.color", $r5);

        throw $r6;

     label26:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r4 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createPredefinedFunction(short,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(27, r10, r3);

        return $r4;
    }

    protected org.apache.batik.css.parser.Scanner createScanner(org.w3c.css.sac.InputSource)
    {
        org.apache.batik.css.parser.Scanner $r9, $r13, $r15;
        org.w3c.css.sac.CSSException $r11, $r17;
        org.apache.batik.css.parser.Parser r0;
        java.lang.String $r2, $r3, $r6, $r10, $r12, $r14;
        java.io.IOException $r16;
        org.w3c.css.sac.InputSource r1;
        java.io.Reader $r4;
        org.apache.batik.util.ParsedURL $r7;
        java.io.InputStream $r5, $r8;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.InputSource;

        $r2 = virtualinvoke r1.<org.w3c.css.sac.InputSource: java.lang.String getURI()>();

        r0.<org.apache.batik.css.parser.Parser: java.lang.String documentURI> = $r2;

        $r3 = r0.<org.apache.batik.css.parser.Parser: java.lang.String documentURI>;

        if $r3 != null goto label1;

        r0.<org.apache.batik.css.parser.Parser: java.lang.String documentURI> = "";

     label1:
        $r4 = virtualinvoke r1.<org.w3c.css.sac.InputSource: java.io.Reader getCharacterStream()>();

        if $r4 == null goto label2;

        $r15 = new org.apache.batik.css.parser.Scanner;

        specialinvoke $r15.<org.apache.batik.css.parser.Scanner: void <init>(java.io.Reader)>($r4);

        return $r15;

     label2:
        $r5 = virtualinvoke r1.<org.w3c.css.sac.InputSource: java.io.InputStream getByteStream()>();

        if $r5 == null goto label3;

        $r13 = new org.apache.batik.css.parser.Scanner;

        $r14 = virtualinvoke r1.<org.w3c.css.sac.InputSource: java.lang.String getEncoding()>();

        specialinvoke $r13.<org.apache.batik.css.parser.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r5, $r14);

        return $r13;

     label3:
        $r6 = virtualinvoke r1.<org.w3c.css.sac.InputSource: java.lang.String getURI()>();

        if $r6 != null goto label4;

        $r11 = new org.w3c.css.sac.CSSException;

        $r12 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("empty.source", null);

        specialinvoke $r11.<org.w3c.css.sac.CSSException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label4:
        $r7 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r7.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.batik.util.ParsedURL: java.io.InputStream openStreamRaw(java.lang.String)>("text/css");

        $r9 = new org.apache.batik.css.parser.Scanner;

        $r10 = virtualinvoke r1.<org.w3c.css.sac.InputSource: java.lang.String getEncoding()>();

        specialinvoke $r9.<org.apache.batik.css.parser.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r8, $r10);

        return $r9;

     label5:
        $r16 := @caughtexception;

        $r17 = new org.w3c.css.sac.CSSException;

        specialinvoke $r17.<org.w3c.css.sac.CSSException: void <init>(java.lang.Exception)>($r16);

        throw $r17;

        catch java.io.IOException from label4 to label5 with label5;
    }

    protected int skipSpaces()
    {
        int i0;
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        i0 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: int getType()>();

        goto label2;

     label1:
        i0 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

     label2:
        if i0 == 17 goto label1;

        return i0;
    }

    protected int skipSpacesAndCDOCDC()
    {
        org.apache.batik.css.parser.Scanner $r1;
        int $i0, $i1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        tableswitch($i0)
        {
            case 17: goto label3;
            case 18: goto label3;
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label3;
            case 22: goto label3;
            default: goto label2;
        };

     label2:
        goto label4;

     label3:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: void clearBuffer()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int next()>();

        goto label1;

     label4:
        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        return $i1;
    }

    protected float number(boolean)
    {
        org.apache.batik.css.parser.Scanner $r1;
        org.w3c.css.sac.CSSParseException $r4;
        java.lang.NumberFormatException $r3;
        org.apache.batik.css.parser.Parser r0;
        float $f0, $f1, $f2;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        z0 := @parameter0: boolean;

     label1:
        if z0 == 0 goto label2;

        $f2 = 1.0F;

        goto label3;

     label2:
        $f2 = -1.0F;

     label3:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r2 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r2);

        $f1 = $f2 * $f0;

        return $f1;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("number.format");

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label4 with label4;
    }

    protected org.w3c.css.sac.LexicalUnit dimension(boolean, org.w3c.css.sac.LexicalUnit)
    {
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.CSSLexicalUnit $r6;
        org.w3c.css.sac.CSSParseException $r8;
        org.apache.batik.css.parser.Parser r0;
        int $i0, i2, $i3;
        org.w3c.css.sac.LexicalUnit r5;
        java.lang.String $r2, $r3, $r4;
        boolean z0;
        char $c1;
        java.lang.NumberFormatException $r7;
        float $f0, $f1, $f2, f3;

        r0 := @this: org.apache.batik.css.parser.Parser;

        z0 := @parameter0: boolean;

        r5 := @parameter1: org.w3c.css.sac.LexicalUnit;

     label1:
        if z0 == 0 goto label2;

        $f2 = 1.0F;

        goto label3;

     label2:
        $f2 = -1.0F;

     label3:
        f3 = $f2;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r2 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        i2 = 0;

        goto label7;

     label4:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        tableswitch($i3)
        {
            case 46: goto label6;
            case 47: goto label5;
            case 48: goto label6;
            case 49: goto label6;
            case 50: goto label6;
            case 51: goto label6;
            case 52: goto label6;
            case 53: goto label6;
            case 54: goto label6;
            case 55: goto label6;
            case 56: goto label6;
            case 57: goto label6;
            default: goto label5;
        };

     label5:
        goto label8;

     label6:
        i2 = i2 + 1;

     label7:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i2 < $i0 goto label4;

     label8:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

        $f1 = f3 * $f0;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i2);

        $r6 = staticinvoke <org.apache.batik.css.parser.CSSLexicalUnit: org.apache.batik.css.parser.CSSLexicalUnit createDimension(float,java.lang.String,org.w3c.css.sac.LexicalUnit)>($f1, $r4, r5);

        return $r6;

     label9:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>("number.format");

        throw $r8;

        catch java.lang.NumberFormatException from label1 to label9 with label9;
    }

    protected int next()
    {
        org.apache.batik.css.parser.Scanner $r1, $r2, $r3;
        org.w3c.css.sac.DocumentHandler $r4;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.css.parser.ParseException $r6;
        java.lang.String $r5, $r7;

        r0 := @this: org.apache.batik.css.parser.Parser;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: void clearBuffer()>();

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $i0 = virtualinvoke $r2.<org.apache.batik.css.parser.Scanner: int next()>();

        r0.<org.apache.batik.css.parser.Parser: int current> = $i0;

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        if $i1 != 18 goto label3;

        $r4 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        $r3 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r5 = virtualinvoke $r3.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        interfaceinvoke $r4.<org.w3c.css.sac.DocumentHandler: void comment(java.lang.String)>($r5);

        goto label2;

     label3:
        $i2 = r0.<org.apache.batik.css.parser.Parser: int current>;

        return $i2;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<org.apache.batik.css.parser.ParseException: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String)>($r7);

        $i3 = r0.<org.apache.batik.css.parser.Parser: int current>;

        return $i3;

        catch org.apache.batik.css.parser.ParseException from label1 to label4 with label4;
    }

    protected int nextIgnoreSpaces()
    {
        org.w3c.css.sac.ErrorHandler $r5;
        org.apache.batik.css.parser.Scanner $r1, $r8, $r9;
        org.w3c.css.sac.CSSParseException $r7;
        org.w3c.css.sac.DocumentHandler $r2;
        org.apache.batik.css.parser.Parser r0;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.css.parser.ParseException $r4;
        java.lang.String $r3, $r6;

        r0 := @this: org.apache.batik.css.parser.Parser;

     label1:
        goto label2;

     label2:
        $r8 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        virtualinvoke $r8.<org.apache.batik.css.parser.Scanner: void clearBuffer()>();

        $r9 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $i2 = virtualinvoke $r9.<org.apache.batik.css.parser.Scanner: int next()>();

        r0.<org.apache.batik.css.parser.Parser: int current> = $i2;

        $i3 = r0.<org.apache.batik.css.parser.Parser: int current>;

        lookupswitch($i3)
        {
            case 17: goto label5;
            case 18: goto label3;
            default: goto label4;
        };

     label3:
        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.DocumentHandler documentHandler>;

        $r1 = r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $r3 = virtualinvoke $r1.<org.apache.batik.css.parser.Scanner: java.lang.String getStringValue()>();

        interfaceinvoke $r2.<org.w3c.css.sac.DocumentHandler: void comment(java.lang.String)>($r3);

        goto label2;

     label4:
        goto label6;

     label5:
        goto label2;

     label6:
        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        return $i0;

     label7:
        $r4 := @caughtexception;

        $r5 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ErrorHandler errorHandler>;

        $r6 = virtualinvoke $r4.<org.apache.batik.css.parser.ParseException: java.lang.String getMessage()>();

        $r7 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)>($r6);

        interfaceinvoke $r5.<org.w3c.css.sac.ErrorHandler: void error(org.w3c.css.sac.CSSParseException)>($r7);

        $i1 = r0.<org.apache.batik.css.parser.Parser: int current>;

        return $i1;

        catch org.apache.batik.css.parser.ParseException from label1 to label7 with label7;
    }

    protected void reportError(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(java.lang.String,java.lang.Object[])>(r1, null);

        return;
    }

    protected void reportError(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.w3c.css.sac.CSSParseException $r3;
        java.lang.String r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>(r1, r2);

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void reportError(org.w3c.css.sac.CSSParseException)>($r3);

        return;
    }

    protected void reportError(org.w3c.css.sac.CSSParseException)
    {
        org.w3c.css.sac.ErrorHandler $r2;
        int $i0, i1, $i3;
        org.w3c.css.sac.CSSParseException r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: org.w3c.css.sac.CSSParseException;

        $r2 = r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.ErrorHandler errorHandler>;

        interfaceinvoke $r2.<org.w3c.css.sac.ErrorHandler: void error(org.w3c.css.sac.CSSParseException)>(r1);

        i1 = 1;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.css.parser.Parser: int current>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label5;
            case 7: goto label5;
            case 8: goto label3;
            default: goto label5;
        };

     label2:
        return;

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 != 0 goto label4;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        return;

     label4:
        i1 = i1 + 1;

     label5:
        virtualinvoke r0.<org.apache.batik.css.parser.Parser: int nextIgnoreSpaces()>();

        goto label1;
    }

    protected org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String)
    {
        org.w3c.css.sac.CSSParseException $r2;
        java.lang.String r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String,java.lang.Object[])>(r1, null);

        return $r2;
    }

    protected org.w3c.css.sac.CSSParseException createCSSParseException(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3;
        org.apache.batik.css.parser.Scanner $r5, $r7;
        org.w3c.css.sac.CSSParseException $r0;
        org.apache.batik.css.parser.Parser r1;
        int $i0, $i1;
        java.lang.String r2, $r4, $r6;

        r1 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        $r0 = new org.w3c.css.sac.CSSParseException;

        $r4 = virtualinvoke r1.<org.apache.batik.css.parser.Parser: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r2, r3);

        $r6 = r1.<org.apache.batik.css.parser.Parser: java.lang.String documentURI>;

        $r5 = r1.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $i0 = virtualinvoke $r5.<org.apache.batik.css.parser.Scanner: int getLine()>();

        $r7 = r1.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner>;

        $i1 = virtualinvoke $r7.<org.apache.batik.css.parser.Scanner: int getColumn()>();

        specialinvoke $r0.<org.w3c.css.sac.CSSParseException: void <init>(java.lang.String,java.lang.String,int,int)>($r4, $r6, $i0, $i1);

        return $r0;
    }

    public void parseStyleDeclaration(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        java.lang.String r2;
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.apache.batik.css.parser.Scanner;

        specialinvoke $r1.<org.apache.batik.css.parser.Scanner: void <init>(java.lang.String)>(r2);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r1;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseStyleDeclarationInternal()>();

        return;
    }

    public void parseRule(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        java.lang.String r2;
        org.apache.batik.css.parser.Scanner $r1;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.apache.batik.css.parser.Scanner;

        specialinvoke $r1.<org.apache.batik.css.parser.Scanner: void <init>(java.lang.String)>(r2);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r1;

        virtualinvoke r0.<org.apache.batik.css.parser.Parser: void parseRuleInternal()>();

        return;
    }

    public org.w3c.css.sac.SelectorList parseSelectors(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Scanner $r1;
        org.w3c.css.sac.SelectorList $r3;
        java.lang.String r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.apache.batik.css.parser.Scanner;

        specialinvoke $r1.<org.apache.batik.css.parser.Scanner: void <init>(java.lang.String)>(r2);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r1;

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.SelectorList parseSelectorsInternal()>();

        return $r3;
    }

    public org.w3c.css.sac.LexicalUnit parsePropertyValue(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Scanner $r1;
        org.w3c.css.sac.LexicalUnit $r3;
        java.lang.String r2;
        org.apache.batik.css.parser.Parser r0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.apache.batik.css.parser.Scanner;

        specialinvoke $r1.<org.apache.batik.css.parser.Scanner: void <init>(java.lang.String)>(r2);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r1;

        $r3 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: org.w3c.css.sac.LexicalUnit parsePropertyValueInternal()>();

        return $r3;
    }

    public boolean parsePriority(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.Scanner $r1;
        java.lang.String r2;
        org.apache.batik.css.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.apache.batik.css.parser.Parser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.apache.batik.css.parser.Scanner;

        specialinvoke $r1.<org.apache.batik.css.parser.Scanner: void <init>(java.lang.String)>(r2);

        r0.<org.apache.batik.css.parser.Parser: org.apache.batik.css.parser.Scanner scanner> = $r1;

        $z0 = virtualinvoke r0.<org.apache.batik.css.parser.Parser: boolean parsePriorityInternal()>();

        return $z0;
    }

    public org.w3c.css.sac.SACMediaList parseMedia(java.lang.String) throws org.w3c.css.sac.CSSException, java.io.IOException
    {
        org.apache.batik.css.parser.CSSSACMediaList $r0;
        org.apache.batik.css.parser.Parser r5;
        java.util.StringTokenizer $r3;
        java.lang.String r1, $r2, $r4;
        boolean $z0, $z1;

        r5 := @this: org.apache.batik.css.parser.Parser;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.batik.css.parser.CSSSACMediaList;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSSACMediaList: void <init>()>();

        $r2 = "all";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 != 0 goto label3;

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, " ,");

        goto label2;

     label1:
        $r4 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r0.<org.apache.batik.css.parser.CSSSACMediaList: void append(java.lang.String)>($r4);

     label2:
        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label1;

     label3:
        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.css.parser.Parser: java.lang.String BUNDLE_CLASSNAME> = "org.apache.batik.css.parser.resources.Messages";

        return;
    }
}
