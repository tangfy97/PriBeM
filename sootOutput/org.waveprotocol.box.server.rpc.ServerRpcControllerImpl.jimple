public class org.waveprotocol.box.server.rpc.ServerRpcControllerImpl extends java.lang.Object implements org.waveprotocol.box.server.rpc.ServerRpcController
{
    private final com.google.protobuf.Message requestMessage;
    private final com.google.protobuf.Service backingService;
    private final com.google.protobuf.Descriptors$MethodDescriptor serviceMethod;
    private final com.google.protobuf.RpcCallback callback;
    private final boolean isStreamingRpc;
    private final java.lang.Object statusLock;
    private boolean complete;
    private com.google.protobuf.RpcCallback cancelCallback;
    private boolean cancelled;
    private final org.waveprotocol.wave.model.wave.ParticipantId loggedInUser;

    void <init>(com.google.protobuf.Message, com.google.protobuf.Service, com.google.protobuf.Descriptors$MethodDescriptor, org.waveprotocol.wave.model.wave.ParticipantId, com.google.protobuf.RpcCallback)
    {
        com.google.protobuf.Descriptors$MethodDescriptor r4;
        com.google.protobuf.DescriptorProtos$MethodOptions $r6;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        com.google.protobuf.RpcCallback r10;
        com.google.protobuf.GeneratedMessage$GeneratedExtension $r7;
        com.google.protobuf.Service r3;
        com.google.protobuf.Message r2;
        java.lang.Boolean $r9;
        java.lang.Object $r1, $r8;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        r2 := @parameter0: com.google.protobuf.Message;

        r3 := @parameter1: com.google.protobuf.Service;

        r4 := @parameter2: com.google.protobuf.Descriptors$MethodDescriptor;

        r5 := @parameter3: org.waveprotocol.wave.model.wave.ParticipantId;

        r10 := @parameter4: com.google.protobuf.RpcCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: java.lang.Object statusLock> = $r1;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete> = 0;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback> = null;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled> = 0;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.Message requestMessage> = r2;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.Service backingService> = r3;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.Descriptors$MethodDescriptor serviceMethod> = r4;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser> = r5;

        $r6 = virtualinvoke r4.<com.google.protobuf.Descriptors$MethodDescriptor: com.google.protobuf.DescriptorProtos$MethodOptions getOptions()>();

        $r7 = <org.waveprotocol.box.server.rpc.Rpc: com.google.protobuf.GeneratedMessage$GeneratedExtension isStreamingRpc>;

        $r8 = virtualinvoke $r6.<com.google.protobuf.DescriptorProtos$MethodOptions: java.lang.Object getExtension(com.google.protobuf.GeneratedMessage$GeneratedExtension)>($r7);

        $r9 = (java.lang.Boolean) $r8;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean isStreamingRpc> = $z0;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback callback> = r10;

        return;
    }

    public java.lang.String errorText()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Client-side method of RpcController only.");

        throw $r0;
    }

    public boolean failed()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Client-side method of RpcController only.");

        throw $r0;
    }

    public boolean isCanceled()
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled>;

        return $z0;
    }

    public void notifyOnCancel(com.google.protobuf.RpcCallback)
    {
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r4;
        com.google.protobuf.RpcCallback $r2, r3, r6;
        java.lang.Object $r1;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        r3 := @parameter0: com.google.protobuf.RpcCallback;

        r6 = null;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: java.lang.Object statusLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

        if $r2 == null goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must only be called once per request.");

        throw $r4;

     label2:
        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback> = r3;

        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled>;

        if $z0 != 0 goto label3;

        $z1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete>;

        if $z1 == 0 goto label4;

     label3:
        r6 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r5;

     label8:
        if r6 == null goto label9;

        interfaceinvoke r6.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>(null);

     label9:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void reset()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Client-side method of RpcController only.");

        throw $r0;
    }

    public void setFailed(java.lang.String)
    {
        org.waveprotocol.box.server.rpc.Rpc$RpcFinished $r7;
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r9;
        org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder $r3, $r4, $r6;
        com.google.protobuf.RpcCallback $r2, $r8, r11;
        java.lang.Object $r1;
        java.lang.String r5;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        r5 := @parameter0: java.lang.String;

        r11 = null;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: java.lang.Object statusLock>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete>;

        if $z0 == 0 goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t fail this RPC, as it is already complete.");

        throw $r9;

     label2:
        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete> = 1;

        $r2 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback callback>;

        $r3 = staticinvoke <org.waveprotocol.box.server.rpc.Rpc$RpcFinished: org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder: org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder setFailed(boolean)>(1);

        $r6 = virtualinvoke $r4.<org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder: org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder setErrorText(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.rpc.Rpc$RpcFinished$Builder: org.waveprotocol.box.server.rpc.Rpc$RpcFinished build()>();

        interfaceinvoke $r2.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>($r7);

        $r8 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

        if $r8 == null goto label3;

        $z1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled>;

        if $z1 != 0 goto label3;

        r11 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r10;

     label7:
        if r11 == null goto label8;

        interfaceinvoke r11.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>(null);

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void startCancel()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Client-side method of RpcController only.");

        throw $r0;
    }

    public void cancel()
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r3;
        com.google.protobuf.RpcCallback $r2, r5;
        java.lang.Object $r1;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        r5 = null;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: java.lang.Object statusLock>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled>;

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t cancel RPC, already cancelled.");

        throw $r3;

     label2:
        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled> = 1;

        $r2 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

        if $r2 == null goto label3;

        $z1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete>;

        if $z1 != 0 goto label3;

        r5 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r4;

     label7:
        if r5 == null goto label8;

        interfaceinvoke r5.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>(null);

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void run()
    {
        com.google.protobuf.Descriptors$MethodDescriptor $r3;
        java.lang.RuntimeException $r5;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl$1 $r0;
        com.google.protobuf.Service $r4;
        com.google.protobuf.Message $r2;
        java.lang.String $r6;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r0 = new org.waveprotocol.box.server.rpc.ServerRpcControllerImpl$1;

        specialinvoke $r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl$1: void <init>(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)>(r1);

     label1:
        $r4 = r1.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.Service backingService>;

        $r3 = r1.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.Descriptors$MethodDescriptor serviceMethod>;

        $r2 = r1.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.Message requestMessage>;

        interfaceinvoke $r4.<com.google.protobuf.Service: void callMethod(com.google.protobuf.Descriptors$MethodDescriptor,com.google.protobuf.RpcController,com.google.protobuf.Message,com.google.protobuf.RpcCallback)>($r3, r1, $r2, $r0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.RuntimeException: void printStackTrace()>();

        $z0 = r1.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete>;

        if $z0 != 0 goto label4;

        $r6 = virtualinvoke $r5.<java.lang.RuntimeException: java.lang.String toString()>();

        virtualinvoke r1.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: void setFailed(java.lang.String)>($r6);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser>;

        return $r1;
    }

    static java.lang.Object access$000(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)
    {
        java.lang.Object $r1;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: java.lang.Object statusLock>;

        return $r1;
    }

    static boolean access$100(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete>;

        return $z0;
    }

    static boolean access$200(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean isStreamingRpc>;

        return $z0;
    }

    static com.google.protobuf.RpcCallback access$300(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        com.google.protobuf.RpcCallback $r1;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback callback>;

        return $r1;
    }

    static boolean access$102(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl, boolean)
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean complete> = z0;

        return z0;
    }

    static com.google.protobuf.RpcCallback access$400(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        com.google.protobuf.RpcCallback $r1;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: com.google.protobuf.RpcCallback cancelCallback>;

        return $r1;
    }

    static boolean access$500(org.waveprotocol.box.server.rpc.ServerRpcControllerImpl)
    {
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $z0 = r0.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: boolean cancelled>;

        return $z0;
    }
}
