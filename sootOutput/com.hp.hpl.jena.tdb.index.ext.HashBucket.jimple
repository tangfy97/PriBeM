public final class com.hp.hpl.jena.tdb.index.ext.HashBucket extends com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageBase
{
    public static final int TRIE;
    public static final int BITLEN;
    public static final int FIELD_LENGTH;
    private int trie;
    private int bucketBitLen;

    public static com.hp.hpl.jena.tdb.index.ext.HashBucket format(com.hp.hpl.jena.tdb.base.block.Block, com.hp.hpl.jena.tdb.base.record.RecordFactory)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket $r4;
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.base.block.Block r0;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r3;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        r3 := @parameter1: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt(int)>(0);

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt(int)>(4);

        $i2 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt(int)>(8);

        $r4 = new com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $i4 = (int) -1;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.index.ext.HashBucket: void <init>(int,int,int,com.hp.hpl.jena.tdb.base.block.Block,com.hp.hpl.jena.tdb.base.record.RecordFactory,int)>($i4, $i1, $i2, r0, r3, $i0);

        return $r4;
    }

    public static com.hp.hpl.jena.tdb.index.ext.HashBucket createBlank(com.hp.hpl.jena.tdb.base.block.Block, com.hp.hpl.jena.tdb.base.record.RecordFactory)
    {
        com.hp.hpl.jena.tdb.base.block.Block r0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket $r3;
        int $i1, $i3, $i5;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r2;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $r3 = new com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $i5 = (int) -1;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.index.ext.HashBucket: void <init>(int,int,int,com.hp.hpl.jena.tdb.base.block.Block,com.hp.hpl.jena.tdb.base.record.RecordFactory,int)>($i1, $i3, $i5, r0, r2, 0);

        return $r3;
    }

    public void <init>(int, int, int, com.hp.hpl.jena.tdb.base.block.Block, com.hp.hpl.jena.tdb.base.record.RecordFactory, int)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        int i0, i1, i2, i3;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        i3 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: com.hp.hpl.jena.tdb.base.block.Block;

        r2 := @parameter4: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        i0 := @parameter5: int;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageBase: void <init>(com.hp.hpl.jena.tdb.base.block.Block,int,com.hp.hpl.jena.tdb.base.record.RecordFactory,int)>(r1, 8, r2, i0);

        r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int bucketBitLen> = i1;

        r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int trie> = i2;

        return;
    }

    public final int findIndex(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.record.Record r2;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        r2 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r2);

        return $i0;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record find(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.record.Record r2, $r4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r3;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        r2 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r2);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i0);

        return $r4;
    }

    public final boolean put(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.StorageException $r7;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r3;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int findIndex(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if $i0 >= 0 goto label1;

        $i1 = staticinvoke <org.apache.jena.atlas.lib.Alg: int decodeIndex(int)>($i0);

        goto label3;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i0);

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void set(int,com.hp.hpl.jena.tdb.base.record.Record)>($i0, r1);

        return 1;

     label3:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: boolean isFull()>();

        if $z1 == 0 goto label4;

        $r7 = new com.hp.hpl.jena.tdb.base.StorageException;

        specialinvoke $r7.<com.hp.hpl.jena.tdb.base.StorageException: void <init>(java.lang.String)>("Bucket overflow");

        throw $r7;

     label4:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>($i1, r1);

        return 1;
    }

    public void set(int, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.record.Record r2;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        int i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        i0 := @parameter0: int;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void set(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, r2);

        return;
    }

    public final boolean removeByKey(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        int $i0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int findIndex(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void remove(int)>($i0);

        return 1;
    }

    public void _reset(com.hp.hpl.jena.tdb.base.block.Block)
    {
        org.apache.jena.atlas.lib.NotImplemented $r0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r1;
        com.hp.hpl.jena.tdb.base.block.Block r2;

        r1 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        r2 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r0 = new org.apache.jena.atlas.lib.NotImplemented;

        specialinvoke $r0.<org.apache.jena.atlas.lib.NotImplemented: void <init>(java.lang.String)>("reset");

        throw $r0;
    }

    public final boolean isFull()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: boolean isFull()>();

        return $z0;
    }

    public final boolean isEmpty()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: boolean isEmpty()>();

        return $z0;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record get(int)
    {
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        int i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i0);

        return $r3;
    }

    public final int getTrieValue()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int trie>;

        return $i0;
    }

    final void setTrieValue(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int trie> = i0;

        return;
    }

    public final int getTrieBitLen()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int bucketBitLen>;

        return $i0;
    }

    public void setTrieLength(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int bucketBitLen> = i0;

        return;
    }

    final void incTrieBitLen()
    {
        int $i0, $i1;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int bucketBitLen>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int bucketBitLen> = $i1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        com.hp.hpl.jena.tdb.index.ext.HashBucket r1;
        java.lang.Integer $r2, $r3, $r4;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r5;
        java.lang.String $r6, $r7;

        r1 := @this: com.hp.hpl.jena.tdb.index.ext.HashBucket;

        $r0 = newarray (java.lang.Object)[4];

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int getId()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $i1 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int getTrieValue()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[1] = $r3;

        $i2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.ext.HashBucket: int getTrieBitLen()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r0[2] = $r4;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.ext.HashBucket: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: java.lang.String toString()>();

        $r0[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HashBucket [id=%d, trie=0x%04X, bitlen=%d]: %s", $r0);

        return $r7;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.tdb.index.ext.HashBucket: int FIELD_LENGTH> = 8;

        <com.hp.hpl.jena.tdb.index.ext.HashBucket: int BITLEN> = 8;

        <com.hp.hpl.jena.tdb.index.ext.HashBucket: int TRIE> = 4;

        return;
    }
}
