abstract class org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection extends java.lang.Object implements org.waveprotocol.box.server.rpc.ProtoCallback
{
    private final java.util.Map activeRpcs;
    private org.waveprotocol.wave.model.wave.ParticipantId loggedInUser;
    private final org.waveprotocol.box.server.rpc.ServerRpcProvider provider;

    public void <init>(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider r3;
        java.util.concurrent.ConcurrentHashMap $r1;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: java.util.Map activeRpcs> = $r1;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser> = r2;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider> = r3;

        return;
    }

    protected void expectMessages(org.waveprotocol.box.server.rpc.MessageExpectingChannel)
    {
        java.lang.Throwable $r21;
        org.waveprotocol.box.server.rpc.MessageExpectingChannel r7;
        java.util.Map $r2, $r4;
        org.waveprotocol.wave.util.logging.Log $r14;
        java.lang.String $r18, $r20;
        boolean $z0;
        org.waveprotocol.box.server.rpc.Rpc$CancelRpc $r8;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod r10;
        com.google.protobuf.Descriptors$MethodDescriptor $r11, $r17;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider $r1, $r3;
        com.google.protobuf.Service $r12;
        com.google.protobuf.Message $r13;
        java.lang.Object $r9;
        java.lang.StringBuilder $r15, $r16, $r19;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        r7 := @parameter0: org.waveprotocol.box.server.rpc.MessageExpectingChannel;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r2 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map access$100(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r1);

        entermonitor $r2;

     label1:
        $r3 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r4 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map access$100(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod) $r9;

        $r12 = r10.<org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod: com.google.protobuf.Service service>;

        $r11 = r10.<org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod: com.google.protobuf.Descriptors$MethodDescriptor method>;

        $r13 = interfaceinvoke $r12.<com.google.protobuf.Service: com.google.protobuf.Message getRequestPrototype(com.google.protobuf.Descriptors$MethodDescriptor)>($r11);

        virtualinvoke r7.<org.waveprotocol.box.server.rpc.MessageExpectingChannel: void expectMessage(com.google.protobuf.Message)>($r13);

        $r14 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log access$000()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting: ");

        $r17 = r10.<org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod: com.google.protobuf.Descriptors$MethodDescriptor method>;

        $r18 = virtualinvoke $r17.<com.google.protobuf.Descriptors$MethodDescriptor: java.lang.String getFullName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r20);

        goto label2;

     label3:
        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r21 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r21;

     label7:
        $r8 = staticinvoke <org.waveprotocol.box.server.rpc.Rpc$CancelRpc: org.waveprotocol.box.server.rpc.Rpc$CancelRpc getDefaultInstance()>();

        virtualinvoke r7.<org.waveprotocol.box.server.rpc.MessageExpectingChannel: void expectMessage(com.google.protobuf.Message)>($r8);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected abstract void sendMessage(int, com.google.protobuf.Message);

    private org.waveprotocol.wave.model.wave.ParticipantId authenticate(java.lang.String)
    {
        javax.servlet.http.HttpSession $r4;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r7;
        org.waveprotocol.box.server.authentication.SessionManager $r2, $r6;
        org.waveprotocol.box.server.rpc.ServerRpcProvider $r1, $r5;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r2 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.box.server.authentication.SessionManager access$200(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r1);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.box.server.authentication.SessionManager: javax.servlet.http.HttpSession getSessionFromToken(java.lang.String)>(r3);

        $r5 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r6 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.box.server.authentication.SessionManager access$200(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r5);

        $r7 = interfaceinvoke $r6.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r4);

        return $r7;
    }

    public void message(int, com.google.protobuf.Message)
    {
        java.lang.IllegalStateException $r5, $r27, $r47;
        org.waveprotocol.wave.model.wave.ParticipantId $r22, $r29, $r30, $r34, $r38;
        org.waveprotocol.box.server.rpc.ServerRpcController r48;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection$1 $r19;
        java.lang.Integer $r13, $r24, $r40;
        java.util.Map $r3, $r12, $r15, $r23, $r39;
        org.waveprotocol.wave.util.logging.Log $r31, $r42;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.box.server.rpc.ServerRpcControllerImpl $r18;
        com.google.protobuf.Descriptors$MethodDescriptor $r21;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod r50;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r32, $r33, $r35, $r43, $r44, $r45;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticationResult $r37;
        int i0;
        java.lang.String $r11, $r28, $r36, $r46;
        java.util.concurrent.ExecutorService $r26;
        com.google.protobuf.Descriptors$Descriptor $r4, $r16;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r1;
        org.waveprotocol.box.server.rpc.ServerRpcProvider $r2, $r14, $r25;
        com.google.protobuf.Service $r20;
        com.google.protobuf.Message r0;
        java.lang.Object $r17, $r41;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        i0 := @parameter0: int;

        r0 := @parameter1: com.google.protobuf.Message;

        $z0 = r0 instanceof org.waveprotocol.box.server.rpc.Rpc$CancelRpc;

        if $z0 == 0 goto label02;

        $r39 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: java.util.Map activeRpcs>;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r41 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        r48 = (org.waveprotocol.box.server.rpc.ServerRpcController) $r41;

        if r48 != null goto label01;

        $r47 = new java.lang.IllegalStateException;

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to cancel an RPC that is not active!");

        throw $r47;

     label01:
        $r42 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log access$000()>();

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling open RPC ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r46);

        interfaceinvoke r48.<org.waveprotocol.box.server.rpc.ServerRpcController: void cancel()>();

        goto label11;

     label02:
        $z1 = r0 instanceof org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate;

        if $z1 == 0 goto label08;

        r49 = (org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate) r0;

        $r28 = virtualinvoke r49.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate: java.lang.String getToken()>();

        $r29 = specialinvoke r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId authenticate(java.lang.String)>($r28);

        if $r29 == null goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "Auth token invalid");

        $r30 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser>;

        if $r30 == null goto label05;

        $r38 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser>;

        $z4 = virtualinvoke $r38.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r29);

        if $z4 == 0 goto label06;

     label05:
        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z6, "Session already authenticated as a different user");

        r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser> = $r29;

        $r31 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log access$000()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session authenticated as ");

        $r34 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r36);

        $r37 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticationResult: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticationResult getDefaultInstance()>();

        virtualinvoke r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: void sendMessage(int,com.google.protobuf.Message)>(i0, $r37);

        goto label11;

     label08:
        $r2 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r3 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map access$100(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r2);

        $r4 = interfaceinvoke r0.<com.google.protobuf.Message: com.google.protobuf.Descriptors$Descriptor getDescriptorForType()>();

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z2 == 0 goto label10;

        $r12 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: java.util.Map activeRpcs>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z3 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>($r13);

        if $z3 == 0 goto label09;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t invoke a new RPC with a sequence number already in use.");

        throw $r27;

     label09:
        $r14 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r15 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map access$100(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r14);

        $r16 = interfaceinvoke r0.<com.google.protobuf.Message: com.google.protobuf.Descriptors$Descriptor getDescriptorForType()>();

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r50 = (org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod) $r17;

        $r18 = new org.waveprotocol.box.server.rpc.ServerRpcControllerImpl;

        $r20 = r50.<org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod: com.google.protobuf.Service service>;

        $r21 = r50.<org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod: com.google.protobuf.Descriptors$MethodDescriptor method>;

        $r22 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.wave.model.wave.ParticipantId loggedInUser>;

        $r19 = new org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection$1;

        specialinvoke $r19.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection$1: void <init>(org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection,org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod,int)>(r1, r50, i0);

        specialinvoke $r18.<org.waveprotocol.box.server.rpc.ServerRpcControllerImpl: void <init>(com.google.protobuf.Message,com.google.protobuf.Service,com.google.protobuf.Descriptors$MethodDescriptor,org.waveprotocol.wave.model.wave.ParticipantId,com.google.protobuf.RpcCallback)>(r0, $r20, $r21, $r22, $r19);

        $r23 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: java.util.Map activeRpcs>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r18);

        $r25 = r1.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r26 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.concurrent.ExecutorService access$400(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r25);

        interfaceinvoke $r26.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r18);

        goto label11;

     label10:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got expected but unknown message  (");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for sequence: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label11:
        return;
    }

    public void 'unknown'(int, java.lang.String, com.google.protobuf.UnknownFieldSet)
    {
        com.google.protobuf.UnknownFieldSet r6;
        java.lang.IllegalStateException $r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r11;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9;
        java.lang.String r3, $r10;

        r11 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: com.google.protobuf.UnknownFieldSet;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got unknown message (type: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for sequence: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r0;
    }

    public void 'unknown'(int, java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r11;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9;
        java.lang.String r3, r6, $r10;

        r11 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got unknown message (type: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for sequence: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r0;
    }

    static java.util.Map access$300(org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection)
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection r0;
        java.util.Map $r1;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$Connection: java.util.Map activeRpcs>;

        return $r1;
    }
}
