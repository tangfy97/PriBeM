class org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.OffsetList$LocationAction
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0;

    void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1 r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point performAction(org.waveprotocol.wave.model.util.OffsetList$Container, int)
    {
        org.waveprotocol.wave.model.util.EvaluableOffsetList$Container $r18;
        org.waveprotocol.wave.model.document.util.Point$Tx $r6;
        boolean $z0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r3, $r7, $r10, $r13, $r16, $r19, $r21, $r24;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1 r2;
        org.waveprotocol.wave.model.document.util.Point$El $r27;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r14, $r25;
        org.waveprotocol.wave.model.util.EvaluableOffsetList $r17;
        java.lang.AssertionError $r15;
        org.waveprotocol.wave.model.util.OffsetList$Container r0;
        int i0;
        org.waveprotocol.wave.model.document.util.Point $r9, $r12, $r23, $r28, $r29, $r30;
        java.lang.Object $r1, $r5, $r8, $r11, $r20, $r22, $r26;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        if $r1 != null goto label04;

        $r16 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r17 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.EvaluableOffsetList access$000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r16);

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.util.EvaluableOffsetList: org.waveprotocol.wave.model.util.EvaluableOffsetList$Container sentinel()>();

        if r0 != $r18 goto label01;

        $r24 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r25 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r24);

        $r26 = interfaceinvoke $r25.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        $r27 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r26);

        return $r27;

     label01:
        $r19 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r20 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object access$200(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.util.OffsetList$Container)>($r19, r0);

        $r21 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r22 = virtualinvoke $r21.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object getLastChild(java.lang.Object)>($r20);

        $r23 = specialinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.util.Point maybeTextNodeEnd(java.lang.Object)>($r22);

        if $r23 == null goto label02;

        $r28 = $r23;

        goto label03;

     label02:
        $r28 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r20);

     label03:
        return $r28;

     label04:
        $r3 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r1);

        if $r5 == null goto label08;

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label05;

        if i0 == 0 goto label05;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label05:
        $r10 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object getPreviousSibling(java.lang.Object)>($r1);

        $r12 = specialinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.util.Point maybeTextNodeEnd(java.lang.Object)>($r11);

        if $r12 == null goto label06;

        $r29 = $r12;

        goto label07;

     label06:
        $r13 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r13);

        $r29 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r14, $r1);

     label07:
        return $r29;

     label08:
        if i0 != 0 goto label11;

        $r7 = r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object getPreviousSibling(java.lang.Object)>($r1);

        $r9 = specialinvoke r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.util.Point maybeTextNodeEnd(java.lang.Object)>($r8);

        if $r9 == null goto label09;

        $r30 = $r9;

        goto label10;

     label09:
        $r30 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r1, i0);

     label10:
        return $r30;

     label11:
        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r1, i0);

        return $r6;
    }

    private org.waveprotocol.wave.model.document.util.Point maybeTextNodeEnd(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r2, $r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1 r0;
        int $i0;
        java.lang.Object r1, $r3;
        org.waveprotocol.wave.model.document.util.Point$Tx $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object asText(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int getLength(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r3, $i0);

     label2:
        return $r5;
    }

    public volatile java.lang.Object performAction(org.waveprotocol.wave.model.util.OffsetList$Container, int)
    {
        org.waveprotocol.wave.model.util.OffsetList$Container r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1 r0;
        int i0;
        org.waveprotocol.wave.model.document.util.Point $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: org.waveprotocol.wave.model.document.util.Point performAction(org.waveprotocol.wave.model.util.OffsetList$Container,int)>(r1, i0);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/IndexedDocumentImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$1: boolean $assertionsDisabled> = $z1;

        return;
    }
}
