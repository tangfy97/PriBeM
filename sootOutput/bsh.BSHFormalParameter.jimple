class bsh.BSHFormalParameter extends bsh.SimpleNode
{
    public static final java.lang.Class UNTYPED;
    public java.lang.String name;
    public java.lang.Class type;

    void <init>(int)
    {
        int i0;
        bsh.BSHFormalParameter r0;

        r0 := @this: bsh.BSHFormalParameter;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.String getTypeDescriptor(bsh.CallStack, bsh.Interpreter, java.lang.String)
    {
        bsh.Interpreter r3;
        bsh.CallStack r2;
        bsh.BSHFormalParameter r0;
        bsh.BSHType $r5;
        int $i0;
        java.lang.String r4, $r6;
        bsh.Node $r1;

        r0 := @this: bsh.BSHFormalParameter;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        r4 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<bsh.BSHFormalParameter: int jjtGetNumChildren()>();

        if $i0 <= 0 goto label1;

        $r1 = virtualinvoke r0.<bsh.BSHFormalParameter: bsh.Node jjtGetChild(int)>(0);

        $r5 = (bsh.BSHType) $r1;

        $r6 = virtualinvoke $r5.<bsh.BSHType: java.lang.String getTypeDescriptor(bsh.CallStack,bsh.Interpreter,java.lang.String)>(r2, r3, r4);

        return $r6;

     label1:
        return "Ljava/lang/Object;";
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r5;
        bsh.CallStack r4;
        bsh.BSHFormalParameter r0;
        bsh.BSHType $r6;
        int $i0;
        java.lang.Class $r1, $r2, $r7;
        bsh.Node $r3;

        r0 := @this: bsh.BSHFormalParameter;

        r4 := @parameter0: bsh.CallStack;

        r5 := @parameter1: bsh.Interpreter;

        $i0 = virtualinvoke r0.<bsh.BSHFormalParameter: int jjtGetNumChildren()>();

        if $i0 <= 0 goto label1;

        $r3 = virtualinvoke r0.<bsh.BSHFormalParameter: bsh.Node jjtGetChild(int)>(0);

        $r6 = (bsh.BSHType) $r3;

        $r7 = virtualinvoke $r6.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r4, r5);

        r0.<bsh.BSHFormalParameter: java.lang.Class type> = $r7;

        goto label2;

     label1:
        $r1 = <bsh.BSHFormalParameter: java.lang.Class UNTYPED>;

        r0.<bsh.BSHFormalParameter: java.lang.Class type> = $r1;

     label2:
        $r2 = r0.<bsh.BSHFormalParameter: java.lang.Class type>;

        return $r2;
    }

    static void <clinit>()
    {
        <bsh.BSHFormalParameter: java.lang.Class UNTYPED> = null;

        return;
    }
}
