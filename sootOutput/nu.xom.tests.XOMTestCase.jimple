public class nu.xom.tests.XOMTestCase extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.tests.XOMTestCase r0;

        r0 := @this: nu.xom.tests.XOMTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void assertEquals(nu.xom.Text, nu.xom.Text)
    {
        nu.xom.Text r0, r1;

        r0 := @parameter0: nu.xom.Text;

        r1 := @parameter1: nu.xom.Text;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Text,nu.xom.Text)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Text, nu.xom.Text)
    {
        java.lang.String r2, $r3, $r4;
        nu.xom.Text r0, r1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Text;

        r0 := @parameter2: nu.xom.Text;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.Text: java.lang.String getValue()>();

        $r4 = virtualinvoke r0.<nu.xom.Text: java.lang.String getValue()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        return;
    }

    private static void nullCheck(java.lang.String, nu.xom.Node, nu.xom.Node)
    {
        junit.framework.ComparisonFailure $r2, $r5;
        java.lang.String r3, $r4, $r6;
        nu.xom.Node r0, r1;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: nu.xom.Node;

        r1 := @parameter2: nu.xom.Node;

        if r0 != null goto label1;

        $r5 = new junit.framework.ComparisonFailure;

        $r6 = virtualinvoke r1.<nu.xom.Node: java.lang.String toXML()>();

        specialinvoke $r5.<junit.framework.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r3, null, $r6);

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r2 = new junit.framework.ComparisonFailure;

        $r4 = virtualinvoke r0.<nu.xom.Node: java.lang.String toXML()>();

        specialinvoke $r2.<junit.framework.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r3, $r4, null);

        throw $r2;

     label2:
        return;
    }

    public static void assertEquals(nu.xom.Attribute, nu.xom.Attribute)
    {
        nu.xom.Attribute r0, r1;

        r0 := @parameter0: nu.xom.Attribute;

        r1 := @parameter1: nu.xom.Attribute;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Attribute,nu.xom.Attribute)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Attribute, nu.xom.Attribute)
    {
        java.lang.StringBuffer $r13, $r14, $r15, $r17, $r18, $r19;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        nu.xom.Attribute r0, r1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Attribute;

        r0 := @parameter2: nu.xom.Attribute;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getValue()>();

        $r4 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getValue()>();

        $r5 = "xml:base";

        $r6 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        return;

     label2:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("../");

        if $z2 == 0 goto label3;

        $r21 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(2);

        $z5 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>($r21);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertTrue(java.lang.String,boolean)>(r2, $z5);

        goto label8;

     label3:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>($r16);

        if $z3 != 0 goto label4;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $z4 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>($r20);

        if $z4 == 0 goto label5;

     label4:
        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        staticinvoke <nu.xom.tests.XOMTestCase: void assertTrue(java.lang.String,boolean)>(r2, $z6);

        goto label8;

     label7:
        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        $r7 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $r8 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getLocalName()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r7, $r8);

        $r9 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r10 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r9, $r10);

        $r11 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $r12 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r11, $r12);

     label8:
        return;
    }

    public static void assertEquals(nu.xom.DocType, nu.xom.DocType)
    {
        nu.xom.DocType r0, r1;

        r0 := @parameter0: nu.xom.DocType;

        r1 := @parameter1: nu.xom.DocType;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.DocType,nu.xom.DocType)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.DocType, nu.xom.DocType)
    {
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r8;
        nu.xom.DocType r0, r1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.DocType;

        r0 := @parameter2: nu.xom.DocType;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.DocType: java.lang.String getPublicID()>();

        $r4 = virtualinvoke r0.<nu.xom.DocType: java.lang.String getPublicID()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        $r5 = virtualinvoke r1.<nu.xom.DocType: java.lang.String getSystemID()>();

        $r6 = virtualinvoke r0.<nu.xom.DocType: java.lang.String getSystemID()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6);

        $r7 = virtualinvoke r1.<nu.xom.DocType: java.lang.String getRootElementName()>();

        $r8 = virtualinvoke r0.<nu.xom.DocType: java.lang.String getRootElementName()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r7, $r8);

        return;
    }

    public static void assertEquals(nu.xom.Element, nu.xom.Element)
    {
        nu.xom.Element r0, r1;

        r0 := @parameter0: nu.xom.Element;

        r1 := @parameter1: nu.xom.Element;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Element,nu.xom.Element)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Element, nu.xom.Element)
    {
        nu.xom.Element r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19;
        nu.xom.Attribute $r17, $r20;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Element;

        r0 := @parameter2: nu.xom.Element;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.Element: java.lang.String getLocalName()>();

        $r4 = virtualinvoke r0.<nu.xom.Element: java.lang.String getLocalName()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        $r5 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespacePrefix()>();

        $r6 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespacePrefix()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6);

        $r7 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r7, $r8);

        $i0 = virtualinvoke r1.<nu.xom.Element: int getAttributeCount()>();

        $i1 = virtualinvoke r0.<nu.xom.Element: int getAttributeCount()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,int,int)>(r2, $i0, $i1);

        i5 = 0;

     label2:
        $i2 = virtualinvoke r1.<nu.xom.Element: int getAttributeCount()>();

        if i5 >= $i2 goto label3;

        $r17 = virtualinvoke r1.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i5);

        $r18 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $r19 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $r20 = virtualinvoke r0.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>($r18, $r19);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertNotNull(java.lang.String,java.lang.Object)>(r2, $r20);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Attribute,nu.xom.Attribute)>(r2, $r17, $r20);

        i5 = i5 + 1;

        goto label2;

     label3:
        i6 = 0;

     label4:
        $i3 = virtualinvoke r1.<nu.xom.Element: int getNamespaceDeclarationCount()>();

        if i6 >= $i3 goto label5;

        $r13 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespacePrefix(int)>(i6);

        $r14 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r13);

        $r15 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r13);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertNotNull(java.lang.String,java.lang.Object)>(r2, $r15);

        $r16 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r13);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r14, $r16);

        i6 = i6 + 1;

        goto label4;

     label5:
        i7 = 0;

     label6:
        $i4 = virtualinvoke r0.<nu.xom.Element: int getNamespaceDeclarationCount()>();

        if i7 >= $i4 goto label7;

        $r9 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespacePrefix(int)>(i7);

        $r10 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r9);

        $r11 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r9);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertNotNull(java.lang.String,java.lang.Object)>(r2, $r11);

        $r12 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r9);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r10, $r12);

        i7 = i7 + 1;

        goto label6;

     label7:
        staticinvoke <nu.xom.tests.XOMTestCase: void compareChildren(java.lang.String,nu.xom.Element,nu.xom.Element)>(r2, r1, r0);

        return;
    }

    private static boolean hasAdjacentTextNodes(nu.xom.Element)
    {
        nu.xom.Element r0;
        nu.xom.Node $r1;
        int $i0, i1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, z2;

        r0 := @parameter0: nu.xom.Element;

        z2 = 0;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label6;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        $z0 = $r1 instanceof nu.xom.Text;

        if $z0 == 0 goto label4;

        if z2 == 0 goto label2;

        return 1;

     label2:
        $r2 = "";

        $r3 = virtualinvoke $r1.<nu.xom.Node: java.lang.String getValue()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return 0;
    }

    private static void compareChildren(java.lang.String, nu.xom.Element, nu.xom.Element)
    {
        nu.xom.Element r0, r1, r6, r7;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        nu.xom.Node $r3, $r4, $r5, r8;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: nu.xom.Element;

        r1 := @parameter2: nu.xom.Element;

        r6 = r0;

        r7 = r1;

        $z0 = staticinvoke <nu.xom.tests.XOMTestCase: boolean hasAdjacentTextNodes(nu.xom.Element)>(r0);

        if $z0 == 0 goto label01;

        r6 = staticinvoke <nu.xom.tests.XOMTestCase: nu.xom.Element combineTextNodes(nu.xom.Element)>(r0);

     label01:
        $z1 = staticinvoke <nu.xom.tests.XOMTestCase: boolean hasAdjacentTextNodes(nu.xom.Element)>(r1);

        if $z1 == 0 goto label02;

        r7 = staticinvoke <nu.xom.tests.XOMTestCase: nu.xom.Element combineTextNodes(nu.xom.Element)>(r1);

     label02:
        $i0 = virtualinvoke r6.<nu.xom.Element: int getChildCount()>();

        $i1 = virtualinvoke r7.<nu.xom.Element: int getChildCount()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,int,int)>(r2, $i0, $i1);

        i3 = 0;

     label03:
        if i3 >= $i0 goto label05;

        $r4 = virtualinvoke r6.<nu.xom.Element: nu.xom.Node getChild(int)>(i3);

        $z4 = $r4 instanceof nu.xom.Text;

        if $z4 == 0 goto label04;

        $r5 = virtualinvoke r7.<nu.xom.Element: nu.xom.Node getChild(int)>(i3);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, $r4, $r5);

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        i4 = 0;

        $i2 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        i5 = 0;

     label06:
        if i5 >= $i2 goto label11;

        $r3 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i5);

        $z2 = $r3 instanceof nu.xom.Text;

        if $z2 == 0 goto label07;

        goto label10;

     label07:
        r8 = virtualinvoke r1.<nu.xom.Element: nu.xom.Node getChild(int)>(i4);

        i4 = i4 + 1;

     label08:
        $z3 = r8 instanceof nu.xom.Text;

        if $z3 == 0 goto label09;

        r8 = virtualinvoke r1.<nu.xom.Element: nu.xom.Node getChild(int)>(i4);

        i4 = i4 + 1;

        goto label08;

     label09:
        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, $r3, r8);

     label10:
        i5 = i5 + 1;

        goto label06;

     label11:
        return;
    }

    private static nu.xom.Element combineTextNodes(nu.xom.Element)
    {
        nu.xom.Element r3, $r12;
        java.lang.StringBuffer $r14;
        int $i0, i1, $i3;
        java.lang.String $r6, $r7, $r8, $r10;
        nu.xom.Comment $r13;
        boolean $z0, $z1, $z2;
        nu.xom.Node $r4, $r5, $r9, r11;

        r3 := @parameter0: nu.xom.Element;

        $r12 = new nu.xom.Element;

        specialinvoke $r12.<nu.xom.Element: void <init>(java.lang.String)>("a");

        $r13 = new nu.xom.Comment;

        specialinvoke $r13.<nu.xom.Comment: void <init>(java.lang.String)>("c");

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r3.<nu.xom.Element: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label8;

        $r4 = virtualinvoke r3.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        r11 = $r4;

        $z0 = $r4 instanceof nu.xom.Text;

        if $z0 == 0 goto label6;

        $r6 = "";

        $r7 = virtualinvoke $r4.<nu.xom.Node: java.lang.String getValue()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        goto label7;

     label2:
        virtualinvoke $r14.<java.lang.StringBuffer: void setLength(int)>(0);

     label3:
        $r8 = virtualinvoke r11.<nu.xom.Node: java.lang.String getValue()>();

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        i1 = i1 + 1;

        if i1 != $i0 goto label4;

        goto label5;

     label4:
        $r9 = virtualinvoke r3.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        r11 = $r9;

        $z2 = $r9 instanceof nu.xom.Text;

        if $z2 != 0 goto label3;

     label5:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        $r10 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<nu.xom.Element: void appendChild(java.lang.String)>($r10);

        goto label7;

     label6:
        $r5 = virtualinvoke $r13.<nu.xom.Comment: nu.xom.Node copy()>();

        virtualinvoke $r12.<nu.xom.Element: void appendChild(nu.xom.Node)>($r5);

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        return $r12;
    }

    public static void assertEquals(nu.xom.Document, nu.xom.Document)
    {
        nu.xom.Document r0, r1;

        r0 := @parameter0: nu.xom.Document;

        r1 := @parameter1: nu.xom.Document;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Document,nu.xom.Document)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Document, nu.xom.Document)
    {
        nu.xom.Node $r3, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String r2;
        nu.xom.Document r0, r1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Document;

        r0 := @parameter2: nu.xom.Document;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $i0 = virtualinvoke r1.<nu.xom.Document: int getChildCount()>();

        $i1 = virtualinvoke r0.<nu.xom.Document: int getChildCount()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,int,int)>(r2, $i0, $i1);

        i3 = 0;

     label2:
        $i2 = virtualinvoke r0.<nu.xom.Document: int getChildCount()>();

        if i3 >= $i2 goto label3;

        $r3 = virtualinvoke r1.<nu.xom.Document: nu.xom.Node getChild(int)>(i3);

        $r4 = virtualinvoke r0.<nu.xom.Document: nu.xom.Node getChild(int)>(i3);

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, $r3, $r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void assertEquals(nu.xom.Comment, nu.xom.Comment)
    {
        nu.xom.Comment r0, r1;

        r0 := @parameter0: nu.xom.Comment;

        r1 := @parameter1: nu.xom.Comment;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Comment,nu.xom.Comment)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Comment, nu.xom.Comment)
    {
        java.lang.String r2, $r3, $r4;
        nu.xom.Comment r0, r1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Comment;

        r0 := @parameter2: nu.xom.Comment;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.Comment: java.lang.String getValue()>();

        $r4 = virtualinvoke r0.<nu.xom.Comment: java.lang.String getValue()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        return;
    }

    public static void assertEquals(nu.xom.ProcessingInstruction, nu.xom.ProcessingInstruction)
    {
        nu.xom.ProcessingInstruction r0, r1;

        r0 := @parameter0: nu.xom.ProcessingInstruction;

        r1 := @parameter1: nu.xom.ProcessingInstruction;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.ProcessingInstruction,nu.xom.ProcessingInstruction)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.ProcessingInstruction, nu.xom.ProcessingInstruction)
    {
        nu.xom.ProcessingInstruction r0, r1;
        java.lang.String r2, $r3, $r4, $r5, $r6;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.ProcessingInstruction;

        r0 := @parameter2: nu.xom.ProcessingInstruction;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.ProcessingInstruction: java.lang.String getValue()>();

        $r4 = virtualinvoke r0.<nu.xom.ProcessingInstruction: java.lang.String getValue()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        $r5 = virtualinvoke r1.<nu.xom.ProcessingInstruction: java.lang.String getTarget()>();

        $r6 = virtualinvoke r0.<nu.xom.ProcessingInstruction: java.lang.String getTarget()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Namespace, nu.xom.Namespace)
    {
        nu.xom.Namespace r0, r1;
        java.lang.String r2, $r3, $r4, $r5, $r6;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Namespace;

        r0 := @parameter2: nu.xom.Namespace;

        if r0 != r1 goto label1;

        return;

     label1:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

        $r3 = virtualinvoke r1.<nu.xom.Namespace: java.lang.String getValue()>();

        $r4 = virtualinvoke r0.<nu.xom.Namespace: java.lang.String getValue()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        $r5 = virtualinvoke r1.<nu.xom.Namespace: java.lang.String getPrefix()>();

        $r6 = virtualinvoke r0.<nu.xom.Namespace: java.lang.String getPrefix()>();

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6);

        return;
    }

    public static void assertEquals(nu.xom.Node, nu.xom.Node)
    {
        nu.xom.Node r0, r1;

        r0 := @parameter0: nu.xom.Node;

        r1 := @parameter1: nu.xom.Node;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Node,nu.xom.Node)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, nu.xom.Node, nu.xom.Node)
    {
        nu.xom.ProcessingInstruction $r14, $r15;
        junit.framework.ComparisonFailure $r27;
        nu.xom.Comment $r16, $r17;
        nu.xom.Text $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        nu.xom.Node r0, r1;
        nu.xom.Element $r22, $r23;
        java.lang.ClassCastException $r26;
        nu.xom.Namespace $r10, $r11;
        java.lang.StringBuffer $r4, $r5, $r8, $r28, $r29, $r30, $r33, $r34, $r37;
        java.lang.String r2, $r7, $r9, $r32, $r36, $r38, $r39, $r40;
        nu.xom.DocType $r18, $r19;
        java.lang.IllegalArgumentException $r3;
        nu.xom.Attribute $r12, $r13;
        java.lang.Class $r6, $r31, $r35;
        nu.xom.Document $r24, $r25;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: nu.xom.Node;

        r0 := @parameter2: nu.xom.Node;

        if r0 != r1 goto label01;

        return;

     label01:
        staticinvoke <nu.xom.tests.XOMTestCase: void nullCheck(java.lang.String,nu.xom.Node,nu.xom.Node)>(r2, r1, r0);

     label02:
        $z0 = r1 instanceof nu.xom.Document;

        if $z0 == 0 goto label03;

        $r25 = (nu.xom.Document) r1;

        $r24 = (nu.xom.Document) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Document,nu.xom.Document)>(r2, $r25, $r24);

        goto label11;

     label03:
        $z1 = r1 instanceof nu.xom.Element;

        if $z1 == 0 goto label04;

        $r23 = (nu.xom.Element) r1;

        $r22 = (nu.xom.Element) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Element,nu.xom.Element)>(r2, $r23, $r22);

        goto label11;

     label04:
        $z2 = r1 instanceof nu.xom.Text;

        if $z2 == 0 goto label05;

        $r21 = (nu.xom.Text) r1;

        $r20 = (nu.xom.Text) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Text,nu.xom.Text)>(r2, $r21, $r20);

        goto label11;

     label05:
        $z3 = r1 instanceof nu.xom.DocType;

        if $z3 == 0 goto label06;

        $r19 = (nu.xom.DocType) r1;

        $r18 = (nu.xom.DocType) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.DocType,nu.xom.DocType)>(r2, $r19, $r18);

        goto label11;

     label06:
        $z4 = r1 instanceof nu.xom.Comment;

        if $z4 == 0 goto label07;

        $r17 = (nu.xom.Comment) r1;

        $r16 = (nu.xom.Comment) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Comment,nu.xom.Comment)>(r2, $r17, $r16);

        goto label11;

     label07:
        $z5 = r1 instanceof nu.xom.ProcessingInstruction;

        if $z5 == 0 goto label08;

        $r15 = (nu.xom.ProcessingInstruction) r1;

        $r14 = (nu.xom.ProcessingInstruction) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.ProcessingInstruction,nu.xom.ProcessingInstruction)>(r2, $r15, $r14);

        goto label11;

     label08:
        $z6 = r1 instanceof nu.xom.Attribute;

        if $z6 == 0 goto label09;

        $r13 = (nu.xom.Attribute) r1;

        $r12 = (nu.xom.Attribute) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Attribute,nu.xom.Attribute)>(r2, $r13, $r12);

        goto label11;

     label09:
        $z7 = r1 instanceof nu.xom.Namespace;

        if $z7 == 0 goto label10;

        $r11 = (nu.xom.Namespace) r1;

        $r10 = (nu.xom.Namespace) r0;

        staticinvoke <nu.xom.tests.XOMTestCase: void assertEquals(java.lang.String,nu.xom.Namespace,nu.xom.Namespace)>(r2, $r11, $r10);

        goto label11;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected node type ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label11:
        goto label13;

     label12:
        $r26 := @caughtexception;

        $r27 = new junit.framework.ComparisonFailure;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; Mismatched node types: ");

        $r31 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r32 = virtualinvoke $r31.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" != ");

        $r35 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        $r39 = virtualinvoke r1.<nu.xom.Node: java.lang.String toXML()>();

        $r40 = virtualinvoke r0.<nu.xom.Node: java.lang.String toXML()>();

        specialinvoke $r27.<junit.framework.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r38, $r39, $r40);

        throw $r27;

     label13:
        return;

        catch java.lang.ClassCastException from label02 to label11 with label12;
    }
}
