final enum class org.apache.lucene.util.packed.PackedInts$Format$2 extends org.apache.lucene.util.packed.PackedInts$Format
{
    static final boolean $assertionsDisabled;

    void <init>(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.String r1;
        org.apache.lucene.util.packed.PackedInts$Format$2 r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format$2;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: void <init>(java.lang.String,int,int,org.apache.lucene.util.packed.PackedInts$1)>(r1, i0, i1, null);

        return;
    }

    public int longCount(int, int, int)
    {
        int i0, i1, i2, $i3, i4;
        org.apache.lucene.util.packed.PackedInts$Format$2 r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format$2;

        i4 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = 64 / i0;

        $d1 = (double) i2;

        $d0 = (double) i1;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $i3 = (int) $d3;

        return $i3;
    }

    public boolean isSupported(int)
    {
        int i0;
        org.apache.lucene.util.packed.PackedInts$Format$2 r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format$2;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.lucene.util.packed.Packed64SingleBlock: boolean isSupported(int)>(i0);

        return $z0;
    }

    public float overheadPerValue(int)
    {
        java.lang.AssertionError $r1;
        int i0, $i1, $i2;
        float $f0, $f1, $f2;
        org.apache.lucene.util.packed.PackedInts$Format$2 r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$Format$2;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$Format$2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format$2: boolean isSupported(int)>(i0);

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = 64 / i0;

        $i2 = 64 % i0;

        $f1 = (float) $i2;

        $f0 = (float) $i1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts$Format$2: boolean $assertionsDisabled> = $z1;

        return;
    }
}
