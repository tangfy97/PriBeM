public class com.google.gwt.user.server.rpc.RPCServletUtils extends java.lang.Object
{
    static final int BUFFER_SIZE;
    private static final java.lang.String ACCEPT_ENCODING;
    private static final java.lang.String ATTACHMENT;
    private static final java.lang.String CHARSET_UTF8;
    private static final java.lang.String CONTENT_DISPOSITION;
    private static final java.lang.String CONTENT_ENCODING;
    private static final java.lang.String CONTENT_ENCODING_GZIP;
    private static final java.lang.String CONTENT_TYPE_APPLICATION_JSON_UTF8;
    private static final java.lang.String GENERIC_FAILURE_MSG;
    private static final java.lang.String GWT_RPC_CONTENT_TYPE;
    private static final int UNCOMPRESSED_BYTE_SIZE_LIMIT;
    static final boolean $assertionsDisabled;

    public static boolean acceptsGzipEncoding(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        int $i0, $i2;
        java.lang.String $r1;
        java.lang.AssertionError $r3;
        boolean $z0, $z1;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $z0 = <com.google.gwt.user.server.rpc.RPCServletUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept-Encoding");

        if null != $r1 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("gzip");

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static boolean exceedsUncompressedContentLengthLimit(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 * 2;

        if $i1 <= 256 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isExpectedException(java.lang.reflect.Method, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.Class[] $r1;
        java.lang.AssertionError $r5, $r6, $r7;
        int $i0, i1, i2;
        java.lang.Class $r3, r4;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = <com.google.gwt.user.server.rpc.RPCServletUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <com.google.gwt.user.server.rpc.RPCServletUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $i0 = lengthof $r1;

        if $i0 > 0 goto label3;

        return 0;

     label3:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        i1 = lengthof $r1;

        i2 = 0;

     label4:
        if i2 >= i1 goto label7;

        r4 = $r1[i2];

        $z2 = <com.google.gwt.user.server.rpc.RPCServletUtils: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        if r4 != null goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $z3 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z3 == 0 goto label6;

        return 1;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        return 0;
    }

    public static java.lang.String readContent(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String) throws java.io.IOException, javax.servlet.ServletException
    {
        java.lang.Throwable $r7;
        byte[] $r6;
        java.io.ByteArrayOutputStream $r9;
        javax.servlet.ServletInputStream $r3;
        javax.servlet.http.HttpServletRequest r2;
        int $i0, $i2;
        java.lang.String r0, r1, $r5, $r8;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label01;

        staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: void checkContentTypeIgnoreCase(javax.servlet.http.HttpServletRequest,java.lang.String)>(r2, r0);

     label01:
        if r1 == null goto label02;

        staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: void checkCharacterEncodingIgnoreCase(javax.servlet.http.HttpServletRequest,java.lang.String)>(r2, r1);

     label02:
        $r3 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: javax.servlet.ServletInputStream getInputStream()>();

        $r6 = newarray (byte)[4096];

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

     label03:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r6);

        $i2 = (int) -1;

        if $i0 != $i2 goto label04;

        goto label05;

     label04:
        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r6, 0, $i0);

        goto label03;

     label05:
        if r1 == null goto label06;

        $r8 = r1;

        goto label07;

     label06:
        $r8 = "UTF-8";

     label07:
        $r5 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>($r8);

     label08:
        if $r3 == null goto label09;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label09:
        return $r5;

     label10:
        $r7 := @caughtexception;

     label11:
        if $r3 == null goto label12;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label12:
        throw $r7;

        catch java.lang.Throwable from label03 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static java.lang.String readContentAsGwtRpc(javax.servlet.http.HttpServletRequest) throws java.io.IOException, javax.servlet.ServletException
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String readContent(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r0, "text/x-gwt-rpc", "UTF-8");

        return $r1;
    }

    public static java.lang.String readContentAsUtf8(javax.servlet.http.HttpServletRequest) throws java.io.IOException, javax.servlet.ServletException
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String readContent(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r0, null, null);

        return $r1;
    }

    public static java.lang.String readContentAsUtf8(javax.servlet.http.HttpServletRequest, boolean) throws java.io.IOException, javax.servlet.ServletException
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String readContent(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r0, "text/x-gwt-rpc", "UTF-8");

        return $r1;
    }

    public static void setGzipEncodingHeader(javax.servlet.http.HttpServletResponse)
    {
        javax.servlet.http.HttpServletResponse r0;

        r0 := @parameter0: javax.servlet.http.HttpServletResponse;

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-Encoding", "gzip");

        return;
    }

    public static boolean shouldGzipResponseContent(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: boolean acceptsGzipEncoding(javax.servlet.http.HttpServletRequest)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: boolean exceedsUncompressedContentLengthLimit(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static void writeResponse(javax.servlet.ServletContext, javax.servlet.http.HttpServletResponse, java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        byte[] $r1, r9;
        java.io.ByteArrayOutputStream $r4, r10;
        javax.servlet.ServletOutputStream $r3;
        int $i0, $i1;
        java.lang.String r0;
        boolean z0;
        javax.servlet.http.HttpServletResponse r2;
        java.io.IOException $r8, r12;
        java.util.zip.GZIPOutputStream $r5, r11;
        javax.servlet.ServletContext r6;

        r6 := @parameter0: javax.servlet.ServletContext;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        r0 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        r9 = $r1;

        if z0 == 0 goto label12;

        r10 = null;

        r11 = null;

        r12 = null;

     label01:
        $r4 = new java.io.ByteArrayOutputStream;

        $i1 = lengthof $r1;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>(int)>($i1);

        r10 = $r4;

        $r5 = new java.util.zip.GZIPOutputStream;

        specialinvoke $r5.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r4);

        r11 = $r5;

        virtualinvoke $r5.<java.util.zip.GZIPOutputStream: void write(byte[])>($r1);

        virtualinvoke $r5.<java.util.zip.GZIPOutputStream: void finish()>();

        virtualinvoke $r5.<java.util.zip.GZIPOutputStream: void flush()>();

        staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: void setGzipEncodingHeader(javax.servlet.http.HttpServletResponse)>(r2);

        r9 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if null == $r5 goto label03;

        virtualinvoke $r5.<java.util.zip.GZIPOutputStream: void close()>();

     label03:
        if null == $r4 goto label11;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void close()>();

        goto label11;

     label04:
        $r8 := @caughtexception;

        r12 = $r8;

     label05:
        if null == r11 goto label06;

        virtualinvoke r11.<java.util.zip.GZIPOutputStream: void close()>();

     label06:
        if null == r10 goto label11;

        virtualinvoke r10.<java.io.ByteArrayOutputStream: void close()>();

        goto label11;

     label07:
        $r7 := @caughtexception;

     label08:
        if null == r11 goto label09;

        virtualinvoke r11.<java.util.zip.GZIPOutputStream: void close()>();

     label09:
        if null == r10 goto label10;

        virtualinvoke r10.<java.io.ByteArrayOutputStream: void close()>();

     label10:
        throw $r7;

     label11:
        if r12 == null goto label12;

        interfaceinvoke r6.<javax.servlet.ServletContext: void log(java.lang.String,java.lang.Throwable)>("Unable to compress response", r12);

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int)>(500);

        return;

     label12:
        $i0 = lengthof r9;

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setContentLength(int)>($i0);

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("application/json; charset=utf-8");

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Content-Disposition", "attachment");

        $r3 = interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        virtualinvoke $r3.<javax.servlet.ServletOutputStream: void write(byte[])>(r9);

        return;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public static void writeResponseForUnexpectedFailure(javax.servlet.ServletContext, javax.servlet.http.HttpServletResponse, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.io.PrintWriter $r8;
        byte[] $r5;
        java.lang.IllegalStateException $r7;
        javax.servlet.http.HttpServletResponse r2;
        java.io.IOException $r6;
        javax.servlet.ServletOutputStream $r3;
        javax.servlet.ServletContext r0;
        java.lang.String $r4;

        r0 := @parameter0: javax.servlet.ServletContext;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        r1 := @parameter2: java.lang.Throwable;

        interfaceinvoke r0.<javax.servlet.ServletContext: void log(java.lang.String,java.lang.Throwable)>("Exception while dispatching incoming RPC call", r1);

     label1:
        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/plain");

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(500);

     label2:
        $r3 = interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        $r4 = "The call failed on the server; see server log for details";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r3.<javax.servlet.ServletOutputStream: void write(byte[])>($r5);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        virtualinvoke $r8.<java.io.PrintWriter: void write(java.lang.String)>("The call failed on the server; see server log for details");

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke r0.<javax.servlet.ServletContext: void log(java.lang.String,java.lang.Throwable)>("respondWithUnexpectedFailure failed while sending the previous failure to the client", $r6);

     label7:
        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.io.IOException from label1 to label5 with label6;
    }

    private static void checkCharacterEncodingIgnoreCase(javax.servlet.http.HttpServletRequest, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r15;
        javax.servlet.http.HttpServletRequest r0;
        int $i0, $i2;
        java.lang.String $r1, r7, $r10, $r11, $r12, $r13;
        boolean z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r14;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r7 := @parameter1: java.lang.String;

        z0 = 0;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getCharacterEncoding()>();

        if $r1 == null goto label1;

        $r11 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r12 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int indexOf(java.lang.String)>($r12);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        z0 = 1;

     label1:
        if z0 != 0 goto label4;

        $r15 = new javax.servlet.ServletException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Character Encoding is \'");

        if $r1 != null goto label2;

        $r13 = "(null)";

        goto label3;

     label2:
        $r13 = $r1;

     label3:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.  Expected \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<javax.servlet.ServletException: void <init>(java.lang.String)>($r10);

        throw $r15;

     label4:
        return;
    }

    private static void checkContentTypeIgnoreCase(javax.servlet.http.HttpServletRequest, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r2;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, r7, $r10, $r11, $r12, r13, $r14;
        boolean $z0, z1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r7 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>();

        r13 = $r1;

        z1 = 0;

        if $r1 == null goto label1;

        $r11 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        r13 = $r11;

        $r12 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>($r12);

        if $z0 == 0 goto label1;

        z1 = 1;

     label1:
        if z1 != 0 goto label4;

        $r2 = new javax.servlet.ServletException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Content-Type was \'");

        if r13 != null goto label2;

        $r14 = "(null)";

        goto label3;

     label2:
        $r14 = r13;

     label3:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Expected \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.servlet.ServletException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label4:
        return;
    }

    private void <init>()
    {
        com.google.gwt.user.server.rpc.RPCServletUtils r0;

        r0 := @this: com.google.gwt.user.server.rpc.RPCServletUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.google.gwt.user.server.rpc.RPCServletUtils: int UNCOMPRESSED_BYTE_SIZE_LIMIT> = 256;

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String GWT_RPC_CONTENT_TYPE> = "text/x-gwt-rpc";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String GENERIC_FAILURE_MSG> = "The call failed on the server; see server log for details";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String CONTENT_TYPE_APPLICATION_JSON_UTF8> = "application/json; charset=utf-8";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String CONTENT_ENCODING_GZIP> = "gzip";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String CONTENT_ENCODING> = "Content-Encoding";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String CONTENT_DISPOSITION> = "Content-Disposition";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String CHARSET_UTF8> = "UTF-8";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String ATTACHMENT> = "attachment";

        <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String ACCEPT_ENCODING> = "Accept-Encoding";

        <com.google.gwt.user.server.rpc.RPCServletUtils: int BUFFER_SIZE> = 4096;

        $r0 = class "Lcom/google/gwt/user/server/rpc/RPCServletUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.google.gwt.user.server.rpc.RPCServletUtils: boolean $assertionsDisabled> = $z1;

        return;
    }
}
