public class org.springframework.context.event.EventPublicationInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean
{
    private java.lang.reflect.Constructor applicationEventClassConstructor;
    private org.springframework.context.ApplicationEventPublisher applicationEventPublisher;

    public void <init>()
    {
        org.springframework.context.event.EventPublicationInterceptor r0;

        r0 := @this: org.springframework.context.event.EventPublicationInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setApplicationEventClass(java.lang.Class)
    {
        java.lang.NoSuchMethodException $r7;
        org.springframework.context.event.EventPublicationInterceptor r4;
        java.lang.reflect.Constructor $r6;
        java.lang.String $r10, $r14;
        boolean $z0, $z1;
        java.lang.Class[] $r5;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.Class r0, $r1, $r3;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;

        r4 := @this: org.springframework.context.event.EventPublicationInterceptor;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lorg/springframework/context/ApplicationEvent;";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = class "Lorg/springframework/context/ApplicationEvent;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("applicationEventClass needs to extend ApplicationEvent");

        throw $r2;

     label2:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/lang/Object;";

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

        r4.<org.springframework.context.event.EventPublicationInterceptor: java.lang.reflect.Constructor applicationEventClassConstructor> = $r6;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("applicationEventClass [");

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not have the required Object constructor: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label5:
        return;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    public void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
    {
        org.springframework.context.ApplicationEventPublisher r1;
        org.springframework.context.event.EventPublicationInterceptor r0;

        r0 := @this: org.springframework.context.event.EventPublicationInterceptor;

        r1 := @parameter0: org.springframework.context.ApplicationEventPublisher;

        r0.<org.springframework.context.event.EventPublicationInterceptor: org.springframework.context.ApplicationEventPublisher applicationEventPublisher> = r1;

        return;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        org.springframework.context.event.EventPublicationInterceptor r0;
        java.lang.IllegalArgumentException $r2;
        java.lang.reflect.Constructor $r1;

        r0 := @this: org.springframework.context.event.EventPublicationInterceptor;

        $r1 = r0.<org.springframework.context.event.EventPublicationInterceptor: java.lang.reflect.Constructor applicationEventClassConstructor>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("applicationEventClass is required");

        throw $r2;

     label1:
        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Object[] $r3;
        org.springframework.context.event.EventPublicationInterceptor r2;
        java.lang.reflect.Constructor $r4;
        org.springframework.context.ApplicationEvent r7;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.context.ApplicationEventPublisher $r8;
        java.lang.Object $r1, $r5, $r6;

        r2 := @this: org.springframework.context.event.EventPublicationInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        $r4 = r2.<org.springframework.context.event.EventPublicationInterceptor: java.lang.reflect.Constructor applicationEventClassConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r3[0] = $r5;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        r7 = (org.springframework.context.ApplicationEvent) $r6;

        $r8 = r2.<org.springframework.context.event.EventPublicationInterceptor: org.springframework.context.ApplicationEventPublisher applicationEventPublisher>;

        interfaceinvoke $r8.<org.springframework.context.ApplicationEventPublisher: void publishEvent(org.springframework.context.ApplicationEvent)>(r7);

        return $r1;
    }
}
