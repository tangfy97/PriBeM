public class org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil extends java.lang.Object
{
    private static final java.lang.String EDITOR_WEBDRIVER_PROPERTY;
    private static org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema documentSchema;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil r0;

        r0 := @this: org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setDocumentSchema(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema documentSchema> = r0;

        return;
    }

    public static void register(org.waveprotocol.wave.client.editor.Editor, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        org.waveprotocol.wave.client.editor.Editor r1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.Editor;

        r0 := @parameter1: com.google.gwt.dom.client.Element;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: void setPropertyObject(java.lang.String,java.lang.Object)>("__editor", r1);

        return;
    }

    public static void unregister(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: void register(org.waveprotocol.wave.client.editor.Editor,com.google.gwt.dom.client.Element)>(null, r0);

        return;
    }

    private static org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.Editor $r2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.Object getPropertyObject(java.lang.String)>("__editor");

        $r2 = (org.waveprotocol.wave.client.editor.Editor) $r1;

     label2:
        return $r2;
    }

    private static org.waveprotocol.wave.model.document.util.Range getSelectionWithFlush(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.Editor $r1;
        com.google.gwt.dom.client.Element r0;
        org.waveprotocol.wave.model.document.util.Range $r3;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        if $r1 == null goto label1;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: void forceFlush(org.waveprotocol.wave.client.editor.Editor)>($r1);

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.Range getOrderedSelectionRange()>();

        return $r3;

     label1:
        return null;
    }

    public static java.lang.String webdriverEditorGetContent(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.Editor $r1;
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r3;
        com.google.gwt.dom.client.Element r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r4, $r8;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        if $r1 == null goto label3;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: void forceFlush(org.waveprotocol.wave.client.editor.Editor)>($r1);

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentView getPersistentDocument()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>($r2);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        if $r4 != null goto label1;

        $r8 = null;

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r8;

     label3:
        return "Error in webdriverEditorGetContent";
    }

    public static java.lang.String webdriverEditorGetLocalDiffAnnotations(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r8;
        org.waveprotocol.wave.model.util.StringSet $r6;
        java.lang.String[] $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r7;
        java.lang.Iterable $r9;
        int $i0, $i1, i3, $i4;
        java.lang.String $r4, $r5, $r11, $r15, $r18;
        org.waveprotocol.wave.model.util.ReadableStringMap $r14, $r17;
        boolean $z0, z1, z2, $z3, $z5, $z6;
        org.waveprotocol.wave.client.editor.Editor $r1;
        java.util.Iterator $r10;
        char c2;
        com.google.gwt.dom.client.Element r0;
        java.lang.StringBuilder $r2;
        java.lang.Object $r12, $r16, $r19;
        org.waveprotocol.wave.model.document.AnnotationInterval r13;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        if $r1 != null goto label01;

        return "Error in webdriverEditorGetContent";

     label01:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: void forceFlush(org.waveprotocol.wave.client.editor.Editor)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $r3 = newarray (java.lang.String)[2];

        $r4 = <org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: java.lang.String DIFF_INSERT_KEY>;

        $r3[0] = $r4;

        $r5 = <org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: java.lang.String DIFF_DELETE_KEY>;

        $r3[1] = $r5;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r3);

        $r7 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local getLocalAnnotations()>();

        $i0 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: int size()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(0, $i0, $r6);

        $i1 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: int size()>();

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(0, $i1, $r6);

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.model.document.AnnotationInterval) $r12;

        $r14 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap annotations()>();

        $r15 = <org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: java.lang.String DIFF_INSERT_KEY>;

        $r16 = interfaceinvoke $r14.<org.waveprotocol.wave.model.util.ReadableStringMap: java.lang.Object getExisting(java.lang.String)>($r15);

        if $r16 == null goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z1 = $z3;

        $r17 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap annotations()>();

        $r18 = <org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: java.lang.String DIFF_DELETE_KEY>;

        $r19 = interfaceinvoke $r17.<org.waveprotocol.wave.model.util.ReadableStringMap: java.lang.Object getExisting(java.lang.String)>($r18);

        if $r19 == null goto label05;

        $z6 = 1;

        $z5 = 1;

        goto label06;

     label05:
        $z6 = 0;

        $z5 = 0;

     label06:
        z2 = $z6;

        if z1 == 0 goto label07;

        if $z5 == 0 goto label07;

        c2 = 42;

        goto label10;

     label07:
        if z1 == 0 goto label08;

        c2 = 43;

        goto label10;

     label08:
        if z2 == 0 goto label09;

        c2 = 45;

        goto label10;

     label09:
        c2 = 46;

     label10:
        i3 = 0;

     label11:
        $i4 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.AnnotationInterval: int length()>();

        if i3 >= $i4 goto label12;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        i3 = i3 + 1;

        goto label11;

     label12:
        goto label02;

     label13:
        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static int webdriverEditorGetStartSelection(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        int $i0, $i2;
        org.waveprotocol.wave.model.document.util.Range $r1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.model.document.util.Range getSelectionWithFlush(com.google.gwt.dom.client.Element)>(r0);

        if $r1 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

     label2:
        return $i0;
    }

    public static com.google.gwt.dom.client.Element webdriverEditorGetDocDiv(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0, $r2;
        org.waveprotocol.wave.client.editor.Editor $r1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        return $r2;
    }

    public static int webdriverEditorGetEndSelection(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        int $i0, $i2;
        org.waveprotocol.wave.model.document.util.Range $r1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.model.document.util.Range getSelectionWithFlush(com.google.gwt.dom.client.Element)>(r0);

        if $r1 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

     label2:
        return $i0;
    }

    public static void webdriverEditorSetSelection(com.google.gwt.dom.client.Element, int, int)
    {
        org.waveprotocol.wave.client.editor.Editor $r1;
        org.waveprotocol.wave.model.document.util.FocusedRange $r3;
        com.google.gwt.dom.client.Element r0;
        int i0, i1;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.EditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r3 = new org.waveprotocol.wave.model.document.util.FocusedRange;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>(i0, i1);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r3);

        return;
    }

    public static void webdriverEditorSetContent(com.google.gwt.dom.client.Element, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r5;
        org.waveprotocol.wave.client.editor.Editor $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2, $r7;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r6;
        com.google.gwt.dom.client.Element r0;
        java.lang.String r3;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r3 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        if $r1 == null goto label1;

        $r2 = <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema documentSchema>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "documentSchema is not set");

        $r4 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r3);

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r7 = <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema documentSchema>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: void setContent(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r6, $r7);

     label1:
        return;
    }

    public static java.lang.String webdriverEditorGetLocalContent(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.Editor $r1;
        org.waveprotocol.wave.client.editor.content.ContentView $r3;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r4;
        com.google.gwt.dom.client.Element r0;
        java.lang.String $r5;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.client.editor.Editor getByEditorDiv(com.google.gwt.dom.client.Element)>(r0);

        if $r1 == null goto label1;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorTestingUtil: void forceFlush(org.waveprotocol.wave.client.editor.Editor)>($r1);

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getFullContentView()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>($r3);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        return $r5;

     label1:
        return "Error in webdriverEditorGetLocalContent";
    }

    static void <clinit>()
    {
        <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: java.lang.String EDITOR_WEBDRIVER_PROPERTY> = "__editor";

        <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema documentSchema> = null;

        return;
    }
}
