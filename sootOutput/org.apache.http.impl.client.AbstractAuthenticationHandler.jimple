public abstract class org.apache.http.impl.client.AbstractAuthenticationHandler extends java.lang.Object implements org.apache.http.client.AuthenticationHandler
{
    private final org.apache.commons.logging.Log log;
    private static final java.util.List DEFAULT_SCHEME_PRIORITY;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.http.impl.client.AbstractAuthenticationHandler r0;

        r0 := @this: org.apache.http.impl.client.AbstractAuthenticationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    protected java.util.Map parseChallenges(org.apache.http.Header[]) throws org.apache.http.auth.MalformedChallengeException
    {
        java.util.HashMap $r0;
        org.apache.http.Header r2;
        org.apache.http.FormattedHeader $r9, $r10;
        java.util.Locale $r6;
        int $i0, i1, $i2, i5, i6, $i7, i8, $i9;
        java.lang.String $r3, $r5, $r7;
        org.apache.http.impl.client.AbstractAuthenticationHandler r11;
        org.apache.http.auth.MalformedChallengeException $r8;
        boolean $z0, $z1, $z2;
        org.apache.http.Header[] r1;
        char $c3, $c4;
        org.apache.http.util.CharArrayBuffer $r4, r12;

        r11 := @this: org.apache.http.impl.client.AbstractAuthenticationHandler;

        r1 := @parameter0: org.apache.http.Header[];

        $r0 = new java.util.HashMap;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        i1 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i1 goto label8;

        r2 = r1[i5];

        $z0 = r2 instanceof org.apache.http.FormattedHeader;

        if $z0 == 0 goto label2;

        $r9 = (org.apache.http.FormattedHeader) r2;

        r12 = interfaceinvoke $r9.<org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>();

        $r10 = (org.apache.http.FormattedHeader) r2;

        i6 = interfaceinvoke $r10.<org.apache.http.FormattedHeader: int getValuePos()>();

        goto label4;

     label2:
        $r3 = interfaceinvoke r2.<org.apache.http.Header: java.lang.String getValue()>();

        if $r3 != null goto label3;

        $r8 = new org.apache.http.auth.MalformedChallengeException;

        specialinvoke $r8.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>("Header value is null");

        throw $r8;

     label3:
        $r4 = new org.apache.http.util.CharArrayBuffer;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i2);

        r12 = $r4;

        virtualinvoke $r4.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r3);

        i6 = 0;

     label4:
        $i7 = virtualinvoke r12.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i6 >= $i7 goto label5;

        $c4 = virtualinvoke r12.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i6);

        $z2 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c4);

        if $z2 == 0 goto label5;

        i6 = i6 + 1;

        goto label4;

     label5:
        i8 = i6;

     label6:
        $i9 = virtualinvoke r12.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i6 >= $i9 goto label7;

        $c3 = virtualinvoke r12.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i6);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z1 != 0 goto label7;

        i6 = i6 + 1;

        goto label6;

     label7:
        $r5 = virtualinvoke r12.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i8, i6);

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        i5 = i5 + 1;

        goto label1;

     label8:
        return $r0;
    }

    protected java.util.List getAuthPreferences()
    {
        java.util.List $r0;
        org.apache.http.impl.client.AbstractAuthenticationHandler r1;

        r1 := @this: org.apache.http.impl.client.AbstractAuthenticationHandler;

        $r0 = <org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List DEFAULT_SCHEME_PRIORITY>;

        return $r0;
    }

    protected java.util.List getAuthPreferences(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        java.util.List $r1;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse r2;
        org.apache.http.impl.client.AbstractAuthenticationHandler r0;

        r0 := @this: org.apache.http.impl.client.AbstractAuthenticationHandler;

        r2 := @parameter0: org.apache.http.HttpResponse;

        r3 := @parameter1: org.apache.http.protocol.HttpContext;

        $r1 = virtualinvoke r0.<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences()>();

        return $r1;
    }

    public org.apache.http.auth.AuthScheme selectScheme(java.util.Map, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException
    {
        java.lang.IllegalStateException $r39, $r40;
        org.apache.http.Header r19;
        java.util.Locale $r16;
        java.util.Map r11;
        org.apache.http.impl.client.AbstractAuthenticationHandler r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.http.auth.AuthSchemeRegistry r2;
        java.util.List $r5, r48;
        java.lang.StringBuilder $r9, $r10, $r12, $r21, $r23, $r24, $r25, $r29, $r31, $r32, $r34, $r36, $r37, $r42, $r44, $r45, $r46;
        org.apache.http.auth.AuthenticationException $r8;
        org.apache.http.auth.AuthScheme r49;
        java.lang.String $r13, r15, $r17, $r26, $r33, $r38, $r47;
        java.util.Iterator $r7;
        org.apache.http.protocol.HttpContext r0;
        org.apache.http.params.HttpParams $r28;
        org.apache.http.HttpResponse r4;
        java.lang.Object $r1, $r14, $r18;
        org.apache.commons.logging.Log $r6, $r20, $r22, $r27, $r30, $r35, $r41, $r43;

        r3 := @this: org.apache.http.impl.client.AbstractAuthenticationHandler;

        r11 := @parameter0: java.util.Map;

        r4 := @parameter1: org.apache.http.HttpResponse;

        r0 := @parameter2: org.apache.http.protocol.HttpContext;

        $r1 = interfaceinvoke r0.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.authscheme-registry");

        r2 = (org.apache.http.auth.AuthSchemeRegistry) $r1;

        if r2 != null goto label01;

        $r39 = new java.lang.IllegalStateException;

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AuthScheme registry not set in HTTP context");

        throw $r39;

     label01:
        $r5 = virtualinvoke r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r4, r0);

        r48 = $r5;

        if $r5 != null goto label02;

        r48 = <org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List DEFAULT_SCHEME_PRIORITY>;

     label02:
        $r6 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r35 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication schemes in the order of preference: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r38);

     label03:
        r49 = null;

        $r7 = interfaceinvoke r48.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r14 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r17 = virtualinvoke r15.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r16);

        $r18 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r19 = (org.apache.http.Header) $r18;

        if r19 == null goto label09;

        $r27 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label05;

        $r30 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" authentication scheme selected");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r33);

     label05:
        $r28 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        r49 = virtualinvoke r2.<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)>(r15, $r28);

     label06:
        goto label11;

     label07:
        $r40 := @caughtexception;

        $r41 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $z3 = interfaceinvoke $r41.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label08;

        $r43 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication scheme ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r43.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r47);

     label08:
        goto label10;

     label09:
        $r20 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label10;

        $r22 = r3.<org.apache.http.impl.client.AbstractAuthenticationHandler: org.apache.commons.logging.Log log>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Challenge for ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" authentication scheme not available");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r26);

     label10:
        goto label04;

     label11:
        if r49 != null goto label12;

        $r8 = new org.apache.http.auth.AuthenticationException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to respond to any of these challenges: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.auth.AuthenticationException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label12:
        return r49;

        catch java.lang.IllegalStateException from label05 to label06 with label07;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1, $r2;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "negotiate";

        $r0[1] = "NTLM";

        $r0[2] = "Digest";

        $r0[3] = "Basic";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        <org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List DEFAULT_SCHEME_PRIORITY> = $r2;

        return;
    }
}
