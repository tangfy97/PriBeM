public abstract class org.apache.cxf.service.model.AbstractPropertiesHolder extends java.lang.Object implements org.apache.cxf.service.model.Extensible
{
    private org.apache.cxf.service.model.AbstractPropertiesHolder delegate;
    private boolean delegateProperties;
    private java.util.concurrent.atomic.AtomicReference propertyMap;
    private java.util.concurrent.atomic.AtomicReference extensors;
    private java.util.Map extensionAttributes;
    private java.lang.String documentation;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicReference $r1, $r2;
        org.apache.cxf.service.model.AbstractPropertiesHolder r0;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors> = $r2;

        return;
    }

    public final void setDelegate(org.apache.cxf.service.model.AbstractPropertiesHolder, boolean)
    {
        java.util.Map $r4, $r11, $r25;
        boolean z0, $z1, $z2;
        java.util.Set $r12;
        java.lang.Object[] r29;
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, r1, $r2, $r16, $r24, $r26, $r28;
        java.util.concurrent.atomic.AtomicReference $r5, $r7, $r9, $r14, $r20, $r22;
        int i0, i1;
        java.lang.String $r3, $r18, $r27;
        java.util.Map$Entry r30;
        java.util.Iterator $r13;
        java.lang.Object $r6, $r8, $r10, $r15, $r17, $r19, $r21, r23;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r1 := @parameter0: org.apache.cxf.service.model.AbstractPropertiesHolder;

        z0 := @parameter1: boolean;

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate> = r1;

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties> = z0;

        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.String documentation>;

        if $r3 == null goto label2;

        $r28 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r27 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.String documentation>;

        virtualinvoke $r28.<org.apache.cxf.service.model.AbstractPropertiesHolder: void setDocumentation(java.lang.String)>($r27);

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.String documentation> = null;

     label2:
        $r4 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        if $r4 == null goto label3;

        $r26 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r25 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        virtualinvoke $r26.<org.apache.cxf.service.model.AbstractPropertiesHolder: void setExtensionAttributes(java.util.Map)>($r25);

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes> = null;

     label3:
        $r5 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r6 == null goto label6;

        $r20 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $r21 = virtualinvoke $r20.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r29 = (java.lang.Object[]) $r21;

        i0 = lengthof r29;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        r23 = r29[i1];

        $r24 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r24.<org.apache.cxf.service.model.AbstractPropertiesHolder: void addExtensor(java.lang.Object)>(r23);

        i1 = i1 + 1;

        goto label4;

     label5:
        $r22 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        virtualinvoke $r22.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label6:
        $z1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties>;

        if $z1 == 0 goto label9;

        $r7 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r8 == null goto label9;

        $r9 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r11 = (java.util.Map) $r10;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r15;

        $r16 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r17 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        $r19 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r16.<org.apache.cxf.service.model.AbstractPropertiesHolder: void setProperty(java.lang.String,java.lang.Object)>($r18, $r19);

        goto label7;

     label8:
        $r14 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        virtualinvoke $r14.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label9:
        return;
    }

    public java.lang.String getDocumentation()
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.String getDocumentation()>();

        return $r4;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.String documentation>;

        return $r2;
    }

    public void setDocumentation(java.lang.String)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r3;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r3.<org.apache.cxf.service.model.AbstractPropertiesHolder: void setDocumentation(java.lang.String)>(r2);

        goto label2;

     label1:
        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.String documentation> = r2;

     label2:
        return;
    }

    public java.util.Map getProperties()
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r5;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.Map $r4, $r6;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $z0 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map getProperties()>();

        return $r6;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (java.util.Map) $r3;

        return $r4;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r9;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;
        java.util.Map $r7;
        java.lang.Object $r3, $r5, $r8, $r10;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $z0 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties>;

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r10 = virtualinvoke $r9.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object getProperty(java.lang.String)>(r6);

        return $r10;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if null != $r3 goto label2;

        return null;

     label2:
        $r4 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r7 = (java.util.Map) $r5;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        return $r8;
    }

    public java.lang.Object removeProperty(java.lang.String)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r7;
        java.util.concurrent.atomic.AtomicReference $r2, $r8;
        java.util.Map $r5;
        java.lang.Object $r3, $r6, $r9;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $z0 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties>;

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r7.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object removeProperty(java.lang.String)>(r4);

     label1:
        $r8 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if null != $r9 goto label2;

        return null;

     label2:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r5 = (java.util.Map) $r3;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String, java.lang.Class)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r1;
        java.lang.Class r0;
        java.lang.Object $r3, $r4;
        java.lang.String r2;

        r1 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r1.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object getProperty(java.lang.String)>(r2);

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r3);

        return $r4;
    }

    public boolean hasProperty(java.lang.String)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r6;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.Map $r5;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $z1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties>;

        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $z2 = virtualinvoke $r6.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean hasProperty(java.lang.String)>(r4);

        return $z2;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r5 = (java.util.Map) $r3;

        if $r5 == null goto label2;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        return $z0;

     label2:
        return 0;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r14;
        java.util.concurrent.atomic.AtomicReference $r2, $r5, $r9, $r13;
        java.util.Map $r8, $r11;
        java.lang.String r7;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r12;
        java.lang.Object $r3, r4, $r6, $r10;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r7 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $z0 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean delegateProperties>;

        if $z0 == 0 goto label1;

        $r14 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r14.<org.apache.cxf.service.model.AbstractPropertiesHolder: void setProperty(java.lang.String,java.lang.Object)>(r7, r4);

        return;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if null != $r3 goto label2;

        $r13 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(4, 0.75F, 2);

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r12);

     label2:
        if r4 != null goto label3;

        $r9 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r11 = (java.util.Map) $r10;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7);

        goto label4;

     label3:
        $r5 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference propertyMap>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r8 = (java.util.Map) $r6;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r4);

     label4:
        return;
    }

    public boolean containsExtensor(java.lang.Object)
    {
        java.lang.Object[] r4;
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r7;
        java.util.concurrent.atomic.AtomicReference $r2;
        int i0, i1;
        java.lang.Object $r3, r5, r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $z0 = virtualinvoke $r7.<org.apache.cxf.service.model.AbstractPropertiesHolder: boolean containsExtensor(java.lang.Object)>(r6);

        return $z0;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (java.lang.Object[]) $r3;

        if r4 == null goto label4;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r5 = r4[i1];

        if r5 != r6 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public void addExtensor(java.lang.Object)
    {
        java.lang.Object[] r4, r9;
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r8;
        java.util.concurrent.atomic.AtomicReference $r2, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;
        java.lang.Object $r3, r5, $r7;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r8 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r8.<org.apache.cxf.service.model.AbstractPropertiesHolder: void addExtensor(java.lang.Object)>(r5);

        return;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (java.lang.Object[]) $r3;

        if r4 != null goto label2;

        r9 = newarray (java.lang.Object)[1];

        goto label4;

     label2:
        $i0 = lengthof r4;

        $i1 = $i0 + 1;

        r9 = newarray (java.lang.Object)[$i1];

        i5 = 0;

     label3:
        $i2 = lengthof r4;

        if i5 >= $i2 goto label4;

        $r7 = r4[i5];

        r9[i5] = $r7;

        i5 = i5 + 1;

        goto label3;

     label4:
        $i3 = lengthof r9;

        $i4 = $i3 - 1;

        r9[$i4] = r5;

        $r6 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r4, r9);

        if $z0 != 0 goto label5;

        virtualinvoke r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: void addExtensor(java.lang.Object)>(r5);

     label5:
        return;
    }

    public java.lang.Object getExtensor(java.lang.Class)
    {
        java.lang.Object[] r4;
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r9;
        java.util.concurrent.atomic.AtomicReference $r2;
        int $i0, i1;
        java.lang.Object $r3, $r6, $r7, $r8, $r10;
        java.lang.Class r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r5 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r9 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r10 = virtualinvoke $r9.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object getExtensor(java.lang.Class)>(r5);

        return $r10;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (java.lang.Object[]) $r3;

        if r4 != null goto label2;

        return null;

     label2:
        i1 = 0;

     label3:
        $i0 = lengthof r4;

        if i1 >= $i0 goto label5;

        $r6 = r4[i1];

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r7 = r4[i1];

        $r8 = virtualinvoke r5.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r7);

        return $r8;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return null;
    }

    public java.util.List getExtensors(java.lang.Class)
    {
        java.lang.Object[] r4;
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r10;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.ArrayList $r5;
        int $i0, $i1, i2;
        boolean $z0;
        java.util.List $r11;
        java.lang.Object $r3, $r7, $r8, $r9;
        java.lang.Class r6;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r6 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r10 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r11 = virtualinvoke $r10.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.List getExtensors(java.lang.Class)>(r6);

        return $r11;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (java.lang.Object[]) $r3;

        if r4 != null goto label2;

        return null;

     label2:
        $r5 = new java.util.ArrayList;

        $i0 = lengthof r4;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label3:
        $i1 = lengthof r4;

        if i2 >= $i1 goto label5;

        $r7 = r4[i2];

        $z0 = virtualinvoke r6.<java.lang.Class: boolean isInstance(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        $r8 = r4[i2];

        $r9 = virtualinvoke r6.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r8);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return $r5;
    }

    public java.util.concurrent.atomic.AtomicReference getExtensors()
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r3;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference getExtensors()>();

        return $r4;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.concurrent.atomic.AtomicReference extensors>;

        return $r2;
    }

    public java.lang.Object getExtensionAttribute(javax.xml.namespace.QName)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r5;
        java.util.Map $r2, $r4;
        java.lang.Object $r6, $r7;
        javax.xml.namespace.QName r3;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r3 := @parameter0: javax.xml.namespace.QName;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object getExtensionAttribute(javax.xml.namespace.QName)>(r3);

        return $r6;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        if null != $r2 goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r4 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        $r7 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

     label3:
        return $r7;
    }

    public java.util.Map getExtensionAttributes()
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r3;
        java.util.Map $r2, $r4;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map getExtensionAttributes()>();

        return $r4;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        return $r2;
    }

    public void addExtensionAttribute(javax.xml.namespace.QName, java.lang.Object)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r7;
        java.util.HashMap $r6;
        java.util.Map $r2, $r5;
        java.lang.Object r4;
        javax.xml.namespace.QName r3;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r3 := @parameter0: javax.xml.namespace.QName;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r7.<org.apache.cxf.service.model.AbstractPropertiesHolder: void addExtensionAttribute(javax.xml.namespace.QName,java.lang.Object)>(r3, r4);

        return;

     label1:
        $r2 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        if null != $r2 goto label2;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes> = $r6;

     label2:
        $r5 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void setExtensionAttributes(java.util.Map)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r3;
        java.util.Map r2;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r2 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        virtualinvoke $r3.<org.apache.cxf.service.model.AbstractPropertiesHolder: void setExtensionAttributes(java.util.Map)>(r2);

        return;

     label1:
        r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.util.Map extensionAttributes> = r2;

        return;
    }

    public java.lang.Object getTraversedExtensor(java.lang.Object, java.lang.Class)
    {
        org.apache.cxf.service.model.AbstractPropertiesHolder r0, $r1, $r5;
        java.lang.Class r2;
        java.lang.Object $r3, r4, $r6;

        r0 := @this: org.apache.cxf.service.model.AbstractPropertiesHolder;

        r4 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $r1 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: org.apache.cxf.service.model.AbstractPropertiesHolder delegate>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object getTraversedExtensor(java.lang.Object,java.lang.Class)>(r4, r2);

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.apache.cxf.service.model.AbstractPropertiesHolder: java.lang.Object getExtensor(java.lang.Class)>(r2);

        if $r3 != null goto label2;

        return r4;

     label2:
        return $r3;
    }

    protected static final boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        if r1 != null goto label2;

     label1:
        if r0 == null goto label3;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        if r0 != null goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label5:
        return $z0;
    }
}
