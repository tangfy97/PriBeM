public class org.apache.lucene.index.MultipleTermPositions extends java.lang.Object implements org.apache.lucene.index.TermPositions
{
    private int _doc;
    private int _freq;
    private org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue;
    private org.apache.lucene.index.MultipleTermPositions$IntQueue _posList;

    public void <init>(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term[]) throws java.io.IOException
    {
        org.apache.lucene.index.MultipleTermPositions r0;
        org.apache.lucene.index.TermPositions $r7;
        org.apache.lucene.index.Term $r6;
        org.apache.lucene.index.MultipleTermPositions$IntQueue $r4;
        org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue $r3;
        int $i0, i1;
        org.apache.lucene.index.Term[] r2;
        java.util.LinkedList $r1;
        org.apache.lucene.index.IndexReader r5;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        r5 := @parameter0: org.apache.lucene.index.IndexReader;

        r2 := @parameter1: org.apache.lucene.index.Term[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r6 = r2[i1];

        $r7 = virtualinvoke r5.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.TermPositions termPositions(org.apache.lucene.index.Term)>($r6);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue;

        specialinvoke $r3.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: void <init>(java.util.List)>($r1);

        r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue> = $r3;

        $r4 = new org.apache.lucene.index.MultipleTermPositions$IntQueue;

        specialinvoke $r4.<org.apache.lucene.index.MultipleTermPositions$IntQueue: void <init>(org.apache.lucene.index.MultipleTermPositions$1)>(null);

        r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$IntQueue _posList> = $r4;

        return;
    }

    public final boolean next() throws java.io.IOException
    {
        org.apache.lucene.index.MultipleTermPositions r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        boolean $z0;
        org.apache.lucene.index.TermPositions $r4, $r6, $r12;
        org.apache.lucene.index.MultipleTermPositions$IntQueue $r2, $r9, $r10, $r14;
        org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue $r1, $r3, $r5, $r7, $r8, $r11, $r13;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$IntQueue _posList>;

        virtualinvoke $r2.<org.apache.lucene.index.MultipleTermPositions$IntQueue: void clear()>();

        $r3 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: org.apache.lucene.index.TermPositions peek()>();

        $i1 = interfaceinvoke $r4.<org.apache.lucene.index.TermPositions: int doc()>();

        r0.<org.apache.lucene.index.MultipleTermPositions: int _doc> = $i1;

     label2:
        $r5 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: org.apache.lucene.index.TermPositions peek()>();

        i7 = 0;

     label3:
        $i8 = interfaceinvoke $r6.<org.apache.lucene.index.TermPositions: int freq()>();

        if i7 >= $i8 goto label4;

        $r14 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$IntQueue _posList>;

        $i6 = interfaceinvoke $r6.<org.apache.lucene.index.TermPositions: int nextPosition()>();

        virtualinvoke $r14.<org.apache.lucene.index.MultipleTermPositions$IntQueue: void add(int)>($i6);

        i7 = i7 + 1;

        goto label3;

     label4:
        $z0 = interfaceinvoke $r6.<org.apache.lucene.index.TermPositions: boolean next()>();

        if $z0 == 0 goto label5;

        $r13 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        virtualinvoke $r13.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: java.lang.Object updateTop()>();

        goto label6;

     label5:
        $r7 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        virtualinvoke $r7.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: java.lang.Object pop()>();

        interfaceinvoke $r6.<org.apache.lucene.index.TermPositions: void close()>();

     label6:
        $r8 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $i2 = virtualinvoke $r8.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: int size()>();

        if $i2 <= 0 goto label7;

        $r11 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: org.apache.lucene.index.TermPositions peek()>();

        $i4 = interfaceinvoke $r12.<org.apache.lucene.index.TermPositions: int doc()>();

        $i5 = r0.<org.apache.lucene.index.MultipleTermPositions: int _doc>;

        if $i4 == $i5 goto label2;

     label7:
        $r9 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$IntQueue _posList>;

        virtualinvoke $r9.<org.apache.lucene.index.MultipleTermPositions$IntQueue: void sort()>();

        $r10 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$IntQueue _posList>;

        $i3 = virtualinvoke $r10.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int size()>();

        r0.<org.apache.lucene.index.MultipleTermPositions: int _freq> = $i3;

        return 1;
    }

    public final int nextPosition()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue $r1;
        int $i0;
        org.apache.lucene.index.MultipleTermPositions r0;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$IntQueue _posList>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int next()>();

        return $i0;
    }

    public final boolean skipTo(int) throws java.io.IOException
    {
        org.apache.lucene.index.MultipleTermPositions r0;
        org.apache.lucene.index.TermPositions $r2, $r4, r7;
        org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue $r1, $r3, $r5, $r8;
        int i0, $i1;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: org.apache.lucene.index.TermPositions peek()>();

        if $r2 == null goto label4;

        $r3 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: org.apache.lucene.index.TermPositions peek()>();

        $i1 = interfaceinvoke $r4.<org.apache.lucene.index.TermPositions: int doc()>();

        if i0 <= $i1 goto label4;

        $r5 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: java.lang.Object pop()>();

        r7 = (org.apache.lucene.index.TermPositions) $r6;

        $z1 = interfaceinvoke r7.<org.apache.lucene.index.TermPositions: boolean skipTo(int)>(i0);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        virtualinvoke $r8.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: java.lang.Object add(java.lang.Object)>(r7);

        goto label3;

     label2:
        interfaceinvoke r7.<org.apache.lucene.index.TermPositions: void close()>();

     label3:
        goto label1;

     label4:
        $z0 = virtualinvoke r0.<org.apache.lucene.index.MultipleTermPositions: boolean next()>();

        return $z0;
    }

    public final int doc()
    {
        int $i0;
        org.apache.lucene.index.MultipleTermPositions r0;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions: int _doc>;

        return $i0;
    }

    public final int freq()
    {
        int $i0;
        org.apache.lucene.index.MultipleTermPositions r0;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions: int _freq>;

        return $i0;
    }

    public final void close() throws java.io.IOException
    {
        org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue $r1, $r2;
        org.apache.lucene.index.MultipleTermPositions r0;
        org.apache.lucene.index.TermPositions $r4;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

     label1:
        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.MultipleTermPositions: org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue: java.lang.Object pop()>();

        $r4 = (org.apache.lucene.index.TermPositions) $r3;

        interfaceinvoke $r4.<org.apache.lucene.index.TermPositions: void close()>();

        goto label1;

     label2:
        return;
    }

    public void seek(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Term r2;
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.index.MultipleTermPositions r1;

        r1 := @this: org.apache.lucene.index.MultipleTermPositions;

        r2 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.index.TermEnum r2;
        org.apache.lucene.index.MultipleTermPositions r1;

        r1 := @this: org.apache.lucene.index.MultipleTermPositions;

        r2 := @parameter0: org.apache.lucene.index.TermEnum;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int read(int[], int[]) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        int[] r2, r3;
        org.apache.lucene.index.MultipleTermPositions r1;

        r1 := @this: org.apache.lucene.index.MultipleTermPositions;

        r2 := @parameter0: int[];

        r3 := @parameter1: int[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int getPayloadLength()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.index.MultipleTermPositions r1;

        r1 := @this: org.apache.lucene.index.MultipleTermPositions;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public byte[] getPayload(byte[], int) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        byte[] r2;
        org.apache.lucene.index.MultipleTermPositions r1;
        int i0;

        r1 := @this: org.apache.lucene.index.MultipleTermPositions;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isPayloadAvailable()
    {
        org.apache.lucene.index.MultipleTermPositions r0;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions;

        return 0;
    }
}
