public class com.jhlabs.image.ShadeFilter extends com.jhlabs.image.WholeImageFilter implements java.io.Serializable
{
    public static final int COLORS_FROM_IMAGE;
    public static final int COLORS_CONSTANT;
    public static final int BUMPS_FROM_IMAGE;
    public static final int BUMPS_FROM_IMAGE_ALPHA;
    public static final int BUMPS_FROM_MAP;
    public static final int BUMPS_FROM_BEVEL;
    private float bumpHeight;
    private float bumpSoftness;
    private float viewDistance;
    private int colorSource;
    private int bumpSource;
    private com.jhlabs.math.Function2D bumpFunction;
    private java.awt.image.BufferedImage environmentMap;
    private int[] envPixels;
    private int envWidth;
    private int envHeight;
    private com.jhlabs.vecmath.Vector3f l;
    private com.jhlabs.vecmath.Vector3f v;
    private com.jhlabs.vecmath.Vector3f n;
    private com.jhlabs.vecmath.Color4f shadedColor;
    private com.jhlabs.vecmath.Color4f diffuse_color;
    private com.jhlabs.vecmath.Color4f specular_color;
    private com.jhlabs.vecmath.Vector3f tmpv;
    private com.jhlabs.vecmath.Vector3f tmpv2;
    protected static final float r255;

    public void <init>()
    {
        com.jhlabs.image.ShadeFilter r0;
        com.jhlabs.vecmath.Color4f $r4, $r5, $r6;
        com.jhlabs.vecmath.Vector3f $r1, $r2, $r3, $r7, $r8;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: float viewDistance> = 10000.0F;

        r0.<com.jhlabs.image.ShadeFilter: int colorSource> = 0;

        r0.<com.jhlabs.image.ShadeFilter: int bumpSource> = 0;

        r0.<com.jhlabs.image.ShadeFilter: int envWidth> = 1;

        r0.<com.jhlabs.image.ShadeFilter: int envHeight> = 1;

        r0.<com.jhlabs.image.ShadeFilter: float bumpHeight> = 1.0F;

        r0.<com.jhlabs.image.ShadeFilter: float bumpSoftness> = 5.0F;

        $r1 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r1.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f l> = $r1;

        $r2 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r2.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f v> = $r2;

        $r3 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r3.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f n> = $r3;

        $r4 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r4.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Color4f shadedColor> = $r4;

        $r5 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r5.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Color4f diffuse_color> = $r5;

        $r6 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r6.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Color4f specular_color> = $r6;

        $r7 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r7.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv> = $r7;

        $r8 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r8.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv2> = $r8;

        return;
    }

    public void setBumpFunction(com.jhlabs.math.Function2D)
    {
        com.jhlabs.math.Function2D r1;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.math.Function2D bumpFunction> = r1;

        return;
    }

    public com.jhlabs.math.Function2D getBumpFunction()
    {
        com.jhlabs.math.Function2D $r1;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        $r1 = r0.<com.jhlabs.image.ShadeFilter: com.jhlabs.math.Function2D bumpFunction>;

        return $r1;
    }

    public void setBumpHeight(float)
    {
        float f0;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShadeFilter: float bumpHeight> = f0;

        return;
    }

    public float getBumpHeight()
    {
        float $f0;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        $f0 = r0.<com.jhlabs.image.ShadeFilter: float bumpHeight>;

        return $f0;
    }

    public void setBumpSoftness(float)
    {
        float f0;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShadeFilter: float bumpSoftness> = f0;

        return;
    }

    public float getBumpSoftness()
    {
        float $f0;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        $f0 = r0.<com.jhlabs.image.ShadeFilter: float bumpSoftness>;

        return $f0;
    }

    public void setEnvironmentMap(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.ShadeFilter: java.awt.image.BufferedImage environmentMap> = r1;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        r0.<com.jhlabs.image.ShadeFilter: int envWidth> = $i0;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        r0.<com.jhlabs.image.ShadeFilter: int envHeight> = $i1;

        $i3 = r0.<com.jhlabs.image.ShadeFilter: int envWidth>;

        $i2 = r0.<com.jhlabs.image.ShadeFilter: int envHeight>;

        $r2 = virtualinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r1, 0, 0, $i3, $i2, null);

        r0.<com.jhlabs.image.ShadeFilter: int[] envPixels> = $r2;

        goto label2;

     label1:
        r0.<com.jhlabs.image.ShadeFilter: int envHeight> = 1;

        r0.<com.jhlabs.image.ShadeFilter: int envWidth> = 1;

        r0.<com.jhlabs.image.ShadeFilter: int[] envPixels> = null;

     label2:
        return;
    }

    public java.awt.image.BufferedImage getEnvironmentMap()
    {
        com.jhlabs.image.ShadeFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        $r1 = r0.<com.jhlabs.image.ShadeFilter: java.awt.image.BufferedImage environmentMap>;

        return $r1;
    }

    public void setBumpSource(int)
    {
        int i0;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.ShadeFilter: int bumpSource> = i0;

        return;
    }

    public int getBumpSource()
    {
        int $i0;
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        $i0 = r0.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        return $i0;
    }

    protected void setFromRGB(com.jhlabs.vecmath.Color4f, int)
    {
        com.jhlabs.image.ShadeFilter r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        com.jhlabs.vecmath.Color4f r0;

        r1 := @this: com.jhlabs.image.ShadeFilter;

        r0 := @parameter0: com.jhlabs.vecmath.Color4f;

        i0 := @parameter1: int;

        $i1 = i0 >> 16;

        $i2 = $i1 & 255;

        $f0 = (float) $i2;

        $f7 = $f0 * 0.003921569F;

        $i3 = i0 >> 8;

        $i4 = $i3 & 255;

        $f1 = (float) $i4;

        $f6 = $f1 * 0.003921569F;

        $i5 = i0 & 255;

        $f2 = (float) $i5;

        $f5 = $f2 * 0.003921569F;

        $i6 = i0 >> 24;

        $i7 = $i6 & 255;

        $f3 = (float) $i7;

        $f4 = $f3 * 0.003921569F;

        virtualinvoke r0.<com.jhlabs.vecmath.Tuple4f: void set(float,float,float,float)>($f7, $f6, $f5, $f4);

        return;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        com.jhlabs.image.ShadeFilter r1;
        byte $b3, $b7, $b22, $b23, $b24, $b25, $b26, $b27, $b28, $b29, $b30, $b37, $b48, $b49, $b50;
        com.jhlabs.vecmath.Vector3f $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r34, $r35, $r36, $r40, $r41, $r42;
        int[] r0, r7, r26, $r29, $r30;
        com.jhlabs.math.Function2D $r21, $r22, $r23, r25;
        com.jhlabs.math.ImageFunction2D r27, $r38, $r39;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i31, $i32, $i33, $i34, $i35, i36, i38, i39, $i40, $i41, $i42, $i43, $i44, i45, i46, i47, i51, i52, $i53, $i54, $i55, $i56, $i57, $i58;
        java.awt.image.Kernel $r28;
        boolean z0, $z1, $z2, $z3, $z4;
        java.awt.image.BufferedImage $r8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, f26, f27, f28, f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, f56, f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70;
        java.awt.Rectangle r24;
        double $d0, $d1, $d2, $d3;
        com.jhlabs.vecmath.Color4f $r37;

        r1 := @this: com.jhlabs.image.ShadeFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: int[];

        r24 := @parameter3: java.awt.Rectangle;

        i36 = 0;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        $f0 = r1.<com.jhlabs.image.ShadeFilter: float bumpHeight>;

        $f1 = 6.0F * $f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $f3 = r1.<com.jhlabs.image.ShadeFilter: float bumpHeight>;

        $b3 = $f3 cmpg 0.0F;

        $i53 = (int) $b3;

        if $i53 >= 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        $r34 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r34.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>(0.0F, 0.0F, 0.0F);

        $r35 = new com.jhlabs.vecmath.Vector3f;

        $f4 = (float) i0;

        $f8 = $f4 / 2.0F;

        $f5 = (float) i1;

        $f7 = $f5 / 2.0F;

        $f6 = r1.<com.jhlabs.image.ShadeFilter: float viewDistance>;

        specialinvoke $r35.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>($f8, $f7, $f6);

        $r36 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r36.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r37 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r37.<com.jhlabs.vecmath.Color4f: void <init>()>();

        $r23 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.math.Function2D bumpFunction>;

        r25 = $r23;

        $i4 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i4 == 0 goto label03;

        $i34 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i34 == 1 goto label03;

        $i35 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i35 == 2 goto label03;

        if $r23 != null goto label10;

     label03:
        $f54 = r1.<com.jhlabs.image.ShadeFilter: float bumpSoftness>;

        $b37 = $f54 cmpl 0.0F;

        if $b37 == 0 goto label07;

        i38 = i0;

        i39 = i1;

        r26 = r7;

        $i31 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i31 != 2 goto label04;

        $r21 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.math.Function2D bumpFunction>;

        $z1 = $r21 instanceof com.jhlabs.math.ImageFunction2D;

        if $z1 == 0 goto label04;

        $r22 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.math.Function2D bumpFunction>;

        r27 = (com.jhlabs.math.ImageFunction2D) $r22;

        i38 = virtualinvoke r27.<com.jhlabs.math.ImageFunction2D: int getWidth()>();

        i39 = virtualinvoke r27.<com.jhlabs.math.ImageFunction2D: int getHeight()>();

        r26 = virtualinvoke r27.<com.jhlabs.math.ImageFunction2D: int[] getPixels()>();

     label04:
        $f55 = r1.<com.jhlabs.image.ShadeFilter: float bumpSoftness>;

        $r28 = staticinvoke <com.jhlabs.image.GaussianFilter: java.awt.image.Kernel makeKernel(float)>($f55);

        $i40 = i38 * i39;

        $r29 = newarray (int)[$i40];

        $i41 = i38 * i39;

        $r30 = newarray (int)[$i41];

        $i42 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r28, r26, $r29, i38, i39, 1, $i42);

        $i43 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r28, $r29, $r30, i39, i38, 1, $i43);

        $r38 = new com.jhlabs.math.ImageFunction2D;

        $i32 = i38;

        $i33 = i39;

        $i44 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i44 != 1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        specialinvoke $r38.<com.jhlabs.math.ImageFunction2D: void <init>(int[],int,int,int,boolean)>($r30, $i32, $i33, 1, $z3);

        r25 = $r38;

        goto label10;

     label07:
        $r39 = new com.jhlabs.math.ImageFunction2D;

        $i5 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i5 != 1 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        specialinvoke $r39.<com.jhlabs.math.ImageFunction2D: void <init>(int[],int,int,int,boolean)>(r7, i0, i1, 1, $z4);

        r25 = $r39;

     label10:
        $r40 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r40.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r41 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r41.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        $r42 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r42.<com.jhlabs.vecmath.Vector3f: void <init>()>();

        i45 = 0;

     label11:
        if i45 >= i1 goto label35;

        f56 = (float) i45;

        $f9 = (float) i45;

        $r34.<com.jhlabs.vecmath.Tuple3f: float y> = $f9;

        i46 = 0;

     label12:
        if i46 >= i0 goto label34;

        f10 = (float) i46;

        $i6 = r1.<com.jhlabs.image.ShadeFilter: int bumpSource>;

        if $i6 == 3 goto label29;

        i47 = 0;

        $r36.<com.jhlabs.vecmath.Tuple3f: float z> = 0.0F;

        $r36.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r36.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $f25 = interfaceinvoke r25.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f10, f56);

        f57 = $f2 * $f25;

        if i46 <= 0 goto label13;

        $f51 = f10 - 1.0F;

        $f52 = interfaceinvoke r25.<com.jhlabs.math.Function2D: float evaluate(float,float)>($f51, f56);

        $f53 = $f2 * $f52;

        $f58 = $f53 - f57;

        goto label14;

     label13:
        $f58 = -2.0F;

     label14:
        f26 = $f58;

        if i45 <= 0 goto label15;

        $f48 = f56 - 1.0F;

        $f49 = interfaceinvoke r25.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f10, $f48);

        $f50 = $f2 * $f49;

        $f59 = $f50 - f57;

        goto label16;

     label15:
        $f59 = -2.0F;

     label16:
        f27 = $f59;

        $i20 = i0 - 1;

        if i46 >= $i20 goto label17;

        $f45 = f10 + 1.0F;

        $f46 = interfaceinvoke r25.<com.jhlabs.math.Function2D: float evaluate(float,float)>($f45, f56);

        $f47 = $f2 * $f46;

        $f60 = $f47 - f57;

        goto label18;

     label17:
        $f60 = -2.0F;

     label18:
        f28 = $f60;

        $i21 = i1 - 1;

        if i45 >= $i21 goto label19;

        $f42 = f56 + 1.0F;

        $f43 = interfaceinvoke r25.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f10, $f42);

        $f44 = $f2 * $f43;

        $f61 = $f44 - f57;

        goto label20;

     label19:
        $f61 = -2.0F;

     label20:
        f29 = $f61;

        $b22 = f26 cmpl -2.0F;

        if $b22 == 0 goto label22;

        $b29 = $f61 cmpl -2.0F;

        if $b29 == 0 goto label22;

        $r40.<com.jhlabs.vecmath.Tuple3f: float x> = -1.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float z> = f26;

        $r41.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float y> = 1.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float z> = $f61;

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r40, $r41);

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f39 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d3 = (double) $f39;

        $b30 = $d3 cmpg 0.0;

        $i54 = (int) $b30;

        if $i54 >= 0 goto label21;

        $f40 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f41 = neg $f40;

        $r42.<com.jhlabs.vecmath.Tuple3f: float z> = $f41;

     label21:
        virtualinvoke $r36.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r42);

        i47 = 1;

     label22:
        $b48 = f26 cmpl -2.0F;

        if $b48 == 0 goto label24;

        $b27 = f27 cmpl -2.0F;

        if $b27 == 0 goto label24;

        $r40.<com.jhlabs.vecmath.Tuple3f: float x> = -1.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float z> = f26;

        $r41.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float y> = -1.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float z> = f27;

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r40, $r41);

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f36 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d2 = (double) $f36;

        $b28 = $d2 cmpg 0.0;

        $i55 = (int) $b28;

        if $i55 >= 0 goto label23;

        $f37 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f38 = neg $f37;

        $r42.<com.jhlabs.vecmath.Tuple3f: float z> = $f38;

     label23:
        virtualinvoke $r36.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r42);

        i47 = i47 + 1;

     label24:
        $b49 = f27 cmpl -2.0F;

        if $b49 == 0 goto label26;

        $b25 = f28 cmpl -2.0F;

        if $b25 == 0 goto label26;

        $r40.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float y> = -1.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float z> = f27;

        $r41.<com.jhlabs.vecmath.Tuple3f: float x> = 1.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float z> = f28;

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r40, $r41);

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f33 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d1 = (double) $f33;

        $b26 = $d1 cmpg 0.0;

        $i56 = (int) $b26;

        if $i56 >= 0 goto label25;

        $f34 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f35 = neg $f34;

        $r42.<com.jhlabs.vecmath.Tuple3f: float z> = $f35;

     label25:
        virtualinvoke $r36.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r42);

        i47 = i47 + 1;

     label26:
        $b50 = f28 cmpl -2.0F;

        if $b50 == 0 goto label28;

        $b23 = f29 cmpl -2.0F;

        if $b23 == 0 goto label28;

        $r40.<com.jhlabs.vecmath.Tuple3f: float x> = 1.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float y> = 0.0F;

        $r40.<com.jhlabs.vecmath.Tuple3f: float z> = f28;

        $r41.<com.jhlabs.vecmath.Tuple3f: float x> = 0.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float y> = 1.0F;

        $r41.<com.jhlabs.vecmath.Tuple3f: float z> = f29;

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void cross(com.jhlabs.vecmath.Vector3f,com.jhlabs.vecmath.Vector3f)>($r40, $r41);

        virtualinvoke $r42.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $f30 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $d0 = (double) $f30;

        $b24 = $d0 cmpg 0.0;

        $i57 = (int) $b24;

        if $i57 >= 0 goto label27;

        $f31 = $r42.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f32 = neg $f31;

        $r42.<com.jhlabs.vecmath.Tuple3f: float z> = $f32;

     label27:
        virtualinvoke $r36.<com.jhlabs.vecmath.Tuple3f: void add(com.jhlabs.vecmath.Tuple3f)>($r42);

        i47 = i47 + 1;

     label28:
        $f62 = $r36.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f63 = (float) i47;

        $f64 = $f62 / $f63;

        $r36.<com.jhlabs.vecmath.Tuple3f: float x> = $f64;

        $f65 = $r36.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f66 = (float) i47;

        $f67 = $f65 / $f66;

        $r36.<com.jhlabs.vecmath.Tuple3f: float y> = $f67;

        $f68 = $r36.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f69 = (float) i47;

        $f70 = $f68 / $f69;

        $r36.<com.jhlabs.vecmath.Tuple3f: float z> = $f70;

     label29:
        if z0 == 0 goto label30;

        $f21 = $r36.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f22 = neg $f21;

        $r36.<com.jhlabs.vecmath.Tuple3f: float x> = $f22;

        $f23 = $r36.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f24 = neg $f23;

        $r36.<com.jhlabs.vecmath.Tuple3f: float y> = $f24;

     label30:
        $f11 = (float) i46;

        $r34.<com.jhlabs.vecmath.Tuple3f: float x> = $f11;

        $f12 = $r36.<com.jhlabs.vecmath.Tuple3f: float z>;

        $b7 = $f12 cmpl 0.0F;

        $i58 = (int) $b7;

        if $i58 < 0 goto label32;

        $r8 = r1.<com.jhlabs.image.ShadeFilter: java.awt.image.BufferedImage environmentMap>;

        if $r8 == null goto label31;

        $r9 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        virtualinvoke $r9.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>($r35);

        $r10 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        virtualinvoke $r10.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>($r34);

        $r11 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        virtualinvoke $r11.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $r12 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        virtualinvoke $r12.<com.jhlabs.vecmath.Tuple3f: void set(com.jhlabs.vecmath.Tuple3f)>($r36);

        $r13 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        virtualinvoke $r13.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $r16 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $r15 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $r14 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv2>;

        $f13 = virtualinvoke $r15.<com.jhlabs.vecmath.Vector3f: float dot(com.jhlabs.vecmath.Vector3f)>($r14);

        $f14 = 2.0F * $f13;

        virtualinvoke $r16.<com.jhlabs.vecmath.Tuple3f: void scale(float)>($f14);

        $r18 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        $r17 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f v>;

        virtualinvoke $r18.<com.jhlabs.vecmath.Tuple3f: void sub(com.jhlabs.vecmath.Tuple3f)>($r17);

        $r19 = r1.<com.jhlabs.image.ShadeFilter: com.jhlabs.vecmath.Vector3f tmpv>;

        virtualinvoke $r19.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $i10 = specialinvoke r1.<com.jhlabs.image.ShadeFilter: int getEnvironmentMapP(com.jhlabs.vecmath.Vector3f,int[],int,int)>($r36, r7, i0, i1);

        virtualinvoke r1.<com.jhlabs.image.ShadeFilter: void setFromRGB(com.jhlabs.vecmath.Color4f,int)>($r37, $i10);

        $i11 = r7[i36];

        i51 = $i11 & -16777216;

        $f15 = $r37.<com.jhlabs.vecmath.Tuple4f: float x>;

        $f16 = $f15 * 255.0F;

        $i12 = (int) $f16;

        $i15 = $i12 << 16;

        $f17 = $r37.<com.jhlabs.vecmath.Tuple4f: float y>;

        $f18 = $f17 * 255.0F;

        $i13 = (int) $f18;

        $i14 = $i13 << 8;

        $i17 = $i15 | $i14;

        $f19 = $r37.<com.jhlabs.vecmath.Tuple4f: float z>;

        $f20 = $f19 * 255.0F;

        $i16 = (int) $f20;

        i52 = $i17 | $i16;

        $i18 = i36;

        i36 = i36 + 1;

        $i19 = i51 | i52;

        r0[$i18] = $i19;

        goto label33;

     label31:
        $i9 = i36;

        i36 = i36 + 1;

        r0[$i9] = 0;

        goto label33;

     label32:
        $i8 = i36;

        i36 = i36 + 1;

        r0[$i8] = 0;

     label33:
        i46 = i46 + 1;

        goto label12;

     label34:
        i45 = i45 + 1;

        goto label11;

     label35:
        return r0;
    }

    private int getEnvironmentMapP(com.jhlabs.vecmath.Vector3f, int[], int, int)
    {
        com.jhlabs.image.ShadeFilter r0;
        int[] $r3, $r4, $r5, $r6, r7;
        com.jhlabs.vecmath.Vector3f r2;
        boolean z0, $z1;
        java.awt.image.BufferedImage $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, $f14, f15, f16, f17;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, $i26;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        r2 := @parameter0: com.jhlabs.vecmath.Vector3f;

        r7 := @parameter1: int[];

        i24 := @parameter2: int;

        i25 := @parameter3: int;

        $r1 = r0.<com.jhlabs.image.ShadeFilter: java.awt.image.BufferedImage environmentMap>;

        if $r1 == null goto label5;

        $f0 = r2.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f1 = 1.0F + $f0;

        f16 = 0.5F * $f1;

        $f2 = r2.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f3 = 1.0F + $f2;

        f17 = 0.5F * $f3;

        $i0 = r0.<com.jhlabs.image.ShadeFilter: int envWidth>;

        $f4 = (float) $i0;

        $f6 = f16 * $f4;

        $i1 = r0.<com.jhlabs.image.ShadeFilter: int envWidth>;

        $i2 = $i1 - 1;

        $f5 = (float) $i2;

        $f7 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>($f6, 0.0F, $f5);

        $i3 = r0.<com.jhlabs.image.ShadeFilter: int envHeight>;

        $f8 = (float) $i3;

        $f10 = f17 * $f8;

        $i4 = r0.<com.jhlabs.image.ShadeFilter: int envHeight>;

        $i5 = $i4 - 1;

        $f9 = (float) $i5;

        $f11 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>($f10, 0.0F, $f9);

        i6 = (int) $f7;

        i7 = (int) $f11;

        $f12 = (float) i6;

        f13 = $f7 - $f12;

        $f14 = (float) i7;

        f15 = $f11 - $f14;

        $i8 = r0.<com.jhlabs.image.ShadeFilter: int envWidth>;

        $i9 = $i8 * i7;

        i10 = $i9 + i6;

        $i11 = r0.<com.jhlabs.image.ShadeFilter: int envWidth>;

        $i12 = $i11 - 1;

        if i6 != $i12 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        z0 = $z1;

        $i13 = r0.<com.jhlabs.image.ShadeFilter: int envHeight>;

        $i14 = $i13 - 1;

        if i7 != $i14 goto label3;

        $i26 = 0;

        goto label4;

     label3:
        $i26 = r0.<com.jhlabs.image.ShadeFilter: int envWidth>;

     label4:
        $r3 = r0.<com.jhlabs.image.ShadeFilter: int[] envPixels>;

        $i22 = $r3[i10];

        $r4 = r0.<com.jhlabs.image.ShadeFilter: int[] envPixels>;

        $i15 = i10 + z0;

        $i21 = $r4[$i15];

        $r5 = r0.<com.jhlabs.image.ShadeFilter: int[] envPixels>;

        $i16 = i10 + $i26;

        $i20 = $r5[$i16];

        $r6 = r0.<com.jhlabs.image.ShadeFilter: int[] envPixels>;

        $i17 = i10 + z0;

        $i18 = $i17 + $i26;

        $i19 = $r6[$i18];

        $i23 = staticinvoke <com.jhlabs.image.ImageMath: int bilinearInterpolate(float,float,int,int,int,int)>(f13, f15, $i22, $i21, $i20, $i19);

        return $i23;

     label5:
        return 0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.ShadeFilter r0;

        r0 := @this: com.jhlabs.image.ShadeFilter;

        return "Stylize/Shade...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.ShadeFilter: float r255> = 0.003921569F;

        <com.jhlabs.image.ShadeFilter: int BUMPS_FROM_BEVEL> = 3;

        <com.jhlabs.image.ShadeFilter: int BUMPS_FROM_MAP> = 2;

        <com.jhlabs.image.ShadeFilter: int BUMPS_FROM_IMAGE_ALPHA> = 1;

        <com.jhlabs.image.ShadeFilter: int BUMPS_FROM_IMAGE> = 0;

        <com.jhlabs.image.ShadeFilter: int COLORS_CONSTANT> = 1;

        <com.jhlabs.image.ShadeFilter: int COLORS_FROM_IMAGE> = 0;

        return;
    }
}
