public final class ucar.units.LogarithmicUnit extends ucar.units.UnitImpl implements ucar.units.DerivableUnit
{
    private static final long serialVersionUID;
    private final double base;
    private final transient double lnBase;
    private final ucar.units.DerivableUnit reference;
    private final transient ucar.units.DerivedUnit derivedUnit;
    static final boolean $assertionsDisabled;

    public void <init>(ucar.units.Unit, double)
    {
        ucar.units.Unit r1;
        ucar.units.LogarithmicUnit r0;
        double d0;

        r0 := @this: ucar.units.LogarithmicUnit;

        r1 := @parameter0: ucar.units.Unit;

        d0 := @parameter1: double;

        specialinvoke r0.<ucar.units.LogarithmicUnit: void <init>(ucar.units.Unit,double,ucar.units.UnitName)>(r1, d0, null);

        return;
    }

    public void <init>(ucar.units.Unit, double, ucar.units.UnitName)
    {
        ucar.units.DerivedUnit $r4;
        java.lang.NullPointerException $r15;
        ucar.units.LogarithmicUnit r0;
        byte $b0, $b1, $b2, $b3;
        java.lang.String $r9, $r14;
        boolean $z0;
        double d0, $d1;
        ucar.units.UnitName r1;
        ucar.units.Unit r2;
        java.lang.IllegalArgumentException $r5, $r10;
        ucar.units.DerivableUnit $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;

        r0 := @this: ucar.units.LogarithmicUnit;

        r2 := @parameter0: ucar.units.Unit;

        d0 := @parameter1: double;

        r1 := @parameter2: ucar.units.UnitName;

        specialinvoke r0.<ucar.units.UnitImpl: void <init>(ucar.units.UnitName)>(r1);

        if r2 != null goto label1;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null reference argument");

        throw $r15;

     label1:
        $z0 = r2 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a DerivableUnit: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r3 = (ucar.units.DerivableUnit) r2;

        r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference> = $r3;

        $b0 = d0 cmpl 2.0;

        if $b0 == 0 goto label3;

        $b1 = d0 cmpl 10.0;

        if $b1 == 0 goto label3;

        $b2 = d0 cmpl 2.718281828459045;

        if $b2 == 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid base: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        r0.<ucar.units.LogarithmicUnit: double base> = d0;

        $b3 = d0 cmpl 2.718281828459045;

        if $b3 != 0 goto label4;

        $d1 = 1.0;

        goto label5;

     label4:
        $d1 = staticinvoke <java.lang.Math: double log(double)>(d0);

     label5:
        r0.<ucar.units.LogarithmicUnit: double lnBase> = $d1;

        $r4 = interfaceinvoke r2.<ucar.units.Unit: ucar.units.DerivedUnit getDerivedUnit()>();

        r0.<ucar.units.LogarithmicUnit: ucar.units.DerivedUnit derivedUnit> = $r4;

        return;
    }

    static ucar.units.Unit getInstance(ucar.units.Unit, double)
    {
        ucar.units.Unit r1;
        ucar.units.LogarithmicUnit $r0;
        double d0;

        r1 := @parameter0: ucar.units.Unit;

        d0 := @parameter1: double;

        $r0 = new ucar.units.LogarithmicUnit;

        specialinvoke $r0.<ucar.units.LogarithmicUnit: void <init>(ucar.units.Unit,double)>(r1, d0);

        return $r0;
    }

    public ucar.units.DerivableUnit getReference()
    {
        ucar.units.DerivableUnit $r1;
        ucar.units.LogarithmicUnit r0;

        r0 := @this: ucar.units.LogarithmicUnit;

        $r1 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        return $r1;
    }

    public double getBase()
    {
        ucar.units.LogarithmicUnit r0;
        double $d0;

        r0 := @this: ucar.units.LogarithmicUnit;

        $d0 = r0.<ucar.units.LogarithmicUnit: double base>;

        return $d0;
    }

    public ucar.units.Unit clone(ucar.units.UnitName)
    {
        ucar.units.UnitName r4;
        ucar.units.DerivableUnit $r2;
        ucar.units.LogarithmicUnit $r0, r1;
        ucar.units.Unit $r3;
        double $d0;

        r1 := @this: ucar.units.LogarithmicUnit;

        r4 := @parameter0: ucar.units.UnitName;

        $r0 = new ucar.units.LogarithmicUnit;

        $r2 = r1.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $r3 = (ucar.units.Unit) $r2;

        $d0 = virtualinvoke r1.<ucar.units.LogarithmicUnit: double getBase()>();

        specialinvoke $r0.<ucar.units.LogarithmicUnit: void <init>(ucar.units.Unit,double,ucar.units.UnitName)>($r3, $d0, r4);

        return $r0;
    }

    protected ucar.units.Unit myMultiplyBy(ucar.units.Unit) throws ucar.units.MultiplyException
    {
        ucar.units.Unit r0;
        ucar.units.MultiplyException $r5;
        ucar.units.UnitImpl $r4;
        ucar.units.LogarithmicUnit r1;
        ucar.units.ScaledUnit $r2, $r6;
        boolean $z0, $z1;
        double $d0;

        r1 := @this: ucar.units.LogarithmicUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = interfaceinvoke r0.<ucar.units.Unit: boolean isDimensionless()>();

        if $z0 != 0 goto label1;

        $r5 = new ucar.units.MultiplyException;

        specialinvoke $r5.<ucar.units.MultiplyException: void <init>(ucar.units.Unit)>(r0);

        throw $r5;

     label1:
        $z1 = r0 instanceof ucar.units.ScaledUnit;

        if $z1 == 0 goto label2;

        $r6 = new ucar.units.ScaledUnit;

        $r4 = $r6;

        $r2 = (ucar.units.ScaledUnit) r0;

        $d0 = virtualinvoke $r2.<ucar.units.ScaledUnit: double getScale()>();

        specialinvoke $r6.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d0, r1);

        goto label3;

     label2:
        $r4 = r1;

     label3:
        return $r4;
    }

    protected ucar.units.Unit myDivideBy(ucar.units.Unit) throws ucar.units.DivideException
    {
        ucar.units.Unit r0;
        ucar.units.UnitImpl $r4;
        ucar.units.LogarithmicUnit r1;
        ucar.units.DivideException $r5;
        ucar.units.ScaledUnit $r2, $r6;
        boolean $z0, $z1;
        double $d0, $d1;

        r1 := @this: ucar.units.LogarithmicUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = interfaceinvoke r0.<ucar.units.Unit: boolean isDimensionless()>();

        if $z0 != 0 goto label1;

        $r5 = new ucar.units.DivideException;

        specialinvoke $r5.<ucar.units.DivideException: void <init>(ucar.units.Unit)>(r0);

        throw $r5;

     label1:
        $z1 = r0 instanceof ucar.units.ScaledUnit;

        if $z1 == 0 goto label2;

        $r6 = new ucar.units.ScaledUnit;

        $r4 = $r6;

        $r2 = (ucar.units.ScaledUnit) r0;

        $d0 = virtualinvoke $r2.<ucar.units.ScaledUnit: double getScale()>();

        $d1 = 1.0 / $d0;

        specialinvoke $r6.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d1, r1);

        goto label3;

     label2:
        $r4 = r1;

     label3:
        return $r4;
    }

    protected ucar.units.Unit myDivideInto(ucar.units.Unit) throws ucar.units.OperationException
    {
        ucar.units.Unit r1;
        ucar.units.DivideException $r0;
        ucar.units.LogarithmicUnit r2;

        r2 := @this: ucar.units.LogarithmicUnit;

        r1 := @parameter0: ucar.units.Unit;

        $r0 = new ucar.units.DivideException;

        specialinvoke $r0.<ucar.units.DivideException: void <init>(ucar.units.Unit)>(r1);

        throw $r0;
    }

    protected ucar.units.Unit myRaiseTo(int) throws ucar.units.RaiseException
    {
        ucar.units.RaiseException $r0;
        ucar.units.LogarithmicUnit r1;
        int i0;
        ucar.units.DerivedUnitImpl $r2;

        r1 := @this: ucar.units.LogarithmicUnit;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = <ucar.units.DerivedUnitImpl: ucar.units.DerivedUnitImpl DIMENSIONLESS>;

        return $r2;

     label1:
        if i0 != 1 goto label2;

        return r1;

     label2:
        $r0 = new ucar.units.RaiseException;

        specialinvoke $r0.<ucar.units.RaiseException: void <init>(ucar.units.Unit)>(r1);

        throw $r0;
    }

    public ucar.units.DerivedUnit getDerivedUnit()
    {
        ucar.units.DerivedUnit $r1;
        ucar.units.LogarithmicUnit r0;

        r0 := @this: ucar.units.LogarithmicUnit;

        $r1 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivedUnit derivedUnit>;

        return $r1;
    }

    public float toDerivedUnit(float) throws ucar.units.ConversionException
    {
        ucar.units.LogarithmicUnit r0;
        float f0, $f1;
        double $d0, $d1;

        r0 := @this: ucar.units.LogarithmicUnit;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.LogarithmicUnit: double toDerivedUnit(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public double toDerivedUnit(double) throws ucar.units.ConversionException
    {
        ucar.units.DerivableUnit $r1;
        ucar.units.LogarithmicUnit r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: ucar.units.LogarithmicUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $d1 = r0.<ucar.units.LogarithmicUnit: double lnBase>;

        $d2 = d0 * $d1;

        $d3 = staticinvoke <java.lang.Math: double exp(double)>($d2);

        $d4 = interfaceinvoke $r1.<ucar.units.DerivableUnit: double toDerivedUnit(double)>($d3);

        return $d4;
    }

    public float[] toDerivedUnit(float[], float[]) throws ucar.units.ConversionException
    {
        float[] r0, r2, $r4;
        ucar.units.DerivableUnit $r3;
        ucar.units.LogarithmicUnit r1;
        int i0, $i2;
        float $f0, $f1;
        double $d0, $d1, $d2, $d3;

        r1 := @this: ucar.units.LogarithmicUnit;

        r0 := @parameter0: float[];

        r2 := @parameter1: float[];

        i0 = lengthof r0;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $f0 = r0[i0];

        $d1 = (double) $f0;

        $d0 = r1.<ucar.units.LogarithmicUnit: double lnBase>;

        $d2 = $d1 * $d0;

        $d3 = staticinvoke <java.lang.Math: double exp(double)>($d2);

        $f1 = (float) $d3;

        r2[i0] = $f1;

        goto label1;

     label2:
        $r3 = r1.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $r4 = interfaceinvoke $r3.<ucar.units.DerivableUnit: float[] toDerivedUnit(float[],float[])>(r2, r2);

        return $r4;
    }

    public double[] toDerivedUnit(double[], double[]) throws ucar.units.ConversionException
    {
        double[] r0, r2, $r4;
        ucar.units.DerivableUnit $r3;
        ucar.units.LogarithmicUnit r1;
        int i0, $i2;
        double $d0, $d1, $d2, $d3;

        r1 := @this: ucar.units.LogarithmicUnit;

        r0 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r0;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $d1 = r0[i0];

        $d0 = r1.<ucar.units.LogarithmicUnit: double lnBase>;

        $d2 = $d1 * $d0;

        $d3 = staticinvoke <java.lang.Math: double exp(double)>($d2);

        r2[i0] = $d3;

        goto label1;

     label2:
        $r3 = r1.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $r4 = interfaceinvoke $r3.<ucar.units.DerivableUnit: double[] toDerivedUnit(double[],double[])>(r2, r2);

        return $r4;
    }

    public float fromDerivedUnit(float) throws ucar.units.ConversionException
    {
        ucar.units.LogarithmicUnit r0;
        float f0, $f1;
        double $d0, $d1;

        r0 := @this: ucar.units.LogarithmicUnit;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.LogarithmicUnit: double fromDerivedUnit(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public double fromDerivedUnit(double) throws ucar.units.ConversionException
    {
        ucar.units.DerivableUnit $r1;
        ucar.units.LogarithmicUnit r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: ucar.units.LogarithmicUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $d1 = interfaceinvoke $r1.<ucar.units.DerivableUnit: double fromDerivedUnit(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d3 = r0.<ucar.units.LogarithmicUnit: double lnBase>;

        $d4 = $d2 / $d3;

        return $d4;
    }

    public float[] fromDerivedUnit(float[], float[]) throws ucar.units.ConversionException
    {
        float[] r1, r2;
        ucar.units.DerivableUnit $r3;
        ucar.units.LogarithmicUnit r0;
        int i0, $i2;
        float $f0, $f1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: ucar.units.LogarithmicUnit;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $r3 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        interfaceinvoke $r3.<ucar.units.DerivableUnit: float[] fromDerivedUnit(float[],float[])>(r1, r2);

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $f0 = r2[i0];

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = r0.<ucar.units.LogarithmicUnit: double lnBase>;

        $d3 = $d1 / $d2;

        $f1 = (float) $d3;

        r2[i0] = $f1;

        goto label1;

     label2:
        return r2;
    }

    public double[] fromDerivedUnit(double[], double[]) throws ucar.units.ConversionException
    {
        double[] r1, r2;
        ucar.units.DerivableUnit $r3;
        ucar.units.LogarithmicUnit r0;
        int i0, $i2;
        float $f0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: ucar.units.LogarithmicUnit;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        interfaceinvoke $r3.<ucar.units.DerivableUnit: double[] fromDerivedUnit(double[],double[])>(r1, r2);

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $d0 = r2[i0];

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = r0.<ucar.units.LogarithmicUnit: double lnBase>;

        $d3 = $d1 / $d2;

        $f0 = (float) $d3;

        $d4 = (double) $f0;

        r2[i0] = $d4;

        goto label1;

     label2:
        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.units.DerivableUnit $r3, $r4;
        ucar.units.LogarithmicUnit r0, r2;
        byte $b0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        double $d0, $d1;

        r0 := @this: ucar.units.LogarithmicUnit;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof ucar.units.LogarithmicUnit;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (ucar.units.LogarithmicUnit) r1;

        $d1 = r0.<ucar.units.LogarithmicUnit: double base>;

        $d0 = r2.<ucar.units.LogarithmicUnit: double base>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label3;

        $r4 = r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $r3 = r2.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit reference>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        ucar.units.DerivableUnit $r2;
        ucar.units.LogarithmicUnit r0;
        java.lang.Double $r1;
        int $i0, $i1, $i2;
        double $d0;

        r0 := @this: ucar.units.LogarithmicUnit;

        $d0 = r0.<ucar.units.LogarithmicUnit: double base>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = virtualinvoke $r1.<java.lang.Double: int hashCode()>();

        $r2 = virtualinvoke r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit getReference()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean isDimensionless()
    {
        ucar.units.LogarithmicUnit r0;

        r0 := @this: ucar.units.LogarithmicUnit;

        return 1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1, $r2;
        ucar.units.LogarithmicUnit r0;

        r0 := @this: ucar.units.LogarithmicUnit;

        $r1 = specialinvoke r0.<ucar.units.UnitImpl: java.lang.String toString()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.LogarithmicUnit: java.lang.String getCanonicalString()>();

     label2:
        return $r2;
    }

    public java.lang.String getCanonicalString()
    {
        ucar.units.DerivableUnit $r5;
        ucar.units.LogarithmicUnit r0;
        byte $b0, $b1;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.String $r2, $r6, $r9;
        double $d0, $d1;

        r0 := @this: ucar.units.LogarithmicUnit;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $d0 = r0.<ucar.units.LogarithmicUnit: double base>;

        $b0 = $d0 cmpl 2.0;

        if $b0 != 0 goto label1;

        $r2 = "lb";

        goto label3;

     label1:
        $d1 = r0.<ucar.units.LogarithmicUnit: double base>;

        $b1 = $d1 cmpl 2.718281828459045;

        if $b1 != 0 goto label2;

        $r2 = "ln";

        goto label3;

     label2:
        $r2 = "lg";

     label3:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(re ");

        $r5 = virtualinvoke r0.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit getReference()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        ucar.units.LogarithmicUnit $r28;
        ucar.units.DerivableUnit $r19;
        ucar.units.RegularBaseQuantity $r1;
        java.lang.AssertionError $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        ucar.units.UnitName $r0;
        ucar.units.Unit $r4;
        ucar.units.ScaledUnit $r27;
        float $f0, $f1;
        ucar.units.MultiplyException $r25;
        java.lang.String[] r26;
        int $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        double $d0, $d1, $d2, $d3, $d4;
        ucar.units.RaiseException $r23;
        ucar.units.DivideException $r24;
        ucar.units.BaseUnit $r2;

        r26 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <ucar.units.UnitName: ucar.units.UnitName newUnitName(java.lang.String,java.lang.String,java.lang.String)>("meter", null, "m");

        $r1 = <ucar.units.BaseQuantity: ucar.units.RegularBaseQuantity LENGTH>;

        $r2 = staticinvoke <ucar.units.BaseUnit: ucar.units.BaseUnit getOrCreate(ucar.units.UnitName,ucar.units.BaseQuantity)>($r0, $r1);

        $r27 = new ucar.units.ScaledUnit;

        specialinvoke $r27.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>(1.0E-6, $r2);

        $r4 = virtualinvoke $r27.<ucar.units.ScaledUnit: ucar.units.Unit raiseTo(int)>(3);

        $r28 = new ucar.units.LogarithmicUnit;

        specialinvoke $r28.<ucar.units.LogarithmicUnit: void <init>(ucar.units.Unit,double)>($r4, 10.0);

        $z0 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z21 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: boolean isDimensionless()>();

        if $z21 != 0 goto label01;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label01:
        $z1 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $z20 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: boolean equals(java.lang.Object)>($r28);

        if $z20 != 0 goto label02;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label02:
        $z2 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $r19 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: ucar.units.DerivableUnit getReference()>();

        $z19 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z19 != 0 goto label03;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label03:
        $z3 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        $d3 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: double getBase()>();

        $b8 = $d3 cmpl 10.0;

        if $b8 == 0 goto label04;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label04:
        $z4 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z4 != 0 goto label05;

        $z18 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: boolean equals(java.lang.Object)>($r4);

        if $z18 == 0 goto label05;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label05:
        $z5 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z5 != 0 goto label06;

        $z17 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: boolean equals(java.lang.Object)>($r27);

        if $z17 == 0 goto label06;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label06:
        $z6 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z6 != 0 goto label07;

        $z16 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: boolean equals(java.lang.Object)>($r2);

        if $z16 == 0 goto label07;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label07:
        virtualinvoke $r28.<ucar.units.LogarithmicUnit: ucar.units.Unit multiplyBy(ucar.units.Unit)>($r2);

        $z7 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z7 != 0 goto label08;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

     label10:
        virtualinvoke $r28.<ucar.units.LogarithmicUnit: ucar.units.Unit divideBy(ucar.units.Unit)>($r2);

        $z8 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z8 != 0 goto label11;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label11:
        goto label13;

     label12:
        $r24 := @caughtexception;

     label13:
        virtualinvoke $r28.<ucar.units.LogarithmicUnit: ucar.units.Unit raiseTo(int)>(2);

        $z9 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z9 != 0 goto label14;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>()>();

        throw $r38;

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

     label16:
        $f0 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: float toDerivedUnit(float)>(0.0F);

        $d4 = (double) $f0;

        $z10 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z10 != 0 goto label18;

        $b6 = 9.0E-19 cmpg $d4;

        $i9 = (int) $b6;

        if $i9 >= 0 goto label17;

        $b7 = $d4 cmpg 1.1E-18;

        $i10 = (int) $b7;

        if $i10 < 0 goto label18;

     label17:
        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>(double)>($d4);

        throw $r39;

     label18:
        $f1 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: float toDerivedUnit(float)>(1.0F);

        $d2 = (double) $f1;

        $z11 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z11 != 0 goto label20;

        $b4 = 9.0E-18 cmpg $d2;

        $i11 = (int) $b4;

        if $i11 >= 0 goto label19;

        $b5 = $d2 cmpg 1.1E-17;

        $i12 = (int) $b5;

        if $i12 < 0 goto label20;

     label19:
        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>(double)>($d2);

        throw $r40;

     label20:
        $d0 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: double fromDerivedUnit(double)>(1.0E-18);

        $z12 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z12 != 0 goto label22;

        $b2 = -0.1 cmpg $d0;

        $i13 = (int) $b2;

        if $i13 >= 0 goto label21;

        $b3 = $d0 cmpg 0.1;

        $i14 = (int) $b3;

        if $i14 < 0 goto label22;

     label21:
        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>(double)>($d0);

        throw $r41;

     label22:
        $d1 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: double fromDerivedUnit(double)>(1.0E-17);

        $z13 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z13 != 0 goto label24;

        $b0 = 0.9 cmpg $d1;

        $i15 = (int) $b0;

        if $i15 >= 0 goto label23;

        $b1 = $d1 cmpg 1.1;

        $i16 = (int) $b1;

        if $i16 < 0 goto label24;

     label23:
        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>(double)>($d1);

        throw $r42;

     label24:
        $r6 = virtualinvoke $r28.<ucar.units.LogarithmicUnit: java.lang.String toString()>();

        $z14 = <ucar.units.LogarithmicUnit: boolean $assertionsDisabled>;

        if $z14 != 0 goto label25;

        $z15 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("lg(re 9.999999999999999E-19 m3)");

        if $z15 != 0 goto label25;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r43;

     label25:
        return;

        catch ucar.units.MultiplyException from label07 to label08 with label09;
        catch ucar.units.DivideException from label10 to label11 with label12;
        catch ucar.units.RaiseException from label13 to label14 with label15;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <ucar.units.LogarithmicUnit: long serialVersionUID> = 1L;

        $r0 = class "Lucar/units/LogarithmicUnit;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.units.LogarithmicUnit: boolean $assertionsDisabled> = $z1;

        return;
    }
}
