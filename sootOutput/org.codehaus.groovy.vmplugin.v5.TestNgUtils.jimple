public class org.codehaus.groovy.vmplugin.v5.TestNgUtils extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.groovy.vmplugin.v5.TestNgUtils r0;

        r0 := @this: org.codehaus.groovy.vmplugin.v5.TestNgUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Boolean realIsTestNgTest(java.lang.Class, groovy.lang.GroovyClassLoader)
    {
        java.lang.Throwable $r7;
        java.lang.reflect.Method[] $r4;
        java.lang.'annotation'.Annotation $r3, $r6;
        int $i0, i1;
        java.lang.Boolean $r9;
        java.lang.Class $r1, r2;
        java.lang.ClassNotFoundException $r8;
        groovy.lang.GroovyClassLoader r0;
        java.lang.reflect.Method r5;
        boolean z0;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: groovy.lang.GroovyClassLoader;

        z0 = 0;

     label01:
        $r1 = virtualinvoke r0.<groovy.lang.GroovyClassLoader: java.lang.Class loadClass(java.lang.String)>("org.testng.annotations.Test");

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r1);

        if $r3 == null goto label02;

        z0 = 1;

        goto label05;

     label02:
        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = 0;

     label03:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label05;

        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r1);

        if $r6 == null goto label04;

        z0 = 1;

        goto label05;

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

     label09:
        if z0 == 0 goto label10;

        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label11;

     label10:
        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label11:
        return $r9;

        catch java.lang.ClassNotFoundException from label01 to label05 with label06;
        catch java.lang.Throwable from label01 to label07 with label08;
    }

    static java.lang.Object realRunTestNgTest(java.lang.Class)
    {
        java.lang.Object[] $r0, $r2, $r4, $r6, $r7;
        groovy.lang.GroovyRuntimeException $r10;
        java.lang.Object $r1, $r5, $r8;
        java.lang.Class r3;
        java.lang.ClassNotFoundException $r9;

        r3 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Object)[0];

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeConstructorOf(java.lang.String,java.lang.Object)>("org.testng.TestNG", $r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>($r1, "setTestClasses", $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeConstructorOf(java.lang.String,java.lang.Object)>("org.testng.TestListenerAdapter", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r5;

        staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>($r1, "addListener", $r6);

        $r7 = newarray (java.lang.Object)[0];

        $r8 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>($r1, "run", $r7);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = new groovy.lang.GroovyRuntimeException;

        specialinvoke $r10.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>("Error running TestNG test.");

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
