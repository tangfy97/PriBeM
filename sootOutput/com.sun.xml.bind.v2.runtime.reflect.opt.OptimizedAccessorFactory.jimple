public abstract class com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    private static final java.lang.String fieldTemplateName;
    private static final java.lang.String methodTemplateName;

    private void <init>()
    {
        com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final com.sun.xml.bind.v2.runtime.reflect.Accessor get(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.util.Map $r74;
        java.lang.StringBuilder $r12, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r26, $r28, $r29, $r37, $r38, $r40, $r42, $r43, $r45, $r47, $r48, $r50, $r51, $r53, $r54, $r56, $r57, $r62, $r65, $r66, $r67, $r68, $r71, $r73, $r78, $r84, $r85, $r87, $r90, $r91, $r93, $r98, $r99, $r100, $r101, $r102, $r103;
        java.lang.String $r11, $r14, $r17, $r20, $r24, $r27, $r30, $r32, $r34, $r35, $r36, $r39, $r41, $r44, $r46, $r49, $r52, $r55, $r58, $r59, $r60, $r69, $r72, $r77, $r79, $r81, $r83, $r86, $r88, $r89, $r92, $r94, $r95, $r97, r104, r105, r106;
        java.lang.Class[] $r1, $r3;
        java.lang.reflect.Method r0, r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.logging.Logger $r63;
        java.lang.String[] $r31, $r80;
        java.util.logging.Level $r64;
        int $i0, $i1, $i2, $i3;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r61;
        java.lang.Class $r4, $r5, $r6, $r7, $r8, $r9, r10, $r13, $r25, $r33, $r70, $r76, $r82, $r96, r107;
        java.lang.Object $r75;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 == 0 goto label01;

        return null;

     label01:
        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r3;

        if $i1 == 1 goto label02;

        return null;

     label02:
        $r4 = $r3[0];

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r4 == $r5 goto label03;

        return null;

     label03:
        $r6 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if $r6 == $r7 goto label04;

        return null;

     label04:
        $r8 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r9 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r8 == $r9 goto label05;

        return null;

     label05:
        $i2 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i2);

        if $z0 != 0 goto label06;

        $i3 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i3);

        if $z1 == 0 goto label07;

     label06:
        return null;

     label07:
        r10 = $r3[0];

        $r11 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();

        r104 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

        $z2 = virtualinvoke r10.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label10;

        r105 = "AOf_";

        $r96 = virtualinvoke r10.<java.lang.Class: java.lang.Class getComponentType()>();

        $r97 = virtualinvoke $r96.<java.lang.Class: java.lang.String getName()>();

        r106 = virtualinvoke $r97.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

     label08:
        $z4 = virtualinvoke r106.<java.lang.String: boolean startsWith(java.lang.String)>("[L");

        if $z4 == 0 goto label09;

        r106 = virtualinvoke r106.<java.lang.String: java.lang.String substring(int)>(2);

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AOf_");

        r105 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label09:
        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r106);

        r104 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r14 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$JaxbAccessorM_");

        $r17 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r20 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r104);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke r10.<java.lang.Class: boolean isPrimitive()>();

        if $z3 == 0 goto label11;

        $r70 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r72 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.lang.String methodTemplateName>;

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = <com.sun.xml.bind.v2.runtime.RuntimeUtil: java.util.Map primitiveToBox>;

        $r75 = interfaceinvoke $r74.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        $r76 = (java.lang.Class) $r75;

        $r77 = virtualinvoke $r76.<java.lang.Class: java.lang.String getSimpleName()>();

        $r78 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80 = newarray (java.lang.String)[6];

        $r81 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Bean;");

        $r80[0] = $r81;

        $r82 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r83 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r82);

        $r80[1] = $r83;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get_");

        $r86 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80[2] = $r88;

        $r89 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r80[3] = $r89;

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set_");

        $r92 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();

        $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80[4] = $r94;

        $r95 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r80[5] = $r95;

        r107 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.Class prepare(java.lang.Class,java.lang.String,java.lang.String,java.lang.String[])>($r70, $r79, $r24, $r80);

        goto label12;

     label11:
        $r25 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.lang.String methodTemplateName>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ref");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = newarray (java.lang.String)[12];

        $r32 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Bean;");

        $r31[0] = $r32;

        $r33 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r34 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r33);

        $r31[1] = $r34;

        $r35 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Ref;");

        $r31[2] = $r35;

        $r36 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(r10);

        $r31[3] = $r36;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r39 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Ref;");

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31[4] = $r41;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r44 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>(r10);

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31[5] = $r46;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r49 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Ref;");

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31[6] = $r52;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r55 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>(r10);

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31[7] = $r58;

        $r31[8] = "get_ref";

        $r59 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r31[9] = $r59;

        $r31[10] = "set_ref";

        $r60 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r31[11] = $r60;

        r107 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.Class prepare(java.lang.Class,java.lang.String,java.lang.String,java.lang.String[])>($r25, $r30, $r24, $r31);

     label12:
        if r107 != null goto label13;

        return null;

     label13:
        $r61 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor instanciate(java.lang.Class)>(r107);

        if $r61 == null goto label14;

        $r63 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.util.logging.Logger logger>;

        $r64 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using optimized Accessor for ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r63.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r64, $r69);

     label14:
        return $r61;
    }

    public static final com.sun.xml.bind.v2.runtime.reflect.Accessor get(java.lang.reflect.Field)
    {
        java.util.Map $r38;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r29;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r11, $r13, $r14, $r28, $r31, $r32, $r35, $r37, $r43, $r49, $r50, $r53;
        java.lang.String[] $r16, $r45;
        java.util.logging.Level $r30;
        int $i0;
        java.lang.String $r3, $r6, $r8, $r12, $r15, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r33, $r36, $r42, $r44, $r46, $r48, $r52, $r54, $r55;
        java.lang.reflect.Field r0;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r27;
        java.lang.Class $r2, $r9, $r10, $r18, $r21, $r24, $r34, $r39, $r41, $r47, $r51, r56;
        java.lang.Object $r40;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r3 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$JaxbAccessorF_");

        $r6 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z2 = virtualinvoke $r9.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label3;

        $r34 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.lang.String fieldTemplateName>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = <com.sun.xml.bind.v2.runtime.RuntimeUtil: java.util.Map primitiveToBox>;

        $r39 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r40 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>($r39);

        $r41 = (java.lang.Class) $r40;

        $r42 = virtualinvoke $r41.<java.lang.Class: java.lang.String getSimpleName()>();

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45 = newarray (java.lang.String)[4];

        $r46 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Bean;");

        $r45[0] = $r46;

        $r47 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r48 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r47);

        $r45[1] = $r48;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f_");

        $r51 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r52 = virtualinvoke $r51.<java.lang.Class: java.lang.String getName()>();

        $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45[2] = $r54;

        $r55 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        $r45[3] = $r55;

        r56 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.Class prepare(java.lang.Class,java.lang.String,java.lang.String,java.lang.String[])>($r34, $r44, $r8, $r45);

        goto label4;

     label3:
        $r10 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.lang.String fieldTemplateName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ref");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = newarray (java.lang.String)[8];

        $r17 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Bean;");

        $r16[0] = $r17;

        $r18 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r19 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r18);

        $r16[1] = $r19;

        $r20 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Ref;");

        $r16[2] = $r20;

        $r21 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r22 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMClassName(java.lang.Class)>($r21);

        $r16[3] = $r22;

        $r23 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Ref;");

        $r16[4] = $r23;

        $r24 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r25 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: java.lang.String toVMTypeName(java.lang.Class)>($r24);

        $r16[5] = $r25;

        $r16[6] = "f_ref";

        $r26 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        $r16[7] = $r26;

        r56 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.Class prepare(java.lang.Class,java.lang.String,java.lang.String,java.lang.String[])>($r10, $r15, $r8, $r16);

     label4:
        if r56 != null goto label5;

        return null;

     label5:
        $r27 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor instanciate(java.lang.Class)>(r56);

        if $r27 == null goto label6;

        $r29 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.util.logging.Logger logger>;

        $r30 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using optimized Accessor for ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r30, $r33);

     label6:
        return $r27;
    }

    private static com.sun.xml.bind.v2.runtime.reflect.Accessor instanciate(java.lang.Class)
    {
        java.lang.IllegalAccessException $r6;
        java.util.logging.Logger $r5, $r8, $r11;
        java.util.logging.Level $r4, $r7, $r10;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        java.lang.InstantiationException $r9;
        java.lang.Class r0;
        java.lang.Object $r1;
        java.lang.SecurityException $r3;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r2 = (com.sun.xml.bind.v2.runtime.reflect.Accessor) $r1;

     label2:
        return $r2;

     label3:
        $r9 := @caughtexception;

        $r11 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.util.logging.Logger logger>;

        $r10 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r10, "failed to load an optimized Accessor", $r9);

        goto label6;

     label4:
        $r6 := @caughtexception;

        $r8 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, "failed to load an optimized Accessor", $r6);

        goto label6;

     label5:
        $r3 := @caughtexception;

        $r5 = <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, "failed to load an optimized Accessor", $r3);

     label6:
        return null;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.SecurityException from label1 to label2 with label5;
    }

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        java.util.logging.Logger $r0;
        java.lang.Class $r1, $r6;

        $r0 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.util.logging.Logger logger> = $r0;

        $r1 = class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/FieldAccessor_Byte;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = "Byte";

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.lang.String fieldTemplateName> = $r5;

        $r6 = class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/MethodAccessor_Byte;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = "Byte";

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i5 = $i3 - $i4;

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: java.lang.String methodTemplateName> = $r10;

        return;
    }
}
