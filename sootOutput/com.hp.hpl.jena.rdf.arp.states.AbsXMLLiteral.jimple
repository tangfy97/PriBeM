public abstract class com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral extends com.hp.hpl.jena.rdf.arp.states.Frame
{
    boolean checkComposingChar;
    static java.util.Map xmlNameSpace;
    protected final java.lang.StringBuffer rslt;
    public final java.util.Map namespaces;

    java.lang.String suggestParsetypeLiteral()
    {
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        return "";
    }

    private static java.lang.String prefix(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        return $r1;
    }

    protected void append(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;
        java.lang.StringBuffer $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        return;
    }

    private void append(char[], int, int)
    {
        java.lang.StringBuffer $r2;
        int i0, i1;
        char[] r1;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i0, i1);

        return;
    }

    protected void append(char)
    {
        char c0;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;
        java.lang.StringBuffer $r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        c0 := @parameter0: char;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext, java.lang.StringBuffer)
    {
        com.hp.hpl.jena.rdf.arp.states.FrameI r1;
        java.lang.StringBuffer r3;
        java.util.Map $r4;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.FrameI;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        r3 := @parameter2: java.lang.StringBuffer;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 1;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt> = r3;

        $r4 = <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map xmlNameSpace>;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map namespaces> = $r4;

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral, java.util.Map)
    {
        java.lang.StringBuffer $r3;
        java.util.Map r4;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0, r1;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r4 := @parameter1: java.util.Map;

        $r2 = r1.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml>;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, $r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 1;

        $r3 = r1.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt>;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt> = $r3;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map namespaces> = r4;

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        java.lang.StringBuffer $r3;
        java.util.Map $r4;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler r1;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.XMLHandler;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.StringBuffer rslt> = $r3;

        $r4 = <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map xmlNameSpace>;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map namespaces> = $r4;

        return;
    }

    private void useNameSpace(java.lang.String, java.lang.String, java.util.Map)
    {
        java.util.Map $r3, r5;
        java.lang.Object $r4;
        java.lang.String r0, r2;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.util.Map;

        $r3 = r1.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map namespaces>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label1:
        return;
    }

    public abstract void endElement() throws org.xml.sax.SAXParseException;

    void startLitElement(java.lang.String, java.lang.String, java.util.Map)
    {
        java.util.Map r4;
        java.lang.String r1, $r2, r3;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Map;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(60);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.String prefix(java.lang.String)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void useNameSpace(java.lang.String,java.lang.String,java.util.Map)>($r2, r3, r4);

        return;
    }

    private void appendAttrValue(java.lang.String)
    {
        char $c1;
        int $i0, i2, $i3;
        java.lang.String r0, r2, r3, r4;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r1;

        r1 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label12;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 9: goto label05;
            case 10: goto label06;
            case 13: goto label07;
            case 34: goto label04;
            case 38: goto label02;
            case 60: goto label03;
            default: goto label08;
        };

     label02:
        r2 = "&amp;";

        r4 = "&amp;";

        r3 = "&amp;";

        goto label09;

     label03:
        r2 = "&lt;";

        r4 = "&lt;";

        r3 = "&lt;";

        goto label09;

     label04:
        r2 = "&quot;";

        r4 = "&quot;";

        r3 = "&quot;";

        goto label09;

     label05:
        r2 = "&#x9;";

        r4 = "&#x9;";

        r3 = "&#x9;";

        goto label09;

     label06:
        r2 = "&#xA;";

        r4 = "&#xA;";

        r3 = "&#xA;";

        goto label09;

     label07:
        r2 = "&#xD;";

        r4 = "&#xD;";

        r3 = "&#xD;";

        goto label09;

     label08:
        r2 = null;

        r4 = null;

        r3 = null;

     label09:
        if r4 == null goto label10;

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(r3);

        goto label11;

     label10:
        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>($c1);

     label11:
        i2 = i2 + 1;

        goto label01;

     label12:
        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint $r2;
        char c3;
        int i0, i1, $i2, i4, $i5;
        char[] r1;
        java.lang.String r3, r4, r5;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar>;

        if $z0 == 0 goto label01;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void checkComposingChar(com.hp.hpl.jena.rdf.arp.impl.Taint,char[],int,int)>($r2, r1, i1, i0);

     label01:
        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 0;

        i4 = 0;

     label02:
        if i4 >= i0 goto label11;

        $i2 = i1 + i4;

        c3 = r1[$i2];

        $i5 = (int) c3;

        lookupswitch($i5)
        {
            case 13: goto label06;
            case 38: goto label03;
            case 60: goto label04;
            case 62: goto label05;
            default: goto label07;
        };

     label03:
        r3 = "&amp;";

        r5 = "&amp;";

        r4 = "&amp;";

        goto label08;

     label04:
        r3 = "&lt;";

        r5 = "&lt;";

        r4 = "&lt;";

        goto label08;

     label05:
        r3 = "&gt;";

        r5 = "&gt;";

        r4 = "&gt;";

        goto label08;

     label06:
        r3 = "&#xD;";

        r5 = "&#xD;";

        r4 = "&#xD;";

        goto label08;

     label07:
        r3 = null;

        r5 = null;

        r4 = null;

     label08:
        if r4 == null goto label09;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(r5);

        goto label10;

     label09:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(c3);

     label10:
        i4 = i4 + 1;

        goto label02;

     label11:
        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXParseException
    {
        int i0, i1;
        char[] r1;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>("<!--");

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>("-->");

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 1;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>("<?");

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(32);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>("?>");

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 1;

        return;
    }

    public com.hp.hpl.jena.rdf.arp.states.FrameI startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
    {
        java.util.Map $r10, r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r6, $r8, $r11;
        org.xml.sax.Attributes r5;
        int $i0, i1, $i3;
        java.lang.String r3, r4, $r19, $r21, $r24, $r26, $r27, $r28, $r29, $r30, r31, r34, r37;
        java.util.Map$Entry r33, r35, r36;
        java.util.Iterator $r7, $r9, $r12;
        java.util.TreeMap $r38, $r39;
        java.lang.Object $r14, $r15, $r16, $r17, $r18, $r20, $r22, $r23, $r25;
        com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral r0;
        com.hp.hpl.jena.rdf.arp.states.InnerXMLLiteral $r40;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral;

        r3 := @parameter0: java.lang.String;

        r31 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.xml.sax.Attributes;

        r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: boolean checkComposingChar> = 1;

        $r38 = new java.util.TreeMap;

        specialinvoke $r38.<java.util.TreeMap: void <init>()>();

        $r39 = new java.util.TreeMap;

        specialinvoke $r39.<java.util.TreeMap: void <init>()>();

        r32 = $r39;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void startLitElement(java.lang.String,java.lang.String,java.util.Map)>(r3, r4, $r39);

        $i0 = interfaceinvoke r5.<org.xml.sax.Attributes: int getLength()>();

        i1 = $i0 - 1;

     label01:
        if i1 < 0 goto label03;

        $r27 = interfaceinvoke r5.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i1);

        $r28 = interfaceinvoke r5.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i1);

        $r29 = staticinvoke <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.String prefix(java.lang.String)>($r28);

        $z6 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 != 0 goto label02;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void useNameSpace(java.lang.String,java.lang.String,java.util.Map)>($r29, $r27, $r39);

     label02:
        $r30 = interfaceinvoke r5.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i1);

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r30);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label01;

     label03:
        $r6 = interfaceinvoke $r39.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r22 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.util.Map$Entry) $r22;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(" xmlns");

        $r23 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();

        r34 = (java.lang.String) $r23;

        $r24 = "";

        $z5 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z5 != 0 goto label05;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(58);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>(r34);

     label05:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>("=\"");

        $r25 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.String) $r25;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void appendAttrValue(java.lang.String)>($r26);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(34);

        goto label04;

     label06:
        $r8 = interfaceinvoke $r38.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r17 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r17;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(32);

        $r18 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.String) $r18;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>($r19);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(java.lang.String)>("=\"");

        $r20 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.lang.String) $r20;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void appendAttrValue(java.lang.String)>($r21);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(34);

        goto label07;

     label08:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: void append(char)>(62);

        $z2 = interfaceinvoke $r39.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label09;

        r32 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map namespaces>;

        goto label12;

     label09:
        $r10 = r0.<com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map namespaces>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r14 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r36 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getKey()>();

        r37 = (java.lang.String) $r15;

        $z4 = interfaceinvoke $r39.<java.util.Map: boolean containsKey(java.lang.Object)>(r37);

        if $z4 != 0 goto label11;

        $r16 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r37, $r16);

     label11:
        goto label10;

     label12:
        $r40 = new com.hp.hpl.jena.rdf.arp.states.InnerXMLLiteral;

        specialinvoke $r40.<com.hp.hpl.jena.rdf.arp.states.InnerXMLLiteral: void <init>(com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral,java.lang.String,java.util.Map)>(r0, r4, r32);

        return $r40;
    }

    static void <clinit>()
    {
        java.util.TreeMap $r0;
        java.util.Map $r2, $r3;
        java.lang.String $r1;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map xmlNameSpace> = $r0;

        $r2 = <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map xmlNameSpace>;

        $r1 = <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.lang.String xmlns>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml", $r1);

        $r3 = <com.hp.hpl.jena.rdf.arp.states.AbsXMLLiteral: java.util.Map xmlNameSpace>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("", "");

        return;
    }
}
