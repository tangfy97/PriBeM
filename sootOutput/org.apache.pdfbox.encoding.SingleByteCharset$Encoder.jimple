class org.apache.pdfbox.encoding.SingleByteCharset$Encoder extends java.nio.charset.CharsetEncoder
{
    final org.apache.pdfbox.encoding.SingleByteCharset this$0;

    protected void <init>(org.apache.pdfbox.encoding.SingleByteCharset)
    {
        org.apache.pdfbox.encoding.SingleByteCharset r1;
        org.apache.pdfbox.encoding.SingleByteCharset$Encoder r0;

        r0 := @this: org.apache.pdfbox.encoding.SingleByteCharset$Encoder;

        r1 := @parameter0: org.apache.pdfbox.encoding.SingleByteCharset;

        r0.<org.apache.pdfbox.encoding.SingleByteCharset$Encoder: org.apache.pdfbox.encoding.SingleByteCharset this$0> = r1;

        specialinvoke r0.<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>(r1, 1.0F, 1.0F);

        return;
    }

    protected java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        byte[] r6;
        java.nio.ByteBuffer r2;
        java.nio.charset.CoderResult $r1, $r7, $r8, $r9, $r10;
        byte b3;
        int i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;
        org.apache.pdfbox.encoding.SingleByteCharset $r4;
        java.nio.CharBuffer r0;
        char $c0, c2;
        byte[][] $r5;
        org.apache.pdfbox.encoding.SingleByteCharset$Encoder r3;

        r3 := @this: org.apache.pdfbox.encoding.SingleByteCharset$Encoder;

        r0 := @parameter0: java.nio.CharBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

     label1:
        $z0 = virtualinvoke r0.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label6;

        $c0 = virtualinvoke r0.<java.nio.CharBuffer: char get()>();

        $z1 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label2;

        $i10 = virtualinvoke r0.<java.nio.CharBuffer: int position()>();

        $i11 = $i10 - 1;

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i11);

        $r10 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        return $r10;

     label2:
        $i12 = (int) $c0;

        i1 = $i12 >> 8;

        c2 = $c0 & 255;

        if i1 <= 255 goto label3;

        $i8 = virtualinvoke r0.<java.nio.CharBuffer: int position()>();

        $i9 = $i8 - 1;

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i9);

        $r9 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>(1);

        return $r9;

     label3:
        $r4 = r3.<org.apache.pdfbox.encoding.SingleByteCharset$Encoder: org.apache.pdfbox.encoding.SingleByteCharset this$0>;

        $r5 = staticinvoke <org.apache.pdfbox.encoding.SingleByteCharset: byte[][] access$100(org.apache.pdfbox.encoding.SingleByteCharset)>($r4);

        r6 = $r5[i1];

        if r6 != null goto label4;

        $i6 = virtualinvoke r0.<java.nio.CharBuffer: int position()>();

        $i7 = $i6 - 1;

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i7);

        $r8 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>(1);

        return $r8;

     label4:
        $i13 = (int) c2;

        b3 = r6[$i13];

        if b3 != 0 goto label5;

        $i4 = virtualinvoke r0.<java.nio.CharBuffer: int position()>();

        $i5 = $i4 - 1;

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i5);

        $r7 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>(1);

        return $r7;

     label5:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b3);

        goto label1;

     label6:
        $r1 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r1;
    }
}
