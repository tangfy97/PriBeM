public class com.googlecode.mp4parser.FileDataSourceImpl extends java.lang.Object implements com.googlecode.mp4parser.DataSource
{
    java.nio.channels.FileChannel fc;

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        com.googlecode.mp4parser.FileDataSourceImpl r0;
        java.io.FileInputStream $r1;
        java.nio.channels.FileChannel $r3;
        java.io.File r2;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        r2 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        $r3 = virtualinvoke $r1.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc> = $r3;

        return;
    }

    public void <init>(java.lang.String) throws java.io.FileNotFoundException
    {
        com.googlecode.mp4parser.FileDataSourceImpl r0;
        java.io.FileInputStream $r1;
        java.lang.String r3;
        java.nio.channels.FileChannel $r4;
        java.io.File $r2;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.FileInputStream;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        $r4 = virtualinvoke $r1.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc> = $r4;

        return;
    }

    public void <init>(java.nio.channels.FileChannel)
    {
        java.nio.channels.FileChannel r1;
        com.googlecode.mp4parser.FileDataSourceImpl r0;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        r1 := @parameter0: java.nio.channels.FileChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc> = r1;

        return;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        com.googlecode.mp4parser.FileDataSourceImpl r0;
        int $i0;
        java.nio.channels.FileChannel $r2;
        java.nio.ByteBuffer r1;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        $i0 = virtualinvoke $r2.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(r1);

        return $i0;
    }

    public long size() throws java.io.IOException
    {
        long $l0;
        java.nio.channels.FileChannel $r1;
        com.googlecode.mp4parser.FileDataSourceImpl r0;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        $r1 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        $l0 = virtualinvoke $r1.<java.nio.channels.FileChannel: long size()>();

        return $l0;
    }

    public long position() throws java.io.IOException
    {
        long $l0;
        java.nio.channels.FileChannel $r1;
        com.googlecode.mp4parser.FileDataSourceImpl r0;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        $r1 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        $l0 = virtualinvoke $r1.<java.nio.channels.FileChannel: long position()>();

        return $l0;
    }

    public void position(long) throws java.io.IOException
    {
        long l0;
        java.nio.channels.FileChannel $r1;
        com.googlecode.mp4parser.FileDataSourceImpl r0;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        l0 := @parameter0: long;

        $r1 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        virtualinvoke $r1.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(l0);

        return;
    }

    public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.googlecode.mp4parser.FileDataSourceImpl r0;
        java.nio.channels.WritableByteChannel r1;
        long l0, l1, $l2;
        java.nio.channels.FileChannel $r2;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.nio.channels.WritableByteChannel;

        $r2 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        $l2 = virtualinvoke $r2.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(l0, l1, r1);

        return $l2;
    }

    public java.nio.ByteBuffer map(long, long) throws java.io.IOException
    {
        com.googlecode.mp4parser.FileDataSourceImpl r0;
        long l0, l1;
        java.nio.channels.FileChannel$MapMode $r1;
        java.nio.channels.FileChannel $r2;
        java.nio.MappedByteBuffer $r3;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r2 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        $r1 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r3 = virtualinvoke $r2.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r1, l0, l1);

        return $r3;
    }

    public void close() throws java.io.IOException
    {
        java.nio.channels.FileChannel $r1;
        com.googlecode.mp4parser.FileDataSourceImpl r0;

        r0 := @this: com.googlecode.mp4parser.FileDataSourceImpl;

        $r1 = r0.<com.googlecode.mp4parser.FileDataSourceImpl: java.nio.channels.FileChannel fc>;

        virtualinvoke $r1.<java.nio.channels.FileChannel: void close()>();

        return;
    }
}
