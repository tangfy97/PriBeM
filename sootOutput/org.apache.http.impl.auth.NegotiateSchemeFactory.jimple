public class org.apache.http.impl.auth.NegotiateSchemeFactory extends java.lang.Object implements org.apache.http.auth.AuthSchemeFactory
{
    private final org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator;
    private final boolean stripPort;

    public void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator, boolean)
    {
        org.apache.http.impl.auth.NegotiateSchemeFactory r0;
        org.apache.http.impl.auth.SpnegoTokenGenerator r1;
        boolean z0;

        r0 := @this: org.apache.http.impl.auth.NegotiateSchemeFactory;

        r1 := @parameter0: org.apache.http.impl.auth.SpnegoTokenGenerator;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.auth.NegotiateSchemeFactory: org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator> = r1;

        r0.<org.apache.http.impl.auth.NegotiateSchemeFactory: boolean stripPort> = z0;

        return;
    }

    public void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator)
    {
        org.apache.http.impl.auth.NegotiateSchemeFactory r0;
        org.apache.http.impl.auth.SpnegoTokenGenerator r1;

        r0 := @this: org.apache.http.impl.auth.NegotiateSchemeFactory;

        r1 := @parameter0: org.apache.http.impl.auth.SpnegoTokenGenerator;

        specialinvoke r0.<org.apache.http.impl.auth.NegotiateSchemeFactory: void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator,boolean)>(r1, 0);

        return;
    }

    public void <init>()
    {
        org.apache.http.impl.auth.NegotiateSchemeFactory r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateSchemeFactory;

        specialinvoke r0.<org.apache.http.impl.auth.NegotiateSchemeFactory: void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator,boolean)>(null, 0);

        return;
    }

    public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.auth.NegotiateSchemeFactory r1;
        org.apache.http.params.HttpParams r3;
        org.apache.http.impl.auth.SpnegoTokenGenerator $r2;
        org.apache.http.impl.auth.NegotiateScheme $r0;
        boolean $z0;

        r1 := @this: org.apache.http.impl.auth.NegotiateSchemeFactory;

        r3 := @parameter0: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.auth.NegotiateScheme;

        $r2 = r1.<org.apache.http.impl.auth.NegotiateSchemeFactory: org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator>;

        $z0 = r1.<org.apache.http.impl.auth.NegotiateSchemeFactory: boolean stripPort>;

        specialinvoke $r0.<org.apache.http.impl.auth.NegotiateScheme: void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator,boolean)>($r2, $z0);

        return $r0;
    }

    public boolean isStripPort()
    {
        org.apache.http.impl.auth.NegotiateSchemeFactory r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.auth.NegotiateSchemeFactory;

        $z0 = r0.<org.apache.http.impl.auth.NegotiateSchemeFactory: boolean stripPort>;

        return $z0;
    }

    public org.apache.http.impl.auth.SpnegoTokenGenerator getSpengoGenerator()
    {
        org.apache.http.impl.auth.NegotiateSchemeFactory r0;
        org.apache.http.impl.auth.SpnegoTokenGenerator $r1;

        r0 := @this: org.apache.http.impl.auth.NegotiateSchemeFactory;

        $r1 = r0.<org.apache.http.impl.auth.NegotiateSchemeFactory: org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator>;

        return $r1;
    }
}
