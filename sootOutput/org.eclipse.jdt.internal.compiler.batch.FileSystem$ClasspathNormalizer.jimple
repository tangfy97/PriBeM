public class org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathNormalizer extends java.lang.Object
{

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathNormalizer r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathNormalizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.ArrayList normalize(java.util.ArrayList)
    {
        java.util.Iterator $r3;
        java.util.ArrayList $r0, r2;
        java.util.HashSet $r1;
        java.lang.Object $r4;
        java.lang.String $r6;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath r5;
        boolean $z0, $z1;

        r2 := @parameter0: java.util.ArrayList;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath) $r4;

        $r6 = interfaceinvoke r5.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: java.lang.String getPath()>();

        $z0 = virtualinvoke $r1.<java.util.HashSet: boolean contains(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return $r0;
    }
}
