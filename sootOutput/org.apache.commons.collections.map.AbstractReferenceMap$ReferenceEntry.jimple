public class org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry extends org.apache.commons.collections.map.AbstractHashedMap$HashEntry
{
    protected final org.apache.commons.collections.map.AbstractReferenceMap parent;

    public void <init>(org.apache.commons.collections.map.AbstractReferenceMap, org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r2;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0;
        int i0, $i1, $i2;
        java.lang.Object r3, $r4, r5, $r6;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        r2 := @parameter0: org.apache.commons.collections.map.AbstractReferenceMap;

        r1 := @parameter1: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: void <init>(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(r1, i0, null, null);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent> = r2;

        $i1 = r2.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType>;

        $r4 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object toReference(int,java.lang.Object,int)>($i1, r3, i0);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object key> = $r4;

        $i2 = r2.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        $r6 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object toReference(int,java.lang.Object,int)>($i2, r5, i0);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value> = $r6;

        return;
    }

    public java.lang.Object getKey()
    {
        org.apache.commons.collections.map.AbstractReferenceMap $r1;
        java.lang.ref.Reference $r3;
        int $i0;
        java.lang.Object $r2, $r4;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i0 = $r1.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object key>;

        $r3 = (java.lang.ref.Reference) $r2;

        $r4 = virtualinvoke $r3.<java.lang.ref.Reference: java.lang.Object get()>();

        goto label2;

     label1:
        $r4 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object key>;

     label2:
        return $r4;
    }

    public java.lang.Object getValue()
    {
        org.apache.commons.collections.map.AbstractReferenceMap $r1;
        java.lang.ref.Reference $r3;
        int $i0;
        java.lang.Object $r2, $r4;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i0 = $r1.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value>;

        $r3 = (java.lang.ref.Reference) $r2;

        $r4 = virtualinvoke $r3.<java.lang.ref.Reference: java.lang.Object get()>();

        goto label2;

     label1:
        $r4 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value>;

     label2:
        return $r4;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap $r2, $r3;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0;
        java.lang.ref.Reference $r7;
        int $i0, $i1, $i2;
        java.lang.Object $r1, r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        r4 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object getValue()>();

        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i0 = $r2.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        if $i0 <= 0 goto label1;

        $r6 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value>;

        $r7 = (java.lang.ref.Reference) $r6;

        virtualinvoke $r7.<java.lang.ref.Reference: void clear()>();

     label1:
        $r3 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i2 = $r3.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        $i1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: int hashCode>;

        $r5 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object toReference(int,java.lang.Object,int)>($i2, r4, $i1);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value> = $r5;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap $r6, $r7;
        java.util.Map$Entry r2;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r1;
        java.lang.Object r0, $r3, $r4, $r5, $r8;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.util.Map$Entry) r0;

        $r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r3 == null goto label3;

        if $r4 != null goto label4;

     label3:
        return 0;

     label4:
        $r6 = r1.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $r5 = r1.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object key>;

        $z1 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractReferenceMap: boolean isEqualKey(java.lang.Object,java.lang.Object)>($r3, $r5);

        if $z1 == 0 goto label5;

        $r7 = r1.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $r8 = virtualinvoke r1.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object getValue()>();

        $z2 = virtualinvoke $r7.<org.apache.commons.collections.map.AbstractReferenceMap: boolean isEqualValue(java.lang.Object,java.lang.Object)>($r4, $r8);

        if $z2 == 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.commons.collections.map.AbstractReferenceMap $r1;
        int $i0;
        java.lang.Object $r2, $r3;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object getValue()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractReferenceMap: int hashEntry(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $i0;
    }

    protected java.lang.Object toReference(int, java.lang.Object, int)
    {
        org.apache.commons.collections.map.AbstractReferenceMap $r3, $r6;
        java.lang.Error $r8;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r2;
        java.lang.ref.ReferenceQueue $r4, $r7;
        org.apache.commons.collections.map.AbstractReferenceMap$WeakRef $r0;
        int i0, i1;
        java.lang.Object r1;
        org.apache.commons.collections.map.AbstractReferenceMap$SoftRef $r5;

        r2 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        return r1;

     label2:
        $r5 = new org.apache.commons.collections.map.AbstractReferenceMap$SoftRef;

        $r6 = r2.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $r7 = staticinvoke <org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue access$000(org.apache.commons.collections.map.AbstractReferenceMap)>($r6);

        specialinvoke $r5.<org.apache.commons.collections.map.AbstractReferenceMap$SoftRef: void <init>(int,java.lang.Object,java.lang.ref.ReferenceQueue)>(i1, r1, $r7);

        return $r5;

     label3:
        $r0 = new org.apache.commons.collections.map.AbstractReferenceMap$WeakRef;

        $r3 = r2.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $r4 = staticinvoke <org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue access$000(org.apache.commons.collections.map.AbstractReferenceMap)>($r3);

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractReferenceMap$WeakRef: void <init>(int,java.lang.Object,java.lang.ref.ReferenceQueue)>(i1, r1, $r4);

        return $r0;

     label4:
        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>()>();

        throw $r8;
    }

    boolean purge(java.lang.ref.Reference)
    {
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, z3, $z4, $z5;
        org.apache.commons.collections.map.AbstractReferenceMap $r1, $r2, $r3, $r4, $r9;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0;
        java.lang.ref.Reference $r6, $r8, r10;
        java.lang.Object $r5, $r7, $r11, $r12;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        r10 := @parameter0: java.lang.ref.Reference;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i0 = $r1.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType>;

        if $i0 <= 0 goto label1;

        $r12 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object key>;

        if $r12 != r10 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r9 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i3 = $r9.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        if $i3 <= 0 goto label4;

        $r11 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value>;

        if $r11 != r10 goto label4;

     label3:
        $z5 = 1;

        $z4 = 1;

        goto label5;

     label4:
        $z5 = 0;

        $z4 = 0;

     label5:
        z3 = $z4;

        if $z5 == 0 goto label8;

        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i1 = $r2.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType>;

        if $i1 <= 0 goto label6;

        $r7 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object key>;

        $r8 = (java.lang.ref.Reference) $r7;

        virtualinvoke $r8.<java.lang.ref.Reference: void clear()>();

     label6:
        $r3 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $i2 = $r3.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        if $i2 <= 0 goto label7;

        $r5 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value>;

        $r6 = (java.lang.ref.Reference) $r5;

        virtualinvoke $r6.<java.lang.ref.Reference: void clear()>();

        goto label8;

     label7:
        $r4 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractReferenceMap parent>;

        $z0 = $r4.<org.apache.commons.collections.map.AbstractReferenceMap: boolean purgeValues>;

        if $z0 == 0 goto label8;

        r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: java.lang.Object value> = null;

     label8:
        return z3;
    }

    protected org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry next()
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r1;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry r0, $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        $r2 = (org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry) $r1;

        return $r2;
    }
}
