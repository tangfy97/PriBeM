public class org.springframework.jmx.support.ObjectNameManager extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.jmx.support.ObjectNameManager r0;

        r0 := @this: org.springframework.jmx.support.ObjectNameManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.management.ObjectName getInstance(java.lang.Object) throws javax.management.MalformedObjectNameException
    {
        javax.management.ObjectName $r2, $r10;
        javax.management.MalformedObjectNameException $r3;
        java.lang.Object r0;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.lang.Class $r5;
        java.lang.String $r1, $r6, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof javax.management.ObjectName;

        if $z0 == 0 goto label1;

        $r10 = (javax.management.ObjectName) r0;

        return $r10;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 != 0 goto label2;

        $r3 = new javax.management.MalformedObjectNameException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid ObjectName value type [");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: only ObjectName and String supported.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javax.management.MalformedObjectNameException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r1 = (java.lang.String) r0;

        $r2 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.String)>($r1);

        return $r2;
    }

    public static javax.management.ObjectName getInstance(java.lang.String) throws javax.management.MalformedObjectNameException
    {
        java.lang.String r0;
        javax.management.ObjectName $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.management.ObjectName: javax.management.ObjectName getInstance(java.lang.String)>(r0);

        return $r1;
    }

    public static javax.management.ObjectName getInstance(java.lang.String, java.lang.String, java.lang.String) throws javax.management.MalformedObjectNameException
    {
        java.lang.String r0, r1, r2;
        javax.management.ObjectName $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <javax.management.ObjectName: javax.management.ObjectName getInstance(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public static javax.management.ObjectName getInstance(java.lang.String, java.util.Hashtable) throws javax.management.MalformedObjectNameException
    {
        java.lang.String r0;
        javax.management.ObjectName $r2;
        java.util.Hashtable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Hashtable;

        $r2 = staticinvoke <javax.management.ObjectName: javax.management.ObjectName getInstance(java.lang.String,java.util.Hashtable)>(r0, r1);

        return $r2;
    }
}
