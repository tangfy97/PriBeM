public class com.hp.hpl.jena.sparql.core.DatasetGraphMonitor extends com.hp.hpl.jena.sparql.core.DatasetGraphWrapper
{
    private boolean CheckFirst;
    private boolean RecordNoAction;
    private final com.hp.hpl.jena.sparql.core.DatasetChanges monitor;
    private static int SLICE;

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.core.DatasetChanges)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.core.DatasetChanges r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetChanges;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean CheckFirst> = 1;

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean RecordNoAction> = 1;

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: com.hp.hpl.jena.sparql.core.DatasetChanges monitor> = r2;

        return;
    }

    public com.hp.hpl.jena.sparql.core.DatasetChanges getMonitor()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.DatasetChanges $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: com.hp.hpl.jena.sparql.core.DatasetChanges monitor>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.core.DatasetGraph monitored()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: com.hp.hpl.jena.sparql.core.DatasetGraph getWrapped()>();

        return $r1;
    }

    public void add(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.Quad r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $z0 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean CheckFirst>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean contains(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        if $z1 == 0 goto label2;

        $z2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean RecordNoAction>;

        if $z2 == 0 goto label1;

        $r2 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction NO_ADD>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5, $r6);

     label1:
        return;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void add$(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        return;
    }

    public void add(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $z0 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean CheckFirst>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        if $z1 == 0 goto label2;

        $z2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean RecordNoAction>;

        if $z2 == 0 goto label1;

        $r5 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction NO_ADD>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, r1, r2, r3, r4);

     label1:
        return;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void add$(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        return;
    }

    private void add$(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        $r5 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction ADD>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, r1, r2, r3, r4);

        return;
    }

    private void add$(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r2;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: void add(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        $r2 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction ADD>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5, $r6);

        return;
    }

    public void delete(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.Quad r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $z0 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean CheckFirst>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean contains(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        if $z1 != 0 goto label2;

        $z2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean RecordNoAction>;

        if $z2 == 0 goto label1;

        $r2 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction NO_DELETE>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5, $r6);

     label1:
        return;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void delete$(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        return;
    }

    public void delete(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $z0 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean CheckFirst>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        if $z1 != 0 goto label2;

        $z2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: boolean RecordNoAction>;

        if $z2 == 0 goto label1;

        $r5 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction NO_DELETE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, r1, r2, r3, r4);

     label1:
        return;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void delete$(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        return;
    }

    private void delete$(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r2;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: void delete(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        $r2 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction DELETE>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5, $r6);

        return;
    }

    private void delete$(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction $r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: void delete(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        $r5 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction DELETE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void record(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, r1, r2, r3, r4);

        return;
    }

    public void deleteAny(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r5, $r7;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.Quad r9;
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        java.util.List $r6;
        int $i0, $i1, $i2;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

     label1:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        $i0 = <com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: int SLICE>;

        $r6 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List take(java.util.Iterator,int)>($r5, $i0);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.sparql.core.Quad) $r8;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void delete$(com.hp.hpl.jena.sparql.core.Quad)>(r9);

        goto label2;

     label3:
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i2 = <com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: int SLICE>;

        if $i1 >= $i2 goto label4;

        goto label5;

     label4:
        goto label1;

     label5:
        return;
    }

    public void addGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, r8, $r9, $r10, $r11;
        com.hp.hpl.jena.graph.Triple r6;
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r5;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r7 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r8 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2, $r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        $r9 = virtualinvoke r6.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r10 = virtualinvoke r6.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r11 = virtualinvoke r6.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke r7.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r8, $r9, $r10, $r11);

        goto label1;

     label2:
        return;
    }

    public void removeGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.graph.Node r1, $r2, $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: void deleteAny(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r4, $r3, $r2);

        return;
    }

    private void record(com.hp.hpl.jena.sparql.core.QuadAction, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphMonitor r0;
        com.hp.hpl.jena.sparql.core.QuadAction r1;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;
        com.hp.hpl.jena.sparql.core.DatasetChanges $r6;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphMonitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.QuadAction;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        r5 := @parameter4: com.hp.hpl.jena.graph.Node;

        $r6 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: com.hp.hpl.jena.sparql.core.DatasetChanges monitor>;

        interfaceinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetChanges: void change(com.hp.hpl.jena.sparql.core.QuadAction,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4, r5);

        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.core.DatasetGraphMonitor: int SLICE> = 1000;

        return;
    }
}
