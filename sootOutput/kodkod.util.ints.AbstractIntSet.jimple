public abstract class kodkod.util.ints.AbstractIntSet extends kodkod.util.ints.AbstractIntCollection implements kodkod.util.ints.IntSet
{

    protected void <init>()
    {
        kodkod.util.ints.AbstractIntSet r0;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        specialinvoke r0.<kodkod.util.ints.AbstractIntCollection: void <init>()>();

        return;
    }

    final void checkNonEmpty()
    {
        java.util.NoSuchElementException $r1;
        kodkod.util.ints.AbstractIntSet r0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        $z0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>("no this.ints");

        throw $r1;

     label1:
        return;
    }

    public kodkod.util.ints.IntIterator iterator()
    {
        kodkod.util.ints.AbstractIntSet r0;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntIterator iterator(int,int)>(-2147483648, 2147483647);

        return $r1;
    }

    public int min()
    {
        int $i0;
        kodkod.util.ints.AbstractIntSet r0;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntIterator iterator()>();

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        return $i0;
    }

    public int max()
    {
        int $i0;
        kodkod.util.ints.AbstractIntSet r0;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntIterator iterator(int,int)>(2147483647, -2147483648);

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        return $i0;
    }

    public kodkod.util.ints.IntSet clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r1;
        kodkod.util.ints.AbstractIntSet r0;
        kodkod.util.ints.IntSet $r2;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (kodkod.util.ints.IntSet) $r1;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.ints.IntSet r2;
        int $i0, $i1;
        java.lang.Object r0;
        kodkod.util.ints.AbstractIntSet r1;
        boolean $z0, $z1;

        r1 := @this: kodkod.util.ints.AbstractIntSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof kodkod.util.ints.IntSet;

        if $z0 == 0 goto label3;

        r2 = (kodkod.util.ints.IntSet) r0;

        $i0 = virtualinvoke r1.<kodkod.util.ints.AbstractIntSet: int size()>();

        $i1 = interfaceinvoke r2.<kodkod.util.ints.IntSet: int size()>();

        if $i0 != $i1 goto label2;

        $z1 = virtualinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean containsAll(kodkod.util.ints.IntCollection)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public int hashCode()
    {
        int $i0, $i1, i2;
        kodkod.util.ints.AbstractIntSet r0;
        kodkod.util.ints.IntIterator $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        i2 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: int size()>();

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label2;

     label1:
        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: int next()>();

        i2 = staticinvoke <kodkod.util.ints.Ints: int superFastHashIncremental(int,int)>($i0, i2);

     label2:
        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $i1 = staticinvoke <kodkod.util.ints.Ints: int superFastHashAvalanche(int)>(i2);

        return $i1;
    }

    public java.lang.String toString()
    {
        kodkod.util.ints.IntIterator $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;
        kodkod.util.ints.AbstractIntSet r1;
        boolean $z0, $z1;

        r1 := @this: kodkod.util.ints.AbstractIntSet;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("{");

        $r2 = virtualinvoke r1.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntIterator iterator()>();

        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: int next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i0 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: int next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label2:
        $z1 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.AbstractIntSet r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.util.ints.AbstractIntSet;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntSet clone()>();

        return $r1;
    }
}
