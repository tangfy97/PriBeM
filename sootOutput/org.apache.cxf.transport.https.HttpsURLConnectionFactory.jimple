public class org.apache.cxf.transport.https.HttpsURLConnectionFactory extends java.lang.Object
{
    public static final java.lang.String HTTPS_URL_PROTOCOL_ID;
    private static final java.util.logging.Logger LOG;
    private static boolean weblogicWarned;
    javax.net.ssl.SSLSocketFactory socketFactory;
    int lastTlsHash;

    public void <init>()
    {
        org.apache.cxf.transport.https.HttpsURLConnectionFactory r0;

        r0 := @this: org.apache.cxf.transport.https.HttpsURLConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.net.HttpURLConnection createConnection(org.apache.cxf.configuration.jsse.TLSClientParameters, java.net.Proxy, java.net.URL) throws java.io.IOException
    {
        java.net.HttpURLConnection $r2, $r8;
        java.lang.Throwable $r9;
        org.apache.cxf.transport.https.HttpsURLConnectionFactory r5;
        java.net.URL r1;
        java.lang.NullPointerException r16, r17;
        java.net.Proxy r0;
        java.net.URLConnection $r15;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.configuration.jsse.TLSClientParameters $r7, r14;
        java.io.IOException $r6, $r10, $r12, $r13;
        java.lang.Exception $r11;

        r5 := @this: org.apache.cxf.transport.https.HttpsURLConnectionFactory;

        r14 := @parameter0: org.apache.cxf.configuration.jsse.TLSClientParameters;

        r0 := @parameter1: java.net.Proxy;

        r1 := @parameter2: java.net.URL;

        if r0 == null goto label01;

        $r15 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>(r0);

        goto label02;

     label01:
        $r15 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

     label02:
        $r2 = (java.net.HttpURLConnection) $r15;

        $r8 = (java.net.HttpURLConnection) $r2;

        $r3 = "https";

        $r4 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label13;

        if r14 != null goto label03;

        $r7 = new org.apache.cxf.configuration.jsse.TLSClientParameters;

        specialinvoke $r7.<org.apache.cxf.configuration.jsse.TLSClientParameters: void <init>()>();

        r14 = $r7;

     label03:
        virtualinvoke r5.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: void decorateWithTLS(org.apache.cxf.configuration.jsse.TLSClientParameters,java.net.HttpURLConnection)>(r14, $r8);

     label04:
        if null == null goto label13;

        $z1 = null instanceof java.io.IOException;

        if $z1 == 0 goto label05;

        r16 = new java.lang.NullPointerException;

        specialinvoke r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r16;

     label05:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error while initializing secure socket");

        virtualinvoke $r6.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(null);

        throw $r6;

     label06:
        $r11 := @caughtexception;

     label07:
        if $r11 == null goto label13;

        $z3 = $r11 instanceof java.io.IOException;

        if $z3 == 0 goto label08;

        $r13 = (java.io.IOException) $r11;

        throw $r13;

     label08:
        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Error while initializing secure socket");

        virtualinvoke $r12.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r11);

        throw $r12;

     label09:
        $r9 := @caughtexception;

     label10:
        if null == null goto label12;

        $z2 = null instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        r17 = new java.lang.NullPointerException;

        specialinvoke r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r17;

     label11:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Error while initializing secure socket");

        virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(null);

        throw $r10;

     label12:
        throw $r9;

     label13:
        return $r8;

        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected synchronized void decorateWithTLS(org.apache.cxf.configuration.jsse.TLSClientParameters, java.net.HttpURLConnection) throws java.security.GeneralSecurityException
    {
        java.net.HttpURLConnection r4;
        javax.net.ssl.SSLContext $r68, r69;
        java.security.SecureRandom $r44;
        org.apache.cxf.configuration.security.FiltersType $r47;
        org.apache.cxf.transport.https.HttpsURLConnectionFactory$1 $r8;
        java.lang.Exception $r55, $r66;
        javax.net.ssl.SSLSocketFactory $r2, $r3, $r27, $r33, $r36, $r37, $r51, $r53, $r54;
        java.lang.StringBuilder $r59, $r60, $r63;
        java.lang.ClassLoader $r10;
        java.lang.Object[] $r18, $r31, $r32, $r35;
        org.apache.cxf.transport.https.HttpsURLConnectionFactory r1;
        java.lang.reflect.Constructor $r30;
        java.lang.String $r38, $r39, $r42, $r52, $r57, $r62, $r64, $r67;
        javax.net.ssl.HttpsURLConnection r71;
        java.lang.Class[] $r6, $r11, $r15, $r20, $r23, $r29;
        javax.net.ssl.SSLSessionContext $r40;
        javax.net.ssl.HostnameVerifier r70;
        java.lang.reflect.Method $r7, $r17, $r21, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.logging.Logger $r48, $r65;
        java.util.List $r45;
        java.lang.String[] $r46, $r49;
        int $i0, $i1, $i2;
        org.apache.cxf.configuration.jsse.TLSClientParameters r0;
        org.apache.cxf.transport.https.SSLSocketFactoryWrapper $r50;
        java.lang.IllegalArgumentException $r58;
        javax.net.ssl.TrustManager[] $r43;
        java.lang.Class $r5, $r9, $r12, $r14, $r16, $r19, $r22, $r24, $r26, $r28, $r56, $r61;
        java.lang.Object $r13, $r34;
        javax.net.ssl.KeyManager[] $r41;

        r1 := @this: org.apache.cxf.transport.https.HttpsURLConnectionFactory;

        r0 := @parameter0: org.apache.cxf.configuration.jsse.TLSClientParameters;

        r4 := @parameter1: java.net.HttpURLConnection;

        $i0 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: int hashCode()>();

        $i1 = r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: int lastTlsHash>;

        if $i0 == $i1 goto label01;

        r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: int lastTlsHash> = $i0;

        r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory> = null;

     label01:
        $z0 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: boolean isUseHttpsURLConnectionDefaultSslSocketFactory()>();

        if $z0 == 0 goto label02;

        $r54 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory> = $r54;

        goto label09;

     label02:
        $r2 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>();

        if $r2 == null goto label03;

        $r53 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>();

        r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory> = $r53;

        goto label09;

     label03:
        $r3 = r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory>;

        if $r3 != null goto label09;

        $r38 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getJsseProvider()>();

        $r39 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getSecureSocketProtocol()>();

        if $r39 == null goto label04;

        $r67 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getSecureSocketProtocol()>();

        goto label05;

     label04:
        $r67 = "TLS";

     label05:
        if $r38 != null goto label06;

        $r68 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r67);

        goto label07;

     label06:
        $r68 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r67, $r38);

     label07:
        r69 = $r68;

        $r40 = virtualinvoke $r68.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>();

        $i2 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: int getSslCacheTimeout()>();

        interfaceinvoke $r40.<javax.net.ssl.SSLSessionContext: void setSessionTimeout(int)>($i2);

        $r41 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r42 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getCertAlias()>();

        if $r42 == null goto label08;

        virtualinvoke r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: void getKeyManagersWithCertAlias(org.apache.cxf.configuration.jsse.TLSClientParameters,javax.net.ssl.KeyManager[])>(r0, $r41);

     label08:
        $r43 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: javax.net.ssl.TrustManager[] getTrustManagers()>();

        $r44 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.security.SecureRandom getSecureRandom()>();

        virtualinvoke r69.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r41, $r43, $r44);

        $r45 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.util.List getCipherSuites()>();

        $r46 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String[] getSupportedCipherSuites(javax.net.ssl.SSLContext)>(r69);

        $r47 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: org.apache.cxf.configuration.security.FiltersType getCipherSuitesFilter()>();

        $r48 = <org.apache.cxf.transport.https.HttpsURLConnectionFactory: java.util.logging.Logger LOG>;

        $r49 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String[] getCiphersuites(java.util.List,java.lang.String[],org.apache.cxf.configuration.security.FiltersType,java.util.logging.Logger,boolean)>($r45, $r46, $r47, $r48, 0);

        $r50 = new org.apache.cxf.transport.https.SSLSocketFactoryWrapper;

        $r51 = virtualinvoke r69.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r52 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getSecureSocketProtocol()>();

        specialinvoke $r50.<org.apache.cxf.transport.https.SSLSocketFactoryWrapper: void <init>(javax.net.ssl.SSLSocketFactory,java.lang.String[],java.lang.String)>($r51, $r49, $r52);

        r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory> = $r50;

     label09:
        $z5 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: boolean isUseHttpsURLConnectionDefaultHostnameVerifier()>();

        if $z5 == 0 goto label10;

        r70 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>();

        goto label12;

     label10:
        $z1 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: boolean isDisableCNCheck()>();

        if $z1 == 0 goto label11;

        r70 = <org.apache.cxf.transport.https.CertificateHostnameVerifier: org.apache.cxf.transport.https.CertificateHostnameVerifier ALLOW_ALL>;

        goto label12;

     label11:
        r70 = <org.apache.cxf.transport.https.CertificateHostnameVerifier: org.apache.cxf.transport.https.CertificateHostnameVerifier DEFAULT>;

     label12:
        $z6 = r4 instanceof javax.net.ssl.HttpsURLConnection;

        if $z6 == 0 goto label13;

        r71 = (javax.net.ssl.HttpsURLConnection) r4;

        virtualinvoke r71.<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>(r70);

        $r37 = r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory>;

        virtualinvoke r71.<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r37);

        goto label22;

     label13:
        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = newarray (java.lang.Class)[0];

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getHostnameVerifier", $r6);

        $r8 = new org.apache.cxf.transport.https.HttpsURLConnectionFactory$1;

        specialinvoke $r8.<org.apache.cxf.transport.https.HttpsURLConnectionFactory$1: void <init>(org.apache.cxf.transport.https.HttpsURLConnectionFactory,java.lang.Object)>(r1, r70);

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r11 = newarray (java.lang.Class)[1];

        $r12 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r10, $r11, $r8);

        $r14 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = newarray (java.lang.Class)[1];

        $r16 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r15[0] = $r16;

        $r17 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setHostnameVerifier", $r15);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r13;

        virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r18);

     label14:
        goto label16;

     label15:
        $r66 := @caughtexception;

     label16:
        $r19 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = newarray (java.lang.Class)[0];

        $r21 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getSSLSocketFactory", $r20);

        $r22 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = newarray (java.lang.Class)[1];

        $r24 = virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r23[0] = $r24;

        $r25 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setSSLSocketFactory", $r23);

        $r26 = virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r27 = r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory>;

        $z2 = virtualinvoke $r26.<java.lang.Class: boolean isInstance(java.lang.Object)>($r27);

        if $z2 == 0 goto label17;

        $r35 = newarray (java.lang.Object)[1];

        $r36 = r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory>;

        $r35[0] = $r36;

        virtualinvoke $r25.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r35);

        goto label18;

     label17:
        $r28 = virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r29 = newarray (java.lang.Class)[1];

        $r29[0] = class "Ljavax/net/ssl/SSLSocketFactory;";

        $r30 = virtualinvoke $r28.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r29);

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r30);

        $r31 = newarray (java.lang.Object)[1];

        $r32 = newarray (java.lang.Object)[1];

        $r33 = r1.<org.apache.cxf.transport.https.HttpsURLConnectionFactory: javax.net.ssl.SSLSocketFactory socketFactory>;

        $r32[0] = $r33;

        $r34 = virtualinvoke $r30.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r32);

        $r31[0] = $r34;

        virtualinvoke $r25.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r31);

     label18:
        goto label22;

     label19:
        $r55 := @caughtexception;

        $r56 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r57.<java.lang.String: boolean contains(java.lang.CharSequence)>("weblogic");

        if $z3 == 0 goto label21;

        $z4 = <org.apache.cxf.transport.https.HttpsURLConnectionFactory: boolean weblogicWarned>;

        if $z4 != 0 goto label20;

        <org.apache.cxf.transport.https.HttpsURLConnectionFactory: boolean weblogicWarned> = 1;

        $r65 = <org.apache.cxf.transport.https.HttpsURLConnectionFactory: java.util.logging.Logger LOG>;

        virtualinvoke $r65.<java.util.logging.Logger: void warning(java.lang.String)>("Could not configure SSLSocketFactory on Weblogic.   Use the Weblogic control panel to configure the SSL settings.");

     label20:
        return;

     label21:
        $r58 = new java.lang.IllegalArgumentException;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error decorating connection class ");

        $r61 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r62 = virtualinvoke $r61.<java.lang.Class: java.lang.String getName()>();

        $r63 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r64, $r55);

        throw $r58;

     label22:
        return;

        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label18 with label19;
    }

    protected void addLogHandler(java.util.logging.Handler)
    {
        java.util.logging.Handler r0;
        java.util.logging.Logger $r1;
        org.apache.cxf.transport.https.HttpsURLConnectionFactory r2;

        r2 := @this: org.apache.cxf.transport.https.HttpsURLConnectionFactory;

        r0 := @parameter0: java.util.logging.Handler;

        $r1 = <org.apache.cxf.transport.https.HttpsURLConnectionFactory: java.util.logging.Logger LOG>;

        virtualinvoke $r1.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r0);

        return;
    }

    protected void getKeyManagersWithCertAlias(org.apache.cxf.configuration.jsse.TLSClientParameters, javax.net.ssl.KeyManager[]) throws java.security.GeneralSecurityException
    {
        org.apache.cxf.transport.https.AliasedX509ExtendedKeyManager $r4;
        javax.net.ssl.X509KeyManager $r7;
        org.apache.cxf.configuration.jsse.TLSClientParameters r0;
        org.apache.cxf.transport.https.HttpsURLConnectionFactory r10;
        javax.net.ssl.KeyManager $r3, $r6;
        java.lang.Exception $r8;
        java.security.GeneralSecurityException $r9;
        int $i0, i1;
        java.lang.String $r1, $r5;
        javax.net.ssl.KeyManager[] r2;
        boolean $z0;

        r10 := @this: org.apache.cxf.transport.https.HttpsURLConnectionFactory;

        r0 := @parameter0: org.apache.cxf.configuration.jsse.TLSClientParameters;

        r2 := @parameter1: javax.net.ssl.KeyManager[];

        $r1 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getCertAlias()>();

        if $r1 == null goto label6;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label6;

        $r3 = r2[i1];

        $z0 = $r3 instanceof javax.net.ssl.X509KeyManager;

        if $z0 == 0 goto label5;

     label2:
        $r4 = new org.apache.cxf.transport.https.AliasedX509ExtendedKeyManager;

        $r5 = virtualinvoke r0.<org.apache.cxf.configuration.jsse.TLSClientParameters: java.lang.String getCertAlias()>();

        $r6 = r2[i1];

        $r7 = (javax.net.ssl.X509KeyManager) $r6;

        specialinvoke $r4.<org.apache.cxf.transport.https.AliasedX509ExtendedKeyManager: void <init>(java.lang.String,javax.net.ssl.X509KeyManager)>($r5, $r7);

        r2[i1] = $r4;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.security.GeneralSecurityException;

        specialinvoke $r9.<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.transport.https.HttpsURLConnectionFactory: java.lang.String HTTPS_URL_PROTOCOL_ID> = "https";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/https/HttpsURLConnectionFactory;");

        <org.apache.cxf.transport.https.HttpsURLConnectionFactory: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
