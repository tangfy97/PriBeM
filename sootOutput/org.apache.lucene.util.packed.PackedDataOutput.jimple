public final class org.apache.lucene.util.packed.PackedDataOutput extends java.lang.Object
{
    final org.apache.lucene.store.DataOutput out;
    long current;
    int remainingBits;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.DataOutput)
    {
        org.apache.lucene.util.packed.PackedDataOutput r0;
        org.apache.lucene.store.DataOutput r1;

        r0 := @this: org.apache.lucene.util.packed.PackedDataOutput;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.packed.PackedDataOutput: org.apache.lucene.store.DataOutput out> = r1;

        r0.<org.apache.lucene.util.packed.PackedDataOutput: long current> = 0L;

        r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits> = 8;

        return;
    }

    public void writeLong(long, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput $r1;
        long l3, $l5, $l6, $l7, $l10, $l11, $l12, $l13, $l16, $l20;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.packed.PackedDataOutput r0;
        byte $b18, $b19, $b21;
        int $i0, $i1, $i2, $i4, $i8, $i9, $i14, $i15, $i17, i22, $i23, $i24;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedDataOutput;

        l3 := @parameter0: long;

        i22 := @parameter1: int;

        $z0 = <org.apache.lucene.util.packed.PackedDataOutput: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i22 == 64 goto label2;

        $b19 = l3 cmp 0L;

        $i23 = (int) $b19;

        if $i23 < 0 goto label1;

        $l20 = staticinvoke <org.apache.lucene.util.packed.PackedInts: long maxValue(int)>(i22);

        $b21 = l3 cmp $l20;

        $i24 = (int) $b21;

        if $i24 <= 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        if i22 <= 0 goto label4;

        $i0 = r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits>;

        if $i0 != 0 goto label3;

        $r1 = r0.<org.apache.lucene.util.packed.PackedDataOutput: org.apache.lucene.store.DataOutput out>;

        $l16 = r0.<org.apache.lucene.util.packed.PackedDataOutput: long current>;

        $i17 = (int) $l16;

        $b18 = (byte) $i17;

        virtualinvoke $r1.<org.apache.lucene.store.DataOutput: void writeByte(byte)>($b18);

        r0.<org.apache.lucene.util.packed.PackedDataOutput: long current> = 0L;

        r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits> = 8;

     label3:
        $i1 = r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i22);

        $l12 = r0.<org.apache.lucene.util.packed.PackedDataOutput: long current>;

        $i4 = i22 - $i2;

        $l7 = l3 >>> $i4;

        $l5 = 1L << $i2;

        $l6 = $l5 - 1L;

        $l10 = $l7 & $l6;

        $i8 = r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits>;

        $i9 = $i8 - $i2;

        $l11 = $l10 << $i9;

        $l13 = $l12 | $l11;

        r0.<org.apache.lucene.util.packed.PackedDataOutput: long current> = $l13;

        i22 = i22 - $i2;

        $i14 = r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits>;

        $i15 = $i14 - $i2;

        r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits> = $i15;

        goto label2;

     label4:
        return;
    }

    public void flush() throws java.io.IOException
    {
        byte $b3;
        org.apache.lucene.store.DataOutput $r1;
        int $i0, $i2;
        long $l1;
        org.apache.lucene.util.packed.PackedDataOutput r0;

        r0 := @this: org.apache.lucene.util.packed.PackedDataOutput;

        $i0 = r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits>;

        if $i0 >= 8 goto label1;

        $r1 = r0.<org.apache.lucene.util.packed.PackedDataOutput: org.apache.lucene.store.DataOutput out>;

        $l1 = r0.<org.apache.lucene.util.packed.PackedDataOutput: long current>;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r1.<org.apache.lucene.store.DataOutput: void writeByte(byte)>($b3);

     label1:
        r0.<org.apache.lucene.util.packed.PackedDataOutput: int remainingBits> = 8;

        r0.<org.apache.lucene.util.packed.PackedDataOutput: long current> = 0L;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedDataOutput;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedDataOutput: boolean $assertionsDisabled> = $z1;

        return;
    }
}
