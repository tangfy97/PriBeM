public class org.apache.commons.io.output.WriterOutputStream extends java.io.OutputStream
{
    private static final int DEFAULT_BUFFER_SIZE;
    private final java.io.Writer writer;
    private final java.nio.charset.CharsetDecoder decoder;
    private final boolean writeImmediately;
    private final java.nio.ByteBuffer decoderIn;
    private final java.nio.CharBuffer decoderOut;

    public void <init>(java.io.Writer, java.nio.charset.CharsetDecoder)
    {
        java.io.Writer r1;
        java.nio.charset.CharsetDecoder r2;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.nio.charset.CharsetDecoder;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>(r1, r2, 1024, 0);

        return;
    }

    public void <init>(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean)
    {
        java.nio.CharBuffer $r4;
        java.io.Writer r2;
        int i0;
        java.nio.charset.CharsetDecoder r3;
        java.nio.ByteBuffer $r1;
        org.apache.commons.io.output.WriterOutputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r2 := @parameter0: java.io.Writer;

        r3 := @parameter1: java.nio.charset.CharsetDecoder;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(128);

        r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn> = $r1;

        r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer> = r2;

        r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.charset.CharsetDecoder decoder> = r3;

        r0.<org.apache.commons.io.output.WriterOutputStream: boolean writeImmediately> = z0;

        $r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(i0);

        r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut> = $r4;

        return;
    }

    public void <init>(java.io.Writer, java.nio.charset.Charset, int, boolean)
    {
        java.nio.charset.CharsetDecoder $r3, $r5, $r7, $r8;
        java.nio.charset.Charset r2;
        java.nio.charset.CodingErrorAction $r4, $r6;
        java.io.Writer r1;
        int i0;
        org.apache.commons.io.output.WriterOutputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.nio.charset.Charset;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r5 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);

        $r8 = virtualinvoke $r7.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>("?");

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>(r1, $r8, i0, z0);

        return;
    }

    public void <init>(java.io.Writer, java.nio.charset.Charset)
    {
        java.io.Writer r1;
        java.nio.charset.Charset r2;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>(r1, r2, 1024, 0);

        return;
    }

    public void <init>(java.io.Writer, java.lang.String, int, boolean)
    {
        java.nio.charset.Charset $r3;
        java.io.Writer r1;
        int i0;
        java.lang.String r2;
        org.apache.commons.io.output.WriterOutputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>(r1, $r3, i0, z0);

        return;
    }

    public void <init>(java.io.Writer, java.lang.String)
    {
        java.io.Writer r1;
        java.lang.String r2;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String,int,boolean)>(r1, r2, 1024, 0);

        return;
    }

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        java.nio.charset.Charset $r2;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: java.io.Writer;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>(r1, $r2, 1024, 0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r2;
        java.nio.ByteBuffer $r1, $r3;
        int $i0, $i1, i2, i3;
        org.apache.commons.io.output.WriterOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r2 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

     label1:
        if i3 <= 0 goto label2;

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i0);

        $r3 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r2, i2, $i1);

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>(0);

        i3 = i3 - $i1;

        i2 = i2 + $i1;

        goto label1;

     label2:
        $z0 = r0.<org.apache.commons.io.output.WriterOutputStream: boolean writeImmediately>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

     label3:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1;
        byte $b1;
        int i0;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $b1 = (byte) i0;

        $r1[0] = $b1;

        virtualinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.Writer $r1;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>(1);

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        return;
    }

    private void processInput(boolean) throws java.io.IOException
    {
        java.nio.CharBuffer $r2;
        java.io.IOException $r6;
        java.nio.charset.CharsetDecoder $r4;
        java.nio.ByteBuffer $r1, $r3, $r7;
        java.nio.charset.CoderResult $r5;
        org.apache.commons.io.output.WriterOutputStream r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label1:
        $r4 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.charset.CharsetDecoder decoder>;

        $r3 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>($r3, $r2, z0);

        $z1 = virtualinvoke $r5.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

        goto label1;

     label2:
        $z2 = virtualinvoke $r5.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Unexpected coder result");

        throw $r6;

     label4:
        $r7 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        return;
    }

    private void flushOutput() throws java.io.IOException
    {
        java.nio.CharBuffer $r1, $r2, $r5, $r6;
        int $i0, $i1;
        java.io.Writer $r3;
        char[] $r4;
        org.apache.commons.io.output.WriterOutputStream r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $r4 = virtualinvoke $r2.<java.nio.CharBuffer: char[] array()>();

        $r5 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $i1 = virtualinvoke $r5.<java.nio.CharBuffer: int position()>();

        virtualinvoke $r3.<java.io.Writer: void write(char[],int,int)>($r4, 0, $i1);

        $r6 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        virtualinvoke $r6.<java.nio.CharBuffer: java.nio.Buffer rewind()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.output.WriterOutputStream: int DEFAULT_BUFFER_SIZE> = 1024;

        return;
    }
}
