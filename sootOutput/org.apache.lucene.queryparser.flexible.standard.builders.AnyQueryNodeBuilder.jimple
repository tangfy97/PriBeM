public class org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder extends java.lang.Object implements org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryBuilder
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.lucene.search.BooleanQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.search.Query r9;
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, r6;
        java.lang.String $r7, $r14;
        org.apache.lucene.search.BooleanClause$Occur $r10;
        boolean $z0;
        java.util.Iterator $r4;
        org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder r15;
        org.apache.lucene.queryparser.flexible.core.QueryNodeException $r12;
        java.util.List $r3;
        org.apache.lucene.search.BooleanQuery $r2;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r13;
        org.apache.lucene.search.BooleanQuery$TooManyClauses $r11;
        java.lang.Object $r5, $r8;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r1;

        r15 := @this: org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r1 = (org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode) r0;

        $r2 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r2.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        if $r3 == null goto label6;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r5;

        $r7 = <org.apache.lucene.queryparser.flexible.core.builders.QueryTreeBuilder: java.lang.String QUERY_TREE_BUILDER_TAGID>;

        $r8 = interfaceinvoke r6.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.Object getTag(java.lang.String)>($r7);

        if $r8 == null goto label5;

        r9 = (org.apache.lucene.search.Query) $r8;

     label2:
        $r10 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r9, $r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.apache.lucene.queryparser.flexible.core.QueryNodeException;

        $r13 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r14 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String EMPTY_MESSAGE>;

        specialinvoke $r13.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String)>($r14);

        specialinvoke $r12.<org.apache.lucene.queryparser.flexible.core.QueryNodeException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message,java.lang.Throwable)>($r13, $r11);

        throw $r12;

     label5:
        goto label1;

     label6:
        $i0 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int getMinimumMatchingElements()>();

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void setMinimumNumberShouldMatch(int)>($i0);

        return $r2;

        catch org.apache.lucene.search.BooleanQuery$TooManyClauses from label2 to label3 with label4;
    }

    public volatile org.apache.lucene.search.Query build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.search.BooleanQuery $r2;
        org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder: org.apache.lucene.search.BooleanQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.search.BooleanQuery $r2;
        org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.AnyQueryNodeBuilder: org.apache.lucene.search.BooleanQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }
}
