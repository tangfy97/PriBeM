public class org.apache.commons.collections.CollectionUtils extends java.lang.Object
{
    private static java.lang.Integer INTEGER_ONE;
    public static final java.util.Collection EMPTY_COLLECTION;

    public void <init>()
    {
        org.apache.commons.collections.CollectionUtils r0;

        r0 := @this: org.apache.commons.collections.CollectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection union(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r6;
        java.util.Collection r1, r3;
        java.util.ArrayList $r0;
        java.util.HashSet $r5;
        java.util.Map $r2, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r1);

        $r4 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r3);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        i3 = 0;

        $i0 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r2);

        $i1 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r4);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label2:
        if i3 >= $i2 goto label3;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public static java.util.Collection intersection(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r6;
        java.util.Collection r1, r3;
        java.util.ArrayList $r0;
        java.util.HashSet $r5;
        java.util.Map $r2, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r1);

        $r4 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r3);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        i3 = 0;

        $i0 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r2);

        $i1 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r4);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

     label2:
        if i3 >= $i2 goto label3;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public static java.util.Collection disjunction(java.util.Collection, java.util.Collection)
    {
        java.util.ArrayList $r0;
        java.util.HashSet $r5;
        java.util.Map $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0;
        java.util.Iterator $r6;
        java.util.Collection r1, r3;
        java.lang.Object $r7;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r1);

        $r4 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r3);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        i7 = 0;

        $i0 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r2);

        $i1 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r4);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i3 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r2);

        $i4 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r7, $r4);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        i6 = $i2 - $i5;

     label2:
        if i7 >= i6 goto label3;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i7 = i7 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public static java.util.Collection subtract(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r1, r2;
        java.lang.Object $r4;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean remove(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    public static boolean containsAny(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2, $r4;
        java.util.Collection r0, r1;
        int $i0, $i1;
        java.lang.Object $r3, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= $i1 goto label3;

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r5);

        if $z3 == 0 goto label1;

        return 1;

     label2:
        goto label5;

     label3:
        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        return 1;

     label5:
        return 0;
    }

    public static java.util.Map getCardinalityMap(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.HashMap $r0;
        java.lang.Integer $r5, r6, $r7, $r8;
        int $i0, $i1;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.Integer) $r4;

        r6 = (java.lang.Integer) $r5;

        if r6 != null goto label2;

        $r8 = <org.apache.commons.collections.CollectionUtils: java.lang.Integer INTEGER_ONE>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r8);

        goto label3;

     label2:
        $r7 = new java.lang.Integer;

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r7);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public static boolean isSubCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r4;
        java.util.Collection r0, r2;
        java.util.Map $r1, $r3;
        int $i0, $i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        $r1 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r0);

        $r3 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r2);

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $i0 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r5, $r1);

        $i1 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r5, $r3);

        if $i0 <= $i1 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public static boolean isProperSubCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= $i1 goto label1;

        $z0 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isSubCollection(java.util.Collection,java.util.Collection)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isEqualCollection(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r5;
        java.util.Collection r0, r1;
        java.util.Set $r4;
        java.util.Map $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r0);

        $r3 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Map getCardinalityMap(java.util.Collection)>(r1);

        $i2 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i3 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i2 == $i3 goto label2;

        return 0;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $i4 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r6, $r2);

        $i5 = staticinvoke <org.apache.commons.collections.CollectionUtils: int getFreq(java.lang.Object,java.util.Map)>($r6, $r3);

        if $i4 == $i5 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        return 1;
    }

    public static int cardinality(java.lang.Object, java.util.Collection)
    {
        byte $b1;
        int $i0, i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r2, $r4;
        java.util.Collection r0;
        org.apache.commons.collections.Bag $r6;
        java.lang.Object r1, $r3, $r5;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label3;

        $z3 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z3 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;

     label3:
        $z1 = r0 instanceof org.apache.commons.collections.Bag;

        if $z1 == 0 goto label4;

        $r6 = (org.apache.commons.collections.Bag) r0;

        $i0 = interfaceinvoke $r6.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>(r1);

        return $i0;

     label4:
        i2 = 0;

        if r1 != null goto label7;

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r5 != null goto label5;

        i2 = i2 + 1;

        goto label5;

     label6:
        goto label9;

     label7:
        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label8:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label9;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label8;

        i2 = i2 + 1;

        goto label8;

     label9:
        return i2;
    }

    public static java.lang.Object find(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        if r0 == null goto label3;

        if r1 == null goto label3;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return $r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static void forAllDo(java.util.Collection, org.apache.commons.collections.Closure)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        org.apache.commons.collections.Closure r1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Closure;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.commons.collections.Closure: void execute(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }

    public static void filter(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public static void transform(java.util.Collection, org.apache.commons.collections.Transformer)
    {
        java.util.ListIterator $r3;
        org.apache.commons.collections.Transformer r1;
        java.util.Collection r0, $r2;
        java.util.List r6;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        if r0 == null goto label4;

        if r1 == null goto label4;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        r6 = (java.util.List) r0;

        $r3 = interfaceinvoke r6.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r1.<org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>($r4);

        interfaceinvoke $r3.<java.util.ListIterator: void set(java.lang.Object)>($r5);

        goto label1;

     label2:
        goto label4;

     label3:
        $r2 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Collection collect(java.util.Collection,org.apache.commons.collections.Transformer)>(r0, r1);

        interfaceinvoke r0.<java.util.Collection: void clear()>();

        interfaceinvoke r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r2);

     label4:
        return;
    }

    public static int countMatches(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        int i0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        i0 = 0;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public static boolean exists(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public static java.util.Collection select(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r2;
        java.util.Collection r1;
        int $i0;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.collections.Predicate;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        staticinvoke <org.apache.commons.collections.CollectionUtils: void select(java.util.Collection,org.apache.commons.collections.Predicate,java.util.Collection)>(r1, r2, $r0);

        return $r0;
    }

    public static void select(java.util.Collection, org.apache.commons.collections.Predicate, java.util.Collection)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Iterator $r2;
        java.util.Collection r0, r4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        r4 := @parameter2: java.util.Collection;

        if r0 == null goto label3;

        if r1 == null goto label3;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        goto label1;

     label3:
        return;
    }

    public static java.util.Collection selectRejected(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r2;
        java.util.Collection r1;
        int $i0;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.collections.Predicate;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        staticinvoke <org.apache.commons.collections.CollectionUtils: void selectRejected(java.util.Collection,org.apache.commons.collections.Predicate,java.util.Collection)>(r1, r2, $r0);

        return $r0;
    }

    public static void selectRejected(java.util.Collection, org.apache.commons.collections.Predicate, java.util.Collection)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Iterator $r2;
        java.util.Collection r0, r4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        r4 := @parameter2: java.util.Collection;

        if r0 == null goto label3;

        if r1 == null goto label3;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r1.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r3);

     label2:
        goto label1;

     label3:
        return;
    }

    public static java.util.Collection collect(java.util.Collection, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer r2;
        java.util.Collection r1;
        int $i0;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Collection collect(java.util.Collection,org.apache.commons.collections.Transformer,java.util.Collection)>(r1, r2, $r0);

        return $r0;
    }

    public static java.util.Collection collect(java.util.Iterator, org.apache.commons.collections.Transformer)
    {
        java.util.Iterator r1;
        org.apache.commons.collections.Transformer r2;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.Iterator;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections.Transformer,java.util.Collection)>(r1, r2, $r0);

        return $r0;
    }

    public static java.util.Collection collect(java.util.Collection, org.apache.commons.collections.Transformer, java.util.Collection)
    {
        java.util.Iterator $r2;
        org.apache.commons.collections.Transformer r3;
        java.util.Collection r0, r1, $r4;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: org.apache.commons.collections.Transformer;

        r1 := @parameter2: java.util.Collection;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.util.Collection collect(java.util.Iterator,org.apache.commons.collections.Transformer,java.util.Collection)>($r2, r3, r1);

        return $r4;

     label1:
        return r1;
    }

    public static java.util.Collection collect(java.util.Iterator, org.apache.commons.collections.Transformer, java.util.Collection)
    {
        java.util.Iterator r0;
        org.apache.commons.collections.Transformer r2;
        java.util.Collection r1;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        r1 := @parameter2: java.util.Collection;

        if r0 == null goto label2;

        if r2 == null goto label2;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke r2.<org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>($r3);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return r1;
    }

    public static boolean addIgnoreNull(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Collection r1;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r0);

     label2:
        return $z0;
    }

    public static void addAll(java.util.Collection, java.util.Iterator)
    {
        java.util.Iterator r0;
        java.util.Collection r1;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return;
    }

    public static void addAll(java.util.Collection, java.util.Enumeration)
    {
        java.util.Enumeration r0;
        java.util.Collection r1;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.util.Enumeration;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return;
    }

    public static void addAll(java.util.Collection, java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Collection r1;
        int i0, i1;
        java.lang.Object $r2;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object[];

        i1 = 0;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0[i1];

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.lang.Object index(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r0, $r2;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.lang.Object index(java.lang.Object,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Object index(java.lang.Object, java.lang.Object)
    {
        java.util.Enumeration r20;
        java.lang.Integer $r16;
        java.util.Map r18, r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.Collection $r2;
        java.util.Set $r13;
        java.util.List $r11;
        java.lang.Object[] $r8, $r9;
        int i0, $i2, $i4, $i6;
        java.util.Iterator $r3, $r5, $r14;
        java.lang.Object r0, r1, $r4, $r6, $r7, $r10, $r12, $r15, $r17;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label01;

        r18 = (java.util.Map) r0;

        $z9 = interfaceinvoke r18.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z9 == 0 goto label01;

        $r17 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r17;

     label01:
        $i2 = (int) -1;

        i0 = $i2;

        $z1 = r1 instanceof java.lang.Integer;

        if $z1 == 0 goto label02;

        $r16 = (java.lang.Integer) r1;

        i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

     label02:
        if i0 >= 0 goto label03;

        return r0;

     label03:
        $z2 = r0 instanceof java.util.Map;

        if $z2 == 0 goto label04;

        r19 = (java.util.Map) r0;

        $r13 = interfaceinvoke r19.<java.util.Map: java.util.Set keySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        $r15 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.lang.Object index(java.util.Iterator,int)>($r14, i0);

        return $r15;

     label04:
        $z3 = r0 instanceof java.util.List;

        if $z3 == 0 goto label05;

        $r11 = (java.util.List) r0;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i0);

        return $r12;

     label05:
        $z4 = r0 instanceof java.lang.Object[];

        if $z4 == 0 goto label06;

        $r8 = (java.lang.Object[]) r0;

        $r9 = (java.lang.Object[]) $r8;

        $r10 = $r9[i0];

        return $r10;

     label06:
        $z5 = r0 instanceof java.util.Enumeration;

        if $z5 == 0 goto label10;

        r20 = (java.util.Enumeration) r0;

     label07:
        $z8 = interfaceinvoke r20.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z8 == 0 goto label09;

        $i4 = (int) -1;

        i0 = i0 + $i4;

        $i6 = (int) -1;

        if i0 != $i6 goto label08;

        $r7 = interfaceinvoke r20.<java.util.Enumeration: java.lang.Object nextElement()>();

        return $r7;

     label08:
        interfaceinvoke r20.<java.util.Enumeration: java.lang.Object nextElement()>();

        goto label07;

     label09:
        goto label12;

     label10:
        $z6 = r0 instanceof java.util.Iterator;

        if $z6 == 0 goto label11;

        $r5 = (java.util.Iterator) r0;

        $r6 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.lang.Object index(java.util.Iterator,int)>($r5, i0);

        return $r6;

     label11:
        $z7 = r0 instanceof java.util.Collection;

        if $z7 == 0 goto label12;

        $r2 = (java.util.Collection) r0;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.lang.Object index(java.util.Iterator,int)>($r3, i0);

        return $r4;

     label12:
        return r0;
    }

    private static java.lang.Object index(java.util.Iterator, int)
    {
        java.util.Iterator r0;
        int i0, $i2, $i4;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        $i4 = (int) -1;

        if i0 != $i4 goto label2;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        return $r1;

     label2:
        interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        goto label1;

     label3:
        return r0;
    }

    public static java.lang.Object get(java.lang.Object, int)
    {
        java.lang.IndexOutOfBoundsException $r43, $r45, $r47;
        java.util.Enumeration r41;
        java.util.Map r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Collection $r9;
        java.util.Set $r23;
        java.util.List $r21;
        java.lang.Object[] $r18, $r19;
        java.lang.StringBuffer $r5, $r6, $r14, $r15, $r28, $r29, $r34, $r37, $r42, $r44, $r46, $r49;
        int i0, $i2, $i4, $i6, $i8;
        java.lang.String $r7, $r16, $r30, $r36, $r38;
        java.util.Iterator $r10, $r24, r40;
        java.lang.IllegalArgumentException $r31, $r48, $r50;
        java.lang.Object r0, $r1, $r8, $r11, $r17, $r20, $r22, $r25;
        java.lang.Class $r35;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 >= 0 goto label01;

        $r43 = new java.lang.IndexOutOfBoundsException;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index cannot be negative: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r30);

        throw $r43;

     label01:
        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label02;

        r39 = (java.util.Map) r0;

        $r23 = interfaceinvoke r39.<java.util.Map: java.util.Set entrySet()>();

        $r24 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

        $r25 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r24, i0);

        return $r25;

     label02:
        $z1 = r0 instanceof java.util.List;

        if $z1 == 0 goto label03;

        $r21 = (java.util.List) r0;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i0);

        return $r22;

     label03:
        $z2 = r0 instanceof java.lang.Object[];

        if $z2 == 0 goto label04;

        $r18 = (java.lang.Object[]) r0;

        $r19 = (java.lang.Object[]) $r18;

        $r20 = $r19[i0];

        return $r20;

     label04:
        $z3 = r0 instanceof java.util.Iterator;

        if $z3 == 0 goto label08;

        r40 = (java.util.Iterator) r0;

     label05:
        $z7 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        $i4 = (int) -1;

        if i0 != $i4 goto label06;

        $r17 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        return $r17;

     label06:
        interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        goto label05;

     label07:
        $r45 = new java.lang.IndexOutOfBoundsException;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Entry does not exist: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r16);

        throw $r45;

     label08:
        $z4 = r0 instanceof java.util.Collection;

        if $z4 == 0 goto label09;

        $r9 = (java.util.Collection) r0;

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

        $r11 = staticinvoke <org.apache.commons.collections.CollectionUtils: java.lang.Object get(java.lang.Object,int)>($r10, i0);

        return $r11;

     label09:
        $z5 = r0 instanceof java.util.Enumeration;

        if $z5 == 0 goto label13;

        r41 = (java.util.Enumeration) r0;

     label10:
        $z6 = interfaceinvoke r41.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z6 == 0 goto label12;

        $i6 = (int) -1;

        i0 = i0 + $i6;

        $i8 = (int) -1;

        if i0 != $i8 goto label11;

        $r8 = interfaceinvoke r41.<java.util.Enumeration: java.lang.Object nextElement()>();

        return $r8;

     label11:
        interfaceinvoke r41.<java.util.Enumeration: java.lang.Object nextElement()>();

        goto label10;

     label12:
        $r47 = new java.lang.IndexOutOfBoundsException;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Entry does not exist: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r47;

     label13:
        if r0 != null goto label14;

        $r48 = new java.lang.IllegalArgumentException;

        specialinvoke $r48.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported object type: null");

        throw $r48;

     label14:
        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i0);

     label15:
        return $r1;

     label16:
        $r31 := @caughtexception;

        $r50 = new java.lang.IllegalArgumentException;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported object type: ");

        $r35 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r50.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r50;

        catch java.lang.IllegalArgumentException from label14 to label15 with label16;
    }

    public static int size(java.lang.Object)
    {
        java.lang.Object[] $r2, $r3;
        java.util.Enumeration r15;
        java.lang.StringBuffer $r8, $r9, $r12;
        java.util.Map $r5;
        int i0;
        java.lang.String $r11, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator r14;
        java.util.Collection $r4;
        java.lang.IllegalArgumentException $r1, $r6, $r7;
        java.lang.Object r0;
        java.lang.Class $r10;

        r0 := @parameter0: java.lang.Object;

        i0 = 0;

        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label01;

        $r5 = (java.util.Map) r0;

        i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        goto label13;

     label01:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label02;

        $r4 = (java.util.Collection) r0;

        i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        goto label13;

     label02:
        $z2 = r0 instanceof java.lang.Object[];

        if $z2 == 0 goto label03;

        $r2 = (java.lang.Object[]) r0;

        $r3 = (java.lang.Object[]) $r2;

        i0 = lengthof $r3;

        goto label13;

     label03:
        $z3 = r0 instanceof java.util.Iterator;

        if $z3 == 0 goto label06;

        r14 = (java.util.Iterator) r0;

     label04:
        $z6 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        i0 = i0 + 1;

        interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        goto label04;

     label05:
        goto label13;

     label06:
        $z4 = r0 instanceof java.util.Enumeration;

        if $z4 == 0 goto label09;

        r15 = (java.util.Enumeration) r0;

     label07:
        $z5 = interfaceinvoke r15.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z5 == 0 goto label08;

        i0 = i0 + 1;

        interfaceinvoke r15.<java.util.Enumeration: java.lang.Object nextElement()>();

        goto label07;

     label08:
        goto label13;

     label09:
        if r0 != null goto label10;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported object type: null");

        throw $r1;

     label10:
        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

     label11:
        goto label13;

     label12:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported object type: ");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label13:
        return i0;

        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }

    public static boolean sizeIsEmpty(java.lang.Object)
    {
        java.lang.Object[] $r4, $r5;
        java.util.Enumeration $r2;
        java.lang.StringBuffer $r10, $r11, $r14;
        java.util.Map $r6;
        int $i0, $i1;
        java.lang.String $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.Iterator $r3;
        java.util.Collection $r7;
        java.lang.IllegalArgumentException $r1, $r8, $r9;
        java.lang.Object r0;
        java.lang.Class $r12;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label01;

        $r7 = (java.util.Collection) r0;

        $z8 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        return $z8;

     label01:
        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label02;

        $r6 = (java.util.Map) r0;

        $z7 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        return $z7;

     label02:
        $z2 = r0 instanceof java.lang.Object[];

        if $z2 == 0 goto label05;

        $r4 = (java.lang.Object[]) r0;

        $r5 = (java.lang.Object[]) $r4;

        $i1 = lengthof $r5;

        if $i1 != 0 goto label03;

        $z9 = 1;

        goto label04;

     label03:
        $z9 = 0;

     label04:
        return $z9;

     label05:
        $z3 = r0 instanceof java.util.Iterator;

        if $z3 == 0 goto label08;

        $r3 = (java.util.Iterator) r0;

        $z6 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label06;

        $z10 = 1;

        goto label07;

     label06:
        $z10 = 0;

     label07:
        return $z10;

     label08:
        $z4 = r0 instanceof java.util.Enumeration;

        if $z4 == 0 goto label11;

        $r2 = (java.util.Enumeration) r0;

        $z5 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z5 != 0 goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        return $z11;

     label11:
        if r0 != null goto label12;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported object type: null");

        throw $r1;

     label12:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if $i0 != 0 goto label13;

        $z12 = 1;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        return $z12;

     label15:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported object type: ");

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

        catch java.lang.IllegalArgumentException from label12 to label14 with label15;
    }

    public static boolean isEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isNotEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void reverseArray(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1, i2, $i4;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label1:
        if i2 <= i1 goto label2;

        r1 = r0[i2];

        $r2 = r0[i1];

        r0[i2] = $r2;

        r0[i1] = r1;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final int getFreq(java.lang.Object, java.util.Map)
    {
        java.util.Map r0;
        int $i0;
        java.lang.Object r1, $r2;
        java.lang.Integer r3;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.Integer) $r2;

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        return 0;
    }

    public static boolean isFull(java.util.Collection)
    {
        org.apache.commons.collections.BoundedCollection $r1, $r2;
        java.util.Collection r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r3;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections.BoundedCollection;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.commons.collections.BoundedCollection) r0;

        $z2 = interfaceinvoke $r2.<org.apache.commons.collections.BoundedCollection: boolean isFull()>();

        return $z2;

     label2:
        $r1 = staticinvoke <org.apache.commons.collections.collection.UnmodifiableBoundedCollection: org.apache.commons.collections.BoundedCollection decorateUsing(java.util.Collection)>(r0);

        $z1 = interfaceinvoke $r1.<org.apache.commons.collections.BoundedCollection: boolean isFull()>();

     label3:
        return $z1;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static int maxSize(java.util.Collection)
    {
        org.apache.commons.collections.BoundedCollection $r1, $r2;
        java.util.Collection r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r5;
        int $i0, $i1, $i3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r5;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections.BoundedCollection;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.commons.collections.BoundedCollection) r0;

        $i1 = interfaceinvoke $r2.<org.apache.commons.collections.BoundedCollection: int maxSize()>();

        return $i1;

     label2:
        $r1 = staticinvoke <org.apache.commons.collections.collection.UnmodifiableBoundedCollection: org.apache.commons.collections.BoundedCollection decorateUsing(java.util.Collection)>(r0);

        $i0 = interfaceinvoke $r1.<org.apache.commons.collections.BoundedCollection: int maxSize()>();

     label3:
        return $i0;

     label4:
        $r4 := @caughtexception;

        $i3 = (int) -1;

        return $i3;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static java.util.Collection retainAll(java.util.Collection, java.util.Collection)
    {
        java.util.List $r2;
        java.util.Collection r0, r1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.collections.ListUtils: java.util.List retainAll(java.util.Collection,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection removeAll(java.util.Collection, java.util.Collection)
    {
        java.util.List $r2;
        java.util.Collection r0, r1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.collections.ListUtils: java.util.List retainAll(java.util.Collection,java.util.Collection)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection synchronizedCollection(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.apache.commons.collections.collection.SynchronizedCollection: java.util.Collection decorate(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.Collection unmodifiableCollection(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.apache.commons.collections.collection.UnmodifiableCollection: java.util.Collection decorate(java.util.Collection)>(r0);

        return $r1;
    }

    public static java.util.Collection predicatedCollection(java.util.Collection, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        $r2 = staticinvoke <org.apache.commons.collections.collection.PredicatedCollection: java.util.Collection decorate(java.util.Collection,org.apache.commons.collections.Predicate)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection typedCollection(java.util.Collection, java.lang.Class)
    {
        java.lang.Class r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.apache.commons.collections.collection.TypedCollection: java.util.Collection decorate(java.util.Collection,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection transformedCollection(java.util.Collection, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections.collection.TransformedCollection: java.util.Collection decorate(java.util.Collection,org.apache.commons.collections.Transformer)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0;
        java.util.ArrayList $r1;
        java.util.Collection $r2;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(1);

        <org.apache.commons.collections.CollectionUtils: java.lang.Integer INTEGER_ONE> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.collections.collection.UnmodifiableCollection: java.util.Collection decorate(java.util.Collection)>($r1);

        <org.apache.commons.collections.CollectionUtils: java.util.Collection EMPTY_COLLECTION> = $r2;

        return;
    }
}
