public class org.dom4j.io.XPPPacketReader extends java.lang.Object
{
    private org.dom4j.DocumentFactory factory;
    private org.xmlpull.v1.XmlPullParser xppParser;
    private org.xmlpull.v1.XmlPullParserFactory xppFactory;
    private org.dom4j.io.DispatchHandler dispatchHandler;

    public void <init>()
    {
        org.dom4j.io.XPPPacketReader r0;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.XPPPacketReader: org.dom4j.DocumentFactory factory> = r1;

        return;
    }

    public org.dom4j.Document read(java.io.File) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r2;
        org.dom4j.Document $r5;
        java.lang.String $r1;
        java.io.BufferedReader $r3;
        java.io.FileReader $r4;
        java.io.File r0;

        r2 := @this: org.dom4j.io.XPPPacketReader;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.FileReader;

        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>(r0);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        $r5 = virtualinvoke r2.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r3, $r1);

        return $r5;
    }

    public org.dom4j.Document read(java.net.URL) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r2;
        org.dom4j.Document $r5;
        java.net.URL r0;
        java.lang.String $r1;
        java.io.Reader $r4;
        java.io.InputStream $r3;

        r2 := @this: org.dom4j.io.XPPPacketReader;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toExternalForm()>();

        $r3 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

        $r4 = virtualinvoke r2.<org.dom4j.io.XPPPacketReader: java.io.Reader createReader(java.io.InputStream)>($r3);

        $r5 = virtualinvoke r2.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r4, $r1);

        return $r5;
    }

    public org.dom4j.Document read(java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r1;
        org.dom4j.Document $r3, $r5;
        java.net.URL $r4;
        int $i0;
        java.lang.String r0;
        java.io.File $r2;

        r1 := @this: org.dom4j.io.XPPPacketReader;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>(r0);

        $r5 = virtualinvoke r1.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.net.URL)>($r4);

        return $r5;

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        $r3 = virtualinvoke r1.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.io.File)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.InputStream) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.Document $r3;
        java.io.Reader $r2;
        java.io.InputStream r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: java.io.Reader createReader(java.io.InputStream)>(r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.io.Reader)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.Reader) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.Document $r3;
        java.io.Reader r2;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r2 := @parameter0: java.io.Reader;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r2);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.Document parseDocument()>();

        return $r3;
    }

    public org.dom4j.Document read(char[]) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.Document $r4;
        java.io.CharArrayReader $r2;
        char[] r3;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r3 := @parameter0: char[];

        $r1 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        $r2 = new java.io.CharArrayReader;

        specialinvoke $r2.<java.io.CharArrayReader: void <init>(char[])>(r3);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r2);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.Document parseDocument()>();

        return $r4;
    }

    public org.dom4j.Document read(java.io.InputStream, java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.Document $r4;
        java.io.Reader $r2;
        java.lang.String r3;
        java.io.InputStream r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: java.io.Reader createReader(java.io.InputStream)>(r1);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r2, r3);

        return $r4;
    }

    public org.dom4j.Document read(java.io.Reader, java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.Document $r2;
        java.io.Reader r1;
        java.lang.String r3;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: java.io.Reader;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.Document read(java.io.Reader)>(r1);

        interfaceinvoke $r2.<org.dom4j.Document: void setName(java.lang.String)>(r3);

        return $r2;
    }

    public org.xmlpull.v1.XmlPullParser getXPPParser() throws org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.xmlpull.v1.XmlPullParserFactory $r3;
        org.xmlpull.v1.XmlPullParser $r1, $r2, $r4;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        $r1 = r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParser xppParser>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParserFactory getXPPFactory()>();

        $r4 = virtualinvoke $r3.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParser xppParser> = $r4;

     label1:
        $r2 = r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParser xppParser>;

        return $r2;
    }

    public org.xmlpull.v1.XmlPullParserFactory getXPPFactory() throws org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPPPacketReader r0;
        org.xmlpull.v1.XmlPullParserFactory $r1, $r2, $r3, $r4;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        $r1 = r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParserFactory xppFactory> = $r4;

     label1:
        $r2 = r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        virtualinvoke $r2.<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>(1);

        $r3 = r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        return $r3;
    }

    public void setXPPFactory(org.xmlpull.v1.XmlPullParserFactory)
    {
        org.dom4j.io.XPPPacketReader r0;
        org.xmlpull.v1.XmlPullParserFactory r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParserFactory;

        r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParserFactory xppFactory> = r1;

        return;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.DocumentFactory $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        $r1 = r0.<org.dom4j.io.XPPPacketReader: org.dom4j.DocumentFactory factory>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.XPPPacketReader: org.dom4j.DocumentFactory factory> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.XPPPacketReader: org.dom4j.DocumentFactory factory>;

        return $r2;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.XPPPacketReader: org.dom4j.DocumentFactory factory> = r1;

        return;
    }

    public void addHandler(java.lang.String, org.dom4j.ElementHandler)
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.ElementHandler r3;
        java.lang.String r2;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.dom4j.ElementHandler;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: void addHandler(java.lang.String,org.dom4j.ElementHandler)>(r2, r3);

        return;
    }

    public void removeHandler(java.lang.String)
    {
        org.dom4j.io.XPPPacketReader r0;
        java.lang.String r2;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: org.dom4j.ElementHandler removeHandler(java.lang.String)>(r2);

        return;
    }

    public void setDefaultHandler(org.dom4j.ElementHandler)
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.io.DispatchHandler $r1;
        org.dom4j.ElementHandler r2;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r2 := @parameter0: org.dom4j.ElementHandler;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: void setDefaultHandler(org.dom4j.ElementHandler)>(r2);

        return;
    }

    public org.dom4j.Document parseDocument() throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser $r3;
        org.dom4j.Document $r2;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r43;
        org.dom4j.QName $r42, $r45;
        boolean $z0, $z1, $z2, $z3;
        org.dom4j.DocumentFactory $r1;
        org.dom4j.DocumentException $r46, $r47, $r48;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, $i16;
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.Element r41, r44;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        r41 = null;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPPacketReader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        i12 = 0;

     label01:
        $i0 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        tableswitch($i0)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label26;
            case 4: goto label28;
            case 5: goto label06;
            case 6: goto label08;
            case 7: goto label30;
            case 8: goto label02;
            case 9: goto label04;
            default: goto label30;
        };

     label02:
        $r6 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>(" ");

        if $i1 < 0 goto label03;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i1 + 1;

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r7, $r8);

        goto label30;

     label03:
        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r6, "");

        goto label30;

     label04:
        if r41 == null goto label05;

        $r5 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke r41.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>($r5);

        goto label30;

     label05:
        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>($r4);

        goto label30;

     label06:
        $r12 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        if r41 == null goto label07;

        interfaceinvoke r41.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r12);

        goto label30;

     label07:
        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        $i4 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i4 <= 0 goto label30;

        $r46 = new org.dom4j.DocumentException;

        specialinvoke $r46.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r46;

     label08:
        $r9 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        if r41 == null goto label09;

        interfaceinvoke r41.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r9);

        goto label30;

     label09:
        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i3 <= 0 goto label30;

        $r47 = new org.dom4j.DocumentException;

        specialinvoke $r47.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have an entityref outside of the root document");

        throw $r47;

     label10:
        return $r2;

     label11:
        $r18 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        if $r18 != null goto label12;

        $r39 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r40 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r42 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String)>($r39, $r40);

        goto label13;

     label12:
        $r19 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r20 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        $r21 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r42 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r19, $r20, $r21);

     label13:
        $r22 = "jabber:client";

        $r23 = virtualinvoke $r42.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z0 != 0 goto label14;

        $r33 = "jabber:server";

        $r34 = virtualinvoke $r42.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z1 != 0 goto label14;

        $r35 = "jabber:component:accept";

        $r36 = virtualinvoke $r42.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z2 != 0 goto label14;

        $r37 = "http://jabber.org/protocol/httpbind";

        $r38 = virtualinvoke $r42.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $z3 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z3 == 0 goto label15;

     label14:
        $r43 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        r44 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>($r43);

        goto label16;

     label15:
        r44 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r42);

     label16:
        $i6 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i7 = $i6 - 1;

        $i8 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i7);

        $i9 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i10 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i9);

        i13 = $i8;

     label17:
        if i13 >= $i10 goto label19;

        $r30 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>(i13);

        if $r30 == null goto label18;

        $r31 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>(i13);

        $r32 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>(i13);

        interfaceinvoke r44.<org.dom4j.Element: org.dom4j.Element addNamespace(java.lang.String,java.lang.String)>($r31, $r32);

     label18:
        i13 = i13 + 1;

        goto label17;

     label19:
        i14 = 0;

     label20:
        $i11 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if i14 >= $i11 goto label23;

        $r24 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>(i14);

        if $r24 != null goto label21;

        $r29 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i14);

        $r45 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r29);

        goto label22;

     label21:
        $r25 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i14);

        $r26 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>(i14);

        $r27 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>(i14);

        $r45 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r25, $r26, $r27);

     label22:
        $r28 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>(i14);

        interfaceinvoke r44.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r45, $r28);

        i14 = i14 + 1;

        goto label20;

     label23:
        if r41 == null goto label24;

        interfaceinvoke r41.<org.dom4j.Element: void add(org.dom4j.Element)>(r44);

        goto label25;

     label24:
        interfaceinvoke $r2.<org.dom4j.Document: void add(org.dom4j.Element)>(r44);

     label25:
        r41 = r44;

        i12 = i12 + 1;

        goto label30;

     label26:
        if r41 == null goto label27;

        r41 = interfaceinvoke r41.<org.dom4j.Element: org.dom4j.Element getParent()>();

     label27:
        $i16 = (int) -1;

        i12 = i12 + $i16;

        if i12 >= 1 goto label30;

        return $r2;

     label28:
        $r15 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        if r41 == null goto label29;

        interfaceinvoke r41.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r15);

        goto label30;

     label29:
        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        $i5 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i5 <= 0 goto label30;

        $r48 = new org.dom4j.DocumentException;

        specialinvoke $r48.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r48;

     label30:
        goto label01;
    }

    protected org.dom4j.io.DispatchHandler getDispatchHandler()
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.io.DispatchHandler $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        $r1 = r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        if $r1 != null goto label1;

        $r3 = new org.dom4j.io.DispatchHandler;

        specialinvoke $r3.<org.dom4j.io.DispatchHandler: void <init>()>();

        r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler dispatchHandler> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        return $r2;
    }

    protected void setDispatchHandler(org.dom4j.io.DispatchHandler)
    {
        org.dom4j.io.XPPPacketReader r0;
        org.dom4j.io.DispatchHandler r1;

        r0 := @this: org.dom4j.io.XPPPacketReader;

        r1 := @parameter0: org.dom4j.io.DispatchHandler;

        r0.<org.dom4j.io.XPPPacketReader: org.dom4j.io.DispatchHandler dispatchHandler> = r1;

        return;
    }

    protected java.io.Reader createReader(java.io.InputStream) throws java.io.IOException
    {
        org.dom4j.io.XPPPacketReader r3;
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r3 := @this: org.dom4j.io.XPPPacketReader;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }
}
