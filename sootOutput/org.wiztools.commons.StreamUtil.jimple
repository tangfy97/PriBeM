public final class org.wiztools.commons.StreamUtil extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;

    private void <init>()
    {
        org.wiztools.commons.StreamUtil r0;

        r0 := @this: org.wiztools.commons.StreamUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.nio.CharBuffer decodeHelper(byte[], int, java.nio.charset.Charset) throws java.io.IOException
    {
        byte[] r2;
        java.nio.charset.Charset r0;
        java.nio.charset.MalformedInputException $r4;
        java.nio.CharBuffer r5;
        int i0;
        java.nio.charset.CharsetDecoder $r1;
        java.nio.ByteBuffer $r3;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 := @parameter2: java.nio.charset.Charset;

        $r1 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

     label1:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r2, 0, i0);

        r5 = virtualinvoke $r1.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r5 = null;

     label4:
        return r5;

        catch java.nio.charset.MalformedInputException from label1 to label2 with label3;
    }

    public static java.lang.String inputStream2String(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException
    {
        byte[] r26, r27, r28;
        java.nio.charset.MalformedInputException $r10, $r18;
        java.nio.ByteBuffer $r5, $r8;
        byte $b4;
        boolean z0, z1, z2;
        java.nio.CharBuffer $r6, r29;
        java.nio.charset.CharsetDecoder $r2;
        java.lang.StringBuilder $r13, $r15, $r16, $r21, $r23, $r24, $r30, $r31, $r33;
        java.lang.Throwable $r9;
        java.nio.charset.Charset r1;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i17;
        java.lang.String $r4, $r7, $r14, $r17, $r22, $r25;
        java.io.IOException $r32, $r34;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.nio.charset.Charset;

     label01:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        r26 = newarray (byte)[4096];

        r27 = newarray (byte)[1];

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $r2 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

     label02:
        $i0 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r26);

        i13 = $i0;

        $i17 = (int) -1;

        if $i0 == $i17 goto label11;

        if z1 == 0 goto label03;

        $i7 = lengthof r27;

        $i6 = lengthof r26;

        $i8 = $i7 + $i6;

        r28 = newarray (byte)[$i8];

        $i9 = lengthof r27;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r27, 0, r28, 0, $i9);

        $i11 = lengthof r27;

        $i10 = lengthof r26;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r26, 0, r28, $i11, $i10);

        r26 = r28;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $i12 = lengthof r27;

        i13 = $i0 + $i12;

     label03:
        $r6 = staticinvoke <org.wiztools.commons.StreamUtil: java.nio.CharBuffer decodeHelper(byte[],int,java.nio.charset.Charset)>(r26, i13, r1);

        r29 = $r6;

        if $r6 != null goto label10;

        i14 = 0;

     label04:
        if r29 != null goto label08;

        i14 = i14 + 1;

        $i5 = i13 - i14;

        r29 = staticinvoke <org.wiztools.commons.StreamUtil: java.nio.CharBuffer decodeHelper(byte[],int,java.nio.charset.Charset)>(r26, $i5, r1);

        if i14 <= 10 goto label04;

        if i14 >= i13 goto label04;

     label05:
        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r26, 0, i13);

        r29 = virtualinvoke $r2.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r8);

     label06:
        goto label04;

     label07:
        $r18 := @caughtexception;

        $r32 = new java.io.IOException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not in supported encoding (");

        $r22 = virtualinvoke r1.<java.nio.charset.Charset: java.lang.String displayName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r18);

        throw $r32;

     label08:
        r27 = newarray (byte)[i14];

        z0 = 1;

        z2 = 1;

        z1 = 1;

        i15 = 0;

     label09:
        if i15 >= i14 goto label10;

        $i2 = i13 - i14;

        $i3 = $i2 + i15;

        $b4 = r26[$i3];

        r27[i15] = $b4;

        i15 = i15 + 1;

        goto label09;

     label10:
        virtualinvoke r29.<java.nio.CharBuffer: java.nio.Buffer rewind()>();

        $r7 = virtualinvoke r29.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label02;

     label11:
        if z2 == 0 goto label15;

     label12:
        $i1 = lengthof r27;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r27, 0, $i1);

        virtualinvoke $r2.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r5);

     label13:
        goto label15;

     label14:
        $r10 := @caughtexception;

        $r34 = new java.io.IOException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not in supported encoding (");

        $r14 = virtualinvoke r1.<java.nio.charset.Charset: java.lang.String displayName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r10);

        throw $r34;

     label15:
        $r4 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label16:
        if r3 == null goto label17;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label17:
        return $r4;

     label18:
        $r9 := @caughtexception;

     label19:
        if r3 == null goto label20;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label20:
        throw $r9;

        catch java.nio.charset.MalformedInputException from label05 to label06 with label07;
        catch java.nio.charset.MalformedInputException from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label16 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public static byte[] inputStream2Bytes(java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        byte[] r1, $r3;
        java.io.ByteArrayOutputStream $r5;
        int $i0, $i2;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

     label1:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = newarray (byte)[8192];

     label2:
        $i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label2;

     label3:
        $r3 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label4:
        virtualinvoke r2.<java.io.InputStream: void close()>();

        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        virtualinvoke r2.<java.io.InputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.Throwable $r11;
        java.nio.ByteBuffer $r4;
        java.util.logging.Level $r6, $r9, $r13, $r16;
        int $i0, $i2;
        boolean $z0;
        java.io.OutputStream r2;
        java.nio.channels.ReadableByteChannel $r1;
        java.io.IOException $r5, $r8, $r12, $r15;
        java.util.logging.Logger $r7, $r10, $r14, $r17;
        java.nio.channels.WritableByteChannel $r3;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        $r1 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r0);

        $r3 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(r2);

     label01:
        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(65536);

     label02:
        $i0 = interfaceinvoke $r1.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>($r4);

        $i2 = (int) -1;

        if $i0 != $i2 goto label03;

        goto label06;

     label03:
        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label04:
        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label05;

        interfaceinvoke $r3.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r4);

        goto label04;

     label05:
        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label02;

     label06:
        interfaceinvoke $r1.<java.nio.channels.ReadableByteChannel: void close()>();

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

        $r17 = <org.wiztools.commons.StreamUtil: java.util.logging.Logger LOG>;

        $r16 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r17.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r16, null, $r15);

     label09:
        interfaceinvoke $r3.<java.nio.channels.WritableByteChannel: void close()>();

     label10:
        goto label20;

     label11:
        $r12 := @caughtexception;

        $r14 = <org.wiztools.commons.StreamUtil: java.util.logging.Logger LOG>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, null, $r12);

        goto label20;

     label12:
        $r11 := @caughtexception;

     label13:
        interfaceinvoke $r1.<java.nio.channels.ReadableByteChannel: void close()>();

     label14:
        goto label16;

     label15:
        $r8 := @caughtexception;

        $r10 = <org.wiztools.commons.StreamUtil: java.util.logging.Logger LOG>;

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, null, $r8);

     label16:
        interfaceinvoke $r3.<java.nio.channels.WritableByteChannel: void close()>();

     label17:
        goto label19;

     label18:
        $r5 := @caughtexception;

        $r7 = <org.wiztools.commons.StreamUtil: java.util.logging.Logger LOG>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, null, $r5);

     label19:
        throw $r11;

     label20:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label01 to label06 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/wiztools/commons/StreamUtil;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.wiztools.commons.StreamUtil: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
