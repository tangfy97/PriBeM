public class org.codehaus.jettison.json.JSONArray extends java.lang.Object implements java.io.Serializable
{
    private java.util.ArrayList myArrayList;

    public void <init>()
    {
        org.codehaus.jettison.json.JSONArray r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList> = $r1;

        return;
    }

    public void <init>(org.codehaus.jettison.json.JSONTokener) throws org.codehaus.jettison.json.JSONException
    {
        java.util.ArrayList $r2, $r5;
        int $i5, $i6, $i7, $i8, $i9;
        org.codehaus.jettison.json.JSONArray r0;
        char $c0, $c1, $c2, $c3, $c4;
        org.codehaus.jettison.json.JSONException $r4, $r6;
        org.codehaus.jettison.json.JSONTokener r1;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r1 := @parameter0: org.codehaus.jettison.json.JSONTokener;

        specialinvoke r0.<org.codehaus.jettison.json.JSONArray: void <init>()>();

        $c0 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i5 = (int) $c0;

        if $i5 == 91 goto label1;

        $r6 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("A JSONArray text must start with \'[\'");

        throw $r6;

     label1:
        $c1 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i6 = (int) $c1;

        if $i6 != 93 goto label2;

        return;

     label2:
        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

     label3:
        $c2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i7 = (int) $c2;

        if $i7 != 44 goto label4;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

        $r5 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        goto label5;

     label4:
        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

        $r2 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: java.lang.Object nextValue()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label5:
        $c3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i8 = (int) $c3;

        lookupswitch($i8)
        {
            case 44: goto label6;
            case 59: goto label6;
            case 93: goto label8;
            default: goto label9;
        };

     label6:
        $c4 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        $i9 = (int) $c4;

        if $i9 != 93 goto label7;

        return;

     label7:
        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

        goto label3;

     label8:
        return;

     label9:
        $r4 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Expected a \',\' or \']\'");

        throw $r4;
    }

    public void <init>(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONTokener $r1;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.String r2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.codehaus.jettison.json.JSONTokener;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONTokener: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.codehaus.jettison.json.JSONArray: void <init>(org.codehaus.jettison.json.JSONTokener)>($r1);

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.ListIterator $r3;
        java.util.Collection r1, $r8;
        org.codehaus.jettison.json.JSONObject $r5;
        org.codehaus.jettison.json.JSONArray r0, $r7;
        java.util.ArrayList $r2, $r9;
        java.util.Map $r6;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

     label2:
        r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList> = $r9;

        $r2 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.ListIterator listIterator()>();

     label3:
        $z2 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        $z0 = $r4 instanceof java.util.Collection;

        if $z0 == 0 goto label4;

        $r7 = new org.codehaus.jettison.json.JSONArray;

        $r8 = (java.util.Collection) $r4;

        specialinvoke $r7.<org.codehaus.jettison.json.JSONArray: void <init>(java.util.Collection)>($r8);

        interfaceinvoke $r3.<java.util.ListIterator: void set(java.lang.Object)>($r7);

     label4:
        $z1 = $r4 instanceof java.util.Map;

        if $z1 == 0 goto label5;

        $r5 = new org.codehaus.jettison.json.JSONObject;

        $r6 = (java.util.Map) $r4;

        specialinvoke $r5.<org.codehaus.jettison.json.JSONObject: void <init>(java.util.Map)>($r6);

        interfaceinvoke $r3.<java.util.ListIterator: void set(java.lang.Object)>($r5);

     label5:
        goto label3;

     label6:
        return;
    }

    public java.lang.Object get(int) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONArray r0;
        org.codehaus.jettison.json.JSONException $r2;
        int i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object opt(int)>(i0);

        if $r1 != null goto label1;

        $r2 = new org.codehaus.jettison.json.JSONException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONArray[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return $r1;
    }

    public boolean getBoolean(int) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        java.lang.Boolean $r2, $r3;
        java.lang.String $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.jettison.json.JSONArray r0;
        org.codehaus.jettison.json.JSONException $r4;
        java.lang.Object $r1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r11 = (java.lang.String) $r1;

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z5 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z2 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label3;

        $z3 = $r1 instanceof java.lang.String;

        if $z3 == 0 goto label4;

        $r10 = (java.lang.String) $r1;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z4 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r4 = new org.codehaus.jettison.json.JSONException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONArray[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a Boolean.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public double getDouble(int) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Double $r3;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Exception $r5;
        org.codehaus.jettison.json.JSONException $r6;
        int i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r2, $r11;
        java.lang.Number $r4;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

     label1:
        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        goto label3;

     label2:
        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

     label3:
        return $d0;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.codehaus.jettison.json.JSONException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONArray[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a number.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r11);

        throw $r6;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getInt(int) throws org.codehaus.jettison.json.JSONException
    {
        int i0, $i1;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r1;
        java.lang.Number $r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Number) $r1;

        $i1 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: double getDouble(int)>(i0);

        $i1 = (int) $d0;

     label2:
        return $i1;
    }

    public org.codehaus.jettison.json.JSONArray getJSONArray(int) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONArray r0, $r8;
        org.codehaus.jettison.json.JSONException $r2;
        int i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

        $z0 = $r1 instanceof org.codehaus.jettison.json.JSONArray;

        if $z0 == 0 goto label1;

        $r8 = (org.codehaus.jettison.json.JSONArray) $r1;

        return $r8;

     label1:
        $r2 = new org.codehaus.jettison.json.JSONException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONArray[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a JSONArray.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public org.codehaus.jettison.json.JSONObject getJSONObject(int) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject $r8;
        org.codehaus.jettison.json.JSONArray r0;
        org.codehaus.jettison.json.JSONException $r2;
        int i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

        $z0 = $r1 instanceof org.codehaus.jettison.json.JSONObject;

        if $z0 == 0 goto label1;

        $r8 = (org.codehaus.jettison.json.JSONObject) $r1;

        return $r8;

     label1:
        $r2 = new org.codehaus.jettison.json.JSONException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONArray[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a JSONObject.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public long getLong(int) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r1;
        long $l1;
        java.lang.Number $r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Number) $r1;

        $l1 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: double getDouble(int)>(i0);

        $l1 = (long) $d0;

     label2:
        return $l1;
    }

    public java.lang.String getString(int) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object get(int)>(i0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public boolean isNull(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL>;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object opt(int)>(i0);

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.String join(java.lang.String) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONArray r0;
        java.util.ArrayList $r3;
        java.lang.StringBuffer $r1;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r6 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

     label2:
        $r3 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public int length()
    {
        int $i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        $r1 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.lang.Object opt(int)
    {
        int i0, $i1;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if i0 < $i1 goto label2;

     label1:
        $r2 = null;

        goto label3;

     label2:
        $r1 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

     label3:
        return $r2;
    }

    public boolean optBoolean(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: boolean optBoolean(int,boolean)>(i0, 0);

        return $z0;
    }

    public boolean optBoolean(int, boolean)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Exception $r1;
        boolean $z0, z1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: boolean getBoolean(int)>(i0);

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        return z1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public double optDouble(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        double $d0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: double optDouble(int,double)>(i0, #NaN);

        return $d0;
    }

    public double optDouble(int, double)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Exception $r1;
        double $d0, d1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        d1 := @parameter1: double;

     label1:
        $d0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: double getDouble(int)>(i0);

     label2:
        return $d0;

     label3:
        $r1 := @caughtexception;

        return d1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int optInt(int)
    {
        int i0, $i1;
        org.codehaus.jettison.json.JSONArray r0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int optInt(int,int)>(i0, 0);

        return $i1;
    }

    public int optInt(int, int)
    {
        int i0, $i1, i2;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Exception $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

     label1:
        $i1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int getInt(int)>(i0);

     label2:
        return $i1;

     label3:
        $r1 := @caughtexception;

        return i2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.codehaus.jettison.json.JSONArray optJSONArray(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0, $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object opt(int)>(i0);

        $z0 = $r1 instanceof org.codehaus.jettison.json.JSONArray;

        if $z0 == 0 goto label1;

        $r2 = (org.codehaus.jettison.json.JSONArray) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.codehaus.jettison.json.JSONObject optJSONObject(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONObject $r2;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object opt(int)>(i0);

        $z0 = $r1 instanceof org.codehaus.jettison.json.JSONObject;

        if $z0 == 0 goto label1;

        $r2 = (org.codehaus.jettison.json.JSONObject) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public long optLong(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        long $l1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: long optLong(int,long)>(i0, 0L);

        return $l1;
    }

    public long optLong(int, long)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        long $l1, l2;
        java.lang.Exception $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        l2 := @parameter1: long;

     label1:
        $l1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: long getLong(int)>(i0);

     label2:
        return $l1;

     label3:
        $r1 := @caughtexception;

        return l2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String optString(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.String optString(int,java.lang.String)>(i0, "");

        return $r1;
    }

    public java.lang.String optString(int, java.lang.String)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r1;
        java.lang.String r2, $r3;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.Object opt(int)>(i0);

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = r2;

     label2:
        return $r3;
    }

    public org.codehaus.jettison.json.JSONArray put(boolean)
    {
        java.lang.Boolean $r1;
        org.codehaus.jettison.json.JSONArray r0;
        boolean z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(java.util.Collection)
    {
        org.codehaus.jettison.json.JSONArray r0, $r1;
        java.util.Collection r2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r2 := @parameter0: java.util.Collection;

        $r1 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONArray: void <init>(java.util.Collection)>(r2);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(double) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONArray r1;
        java.lang.Double $r0;
        double d0;

        r1 := @this: org.codehaus.jettison.json.JSONArray;

        d0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);

        staticinvoke <org.codehaus.jettison.json.JSONObject: void testValidity(java.lang.Object)>($r0);

        virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r0);

        return r1;
    }

    public org.codehaus.jettison.json.JSONArray put(int)
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Integer $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(long)
    {
        org.codehaus.jettison.json.JSONArray r0;
        long l0;
        java.lang.Long $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        l0 := @parameter0: long;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(java.util.Map)
    {
        org.codehaus.jettison.json.JSONObject $r1;
        org.codehaus.jettison.json.JSONArray r0;
        java.util.Map r2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r2 := @parameter0: java.util.Map;

        $r1 = new org.codehaus.jettison.json.JSONObject;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONObject: void <init>(java.util.Map)>(r2);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(java.lang.Object)
    {
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object r1;
        java.util.ArrayList $r2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, boolean) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        java.lang.Boolean $r1;
        org.codehaus.jettison.json.JSONArray r0;
        boolean z0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, java.util.Collection) throws org.codehaus.jettison.json.JSONException
    {
        java.util.Collection r2;
        int i0;
        org.codehaus.jettison.json.JSONArray r0, $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        r2 := @parameter1: java.util.Collection;

        $r1 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONArray: void <init>(java.util.Collection)>(r2);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, double) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Double $r1;
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        double d0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d0);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, int) throws org.codehaus.jettison.json.JSONException
    {
        int i0, i1;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Integer $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, long) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Long $r1;
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        long l1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(l1);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, java.util.Map) throws org.codehaus.jettison.json.JSONException
    {
        java.util.Map r2;
        int i0;
        org.codehaus.jettison.json.JSONObject $r1;
        org.codehaus.jettison.json.JSONArray r0;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        r2 := @parameter1: java.util.Map;

        $r1 = new org.codehaus.jettison.json.JSONObject;

        specialinvoke $r1.<org.codehaus.jettison.json.JSONObject: void <init>(java.util.Map)>(r2);

        virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return r0;
    }

    public org.codehaus.jettison.json.JSONArray put(int, java.lang.Object) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONArray r1;
        java.util.ArrayList $r3;
        org.codehaus.jettison.json.JSONException $r4;
        int i0, $i1, $i2;
        java.lang.Object r0, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r1 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        staticinvoke <org.codehaus.jettison.json.JSONObject: void testValidity(java.lang.Object)>(r0);

        if i0 >= 0 goto label1;

        $r4 = new org.codehaus.jettison.json.JSONException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSONArray[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $i1 = virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: int length()>();

        if i0 >= $i1 goto label2;

        $r3 = r1.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r0);

        goto label4;

     label2:
        $i2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: int length()>();

        if i0 == $i2 goto label3;

        $r2 = <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL>;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>($r2);

        goto label2;

     label3:
        virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: org.codehaus.jettison.json.JSONArray put(java.lang.Object)>(r0);

     label4:
        return r1;
    }

    public org.codehaus.jettison.json.JSONObject toJSONObject(org.codehaus.jettison.json.JSONArray) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject $r2;
        org.codehaus.jettison.json.JSONArray r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        java.lang.String $r3;

        r1 := @this: org.codehaus.jettison.json.JSONArray;

        r0 := @parameter0: org.codehaus.jettison.json.JSONArray;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = new org.codehaus.jettison.json.JSONObject;

        specialinvoke $r2.<org.codehaus.jettison.json.JSONObject: void <init>()>();

        i3 = 0;

     label3:
        $i2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if i3 >= $i2 goto label4;

        $r3 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.String getString(int)>(i3);

        $r4 = virtualinvoke r1.<org.codehaus.jettison.json.JSONArray: java.lang.Object opt(int)>(i3);

        virtualinvoke $r2.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>($r3, $r4);

        i3 = i3 + 1;

        goto label3;

     label4:
        return $r2;
    }

    public java.lang.String toString()
    {
        org.codehaus.jettison.json.JSONArray r2;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r2 := @this: org.codehaus.jettison.json.JSONArray;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = virtualinvoke r2.<org.codehaus.jettison.json.JSONArray: java.lang.String join(java.lang.String)>(",");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String toString(int) throws org.codehaus.jettison.json.JSONException
    {
        int i0;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: java.lang.String toString(int,int)>(i0, 0);

        return $r1;
    }

    java.lang.String toString(int, int) throws org.codehaus.jettison.json.JSONException
    {
        java.util.ArrayList $r3, $r6;
        java.lang.StringBuffer $r1;
        int $i0, i1, i2, i3, i4, i5, i6;
        java.lang.String $r2, $r5, $r8;
        org.codehaus.jettison.json.JSONArray r0;
        java.lang.Object $r4, $r7;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        if $i0 != 0 goto label1;

        return "[]";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");

        if $i0 != 1 goto label2;

        $r6 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r8 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object,int,int)>($r7, i2, i1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label9;

     label2:
        i3 = i1 + i2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i4 = 0;

     label3:
        if i4 >= $i0 goto label7;

        if i4 <= 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",\n");

     label4:
        i5 = 0;

     label5:
        if i5 >= i3 goto label6;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i5 = i5 + 1;

        goto label5;

     label6:
        $r3 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r5 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object,int,int)>($r4, i2, i3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i4 = i4 + 1;

        goto label3;

     label7:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i6 = 0;

     label8:
        if i6 >= i1 goto label9;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i6 = i6 + 1;

        goto label8;

     label9:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.io.Writer write(java.io.Writer) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONObject $r6;
        org.codehaus.jettison.json.JSONArray r0, $r5;
        java.io.IOException $r7;
        java.util.ArrayList $r2;
        org.codehaus.jettison.json.JSONException $r8;
        int $i0, i1;
        java.io.Writer r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0, $z1, z2;

        r0 := @this: org.codehaus.jettison.json.JSONArray;

        r1 := @parameter0: java.io.Writer;

     label1:
        z2 = 0;

        $i0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONArray: int length()>();

        virtualinvoke r1.<java.io.Writer: void write(int)>(91);

        i1 = 0;

     label2:
        if i1 >= $i0 goto label7;

        if z2 == 0 goto label3;

        virtualinvoke r1.<java.io.Writer: void write(int)>(44);

     label3:
        $r2 = r0.<org.codehaus.jettison.json.JSONArray: java.util.ArrayList myArrayList>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $z0 = $r3 instanceof org.codehaus.jettison.json.JSONObject;

        if $z0 == 0 goto label4;

        $r6 = (org.codehaus.jettison.json.JSONObject) $r3;

        virtualinvoke $r6.<org.codehaus.jettison.json.JSONObject: java.io.Writer write(java.io.Writer)>(r1);

        goto label6;

     label4:
        $z1 = $r3 instanceof org.codehaus.jettison.json.JSONArray;

        if $z1 == 0 goto label5;

        $r5 = (org.codehaus.jettison.json.JSONArray) $r3;

        virtualinvoke $r5.<org.codehaus.jettison.json.JSONArray: java.io.Writer write(java.io.Writer)>(r1);

        goto label6;

     label5:
        $r4 = staticinvoke <org.codehaus.jettison.json.JSONObject: java.lang.String valueToString(java.lang.Object)>($r3);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r4);

     label6:
        z2 = 1;

        i1 = i1 + 1;

        goto label2;

     label7:
        virtualinvoke r1.<java.io.Writer: void write(int)>(93);

     label8:
        return r1;

     label9:
        $r7 := @caughtexception;

        $r8 = new org.codehaus.jettison.json.JSONException;

        specialinvoke $r8.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.io.IOException from label1 to label8 with label9;
    }
}
