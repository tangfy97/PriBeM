public class org.apache.http.impl.entity.LaxContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.ContentLengthStrategy
{
    private final int implicitLen;

    public void <init>(int)
    {
        int i0;
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.entity.LaxContentLengthStrategy: int implicitLen> = i0;

        return;
    }

    public void <init>()
    {
        int $i1;
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>(int)>($i1);

        return;
    }

    public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException
    {
        org.apache.http.ProtocolException $r39, $r41, $r42, $r43, $r45;
        org.apache.http.HeaderElement[] $r9;
        org.apache.http.Header $r2, $r3, r6;
        byte $b3;
        org.apache.http.HttpMessage r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.http.Header[] $r5;
        java.lang.StringBuilder $r20, $r21, $r27, $r29, $r34, $r35, $r38, $r40, $r44;
        long $l1, l10;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, i9, i11, $i13, $i14;
        java.lang.String $r7, $r10, $r11, $r14, $r15, $r17, $r22, $r28, $r30, $r36;
        org.apache.http.ParseException $r31;
        java.lang.NumberFormatException $r24;
        org.apache.http.HeaderElement $r13, $r16;
        java.lang.IllegalArgumentException $r37;
        org.apache.http.impl.entity.LaxContentLengthStrategy r4;
        org.apache.http.params.HttpParams $r1;

        r4 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        r0 := @parameter0: org.apache.http.HttpMessage;

        if r0 != null goto label01;

        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r37;

     label01:
        $r1 = interfaceinvoke r0.<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>();

        $z0 = interfaceinvoke $r1.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.strict-transfer-encoding");

        $r2 = interfaceinvoke r0.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        if $r2 == null goto label12;

     label02:
        $r9 = interfaceinvoke $r2.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

     label03:
        goto label05;

     label04:
        $r31 := @caughtexception;

        $r39 = new org.apache.http.ProtocolException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Transfer-Encoding header value: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r31);

        throw $r39;

     label05:
        if $z0 == 0 goto label08;

        i9 = 0;

     label06:
        $i6 = lengthof $r9;

        if i9 >= $i6 goto label08;

        $r16 = $r9[i9];

        $r17 = interfaceinvoke $r16.<org.apache.http.HeaderElement: java.lang.String getName()>();

        if $r17 == null goto label07;

        $i8 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i8 <= 0 goto label07;

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("chunked");

        if $z3 != 0 goto label07;

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("identity");

        if $z4 != 0 goto label07;

        $r41 = new org.apache.http.ProtocolException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported transfer encoding: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r22);

        throw $r41;

     label07:
        i9 = i9 + 1;

        goto label06;

     label08:
        $i7 = lengthof $r9;

        $r10 = "identity";

        $r11 = interfaceinvoke $r2.<org.apache.http.Header: java.lang.String getValue()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z1 == 0 goto label09;

        return -1L;

     label09:
        if $i7 <= 0 goto label10;

        $r14 = "chunked";

        $i5 = $i7 - 1;

        $r13 = $r9[$i5];

        $r15 = interfaceinvoke $r13.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r15);

        if $z2 == 0 goto label10;

        return -2L;

     label10:
        if $z0 == 0 goto label11;

        $r42 = new org.apache.http.ProtocolException;

        specialinvoke $r42.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Chunk-encoding must be the last one applied");

        throw $r42;

     label11:
        return -1L;

     label12:
        $r3 = interfaceinvoke r0.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Content-Length");

        if $r3 == null goto label21;

        l10 = -1L;

        $r5 = interfaceinvoke r0.<org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>("Content-Length");

        if $z0 == 0 goto label13;

        $i4 = lengthof $r5;

        if $i4 <= 1 goto label13;

        $r43 = new org.apache.http.ProtocolException;

        specialinvoke $r43.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Multiple content length headers");

        throw $r43;

     label13:
        $i2 = lengthof $r5;

        i11 = $i2 - 1;

     label14:
        if i11 < 0 goto label19;

        r6 = $r5[i11];

     label15:
        $r7 = interfaceinvoke r6.<org.apache.http.Header: java.lang.String getValue()>();

        l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r7);

     label16:
        goto label19;

     label17:
        $r24 := @caughtexception;

        if $z0 == 0 goto label18;

        $r45 = new org.apache.http.ProtocolException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        $r28 = interfaceinvoke r6.<org.apache.http.Header: java.lang.String getValue()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r30);

        throw $r45;

     label18:
        $i13 = (int) -1;

        i11 = i11 + $i13;

        goto label14;

     label19:
        $b3 = l10 cmp 0L;

        $i14 = (int) $b3;

        if $i14 < 0 goto label20;

        return l10;

     label20:
        return -1L;

     label21:
        $i0 = r4.<org.apache.http.impl.entity.LaxContentLengthStrategy: int implicitLen>;

        $l1 = (long) $i0;

        return $l1;

        catch org.apache.http.ParseException from label02 to label03 with label04;
        catch java.lang.NumberFormatException from label15 to label16 with label17;
    }
}
