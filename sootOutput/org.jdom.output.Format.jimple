public class org.jdom.output.Format extends java.lang.Object implements java.lang.Cloneable
{
    private static final java.lang.String CVS_ID;
    private static final java.lang.String STANDARD_INDENT;
    private static final java.lang.String STANDARD_LINE_SEPARATOR;
    private static final java.lang.String STANDARD_ENCODING;
    java.lang.String indent;
    java.lang.String lineSeparator;
    java.lang.String encoding;
    boolean omitDeclaration;
    boolean omitEncoding;
    boolean expandEmptyElements;
    boolean ignoreTrAXEscapingPIs;
    org.jdom.output.Format$TextMode mode;
    org.jdom.output.EscapeStrategy escapeStrategy;
    static java.lang.Class class$java$lang$String;

    private void <init>()
    {
        org.jdom.output.Format$TextMode $r1;
        org.jdom.output.Format r0;
        org.jdom.output.Format$DefaultEscapeStrategy $r2;
        java.lang.String $r3;

        r0 := @this: org.jdom.output.Format;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom.output.Format: java.lang.String indent> = null;

        r0.<org.jdom.output.Format: java.lang.String lineSeparator> = "\r\n";

        r0.<org.jdom.output.Format: java.lang.String encoding> = "UTF-8";

        r0.<org.jdom.output.Format: boolean omitDeclaration> = 0;

        r0.<org.jdom.output.Format: boolean omitEncoding> = 0;

        r0.<org.jdom.output.Format: boolean expandEmptyElements> = 0;

        r0.<org.jdom.output.Format: boolean ignoreTrAXEscapingPIs> = 0;

        $r1 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode PRESERVE>;

        r0.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode> = $r1;

        $r2 = new org.jdom.output.Format$DefaultEscapeStrategy;

        $r3 = r0.<org.jdom.output.Format: java.lang.String encoding>;

        specialinvoke $r2.<org.jdom.output.Format$DefaultEscapeStrategy: void <init>(org.jdom.output.Format,java.lang.String)>(r0, $r3);

        r0.<org.jdom.output.Format: org.jdom.output.EscapeStrategy escapeStrategy> = $r2;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    protected java.lang.Object clone()
    {
        org.jdom.output.Format r0, r3;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: org.jdom.output.Format;

        r3 = null;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (org.jdom.output.Format) $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static org.jdom.output.Format getCompactFormat()
    {
        org.jdom.output.Format $r0;
        org.jdom.output.Format$TextMode $r1;

        $r0 = new org.jdom.output.Format;

        specialinvoke $r0.<org.jdom.output.Format: void <init>()>();

        $r1 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode NORMALIZE>;

        virtualinvoke $r0.<org.jdom.output.Format: org.jdom.output.Format setTextMode(org.jdom.output.Format$TextMode)>($r1);

        return $r0;
    }

    public java.lang.String getEncoding()
    {
        org.jdom.output.Format r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.output.Format;

        $r1 = r0.<org.jdom.output.Format: java.lang.String encoding>;

        return $r1;
    }

    public org.jdom.output.EscapeStrategy getEscapeStrategy()
    {
        org.jdom.output.Format r0;
        org.jdom.output.EscapeStrategy $r1;

        r0 := @this: org.jdom.output.Format;

        $r1 = r0.<org.jdom.output.Format: org.jdom.output.EscapeStrategy escapeStrategy>;

        return $r1;
    }

    public boolean getExpandEmptyElements()
    {
        org.jdom.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom.output.Format;

        $z0 = r0.<org.jdom.output.Format: boolean expandEmptyElements>;

        return $z0;
    }

    public boolean getIgnoreTrAXEscapingPIs()
    {
        org.jdom.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom.output.Format;

        $z0 = r0.<org.jdom.output.Format: boolean ignoreTrAXEscapingPIs>;

        return $z0;
    }

    public java.lang.String getIndent()
    {
        org.jdom.output.Format r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.output.Format;

        $r1 = r0.<org.jdom.output.Format: java.lang.String indent>;

        return $r1;
    }

    public java.lang.String getLineSeparator()
    {
        org.jdom.output.Format r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.output.Format;

        $r1 = r0.<org.jdom.output.Format: java.lang.String lineSeparator>;

        return $r1;
    }

    public boolean getOmitDeclaration()
    {
        org.jdom.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom.output.Format;

        $z0 = r0.<org.jdom.output.Format: boolean omitDeclaration>;

        return $z0;
    }

    public boolean getOmitEncoding()
    {
        org.jdom.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom.output.Format;

        $z0 = r0.<org.jdom.output.Format: boolean omitEncoding>;

        return $z0;
    }

    public static org.jdom.output.Format getPrettyFormat()
    {
        org.jdom.output.Format $r0;
        org.jdom.output.Format$TextMode $r1;

        $r0 = new org.jdom.output.Format;

        specialinvoke $r0.<org.jdom.output.Format: void <init>()>();

        virtualinvoke $r0.<org.jdom.output.Format: org.jdom.output.Format setIndent(java.lang.String)>("  ");

        $r1 = <org.jdom.output.Format$TextMode: org.jdom.output.Format$TextMode TRIM>;

        virtualinvoke $r0.<org.jdom.output.Format: org.jdom.output.Format setTextMode(org.jdom.output.Format$TextMode)>($r1);

        return $r0;
    }

    public static org.jdom.output.Format getRawFormat()
    {
        org.jdom.output.Format $r0;

        $r0 = new org.jdom.output.Format;

        specialinvoke $r0.<org.jdom.output.Format: void <init>()>();

        return $r0;
    }

    public org.jdom.output.Format$TextMode getTextMode()
    {
        org.jdom.output.Format r0;
        org.jdom.output.Format$TextMode $r1;

        r0 := @this: org.jdom.output.Format;

        $r1 = r0.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode>;

        return $r1;
    }

    public org.jdom.output.Format setEncoding(java.lang.String)
    {
        org.jdom.output.Format r0;
        java.lang.String r1;
        org.jdom.output.Format$DefaultEscapeStrategy $r2;

        r0 := @this: org.jdom.output.Format;

        r1 := @parameter0: java.lang.String;

        r0.<org.jdom.output.Format: java.lang.String encoding> = r1;

        $r2 = new org.jdom.output.Format$DefaultEscapeStrategy;

        specialinvoke $r2.<org.jdom.output.Format$DefaultEscapeStrategy: void <init>(org.jdom.output.Format,java.lang.String)>(r0, r1);

        r0.<org.jdom.output.Format: org.jdom.output.EscapeStrategy escapeStrategy> = $r2;

        return r0;
    }

    public org.jdom.output.Format setEscapeStrategy(org.jdom.output.EscapeStrategy)
    {
        org.jdom.output.Format r0;
        org.jdom.output.EscapeStrategy r1;

        r0 := @this: org.jdom.output.Format;

        r1 := @parameter0: org.jdom.output.EscapeStrategy;

        r0.<org.jdom.output.Format: org.jdom.output.EscapeStrategy escapeStrategy> = r1;

        return r0;
    }

    public org.jdom.output.Format setExpandEmptyElements(boolean)
    {
        org.jdom.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom.output.Format;

        z0 := @parameter0: boolean;

        r0.<org.jdom.output.Format: boolean expandEmptyElements> = z0;

        return r0;
    }

    public void setIgnoreTrAXEscapingPIs(boolean)
    {
        org.jdom.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom.output.Format;

        z0 := @parameter0: boolean;

        r0.<org.jdom.output.Format: boolean ignoreTrAXEscapingPIs> = z0;

        return;
    }

    public org.jdom.output.Format setIndent(java.lang.String)
    {
        org.jdom.output.Format r1;
        java.lang.String $r0, r2;
        boolean $z0;

        r1 := @this: org.jdom.output.Format;

        r2 := @parameter0: java.lang.String;

        $r0 = "";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        r2 = null;

     label1:
        r1.<org.jdom.output.Format: java.lang.String indent> = r2;

        return r1;
    }

    public org.jdom.output.Format setLineSeparator(java.lang.String)
    {
        org.jdom.output.Format r0;
        java.lang.String r1;

        r0 := @this: org.jdom.output.Format;

        r1 := @parameter0: java.lang.String;

        r0.<org.jdom.output.Format: java.lang.String lineSeparator> = r1;

        return r0;
    }

    public org.jdom.output.Format setOmitDeclaration(boolean)
    {
        org.jdom.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom.output.Format;

        z0 := @parameter0: boolean;

        r0.<org.jdom.output.Format: boolean omitDeclaration> = z0;

        return r0;
    }

    public org.jdom.output.Format setOmitEncoding(boolean)
    {
        org.jdom.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom.output.Format;

        z0 := @parameter0: boolean;

        r0.<org.jdom.output.Format: boolean omitEncoding> = z0;

        return r0;
    }

    public org.jdom.output.Format setTextMode(org.jdom.output.Format$TextMode)
    {
        org.jdom.output.Format r0;
        org.jdom.output.Format$TextMode r1;

        r0 := @this: org.jdom.output.Format;

        r1 := @parameter0: org.jdom.output.Format$TextMode;

        r0.<org.jdom.output.Format: org.jdom.output.Format$TextMode mode> = r1;

        return r0;
    }

    public static void <clinit>()
    {
        <org.jdom.output.Format: java.lang.String STANDARD_ENCODING> = "UTF-8";

        <org.jdom.output.Format: java.lang.String STANDARD_LINE_SEPARATOR> = "\r\n";

        <org.jdom.output.Format: java.lang.String STANDARD_INDENT> = "  ";

        <org.jdom.output.Format: java.lang.String CVS_ID> = "@(#) $RCSfile: Format.java,v $ $Revision: 1.10 $ $Date: 2004/09/07 06:37:20 $ $Name: jdom_1_0 $";

        return;
    }
}
