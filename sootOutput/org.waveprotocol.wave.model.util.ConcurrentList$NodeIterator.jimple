final class org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator extends java.lang.Object implements java.util.Iterator
{
    private org.waveprotocol.wave.model.util.ConcurrentList$Node node;
    private org.waveprotocol.wave.model.util.ConcurrentList$Node lastReturnedNode;
    final org.waveprotocol.wave.model.util.ConcurrentList this$0;

    private void <init>(org.waveprotocol.wave.model.util.ConcurrentList)
    {
        org.waveprotocol.wave.model.util.ConcurrentList r1;
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r2;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator r0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList;

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.ConcurrentList: org.waveprotocol.wave.model.util.ConcurrentList$Node access$000(org.waveprotocol.wave.model.util.ConcurrentList)>(r1);

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node> = $r2;

        return;
    }

    private org.waveprotocol.wave.model.util.ConcurrentList$Node nextNonDeletedNode(org.waveprotocol.wave.model.util.ConcurrentList$Node)
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r1;
        boolean $z0;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator r0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList$Node;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.model.util.ConcurrentList$Node: boolean isDeleted()>();

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next()>();

        goto label1;

     label2:
        return r1;
    }

    public boolean hasNext()
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r1, $r2, $r3;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node nextNonDeletedNode(org.waveprotocol.wave.model.util.ConcurrentList$Node)>($r1);

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r1, $r2, $r3, $r4, $r5, $r6;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator r0;
        java.lang.Object $r7;
        java.util.NoSuchElementException $r8;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node>;

        if $r1 != null goto label1;

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node>;

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node lastReturnedNode> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next()>();

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node nextNonDeletedNode(org.waveprotocol.wave.model.util.ConcurrentList$Node)>($r4);

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node> = $r5;

        $r6 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node lastReturnedNode>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.util.ConcurrentList$Node: java.lang.Object data()>();

        return $r7;
    }

    public void remove()
    {
        org.waveprotocol.wave.model.util.ConcurrentList $r4;
        org.waveprotocol.wave.model.util.ConcurrentList$Node $r1, $r2, $r3;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node lastReturnedNode>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node lastReturnedNode>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.ConcurrentList$Node: boolean isDeleted()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList this$0>;

        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: org.waveprotocol.wave.model.util.ConcurrentList$Node node>;

        staticinvoke <org.waveprotocol.wave.model.util.ConcurrentList: void access$100(org.waveprotocol.wave.model.util.ConcurrentList,org.waveprotocol.wave.model.util.ConcurrentList$Node)>($r4, $r3);

     label1:
        return;
    }

    void <init>(org.waveprotocol.wave.model.util.ConcurrentList, org.waveprotocol.wave.model.util.ConcurrentList$1)
    {
        org.waveprotocol.wave.model.util.ConcurrentList$1 r2;
        org.waveprotocol.wave.model.util.ConcurrentList r1;
        org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator r0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList;

        r2 := @parameter1: org.waveprotocol.wave.model.util.ConcurrentList$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.ConcurrentList$NodeIterator: void <init>(org.waveprotocol.wave.model.util.ConcurrentList)>(r1);

        return;
    }
}
