final class com.mycila.inject.internal.guava.util.concurrent.Futures$2 extends java.lang.Object implements com.mycila.inject.internal.guava.base.Function
{

    void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Exception apply(java.lang.Exception)
    {
        java.lang.AssertionError $r0;
        com.mycila.inject.internal.guava.util.concurrent.Futures$2 r1;
        java.lang.Exception r2;

        r1 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$2;

        r2 := @parameter0: java.lang.Exception;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r0;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$2 r0;
        java.lang.Object r1;
        java.lang.Exception $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Exception) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$2: java.lang.Exception apply(java.lang.Exception)>($r2);

        return $r3;
    }
}
