public final class org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.document.util.Property HANDLERS;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerJsHandler(org.waveprotocol.wave.client.editor.content.ContentElement, com.google.gwt.dom.client.Element, java.lang.String, org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener)
    {
        org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet $r8, r10;
        org.waveprotocol.wave.model.util.IdentitySet $r6;
        org.waveprotocol.wave.client.common.util.DomHelper$HandlerReference $r7;
        org.waveprotocol.wave.model.document.util.Property $r1, $r9;
        org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener r5;
        com.google.gwt.dom.client.Element r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        java.lang.String r4;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter1: com.google.gwt.dom.client.Element;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener;

        $r1 = <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper: org.waveprotocol.wave.model.document.util.Property HANDLERS>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        r10 = (org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet) $r2;

        if r10 != null goto label1;

        $r8 = new org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet;

        specialinvoke $r8.<org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet: void <init>()>();

        r10 = $r8;

        $r9 = <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper: org.waveprotocol.wave.model.document.util.Property HANDLERS>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r9, $r8);

     label1:
        $r6 = r10.<org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet: org.waveprotocol.wave.model.util.IdentitySet references>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.client.common.util.DomHelper$HandlerReference registerEventHandler(com.google.gwt.dom.client.Element,java.lang.String,org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener)>(r3, r4, r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.IdentitySet: void add(java.lang.Object)>($r7);

        return;
    }

    public static void removeJsHandlers(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet r3;
        org.waveprotocol.wave.model.document.util.Property $r1, $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper: org.waveprotocol.wave.model.document.util.Property HANDLERS>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        r3 = (org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet) $r2;

        if r3 == null goto label1;

        virtualinvoke r3.<org.waveprotocol.wave.client.common.util.DomHelper$HandlerReferenceSet: void unregister()>();

        $r4 = <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper: org.waveprotocol.wave.model.document.util.Property HANDLERS>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r4, null);

     label1:
        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.util.Property$MutableProperty $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$MutableProperty mutable(java.lang.String)>("handlers");

        <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl$Helper: org.waveprotocol.wave.model.document.util.Property HANDLERS> = $r0;

        return;
    }
}
