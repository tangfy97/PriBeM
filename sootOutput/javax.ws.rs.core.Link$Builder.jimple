public class javax.ws.rs.core.Link$Builder extends java.lang.Object
{
    private javax.ws.rs.core.Link link;
    private javax.ws.rs.core.UriBuilder uriBuilder;

    public void <init>()
    {
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.Link $r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new javax.ws.rs.core.Link;

        specialinvoke $r1.<javax.ws.rs.core.Link: void <init>()>();

        r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link> = $r1;

        return;
    }

    public javax.ws.rs.core.Link$Builder uri(java.net.URI)
    {
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.UriBuilder $r2;
        java.net.URI r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.net.URI;

        $r2 = staticinvoke <javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder fromUri(java.net.URI)>(r1);

        r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.UriBuilder uriBuilder> = $r2;

        return r0;
    }

    public javax.ws.rs.core.Link$Builder uri(java.lang.String) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.UriBuilder $r2;
        java.lang.String r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder fromUri(java.lang.String)>(r1);

        r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.UriBuilder uriBuilder> = $r2;

        return r0;
    }

    public javax.ws.rs.core.Link$Builder rel(java.lang.String)
    {
        javax.ws.rs.core.Link$Builder r0;
        java.lang.String r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder param(java.lang.String,java.lang.String)>("rel", r1);

        return r0;
    }

    public javax.ws.rs.core.Link$Builder title(java.lang.String)
    {
        javax.ws.rs.core.Link$Builder r0;
        java.lang.String r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder param(java.lang.String,java.lang.String)>("title", r1);

        return r0;
    }

    public javax.ws.rs.core.Link$Builder type(java.lang.String)
    {
        javax.ws.rs.core.Link$Builder r0;
        java.lang.String r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder param(java.lang.String,java.lang.String)>("type", r1);

        return r0;
    }

    public javax.ws.rs.core.Link$Builder param(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r5;
        javax.ws.rs.core.Link$Builder r3;
        java.lang.String r0, r2;
        java.lang.IllegalArgumentException $r1;
        javax.ws.rs.core.Link $r4;

        r3 := @this: javax.ws.rs.core.Link$Builder;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Link parameter name or value is null");

        throw $r1;

     label2:
        $r4 = r3.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link>;

        $r5 = staticinvoke <javax.ws.rs.core.Link: java.util.Map access$200(javax.ws.rs.core.Link)>($r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return r3;
    }

    public javax.ws.rs.core.Link build()
    {
        java.lang.Object[] $r1;
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.UriBuilder $r2;
        java.net.URI $r4;
        javax.ws.rs.core.Link $r3, $r5;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        $r3 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link>;

        $r2 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.UriBuilder uriBuilder>;

        $r1 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.UriBuilder: java.net.URI build(java.lang.Object[])>($r1);

        staticinvoke <javax.ws.rs.core.Link: java.net.URI access$302(javax.ws.rs.core.Link,java.net.URI)>($r3, $r4);

        $r5 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link>;

        return $r5;
    }

    public transient javax.ws.rs.core.Link build(java.lang.Object[]) throws javax.ws.rs.core.UriBuilderException
    {
        java.lang.Object[] r1;
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.UriBuilder $r2;
        java.net.URI $r4;
        javax.ws.rs.core.Link $r3, $r5;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.lang.Object[];

        $r3 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link>;

        $r2 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.UriBuilder uriBuilder>;

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.UriBuilder: java.net.URI build(java.lang.Object[])>(r1);

        staticinvoke <javax.ws.rs.core.Link: java.net.URI access$302(javax.ws.rs.core.Link,java.net.URI)>($r3, $r4);

        $r5 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link>;

        return $r5;
    }

    private javax.ws.rs.core.Link$Builder path(java.lang.reflect.Method)
    {
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.UriBuilder $r2;
        java.lang.reflect.Method r1;

        r0 := @this: javax.ws.rs.core.Link$Builder;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.UriBuilder uriBuilder>;

        virtualinvoke $r2.<javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder path(java.lang.reflect.Method)>(r1);

        return r0;
    }

    static javax.ws.rs.core.Link access$000(javax.ws.rs.core.Link$Builder)
    {
        javax.ws.rs.core.Link$Builder r0;
        javax.ws.rs.core.Link $r1;

        r0 := @parameter0: javax.ws.rs.core.Link$Builder;

        $r1 = r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link link>;

        return $r1;
    }

    static javax.ws.rs.core.Link$Builder access$100(javax.ws.rs.core.Link$Builder, java.lang.reflect.Method)
    {
        javax.ws.rs.core.Link$Builder r0, $r2;
        java.lang.reflect.Method r1;

        r0 := @parameter0: javax.ws.rs.core.Link$Builder;

        r1 := @parameter1: java.lang.reflect.Method;

        $r2 = specialinvoke r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder path(java.lang.reflect.Method)>(r1);

        return $r2;
    }
}
