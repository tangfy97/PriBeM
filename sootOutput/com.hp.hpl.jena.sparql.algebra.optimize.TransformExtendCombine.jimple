public class com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine r1;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r5;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3, $r4, $r6;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r0);

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>($r4, $r5);

        return $r6;

     label1:
        $r3 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r0);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r2;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine r1;
        com.hp.hpl.jena.sparql.core.VarExprList $r5;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3, $r4, $r6;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformExtendCombine;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r0);

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op extend(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>($r4, $r5);

        return $r6;

     label1:
        $r3 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r0);

        return $r3;
    }
}
