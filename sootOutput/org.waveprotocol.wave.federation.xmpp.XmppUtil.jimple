public class org.waveprotocol.wave.federation.xmpp.XmppUtil extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicLong idSequenceNo;
    private static final java.util.Random random;
    public static final org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec;
    public static java.lang.String fakeUniqueId;
    static java.util.concurrent.Callable fakeIdGenerator;

    private void <init>()
    {
        org.waveprotocol.wave.federation.xmpp.XmppUtil r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List toSafeElementList(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        return r0;
    }

    public static void protocolSignerInfoToXml(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo, org.dom4j.Element)
    {
        java.util.Iterator $r7;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r2;
        com.google.protobuf.ByteString r9;
        java.util.List $r6;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm $r4;
        org.dom4j.Element r0, $r1, $r10;
        java.lang.Object $r8;
        java.lang.String $r3, $r5, $r11;
        boolean $z0;

        r2 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        r0 := @parameter1: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("signature", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: java.lang.String getDomain()>();

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("domain", $r3);

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm getHashAlgorithm()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm: java.lang.String name()>();

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("algorithm", $r5);

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: java.util.List getCertificateList()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.google.protobuf.ByteString) $r8;

        $r10 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("certificate");

        $r11 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>(r9);

        interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r11);

        goto label1;

     label2:
        return;
    }

    public static org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo xmlToProtocolSignerInfo(org.dom4j.Element) throws org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r9;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm $r3;
        java.lang.String $r1, $r2, $r5, $r12;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder $r4;
        boolean $z0;
        java.util.Iterator $r8;
        java.lang.IllegalArgumentException $r14;
        com.google.protobuf.ByteString $r13;
        java.util.List $r6, $r7;
        org.dom4j.Element r0, r11;
        java.lang.Object $r10;
        org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType $r15;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("algorithm");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r3 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm valueOf(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = new org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType;

        specialinvoke $r15.<org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r14);

        throw $r15;

     label4:
        $r4 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder newBuilder()>();

        virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder setHashAlgorithm(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm)>($r3);

        $r5 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("domain");

        virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder setDomain(java.lang.String)>($r5);

        $r6 = interfaceinvoke r0.<org.dom4j.Element: java.util.List elements(java.lang.String)>("certificate");

        $r7 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.List toSafeElementList(java.util.List)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.dom4j.Element) $r10;

        $r12 = interfaceinvoke r11.<org.dom4j.Element: java.lang.String getText()>();

        $r13 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>($r12);

        virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder addCertificate(com.google.protobuf.ByteString)>($r13);

        goto label5;

     label6:
        $r9 = virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo build()>();

        return $r9;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static org.xmpp.packet.Message createResponseMessage(org.xmpp.packet.Message)
    {
        org.xmpp.packet.Message $r0, r1;
        java.lang.String $r2;
        org.xmpp.packet.JID $r3, $r4;

        r1 := @parameter0: org.xmpp.packet.Message;

        $r0 = new org.xmpp.packet.Message;

        specialinvoke $r0.<org.xmpp.packet.Message: void <init>()>();

        $r2 = virtualinvoke r1.<org.xmpp.packet.Message: java.lang.String getID()>();

        virtualinvoke $r0.<org.xmpp.packet.Message: void setID(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<org.xmpp.packet.Message: org.xmpp.packet.JID getFrom()>();

        virtualinvoke $r0.<org.xmpp.packet.Message: void setTo(org.xmpp.packet.JID)>($r3);

        $r4 = virtualinvoke r1.<org.xmpp.packet.Message: org.xmpp.packet.JID getTo()>();

        virtualinvoke $r0.<org.xmpp.packet.Message: void setFrom(org.xmpp.packet.JID)>($r4);

        return $r0;
    }

    public static org.xmpp.packet.Packet createResponsePacket(org.xmpp.packet.Packet)
    {
        java.lang.IllegalArgumentException $r1;
        org.xmpp.packet.Message $r9, $r10;
        org.xmpp.packet.Packet r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.Class $r4;
        java.lang.String $r6;
        org.xmpp.packet.IQ $r7, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: org.xmpp.packet.Packet;

        $z0 = r0 instanceof org.xmpp.packet.Message;

        if $z0 == 0 goto label1;

        $r9 = (org.xmpp.packet.Message) r0;

        $r10 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.xmpp.packet.Message createResponseMessage(org.xmpp.packet.Message)>($r9);

        return $r10;

     label1:
        $z1 = r0 instanceof org.xmpp.packet.IQ;

        if $z1 == 0 goto label2;

        $r7 = (org.xmpp.packet.IQ) r0;

        $r8 = staticinvoke <org.xmpp.packet.IQ: org.xmpp.packet.IQ createResultIQ(org.xmpp.packet.IQ)>($r7);

        return $r8;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t respond to unsupported packet type: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static java.lang.String generateUniqueId()
    {
        byte[] $r7;
        java.util.concurrent.Callable $r0, $r10;
        java.util.Random $r3;
        long $l0, $l1;
        java.nio.ByteBuffer $r2, $r4, $r6;
        java.lang.String $r1, $r8, $r9, $r12;
        java.lang.RuntimeException $r14;
        java.lang.Exception $r13;
        java.util.concurrent.atomic.AtomicLong $r5;
        java.lang.Object $r11;

        $r0 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.concurrent.Callable fakeIdGenerator>;

        if $r0 == null goto label4;

     label1:
        $r10 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.concurrent.Callable fakeIdGenerator>;

        $r11 = interfaceinvoke $r10.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r12 = (java.lang.String) $r11;

     label2:
        return $r12;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        $r1 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String fakeUniqueId>;

        if $r1 == null goto label5;

        $r9 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String fakeUniqueId>;

        return $r9;

     label5:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        $r3 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.Random random>;

        $l0 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l0);

        $r5 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.concurrent.atomic.AtomicLong idSequenceNo>;

        $l1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l1);

        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: byte[] array()>();

        $r8 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(byte[])>($r7);

        return $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.security.SecureRandom $r1;
        java.util.concurrent.atomic.AtomicLong $r0;
        org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec $r3;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r2;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.concurrent.atomic.AtomicLong idSequenceNo> = $r0;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.Random random> = $r1;

        $r2 = new org.waveprotocol.wave.model.id.IdURIEncoderDecoder;

        $r3 = new org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec;

        specialinvoke $r3.<org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec: void <init>()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: void <init>(org.waveprotocol.wave.model.id.URIEncoderDecoder$PercentEncoderDecoder)>($r3);

        <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec> = $r2;

        <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String fakeUniqueId> = null;

        <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.concurrent.Callable fakeIdGenerator> = null;

        return;
    }
}
