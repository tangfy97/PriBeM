public class org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream
{
    private final java.io.InputStream originalInput;
    private final org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge;
    private static final byte[] CAFE_DOOD;
    private static final int SIG_LENGTH;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy $r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r2 = <org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.Pack200Strategy IN_MEMORY>;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream,org.apache.commons.compress.compressors.pack200.Pack200Strategy)>(r1, $r2);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream,java.io.File,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(r1, null, r2, null);

        return;
    }

    public void <init>(java.io.InputStream, java.util.Map) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy $r3;
        java.util.Map r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.Map;

        $r3 = <org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.Pack200Strategy IN_MEMORY>;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(r1, $r3, r2);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        java.util.Map r3;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream,java.io.File,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(r1, null, r2, r3);

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy $r2;
        java.io.File r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.File;

        $r2 = <org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.Pack200Strategy IN_MEMORY>;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.File,org.apache.commons.compress.compressors.pack200.Pack200Strategy)>(r1, $r2);

        return;
    }

    public void <init>(java.io.File, org.apache.commons.compress.compressors.pack200.Pack200Strategy) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        java.io.File r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream,java.io.File,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(null, r1, r2, null);

        return;
    }

    public void <init>(java.io.File, java.util.Map) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy $r3;
        java.util.Map r2;
        java.io.File r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Map;

        $r3 = <org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.Pack200Strategy IN_MEMORY>;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.File,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(r1, $r3, r2);

        return;
    }

    public void <init>(java.io.File, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        java.util.Map r3;
        java.io.File r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream,java.io.File,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(null, r1, r2, r3);

        return;
    }

    private void <init>(java.io.InputStream, java.io.File, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r3, $r5;
        java.io.File r8;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        java.util.Map r7;
        java.util.jar.Pack200$Unpacker $r6;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream$1 $r9;
        java.util.jar.JarOutputStream $r4;
        java.util.SortedMap $r10;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.io.File;

        r2 := @parameter2: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        r7 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: java.io.InputStream originalInput> = r1;

        $r3 = virtualinvoke r2.<org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.StreamBridge newStreamBridge()>();

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge> = $r3;

        $r4 = new java.util.jar.JarOutputStream;

        $r5 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        specialinvoke $r4.<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>($r5);

        $r6 = staticinvoke <java.util.jar.Pack200: java.util.jar.Pack200$Unpacker newUnpacker()>();

        if r7 == null goto label1;

        $r10 = interfaceinvoke $r6.<java.util.jar.Pack200$Unpacker: java.util.SortedMap properties()>();

        interfaceinvoke $r10.<java.util.SortedMap: void putAll(java.util.Map)>(r7);

     label1:
        if r8 != null goto label2;

        $r9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream$1;

        specialinvoke $r9.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream$1: void <init>(org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,java.io.InputStream)>(r0, r1);

        interfaceinvoke $r6.<java.util.jar.Pack200$Unpacker: void unpack(java.io.InputStream,java.util.jar.JarOutputStream)>($r9, $r4);

        goto label3;

     label2:
        interfaceinvoke $r6.<java.util.jar.Pack200$Unpacker: void unpack(java.io.File,java.util.jar.JarOutputStream)>(r8, $r4);

     label3:
        virtualinvoke $r4.<java.util.jar.JarOutputStream: void close()>();

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        int $i0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        byte[] r3;
        int $i0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r3 := @parameter0: byte[];

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r3);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        byte[] r3;
        int i0, i1, $i2;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r3, i0, i1);

        return $i2;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        int $i0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        $i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

        return $i0;
    }

    public boolean markSupported()
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.IOException $r3;
        java.io.InputStream $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

     label1:
        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        $z0 = virtualinvoke $r2.<java.io.InputStream: boolean markSupported()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void mark(int)
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        int i0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.IOException $r3;
        java.lang.RuntimeException $r4;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        virtualinvoke $r2.<java.io.InputStream: void mark(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        long l0, $l1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        $l1 = virtualinvoke $r2.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r4;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream r0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        java.io.InputStream $r2, $r3, $r5, $r6;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

     label1:
        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: void stop()>();

     label2:
        $r2 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: java.io.InputStream originalInput>;

        if $r2 == null goto label6;

        $r3 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: java.io.InputStream originalInput>;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: java.io.InputStream originalInput>;

        if $r5 == null goto label5;

        $r6 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: java.io.InputStream originalInput>;

        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0, $r1;
        byte $b3, $b4;
        int i0, $i1, $i2, i5, $i6, $i7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: int SIG_LENGTH>;

        if i0 >= $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $i2 = <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: int SIG_LENGTH>;

        if i5 >= $i2 goto label4;

        $b4 = r0[i5];

        $r1 = <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: byte[] CAFE_DOOD>;

        $b3 = $r1[i5];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    static void <clinit>()
    {
        int $i0;
        byte[] $r0, $r1;

        $r0 = newarray (byte)[4];

        $r0[0] = -54;

        $r0[1] = -2;

        $r0[2] = -48;

        $r0[3] = 13;

        <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: byte[] CAFE_DOOD> = $r0;

        $r1 = <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: byte[] CAFE_DOOD>;

        $i0 = lengthof $r1;

        <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: int SIG_LENGTH> = $i0;

        return;
    }
}
