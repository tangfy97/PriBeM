public class org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter extends org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter
{
    private static final java.lang.String JPEG_NATIVE_FORMAT;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: void <init>(java.lang.String)>("image/jpeg");

        return;
    }

    protected javax.imageio.metadata.IIOMetadata updateMetadata(javax.imageio.metadata.IIOMetadata, org.apache.batik.ext.awt.image.spi.ImageWriterParams)
    {
        javax.imageio.metadata.IIOInvalidTreeException $r15;
        javax.imageio.metadata.IIOMetadata $r2, r23;
        javax.imageio.metadata.IIOMetadataNode r4, $r5, $r8, $r13, $r14, r24, r25;
        java.lang.Integer $r7, $r9, $r11;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter r22;
        java.lang.StringBuffer $r17, $r18, $r20;
        org.w3c.dom.Node $r3;
        java.lang.String $r0, $r1, $r10, $r12, $r19, $r21;
        boolean $z0;
        java.lang.RuntimeException $r16;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams r6;

        r22 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter;

        r23 := @parameter0: javax.imageio.metadata.IIOMetadata;

        r6 := @parameter1: org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        $r0 = "javax_imageio_jpeg_image_1.0";

        $r1 = virtualinvoke r23.<javax.imageio.metadata.IIOMetadata: java.lang.String getNativeMetadataFormatName()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label6;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter: javax.imageio.metadata.IIOMetadata addAdobeTransform(javax.imageio.metadata.IIOMetadata)>(r23);

        r23 = $r2;

        $r3 = virtualinvoke $r2.<javax.imageio.metadata.IIOMetadata: org.w3c.dom.Node getAsTree(java.lang.String)>("javax_imageio_jpeg_image_1.0");

        r4 = (javax.imageio.metadata.IIOMetadataNode) $r3;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>(r4, "JPEGvariety");

        r24 = $r5;

        if $r5 != null goto label1;

        $r14 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r14.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("JPEGvariety");

        r24 = $r14;

        virtualinvoke r4.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

     label1:
        $r7 = virtualinvoke r6.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.Integer getResolution()>();

        if $r7 == null goto label3;

        $r8 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>(r24, "app0JFIF");

        r25 = $r8;

        if $r8 != null goto label2;

        $r13 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r13.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("app0JFIF");

        r25 = $r13;

        virtualinvoke r24.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

     label2:
        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("majorVersion", null);

        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("minorVersion", null);

        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("resUnits", "1");

        $r9 = virtualinvoke r6.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.Integer getResolution()>();

        $r10 = virtualinvoke $r9.<java.lang.Integer: java.lang.String toString()>();

        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("Xdensity", $r10);

        $r11 = virtualinvoke r6.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.Integer getResolution()>();

        $r12 = virtualinvoke $r11.<java.lang.Integer: java.lang.String toString()>();

        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("Ydensity", $r12);

        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("thumbWidth", null);

        virtualinvoke r25.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("thumbHeight", null);

     label3:
        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadata: void setFromTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_jpeg_image_1.0", r4);

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot update image metadata: ");

        $r19 = virtualinvoke $r15.<javax.imageio.metadata.IIOInvalidTreeException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r16;

     label6:
        return r23;

        catch javax.imageio.metadata.IIOInvalidTreeException from label3 to label4 with label5;
    }

    private static javax.imageio.metadata.IIOMetadata addAdobeTransform(javax.imageio.metadata.IIOMetadata)
    {
        javax.imageio.metadata.IIOInvalidTreeException $r7;
        javax.imageio.metadata.IIOMetadata r0;
        javax.imageio.metadata.IIOMetadataNode r2, $r3, $r4, $r5;
        java.lang.RuntimeException $r6, $r8;
        java.lang.StringBuffer $r9, $r10, $r12;
        org.w3c.dom.Node $r1;
        java.lang.String $r11, $r13;

        r0 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r1 = virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: org.w3c.dom.Node getAsTree(java.lang.String)>("javax_imageio_jpeg_image_1.0");

        r2 = (javax.imageio.metadata.IIOMetadataNode) $r1;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>(r2, "markerSequence");

        if $r3 != null goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid metadata!");

        throw $r6;

     label1:
        $r4 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>($r3, "app14Adobe");

        if $r4 != null goto label2;

        $r5 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r5.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("app14Adobe");

        virtualinvoke $r5.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("transform", "1");

        virtualinvoke $r5.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("version", "101");

        virtualinvoke $r5.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("flags0", "0");

        virtualinvoke $r5.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("flags1", "0");

        virtualinvoke $r3.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        goto label3;

     label2:
        virtualinvoke $r4.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("transform", "1");

     label3:
        virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: void setFromTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_jpeg_image_1.0", r2);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot update image metadata: ");

        $r11 = virtualinvoke $r7.<javax.imageio.metadata.IIOInvalidTreeException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

     label6:
        return r0;

        catch javax.imageio.metadata.IIOInvalidTreeException from label3 to label4 with label5;
    }

    protected javax.imageio.ImageWriteParam getDefaultWriteParam(javax.imageio.ImageWriter, java.awt.image.RenderedImage, org.apache.batik.ext.awt.image.spi.ImageWriterParams)
    {
        javax.imageio.plugins.jpeg.JPEGImageWriteParam $r0;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter r3;
        java.util.Locale $r2;
        javax.imageio.ImageWriter r1;
        java.awt.image.RenderedImage r4;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams r5;

        r3 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter;

        r1 := @parameter0: javax.imageio.ImageWriter;

        r4 := @parameter1: java.awt.image.RenderedImage;

        r5 := @parameter2: org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        $r0 = new javax.imageio.plugins.jpeg.JPEGImageWriteParam;

        $r2 = virtualinvoke r1.<javax.imageio.ImageWriter: java.util.Locale getLocale()>();

        specialinvoke $r0.<javax.imageio.plugins.jpeg.JPEGImageWriteParam: void <init>(java.util.Locale)>($r2);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGImageWriter: java.lang.String JPEG_NATIVE_FORMAT> = "javax_imageio_jpeg_image_1.0";

        return;
    }
}
