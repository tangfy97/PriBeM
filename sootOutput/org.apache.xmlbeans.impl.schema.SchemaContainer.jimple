class org.apache.xmlbeans.impl.schema.SchemaContainer extends java.lang.Object
{
    private java.lang.String _namespace;
    private org.apache.xmlbeans.SchemaTypeSystem _typeSystem;
    boolean _immutable;
    private java.util.List _globalElements;
    private java.util.List _globalAttributes;
    private java.util.List _modelGroups;
    private java.util.List _redefinedModelGroups;
    private java.util.List _attributeGroups;
    private java.util.List _redefinedAttributeGroups;
    private java.util.List _globalTypes;
    private java.util.List _redefinedGlobalTypes;
    private java.util.List _documentTypes;
    private java.util.List _attributeTypes;
    private java.util.List _identityConstraints;
    private java.util.List _annotations;

    void <init>(java.lang.String)
    {
        java.util.ArrayList $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        java.lang.String r13;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r13 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalElements> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalAttributes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _modelGroups> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedModelGroups> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _attributeGroups> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedAttributeGroups> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalTypes> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedGlobalTypes> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _documentTypes> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _attributeTypes> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _identityConstraints> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _annotations> = $r12;

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.lang.String _namespace> = r13;

        return;
    }

    java.lang.String getNamespace()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.lang.String _namespace>;

        return $r1;
    }

    synchronized org.apache.xmlbeans.SchemaTypeSystem getTypeSystem()
    {
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaTypeSystem $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: org.apache.xmlbeans.SchemaTypeSystem _typeSystem>;

        return $r1;
    }

    synchronized void setTypeSystem(org.apache.xmlbeans.SchemaTypeSystem)
    {
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaTypeSystem r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaTypeSystem;

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: org.apache.xmlbeans.SchemaTypeSystem _typeSystem> = r1;

        return;
    }

    synchronized void setImmutable()
    {
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: boolean _immutable> = 1;

        return;
    }

    synchronized void unsetImmutable()
    {
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: boolean _immutable> = 0;

        return;
    }

    private void check_immutable()
    {
        java.lang.IllegalStateException $r1;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $z0 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: boolean _immutable>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot add components to immutable SchemaContainer");

        throw $r1;

     label1:
        return;
    }

    void addGlobalElement(org.apache.xmlbeans.SchemaGlobalElement$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.SchemaGlobalElement$Ref r1;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaGlobalElement$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalElements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List globalElements()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalElements>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addGlobalAttribute(org.apache.xmlbeans.SchemaGlobalAttribute$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaGlobalAttribute$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaGlobalAttribute$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalAttributes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List globalAttributes()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalAttributes>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addModelGroup(org.apache.xmlbeans.SchemaModelGroup$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaModelGroup$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaModelGroup$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _modelGroups>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List modelGroups()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _modelGroups>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addRedefinedModelGroup(org.apache.xmlbeans.SchemaModelGroup$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaModelGroup$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaModelGroup$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedModelGroups>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List redefinedModelGroups()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedModelGroups>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addAttributeGroup(org.apache.xmlbeans.SchemaAttributeGroup$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaAttributeGroup$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaAttributeGroup$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _attributeGroups>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List attributeGroups()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _attributeGroups>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addRedefinedAttributeGroup(org.apache.xmlbeans.SchemaAttributeGroup$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaAttributeGroup$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaAttributeGroup$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedAttributeGroups>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List redefinedAttributeGroups()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedAttributeGroups>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addGlobalType(org.apache.xmlbeans.SchemaType$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalTypes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List globalTypes()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _globalTypes>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addRedefinedType(org.apache.xmlbeans.SchemaType$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedGlobalTypes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List redefinedGlobalTypes()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _redefinedGlobalTypes>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addDocumentType(org.apache.xmlbeans.SchemaType$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _documentTypes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List documentTypes()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _documentTypes>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addAttributeType(org.apache.xmlbeans.SchemaType$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaType$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _attributeTypes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List attributeTypes()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _attributeTypes>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addIdentityConstraint(org.apache.xmlbeans.SchemaIdentityConstraint$Ref)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaIdentityConstraint$Ref r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaIdentityConstraint$Ref;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _identityConstraints>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List identityConstraints()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _identityConstraints>;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List getComponentList(java.util.List)>($r1);

        return $r2;
    }

    void addAnnotation(org.apache.xmlbeans.SchemaAnnotation)
    {
        java.util.List $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;
        org.apache.xmlbeans.SchemaAnnotation r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: org.apache.xmlbeans.SchemaAnnotation;

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: void check_immutable()>();

        $r2 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _annotations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    java.util.List annotations()
    {
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaContainer: java.util.List _annotations>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private java.util.List getComponentList(java.util.List)
    {
        org.apache.xmlbeans.SchemaComponent$Ref $r4;
        java.util.ArrayList $r0;
        java.util.List r1, $r2;
        org.apache.xmlbeans.impl.schema.SchemaContainer r6;
        int $i0, i1;
        java.lang.Object $r3;
        org.apache.xmlbeans.SchemaComponent $r5;

        r6 := @this: org.apache.xmlbeans.impl.schema.SchemaContainer;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.apache.xmlbeans.SchemaComponent$Ref) $r3;

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.SchemaComponent$Ref: org.apache.xmlbeans.SchemaComponent getComponent()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r2;
    }
}
