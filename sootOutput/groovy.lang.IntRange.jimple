public class groovy.lang.IntRange extends java.util.AbstractList implements groovy.lang.Range
{
    private int 'from';
    private int 'to';
    private boolean reverse;

    public void <init>(int, int)
    {
        groovy.lang.IntRange r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: groovy.lang.IntRange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if i0 <= i1 goto label1;

        r0.<groovy.lang.IntRange: int 'from'> = i1;

        r0.<groovy.lang.IntRange: int 'to'> = i0;

        r0.<groovy.lang.IntRange: boolean reverse> = 1;

        goto label2;

     label1:
        r0.<groovy.lang.IntRange: int 'from'> = i0;

        r0.<groovy.lang.IntRange: int 'to'> = i1;

     label2:
        $i3 = r0.<groovy.lang.IntRange: int 'to'>;

        $i2 = r0.<groovy.lang.IntRange: int 'from'>;

        $i4 = $i3 - $i2;

        if $i4 < 2147483647 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("range must have no more than 2147483647 elements");

        throw $r1;

     label3:
        return;
    }

    protected void <init>(int, int, boolean)
    {
        groovy.lang.IntRange r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;
        boolean z0;

        r0 := @this: groovy.lang.IntRange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if i0 <= i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'from\' must be less than or equal to \'to\'");

        throw $r1;

     label1:
        r0.<groovy.lang.IntRange: int 'from'> = i0;

        r0.<groovy.lang.IntRange: int 'to'> = i1;

        r0.<groovy.lang.IntRange: boolean reverse> = z0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        groovy.lang.IntRange r1, $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: groovy.lang.IntRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof groovy.lang.IntRange;

        if $z0 == 0 goto label1;

        $r2 = (groovy.lang.IntRange) r0;

        $z1 = virtualinvoke r1.<groovy.lang.IntRange: boolean equals(groovy.lang.IntRange)>($r2);

        goto label2;

     label1:
        $z1 = specialinvoke r1.<java.util.AbstractList: boolean equals(java.lang.Object)>(r0);

     label2:
        return $z1;
    }

    public boolean equals(groovy.lang.IntRange)
    {
        groovy.lang.IntRange r0, r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;

        r1 := @this: groovy.lang.IntRange;

        r0 := @parameter0: groovy.lang.IntRange;

        if r0 == null goto label1;

        $z1 = r1.<groovy.lang.IntRange: boolean reverse>;

        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        if $z1 != $z0 goto label1;

        $i1 = r1.<groovy.lang.IntRange: int 'from'>;

        $i0 = r0.<groovy.lang.IntRange: int 'from'>;

        if $i1 != $i0 goto label1;

        $i3 = r1.<groovy.lang.IntRange: int 'to'>;

        $i2 = r0.<groovy.lang.IntRange: int 'to'>;

        if $i3 != $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.lang.Comparable getFrom()
    {
        int $i0;
        java.lang.Integer $r0;
        groovy.lang.IntRange r1;

        r1 := @this: groovy.lang.IntRange;

        $r0 = new java.lang.Integer;

        $i0 = r1.<groovy.lang.IntRange: int 'from'>;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);

        return $r0;
    }

    public java.lang.Comparable getTo()
    {
        int $i0;
        java.lang.Integer $r0;
        groovy.lang.IntRange r1;

        r1 := @this: groovy.lang.IntRange;

        $r0 = new java.lang.Integer;

        $i0 = r1.<groovy.lang.IntRange: int 'to'>;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);

        return $r0;
    }

    public int getFromInt()
    {
        int $i0;
        groovy.lang.IntRange r0;

        r0 := @this: groovy.lang.IntRange;

        $i0 = r0.<groovy.lang.IntRange: int 'from'>;

        return $i0;
    }

    public int getToInt()
    {
        int $i0;
        groovy.lang.IntRange r0;

        r0 := @this: groovy.lang.IntRange;

        $i0 = r0.<groovy.lang.IntRange: int 'to'>;

        return $i0;
    }

    public boolean isReverse()
    {
        groovy.lang.IntRange r0;
        boolean $z0;

        r0 := @this: groovy.lang.IntRange;

        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        return $z0;
    }

    public boolean containsWithinBounds(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.lang.IntRange r0;
        boolean $z0;

        r0 := @this: groovy.lang.IntRange;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<groovy.lang.IntRange: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(int)
    {
        java.lang.IndexOutOfBoundsException $r2, $r9;
        java.lang.Integer $r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r8, $r14;
        boolean $z0;
        groovy.lang.IntRange r0;

        r0 := @this: groovy.lang.IntRange;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r9 = new java.lang.IndexOutOfBoundsException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should not be negative");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label1:
        $i1 = virtualinvoke r0.<groovy.lang.IntRange: int size()>();

        if i0 < $i1 goto label2;

        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" too big for range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label2:
        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        if $z0 == 0 goto label3;

        $i3 = r0.<groovy.lang.IntRange: int 'to'>;

        $i4 = $i3 - i0;

        goto label4;

     label3:
        $i2 = r0.<groovy.lang.IntRange: int 'from'>;

        $i4 = i0 + $i2;

     label4:
        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i4);

        return $r1;
    }

    public int size()
    {
        groovy.lang.IntRange r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: groovy.lang.IntRange;

        $i1 = r0.<groovy.lang.IntRange: int 'to'>;

        $i0 = r0.<groovy.lang.IntRange: int 'from'>;

        $i2 = $i1 - $i0;

        $i3 = $i2 + 1;

        return $i3;
    }

    public java.util.Iterator iterator()
    {
        groovy.lang.IntRange$IntRangeIterator $r0;
        groovy.lang.IntRange r1;

        r1 := @this: groovy.lang.IntRange;

        $r0 = new groovy.lang.IntRange$IntRangeIterator;

        specialinvoke $r0.<groovy.lang.IntRange$IntRangeIterator: void <init>(groovy.lang.IntRange,groovy.lang.IntRange$1)>(r1, null);

        return $r0;
    }

    public java.util.List subList(int, int)
    {
        java.lang.IndexOutOfBoundsException $r12, $r17;
        java.lang.Integer $r3;
        boolean $z0;
        groovy.lang.EmptyRange $r2;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r11, $r16, $r21;
        groovy.lang.IntRange r0, $r1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: groovy.lang.IntRange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r17 = new java.lang.IndexOutOfBoundsException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fromIndex = ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label1:
        $i2 = virtualinvoke r0.<groovy.lang.IntRange: int size()>();

        if i1 <= $i2 goto label2;

        $r12 = new java.lang.IndexOutOfBoundsException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("toIndex = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        if i0 <= i1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fromIndex(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") > toIndex(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        if i0 != i1 goto label4;

        $r2 = new groovy.lang.EmptyRange;

        $r3 = new java.lang.Integer;

        $i8 = r0.<groovy.lang.IntRange: int 'from'>;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i8);

        specialinvoke $r2.<groovy.lang.EmptyRange: void <init>(java.lang.Comparable)>($r3);

        return $r2;

     label4:
        $r1 = new groovy.lang.IntRange;

        $i3 = r0.<groovy.lang.IntRange: int 'from'>;

        $i7 = i0 + $i3;

        $i4 = r0.<groovy.lang.IntRange: int 'from'>;

        $i5 = i1 + $i4;

        $i6 = $i5 - 1;

        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        specialinvoke $r1.<groovy.lang.IntRange: void <init>(int,int,boolean)>($i7, $i6, $z0);

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r11;
        boolean $z0;
        groovy.lang.IntRange r0;

        r0 := @this: groovy.lang.IntRange;

        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $i2 = r0.<groovy.lang.IntRange: int 'to'>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $i3 = r0.<groovy.lang.IntRange: int 'from'>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $i0 = r0.<groovy.lang.IntRange: int 'from'>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $i1 = r0.<groovy.lang.IntRange: int 'to'>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return $r11;
    }

    public java.lang.String inspect()
    {
        java.lang.String $r1;
        groovy.lang.IntRange r0;

        r0 := @this: groovy.lang.IntRange;

        $r1 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.String toString()>();

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        long $l1, $l4;
        java.lang.Integer r4;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8;
        java.math.BigInteger $r2, $r3, r5;
        boolean $z0, $z1, $z2, $z3;
        groovy.lang.IntRange r1;
        java.lang.Object r0;

        r1 := @this: groovy.lang.IntRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 == 0 goto label3;

        r4 = (java.lang.Integer) r0;

        $i6 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i7 = r1.<groovy.lang.IntRange: int 'from'>;

        if $i6 < $i7 goto label1;

        $i8 = r1.<groovy.lang.IntRange: int 'to'>;

        if $i6 > $i8 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $z1 = r0 instanceof java.math.BigInteger;

        if $z1 == 0 goto label6;

        r5 = (java.math.BigInteger) r0;

        $i0 = r1.<groovy.lang.IntRange: int 'from'>;

        $l1 = (long) $i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $i2 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i2 < 0 goto label4;

        $i3 = r1.<groovy.lang.IntRange: int 'to'>;

        $l4 = (long) $i3;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $i5 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i5 > 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;

     label6:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        groovy.lang.IntRange r1, r2;
        java.util.Collection r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;

        r1 := @this: groovy.lang.IntRange;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof groovy.lang.IntRange;

        if $z0 == 0 goto label3;

        r2 = (groovy.lang.IntRange) r0;

        $i1 = r1.<groovy.lang.IntRange: int 'from'>;

        $i0 = r2.<groovy.lang.IntRange: int 'from'>;

        if $i1 > $i0 goto label1;

        $i3 = r2.<groovy.lang.IntRange: int 'to'>;

        $i2 = r1.<groovy.lang.IntRange: int 'to'>;

        if $i3 > $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $z1 = specialinvoke r1.<java.util.AbstractList: boolean containsAll(java.util.Collection)>(r0);

        return $z1;
    }

    public void step(int, groovy.lang.Closure)
    {
        groovy.lang.IntRange r0;
        groovy.lang.Closure r1;
        java.lang.Integer $r2, $r3;
        int $i0, $i1, i2, i3, i4;
        boolean $z0;

        r0 := @this: groovy.lang.IntRange;

        i2 := @parameter0: int;

        r1 := @parameter1: groovy.lang.Closure;

        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        if $z0 == 0 goto label1;

        i2 = neg i2;

     label1:
        if i2 < 0 goto label4;

        i3 = r0.<groovy.lang.IntRange: int 'from'>;

     label2:
        $i1 = r0.<groovy.lang.IntRange: int 'to'>;

        if i3 > $i1 goto label3;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i3);

        virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r3);

        i3 = i3 + i2;

        goto label2;

     label3:
        goto label6;

     label4:
        i4 = r0.<groovy.lang.IntRange: int 'to'>;

     label5:
        $i0 = r0.<groovy.lang.IntRange: int 'from'>;

        if i4 < $i0 goto label6;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i4);

        virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        i4 = i4 + i2;

        goto label5;

     label6:
        return;
    }

    public java.util.List step(int)
    {
        org.codehaus.groovy.runtime.IteratorClosureAdapter $r0;
        java.util.List $r2;
        groovy.lang.IntRange r1;
        int i0;

        r1 := @this: groovy.lang.IntRange;

        i0 := @parameter0: int;

        $r0 = new org.codehaus.groovy.runtime.IteratorClosureAdapter;

        specialinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: void <init>(java.lang.Object)>(r1);

        virtualinvoke r1.<groovy.lang.IntRange: void step(int,groovy.lang.Closure)>(i0, $r0);

        $r2 = virtualinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: java.util.List asList()>();

        return $r2;
    }

    static boolean access$000(groovy.lang.IntRange)
    {
        groovy.lang.IntRange r0;
        boolean $z0;

        r0 := @parameter0: groovy.lang.IntRange;

        $z0 = r0.<groovy.lang.IntRange: boolean reverse>;

        return $z0;
    }

    static int access$100(groovy.lang.IntRange)
    {
        int $i0;
        groovy.lang.IntRange r0;

        r0 := @parameter0: groovy.lang.IntRange;

        $i0 = r0.<groovy.lang.IntRange: int 'to'>;

        return $i0;
    }

    static int access$200(groovy.lang.IntRange)
    {
        int $i0;
        groovy.lang.IntRange r0;

        r0 := @parameter0: groovy.lang.IntRange;

        $i0 = r0.<groovy.lang.IntRange: int 'from'>;

        return $i0;
    }
}
