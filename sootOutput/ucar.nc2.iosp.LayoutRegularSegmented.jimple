public class ucar.nc2.iosp.LayoutRegularSegmented extends java.lang.Object implements ucar.nc2.iosp.Layout
{
    private long total;
    private long done;
    private long innerNelems;
    private long startPos;
    private long recSize;
    private int elemSize;
    private ucar.nc2.iosp.IndexChunker chunker;
    private ucar.nc2.iosp.IndexChunker$Chunk chunkOuter;
    private ucar.nc2.iosp.IndexChunker$Chunk chunkInner;
    private boolean debugNext;
    private int needInner;
    private int doneInner;
    static final boolean $assertionsDisabled;

    public void <init>(long, int, long, int[], ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r4;
        ucar.nc2.iosp.IndexChunker $r5, $r15;
        long l0, l2, $l3, $l5, $l7, $l11;
        java.lang.AssertionError $r11, $r12, $r13, $r14;
        ucar.nc2.iosp.LayoutRegularSegmented r0;
        byte $b9, $b10;
        int[] r3;
        int i1, $i4, $i6, $i8, $i12, $i13;
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.iosp.IndexChunker$Chunk $r10;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r3 := @parameter3: int[];

        r4 := @parameter4: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = new ucar.nc2.iosp.IndexChunker$Chunk;

        specialinvoke $r10.<ucar.nc2.iosp.IndexChunker$Chunk: void <init>(long,int,long)>(0L, 0, 0L);

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner> = $r10;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: boolean debugNext> = 0;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int needInner> = 0;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner> = 0;

        $z0 = <ucar.nc2.iosp.LayoutRegularSegmented: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b10 = l0 cmp 0L;

        $i12 = (int) $b10;

        if $i12 > 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $z1 = <ucar.nc2.iosp.LayoutRegularSegmented: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i1 > 0 goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        $z2 = <ucar.nc2.iosp.LayoutRegularSegmented: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $b9 = l2 cmp 0L;

        $i13 = (int) $b9;

        if $i13 > 0 goto label3;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label3:
        $z3 = <ucar.nc2.iosp.LayoutRegularSegmented: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $i8 = lengthof r3;

        if $i8 > 0 goto label4;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label4:
        r0.<ucar.nc2.iosp.LayoutRegularSegmented: long startPos> = l0;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int elemSize> = i1;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: long recSize> = l2;

        $r15 = new ucar.nc2.iosp.IndexChunker;

        specialinvoke $r15.<ucar.nc2.iosp.IndexChunker: void <init>(int[],ucar.ma2.Section)>(r3, r4);

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker chunker> = $r15;

        $r5 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker chunker>;

        $l3 = virtualinvoke $r5.<ucar.nc2.iosp.IndexChunker: long getTotalNelems()>();

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: long total> = $l3;

        $i4 = r3[0];

        if $i4 != 0 goto label5;

        $l11 = 0L;

        goto label6;

     label5:
        $l5 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>(r3);

        $i6 = r3[0];

        $l7 = (long) $i6;

        $l11 = $l5 / $l7;

     label6:
        r0.<ucar.nc2.iosp.LayoutRegularSegmented: long innerNelems> = $l11;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: long done> = 0L;

        return;
    }

    public long getTotalNelems()
    {
        long $l0;
        ucar.nc2.iosp.LayoutRegularSegmented r0;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        $l0 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long total>;

        return $l0;
    }

    public int getElemSize()
    {
        int $i0;
        ucar.nc2.iosp.LayoutRegularSegmented r0;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        $i0 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int elemSize>;

        return $i0;
    }

    public boolean hasNext()
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        ucar.nc2.iosp.LayoutRegularSegmented r0;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        $l1 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long done>;

        $l0 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long total>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private long getFilePos(long)
    {
        long l0, $l1, l2, $l3, l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12;
        ucar.nc2.iosp.LayoutRegularSegmented r0;
        int $i8;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        l0 := @parameter0: long;

        $l1 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long innerNelems>;

        l2 = l0 / $l1;

        $l3 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long innerNelems>;

        l4 = l0 % $l3;

        $l7 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long startPos>;

        $l5 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long recSize>;

        $l6 = l2 * $l5;

        $l11 = $l7 + $l6;

        $i8 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int elemSize>;

        $l9 = (long) $i8;

        $l10 = l4 * $l9;

        $l12 = $l11 + $l10;

        return $l12;
    }

    private int getMaxElem(long)
    {
        int $i5;
        long l0, $l1, $l2, $l3, $l4;
        ucar.nc2.iosp.LayoutRegularSegmented r0;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        l0 := @parameter0: long;

        $l3 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long innerNelems>;

        $l1 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long innerNelems>;

        $l2 = l0 % $l1;

        $l4 = $l3 - $l2;

        $i5 = (int) $l4;

        return $i5;
    }

    public ucar.nc2.iosp.Layout$Chunk next()
    {
        long $l1, $l4, $l6, $l7;
        ucar.nc2.iosp.LayoutRegularSegmented r0;
        int $i0, $i2, $i3, $i5, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r6;
        boolean $z0;
        java.io.PrintStream $r3;
        ucar.nc2.iosp.IndexChunker$Chunk $r1, r7;
        java.lang.StringBuilder $r2, $r4, $r5;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        $i0 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int needInner>;

        if $i0 <= 0 goto label1;

        r7 = specialinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk nextInner(boolean,int)>(0, 0);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk nextOuter()>();

        r7 = $r1;

        $l1 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i2 = specialinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: int getMaxElem(long)>($l1);

        $i3 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        if $i2 >= $i3 goto label2;

        r7 = specialinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk nextInner(boolean,int)>(1, $i2);

     label2:
        $l4 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: long done>;

        $i5 = virtualinvoke r7.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        $l6 = (long) $i5;

        $l7 = $l4 + $l6;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: long done> = $l7;

        $i8 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner>;

        $i9 = virtualinvoke r7.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        $i10 = $i8 + $i9;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner> = $i10;

        $i11 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int needInner>;

        $i12 = virtualinvoke r7.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        $i13 = $i11 - $i12;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int needInner> = $i13;

        $z0 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: boolean debugNext>;

        if $z0 == 0 goto label3;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" next chunk: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label3:
        return r7;
    }

    private ucar.nc2.iosp.IndexChunker$Chunk nextInner(boolean, int)
    {
        ucar.nc2.iosp.LayoutRegularSegmented r0;
        boolean z0;
        ucar.nc2.iosp.IndexChunker$Chunk $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        long $l1, $l3, $l4, $l8, $l10, $l11, $l12, $l14, $l15, $l16, $l17;
        int $i0, $i2, $i5, $i6, $i7, $i9, $i13, $i18, i19;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        z0 := @parameter0: boolean;

        i19 := @parameter1: int;

        if z0 == 0 goto label1;

        $r10 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        virtualinvoke $r10.<ucar.nc2.iosp.IndexChunker$Chunk: void setNelems(int)>(i19);

        $r12 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r11 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l17 = virtualinvoke $r11.<ucar.nc2.iosp.IndexChunker$Chunk: long getDestElem()>();

        virtualinvoke $r12.<ucar.nc2.iosp.IndexChunker$Chunk: void setDestElem(long)>($l17);

        $r13 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $i18 = virtualinvoke $r13.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int needInner> = $i18;

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner> = 0;

        goto label2;

     label1:
        $r2 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r1 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $i0 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker$Chunk: int getNelems()>();

        virtualinvoke $r2.<ucar.nc2.iosp.IndexChunker$Chunk: void incrDestElem(int)>($i0);

        $r3 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l1 = virtualinvoke $r3.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i2 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner>;

        $l3 = (long) $i2;

        $l4 = $l1 + $l3;

        $i5 = specialinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: int getMaxElem(long)>($l4);

        $i6 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int needInner>;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        $r4 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        virtualinvoke $r4.<ucar.nc2.iosp.IndexChunker$Chunk: void setNelems(int)>($i7);

     label2:
        $r6 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r5 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l8 = virtualinvoke $r5.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i9 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner>;

        $l10 = (long) $i9;

        $l11 = $l8 + $l10;

        virtualinvoke $r6.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcElem(long)>($l11);

        $r8 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        $r7 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l12 = virtualinvoke $r7.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i13 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: int doneInner>;

        $l14 = (long) $i13;

        $l15 = $l12 + $l14;

        $l16 = specialinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: long getFilePos(long)>($l15);

        virtualinvoke $r8.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcPos(long)>($l16);

        $r9 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkInner>;

        return $r9;
    }

    public ucar.nc2.iosp.IndexChunker$Chunk nextOuter()
    {
        ucar.nc2.iosp.IndexChunker$Chunk $r2, $r3, $r4, $r5;
        ucar.nc2.iosp.IndexChunker $r1;
        long $l0, $l1;
        ucar.nc2.iosp.LayoutRegularSegmented r0;

        r0 := @this: ucar.nc2.iosp.LayoutRegularSegmented;

        $r1 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker chunker>;

        $r2 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk next()>();

        r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter> = $r2;

        $r4 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $r3 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        $l0 = virtualinvoke $r3.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $l1 = specialinvoke r0.<ucar.nc2.iosp.LayoutRegularSegmented: long getFilePos(long)>($l0);

        virtualinvoke $r4.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcPos(long)>($l1);

        $r5 = r0.<ucar.nc2.iosp.LayoutRegularSegmented: ucar.nc2.iosp.IndexChunker$Chunk chunkOuter>;

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/LayoutRegularSegmented;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.LayoutRegularSegmented: boolean $assertionsDisabled> = $z1;

        return;
    }
}
