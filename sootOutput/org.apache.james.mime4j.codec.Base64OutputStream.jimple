public class org.apache.james.mime4j.codec.Base64OutputStream extends java.io.FilterOutputStream
{
    private static final int DEFAULT_LINE_LENGTH;
    private static final byte[] CRLF_SEPARATOR;
    static final byte[] BASE64_TABLE;
    private static final byte BASE64_PAD;
    private static final java.util.Set BASE64_CHARS;
    private static final int MASK_6BITS;
    private static final int ENCODED_BUFFER_SIZE;
    private final byte[] singleByte;
    private final int lineLength;
    private final byte[] lineSeparator;
    private boolean closed;
    private final byte[] encoded;
    private int position;
    private int data;
    private int modulus;
    private int linePosition;
    static final boolean $assertionsDisabled;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        byte[] $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>(r1, 76, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        java.io.OutputStream r1;
        byte[] $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int i0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>(r1, i0, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, int, byte[])
    {
        java.io.OutputStream r1;
        byte[] $r2, r3, $r4, $r5, $r6;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.lang.IllegalArgumentException $r7, $r8;
        int i0, $i1, $i2;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r3 := @parameter2: byte[];

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        $r2 = newarray (byte)[1];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte> = $r2;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        if i0 >= 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label2:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void checkLineSeparator(byte[])>(r3);

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength> = i0;

        $i1 = lengthof r3;

        $r4 = newarray (byte)[$i1];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator> = $r4;

        $r5 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i2 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r5, 0, $i2);

        $r6 = newarray (byte)[2048];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded> = $r6;

        return;
    }

    public final void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte $b1;
        int i0;
        java.io.IOException $r3;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r3;

     label1:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r2, 0, 1);

        return;
    }

    public final void write(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0, $i1;
        java.io.IOException $r3;
        java.lang.NullPointerException $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r1 := @parameter0: byte[];

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        $i0 = lengthof r1;

        if $i0 != 0 goto label3;

        return;

     label3:
        $i1 = lengthof r1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>(r1, 0, $i1);

        return;
    }

    public final void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.lang.IndexOutOfBoundsException $r4;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.io.IOException $r3;
        java.lang.NullPointerException $r2;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label4:
        if i1 != 0 goto label5;

        return;

     label5:
        $i4 = i0 + i1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>(r1, i0, $i4);

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.IOException $r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed> = 1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void close0()>();

        return;
    }

    private void write0(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte $b3, $b15, $b21, $b27, $b32, b41;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        short $s4, $s50;
        int i0, i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, i45, i46, $i47, $i48, $i49, $i51;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i45 = i0;

     label1:
        if i45 >= i1 goto label7;

        $i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i5 = $i2 << 8;

        $b3 = r1[i45];

        $s50 = (short) $b3;

        $s4 = $s50 & 255;

        $i51 = (int) $s4;

        $i6 = $i5 | $i51;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data> = $i6;

        $i7 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        $i8 = $i7 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = $i8;

        if $i8 != 3 goto label6;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = 0;

        $i9 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i9 <= 0 goto label4;

        $i36 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i35 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i36 < $i35 goto label4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        $r10 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i38 = lengthof $r10;

        $i37 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i40 = $i38 - $i37;

        $r11 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i39 = lengthof $r11;

        if $i40 >= $i39 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label2:
        $r13 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i44 = lengthof $r13;

        i46 = 0;

     label3:
        if i46 >= $i44 goto label4;

        b41 = $r13[i46];

        $r12 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i42 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i43 = $i42 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i43;

        $r12[$i42] = b41;

        i46 = i46 + 1;

        goto label3;

     label4:
        $r14 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i47 = lengthof $r14;

        $i48 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i49 = $i47 - $i48;

        if $i49 >= 4 goto label5;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label5:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i10 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i11 = $i10 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i11;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i12 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i13 = $i12 >> 18;

        $i14 = $i13 & 63;

        $b15 = $r3[$i14];

        $r2[$i10] = $b15;

        $r4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i16 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i17 = $i16 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i17;

        $r5 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i18 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i19 = $i18 >> 12;

        $i20 = $i19 & 63;

        $b21 = $r5[$i20];

        $r4[$i16] = $b21;

        $r6 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i22 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i23 = $i22 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i23;

        $r7 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i24 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i25 = $i24 >> 6;

        $i26 = $i25 & 63;

        $b27 = $r7[$i26];

        $r6[$i22] = $b27;

        $r8 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i28 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i29 = $i28 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i29;

        $r9 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i30 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i31 = $i30 & 63;

        $b32 = $r9[$i31];

        $r8[$i28] = $b32;

        $i33 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i34 = $i33 + 4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = $i34;

     label6:
        i45 = i45 + 1;

        goto label1;

     label7:
        return;
    }

    private void flush0() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0, $i1;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: java.io.OutputStream out>;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i1);

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = 0;

     label1:
        return;
    }

    private void close0() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i0 == 0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writePad()>();

     label1:
        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i1 <= 0 goto label2;

        $i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        if $i2 <= 0 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>();

     label2:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

        return;
    }

    private void writePad() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        byte $b7, $b13, $b19, $b28, $b34;
        boolean $z0;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.lang.AssertionError $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i0 <= 0 goto label1;

        $i40 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i39 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i40 < $i39 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>();

     label1:
        $r15 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i41 = lengthof $r15;

        $i42 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i43 = $i41 - $i42;

        if $i43 >= 4 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label2:
        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i1 != 1 goto label3;

        $r9 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i23 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i24 = $i23 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i24;

        $r10 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i25 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i26 = $i25 >> 2;

        $i27 = $i26 & 63;

        $b28 = $r10[$i27];

        $r9[$i23] = $b28;

        $r11 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i29 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i30 = $i29 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i30;

        $r12 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i31 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i32 = $i31 << 4;

        $i33 = $i32 & 63;

        $b34 = $r12[$i33];

        $r11[$i29] = $b34;

        $r13 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i35 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i36 = $i35 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i36;

        $r13[$i35] = 61;

        $r14 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i37 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i38 = $i37 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i38;

        $r14[$i37] = 61;

        goto label5;

     label3:
        $z0 = <org.apache.james.mime4j.codec.Base64OutputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $i22 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i22 == 2 goto label4;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i3;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i5 = $i4 >> 10;

        $i6 = $i5 & 63;

        $b7 = $r2[$i6];

        $r1[$i2] = $b7;

        $r3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i8 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i9 = $i8 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i9;

        $r4 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i10 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i11 = $i10 >> 4;

        $i12 = $i11 & 63;

        $b13 = $r4[$i12];

        $r3[$i8] = $b13;

        $r5 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i14 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i15 = $i14 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i15;

        $r6 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i16 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i17 = $i16 << 2;

        $i18 = $i17 & 63;

        $b19 = $r6[$i18];

        $r5[$i14] = $b19;

        $r7 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i20 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i21 = $i20 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i21;

        $r7[$i20] = 61;

     label5:
        $i44 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i45 = $i44 + 4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = $i45;

        return;
    }

    private void writeLineSeparator() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte b4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, i8;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i3 = $i1 - $i0;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i2 = lengthof $r2;

        if $i3 >= $i2 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label1:
        $r4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i7 = lengthof $r4;

        i8 = 0;

     label2:
        if i8 >= $i7 goto label3;

        b4 = $r4[i8];

        $r3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i5 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i6 = $i5 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i6;

        $r3[$i5] = b4;

        i8 = i8 + 1;

        goto label2;

     label3:
        return;
    }

    private void checkLineSeparator(byte[])
    {
        byte[] r0;
        short $s3, $s6;
        byte b2;
        int $i0, i1, i5;
        java.lang.String $r8;
        java.lang.Byte $r2;
        boolean $z0;
        org.apache.james.mime4j.codec.Base64OutputStream r10;
        java.util.Set $r1;
        char $c4;
        java.lang.IllegalArgumentException $r11, $r13;
        java.lang.StringBuilder $r5, $r6, $r7, $r12;

        r10 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 <= 2048 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("line separator length exceeds 2048");

        throw $r11;

     label1:
        i1 = lengthof r0;

        i5 = 0;

     label2:
        if i5 >= i1 goto label4;

        b2 = r0[i5];

        $r1 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b2);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line separator must not contain base64 character \'");

        $s6 = (short) b2;

        $s3 = $s6 & 255;

        $c4 = (char) $s3;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return;
    }

    static void <clinit>()
    {
        byte[] $r1, $r2, $r8;
        java.util.Set $r4, $r6;
        java.util.HashSet $r3;
        byte b0;
        int $i1, i2;
        java.lang.Class $r0;
        java.lang.Byte $r5, $r7;
        boolean $z0, $z1;

        <org.apache.james.mime4j.codec.Base64OutputStream: int ENCODED_BUFFER_SIZE> = 2048;

        <org.apache.james.mime4j.codec.Base64OutputStream: int MASK_6BITS> = 63;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte BASE64_PAD> = 61;

        <org.apache.james.mime4j.codec.Base64OutputStream: int DEFAULT_LINE_LENGTH> = 76;

        $r0 = class "Lorg/apache/james/mime4j/codec/Base64OutputStream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.james.mime4j.codec.Base64OutputStream: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (byte)[2];

        $r1[0] = 13;

        $r1[1] = 10;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR> = $r1;

        $r2 = newarray (byte)[64];

        $r2[0] = 65;

        $r2[1] = 66;

        $r2[2] = 67;

        $r2[3] = 68;

        $r2[4] = 69;

        $r2[5] = 70;

        $r2[6] = 71;

        $r2[7] = 72;

        $r2[8] = 73;

        $r2[9] = 74;

        $r2[10] = 75;

        $r2[11] = 76;

        $r2[12] = 77;

        $r2[13] = 78;

        $r2[14] = 79;

        $r2[15] = 80;

        $r2[16] = 81;

        $r2[17] = 82;

        $r2[18] = 83;

        $r2[19] = 84;

        $r2[20] = 85;

        $r2[21] = 86;

        $r2[22] = 87;

        $r2[23] = 88;

        $r2[24] = 89;

        $r2[25] = 90;

        $r2[26] = 97;

        $r2[27] = 98;

        $r2[28] = 99;

        $r2[29] = 100;

        $r2[30] = 101;

        $r2[31] = 102;

        $r2[32] = 103;

        $r2[33] = 104;

        $r2[34] = 105;

        $r2[35] = 106;

        $r2[36] = 107;

        $r2[37] = 108;

        $r2[38] = 109;

        $r2[39] = 110;

        $r2[40] = 111;

        $r2[41] = 112;

        $r2[42] = 113;

        $r2[43] = 114;

        $r2[44] = 115;

        $r2[45] = 116;

        $r2[46] = 117;

        $r2[47] = 118;

        $r2[48] = 119;

        $r2[49] = 120;

        $r2[50] = 121;

        $r2[51] = 122;

        $r2[52] = 48;

        $r2[53] = 49;

        $r2[54] = 50;

        $r2[55] = 51;

        $r2[56] = 52;

        $r2[57] = 53;

        $r2[58] = 54;

        $r2[59] = 55;

        $r2[60] = 56;

        $r2[61] = 57;

        $r2[62] = 43;

        $r2[63] = 47;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS> = $r3;

        $r8 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = lengthof $r8;

        i2 = 0;

     label3:
        if i2 >= $i1 goto label4;

        b0 = $r8[i2];

        $r6 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label3;

     label4:
        $r4 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(61);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        return;
    }
}
