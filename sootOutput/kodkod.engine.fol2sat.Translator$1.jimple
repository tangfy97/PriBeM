final class kodkod.engine.fol2sat.Translator$1 extends kodkod.ast.visitor.AbstractReplacer
{
    final kodkod.engine.fol2sat.Translator this$0;
    private final java.util.Set val$truePreds;

    void <init>(kodkod.engine.fol2sat.Translator, java.util.Set, java.util.Set)
    {
        kodkod.engine.fol2sat.Translator r1;
        java.util.Set r2, $r3;
        kodkod.engine.fol2sat.Translator$1 r0;

        r0 := @this: kodkod.engine.fol2sat.Translator$1;

        r1 := @parameter0: kodkod.engine.fol2sat.Translator;

        $r3 := @parameter1: java.util.Set;

        r2 := @parameter2: java.util.Set;

        r0.<kodkod.engine.fol2sat.Translator$1: kodkod.engine.fol2sat.Translator this$0> = r1;

        r0.<kodkod.engine.fol2sat.Translator$1: java.util.Set val$truePreds> = r2;

        specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: void <init>(java.util.Set)>($r3);

        return;
    }

    public kodkod.ast.Formula visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.Formula r3, $r5, $r7, $r9;
        java.util.Set $r4;
        kodkod.ast.Node $r2, $r6, $r8;
        kodkod.ast.RelationPredicate r1;
        kodkod.engine.fol2sat.Translator$1 r0;
        boolean $z0;

        r0 := @this: kodkod.engine.fol2sat.Translator$1;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.Translator$1: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.Formula) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = r0.<kodkod.engine.fol2sat.Translator$1: java.util.Set val$truePreds>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r7 = <kodkod.ast.Formula: kodkod.ast.Formula TRUE>;

        $r8 = virtualinvoke r0.<kodkod.engine.fol2sat.Translator$1: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r7);

        $r9 = (kodkod.ast.Formula) $r8;

        goto label3;

     label2:
        $r5 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Formula toConstraints()>();

        $r6 = virtualinvoke r0.<kodkod.engine.fol2sat.Translator$1: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r5);

        $r9 = (kodkod.ast.Formula) $r6;

     label3:
        return $r9;
    }
}
