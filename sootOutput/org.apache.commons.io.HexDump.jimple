public class org.apache.commons.io.HexDump extends java.lang.Object
{
    public static final java.lang.String EOL;
    private static final char[] _hexcodes;
    private static final int[] _shifts;

    public void <init>()
    {
        org.apache.commons.io.HexDump r0;

        r0 := @this: org.apache.commons.io.HexDump;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dump(byte[], long, java.io.OutputStream, int) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException
    {
        byte[] r5, $r13;
        byte $b9, $b11, $b13, $b16;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r10, $r15, $r18;
        long l3, $l4, $l7, l17;
        int i0, $i1, $i2, $i5, $i6, $i8, $i10, $i12, $i15, i18, i19, i20, i21, $i22, $i23;
        java.lang.String $r7, $r11, $r12;
        java.io.OutputStream r8;
        char $c14;
        java.lang.ArrayIndexOutOfBoundsException $r16;
        java.lang.IllegalArgumentException $r17;

        r5 := @parameter0: byte[];

        l3 := @parameter1: long;

        r8 := @parameter2: java.io.OutputStream;

        i0 := @parameter3: int;

        if i0 < 0 goto label01;

        $i2 = lengthof r5;

        if i0 < $i2 goto label02;

     label01:
        $r16 = new java.lang.ArrayIndexOutOfBoundsException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal index: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into array of length ");

        $i1 = lengthof r5;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label02:
        if r8 != null goto label03;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot write to nullstream");

        throw $r17;

     label03:
        $l4 = (long) i0;

        l17 = l3 + $l4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(int)>(74);

        i18 = i0;

     label04:
        $i5 = lengthof r5;

        if i18 >= $i5 goto label14;

        $i6 = lengthof r5;

        i19 = $i6 - i18;

        if i19 <= 16 goto label05;

        i19 = 16;

     label05:
        $r10 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,long)>($r18, l17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i20 = 0;

     label06:
        if i20 >= 16 goto label09;

        if i20 >= i19 goto label07;

        $i15 = i20 + i18;

        $b16 = r5[$i15];

        staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,byte)>($r18, $b16);

        goto label08;

     label07:
        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

     label08:
        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i20 = i20 + 1;

        goto label06;

     label09:
        i21 = 0;

     label10:
        if i21 >= i19 goto label13;

        $i8 = i21 + i18;

        $b9 = r5[$i8];

        $i22 = (int) $b9;

        if $i22 < 32 goto label11;

        $i10 = i21 + i18;

        $b11 = r5[$i10];

        $i23 = (int) $b11;

        if $i23 >= 127 goto label11;

        $i12 = i21 + i18;

        $b13 = r5[$i12];

        $c14 = (char) $b13;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

        goto label12;

     label11:
        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label12:
        i21 = i21 + 1;

        goto label10;

     label13:
        $r11 = <org.apache.commons.io.HexDump: java.lang.String EOL>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r13);

        virtualinvoke r8.<java.io.OutputStream: void flush()>();

        virtualinvoke $r18.<java.lang.StringBuilder: void setLength(int)>(0);

        $l7 = (long) i19;

        l17 = l17 + $l7;

        i18 = i18 + 16;

        goto label04;

     label14:
        return;
    }

    private static java.lang.StringBuilder dump(java.lang.StringBuilder, long)
    {
        long l0, $l2;
        char $c5;
        int[] $r1;
        int $i1, $i3, $i4, i6;
        char[] $r2;
        java.lang.StringBuilder r0;

        r0 := @parameter0: java.lang.StringBuilder;

        l0 := @parameter1: long;

        i6 = 0;

     label1:
        if i6 >= 8 goto label2;

        $r2 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r1 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i1 = $r1[i6];

        $l2 = l0 >> $i1;

        $i3 = (int) $l2;

        $i4 = $i3 & 15;

        $c5 = $r2[$i4];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return r0;
    }

    private static java.lang.StringBuilder dump(java.lang.StringBuilder, byte)
    {
        char $c5;
        byte b0;
        int[] $r1;
        int $i1, $i2, $i3, $i4, i6, $i7;
        char[] $r2;
        java.lang.StringBuilder r0;

        r0 := @parameter0: java.lang.StringBuilder;

        b0 := @parameter1: byte;

        i6 = 0;

     label1:
        if i6 >= 2 goto label2;

        $r2 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r1 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i1 = i6 + 6;

        $i2 = $r1[$i1];

        $i7 = (int) b0;

        $i3 = $i7 >> $i2;

        $i4 = $i3 & 15;

        $c5 = $r2[$i4];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return r0;
    }

    static void <clinit>()
    {
        char[] $r1;
        java.lang.String $r0;
        int[] $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.apache.commons.io.HexDump: java.lang.String EOL> = $r0;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <org.apache.commons.io.HexDump: char[] _hexcodes> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 28;

        $r2[1] = 24;

        $r2[2] = 20;

        $r2[3] = 16;

        $r2[4] = 12;

        $r2[5] = 8;

        $r2[6] = 4;

        $r2[7] = 0;

        <org.apache.commons.io.HexDump: int[] _shifts> = $r2;

        return;
    }
}
