public class org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel
{

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getDebugString()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.List getReconnectVersions()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        return null;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation receive()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        return null;
    }

    public transient void send(org.waveprotocol.wave.model.operation.wave.WaveletOperation[])
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation[];

        return;
    }

    public void setListener(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeOperationChannel;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener;

        return;
    }
}
