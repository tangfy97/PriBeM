public final class org.apache.lucene.search.FieldComparator$IntComparator extends org.apache.lucene.search.FieldComparator$NumericComparator
{
    private final int[] values;
    private final org.apache.lucene.search.FieldCache$IntParser parser;
    private org.apache.lucene.search.FieldCache$Ints currentReaderValues;
    private int bottom;

    void <init>(int, java.lang.String, org.apache.lucene.search.FieldCache$Parser, java.lang.Integer)
    {
        int[] $r3;
        int i0;
        java.lang.String r1;
        java.lang.Integer r2;
        org.apache.lucene.search.FieldCache$Parser r4;
        org.apache.lucene.search.FieldComparator$IntComparator r0;
        org.apache.lucene.search.FieldCache$IntParser $r5;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: org.apache.lucene.search.FieldCache$Parser;

        r2 := @parameter3: java.lang.Integer;

        specialinvoke r0.<org.apache.lucene.search.FieldComparator$NumericComparator: void <init>(java.lang.String,java.lang.Number)>(r1, r2);

        $r3 = newarray (int)[i0];

        r0.<org.apache.lucene.search.FieldComparator$IntComparator: int[] values> = $r3;

        $r5 = (org.apache.lucene.search.FieldCache$IntParser) r4;

        r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.search.FieldCache$IntParser parser> = $r5;

        return;
    }

    public int compare(int, int)
    {
        int[] $r1, $r2;
        int i0, i1, i2, i3, $i5;
        org.apache.lucene.search.FieldComparator$IntComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int[] values>;

        i1 = $r1[i0];

        $r2 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int[] values>;

        i3 = $r2[i2];

        if i1 <= i3 goto label1;

        return 1;

     label1:
        if i1 >= i3 goto label2;

        $i5 = (int) -1;

        return $i5;

     label2:
        return 0;
    }

    public int compareBottom(int)
    {
        java.lang.Integer $r5;
        int i0, $i1, $i2, i3, $i4, $i6;
        org.apache.lucene.search.FieldCache$Ints $r1;
        java.lang.Number $r4;
        org.apache.lucene.util.Bits $r2, $r3;
        org.apache.lucene.search.FieldComparator$IntComparator r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.search.FieldCache$Ints currentReaderValues>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.search.FieldCache$Ints: int get(int)>(i0);

        i3 = $i1;

        $r2 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.util.Bits docsWithField>;

        if $r2 == null goto label1;

        if $i1 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.util.Bits docsWithField>;

        $z0 = interfaceinvoke $r3.<org.apache.lucene.util.Bits: boolean get(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: java.lang.Number missingValue>;

        $r5 = (java.lang.Integer) $r4;

        i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label1:
        $i4 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int bottom>;

        if $i4 <= i3 goto label2;

        return 1;

     label2:
        $i2 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int bottom>;

        if $i2 >= i3 goto label3;

        $i6 = (int) -1;

        return $i6;

     label3:
        return 0;
    }

    public void copy(int, int)
    {
        java.lang.Integer $r5;
        int[] $r6;
        int i0, $i1, i2, i3;
        org.apache.lucene.search.FieldCache$Ints $r1;
        java.lang.Number $r4;
        org.apache.lucene.util.Bits $r2, $r3;
        org.apache.lucene.search.FieldComparator$IntComparator r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.search.FieldCache$Ints currentReaderValues>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.search.FieldCache$Ints: int get(int)>(i0);

        i3 = $i1;

        $r2 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.util.Bits docsWithField>;

        if $r2 == null goto label1;

        if $i1 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.util.Bits docsWithField>;

        $z0 = interfaceinvoke $r3.<org.apache.lucene.util.Bits: boolean get(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: java.lang.Number missingValue>;

        $r5 = (java.lang.Integer) $r4;

        i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label1:
        $r6 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int[] values>;

        $r6[i2] = i3;

        return;
    }

    public org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCache $r2;
        org.apache.lucene.search.FieldComparator $r8;
        org.apache.lucene.search.FieldCache$IntParser $r5;
        java.lang.String $r6;
        java.lang.Number $r4;
        org.apache.lucene.search.FieldCache$Ints $r7;
        org.apache.lucene.index.AtomicReaderContext r1;
        org.apache.lucene.index.AtomicReader $r3;
        org.apache.lucene.search.FieldComparator$IntComparator r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        r1 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        $r2 = <org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache DEFAULT>;

        $r3 = virtualinvoke r1.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r6 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: java.lang.String field>;

        $r5 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.search.FieldCache$IntParser parser>;

        $r4 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: java.lang.Number missingValue>;

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r7 = interfaceinvoke $r2.<org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache$Ints getInts(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$IntParser,boolean)>($r3, $r6, $r5, $z0);

        r0.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.search.FieldCache$Ints currentReaderValues> = $r7;

        $r8 = specialinvoke r0.<org.apache.lucene.search.FieldComparator$NumericComparator: org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext)>(r1);

        return $r8;
    }

    public void setBottom(int)
    {
        int[] $r1;
        int i0, $i1;
        org.apache.lucene.search.FieldComparator$IntComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int[] values>;

        $i1 = $r1[i0];

        r0.<org.apache.lucene.search.FieldComparator$IntComparator: int bottom> = $i1;

        return;
    }

    public java.lang.Integer value(int)
    {
        int[] $r1;
        int i0, $i1;
        java.lang.Integer $r2;
        org.apache.lucene.search.FieldComparator$IntComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$IntComparator: int[] values>;

        $i1 = $r1[i0];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r2;
    }

    public int compareDocToValue(int, java.lang.Integer)
    {
        java.lang.Integer r0, $r6;
        int $i0, i1, $i2, i3, $i5;
        org.apache.lucene.search.FieldCache$Ints $r2;
        java.lang.Number $r5;
        org.apache.lucene.util.Bits $r3, $r4;
        org.apache.lucene.search.FieldComparator$IntComparator r1;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r2 = r1.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.search.FieldCache$Ints currentReaderValues>;

        $i2 = virtualinvoke $r2.<org.apache.lucene.search.FieldCache$Ints: int get(int)>(i1);

        i3 = $i2;

        $r3 = r1.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.util.Bits docsWithField>;

        if $r3 == null goto label1;

        if $i2 != 0 goto label1;

        $r4 = r1.<org.apache.lucene.search.FieldComparator$IntComparator: org.apache.lucene.util.Bits docsWithField>;

        $z0 = interfaceinvoke $r4.<org.apache.lucene.util.Bits: boolean get(int)>(i1);

        if $z0 != 0 goto label1;

        $r5 = r1.<org.apache.lucene.search.FieldComparator$IntComparator: java.lang.Number missingValue>;

        $r6 = (java.lang.Integer) $r5;

        i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label1:
        if i3 >= $i0 goto label2;

        $i5 = (int) -1;

        return $i5;

     label2:
        if i3 <= $i0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public volatile int compareDocToValue(int, java.lang.Object) throws java.io.IOException
    {
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Integer $r2;
        org.apache.lucene.search.FieldComparator$IntComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (java.lang.Integer) r1;

        $i1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$IntComparator: int compareDocToValue(int,java.lang.Integer)>(i0, $r2);

        return $i1;
    }

    public volatile java.lang.Object value(int)
    {
        int i0;
        java.lang.Integer $r1;
        org.apache.lucene.search.FieldComparator$IntComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$IntComparator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$IntComparator: java.lang.Integer value(int)>(i0);

        return $r1;
    }
}
