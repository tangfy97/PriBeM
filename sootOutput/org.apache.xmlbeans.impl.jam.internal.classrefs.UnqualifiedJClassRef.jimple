public class org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef extends java.lang.Object implements org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef
{
    private static final boolean VERBOSE;
    private static final java.lang.String PREFIX;
    private java.lang.String mUnqualifiedClassname;
    private java.lang.String mQualifiedClassname;
    private org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext;

    public static org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String, org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)
    {
        java.lang.IllegalStateException $r0;
        java.lang.String r1;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unqualified names currently disabled.");

        throw $r0;
    }

    private void <init>(java.lang.String, org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)
    {
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext r1;
        java.lang.IllegalArgumentException $r3, $r4;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mQualifiedClassname> = null;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null ctx");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null ucname");

        throw $r3;

     label2:
        r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext> = r1;

        r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mUnqualifiedClassname> = r2;

        return;
    }

    public org.apache.xmlbeans.impl.jam.JClass getRefClass()
    {
        org.apache.xmlbeans.impl.jam.JamClassLoader $r2;
        java.lang.String $r3;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext $r1;
        org.apache.xmlbeans.impl.jam.JClass $r4;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext>;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String getQualifiedName()>();

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.JamClassLoader: org.apache.xmlbeans.impl.jam.JClass loadClass(java.lang.String)>($r3);

        return $r4;
    }

    public java.lang.String getQualifiedName()
    {
        java.lang.IllegalStateException $r22;
        java.lang.StringBuffer $r9, $r10, $r11, $r13, $r14, $r15, $r21;
        int $i0, $i1, $i2, i3, i4, i5, $i7, $i9;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r12, $r16, $r17, $r18, $r19, r20;
        java.io.StringWriter $r23;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mQualifiedClassname>;

        if $r1 == null goto label1;

        $r19 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mQualifiedClassname>;

        return $r19;

     label1:
        i3 = 0;

        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mUnqualifiedClassname>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(91);

        i4 = $i0;

        $i7 = (int) -1;

        if $i0 == $i7 goto label3;

        $r17 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mUnqualifiedClassname>;

        r20 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        i3 = i3 + 1;

        $r18 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mUnqualifiedClassname>;

        $i1 = i4 + 1;

        $i2 = virtualinvoke $r18.<java.lang.String: int indexOf(int,int)>(91, $i1);

        i4 = $i2;

        $i9 = (int) -1;

        if $i2 != $i9 goto label2;

        goto label4;

     label3:
        r20 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mUnqualifiedClassname>;

     label4:
        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String qualifyName(java.lang.String)>(r20);

        if $r3 != null goto label5;

        $r22 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to handle unqualified java type reference \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        $r12 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mUnqualifiedClassname>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]\'. ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("This is still partially NYI.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r22;

     label5:
        if i3 <= 0 goto label8;

        $r23 = new java.io.StringWriter;

        specialinvoke $r23.<java.io.StringWriter: void <init>()>();

        i5 = 0;

     label6:
        if i5 >= i3 goto label7;

        virtualinvoke $r23.<java.io.StringWriter: void write(int)>(91);

        i5 = i5 + 1;

        goto label6;

     label7:
        virtualinvoke $r23.<java.io.StringWriter: void write(int)>(76);

        virtualinvoke $r23.<java.io.StringWriter: void write(java.lang.String)>($r3);

        virtualinvoke $r23.<java.io.StringWriter: void write(int)>(59);

        $r6 = virtualinvoke $r23.<java.io.StringWriter: java.lang.String toString()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mQualifiedClassname> = $r6;

        goto label9;

     label8:
        r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mQualifiedClassname> = $r3;

     label9:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String mQualifiedClassname>;

        return $r4;
    }

    private java.lang.String qualifyName(java.lang.String)
    {
        java.lang.String r1, $r2, $r3, $r4, $r5;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String checkExplicitImport(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String checkJavaLang(java.lang.String)>(r1);

        if $r3 == null goto label2;

        return $r3;

     label2:
        $r4 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String checkSamePackage(java.lang.String)>(r1);

        if $r4 == null goto label3;

        return $r4;

     label3:
        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String checkAlreadyQualified(java.lang.String)>(r1);

        if $r5 == null goto label4;

        return $r5;

     label4:
        return null;
    }

    private java.lang.String checkSamePackage(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.JClass $r11;
        org.apache.xmlbeans.impl.jam.JamClassLoader $r10;
        java.lang.StringBuffer $r0, $r4, $r5, $r7;
        java.lang.String $r3, r6, $r8, $r12;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext $r2, $r9;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r1;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        r6 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext>;

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = r1.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext>;

        $r10 = interfaceinvoke $r9.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

        $r11 = interfaceinvoke $r10.<org.apache.xmlbeans.impl.jam.JamClassLoader: org.apache.xmlbeans.impl.jam.JClass loadClass(java.lang.String)>($r8);

        $z0 = interfaceinvoke $r11.<org.apache.xmlbeans.impl.jam.JClass: boolean isUnresolvedType()>();

        if $z0 == 0 goto label1;

        $r12 = null;

        goto label2;

     label1:
        $r12 = interfaceinvoke $r11.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

     label2:
        return $r12;
    }

    private java.lang.String checkJavaLang(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.JClass $r8;
        org.apache.xmlbeans.impl.jam.JamClassLoader $r7;
        java.lang.StringBuffer $r0, $r1, $r3;
        java.lang.String r2, $r4, $r9;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext $r6;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r5;
        boolean $z0;

        r5 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("java.lang.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = r5.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext>;

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

        $r8 = interfaceinvoke $r7.<org.apache.xmlbeans.impl.jam.JamClassLoader: org.apache.xmlbeans.impl.jam.JClass loadClass(java.lang.String)>($r4);

        $z0 = interfaceinvoke $r8.<org.apache.xmlbeans.impl.jam.JClass: boolean isUnresolvedType()>();

        if $z0 == 0 goto label1;

        $r9 = null;

        goto label2;

     label1:
        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

     label2:
        return $r9;
    }

    private java.lang.String checkAlreadyQualified(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.JamClassLoader $r2;
        java.lang.String r3, $r5;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext $r1;
        org.apache.xmlbeans.impl.jam.JClass $r4;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext>;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.JamClassLoader: org.apache.xmlbeans.impl.jam.JClass loadClass(java.lang.String)>(r3);

        $z0 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: boolean isUnresolvedType()>();

        if $z0 == 0 goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

     label2:
        return $r5;
    }

    private java.lang.String checkExplicitImport(java.lang.String)
    {
        java.lang.String[] $r2;
        int $i0, i1;
        java.lang.String $r3, $r4, r5, $r6;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext $r1;
        org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext mContext>;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext: java.lang.String[] getImportSpecs()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = $r2[i1];

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String lastSegment(java.lang.String)>($r3);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $r6 = $r2[i1];

        return $r6;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static java.lang.String lastSegment(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return r0;

     label1:
        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;
    }

    private static java.lang.String firstSegment(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: java.lang.String PREFIX> = "[UnqualifiedJClassRef]";

        <org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: boolean VERBOSE> = 0;

        return;
    }
}
