public abstract class org.wiztools.commons.AbstractExpiryCollection extends java.lang.Object implements org.wiztools.commons.ExpiryCollection
{
    private final java.util.concurrent.locks.Lock lock;
    private final java.lang.Thread t;

    public abstract java.util.Collection getData();

    public void <init>(long)
    {
        java.util.concurrent.locks.ReentrantLock $r1;
        org.wiztools.commons.AbstractExpiryCollection$1 $r2;
        java.lang.Thread $r3, $r4;
        long l0;
        org.wiztools.commons.AbstractExpiryCollection r0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.concurrent.locks.Lock lock> = $r1;

        $r2 = new org.wiztools.commons.AbstractExpiryCollection$1;

        specialinvoke $r2.<org.wiztools.commons.AbstractExpiryCollection$1: void <init>(org.wiztools.commons.AbstractExpiryCollection,long)>(r0, l0);

        r0.<org.wiztools.commons.AbstractExpiryCollection: java.lang.Thread t> = $r2;

        $r3 = r0.<org.wiztools.commons.AbstractExpiryCollection: java.lang.Thread t>;

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r4 = r0.<org.wiztools.commons.AbstractExpiryCollection: java.lang.Thread t>;

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return;
    }

    public boolean add(java.lang.Object, long)
    {
        org.wiztools.commons.AbstractExpiryCollection$Encp $r2;
        java.util.Collection $r1;
        java.lang.Object r3;
        long l0;
        org.wiztools.commons.AbstractExpiryCollection r0;
        boolean $z0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        r3 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.Collection getData()>();

        $r2 = new org.wiztools.commons.AbstractExpiryCollection$Encp;

        specialinvoke $r2.<org.wiztools.commons.AbstractExpiryCollection$Encp: void <init>(org.wiztools.commons.AbstractExpiryCollection,java.lang.Object,long)>(r0, r3, l0);

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        return $z0;
    }

    public void clear()
    {
        org.wiztools.commons.AbstractExpiryCollection r0;
        java.util.Collection $r1;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = virtualinvoke r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.Collection getData()>();

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        org.wiztools.commons.AbstractExpiryCollection$Encp $r2;
        java.util.Collection $r1;
        java.lang.Object r3;
        org.wiztools.commons.AbstractExpiryCollection r0;
        boolean $z0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.Collection getData()>();

        $r2 = new org.wiztools.commons.AbstractExpiryCollection$Encp;

        specialinvoke $r2.<org.wiztools.commons.AbstractExpiryCollection$Encp: void <init>(org.wiztools.commons.AbstractExpiryCollection,java.lang.Object,long)>(r0, r3, 0L);

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isEmpty()
    {
        org.wiztools.commons.AbstractExpiryCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = virtualinvoke r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.Collection getData()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        int $i0;
        org.wiztools.commons.AbstractExpiryCollection r0;
        java.util.Collection $r1;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = virtualinvoke r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.Collection getData()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public void acquire()
    {
        java.util.concurrent.locks.Lock $r1;
        org.wiztools.commons.AbstractExpiryCollection r0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        return;
    }

    public void release()
    {
        java.util.concurrent.locks.Lock $r1;
        org.wiztools.commons.AbstractExpiryCollection r0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }

    public void shutdown()
    {
        org.wiztools.commons.AbstractExpiryCollection r0;
        java.lang.Thread $r1;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = r0.<org.wiztools.commons.AbstractExpiryCollection: java.lang.Thread t>;

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        org.wiztools.commons.AbstractExpiryCollection$2 $r3;
        org.wiztools.commons.AbstractExpiryCollection r0;

        r0 := @this: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = virtualinvoke r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.Collection getData()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = new org.wiztools.commons.AbstractExpiryCollection$2;

        specialinvoke $r3.<org.wiztools.commons.AbstractExpiryCollection$2: void <init>(org.wiztools.commons.AbstractExpiryCollection,java.util.Iterator)>(r0, $r2);

        return $r3;
    }

    static java.util.concurrent.locks.Lock access$000(org.wiztools.commons.AbstractExpiryCollection)
    {
        java.util.concurrent.locks.Lock $r1;
        org.wiztools.commons.AbstractExpiryCollection r0;

        r0 := @parameter0: org.wiztools.commons.AbstractExpiryCollection;

        $r1 = r0.<org.wiztools.commons.AbstractExpiryCollection: java.util.concurrent.locks.Lock lock>;

        return $r1;
    }
}
