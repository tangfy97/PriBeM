public class groovy.swing.factory.CompoundBorderFactory extends groovy.swing.factory.SwingBorderFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697165;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$javax$swing$border$CompoundBorder;
    static java.lang.Class class$java$lang$RuntimeException;
    static java.lang.Class class$javax$swing$border$Border;

    public void <init>()
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void <init>()>();

        $r1 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.CompoundBorderFactory");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        java.lang.Integer $r96, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107;
        java.util.Map r3;
        java.lang.Throwable $r22, $r35, $r80;
        java.lang.Object[] $r4, $r16, $r18, $r23, $r25, $r28, $r30, $r32, $r42, $r43, $r46, $r50, $r55, $r62, $r63, $r66, $r69, $r75, $r77;
        groovy.swing.factory.CompoundBorderFactory$_newInstance_closure1 $r108;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        groovy.util.FactoryBuilderSupport r6;
        org.codehaus.groovy.runtime.GStringImpl $r97, $r109, $r110;
        java.util.List $r53;
        groovy.swing.factory.CompoundBorderFactory r57;
        java.lang.String[] $r20, $r33, $r78;
        int $i1;
        java.lang.Boolean $r90, $r92;
        java.lang.Class $r0, r1, $r2, $r8, $r11, $r15, $r27, $r29, $r41, $r59, $r61, $r72, $r74, $r81, $r82, $r83, $r85, $r86, $r87, $r88, $r89, $r91, $r93, $r94, $r95;
        java.lang.Object $r5, $r7, $r9, r10, $r12, $r13, $r14, r19, $r21, $r24, $r26, $r34, $r36, $r45, $r48, $r49, $r54, $r58, $r60, $r65, $r68, $r71, $r73, $r79, r84;

        r57 := @this: groovy.swing.factory.CompoundBorderFactory;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r19 := @parameter1: java.lang.Object;

        r10 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r81 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.CompoundBorderFactory");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0> = $r81;

        goto label02;

     label01:
        $r81 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r81;

        $r2 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r82 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r82;

        goto label04;

     label03:
        $r82 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "parent";

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r4);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r6, "context");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r5, r1, $r7, "applyBorderToParent");

        $r8 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border>;

        if $r8 != null goto label05;

        $r83 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.Border");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border> = $r83;

        goto label06;

     label05:
        $r83 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border>;

     label06:
        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r83);

        r84 = (javax.swing.border.Border) $r9;

        $z0 = r10 instanceof java.util.List;

        if $z0 == 0 goto label22;

        $r36 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r10, "size");

        $r96 = new java.lang.Integer;

        specialinvoke $r96.<java.lang.Integer: void <init>(int)>(0);

        $z7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean isCase(java.lang.Object,java.lang.Object)>($r36, $r96);

        if $z7 == 0 goto label09;

        $r74 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r74 != null goto label07;

        $r85 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r85;

        goto label08;

     label07:
        $r85 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label08:
        $r75 = newarray (java.lang.Object)[1];

        $r97 = new org.codehaus.groovy.runtime.GStringImpl;

        $r77 = newarray (java.lang.Object)[1];

        $r77[0] = r19;

        $r78 = newarray (java.lang.String)[2];

        $r78[0] = "";

        $r78[1] = " does not accept an empty array as an value argument";

        specialinvoke $r97.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r77, $r78);

        $r75[0] = $r97;

        $r79 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r85, $r75);

        $r80 = (java.lang.Throwable) $r79;

        throw $r80;

     label09:
        $r98 = new java.lang.Integer;

        specialinvoke $r98.<java.lang.Integer: void <init>(int)>(1);

        $z8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean isCase(java.lang.Object,java.lang.Object)>($r36, $r98);

        if $z8 == 0 goto label12;

        $r69 = newarray (java.lang.Object)[1];

        $r99 = new java.lang.Integer;

        specialinvoke $r99.<java.lang.Integer: void <init>(int)>(0);

        $r69[0] = $r99;

        $r71 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r10, "getAt", $r69);

        $r72 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border>;

        if $r72 != null goto label10;

        $r86 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.Border");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border> = $r86;

        goto label11;

     label10:
        $r86 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border>;

     label11:
        $r73 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r71, $r86);

        r84 = (javax.swing.border.Border) $r73;

        goto label21;

     label12:
        $r100 = new java.lang.Integer;

        specialinvoke $r100.<java.lang.Integer: void <init>(int)>(2);

        $z9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean isCase(java.lang.Object,java.lang.Object)>($r36, $r100);

        if $z9 == 0 goto label15;

        $r61 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder>;

        if $r61 != null goto label13;

        $r87 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.CompoundBorder");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder> = $r87;

        goto label14;

     label13:
        $r87 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder>;

     label14:
        $r62 = newarray (java.lang.Object)[2];

        $r63 = newarray (java.lang.Object)[1];

        $r101 = new java.lang.Integer;

        specialinvoke $r101.<java.lang.Integer: void <init>(int)>(0);

        $r63[0] = $r101;

        $r65 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r10, "getAt", $r63);

        $r62[0] = $r65;

        $r66 = newarray (java.lang.Object)[1];

        $r102 = new java.lang.Integer;

        specialinvoke $r102.<java.lang.Integer: void <init>(int)>(1);

        $r66[0] = $r102;

        $r68 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r10, "getAt", $r66);

        $r62[1] = $r68;

        r84 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r87, $r62);

        goto label21;

     label15:
        $r103 = new java.lang.Integer;

        specialinvoke $r103.<java.lang.Integer: void <init>(int)>(3);

        $z10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean isCase(java.lang.Object,java.lang.Object)>($r36, $r103);

        if $z10 == 0 goto label16;

     label16:
        $r41 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder>;

        if $r41 != null goto label17;

        $r88 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.CompoundBorder");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder> = $r88;

        goto label18;

     label17:
        $r88 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder>;

     label18:
        $r42 = newarray (java.lang.Object)[2];

        $r43 = newarray (java.lang.Object)[1];

        $r104 = new java.lang.Integer;

        specialinvoke $r104.<java.lang.Integer: void <init>(int)>(0);

        $r43[0] = $r104;

        $r45 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r10, "getAt", $r43);

        $r42[0] = $r45;

        $r46 = newarray (java.lang.Object)[1];

        $r105 = new java.lang.Integer;

        specialinvoke $r105.<java.lang.Integer: void <init>(int)>(1);

        $r46[0] = $r105;

        $r48 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r10, "getAt", $r46);

        $r42[1] = $r48;

        $r49 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r88, $r42);

        $r50 = newarray (java.lang.Object)[1];

        $r106 = new java.lang.Integer;

        specialinvoke $r106.<java.lang.Integer: void <init>(int)>(2);

        $r107 = new java.lang.Integer;

        $i1 = (int) -1;

        specialinvoke $r107.<java.lang.Integer: void <init>(int)>($i1);

        $r53 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createRange(java.lang.Object,java.lang.Object,boolean)>($r106, $r107, 1);

        $r50[0] = $r53;

        $r54 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r10, "getAt", $r50);

        $r55 = newarray (java.lang.Object)[2];

        $r55[0] = $r49;

        $r108 = new groovy.swing.factory.CompoundBorderFactory$_newInstance_closure1;

        specialinvoke $r108.<groovy.swing.factory.CompoundBorderFactory$_newInstance_closure1: void <init>(java.lang.Object,java.lang.Object)>(r57, r57);

        $r55[1] = $r108;

        $r58 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r54, "inject", $r55);

        $r59 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border>;

        if $r59 != null goto label19;

        $r89 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.Border");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border> = $r89;

        goto label20;

     label19:
        $r89 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$Border>;

     label20:
        $r60 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r58, $r89);

        r84 = (javax.swing.border.Border) $r60;

        goto label21;

     label21:
        goto label22;

     label22:
        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r84);

        if $z1 != 0 goto label23;

        $z11 = 1;

        goto label24;

     label23:
        $z11 = 0;

     label24:
        if $z11 == 0 goto label25;

        $z6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z6 == 0 goto label25;

        $r90 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label26;

     label25:
        $r90 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label26:
        $z12 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r90);

        if $z12 == 0 goto label35;

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r10);

        if $z3 == 0 goto label29;

        $r29 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r29 != null goto label27;

        $r91 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r91;

        goto label28;

     label27:
        $r91 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label28:
        $r30 = newarray (java.lang.Object)[1];

        $r109 = new org.codehaus.groovy.runtime.GStringImpl;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = r19;

        $r33 = newarray (java.lang.String)[2];

        $r33[0] = "";

        $r33[1] = " only accepts an array of borders as a value argument";

        specialinvoke $r109.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r32, $r33);

        $r30[0] = $r109;

        $r34 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r91, $r30);

        $r35 = (java.lang.Throwable) $r34;

        throw $r35;

     label29:
        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "inner";

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r23);

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "outer";

        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r25);

        $z4 = $r24 instanceof javax.swing.border.Border;

        if $z4 == 0 goto label30;

        $z5 = $r26 instanceof javax.swing.border.Border;

        if $z5 == 0 goto label30;

        $r92 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label31;

     label30:
        $r92 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label31:
        $z13 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r92);

        if $z13 == 0 goto label34;

        $r27 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder>;

        if $r27 != null goto label32;

        $r93 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.CompoundBorder");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder> = $r93;

        goto label33;

     label32:
        $r93 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$javax$swing$border$CompoundBorder>;

     label33:
        $r28 = newarray (java.lang.Object)[2];

        $r28[0] = $r26;

        $r28[1] = $r24;

        r84 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r93, $r28);

        goto label34;

     label34:
        goto label35;

     label35:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r84);

        if $z2 != 0 goto label36;

        $z14 = 1;

        goto label37;

     label36:
        $z14 = 0;

     label37:
        if $z14 == 0 goto label40;

        $r15 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r15 != null goto label38;

        $r94 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r94;

        goto label39;

     label38:
        $r94 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label39:
        $r16 = newarray (java.lang.Object)[1];

        $r110 = new org.codehaus.groovy.runtime.GStringImpl;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r19;

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "";

        $r20[1] = " only accepts an array of javax.swing.border.Border or an inner: and outer: attribute";

        specialinvoke $r110.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r18, $r20);

        $r16[0] = $r110;

        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r94, $r16);

        $r22 = (java.lang.Throwable) $r21;

        throw $r22;

     label40:
        $r14 = r84;

        $r11 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r11 != null goto label41;

        $r95 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$Object> = $r95;

        goto label42;

     label41:
        $r95 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$java$lang$Object>;

     label42:
        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r14, $r95);

        $r13 = (java.lang.Object) $r12;

        return $r13;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.CompoundBorderFactory");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.CompoundBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697165L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.CompoundBorderFactory: java.lang.Long __timeStamp__239_neverHappen1239119697165> = $r5;

        return;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.String $r1;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$3$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object $r1;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        int i1;
        groovy.swing.factory.CompoundBorderFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Class $r1;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$3$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.util.Map r3;
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.CompoundBorderFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.CompoundBorderFactory r0;

        r0 := @this: groovy.swing.factory.CompoundBorderFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
