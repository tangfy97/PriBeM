public class org.codehaus.groovy.control.LabelVerifier extends org.codehaus.groovy.ast.ClassCodeVisitorSupport
{
    private org.codehaus.groovy.control.SourceUnit source;
    private java.util.LinkedList visitedLabels;
    private java.util.LinkedList continueLabels;
    private java.util.LinkedList breakLabels;
    boolean inLoop;
    boolean inSwitch;

    public void <init>(org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.control.LabelVerifier r0;
        org.codehaus.groovy.control.SourceUnit r1;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        r1 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void <init>()>();

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = 0;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inSwitch> = 0;

        r0.<org.codehaus.groovy.control.LabelVerifier: org.codehaus.groovy.control.SourceUnit source> = r1;

        return;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.control.LabelVerifier r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        $r1 = r0.<org.codehaus.groovy.control.LabelVerifier: org.codehaus.groovy.control.SourceUnit source>;

        return $r1;
    }

    private void init()
    {
        org.codehaus.groovy.control.LabelVerifier r0;
        java.util.LinkedList $r1, $r2, $r3;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList visitedLabels> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList continueLabels> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList breakLabels> = $r3;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = 0;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inSwitch> = 0;

        return;
    }

    protected void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        org.codehaus.groovy.control.LabelVerifier r0;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        specialinvoke r0.<org.codehaus.groovy.control.LabelVerifier: void init()>();

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        virtualinvoke r0.<org.codehaus.groovy.control.LabelVerifier: void assertNoLabelsMissed()>();

        return;
    }

    public void visitStatement(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r0;
        java.lang.String $r1, $r9, $r11;
        java.util.LinkedList $r3, $r5, $r7;
        org.codehaus.groovy.ast.stmt.ContinueStatement r13;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.control.LabelVerifier r2;
        java.util.Iterator $r4, $r6;
        org.codehaus.groovy.ast.stmt.BreakStatement r12;
        java.lang.Object $r8, $r10;

        r2 := @this: org.codehaus.groovy.control.LabelVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: java.lang.String getStatementLabel()>();

        if $r1 == null goto label7;

        $r3 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList breakLabels>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.codehaus.groovy.ast.stmt.BreakStatement) $r10;

        $r11 = virtualinvoke r12.<org.codehaus.groovy.ast.stmt.BreakStatement: java.lang.String getLabel()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        $r5 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList continueLabels>;

        $r6 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.codehaus.groovy.ast.stmt.ContinueStatement) $r8;

        $r9 = virtualinvoke r13.<org.codehaus.groovy.ast.stmt.ContinueStatement: java.lang.String getLabel()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label5;

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

     label5:
        goto label4;

     label6:
        $r7 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList visitedLabels>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

     label7:
        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r0);

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.control.LabelVerifier r0;
        boolean z0;
        org.codehaus.groovy.ast.stmt.ForStatement r1;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        z0 = r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop>;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = 1;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r1);

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = z0;

        return;
    }

    public void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)
    {
        org.codehaus.groovy.ast.stmt.DoWhileStatement r1;
        org.codehaus.groovy.control.LabelVerifier r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.DoWhileStatement;

        z0 = r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop>;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = 1;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)>(r1);

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = z0;

        return;
    }

    public void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)
    {
        org.codehaus.groovy.control.LabelVerifier r0;
        boolean z0;
        org.codehaus.groovy.ast.stmt.WhileStatement r1;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.WhileStatement;

        z0 = r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop>;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = 1;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)>(r1);

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop> = z0;

        return;
    }

    public void visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)
    {
        java.lang.String $r1, r7;
        java.util.LinkedList $r3, $r5;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z7, $z8, $z9;
        org.codehaus.groovy.control.LabelVerifier r2;
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.stmt.BreakStatement r0;
        java.lang.Object $r6;

        r2 := @this: org.codehaus.groovy.control.LabelVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.BreakStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.BreakStatement: java.lang.String getLabel()>();

        if $r1 == null goto label1;

        $z9 = 1;

        $z8 = 1;

        goto label2;

     label1:
        $z9 = 0;

        $z8 = 0;

     label2:
        z0 = $z8;

        if $z9 != 0 goto label3;

        $z4 = r2.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop>;

        if $z4 != 0 goto label3;

        $z5 = r2.<org.codehaus.groovy.control.LabelVerifier: boolean inSwitch>;

        if $z5 != 0 goto label3;

        virtualinvoke r2.<org.codehaus.groovy.control.LabelVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("the break statement is only allowed inside loops or switches", r0);

        goto label4;

     label3:
        if z0 == 0 goto label4;

        $z3 = r2.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop>;

        if $z3 != 0 goto label4;

        virtualinvoke r2.<org.codehaus.groovy.control.LabelVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("the break statement with named label is only allowed inside loops", r0);

     label4:
        if $r1 == null goto label8;

        z7 = 0;

        $r3 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList visitedLabels>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label6;

        z7 = 1;

        goto label7;

     label6:
        goto label5;

     label7:
        if z7 != 0 goto label8;

        $r5 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList breakLabels>;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

     label8:
        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)>(r0);

        return;
    }

    public void visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)
    {
        org.codehaus.groovy.control.LabelVerifier r2;
        java.util.Iterator $r4;
        java.lang.Object $r6;
        java.lang.String $r1, r7;
        org.codehaus.groovy.ast.stmt.ContinueStatement r0;
        java.util.LinkedList $r3, $r5;
        boolean $z0, $z1, $z2, $z3, z4;

        r2 := @this: org.codehaus.groovy.control.LabelVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ContinueStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ContinueStatement: java.lang.String getLabel()>();

        if $r1 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != 0 goto label3;

        $z2 = r2.<org.codehaus.groovy.control.LabelVerifier: boolean inLoop>;

        if $z2 != 0 goto label3;

        virtualinvoke r2.<org.codehaus.groovy.control.LabelVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("the continue statement is only allowed inside loops", r0);

     label3:
        if $r1 == null goto label7;

        z4 = 0;

        $r3 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList visitedLabels>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label5;

        z4 = 1;

        goto label6;

     label5:
        goto label4;

     label6:
        if z4 != 0 goto label7;

        $r5 = r2.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList continueLabels>;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

     label7:
        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)>(r0);

        return;
    }

    protected void assertNoLabelsMissed()
    {
        org.codehaus.groovy.control.LabelVerifier r0;
        java.util.Iterator $r2, $r4;
        org.codehaus.groovy.ast.stmt.BreakStatement r8;
        java.lang.Object $r5, $r6;
        java.util.LinkedList $r1, $r3;
        org.codehaus.groovy.ast.stmt.ContinueStatement r7;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        $r1 = r0.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList continueLabels>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.stmt.ContinueStatement) $r6;

        virtualinvoke r0.<org.codehaus.groovy.control.LabelVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("continue to missing label", r7);

        goto label1;

     label2:
        $r3 = r0.<org.codehaus.groovy.control.LabelVerifier: java.util.LinkedList breakLabels>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.codehaus.groovy.ast.stmt.BreakStatement) $r5;

        virtualinvoke r0.<org.codehaus.groovy.control.LabelVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("break to missing label", r8);

        goto label3;

     label4:
        return;
    }

    public void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)
    {
        org.codehaus.groovy.ast.stmt.SwitchStatement r1;
        org.codehaus.groovy.control.LabelVerifier r0;

        r0 := @this: org.codehaus.groovy.control.LabelVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.SwitchStatement;

        r0.<org.codehaus.groovy.control.LabelVerifier: boolean inSwitch> = 1;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)>(r1);

        return;
    }
}
