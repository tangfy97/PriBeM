public class com.jhlabs.image.MotionBlurFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    public static final int LINEAR;
    public static final int RADIAL;
    public static final int ZOOM;
    private float angle;
    private float falloff;
    private float distance;
    private float zoom;
    private float rotation;
    private boolean wrapEdges;

    public void <init>()
    {
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.MotionBlurFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.MotionBlurFilter: float falloff> = 1.0F;

        r0.<com.jhlabs.image.MotionBlurFilter: float distance> = 1.0F;

        r0.<com.jhlabs.image.MotionBlurFilter: float zoom> = 0.0F;

        r0.<com.jhlabs.image.MotionBlurFilter: float rotation> = 0.0F;

        r0.<com.jhlabs.image.MotionBlurFilter: boolean wrapEdges> = 0;

        return;
    }

    public void setAngle(float)
    {
        float f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MotionBlurFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        $f0 = r0.<com.jhlabs.image.MotionBlurFilter: float angle>;

        return $f0;
    }

    public void setDistance(float)
    {
        float f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MotionBlurFilter: float distance> = f0;

        return;
    }

    public float getDistance()
    {
        float $f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        $f0 = r0.<com.jhlabs.image.MotionBlurFilter: float distance>;

        return $f0;
    }

    public void setRotation(float)
    {
        float f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MotionBlurFilter: float rotation> = f0;

        return;
    }

    public float getRotation()
    {
        float $f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        $f0 = r0.<com.jhlabs.image.MotionBlurFilter: float rotation>;

        return $f0;
    }

    public void setZoom(float)
    {
        float f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MotionBlurFilter: float zoom> = f0;

        return;
    }

    public float getZoom()
    {
        float $f0;
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        $f0 = r0.<com.jhlabs.image.MotionBlurFilter: float zoom>;

        return $f0;
    }

    public void setWrapEdges(boolean)
    {
        com.jhlabs.image.MotionBlurFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.MotionBlurFilter: boolean wrapEdges> = z0;

        return;
    }

    public boolean getWrapEdges()
    {
        com.jhlabs.image.MotionBlurFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        $z0 = r0.<com.jhlabs.image.MotionBlurFilter: boolean wrapEdges>;

        return $z0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b22;
        java.awt.geom.AffineTransform $r2;
        com.jhlabs.image.MotionBlurFilter r1;
        java.awt.geom.Point2D$Float $r3;
        int[] $r4, $r5;
        boolean $z0, $z1;
        java.awt.image.BufferedImage r0, r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;

        r1 := @this: com.jhlabs.image.MotionBlurFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label01;

        r6 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label01:
        $i2 = $i0 * $i1;

        $r4 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r5 = newarray (int)[$i3];

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, $r4);

        $f0 = r1.<com.jhlabs.image.MotionBlurFilter: float angle>;

        $d0 = (double) $f0;

        staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f1 = r1.<com.jhlabs.image.MotionBlurFilter: float angle>;

        $d1 = (double) $f1;

        staticinvoke <java.lang.Math: double cos(double)>($d1);

        $i37 = $i0 / 2;

        $i38 = $i1 / 2;

        i40 = 0;

        $i5 = $i37 * $i37;

        $i4 = $i38 * $i38;

        $i6 = $i5 + $i4;

        $d2 = (double) $i6;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $f33 = (float) $d3;

        $f2 = r1.<com.jhlabs.image.MotionBlurFilter: float distance>;

        $d5 = (double) $f2;

        $f3 = r1.<com.jhlabs.image.MotionBlurFilter: float angle>;

        $d4 = (double) $f3;

        $d6 = staticinvoke <java.lang.Math: double cos(double)>($d4);

        $d7 = $d5 * $d6;

        $f34 = (float) $d7;

        $f4 = r1.<com.jhlabs.image.MotionBlurFilter: float distance>;

        $d9 = (double) $f4;

        $f5 = r1.<com.jhlabs.image.MotionBlurFilter: float angle>;

        $d8 = (double) $f5;

        $d10 = staticinvoke <java.lang.Math: double sin(double)>($d8);

        $d11 = neg $d10;

        $d12 = $d9 * $d11;

        $f35 = (float) $d12;

        $f8 = r1.<com.jhlabs.image.MotionBlurFilter: float distance>;

        $f6 = r1.<com.jhlabs.image.MotionBlurFilter: float rotation>;

        $f7 = $f6 * $f33;

        $f9 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $f12 = $f8 + $f9;

        $f10 = r1.<com.jhlabs.image.MotionBlurFilter: float zoom>;

        $f11 = $f10 * $f33;

        $f36 = $f12 + $f11;

        $i39 = (int) $f36;

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        $r3 = new java.awt.geom.Point2D$Float;

        specialinvoke $r3.<java.awt.geom.Point2D$Float: void <init>()>();

        i41 = 0;

     label02:
        if i41 >= $i1 goto label14;

        i42 = 0;

     label03:
        if i42 >= $i0 goto label13;

        i43 = 0;

        i44 = 0;

        i45 = 0;

        i46 = 0;

        i47 = 0;

        i48 = 0;

     label04:
        if i48 >= $i39 goto label10;

        $f14 = (float) i48;

        $f13 = (float) $i39;

        f15 = $f14 / $f13;

        $f16 = (float) i42;

        $r3.<java.awt.geom.Point2D$Float: float x> = $f16;

        $f17 = (float) i41;

        $r3.<java.awt.geom.Point2D$Float: float y> = $f17;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void setToIdentity()>();

        $f19 = (float) $i37;

        $f18 = f15 * $f34;

        $f20 = $f19 + $f18;

        $d14 = (double) $f20;

        $f22 = (float) $i38;

        $f21 = f15 * $f35;

        $f23 = $f22 + $f21;

        $d13 = (double) $f23;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void translate(double,double)>($d14, $d13);

        $f24 = r1.<com.jhlabs.image.MotionBlurFilter: float zoom>;

        $f25 = $f24 * f15;

        f26 = 1.0F - $f25;

        $d16 = (double) f26;

        $d15 = (double) f26;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void scale(double,double)>($d16, $d15);

        $f27 = r1.<com.jhlabs.image.MotionBlurFilter: float rotation>;

        $b22 = $f27 cmpl 0.0F;

        if $b22 == 0 goto label05;

        $f30 = r1.<com.jhlabs.image.MotionBlurFilter: float rotation>;

        $f31 = neg $f30;

        $f32 = $f31 * f15;

        $d19 = (double) $f32;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void rotate(double)>($d19);

     label05:
        $i23 = neg $i37;

        $d18 = (double) $i23;

        $i24 = neg $i38;

        $d17 = (double) $i24;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void translate(double,double)>($d18, $d17);

        virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r3, $r3);

        $f28 = $r3.<java.awt.geom.Point2D$Float: float x>;

        $i35 = (int) $f28;

        i49 = $i35;

        $f29 = $r3.<java.awt.geom.Point2D$Float: float y>;

        $i36 = (int) $f29;

        i50 = $i36;

        if $i35 < 0 goto label06;

        if $i35 < $i0 goto label07;

     label06:
        $z0 = r1.<com.jhlabs.image.MotionBlurFilter: boolean wrapEdges>;

        if $z0 == 0 goto label10;

        i49 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>($i35, $i0);

     label07:
        if $i36 < 0 goto label08;

        if $i36 < $i1 goto label09;

     label08:
        $z1 = r1.<com.jhlabs.image.MotionBlurFilter: boolean wrapEdges>;

        if $z1 == 0 goto label10;

        i50 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>($i36, $i1);

     label09:
        i47 = i47 + 1;

        $i25 = i50 * $i0;

        $i26 = $i25 + i49;

        $i34 = $r4[$i26];

        $i27 = $i34 >> 24;

        $i28 = $i27 & 255;

        i43 = i43 + $i28;

        $i29 = $i34 >> 16;

        $i30 = $i29 & 255;

        i44 = i44 + $i30;

        $i31 = $i34 >> 8;

        $i32 = $i31 & 255;

        i45 = i45 + $i32;

        $i33 = $i34 & 255;

        i46 = i46 + $i33;

        i48 = i48 + 1;

        goto label04;

     label10:
        if i47 != 0 goto label11;

        $i21 = $r4[i40];

        $r5[i40] = $i21;

        goto label12;

     label11:
        $i7 = i43 / i47;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $i9 = i44 / i47;

        $i10 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i9);

        $i11 = i45 / i47;

        $i12 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i11);

        $i13 = i46 / i47;

        $i14 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i13);

        $i16 = $i8 << 24;

        $i15 = $i10 << 16;

        $i18 = $i16 | $i15;

        $i17 = $i12 << 8;

        $i19 = $i18 | $i17;

        $i20 = $i19 | $i14;

        $r5[i40] = $i20;

     label12:
        i40 = i40 + 1;

        i42 = i42 + 1;

        goto label03;

     label13:
        i41 = i41 + 1;

        goto label02;

     label14:
        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r6, 0, 0, $i0, $i1, $r5);

        return r6;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.MotionBlurFilter r0;

        r0 := @this: com.jhlabs.image.MotionBlurFilter;

        return "Blur/Motion Blur...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.MotionBlurFilter: int ZOOM> = 2;

        <com.jhlabs.image.MotionBlurFilter: int RADIAL> = 1;

        <com.jhlabs.image.MotionBlurFilter: int LINEAR> = 0;

        return;
    }
}
