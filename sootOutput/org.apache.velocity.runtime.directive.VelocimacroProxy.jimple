public class org.apache.velocity.runtime.directive.VelocimacroProxy extends org.apache.velocity.runtime.directive.Directive
{
    private java.lang.String macroName;
    private java.lang.String[] argArray;
    private java.lang.String[] literalArgArray;
    private org.apache.velocity.runtime.parser.node.SimpleNode nodeTree;
    private int numMacroArgs;
    private boolean strictArguments;
    private boolean localContextScope;
    private int maxCallDepth;
    private java.lang.String bodyReference;

    public void <init>()
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        specialinvoke r0.<org.apache.velocity.runtime.directive.Directive: void <init>()>();

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] argArray> = null;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] literalArgArray> = null;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree> = null;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: int numMacroArgs> = 0;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean localContextScope> = 0;

        return;
    }

    public java.lang.String getName()
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;
        java.lang.String $r1;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        $r1 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String macroName>;

        return $r1;
    }

    public int getType()
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        return 2;
    }

    public void setName(java.lang.String)
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;
        java.lang.String r1;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String macroName> = r1;

        return;
    }

    public void setArgArray(java.lang.String[])
    {
        java.lang.String[] r1, $r2, $r3, $r5, $r7;
        java.lang.StringBuffer $r4, $r6, $r9;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r8, $r10;
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r1 := @parameter0: java.lang.String[];

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] argArray> = r1;

        $i0 = lengthof r1;

        $r2 = newarray (java.lang.String)[$i0];

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] literalArgArray> = $r2;

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label2;

        $r5 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] literalArgArray>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".literal.$");

        $r7 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] argArray>;

        $r8 = $r7[i4];

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5[i4] = $r10;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] argArray>;

        $i2 = lengthof $r3;

        $i3 = $i2 - 1;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: int numMacroArgs> = $i3;

        return;
    }

    public void setNodeTree(org.apache.velocity.runtime.parser.node.SimpleNode)
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;
        org.apache.velocity.runtime.parser.node.SimpleNode r1;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r1 := @parameter0: org.apache.velocity.runtime.parser.node.SimpleNode;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree> = r1;

        return;
    }

    public int getNumArgs()
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;
        int $i0;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        $i0 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: int numMacroArgs>;

        return $i0;
    }

    public boolean render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer, org.apache.velocity.runtime.parser.node.Node) throws java.io.IOException, org.apache.velocity.exception.MethodInvocationException, org.apache.velocity.exception.MacroOverflowException
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;
        org.apache.velocity.context.InternalContextAdapter r1;
        java.io.Writer r2;
        org.apache.velocity.runtime.parser.node.Node r3;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r1 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r2 := @parameter1: java.io.Writer;

        r3 := @parameter2: org.apache.velocity.runtime.parser.node.Node;

        $z0 = virtualinvoke r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean render(org.apache.velocity.context.InternalContextAdapter,java.io.Writer,org.apache.velocity.runtime.parser.node.Node,org.apache.velocity.runtime.Renderable)>(r1, r2, r3, null);

        return $z0;
    }

    public boolean render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer, org.apache.velocity.runtime.parser.node.Node, org.apache.velocity.runtime.Renderable) throws java.io.IOException, org.apache.velocity.exception.MethodInvocationException, org.apache.velocity.exception.MacroOverflowException
    {
        org.apache.velocity.exception.MacroOverflowException $r25;
        org.apache.velocity.exception.VelocityException $r44;
        boolean $z0;
        java.lang.Exception $r35;
        org.apache.velocity.runtime.parser.node.SimpleNode $r8;
        java.io.Writer r7;
        java.lang.Object[] $r9;
        org.apache.velocity.context.ProxyVMContext $r0;
        java.lang.String[] $r29, $r30, $r31;
        org.apache.velocity.runtime.RuntimeServices $r3, $r22, $r42;
        java.lang.StringBuffer $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r36, $r37, $r39, $r40;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String $r6, $r14, $r19, $r21, $r24, $r26, $r28, $r32, $r33, $r38, $r41;
        org.apache.velocity.runtime.parser.node.Node r4, $r34;
        org.apache.velocity.context.InternalContextAdapter r1;
        org.apache.velocity.runtime.directive.VelocimacroProxy r2;
        org.apache.velocity.runtime.Renderable r5;
        java.lang.RuntimeException $r45;
        org.apache.velocity.runtime.log.Log $r23, $r43;
        java.lang.Object $r27;

        r2 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r1 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r7 := @parameter1: java.io.Writer;

        r4 := @parameter2: org.apache.velocity.runtime.parser.node.Node;

        r5 := @parameter3: org.apache.velocity.runtime.Renderable;

        $r0 = new org.apache.velocity.context.ProxyVMContext;

        $r3 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $z0 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean localContextScope>;

        specialinvoke $r0.<org.apache.velocity.context.ProxyVMContext: void <init>(org.apache.velocity.context.InternalContextAdapter,org.apache.velocity.runtime.RuntimeServices,boolean)>(r1, $r3, $z0);

        $i0 = interfaceinvoke r4.<org.apache.velocity.runtime.parser.node.Node: int jjtGetNumChildren()>();

        if $i0 <= 0 goto label02;

        i9 = 1;

     label01:
        $r29 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] argArray>;

        $i7 = lengthof $r29;

        if i9 >= $i7 goto label02;

        if i9 > $i0 goto label02;

        $r30 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] argArray>;

        $r32 = $r30[i9];

        $r31 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String[] literalArgArray>;

        $r33 = $r31[i9];

        $i8 = i9 - 1;

        $r34 = interfaceinvoke r4.<org.apache.velocity.runtime.parser.node.Node: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>($i8);

        virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: void addVMProxyArg(org.apache.velocity.context.InternalContextAdapter,java.lang.String,java.lang.String,org.apache.velocity.runtime.parser.node.Node)>(r1, $r32, $r33, $r34);

        i9 = i9 + 1;

        goto label01;

     label02:
        if r5 == null goto label03;

        $r28 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String bodyReference>;

        virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: void addVMProxyArg(org.apache.velocity.context.InternalContextAdapter,java.lang.String,java.lang.String,org.apache.velocity.runtime.Renderable)>(r1, $r28, "", r5);

     label03:
        $i1 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: int maxCallDepth>;

        if $i1 <= 0 goto label09;

        $i2 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: int maxCallDepth>;

        $i3 = virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: int getCurrentMacroCallDepth()>();

        if $i2 != $i3 goto label09;

        $r9 = virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: java.lang.Object[] getMacroNameStack()>();

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(int)>(100);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Max calling depth of ");

        $i4 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: int maxCallDepth>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was exceeded in macro \'");

        $r14 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String macroName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' with Call Stack:");

        i10 = 0;

     label04:
        $i5 = lengthof $r9;

        if i10 >= $i5 goto label06;

        if i10 == 0 goto label05;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("->");

     label05:
        $r27 = $r9[i10];

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r27);

        i10 = i10 + 1;

        goto label04;

     label06:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" at ");

        $r19 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(org.apache.velocity.runtime.directive.Directive)>(r2);

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r22 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r23 = interfaceinvoke $r22.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        $r24 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object)>($r24);

     label07:
        $i6 = virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: int getCurrentMacroCallDepth()>();

        if $i6 <= 0 goto label08;

        virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: void popCurrentMacroName()>();

        goto label07;

     label08:
        $r25 = new org.apache.velocity.exception.MacroOverflowException;

        $r26 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.velocity.exception.MacroOverflowException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label09:
        $r6 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String macroName>;

        virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: void pushCurrentMacroName(java.lang.String)>($r6);

        $r8 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.parser.node.SimpleNode nodeTree>;

        virtualinvoke $r8.<org.apache.velocity.runtime.parser.node.SimpleNode: boolean render(org.apache.velocity.context.InternalContextAdapter,java.io.Writer)>($r0, r7);

        virtualinvoke $r0.<org.apache.velocity.context.ProxyVMContext: void popCurrentMacroName()>();

     label10:
        return 1;

     label11:
        $r45 := @caughtexception;

        throw $r45;

     label12:
        $r35 := @caughtexception;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("VelocimacroProxy.render() : exception VM = #");

        $r38 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String macroName>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        $r42 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r43 = interfaceinvoke $r42.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        virtualinvoke $r43.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r41, $r35);

        $r44 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r44.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r41, $r35);

        throw $r44;

        catch java.lang.RuntimeException from label09 to label10 with label11;
        catch java.lang.Exception from label09 to label10 with label12;
    }

    public void init(org.apache.velocity.runtime.RuntimeServices)
    {
        org.apache.velocity.runtime.RuntimeServices r1, $r3, $r4, $r6, $r10, $r11, $r13, $r14;
        int $i0;
        java.lang.Boolean r8, $r9;
        java.lang.String $r15;
        boolean $z0, $z1, $z2, $z3;
        org.apache.velocity.runtime.directive.VelocimacroProxy r0;
        org.apache.commons.collections.ExtendedProperties $r2;
        org.apache.velocity.runtime.log.Log $r5, $r12;
        java.lang.Object $r7;

        r0 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r1 := @parameter0: org.apache.velocity.runtime.RuntimeServices;

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc> = r1;

        $r2 = interfaceinvoke r1.<org.apache.velocity.runtime.RuntimeServices: org.apache.commons.collections.ExtendedProperties getConfiguration()>();

        $z0 = virtualinvoke $r2.<org.apache.commons.collections.ExtendedProperties: boolean getBoolean(java.lang.String,boolean)>("velocimacro.arguments.strict", 0);

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean strictArguments> = $z0;

        $r3 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $z1 = interfaceinvoke $r3.<org.apache.velocity.runtime.RuntimeServices: boolean getBoolean(java.lang.String,boolean)>("velocimacro.context.localscope", 0);

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean localContextScope> = $z1;

        $z2 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean localContextScope>;

        if $z2 == 0 goto label1;

        $r4 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r5 = interfaceinvoke $r4.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        $z3 = virtualinvoke $r5.<org.apache.velocity.runtime.log.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label1;

        $r6 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r7 = interfaceinvoke $r6.<org.apache.velocity.runtime.RuntimeServices: java.lang.Object getApplicationAttribute(java.lang.Object)>("velocimacro.context.localscope.warning");

        r8 = (java.lang.Boolean) $r7;

        if r8 != null goto label1;

        $r10 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r10.<org.apache.velocity.runtime.RuntimeServices: java.lang.Object setApplicationAttribute(java.lang.Object,java.lang.Object)>("velocimacro.context.localscope.warning", $r9);

        $r11 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r12 = interfaceinvoke $r11.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        virtualinvoke $r12.<org.apache.velocity.runtime.log.Log: void warn(java.lang.Object)>("The velocimacro.context.localscope feature is deprecated and will be removed in Velocity 2.0. Instead, please use the $macro scope to store references that must be local to your macros (e.g. #set( $macro.foo = \'bar\' ) and $macro.foo).  This $macro namespace is automatically created and destroyed for you at the beginning and end of the macro rendering.");

     label1:
        $r13 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $i0 = interfaceinvoke $r13.<org.apache.velocity.runtime.RuntimeServices: int getInt(java.lang.String)>("velocimacro.max.depth");

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: int maxCallDepth> = $i0;

        $r14 = r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r15 = interfaceinvoke $r14.<org.apache.velocity.runtime.RuntimeServices: java.lang.String getString(java.lang.String,java.lang.String)>("velocimacro.body.reference", "bodyContent");

        r0.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String bodyReference> = $r15;

        return;
    }

    private java.lang.String buildErrorMsg(org.apache.velocity.runtime.parser.node.Node, int)
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, i1, $i2;
        java.lang.String $r3, $r11, $r13;
        org.apache.velocity.runtime.parser.node.Node r12;
        org.apache.velocity.runtime.directive.VelocimacroProxy r2;

        r2 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r12 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        i1 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("VM #");

        $r3 = r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String macroName>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": too ");

        $i0 = virtualinvoke r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: int getNumArgs()>();

        if $i0 <= i1 goto label1;

        $r13 = "few";

        goto label2;

     label1:
        $r13 = "many";

     label2:
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" arguments to macro. Wanted ");

        $i2 = virtualinvoke r2.<org.apache.velocity.runtime.directive.VelocimacroProxy: int getNumArgs()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" got ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public void checkArgs(org.apache.velocity.context.InternalContextAdapter, org.apache.velocity.runtime.parser.node.Node, boolean)
    {
        org.apache.velocity.exception.TemplateInitException $r11;
        org.apache.velocity.runtime.RuntimeServices $r2, $r4;
        int $i0, $i1, i2, $i4;
        java.lang.String $r6, $r8, $r10;
        org.apache.velocity.runtime.parser.node.Node r0;
        boolean z0, $z1, $z2;
        org.apache.velocity.runtime.directive.VelocimacroProxy r1;
        org.apache.velocity.context.InternalContextAdapter r9;
        org.apache.velocity.runtime.log.Log $r3, $r5;

        r1 := @this: org.apache.velocity.runtime.directive.VelocimacroProxy;

        r9 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        r0 := @parameter1: org.apache.velocity.runtime.parser.node.Node;

        z0 := @parameter2: boolean;

        $i0 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: int jjtGetNumChildren()>();

        i2 = $i0;

        if z0 == 0 goto label1;

        $i4 = (int) -1;

        i2 = $i0 + $i4;

     label1:
        $i1 = virtualinvoke r1.<org.apache.velocity.runtime.directive.VelocimacroProxy: int getNumArgs()>();

        if $i1 == i2 goto label3;

        $z1 = r1.<org.apache.velocity.runtime.directive.VelocimacroProxy: boolean strictArguments>;

        if $z1 == 0 goto label2;

        $r11 = new org.apache.velocity.exception.TemplateInitException;

        $r8 = specialinvoke r1.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String buildErrorMsg(org.apache.velocity.runtime.parser.node.Node,int)>(r0, i2);

        $r10 = interfaceinvoke r9.<org.apache.velocity.context.InternalContextAdapter: java.lang.String getCurrentTemplateName()>();

        specialinvoke $r11.<org.apache.velocity.exception.TemplateInitException: void <init>(java.lang.String,java.lang.String,int,int)>($r8, $r10, 0, 0);

        throw $r11;

     label2:
        $r2 = r1.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r3 = interfaceinvoke $r2.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        $z2 = virtualinvoke $r3.<org.apache.velocity.runtime.log.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label3;

        $r4 = r1.<org.apache.velocity.runtime.directive.VelocimacroProxy: org.apache.velocity.runtime.RuntimeServices rsvc>;

        $r5 = interfaceinvoke $r4.<org.apache.velocity.runtime.RuntimeServices: org.apache.velocity.runtime.log.Log getLog()>();

        $r6 = specialinvoke r1.<org.apache.velocity.runtime.directive.VelocimacroProxy: java.lang.String buildErrorMsg(org.apache.velocity.runtime.parser.node.Node,int)>(r0, i2);

        virtualinvoke $r5.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>($r6);

        return;

     label3:
        return;
    }
}
