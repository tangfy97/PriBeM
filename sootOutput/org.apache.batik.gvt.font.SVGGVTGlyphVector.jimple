public final class org.apache.batik.gvt.font.SVGGVTGlyphVector extends java.lang.Object implements org.apache.batik.gvt.font.GVTGlyphVector
{
    public static final java.text.AttributedCharacterIterator$Attribute PAINT_INFO;
    private org.apache.batik.gvt.font.GVTFont font;
    private org.apache.batik.gvt.font.Glyph[] glyphs;
    private java.awt.font.FontRenderContext frc;
    private java.awt.geom.GeneralPath outline;
    private java.awt.geom.Rectangle2D logicalBounds;
    private java.awt.geom.Rectangle2D bounds2D;
    private java.awt.Shape[] glyphLogicalBounds;
    private boolean[] glyphVisible;
    private java.awt.geom.Point2D endPos;
    private org.apache.batik.gvt.text.TextPaintInfo cacheTPI;

    public void <init>(org.apache.batik.gvt.font.GVTFont, org.apache.batik.gvt.font.Glyph[], java.awt.font.FontRenderContext)
    {
        java.awt.geom.Point2D $r8, $r10, $r12;
        org.apache.batik.gvt.font.GVTFont r1;
        org.apache.batik.gvt.font.Glyph[] r2;
        java.awt.Shape[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.gvt.font.Glyph $r7, $r11;
        boolean[] $r5, $r6;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.awt.font.FontRenderContext r3;
        java.awt.geom.Point2D$Float $r9;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        r1 := @parameter0: org.apache.batik.gvt.font.GVTFont;

        r2 := @parameter1: org.apache.batik.gvt.font.Glyph[];

        r3 := @parameter2: java.awt.font.FontRenderContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font> = r1;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs> = r2;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.font.FontRenderContext frc> = r3;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        $i0 = lengthof r2;

        $r4 = newarray (java.awt.Shape)[$i0];

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds> = $r4;

        $i1 = lengthof r2;

        $r5 = newarray (boolean)[$i1];

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible> = $r5;

        i7 = 0;

        goto label2;

     label1:
        $r6 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $r6[i7] = 1;

        i7 = i7 + 1;

     label2:
        $i2 = lengthof r2;

        if i7 < $i2 goto label1;

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        $r7 = r2[$i4];

        $r8 = virtualinvoke $r7.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D getPosition()>();

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos> = $r8;

        $r9 = new java.awt.geom.Point2D$Float;

        $r10 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos>;

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        $r11 = r2[$i6];

        $f0 = virtualinvoke $r11.<org.apache.batik.gvt.font.Glyph: float getHorizAdvX()>();

        $d1 = (double) $f0;

        $d2 = $d0 + $d1;

        $f1 = (float) $d2;

        $r12 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos>;

        $d3 = virtualinvoke $r12.<java.awt.geom.Point2D: double getY()>();

        $f2 = (float) $d3;

        specialinvoke $r9.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f2);

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos> = $r9;

        return;
    }

    public org.apache.batik.gvt.font.GVTFont getFont()
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        org.apache.batik.gvt.font.GVTFont $r1;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font>;

        return $r1;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.awt.font.FontRenderContext $r1;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.font.FontRenderContext frc>;

        return $r1;
    }

    public int getGlyphCode(int) throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r9, $r10;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r8;
        org.apache.batik.gvt.font.Glyph $r11;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r9 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r9;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is out of bounds, should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r11 = $r10[i0];

        $i5 = virtualinvoke $r11.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        return $i5;
    }

    public int[] getGlyphCodes(int, int, int[]) throws java.lang.IndexOutOfBoundsException, java.lang.IllegalArgumentException
    {
        java.lang.IndexOutOfBoundsException $r4, $r12;
        int[] r26;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        org.apache.batik.gvt.font.Glyph[] $r1, $r2, $r17;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r18, $r21, $r22, $r23, $r24;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String $r11, $r19, $r25;
        org.apache.batik.gvt.font.Glyph $r3;
        java.lang.IllegalArgumentException $r20;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r26 := @parameter2: int[];

        if i0 >= 0 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("numEntries argument value, ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is illegal. It must be > 0.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label1:
        if i1 >= 0 goto label2;

        $r12 = new java.lang.IndexOutOfBoundsException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("beginGlyphIndex ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is out of bounds, should be between 0 and ");

        $r17 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i7 = lengthof $r17;

        $i8 = $i7 - 1;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label2:
        $i3 = i1 + i0;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i2 = lengthof $r1;

        if $i3 <= $i2 goto label3;

        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("beginGlyphIndex + numEntries (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") exceeds the number of glpyhs in this GlyphVector");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        if r26 != null goto label4;

        r26 = newarray (int)[i0];

     label4:
        i9 = i1;

        goto label6;

     label5:
        $i5 = i9 - i1;

        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r3 = $r2[i9];

        $i6 = virtualinvoke $r3.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        r26[$i5] = $i6;

        i9 = i9 + 1;

     label6:
        $i4 = i1 + i0;

        if i9 < $i4 goto label5;

        return r26;
    }

    public java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r10;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r10;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        return null;
    }

    public java.awt.Shape getGlyphLogicalBounds(int)
    {
        java.awt.Shape $r2, $r5;
        boolean[] $r3;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.awt.Shape[] $r1, $r4;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r2 = $r1[i0];

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r3[i0];

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: void computeGlyphLogicalBounds()>();

     label1:
        $r4 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r5 = $r4[i0];

        return $r5;
    }

    private void computeGlyphLogicalBounds()
    {
        byte $b2, $b3, $b4, $b5, $b6, $b8, $b9, $b14, $b15, $b16, $b21, $b22, $b23, $b24, $b25, $b26, $b27, $b31;
        java.awt.geom.GeneralPath $r51;
        java.awt.geom.Point2D$Double $r45, $r46, $r47, $r48, $r49, $r50;
        boolean[] $r2, $r31, $r35;
        java.awt.font.FontRenderContext $r36;
        java.awt.geom.Point2D $r9;
        java.awt.Shape[] $r34, $r43;
        java.awt.geom.Rectangle2D$Double $r44, $r52, $r53;
        int $i0, $i1, $i7, $i10, $i11, $i12, $i13, $i17, $i18, $i19, $i20, i28, $i29, i30, $i32, i33, $i34, i35, $i36, i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;
        org.apache.batik.gvt.font.GVTLineMetrics $r38;
        java.awt.geom.Rectangle2D $r18, $r21, $r24, $r27, $r30, $r33, $r40;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r4, $r32;
        java.awt.geom.AffineTransform $r3, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.awt.Shape $r11, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r28, $r29, $r39;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        float $f0, $f1, $f2, $f3, f4, f5, f6, f7, f8, f9;
        org.apache.batik.gvt.font.GVTFont $r1, $r37;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, d63, d64, $d65, d66, d67, d68, $d69, $d70, d71, d72, d73, $d74, $d75;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        f4 = 0.0F;

        f5 = 0.0F;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font>;

        if $r1 == null goto label01;

        $r37 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font>;

        $r36 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.font.FontRenderContext frc>;

        $r38 = interfaceinvoke $r37.<org.apache.batik.gvt.font.GVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("By", $r36);

        f4 = virtualinvoke $r38.<org.apache.batik.gvt.font.GVTLineMetrics: float getAscent()>();

        $f3 = virtualinvoke $r38.<org.apache.batik.gvt.font.GVTLineMetrics: float getDescent()>();

        f5 = $f3;

        $b26 = $f3 cmpg 0.0F;

        $i40 = (int) $b26;

        if $i40 >= 0 goto label01;

        f5 = neg $f3;

     label01:
        $b27 = f4 cmpl 0.0F;

        if $b27 != 0 goto label07;

        f6 = 0.0F;

        f7 = 0.0F;

        i28 = 0;

        goto label06;

     label02:
        $r31 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z5 = $r31[i28];

        if $z5 != 0 goto label03;

        goto label05;

     label03:
        $r32 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)>(i28);

        $r33 = virtualinvoke $r32.<org.apache.batik.gvt.font.GVTGlyphMetrics: java.awt.geom.Rectangle2D getBounds2D()>();

        $d58 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getMinY()>();

        $d59 = neg $d58;

        f8 = (float) $d59;

        $d60 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getHeight()>();

        $d61 = (double) f8;

        $d62 = $d60 - $d61;

        f9 = (float) $d62;

        $b24 = f8 cmpl f6;

        $i41 = (int) $b24;

        if $i41 <= 0 goto label04;

        f6 = f8;

     label04:
        $b25 = f9 cmpl f7;

        $i42 = (int) $b25;

        if $i42 <= 0 goto label05;

        f7 = f9;

     label05:
        i28 = i28 + 1;

     label06:
        $i29 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i28 < $i29 goto label02;

        f4 = f6;

        f5 = f7;

     label07:
        $i0 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        $r34 = newarray (java.awt.Shape)[$i0];

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        $r35 = newarray (boolean)[$i1];

        d63 = -1.0;

        d64 = -1.0;

        i30 = 0;

        goto label18;

     label08:
        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r2[i30];

        if $z0 != 0 goto label09;

        $r34[i30] = null;

        goto label17;

     label09:
        $r3 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>(i30);

        $r4 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)>(i30);

        $r44 = new java.awt.geom.Rectangle2D$Double;

        $f0 = neg f4;

        $d0 = (double) $f0;

        $f1 = virtualinvoke $r4.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getHorizontalAdvance()>();

        $d2 = (double) $f1;

        $f2 = f4 + f5;

        $d1 = (double) $f2;

        specialinvoke $r44.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, $d0, $d2, $d1);

        $z1 = virtualinvoke $r44.<java.awt.geom.RectangularShape: boolean isEmpty()>();

        if $z1 == 0 goto label11;

        if i30 <= 0 goto label10;

        $i7 = i30 - 1;

        $z2 = $r35[$i7];

        $r35[i30] = $z2;

        goto label17;

     label10:
        $r35[i30] = 1;

        goto label17;

     label11:
        $r45 = new java.awt.geom.Point2D$Double;

        $d3 = virtualinvoke $r44.<java.awt.geom.RectangularShape: double getMinX()>();

        $d4 = virtualinvoke $r44.<java.awt.geom.RectangularShape: double getMinY()>();

        specialinvoke $r45.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d4);

        $r46 = new java.awt.geom.Point2D$Double;

        $d5 = virtualinvoke $r44.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d6 = virtualinvoke $r44.<java.awt.geom.RectangularShape: double getMinY()>();

        specialinvoke $r46.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d6);

        $r47 = new java.awt.geom.Point2D$Double;

        $d7 = virtualinvoke $r44.<java.awt.geom.RectangularShape: double getMinX()>();

        $d8 = virtualinvoke $r44.<java.awt.geom.RectangularShape: double getMaxY()>();

        specialinvoke $r47.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d8);

        $r9 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i30);

        $d9 = virtualinvoke $r9.<java.awt.geom.Point2D: double getX()>();

        $d10 = virtualinvoke $r9.<java.awt.geom.Point2D: double getY()>();

        $r10 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d9, $d10);

        if $r3 == null goto label12;

        virtualinvoke $r10.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r3);

     label12:
        $r11 = virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r44);

        $r34[i30] = $r11;

        $r48 = new java.awt.geom.Point2D$Double;

        specialinvoke $r48.<java.awt.geom.Point2D$Double: void <init>()>();

        $r49 = new java.awt.geom.Point2D$Double;

        specialinvoke $r49.<java.awt.geom.Point2D$Double: void <init>()>();

        $r50 = new java.awt.geom.Point2D$Double;

        specialinvoke $r50.<java.awt.geom.Point2D$Double: void <init>()>();

        virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r45, $r48);

        virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r46, $r49);

        virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r47, $r50);

        $d11 = virtualinvoke $r48.<java.awt.geom.Point2D: double getX()>();

        $d12 = virtualinvoke $r49.<java.awt.geom.Point2D: double getX()>();

        $d24 = $d11 - $d12;

        $d13 = virtualinvoke $r48.<java.awt.geom.Point2D: double getX()>();

        $d14 = virtualinvoke $r50.<java.awt.geom.Point2D: double getX()>();

        $d25 = $d13 - $d14;

        $d15 = virtualinvoke $r48.<java.awt.geom.Point2D: double getY()>();

        $d16 = virtualinvoke $r49.<java.awt.geom.Point2D: double getY()>();

        $d26 = $d15 - $d16;

        $d17 = virtualinvoke $r48.<java.awt.geom.Point2D: double getY()>();

        $d18 = virtualinvoke $r50.<java.awt.geom.Point2D: double getY()>();

        $d27 = $d17 - $d18;

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d24);

        $b2 = $d19 cmpg 0.001;

        $i43 = (int) $b2;

        if $i43 >= 0 goto label13;

        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $b6 = $d23 cmpg 0.001;

        $i44 = (int) $b6;

        if $i44 >= 0 goto label13;

        $r35[i30] = 0;

        goto label15;

     label13:
        $d20 = staticinvoke <java.lang.Math: double abs(double)>($d25);

        $b3 = $d20 cmpg 0.001;

        $i45 = (int) $b3;

        if $i45 >= 0 goto label14;

        $d22 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $b5 = $d22 cmpg 0.001;

        $i46 = (int) $b5;

        if $i46 >= 0 goto label14;

        $r35[i30] = 0;

        goto label15;

     label14:
        $r35[i30] = 1;

     label15:
        $r39 = $r34[i30];

        $r40 = interfaceinvoke $r39.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d65 = virtualinvoke $r40.<java.awt.geom.RectangularShape: double getWidth()>();

        $b31 = $d65 cmpl d63;

        $i47 = (int) $b31;

        if $i47 <= 0 goto label16;

        d63 = virtualinvoke $r40.<java.awt.geom.RectangularShape: double getWidth()>();

     label16:
        $d21 = virtualinvoke $r40.<java.awt.geom.RectangularShape: double getHeight()>();

        $b4 = $d21 cmpl d64;

        $i48 = (int) $b4;

        if $i48 <= 0 goto label17;

        d64 = virtualinvoke $r40.<java.awt.geom.RectangularShape: double getHeight()>();

     label17:
        i30 = i30 + 1;

     label18:
        $i32 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i30 < $i32 goto label08;

        $r51 = new java.awt.geom.GeneralPath;

        specialinvoke $r51.<java.awt.geom.GeneralPath: void <init>()>();

        i33 = 0;

        goto label21;

     label19:
        $r16 = $r34[i33];

        if $r16 == null goto label20;

        $r17 = $r34[i33];

        virtualinvoke $r51.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r17, 0);

     label20:
        i33 = i33 + 1;

     label21:
        $i34 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i33 < $i34 goto label19;

        $r18 = virtualinvoke $r51.<java.awt.geom.GeneralPath: java.awt.geom.Rectangle2D getBounds2D()>();

        $d28 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getHeight()>();

        $d29 = d64 * 1.5;

        $b8 = $d28 cmpg $d29;

        $i49 = (int) $b8;

        if $i49 >= 0 goto label28;

        i35 = 0;

        goto label27;

     label22:
        $z4 = $r35[i35];

        if $z4 == 0 goto label23;

        goto label26;

     label23:
        $r25 = $r34[i35];

        if $r25 != null goto label24;

        goto label26;

     label24:
        $r26 = $r34[i35];

        $r27 = interfaceinvoke $r26.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d45 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getMinX()>();

        $d46 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getWidth()>();

        d66 = $d46;

        $i17 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        $i18 = $i17 - 1;

        if i35 >= $i18 goto label25;

        $i19 = i35 + 1;

        $r28 = $r34[$i19];

        if $r28 == null goto label25;

        $i20 = i35 + 1;

        $r29 = $r34[$i20];

        $r30 = interfaceinvoke $r29.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d47 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getX()>();

        $b21 = $d47 cmpl $d45;

        $i50 = (int) $b21;

        if $i50 <= 0 goto label25;

        $d48 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getX()>();

        d67 = $d48 - $d45;

        $d49 = $d46 * 1.15;

        $b22 = d67 cmpg $d49;

        $i51 = (int) $b22;

        if $i51 >= 0 goto label25;

        $d50 = $d46 * 0.85;

        $b23 = d67 cmpl $d50;

        $i52 = (int) $b23;

        if $i52 <= 0 goto label25;

        $d51 = d67 - $d46;

        d68 = $d51 * 0.5;

        d66 = $d46 + d68;

        $d52 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getX()>();

        $d53 = $d52 - d68;

        $d54 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getY()>();

        $d55 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getWidth()>();

        $d56 = $d55 + d68;

        $d57 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getHeight()>();

        virtualinvoke $r30.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d53, $d54, $d56, $d57);

     label25:
        $r52 = new java.awt.geom.Rectangle2D$Double;

        $d69 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getMinY()>();

        $d70 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getHeight()>();

        specialinvoke $r52.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d45, $d69, d66, $d70);

        $r34[i35] = $r52;

     label26:
        i35 = i35 + 1;

     label27:
        $i36 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i35 < $i36 goto label22;

        goto label35;

     label28:
        $d30 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getWidth()>();

        $d31 = d63 * 1.5;

        $b9 = $d30 cmpg $d31;

        $i53 = (int) $b9;

        if $i53 >= 0 goto label35;

        i37 = 0;

        goto label34;

     label29:
        $z3 = $r35[i37];

        if $z3 == 0 goto label30;

        goto label33;

     label30:
        $r19 = $r34[i37];

        if $r19 != null goto label31;

        goto label33;

     label31:
        $r20 = $r34[i37];

        $r21 = interfaceinvoke $r20.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d32 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getMinY()>();

        $d33 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getHeight()>();

        d71 = $d33;

        $i10 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        $i11 = $i10 - 1;

        if i37 >= $i11 goto label32;

        $i12 = i37 + 1;

        $r22 = $r34[$i12];

        if $r22 == null goto label32;

        $i13 = i37 + 1;

        $r23 = $r34[$i13];

        $r24 = interfaceinvoke $r23.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d34 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getY()>();

        $b14 = $d34 cmpl $d32;

        $i54 = (int) $b14;

        if $i54 <= 0 goto label32;

        $d35 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getY()>();

        d72 = $d35 - $d32;

        $d36 = $d33 * 1.15;

        $b15 = d72 cmpg $d36;

        $i55 = (int) $b15;

        if $i55 >= 0 goto label32;

        $d37 = $d33 * 0.85;

        $b16 = d72 cmpl $d37;

        $i56 = (int) $b16;

        if $i56 <= 0 goto label32;

        $d38 = d72 - $d33;

        d73 = $d38 * 0.5;

        d71 = $d33 + d73;

        $d39 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getX()>();

        $d40 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getY()>();

        $d41 = $d40 - d73;

        $d42 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getWidth()>();

        $d43 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getHeight()>();

        $d44 = $d43 + d73;

        virtualinvoke $r24.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d39, $d41, $d42, $d44);

     label32:
        $r53 = new java.awt.geom.Rectangle2D$Double;

        $d74 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getMinX()>();

        $d75 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getWidth()>();

        specialinvoke $r53.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d74, $d32, $d75, d71);

        $r34[i37] = $r53;

     label33:
        i37 = i37 + 1;

     label34:
        $i38 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i37 < $i38 goto label29;

     label35:
        $r43 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $i39 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r34, 0, $r43, 0, $i39);

        return;
    }

    public org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r14, $r28;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;
        float $f0, $f1;
        org.apache.batik.gvt.font.GVTFont $r15, $r18, $r23;
        org.apache.batik.gvt.font.Glyph[] $r6, $r10, $r11, $r12, $r16, $r19, $r21, $r24, $r26;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r9;
        org.apache.batik.gvt.font.Glyph $r13, $r17, $r20, $r22, $r25, $r27;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r10;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("idx: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        $r11 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i5 = lengthof $r11;

        $i6 = $i5 - 1;

        if i0 >= $i6 goto label3;

        $r15 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font>;

        if $r15 == null goto label3;

        $r18 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font>;

        $r16 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r17 = $r16[i0];

        $i7 = virtualinvoke $r17.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        $r19 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i8 = i0 + 1;

        $r20 = $r19[$i8];

        $i9 = virtualinvoke $r20.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        $f0 = interfaceinvoke $r18.<org.apache.batik.gvt.font.GVTFont: float getHKern(int,int)>($i7, $i9);

        $r23 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.GVTFont font>;

        $r21 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r22 = $r21[i0];

        $i10 = virtualinvoke $r22.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        $r24 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i11 = i0 + 1;

        $r25 = $r24[$i11];

        $i12 = virtualinvoke $r25.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        $f1 = interfaceinvoke $r23.<org.apache.batik.gvt.font.GVTFont: float getVKern(int,int)>($i10, $i12);

        $r26 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r27 = $r26[i0];

        $r28 = virtualinvoke $r27.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(float,float)>($f0, $f1);

        return $r28;

     label3:
        $r12 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r13 = $r12[i0];

        $r14 = virtualinvoke $r13.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics()>();

        return $r14;
    }

    public java.awt.Shape getGlyphOutline(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r10, $r11;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9;
        org.apache.batik.gvt.font.Glyph $r12;
        java.awt.Shape $r13;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r10;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        $r11 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r12 = $r11[i0];

        $r13 = virtualinvoke $r12.<org.apache.batik.gvt.font.Glyph: java.awt.Shape getOutline()>();

        return $r13;
    }

    public java.awt.geom.Rectangle2D getGlyphCellBounds(int)
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.awt.Shape $r1;
        java.awt.geom.Rectangle2D $r2;
        int i0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>(i0);

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.geom.Point2D getGlyphPosition(int)
    {
        java.lang.IndexOutOfBoundsException $r2;
        java.awt.geom.Point2D $r14, $r15;
        org.apache.batik.gvt.font.Glyph[] $r1, $r7, $r11, $r12;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r10;
        org.apache.batik.gvt.font.Glyph $r13;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r1;

        if i0 != $i1 goto label1;

        $r15 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos>;

        return $r15;

     label1:
        if i0 < 0 goto label2;

        $r11 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i4 = lengthof $r11;

        $i5 = $i4 - 1;

        if i0 <= $i5 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r7 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i2 = lengthof $r7;

        $i3 = $i2 - 1;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label3:
        $r12 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r13 = $r12[i0];

        $r14 = virtualinvoke $r13.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D getPosition()>();

        return $r14;
    }

    public float[] getGlyphPositions(int, int, float[])
    {
        java.lang.IndexOutOfBoundsException $r34, $r36;
        java.awt.geom.Point2D $r5, $r6, $r7;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        float $f0, $f1, $f2, $f3;
        float[] r30;
        org.apache.batik.gvt.font.Glyph[] $r1, $r2, $r3, $r21;
        java.lang.StringBuffer $r10, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r22, $r26, $r27, $r28, $r31, $r33, $r35;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, $i22;
        java.lang.String $r15, $r23, $r29;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.gvt.font.Glyph $r4;
        java.lang.IllegalArgumentException $r32;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        i19 := @parameter1: int;

        r30 := @parameter2: float[];

        if i19 >= 0 goto label1;

        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("numEntries argument value, ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i19);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is illegal. It must be > 0.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r32;

     label1:
        if i0 >= 0 goto label2;

        $r34 = new java.lang.IndexOutOfBoundsException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("beginGlyphIndex ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is out of bounds, should be between 0 and ");

        $r21 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i17 = lengthof $r21;

        $i18 = $i17 - 1;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r23);

        throw $r34;

     label2:
        $i3 = i0 + i19;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r1;

        $i2 = $i1 + 1;

        if $i3 <= $i2 goto label3;

        $r36 = new java.lang.IndexOutOfBoundsException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("beginGlyphIndex + numEntries (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i19);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") exceeds the number of glpyhs in this GlyphVector");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r15);

        throw $r36;

     label3:
        if r30 != null goto label4;

        $i16 = i19 * 2;

        r30 = newarray (float)[$i16];

     label4:
        $i6 = i0 + i19;

        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i4 = lengthof $r2;

        $i5 = $i4 + 1;

        if $i6 != $i5 goto label5;

        $i22 = (int) -1;

        i19 = i19 + $i22;

        $i13 = i19 * 2;

        $r6 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos>;

        $d2 = virtualinvoke $r6.<java.awt.geom.Point2D: double getX()>();

        $f2 = (float) $d2;

        r30[$i13] = $f2;

        $i14 = i19 * 2;

        $i15 = $i14 + 1;

        $r7 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos>;

        $d3 = virtualinvoke $r7.<java.awt.geom.Point2D: double getY()>();

        $f3 = (float) $d3;

        r30[$i15] = $f3;

     label5:
        i20 = i0;

        goto label7;

     label6:
        $r3 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r4 = $r3[i20];

        $r5 = virtualinvoke $r4.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D getPosition()>();

        $i8 = i20 - i0;

        $i9 = $i8 * 2;

        $d0 = virtualinvoke $r5.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r30[$i9] = $f0;

        $i10 = i20 - i0;

        $i11 = $i10 * 2;

        $i12 = $i11 + 1;

        $d1 = virtualinvoke $r5.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r30[$i12] = $f1;

        i20 = i20 + 1;

     label7:
        $i7 = i0 + i19;

        if i20 < $i7 goto label6;

        return r30;
    }

    public java.awt.geom.AffineTransform getGlyphTransform(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r10, $r11;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9;
        org.apache.batik.gvt.font.Glyph $r12;
        java.awt.geom.AffineTransform $r13;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r10;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        $r11 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r12 = $r11[i0];

        $r13 = virtualinvoke $r12.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform getTransform()>();

        return $r13;
    }

    public java.awt.Shape getGlyphVisualBounds(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r10, $r11;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9;
        org.apache.batik.gvt.font.Glyph $r12;
        java.awt.Shape $r13;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r10;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        $r11 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r12 = $r11[i0];

        $r13 = virtualinvoke $r12.<org.apache.batik.gvt.font.Glyph: java.awt.Shape getOutline()>();

        return $r13;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.text.AttributedCharacterIterator)
    {
        java.awt.geom.Rectangle2D $r5, $r6, $r8, $r13, $r15, r16;
        java.awt.geom.Rectangle2D$Float $r9;
        java.text.AttributedCharacterIterator$Attribute $r1;
        org.apache.batik.gvt.font.Glyph[] $r11;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        org.apache.batik.gvt.font.Glyph $r12;
        boolean[] $r10;
        org.apache.batik.gvt.text.TextPaintInfo r3, $r7, $r14;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r4;
        java.text.AttributedCharacterIterator r0;
        java.lang.Object $r2;

        r4 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        interfaceinvoke r0.<java.text.CharacterIterator: char first()>();

        $r1 = <org.apache.batik.gvt.font.SVGGVTGlyphVector: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        r3 = (org.apache.batik.gvt.text.TextPaintInfo) $r2;

        $r5 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        if $r5 == null goto label1;

        $r14 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.text.TextPaintInfo cacheTPI>;

        $z2 = staticinvoke <org.apache.batik.gvt.text.TextPaintInfo: boolean equivilent(org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.gvt.text.TextPaintInfo)>(r3, $r14);

        if $z2 == 0 goto label1;

        $r15 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        return $r15;

     label1:
        r16 = null;

        $z0 = r3.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible>;

        if $z0 == 0 goto label8;

        i0 = 0;

        goto label7;

     label2:
        $r10 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z1 = $r10[i0];

        if $z1 != 0 goto label3;

        goto label6;

     label3:
        $r11 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r12 = $r11[i0];

        $r13 = virtualinvoke $r12.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D getBounds2D()>();

        if $r13 != null goto label4;

        goto label6;

     label4:
        if r16 != null goto label5;

        r16 = $r13;

        goto label6;

     label5:
        virtualinvoke r16.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r13);

     label6:
        i0 = i0 + 1;

     label7:
        $i1 = virtualinvoke r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i0 < $i1 goto label2;

     label8:
        r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = r16;

        $r6 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        if $r6 != null goto label9;

        $r9 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r9.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = $r9;

     label9:
        $r7 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r7.<org.apache.batik.gvt.text.TextPaintInfo: void <init>(org.apache.batik.gvt.text.TextPaintInfo)>(r3);

        r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.text.TextPaintInfo cacheTPI> = $r7;

        $r8 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        return $r8;
    }

    public java.awt.geom.Rectangle2D getLogicalBounds()
    {
        java.awt.Shape $r4;
        java.awt.geom.Rectangle2D $r1, $r2, $r5;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        int i0, $i1;
        java.awt.geom.GeneralPath $r3;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        if $r1 != null goto label4;

        $r3 = new java.awt.geom.GeneralPath;

        specialinvoke $r3.<java.awt.geom.GeneralPath: void <init>()>();

        i0 = 0;

        goto label3;

     label1:
        $r4 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>(i0);

        if $r4 == null goto label2;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r4, 0);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: int getNumGlyphs()>();

        if i0 < $i1 goto label1;

        $r5 = virtualinvoke $r3.<java.awt.geom.GeneralPath: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = $r5;

     label4:
        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        return $r2;
    }

    public int getNumGlyphs()
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        org.apache.batik.gvt.font.Glyph[] $r1, $r2;
        int $i0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i0 = lengthof $r2;

        return $i0;

     label1:
        return 0;
    }

    public java.awt.Shape getOutline()
    {
        org.apache.batik.gvt.font.Glyph $r6;
        java.awt.Shape $r7;
        boolean[] $r4;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        org.apache.batik.gvt.font.Glyph[] $r5, $r9;
        int i0, $i1;
        java.awt.geom.GeneralPath $r1, $r2, $r3, $r8;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        if $r1 != null goto label4;

        $r3 = new java.awt.geom.GeneralPath;

        specialinvoke $r3.<java.awt.geom.GeneralPath: void <init>()>();

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline> = $r3;

        i0 = 0;

        goto label3;

     label1:
        $r4 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r4[i0];

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r6.<org.apache.batik.gvt.font.Glyph: java.awt.Shape getOutline()>();

        if $r7 == null goto label2;

        $r8 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        virtualinvoke $r8.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r7, 0);

     label2:
        i0 = i0 + 1;

     label3:
        $r9 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r9;

        if i0 < $i1 goto label1;

     label4:
        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        return $r2;
    }

    public java.awt.Shape getOutline(float, float)
    {
        java.awt.Shape $r1, $r3;
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        float f0, f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape getOutline()>();

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        return $r3;
    }

    public java.awt.geom.Rectangle2D getGeometricBounds()
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.awt.Shape $r1;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape getOutline()>();

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public void performDefaultLayout()
    {
        java.awt.Shape[] $r2, $r10;
        boolean $z0, $z1;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        float $f0, f1, $f2, $f3, f4, $f5;
        org.apache.batik.gvt.font.Glyph[] $r1, $r4, $r5, $r8, $r9, $r14, $r18;
        int $i0, $i2, $i3, i5, i6, $i7, i8, $i9;
        java.lang.String $r3, $r7;
        org.apache.batik.gvt.font.Glyph $r6, r13, r15, r16;
        char $c1, $c4;
        java.awt.geom.Point2D$Float $r11, $r12, $r17;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        f4 = 0.0F;

        i5 = 0;

        goto label10;

     label01:
        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        r13 = $r1[i5];

        virtualinvoke r13.<org.apache.batik.gvt.font.Glyph: void setTransform(java.awt.geom.AffineTransform)>(null);

        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r2[i5] = null;

        $r3 = virtualinvoke r13.<org.apache.batik.gvt.font.Glyph: java.lang.String getUnicode()>();

        if $r3 == null goto label09;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label09;

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <org.apache.batik.gvt.text.ArabicTextHandler: boolean arabicCharTransparent(char)>($c1);

        if $z0 == 0 goto label09;

        i6 = i5 + 1;

        goto label05;

     label02:
        $r5 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r6 = $r5[i6];

        $r7 = virtualinvoke $r6.<org.apache.batik.gvt.font.Glyph: java.lang.String getUnicode()>();

        if $r7 == null goto label06;

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i3 != 0 goto label03;

        goto label06;

     label03:
        $c4 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <org.apache.batik.gvt.text.ArabicTextHandler: boolean arabicCharTransparent(char)>($c4);

        if $z1 != 0 goto label04;

        goto label06;

     label04:
        i6 = i6 + 1;

     label05:
        $r4 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i2 = lengthof $r4;

        if i6 < $i2 goto label02;

     label06:
        $r14 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i7 = lengthof $r14;

        if i6 == $i7 goto label09;

        $r8 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        r15 = $r8[i6];

        $f0 = virtualinvoke r15.<org.apache.batik.gvt.font.Glyph: float getHorizAdvX()>();

        f1 = f4 + $f0;

        i8 = i5;

        goto label08;

     label07:
        $r9 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        r16 = $r9[i8];

        virtualinvoke r16.<org.apache.batik.gvt.font.Glyph: void setTransform(java.awt.geom.AffineTransform)>(null);

        $r10 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r10[i5] = null;

        $r11 = new java.awt.geom.Point2D$Float;

        $f2 = virtualinvoke r16.<org.apache.batik.gvt.font.Glyph: float getHorizAdvX()>();

        $f3 = f1 - $f2;

        specialinvoke $r11.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f3, 0.0F);

        virtualinvoke r16.<org.apache.batik.gvt.font.Glyph: void setPosition(java.awt.geom.Point2D)>($r11);

        i8 = i8 + 1;

     label08:
        if i8 < i6 goto label07;

        i5 = i6;

        r13 = r15;

     label09:
        $r17 = new java.awt.geom.Point2D$Float;

        specialinvoke $r17.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f4, 0.0F);

        virtualinvoke r13.<org.apache.batik.gvt.font.Glyph: void setPosition(java.awt.geom.Point2D)>($r17);

        $f5 = virtualinvoke r13.<org.apache.batik.gvt.font.Glyph: float getHorizAdvX()>();

        f4 = f4 + $f5;

        i5 = i5 + 1;

     label10:
        $r18 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i9 = lengthof $r18;

        if i5 < $i9 goto label01;

        $r12 = new java.awt.geom.Point2D$Float;

        specialinvoke $r12.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f4, 0.0F);

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos> = $r12;

        return;
    }

    public void setGlyphPosition(int, java.awt.geom.Point2D) throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r2;
        java.awt.geom.Point2D r13, $r17;
        org.apache.batik.gvt.font.Glyph[] $r1, $r7, $r11, $r12;
        java.awt.Shape[] $r15;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r10;
        org.apache.batik.gvt.font.Glyph $r14;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.lang.Object $r16;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        r13 := @parameter1: java.awt.geom.Point2D;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r1;

        if i0 != $i1 goto label1;

        $r16 = virtualinvoke r13.<java.awt.geom.Point2D: java.lang.Object clone()>();

        $r17 = (java.awt.geom.Point2D) $r16;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Point2D endPos> = $r17;

        return;

     label1:
        if i0 < 0 goto label2;

        $r11 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i4 = lengthof $r11;

        $i5 = $i4 - 1;

        if i0 <= $i5 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r7 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i2 = lengthof $r7;

        $i3 = $i2 - 1;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label3:
        $r12 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r14 = $r12[i0];

        virtualinvoke $r14.<org.apache.batik.gvt.font.Glyph: void setPosition(java.awt.geom.Point2D)>(r13);

        $r15 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r15[i0] = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        return;
    }

    public void setGlyphTransform(int, java.awt.geom.AffineTransform)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r10, $r11;
        java.awt.Shape[] $r14;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9;
        org.apache.batik.gvt.font.Glyph $r13;
        java.awt.geom.AffineTransform r12;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r5;

        r5 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        r12 := @parameter1: java.awt.geom.AffineTransform;

        if i0 < 0 goto label1;

        $r10 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i3 = lengthof $r10;

        $i4 = $i3 - 1;

        if i0 <= $i4 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("glyphIndex: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", is out of bounds. Should be between 0 and ");

        $r6 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        $r11 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r13 = $r11[i0];

        virtualinvoke $r13.<org.apache.batik.gvt.font.Glyph: void setTransform(java.awt.geom.AffineTransform)>(r12);

        $r14 = r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r14[i0] = null;

        r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        r5.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        return;
    }

    public void setGlyphVisible(int, boolean)
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        java.awt.Shape[] $r3;
        int i0;
        boolean[] $r1, $r2;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z1 = $r1[i0];

        if z0 != $z1 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $r2[i0] = z0;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        $r3 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r3[i0] = null;

        return;
    }

    public boolean isGlyphVisible(int)
    {
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r1[i0];

        return $z0;
    }

    public int getCharacterCount(int, int)
    {
        org.apache.batik.gvt.font.Glyph[] $r1, $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, $i10;
        java.lang.String $r4;
        org.apache.batik.gvt.font.Glyph r3;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        i7 = 0;

        if i5 >= 0 goto label1;

        i5 = 0;

     label1:
        $r1 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        if i6 <= $i1 goto label2;

        $r5 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i4 = lengthof $r5;

        i6 = $i4 - 1;

     label2:
        i8 = i5;

        goto label6;

     label3:
        $r2 = r0.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        r3 = $r2[i8];

        $i2 = virtualinvoke r3.<org.apache.batik.gvt.font.Glyph: int getGlyphCode()>();

        $i10 = (int) -1;

        if $i2 != $i10 goto label4;

        i7 = i7 + 1;

        goto label5;

     label4:
        $r4 = virtualinvoke r3.<org.apache.batik.gvt.font.Glyph: java.lang.String getUnicode()>();

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        i7 = i7 + $i3;

     label5:
        i8 = i8 + 1;

     label6:
        if i8 <= i6 goto label3;

        return i7;
    }

    public void draw(java.awt.Graphics2D, java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.font.Glyph $r8;
        boolean[] $r5;
        org.apache.batik.gvt.text.TextPaintInfo r3;
        org.apache.batik.gvt.font.SVGGVTGlyphVector r4;
        java.text.AttributedCharacterIterator$Attribute $r1;
        java.text.AttributedCharacterIterator r0;
        org.apache.batik.gvt.font.Glyph[] $r6, $r9;
        java.awt.Graphics2D r7;
        int i0, $i1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r4 := @this: org.apache.batik.gvt.font.SVGGVTGlyphVector;

        r7 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.text.AttributedCharacterIterator;

        interfaceinvoke r0.<java.text.CharacterIterator: char first()>();

        $r1 = <org.apache.batik.gvt.font.SVGGVTGlyphVector: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        r3 = (org.apache.batik.gvt.text.TextPaintInfo) $r2;

        $z0 = r3.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible>;

        if $z0 != 0 goto label1;

        return;

     label1:
        i0 = 0;

        goto label4;

     label2:
        $r5 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: boolean[] glyphVisible>;

        $z1 = $r5[i0];

        if $z1 == 0 goto label3;

        $r6 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $r8 = $r6[i0];

        virtualinvoke $r8.<org.apache.batik.gvt.font.Glyph: void draw(java.awt.Graphics2D)>(r7);

     label3:
        i0 = i0 + 1;

     label4:
        $r9 = r4.<org.apache.batik.gvt.font.SVGGVTGlyphVector: org.apache.batik.gvt.font.Glyph[] glyphs>;

        $i1 = lengthof $r9;

        if i0 < $i1 goto label2;

        return;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        <org.apache.batik.gvt.font.SVGGVTGlyphVector: java.text.AttributedCharacterIterator$Attribute PAINT_INFO> = $r0;

        return;
    }
}
