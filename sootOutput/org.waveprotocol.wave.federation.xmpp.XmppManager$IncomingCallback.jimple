class org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.PacketCallback
{
    private final org.xmpp.packet.Packet request;
    private boolean complete;
    final org.waveprotocol.wave.federation.xmpp.XmppManager this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager, org.xmpp.packet.Packet)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager r1;
        org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback r0;
        org.xmpp.packet.Packet r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r2 := @parameter1: org.xmpp.packet.Packet;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.waveprotocol.wave.federation.xmpp.XmppManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: boolean complete> = 0;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.xmpp.packet.Packet request> = r2;

        return;
    }

    public void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        java.lang.Object[] $r1;
        org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r3;
        org.xmpp.packet.Packet $r2, $r4;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback;

        r3 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $z0 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: boolean complete>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.xmpp.packet.Packet request>;

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Must not callback multiple times for incoming packet: %s", $r1);

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: boolean complete> = 1;

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.waveprotocol.wave.federation.xmpp.XmppManager this$0>;

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.xmpp.packet.Packet request>;

        virtualinvoke $r5.<org.waveprotocol.wave.federation.xmpp.XmppManager: void sendErrorResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r4, r3);

        return;
    }

    public void run(org.xmpp.packet.Packet)
    {
        java.lang.Object[] $r1;
        org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport $r4;
        org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback r0;
        org.xmpp.packet.Packet $r2, r5;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback;

        r5 := @parameter0: org.xmpp.packet.Packet;

        $z0 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: boolean complete>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.xmpp.packet.Packet request>;

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Must not callback multiple times for incoming packet: %s", $r1);

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: boolean complete> = 1;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$IncomingCallback: org.waveprotocol.wave.federation.xmpp.XmppManager this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppManager: org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport access$000(org.waveprotocol.wave.federation.xmpp.XmppManager)>($r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport: void sendPacket(org.xmpp.packet.Packet)>(r5);

        return;
    }
}
