public final class org.waveprotocol.wave.testing.DeferredExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
    private final java.util.concurrent.Semaphore numTasks;
    private java.util.List thingsToExecute;
    private boolean shutdownCalled;

    public void <init>()
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.concurrent.Semaphore $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.Semaphore;

        specialinvoke $r1.<java.util.concurrent.Semaphore: void <init>(int)>(0);

        r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.concurrent.Semaphore numTasks> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute> = $r2;

        r0.<org.waveprotocol.wave.testing.DeferredExecutor: boolean shutdownCalled> = 0;

        return;
    }

    public void execute(java.lang.Runnable) throws java.util.concurrent.RejectedExecutionException
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.List $r2;
        java.util.concurrent.RejectedExecutionException $r4;
        java.util.concurrent.Semaphore $r3;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $z0 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: boolean shutdownCalled>;

        if $z0 == 0 goto label1;

        $r4 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r4.<java.util.concurrent.RejectedExecutionException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.concurrent.Semaphore numTasks>;

        virtualinvoke $r3.<java.util.concurrent.Semaphore: void release()>();

        return;
    }

    public java.util.List shutdown()
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.List $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        r0.<org.waveprotocol.wave.testing.DeferredExecutor: boolean shutdownCalled> = 1;

        virtualinvoke r0.<org.waveprotocol.wave.testing.DeferredExecutor: void runQueuedCommands()>();

        $r1 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute>;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r1);

        $r3 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return $r2;
    }

    public boolean isShutdown()
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        $z0 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: boolean shutdownCalled>;

        return $z0;
    }

    public void checkShutdown()
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.List $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.testing.DeferredExecutor: boolean isShutdown()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Not shut down");

        $r1 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Still has things to execute");

        return;
    }

    public void runQueuedCommands()
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.List r1;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.Runnable r5;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        r1 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute>;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute> = $r2;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Runnable) $r4;

        interfaceinvoke r5.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        return;
    }

    public void runAllCommands()
    {
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

     label1:
        $r1 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.List thingsToExecute>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.waveprotocol.wave.testing.DeferredExecutor: void runQueuedCommands()>();

        goto label1;

     label2:
        return;
    }

    public void waitForTasks(int)
    {
        int i0;
        org.waveprotocol.wave.testing.DeferredExecutor r0;
        java.util.concurrent.Semaphore $r1;

        r0 := @this: org.waveprotocol.wave.testing.DeferredExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.testing.DeferredExecutor: java.util.concurrent.Semaphore numTasks>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore: void acquireUninterruptibly(int)>(i0);

        return;
    }
}
